%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.1/FA 3.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:46:05 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular
%%+ LMMathSymbols10-Regular LMMathItalic12-Regular LMRoman8-Regular
%%+ LMMathSymbols8-Regular LMRoman10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 3.1/FA 3.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0945
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCBC43190EE840144F9F053FC85041782B25B9AD3F9717B8AC
5A4A9ACB17B620DDA2C76AA0DAFE9BBDB18C93484CDC022ABE678A7F2E298A7F
AD967A2EA7DC41B8475B6F39E58816C7A84839C069CFBB069C10AF00358CFFC0
C1779D733F531FF661381DC983DE2858E791FBE5A690808349DB8ECBF43DB214
9627D250AC3F036BF1377D071EA58A0D10AFF07F15A799749C255C27EBF31A30
880B57DB8FDF8A6088AFEF5FD1D7F8363E5D0A84FD8B9B57CB16B5DF771D52B1
8ABD206531B6B4968A465C12CF8259422AD260702C4419860A94D0E467A9832E
FAF798C19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2016B605576CD6872771
4EBCDAB1E069FB552B244921DD51E77A5E23628762E804EDDD045FA702F68652
A4BAEF9590CA0A13E15C370563EA2DC1F5DC10EB0DD59EB53FE4B506FA04FC21
0E9E3DD63F00738AFFF0F2903EFF7EDA73C577BC8C1DEDC1B91AE582EFF2AD2B
9B2D6D097A7C9E12525061EDF9DB348304CE2D53493AEFE8B0CA716456CFCDC2
DE5A13ED881088B6B60682F4DD99DD79DED8693042FC09D14C99A69FCCAE3D3B
AA6C3EFEBAACF1427FE2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D0C36592
4B43BF6CE43C9140AA5F8FE895E4093068661D8BF9F0DA75C9221E3F45BC7A8F
8AF3361EE4B989D3A028431C635C595DD6FC8268C8DABAEDDE41FBF8349AADC2
125874360EED1C72A524A9E19BED13D137DFE3F0185CABE18CC0C89440046421
9578846685909845C2A0BE9CB7DF7AC21D9B88457317ED0F6CF9FF5A2907997E
B6B068D2AF9356F39EC3901F4654DA943F55F75330C1BD055F17E7340B4E1A11
0BF7ED2BBBB9AD9B8AB909430843B101906D59FEA0253535C8A6DD2D07F4B95C
A0B01830315A8BE52B960F67D6D533ECA263D30C85CD8FFA9D4D5A11EBF823F0
CB12B9B888942681DFC2715F371A8AC15F1687C92D7BF00C6F8129E347C6489F
D4FC798AD913A7F0EAA156E3EF0EEA375E66905D49892B70588D708BB273A253
C5266654D1AA1FDD19A24674F7A8D5A62B6009C8031D505D69DBB5F5AD46B06C
B8429E2CEF1DE4692B1E2074B7116C3845EEA16B5282A7375B3C445C604C440A
08A67EE8CC94D5596272F4B60F7E43809709F8E6802082807F46295D607FAC37
F0413E0CD5D53DFB5225C201ADA22CA8D733D3A12A1999ED21D5104F79B84AB2
852CAC651AF16CAC17111963E719BC2BFF4C7363937480B58CD2256C232F8973
C6C5710DB3ABF8562E1D016CFFBCD753899CB8F87ED5B96927C3992D0E2576D9
850BC6F08AC6F1709071BF6A734F6CDD2CDBB4F35F7D6497774B221B16503354
4CC77116BA609E37E9038CEFC41BA172055892C47614A9035E7EBE5EB5D606A3
1F7EEDF4F0298C9AE254619CFD825A5092052D289A653949F11C130F37E27A62
B17E62CF33D2262F538E6D307965D35D68353E1FF42EA4870FE04CECD30821AC
842CFEDCAB3CF67B65D8B53A376CBC741F1FF0C7AE99E54D87C8AE7446DC3A74
512FE0F2FF7860EB06541D277748AF1F586142B2524A3820B01735AC4E879A71
78CE33B7FA4F5DB548F3000B0048C5B3845873FFA22DC68DFEBE8614E05A7EDB
61096A55A294ED70EB7ED647AA1A4FB74773690C29BBF86F53AE6F81231B8FEF
F1E98FDA2E6166780E3BA3852310C3C27F57214A1F2B18C45788D6B00A8B99E7
33AA64B039CFA5FDDC4AEA160F30F006E1BB2E9F3E4AAA7AA9EB7F75295E1CF5
1BAD0124C1C996F03578FF6E93F270C13863CED436BEB2A4BE3681818F820B00
324D5E6F6D00C1B164F14183C30E5343D2CE65C1B010A5F5C34F34EFB93169F6
EB3AD5A1FE45117A0C41ACBC43774A411032EB9A0A08480B94D57A95A639C79D
717D1A62CA14E018F71DEAFA448258460E39549BC1781B89BDB53A9752A6C92B
470D7D7F201AD2A486937EC5E0331D522494F1279A026FF6E7FEB0C0477DA65B
79AEACAF019F736B0BE357285D5D945DD0197A2B910BC0793E55132B9C12CB0A
CEA07FE1A99D03F851BF811AAE848B8F7F77D5075DEB91445B6011D4FE891B91
8DC0343A01080548802256F88608947AEAD6D9670DD996AA9FE4D4268A3FDBF8
F1A8EEEC68C6101A90C235679195FB197996371F4CF2448E3FA080F2F719812D
43D7807770C927143018447A70FD16A84D97A7DB4E6BB61E56591223190F13A7
72ABD2F45F92A17CCED52E42690F9808BF40C0FF302E4E863FE130F28AE4F7AA
E4A9D1779A747EBA5F945E05D1A6D9171AE48F32140F3893EFF849FE4E17A69F
02E7B4C69CAAE6531350186F97AEE58D9DFC7713870D1BE59FAD51FE8B1EEC91
9B75ED0EBBCCB03EF5F13BB2C4F0EF5A35DCB97AB21AC9F5DD453B1D3838591B
D4A0179BDDE6524A75ACAF60A9A45DBE10073E3505C3EBA20AC324DEB56675D6
B64DFD240A527264178991EBBB9338766F05519D98CD6647F5024D51CD78D79C
802EEABBCA93CBF9681B8231B2405D8C11BEACC5DCE371CE0F825A65B22E682F
7855684CB30A51FE61DE94D66C33CF7BFC8FCB5C2015EFB5070DD0E20298066B
78B7794DD450A9BC2708F01EEC4DDA2C386289EBD7CCB6319582D7B0F7571F47
A6673541937AEBF236B4D6F4854E03909A403F6731BA048411129DB0C939EB45
253B4022AB3359D2EBB743BEA31863EB72774923AC44C82D135453BD56678689
754F0DF6EB63AC7302F6B526482E4C9257CDC556314D5C972D31EEF4DEAA05EB
DFD7F0B5FFA9569F0CF2DE5F44EE9D993A463894775B2DF1F871924CE2C0479E
A8C8C337504B6B21D153A515079CC4F3EC104592D3D38E10A40C93C9958B2CEF
0A5232202C7F74C30A4646D8726DD73FFCC1EDFBACF5A0B609037E464AB80316
A44B5D596C6FD3CD220DB76EBD1D860A54D8E656ECEA88768396EFEC282EF301
A6AB5BEEBB25F619D67246632A04A14A7EA94BEED293412E4EB6B7D7B2A078E2
6A1657650D50CB35C74C886228984F609F872CF41ECABC321E0A4F6F62668E63
9DCAAADA19797B2A3AAC758995A7355F79D0696406794EA1CE9488C855936EF1
55DC90A020CEA122A36D71C5F5DD0F4BACFE7CDA4FFE64DCF7591F16BFC51EA0
DB9C210F2281CB50410BDBEDF24EAC2B1E0F17A856F22CFADFC5067FA0E5D929
236579DAD5A6BC105B8E6211C3F31F7E43EB1546BA7FE32409951CADA934F889
6AA603778ADE21E727EFDB1CA6A63F460F5B31AACF1C19C21C3956EF741C41A0
BDB45D751F6641FDAD6065A36614A684728E804DAA2B51B443839D49DE5CE537
DF8352F461141C01613F3886845CCAA039D56200AA2DFFAB67E3CF8D9F42606F
7BF8F2C0F92CCA49C489AC56BB4FAEB441E712F66A152CF9F800899D54676A2D
0D85AB1C7334C656E3BEF70A06E3344AB0A708FCEBC57DE835AB5980A3D5C5D2
A827FD059DF62DC7F89405E165A3FBE9874215BB7E335C72B31AB0E0721BF6B1
4C2F3295817E73A2402436CD148649BC421B7C750374E9AD06754F99F206791A
CD83E54B4F73CF066C2B9C5DF63FDC0ABB95E0C51F56A593B4BD17DA633529C8
7CB33A7E80B9947416A78AE939B689CA3267B2BE5B8178E6B7889A33771F8627
6E68AD2E41AD688458346234C0ADE6580CD710315C8C992EC4EA2F014B1E08F8
2E2D70948CACB1B4D21F131F43A783E91F21A754E413C55D5713C9D3ED528247
757063E630D6045F576D9C446DD56ECEEA07228F0B0DD14607161FE4F1526DCF
6D389B34C824538EC663458C94BCA7DD1C3C56853E002ABC509706C00E045DC5
52B2E5EA058AA13B033545AFBF576377A48059E6DECA5D00BA874DF1C0A8D1D9
28B222871F54B0B774CB1F93F83A7F1C70DB5ACE0CBCC50DBBB4EC8284631410
D4156C420D073AEF009C3F8AF10CCEE6956ECF413DC3A85CAB5CBB66B4656077
CBD73D1561064DA0D11E8B2EB840E1818F6F1CA6D4123AF4A23A6E5306072985
B6B7FFD152AF9EB2A58DBC7F4E90371976C5FAE1625D62879E4B5A7F10378A9C
AC2491C3E9A1771E30988479F2DCCC53E722341BD44BD713BB383C1215584389
5629B71900A3ACA96791E39E6A10B485F6884A7B560FAB7F0EB5F6FA72DABD6F
0BE5297DCB069F4A7B911B96C587E65FD0058E0576018C728D613DF1DC35098D
EA7E69B397DE95D81DF8AB287F2D64CD173126E3FDCF7D711DAC380E4F048050
E3FB3B7BB2E3ADB9A3915C53AD8A5BE8C2B56F53C1931C7FC6A9319A055F5676
9DE68B5A430916F45E36D0FBB705DB00488BAEC7EDE0CBCF1AC4B2432B5FC671
FC5A672F5C8FD02CD8175CAF404032DF21CBA457DB65770C16EA31CE31F9CC43
89F36295AF9A767AA3A9EB2E5C2790F8B1187C9BE2B4714126024DD013CCE6E2
B4DDF83466480BBAFA40730E278828CBF869D7E5E8AC6296D5821F1DFC98C4CB
8B995EEB19420CEE8E6B3A012AF00EF8A7E879A4BB01C27DFED27E3DADCEA182
D1C573C3883AF97D367A60AA9744BB874493329A8428574898A4431060C062A8
C25B332B02A1EC7167A159265490F34509A694696164222B160A6ACBF9C2DE66
992CF4DAB3368A64C98FAB5E483644BF7C85D411526108BE7B72351E48E30F6E
DA6F6AF28010B75004203E9C274FC1F0F59D7A86D619FE0173EC94BF04179249
4691B655CB9C88996A27E4435BD947A768ECC0CC7A3DAAA2650AFF078F3F5D67
D9ACBABFB0C03754CA811C2667B98729EFB280A85DED082F6CB035DA367C3FCF
5311083B89C86D81AF27BDCBDABC57569B2F2A420EC9F149FD6A55F1A51A895E
285885972115BE3CE57645355991B4511E39D8B71F1B8622A7A5D19C85A15795
DCE6245908215940818C0E1B3883394BA9D92D60D33271BB572126735E72BE44
078D1F71342A97640D82FF2DB3BB3A4EA8DE8EB3C6469D98A8D4937DF8B47194
81BFEB0FE849E292D6FA3E7B6584779D8BB07972C4268948DD3AE550B3D8CBD6
A090B9572E2881A8D9E4BB35CE2ED27DA4A0F8B83154BBFE9F13E4F119193F64
6E28BA7622E2E44E7C653774029E709393A4F8DDC88432FC775BEE16B10B7FB0
291B68BBC5DD2C7A5ACB4113C9AA0839F444CFE8AC2F2FF46DB2B95247BD8261
F39E31ACD1D8F443AAE0A3F0C050249A333A1F83E14DFB02F66C33F17030AAA7
B0A2CEB87A0360124FD1504C60DB8948A5C1C441D0C9D794B9902C9C1A8E85F5
75BC1E7907C57A28A440118DB7613A4CC0BEF80943F7692E2DB667DA7E075077
0213BF6188DC183302136FF6CC18ED1B0B8BA643AA958B11ED879178611E0E2F
AAFDF0A13E3FFD5C3925F9B88CDE5FA2B78E5652CA2B448242D63618E2D25068
DD374600A6ACF8B4FE9ED5B391A5D2DF077C55F3CB3BBC4F26EE89E4F31CCC08
72C502A1C8B0CDD349098F1106F98799495DBB3A05C04BD649053FD293869C55
F345F4642D12EA28AFB297DE661883CC13A06C3399BA82A98F151CA288979D90
7126C6A6BCDF7DD623DA490EBB2D09F2A0667A4E0B5D6BC5439622D0710C5606
69674F5FAFA68FDD22AD422869E28828137C706B0CC676490B725F50C0CC1C0B
40C04D1680D51033154CDEFCBB4752F3D8F9274D85C1B59A2A11E07EFD6044AE
D524B96BCC9F0661D553F814511378EBB3037BB0667F038447900CF0F71F72FF
52A8A4C819D119551A8B29CCFE994002D3673A778B833326CE8172363B1B4AEF
DFEF2308AB26931A723A236AEDFF5676ACDE6EE71DC9EEC1130741A68CC9E05D
7B24FADC2B172D329D0064066026BA374F067AEBA832EB995E27D36EEE7386A7
86E482EC5AD877C3ED6A86AAD4BA6096F6E76B47FB3B37634F7C143B29D61433
ACD2308168F1841D0C155198B329FB463D88B53932D7A24C782DDC093059E1F1
9DC7286BDE84468DE3D7B5691166D59F99616224E706E080926688173C83B958
8056D49CE921742A12D11F083A6DF8ED299BAB6929D9EE2AA44362A10F1795E0
780C412A606D33C0739D6C391159C5FAB5960A2E3E913CC7EF0A07843E37CFC7
62CE25DCB7C07A9FD4973CA9936C7CEBD55EB56E4256A94E79E8F147BDDB1DC6
07885E12FBFA7343990A15C20E561C7D72EFF375CC4D0754FBD4107B9A801E9D
4CC88CD0A464B57E4332F3DC5D5E4706C542AAAF276BD5E7F7BEEB9914CE4255
8ABC90B623AFF1FA2CB3EE64202DD46F253C83B32563E2C59FAE2822A98F20DE
1C232DE16A8974475F36FA1D9905A3E169A1A02B17E1E5A321FEB915FFD2192C
A8295936A18B42F96BE5854A7003C281F88FFC4DD9E2B7C8DF1C241030B68FBD
BA63C29C3A63E888B26E8171A2820119CC673B84AC595B4E3A2CB97107F9ED79
EEDD6FD3B6613D855D5E17D6020D27DC30DCEA9798BC49D9D9D49B9CB9429CA1
97321B54562509398CE92E437F4DB5105AB65C49426870C7FBAA8C2D1D513754
ECF44B9D06542B9F9833A1E36C15301FFDBAAECC111FA5EE013E80D4E092D8B1
92E25D2306A9907DF8E730AA237099C3DC5F258FE3C18EE0A1752532AF8D8908
3F4DD9562632E6B227DE1DA43F4B0D160100C2DB33BC4FB06C0E793DADEE3017
92A7EF4CE1047C153C87C51B704E3700C49E10091FAE714F63A24AA98A5781F2
DA400DB05B36FDAE4FC31181D59149ABEFB70C66BC2594815767B0665764B326
446A071B6F2F362D222A5CEB4FEF889EC88042C30A58B2473A333E603F36F68A
EFEF88DFA8F545B8CC39EADC00F42AAD7BDCE1D80995284AE927962D3CDE05D1
F89C5B497B45B3EA9A479B91525E753E3061256FCBDC8CABB9120CB6FE9C2A2F
5E9385BA8C8E4A8406B993088E210C91279AAD5922A3546551F93A058FD1CC04
1AE13DDC40D378D93B056E4D96B1E598D94C5DB1549CD557CF4DE95399C560D6
5DD1CD2ECB3FC35CD574419CC980B4DDF530330D2690839DC0AAE1F2A93E2E19
F5DCA53EA0A57F3C9E271DABFEEAE10AC5CFD56BC98BAC508CB4BDC8DB58FF54
C825E7A07327ECDB2E83DF3355DDB6250BADA65F839BB6CBAC21C9507357B0C5
D87B31D622120D6EA45038626FBA51B8409CA6FA9B28B735ED6E7DB302E9AC30
AE90D2AE24504F2E921D2551CDE2853071B8B14A6550AA382A75AD0CF739EF1B
49B03532FB47262C6D41E1A93375E0C9D3121B1EC95AEA26CFA55E9A4E9A5B2B
808890A43D9E7F59104AADCF797D13964FB174E3C63454AFB214A8944B2299D7
5F55E04BB7221B2D2658C06D45E63C9A5EA8EF66FCF240291EEA1EC6E334E0ED
C575DEEA0C73666D12F2D112B93EF7ECA3D1993A2B670C19B19D222051E7E89D
6F7CBAAFCFEA55E5D0A7AA9FB8E01FFE7121DC203A89648C906439A411D09BA6
DBBC7DEE251F5A950D0F62F276A9161DC1D4941C302791AA7F9267FFEE49CE70
902BC81395F39D911FC35330D3134DE8F40C716B11D0A6E396D355576B9463FC
161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1708D3689449C6D974A97D5AEA
4652625C005977FC252564C8B478AF69608C3DFDF5EC927C6E79972AD10D4E80
5C40B5D779A887A15B8604A3224BC443B7B1339E01FDC5E42D99CDD9306DEA21
534DE1FCA4F6C6BE4FDBCB6D1B1935DCD24D67DED3C5ADF52EEDE57EF3EAC944
D97EFEF2C9E2E43707530FF446F58B37C73CF2857A7ABB3C86ECDAD8A1324574
CAD1FD05A37844799928B4DA778EF4D4BA03548CECD9D12CA669D16A0C25A85C
F598BED7EBD29FCBBD8F6DA5C9DCF1E682A24EE12B834A6D01E0B31E568C3403
D78F8ACC16D72E155435171FF7A740FAF0E38DB7DF1DA1BB41D984B457154D1D
F0103E0A79E52A1898684401E25CC37C0FF9DB9C5064E2E468F590617041BCDA
B4F38A44C189BFBB5CBA860F9CC900EBA7E2E51251D0A365FAFC66389761F543
6DA107749746B51D550513626E0C22A301504A6C3B746E7F9A862C9343872F7D
BCB88B7D3C2AF94919F4B9EA6669666A2E0C195AF1FDCC1347B4D4AD31E7B1B9
3CB1A2DB181104E45B650F2BCA82B8CC60A0156706987C7D0DB913F1BBF8A7B8
FF80B01387078AB900626C7488A61231C7BE4C83A079FEDB80E93F82F7477A18
0FF3D6F876D5E3064BB81E690649EF8D1E13F8168F3DFF482F375F80F39AD1A9
760230747A6D7869F727AFA50DBD59B35B8BF199555798D5A831727B24EC11AF
D13D92CD744E53A729387C6E48EFC3641A1DC59A816C933FF5319AB34D1D2920
9A16487327DC3CAC470BC33A673DDC4423BD1B23F0E139BA03B56B4F220560CE
72BB55B8C0077237DC6BC48AB4BF001752E0793D5F65D8D54F9887042B709094
FE31586B454CCFDE1CB0F17F31B2701321F8D5535DC344DBD4BD58CD7D2FE44C
8E7DA87C2F677A6BCC37466E50D17FD2084FEA4387B1F76ACBF8C8B97DF061CB
5A7606AE4A6A86F7EECC222CA705C035DC49777BDCB812D84B5F9009000B752C
FA7E50A7F96791014712D201625E702EC701B68DB40148C9FE39D955FE41A893
49C725D6087973C557588532474D9E9B852BFF97CA0E3D67F352E8F9DFC8C909
3A07D46B3102148B03F0B16A49E10335AC90368B31AB3110CB4EB8D00DF6246B
A012F36F4F85A0222594D963206BE3F0DDA325D4D34B30CA26826FF5722801C4
4B73F726014E5F80CEC413FF211D31B73A3506F5C42C194788D20A71C7AB8A5E
0EF0CFB34CBB7A5C6B40C54DAC21C52A4D4991997862933CBC8591121667AA1F
04A4C533EE8B901CFD0AF403EEBA2C52871812F5DD26AA443B6B73E80D855F5E
BFF6A5BCEC48448BF4641B74BF8864CC28D7AAD8EA3FBBBB407E0ACC58419064
4EEDD4DD9074727F4FBD3C035BAEBD18239DA0C74B200C2A29C34AE6255BC79B
73AE14B980A7C35761B1786C4EE8337CC2563BFAB7A1C79DBE2F3BF63F068754
40F1A672DA6A04C28C460DA2A483E9826D8813326ECD34A188B0A634F3FF7824
578B03CD8EACE4E3DED172A63B965D6F9B998BDC34BC133952CA2B44A89F85D2
28EB0E9D2316DBF500217E18D4B2EBDD92068E8F51449ACE52C22175D508C60C
F8884E969FD66437FC462FCC201BE0F70AC43BB1D4751FD760C3A4195AD85146
E60C1A5DFE65AA2AFB5669696BA89FDC697F4714DD79C2409F77EA29BEDBDE0D
AE65E46E4AEA15BC16B9AF420812DE85BE0DDFE97636BC6CDF6AA45409DCC490
789170A2624C51339D1C6386B376FAE99E75FD5CA67707F4A39624F83658C39C
3DBEA4E2570779F50E7BF593502799DB7595E69C5A574C9BE0236C29CB832B10
1E098E86D766B266B19AAED827EDCAFE36C902D96C187FAF34BFA6434806BE1E
BCDAF6D4A26A62D71FAF1F34FCDAFD71F1D3B4E8E77778D0AC05594DDE0DAEEB
4C41EA7F65D44137C84E6385F74AF3DF4FB28C3864D72D8D7B94A64E89B6161C
E07638F5717D3DC8C84889EA000657D8244CF19E381A976BE6413D0E5D7D7D18
C4D60EDDC44F38CF67F1C4C11429C607BB5719C3C8BF4DF11587B446754714B5
CAC01906655133EDB151A97A8E2BF3399C81C4FFA474BB9BE7316720D6B0DCCA
1D3BB05F686632D02267CAE72563F58C4581BA97D682F833236949ABA7ACE1D2
78FE92D775C73CC68BBEF2649F3334109106DFBDFB96318995B388E9017F1CA6
FD60DDE8F3875690471C84B9C523234F21572B4DF407490D64A45B1E00B31CFC
BF9A2B9DCF133FE9A9E139ADF3B5BAB3EC8706F1B95A2E82795863FE3E5C51F5
B313935FE06915EC13744D2C3EA40578312D4AE9F368DBA3C023AE65D9F47930
02F9755905EACE357DA7BA92D34C5F66636A92A44E75CA20DA9DA4F0FA49B85F
1E2B61D2B53DD712E81AAE28
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BA22C873A42C13AFF73AACC425448
8A571F1CF7A9B7009077815F2D3488996A754F0D89465BD9F32B061E78C54C77
BC1DF51167138A612BAFE409CBEF302E61421FC31A29D22A5C46B2E75557BFA0
C123C0DBC44BC7BA77E553FA3B4CE88FE87326511247518E629A2B70B0577881
BA6D9347F9A8303DAD8BDEEE87084A02597EFE61648E12A39645FF56EE699F30
7790BCD315EDA91688A93A38F93B29D9CECE2FD6EBA530B8D23B99D0988AFB60
6EBED2F5B107088003B7EC28E6D0ED3BE5D5861FF411D7878200BDFFC20DFA02
DC20A1960E8A8B35AB4F94BA6FB418D6F642639515FA33D5F39264ED66082348
4D9F0480126A38B03F6E52ED2F1DD38A57AB9AA6FC582E9A9B3EF960B9FB7E00
2BBA9FAE457A25E6F4C50D363F0EEC72582203ECD83BB1DD2055E022E24F5D5F
7DF0EE68AF524C88D6AC9CBD937D09C5B716237FF745E42FFE834504450958CB
C3FD7EF6D0B586320E85CF476D07DFE1E7BA8E5424C8D0A899F621CB490A6823
BF823F3230555065F649FE81E6B3B1E8D0ECC21206BB80BD950C1170D43551EB
9F0C85FA334F1E1229C67D5BB1F69EE90459E00A2F7DBF72B2191F8A281E6314
A36663DCA8D0D1EA25C291CCED6B43B67052CD04D314D60CC44F0BABC60F72CE
2CB794D5D86E1A0419D95795B155256CECAE9184C1E3851FCE2BA9A86A1DEAE1
30BFA3F6A927E3BA6903B35183A80EB555699747DE22949B1F18D2EB4F21CBE7
7541A399462C960C43534F19FFD61E05B8B32000D4F6A0D9B74E591BADA348B0
91A62946399CE5904565B6E8BD789AF034B4D7243E9141F9FE05CF14F606B403
F1E87CC67D20E51721C5739DDF1521604BE019A51F8FEAA74DD627CF29E7A862
62EF17CEF3806A39140CD5073A6E046DA695E4F30CB4906C4E0310DF2D64F17F
A59D0ABEFA11CE987CCD0277C9843929D1039829938E915BB220A5C653EB9FD9
F30F1B4CC993A9AF084A8D82C5E24E3A304AFB4241AF328E98BAC8AEF2D48372
51BBBF065C283B7C7B3BD08D72055FCCC3F5D98ECD3DCC13EBA3049418E59C54
18E1938E8D4C46C3BB844048F77805546EB5A300E041D441AEB933B08E86B537
A0CC012744A4BEA7FA46C14DB12973F7963CADC84DA9CE87D81D4F2306F0F4CD
8882D55D517B6CFB9D939CA9DD44D88E291969747968A767404D62A160242A4A
4EEEC6955407F7993C2377B237D5781382E5F54472863A43FD9895C72B839A36
171E129FD3D861CDF459E0DF961A5281ACE5534744D5DCA956F1D0F86C993ADD
031C747FA6722534BA34991AF3F1BF309ADAF8539737ED09A882AF74475DB676
698CFD9496C05FE3C487EA912A18284AFFE60A0C7A2BFEB165D5351D5AA1AED5
A136EE418E16536B30D75DC4E191163059E840DEE907A6732FEC7FCBE148C74E
9152BCF1576FB299C35E857F017AE8AFD77FD6FFA5346A76F2F993D1CF12604C
1B651319AA6B064DB3DD36E33B8CA20C04B5F40223B55EEB9518F5BA89906339
18F5522EDAC1E6626C2D51739B6DA26EF696952EB21EAAD2DA728776F90FA350
63944C672E6EA73115DB6D6453764640990DA80E7B7654ACF32F737961660719
E8594F3D869FAB0C30E807FE3F46CF004AF4D76C8434E66ADB72B6710A1830B0
1CA027644DDA7044E0146ACC2771C893B96FE305B9AAE352B78A6A20247B49CE
410908042ACDE9414264C06A4FBF6CD22747FD308450AE7338B33D7969A92EB3
3FF60A202BD1C6BDB9FE7824823E37DE05592BCE6FD4F9FFFA9F52E03458A43B
D42366D549EEE1256555177E3D6A0B9916E47D5CF22101A8097E43949B798E64
18C80F413C76C41FBBE956F29D1917487D86E52CC4A79BE124815A602C826D37
8DB18B9B53B5ABAFA5FBA977C63E3C9DB14CEEC7198EAA9270AE8B041C30E460
BBEA210077C8763E5C91D4689F7553DE7432E5B553BD7AFC2D8E6F357B988719
D173F4FBA16DEE1DF371A889E06E4F7ADDAE5367EF6ADDDB306D7C787BDFC218
F0C58D3C6EDF1216E5E0EF29565C13911775D6F447801DBE77B00ABA9707D8B4
BDC7CBB362ED6571E7BE314685A1B6CAC2B6B4B50BCF16EF9825F6B20090E4D6
280C5283754EBCB69AEE85B34A9A5F22879FB0BD63A2938F9981B2C52F7A068F
4C440B5BAC980CFF66BE9DA2BD1B660010CC689721AF1B4CEAA3CF90E2897690
D4338A3D9785BDDF596187554A5389129C3D22C556E2F6E624ACC2B41BED1AE5
A5A4089E1A8D17FA33196674BB57B4E63258CDEC37461EA78726180C6C463524
FCFB9E43F3A31AE52550223F360ABEFB00FD05F5B455C62AAA76E0A5223DA6A6
7682A05FE78442CA1BB277BE9F492E4D13C3295C2234F3CC6854E83CC631156E
0315F306643F0BFF06EB0DA016066AFD35FF9B6F7514499706F303606BBADDE4
73259FCCF5FC8641854CA50F5E1CE54AE464C493C65CEDA434824D694FF9D6C5
E62C93792E82F8037F9545793E4CD73A9F28716250FF85D542DC42934905B875
CE18BCCCD4EF93EFBCC026D43DE91F9D0922CBE43CB5782E34609B04176ACC90
C9DA947260922F22D2F2351D1147C61EBBCD7164DA7B602475EF5245111EE91B
AEBEDD15FB65955F91EC0D8597579CD2E0064E5832E860F937F033783A442321
92795C77CE23E3FF07B8CD35DF6320A1EE1E270FC43E3207CD3D34152E7A9505
05550B8420A45DB0FDF9B94F09E5EEA6E8C45BA8FB7D7D91AB2AF53C297A7959
76B7A9FA67219727F949FFCFA845B02DA6330AAC8899CD0DD977AEDAB5FE6DED
172EBBCAC68218092F4480C7CEABCC25E60F1CDC69E178C52B5FB46AB460EFE1
7923AC043A90C3F15E5C4452AF3E1AB2933CB806D30441EF2F23E27F8DEF1FB0
A24A449B1D1D0B47D0C8F0B3F8CFBD1E7C67B663300FD44C35250329D5BAA315
9E63FB30583AF2B5E88F32140F3893EFF849FE4E17A69F02E7B4C69CAD080292
FE3310E52B775E59EB24C3A0CD11AD8D92F7626E7DAD30DB394D570DC876A06C
08E3CF3E7821D6EE325F4676B8B0918754710147A13BA938FA06BDFE812F08E9
B0246119AC8D529BF3F2FFCE3341212E7F76255221236BFC6730241A41A2AEB1
DE5FBA892DFACE7CBA9401F5C03E5AAFA36ED9F7A8E5D9BECFBE4384E04B0D6F
EEA31DA3663B1216B4D314CA32FA0AFEC8DCBEECFE4CEAE9261769E060E6EB75
4F8E89B075418D032D7BD972EEA5D8AF5BADE8DEFA9BA347858D3BB8EB28A7C6
F669A98FD174B1BB7C4564FB54FC6C71558E4C1A9D0B93E9AB53EAB703E33FFF
9D78591EEBE7AE8E745F8986516490050CBD7E0BB5ABE6B5DE82FF252600C674
08DE17270D594A2E91552AABDA55CE5511542F816C40D939A89C352200DE59F5
06812770372AEA533706FB1C83E14DFB045589F3D1F83F812FC70D2989F28114
3AA4BC8822F5ABF6CDEFD087BAFFC6C93AF8FE338E70387B4F1BA2119F25932F
14ED40653C899AD3D26C369A7FCF5D251306294295C580449BCAFD90BCABA4EF
9BEA75B2334B6D01149EF1702445F618CFECDC45A8D96D7B83073CE78791C0B8
33143B9672CE2B4E3FE94448F0A8E288A3190A2F8EC51C002D2098D94298EEBD
3E93E848FDEB52363762FE2F0BB3ABF8562E1D016CFFBCD753899CB8F87ED5B9
6E26035C6DC1C13773FE58B2717DB9B9ADD4EE197B09C44F626E9A2FD208B928
8D26172F6A32D3C5E85739E3F64F0A49416E44403B68C635DA3BF701BD39F535
7499F775010633C264823E4DCE5C27817F9E5175C0AD49A9C167D92A27D90147
85240013A05F333FA9A850D781FFD1E917A91AA6B4876B1B32743DECBED602BF
78B43BA5DAE2D9951D8F9ECEF972734422DB32D37838E1F344DA90B76A05860E
F334C283B0C2426B358A2CD7AD380EFAC172D225FB2077E00CF7F92B98BF47C1
8B7287111DA2974BB4CC54F9C497D11E6C85B2018E78352250261E141ADB4233
C55766CBC8538DB8CF06364C18D0B14473491ECC44B826A024C05421C9A52A0E
0884479EF4ECCE39B566F1E106973DA9759DD8E5D98795FB0A08C894BAF2BF8E
26A9102AD15D67C5955C8503A6BCEE71DC4F50B5B3B4962E06D983CA0C40D17D
352B303F2518E05CFDC4DFA697683ECBD25A7DCC7B9DC973319C4730E532FC9A
74A40B2812488FCAA114A41C0BFF9240EBA6DBA43BA20FF624A59FE2D8067E17
5FF02C58724CDB27DBC1BEF92517B2A7265C3A234659FABD2C48903EB29EAC61
0ADA000A7D6D9CAAC6D9E1FA7EC77B3FDBF561F7707C46753EB922F1FC0A04F5
BA3165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B46BE5DA09F795DD3CD508B4
05C6BD07CC7EE9BFE2981F5FC09EA5D64B5FAA44144D1A6F2F8BFE9A6DDE8802
BF165534BBFDD27F19E63578110A8079C749D8407CA5E191B781B2482372B2C2
0ED895E24A946B868F9AB139E4164D6780F3642E6E7A209CA90005634119D0D9
B6A6E190507240E389590D1BB9D82D6C8D5A1ABF35B5586306B2F41E7BF1B2E2
DF13C4B64C9BFD510200C2E03FA055946C61251DCF8A9302D6F53ED0F720442A
89467CA60E55638B4031091A6260F217D91DCE20EFCEBF6E0C996076068BA5EA
22915789852CED4393CC6E13B87084E49D68440BA135C3E8D3E0B4D13B775C6D
B41E9274E4D26A66D0014A2523949B68137F604BA7F1A81BDE6D8A4BA31C6F8B
4D4D32F2F7C002945F2928A218DA7B66FDC845F40059E4C22CDA8CF8B83BFC68
C6C61B7606A35E82094F8017BB4FF779B615A46518B256B2C43B27E288714A11
DFDE03CCC5709F6D806CFFFDB6FDF9361520D393FE3D0A62701D18826FEC47F8
67C4FC966D23A12CD01F54FE00F867731F2800A33133B8B9AEF03A70F4AC69DB
E3E78345B17B829686C23D94EBEA9D6C9E65CEDDB57471BBF6FF970DF619B5B1
C26C512FD8E7AB105F0C7B9A996BB1CE1113D64B375A591E5B6D177A3E42525D
2A34661F0B5815DC0751A926103E662A0348E70A97A4609B42814FE0653D003F
4AF77ACD1B3110DFE711E988086910B3A1099A46ADFC9FD09C33F30F499CF5DB
E572B58F69B5BF4D15A945E047E5D444BA9F89D55B5133EFCFD769C046A20005
104FBD57BCA7A9ED635F2C7F11A6864F3662536CD040168633408F8A2EBB7E18
3462F00ABE59333B13590848DD8EFA3A7DC720323942B77D1283642E293277DD
F91BAAAEE61A2B30C71F43F4164D26BC056E25336EE7DD39FE52747FFE580259
7B7E6B04B22D908CA36056A429F54B372902B17D0C404105753FFC4DCAAC218A
AE457BE71903E55F76FA4EC3273507A4528B213BD79ED2A40004E7C6919C2B58
34B520BABBEDCEF16CC057A802B9B3F1F20A28658292009CC125AC401A0E0CDE
40839AF3D5F4DA9A0824C92C7757BAD964F6AE9BD7C00E8F138B43CFEB4C301E
5596CCFA7519DBB19F45900677EA1914509B7D3B960EE37502CD0B1714346288
314D8DB4FB496FF214AF5B0721659AA763517C2398DF710A00EB566006351417
8F3EF5EDBFCD8C37DD1995E4EC7E279F1F1A1275C814371FCC18F0A78587E125
670505C648DA4AC086817A3DBF26874BDD3A62857FA3C723DAC77B64A5B61695
3F492542A74A0B5C7FE7E2F6F3019FF7C623AB8BF462DE2D43930110F605F5D9
80FDEA5763299762CA4E60986F5F5A6A5D4DC1C39BC2F404DB3C6BC318EF5660
BF1658EA36BCB784B51270EE9C01736B1B32CC06BF636DDF88004A089BAECC39
3F83EE69424CC20A98FBB38406D7CA292E4CB3C7B90DF03D2BAF5E8AA0900873
8846E38E374DE01977C142E0ED10318333382EA132D43F4A900FE2081725F4AE
20FF5356642D5BEFFB641C246F25BAC550C282E77B265156DF6B789ECECE1880
C29ADF8403DC91461325F612CF1421F3099CCD799C271572753ACA0892E0BA35
00AFE886AF76859D2D5137F0A334C5022CE64D636D0BDEF9A08A4AFA85AB3502
A389DB4EABA5139548EA09718566B9DE86D04C3628DA170F8DBBC8CA5FBA4E4E
99A88103935A91A910B6AC680A8EB7691D8007A8F05175C4C7856349A8B24101
35D41ED8832A32C53F7A5B0E360136BA4C9CD37FB26769ADA2134E521CCDD985
665B84CE4B056D177D9C8AB6DE487ABEFC43D5C3C6C486658937E811DEC0282E
E3D0E3C1A31AE33717341C8A74C4C04BE75CF00DFCC413B504773D9F5939F8E5
4B79142482B2FE7853B7960061A6C420A695F43E80A51EC039AF5DA58C53421D
968C241C486AEFA892966A2216BD56C167206626FF532DD43A3E0B767F6682B0
4DAF0BFD6BD22B450926B69A090620505014FF909AAEB98424E76D01937F9CFE
3CF4E3779650D7C2DC3CF3B9D57B4AB80E8594BFFC04C7F2EF1F1ADFBE5413CB
7C80CAA8567EFE9C11BAEAB87EF8DF16E533C5E0C270EE9DC5E9B758F97D60F1
C9987617248B52378E7ECCE8282DB109589611DC0A84475089DD2C1469769932
A1904234724915E3443AEE8FF128D42001F5C5E86B842258607DA791E71F4B71
945D3F0043F27F1E73B67016A5054B27D08EC3EC1406810B1D9FFF19AE1DCC2A
A5081B915F1950026CCBDC51BE128255220DDDDB5AA80C637A695D6A74B6A2FD
7FCE95CF0ABE556B181EEFAA61A240D7208050D2ACDBCF2730C10173C147DD9A
770AD2A21749E5600F9B3D2BD411FB9BA4C621F23724D73B1079F7FA00C3894C
DA153DC7E4B034607AFF88F73C5C8DDE321B1A8B5736F629B7793C8FDACE927C
8FBE090DFFAEFF608094E70F4334B48EA578982D5FEB53407BC29192867A1320
03BDA85F2BF3190FFF5B3236F14977546B1D3C5FCD2C5414E5FF7110BFC9D5E0
419ADD2F5CC1C09AD68EB8E708FB0644A2BE90C36DA268F7B58E4FBA7C92DA29
EF577186D89B13B8AA5F1D41FA62396D75D56EFA3BE862FFE1FB20C5604C70DC
9E98857AA358B5F754BC18087E73B555F4D67B93EB6417582B7D7B8E44EC96CA
2888B2951EFD253D08A28F4F965C8009F2965D6AC9C1B17CA5B33EDDAB879CD2
24BD2B3BD4873BECC873A9C71796A78CCFB19E111895943C6CE54E4990F54783
F3F12333244163A50CB3CDD40500DD3014D53E32719381936CB074D67C9B52D6
51886EC83777DC4B946660818EA103F1754ECAEE481FBBE5E79C53C00D984C56
5A46A4902D21AEA09B41E78AF2C1C24A39C5E1B3C64C0DFB42FD4C57C95F8F30
4E10ACEC91E65F8C929000F8C366EBDF55A43D7D06B717D9AD0A25553899FE2A
76EAFAF3275BCD65869D17CC993198AC0F39883F6536C3E6D139BD4CD0B2B6E0
51B46412E84C34F32B465E20139A45FFCFC2B1AD1EBF980096ECBA8C469E2DE1
EC126130E9C0B4EB1E113F8666517DF9D31A1DAB03652D4501E140EF3ED7A1B9
C2E885C88F882E29F4CE32B88DDEA6D3A49A83886DB260065E423B426EFCAB1B
A1E4C9E8D54121CA17B97876FB07597AFB867B901CC96B098E153341BC606532
64E799832A468D399CB9F5ADAD2B8E5D150CB3584CB2DDC5796F17B54A16ACA1
341DA1B2C1AE0F7A914ABC04B6F4E9B305A2A3A485C78170A902287102F4AB2D
A5543DEF2FF8775E7B12D306CC76C0390F9E22E95584F01F8BB5AE8CEBC14619
57D7490B4925B9C608D8D548AE1FC1A6A17F9584E3801B60E509C8F9D526BC97
D4E175B21A8A8651D7852360B14596130968AFB5284AA776CDC3942819204B36
2DF9D25C8D5208E1E3019BFD5218EBE79578A0724624BCF0324CA6EEEEE7B4FA
88BA66620BB08F65A08BF76803E1AE9D5DBF74CEDC0D5D35D8B99854C5011191
AAA5605CF23680C0DA9FF7E6BF4298E548FE405D01D18D8CC0AB6A895DAB0CEA
C693810ECC15C53E710CC7E4C771F42C854766BF66F28BFC3E67E513B00486C1
EBBD183EE29E23AB775EF86375D6BBA2CE1180857992FE8722AA8966E6478E9B
E3326266B2D53D8C44BF4406642BE1AFBA2AB46019AFA3789E28E1B6C051A083
AF51CD07F3FB4447973E31253DAD08488B1C71AA6F08A5FE3F6222ACF163F1A4
EEF90A1251CA9E8AAF7966EC96004C09C4D9F25C4ADB97D6D5A602B7D3EC89C9
2FE3CD3ED8A1A2F03134B886A9483867A5E3CB8A961CEB372CDE1EA852078118
EFC05BD25D51283D153D8785DD1AD632A308872F97770FC0CCD8482EC70CA6A0
A4A162381D825F45C11FB547D657CC05714F170AC2B490A94F98BE39F5EBC589
442CFD31B10B777D6D0303D8672E444155451033CEEB619A1A05A5DAB4C473CC
5665A315BF1B163C9BB372A97F09372BF2B9729D821A95E113828FC83BAAC642
E71F4F4B001B80A6617F48BAB0F19B660A922617123196D10B062BAC23C28669
45E46981F9406B6E4F61160966A85C35C6C4A987E2812B8CA402021F33A3B306
589E39DA61D7F6DD26F9490C8416AF6C8F2395D57DF91F232C891575F05D5997
6EB80A650E2F6951FF4CBEB193B07081FE9B4A6E1D3A4BD9F0B7E0B28447E741
364E315E7A1E4E27C5017557EA0AFB8EB0933FBE74940E3418BD07633AB300EF
A22290B3DC8113DB1B383EC98F8367ECA28628FBE2BD69C5BB80849B85FCC583
ED6BC743C7AB0E886970FBD51E0BFF44D56F0B5A0AB3CD1F01A0271DA66C1BC1
AAC437310F1A7D586CC05048684AF27EF3C09F72A7082231D7AF3FB95A99A921
1EFF34382498160E4B56B322AC19161569BDE0D66D79B090D239BB28B04F50B2
0870298AE7FD1FD28CDDB4DF465DB9A8B025BBB49635333B61C1E7227A2B57BC
18102D4483E6E23CAB9F3FEF2D840850AD921A5A247FA60A89A2EF6AB95CAE1F
B11B327573E9760C57EAD7CB37952D1A0E9F744FBE8041D6CC290CDAE87B801C
0C536C101AA0D77A3B65651CDF7508EC94E8D7193F90BC0CB304DF4D689A954C
944916979C56F6581D93BB225684B50FC56691BB3A1D226C2E01E54BC531D159
0368D32CA7EAD87D6D12938C8C15B97384737473437C06B83385AC9411C3D47D
893F2AFEDC692E4118AC445D88D9659B81A1793927F359319269D09F8A340D34
B06DA4FB00F763274628831334E1E727FEEE04708BFD8F085EFAA28460323E61
C34723FC8529F41F1314F690C7CF1CD8CF6D0E1335A4058E25F6D9619B9BC0FC
B40E5323A575E10783F79F90EC2C2B435FD29022DFA29A568E3F27DF88EED64E
45DD9874A61523D23194F124EBE86D98234C679A1CA1503EEAC4658CE24F7DE8
ADF93767A1D3A0AF7BCC25BFCEA010E023A2FB117C47F246413CE860467D7CC0
AEF52C680B8CF1767915D357E341B9AA26C0FA6F8742178B15884E33D4CE1749
7C23921B86DF0C8DB362171EE6945F7B3B383BD93111D710105CFA1FCFB9788F
34E0A1E814732B482450562384254E8FEA67970A39F150893C460EDABD875702
C05640EBFB7766BBCD861AA5F8080B536E53AA134D9B7F37A36A441FF2A26CC1
05BCCF12CF0E044E911F74366983E8E9DC02011BBF21045DC09C95C9AE4B4EF7
35A5414D985A662B83758D1D5AE4904590697E8612476C7782BF11CE0DB4718B
426C20B5288AD0347968808E0C31A589D0709437B2464C87E51DC00983F964BE
9851244F76C01587E7DEAE9BDD7E614BFFE78D628646C32C1D95C0DAD9F355EE
9957104759BEA0F7D0201F342B0E531BF23E9A7BA6A4EB32CD52FD99BDC3BE16
1F4C1FBA9B854899BDB63CFD4D814CDCAAC830DD6D2B2353019C8CBCEF379826
63481954BF641FE8BBECBD8F83F33779183066983F1E899A8593AFE260F9E5F5
A40A469C0464406B7A1AE86764E6DF50FBB44FF8C272FC1493F1A99DDB2E1FFE
7A63212EA6DD1E55E7A513EFB425B3A0F9ED33760E52C720C3A7E0ABCC95E0E0
8A723F6E80F10D4754D067FC40C4E60F13869795A7234CF01F9C6D90FAE6D5EF
F289A9B077A2B8DFEFDA12D59DE5A8E2A2AFD63B328775E3B4483C8A2F18AE4E
AE035C8E95661CBEBF373488BA0ECC231ED2161A09F81D9F6E46150920E0156D
E04E084BBACA7BF9F30A095709F949F40490F6751FB0E9271CAAD9E1B5205059
BFB3F5AA27D10E337086144AB09286BE3824F428CE44873FF17704C4D368DDE2
B930D4CFBEB9FD0E43E15BFDBD9D1711C55D85517389B468FAEA7A34B3794146
BE15A3A7CC5114AB201F66EE1B03ED1FB7B2F4CF70F680B78186D7F391CD91B6
222E88C0BCFF662088122A1AD4F7F545B7276291BC6899D20210CC12012D47C0
28EE084D3117388A7BC517A62B79D15B613C7179F42460776DDD1273580D1BEC
9E882B2F7A1A617781BBE5E6C5B09B44B73455D293113BDC0CCF64BA27965D2B
38A836F86AFAAB0557EE93F87FC7A5DA5D62B266C68434F2D1AEF226547BBBF3
5F04915D9D269A840CCDDEA5AC5CC0BBA980D1A74CB4E7A7CDB74ED5E18A4CA2
E1F74126E705D84C5D8946BAFEBDD990BC58E653AA0B7567E025B926C6CF9935
D1EAFD4894A600072ACC70C91B876A4C59FA2E881F5CBA918F299A849F5ED006
AA52A23114FD6B917DC85604DB4B0AC6A2D31157299A01895DDC8D2E18556CB1
80390D43CF505B0C6D1212CCC7F398B49BA391FD3A7B3D47542FFF5987268E60
E7FD64B017EC6A8D68BE49BC7317AC222D65C592DE9810EC5627944F56F2617B
068AEDF0FFEB7DD80B2AF0AD023ECB8F8B6686EDD6F048EA4479E6F02D75E2FC
0A94AC3448BADA5C84822ACFA0C5CCDFA25165223FB04C30D61441B0D8380C62
BAA681058317B975E878DD5C996A014C998B467A6F51B20897C5D9896F2BFD0D
101F03E134E14130A409334FE1FD604685676CFFF64C9F2630CABF2F83D137D2
26BBFEA3C9FD3C762189575E839ACAEBA85304289EEB213EA037CBFCBA7D5AE1
F0F68F9EB4455D1E7B40EA5676F0DC6D35CDB53BA93A15B889E023A11B6C2A35
FAC32CE9B87BA08C53CB64A7A0812D490A1C35149937E5B23169977C728889EE
5596C05E093E5C526BC73C08E4E7A4099B34989908E4FB3FDA3303E6BC7EBC8C
3F90ECE5DAE55E52D809F9ACE1C8167BFCC77AE8415C0FE2858FBA08D6AF9B49
ACFC71131694C405F36C8F710B467AB3742A8F1F204619E77C87BFE6FE50DE54
7A4CD3C7D183BC2252A2712FB54DF5652EDF278BBD930EAA537516A6AE928658
4AC739B5D1D0322B08C610708617F736363D15A0DBA9B5726E510616412B7B63
E421AC2C8430FD153C826DE11EC9602D4654DEB38E8E94225D8F864E791EA66A
0F5A0952E32CFA64906B285C38647F8E221462479F2227D691D7D495F0F61816
650594C12BB8FBE7297B1B8152DA68298ECBDB5E6259038E085D6AC9CB4E4BC1
D7C2248A8F6E5A7695FE9B0A14B870DE831E8E3374981B68564692AB79DC4CD4
06A5EDCDF6B21235E05FB023A6E44AEC660E02AD5C0E438F96422A0706512FE7
91EB65AE23598A51E2CDF7714D94E9AEB0392FA173F1E9BF5DCA6B4037D93A7A
74FAF4F5F0B0C76543BF7DA121B8C73AFB3730AE0710CDBBD4971904366ECD40
83FDE377A8E800BF093CC74B3F067CC1DF9ACB14B37046D36F6935162E7BEBE0
5757D3FD361873A46BAF9A259683BA62A5132CF549382EFA09C2929066585CC1
078171719570AFBA639D9AC06D49D4F4D92F7DA55C6F9B3BAAA570C4900E12D7
20F2812F28626DE3BD3A369CE3DC0B975063CBC21192C28F980C58B6ED119B89
755C2DEAD0690379DD5578A156314BC78AA750E91BAAA793706F9754F6798BA7
B8225E8763679D012D9FB775AEAC224212F6086D865C491EADBE21EF5DAEA504
1C6044A6E604A7598180C7599FDC7A3CF5B6AF26E79DF061F7A3CF3C6BA6E993
4C3911316220EFE099455232455CEE31D6D7E9C8821D945DAED7FB5E33FD5121
D3770B48BA239B9DFEF1751E7E403F5F91F911DDCFCED2D5582C95C114805AA5
62591C3969760019C54EDE008DB2C2FF734685003A3C5705F7C6B2F2D6F91AC6
2749BD9C54F0C201C80F4D60994B9841785AB7FA3A76C89B41DBCF25F71F6AA5
5A17080ADA886EDFF49FFDB283EC049D3A67FF331D951F5A0132415FA3866CFB
B9392E0A1BFABCCCA86E398C839ED8D858AD4C773175799B685B89D401981E3E
55A0D070D6A1FD614572BAD57D43F3B1771EFA1E5AAE0B9E7F7F265666D7579B
CEA6D053FE58FA2BC93D5F38F67B93BE909C4403FE3258790FF1B3FF67F4C958
C8B60D1CDCDA2DD829CE36C293C763F39D565A6412B716076E9F68B17D030537
3271A4C069322D42C893A30D57904BFCE14913B22B6848FEFA6107790BE7B3C7
F55897154864FD966BDC275557607AAA6AD59AC21FC387EC30F1AF5343B6D1D2
491E61E60409D7E5B7D4980F2C2815C1C06589E44233E4E54C8C02A651898780
DF30B2FBF656A1D53EE16EC1039ED262767482FEC93D5370B05FEEFF8434A405
C1A2E7250CAD23170410805D19400A736213F9916D014A560CDB431361D04C86
C8AF21A16EF07218D080D765E4DF9A51A71C41BD0169E6CDA2C46A1574A39B61
A5EBD0D519ADA5800638CCF09AC718F307E80B29885BD8B971C8670EB6567D6B
6592B463FA2680A5A1E7FED1E46283199D5A2682BB98767C5A6AF81F6238F191
2F06CE23D9B929E7E8CC23A65800B6673118F12D7665C52DFB2BCF103AC9539C
2941B44FFA1EAC827EDBDDA678126D3AA061FB3614B789A107719DE1E109E5BE
FC2A4098E77020110C37A90B5E6237115E803047AA5B5918D80816C40281FB8F
C65B2687D86BC48AB4BF001752E0793D5F65D8D54F988704273C7C63D27A9737
43521EA5B0C41133C69AD75946DBFDF51112A41EC3DFB3D0E6ED4EA7270F783D
6D43AC00641E33E4FD96E4063FB23B0C1334231CACE3B876EACEAE023F28D1C7
0ACA3396BB25213A0F8087A08EFE3C13696B3AB854E2350677895DC6E31E6A6A
9AE7E377278A32DC0786D064B69A9D0C7BE6E9DDBB45E069C587FA522A415C3F
305CA59C6A6AAF73B486BDF80A6EE4E6568B256CE6A0DCE180C8257A3ACC1122
CE497D5BF45F01304FEF91C882B95552C5215183E5FB51605BAA7948D6E5178D
5B9B29086676AE09AD2F2C71C240A7FF9D029A572CC331381267A2B06A906FE1
F4332276B85832766395876A3653510645FF66168961B7D66288CF36C97474DF
133A0EA6781213329980CFCFB18CF7CBE6C7FA3C27329FEF599CB6069CFA2C99
17F00E7676DA3426665A73D5F32B5AFDFC1D6678376BA32ABBD39841AE090FAF
C229BF014AA4B6470AF1DF4F4EBE911581EA3BE89E4CDAA34E0D67BB2A55F002
7B42AA97E4C570951EB81044DAF53BE86A0CCF6E0CED48DDC2782659F1684BFF
D8C924BFC119517D6CBCC5801FBC11E66DD2F177A96555E878D1B5ABE8F39810
E56E116A9B7A57CCF2D98BEEFE6AC7711FE1F3D3B8C7E75DC8E0976CDFC68F74
20AC7C24169891EBB2DA4852FACD103029B18A67710469F2886E0A043BA3C01E
437C24EF3D21D49F4343111F577D0F2ACD6C9EAE1C9DD33816CAC492673FD8EF
21552C79FA5B40ED3BA7C58A4C0393833FE74148954EDEAC112E610AA8E23812
B67B33B19CA80993B12950204E70FC4ADA4F3EFDB4AB679AF8A301C7E37DCBDC
047B3476CFB09B8F2BF57A32D8575FF60CD63CFD0F284E3EA3060282322880A8
5D103528A79957F00BF8849A73B9D49874E6C690364E0FB749DD482B26C72BCF
BC83EB70681A1B72D52CAFB7988164F0FAF1A6877A603D9C4E7A7225662957D7
3F8C73671EF750E8A4AA0890A6F372CAB498EC729A2A7909FBBD7C484104FFE1
30F7435B8AF8E3E48F1FB707361AED11CD0D58A945364D207CD28DF6B532DA75
AFCE0C37470CF33E0343EE600934EDAA288C7008F5AA9F3346DD1DA8863058D5
24C307E771E6A1D218CC43E4B533EF7F6C28CD4389FF76611F4F66A7D5946B80
004C0E779B984C603DFD5FF083E15F7D3F17953C35780EDF551954A5FF633C3E
277A8502356F0D010F7B359ACA807FA7DAFD92201E4EE37682FAF7DB0D00593B
EAECC408689C22518BF0738B5D9542EE3F31F0C564BF513DF4DAD72F0CA534E5
78AF480E1E2CFB05A810CEC26FC9ADC524D8CB92CEBEB5927BDC5566679A7794
25202E0B155BDDB020E95192162B539CB06758950F60B9FD0905F7B2BDBB8904
44682A16A8DC6F3B46D35B6AB2CB7F295E9EA7BDDA110D381E37A080C42F9ED9
CA58E88C81FCB2B2A5707A896EC55D98E82E3417677CEE755D41C6192B1A78E5
CD388D3B32A636FB671E4E40B80A4655625E7A40843157DE6606920368C4217A
CC1F349B4668F1A2E78A45060FE843B1840E1C8FF39D1EAB30414DB51A137D77
F9ABD0E2F0575A35D76F48916E1C68E22D6FD80738B059D9A30A0A7E0E96271C
661E7987BDC37819EA86493A8A060752E9DDE0EB8A9BFF70765A42958F3C2DF0
5B7D767C859D1D663FF05042DE4A9E5B7B64CAAE8BBF6D1EC7CBB18FFE3770D2
144A90B673D356685637CFB400C012B65339A76BB21CC0F90DF727D823FA238A
17EAB8004044871593E383196C149DAEC4602CDFF452E8F9DFC8C9093A07D46B
3102148B03F0B16A45A3FE0151A25F30D00D4C62F1885AB4E33403E2CFC06F95
37EA2F27E17FBC9CB51282BE65B77EC75B27276AAEFDE9346A418FBBBAAA1335
253D6C5F8805130AF87F3BFA402A59E3912A2D653F59AE767BC64F911E365305
3DBEC458EE8167352D34D2BBAA3E4E43E4B63E9F3C0E8FF7632AB618F99B844F
8537534A10D4D4E8816D51A2DC99116C8CAF88B98C4ADD7F99BFF309F8E166F1
E8D8357F0E30D9AB91D18A904047CDEBA28DB6F5A67303DADEF5D39741AD2338
A121B0DDDE9F48C52707F00C2B37D1D5985E833FAB882F2BBE7F91023FB68E2C
EACCF4F682468B85B6E27F2506897678EC250B5D4D07A9CA99C8DB9FD0CB297C
E10EB83CF5858C3A9931155AD6B4B07BBC27352E72304306D1FF955B6C4DA2B8
8183B9E6CCC1E6A72F4B7F17FDD57F675C64C4CCBCE714A731A5AABDB8161AD6
B96274CF1C3867F0409A9D5710F1A6FFA490B18E3D34DF80B7B41CE33E468014
DA1E2925C9442D6B2E5E4475B488C00F9F95D584C11CF6B22868DB73DDAC0762
468B3E0D9C1070D7CBAE9BBA72E82EF9914D3AED6D1A553CED42BD6968957F62
712B8A590ECCA10DCE3E7017A8C2CB4841D51BAE70D95A6D611FEF4E577E751B
F09D9C920E4A194B3FC6C5B9A2D040110FB65661C694C9DC3BC93F90C2A118F0
42F6C6B69B93A1C0C8BACC9D542199548B6F230E090FA0C5F1E78AA868EC026B
B6809E6DCED02CA1F2E2016DD9B0CE51CB54424FE3F0DAA85C2364A2FB6A6BDA
CE0798D7D38700023644E438FC08AF1217FF5B2585A53C7CB0DF567777A203D5
3DC8B5A858574BFE1E1A7B100DFE97200BA3028D61B705E0167D24052ADAB2F2
78664B6B8C3D8D491D9FFDBE49BFE7609A3A9A6169F71931CA77121333159A2F
7BD608D66C1BD8D4E785C3E925C603428D714D036F1F5CAB39CB7B7AEE5C41C5
92D3594E88259E5E67B4A1635275B14DA9415BA54917E8E7E37E6733036789CF
BDAA22F4EF03F75350D742804CFB9939EF8D282B21B1A97DC2B00BCFCAEA66D1
B6CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FAF15DEC2461F4B71B702841
5CCED34DB25B1C87ABBB91C15C8975E976CFA23B1739B485A104149B0BB586D0
8E1CD6BA1770628864B22DEBF1769BFE0CAB9125787CC5E95CB8FE901EE153F4
DF6595A23F56F2B69B01E119BAC95E8661C5D3A3E906C456B89B5FA51F2E5874
CC5556319ADD82BAFB15F81F7DEE94D7957F84F027C4A5130AD30B2A51231D39
0EC7061D06EC6E8C7D65DBCB27D03F38DCBCFFA1A3F181B05C3C213DC5AC2098
CA5A1E211F0A7E41C25DADA26ADB1BCD36CFB0020B11D1CCC9186C1571D50641
3DAE3F87AF2FAA84D03E7415C80F0160F3F7D3EAEBF92F88423728E8C587A20B
A016FF25DEB2871CE7A7D0F693483A66B9A23B8C360DEBA8A5AF8AFC793C9A0D
D34743FF4E2F607D326971A4F6FCEF7F287A916E702292AFC748B2469955202B
066B61CE1A52F7FF2F5300892D3D940B91DAE5D38974D787CFD79B37FEF51A5D
F8257A9F2A36125170C7F887C28178B036AC8106AF29D23A61622899A6CDA1B6
BA77CF4525E91037F30CF4BFAE66306F49C1CE04C07F49CFE72815D6E0D4A5CF
F29D96918678DD62D47F4A19DDBA89A37FDB52F4B8DB08B4C69E32165C69FF03
6B3D76D3012E5A101D147F591913A4DA03F7D45BD47307C033FAB76B8BB409CE
D108B502C53C43FCD19DAD6F0A5D896AC24EEAFD16DAD411B777E590F06A4E08
50383C3547E679EB31EB6C1DE755E355D409355C847C05416543DF2435BBD4C1
D7EF7BBDAA841F389C6BDA4F94D89200DDB63772D73C36E0280F8ACDDBDE5CD4
F4FF3F151D0BD24017EFA1DED65711B579E0B60F46E590BC7118B3394AF7EE70
76395E67C3CF9B71BE069AE6C02B00B51384E7425D02E35C8F3A3ABE25D10788
A7AADF158E708298C154CA1CBC5A2347AC28E960123A0436591BB42919333748
88A6584744692F87A67A218BFBCC8F77311067F6E7523E6288AD183ED4EF5407
0D7497892B624DD1BD888D966E97636661BA71EB2229A1B1EED0B758C6ED9E5F
2CD9DFD4EA2DA55316A0D84C58F0A9A9F30B33940B0958863E86DFE2ADCB1F02
6A83787551DEB7EDA7E4179B1843275BDF289EE741832689D383FEFB7F4BE250
FA7051CDBFB8046588A8AB06312913F3F487D9DCF874E03844FCBC8713E52442
538E3C6EAA4CC8282F5C4AC46F670E7BD287A94CF9CB94B5BC7F8DAEBE2F8813
556E1640562B8A6FF2A3744F9885B7B7D4D75F85620061EB2DF4472122948167
3698FDD1B0B9CF53670C41BEB73DDEB6846B9DDFF6230043A407E73C9C8A6483
B276F549F1A94BF1BB530DF2E71827B9C15C5358A55FC6858529A16EDD63FADC
5665A0FE08040311D1ABD9AA600927677C9F430FED75EF665AAF7CFCB391BF4A
0EA9FB7693B821B3FF4051E66444BA29C0F1D913D6E2906F5A2D07BD8A31285A
39F9D9DF4DC559905C5FFD16FF6614C4D39682CE254623EBD48F301B04F46631
626586FD77921C79F575F902B7A7E67AE8CE18FFF62B10812C6E452FA02FE7E5
F20CB7C6235F682BB3519205D57B2CEF340812E6D930B7AFD4E4A54628328D23
7FE0661CCD74A8556DCF585DBAC3EF75008B2E269872C5CF0F68286DDBCAF8CB
1EC4F1736568AB3B9800CFEE7BDA8C37BCFB53072E2C1A0710B46F6C806A7171
DC8F4E86F1E3322E494B0E1EB18D2DC29BBFD9378D8E898275EEB2B9BB17486D
50F90B43D5C64A24965E7BA6C7A4C59DC071F8E63B22CBA6684CF59AC389979A
C060DCC4606454904FB9E7BC9FCCAFA7675AD2A7432584FBEE461DF583D049D6
8F7F48CD6985EE6C9592FB538C274E3C6468252E3D4EBCA3B424B9087AF01C82
ECE42EC3D79A184699683139546EB66EDF4E05DCD6B42322CA28639F9AD980D1
1BAE60248EC0132F4B47DD68879E2FCF99D1D663E4F3355EB6DCA71EEEA24526
0C082472F41CA72C4556A408CF87613909AB9B81AAD056B175F0EBA0D990D3F7
BC810F5B9ECF5E2765FC66B1CA4770DF5406C0316645AA6E7214DB1455F0BD5F
FC7BF4304713942BCE511A8D1D71E4BCF317360AAAFB7C198CD8DBE03A3CE772
8D8819BE48F14F0E2EBBEC84C9D839CF9231D4DE942B7951DF18008CD8352214
47A44807B5D89D0FE464663AF7A14D549FE1CCE65AFD00A134F3C357C1E7666B
A9F121A12E2C40E898DD6EC3B2310F954E38346A81A9B5737450A51909A2CC20
ADAAC3C0C63CFC3B7ADA39C0AA97CA287AA511E574490897BA75B742EF3F56B0
5A820837AC9817EB7C68C2E151F2AF67440EF012E0E34541032A797FE8987570
1E0CF12E7BCF4C13D0C960054C412A0A181BF7976BCD76FF3396195AC3F54E50
C8F384F047CDB99DC20DAB0BEC9900B0D27C3799FDBF7C3B09BDF22FB32A2312
06CB4F0DADC4769DE0494A4BF14767F030569E72B6A5C4A05A721D822176A6F5
C41670AF7DE888173D1F368A3B611684EADEB4D48442463F0251FFE9359F6D6B
9977D9D5AA4285551E0701BF41CFDA89B4AC7F3458E454204F37045AF26C13A5
51EAA7CF25E76C9071F9FCBA269F786218DBF7656108D3676B022CF1644D9E44
2BAF3A050BBF110F335FFE5E7239FF72C4214015600D743EC5AB985B3C5E8D3F
F5E64D5900CE45B9FCB7C2FFDDCBC3F97D1B94A5F039EFAEF36A2F2705BF8BA7
8824DDC93204857EAFC7820F87A2B52ECB637A4C2DA33910A41B49460BA4AABE
192EFE9835085157A828AB91422DE0CA5EA41E4604713EF7CD7C66E9803D923E
4859B4EBBEE2CA3BFCBABCA7D4C9D90F414418C714D6B0A0FEE97A9B08909A86
4492612529D4FE44D2B121610B7BB4D74B18D2F38C1D48D5D4A9F75C5B3EDFC8
46B3F9BC20CAA2EC06CC57AC368E87B5144CEA8963C5B8C04FBCC9854FCBA817
9DDD42A1D9DF391796BD340BBBD837FDF6C93475C6A90F722E6E43E7C50DD0AF
3482B0AC6F537AA03AB6FD0D5BF4C9BC3213A5BA19D273725F0F6F21CC05DA1C
E1392F29895BE53E4212079FB6E4A7BBB4101E91B84180444A0A620BE82CD9A0
C013AE7BB51009D18EC3DF24FD66F52E2D49B7901C2B61889EC71365D73A45F0
A3C44F88621A0DB5963FF46F7B3F029BF15941608F836B88360A4C0AD525A654
9D04B41776E1F90B551494E2BEE2EB813B03690A9737B5F50DCAD816D501A60C
51FB1F38771C27251A53ACAA5C42A731ADC5E20D30F30C0043A163D8177D3728
532EA6FE3C80714F25FD65742272B4615F280CD5936A40151E53DA3473706B4B
941FF7A636E495BF176DD86B157A08932065C0ED42A05181E0B78E90C13CE269
23DDD4BB935B1E5B47428000E45517A3259D93773DCB2823847EA18AECF20E57
8428AF5EDDE7607CBD810B9A282357F5CFD4CEE04BA0425003143DD164DC3EB8
73D842EC691A54F6FBB2E63144A6AFF42F959773FCCA34722228701925FF1CED
784964443C42B344E72AEAC6128335BFEB762CDBC36FE9115E28C4AF18450054
B201B2ADAF7DBC8D5BAC9F3568245EAE6637704C683E6C590BF2EF885BE65A9F
57662C7908E3D0A7AA9FB8E01FFE7121DC203A89648C906439A91DA3FF5D969E
9B0B73981745320249EAB62C0FFF85CCE3487798BA29A1D810481E1BD9F496EF
7902AF13B18EC826A82EDADAED7AC357890FD5FFD52644BA22B30F7CDA7B5D46
26D767B4F7B819A630D7B11D3D98666AC421A7E78B67C80C1ECDC82AB1528A78
0DABA486BB4E2B6BD605D073E021874C0DDDB20AF71780918E28A33E6B3839EC
B21410BF1221CE0D50375335458A4F733ACA536D6F7D4CA008859F117577B0C0
FBBB3E966409D4DD725C420A2C37FFD96E34CACBE438239B8DDE99080AF8B448
4EFC5DE5496F54EF7A0056FA700291A079E3A0399BD4D5CA41D3ECC3F6F96B20
FD12D29A4D644584C7B4433471A5338D30C5415E1EAA2F31A38DF6CC2BC0390A
0C3394F1B3C38D3B5C767E8C1605F1F77EC8C0418D82F545A05180502B25155B
73D6D7FCDD0B407F725096DEC84C574452605A8E2D4D83EFDD6D503C3316C7ED
DA3AD5A84ACE6F8C51299E860EBF0E2A3625A173207F0434C9599D05A19F8D0E
852CFBC41FAB33B8550080E5A71FE92DB5618A5A4B36245A9D8C5500B1DF6D65
3B27ED51C250F4B2E8E214864A9C0F0DE6394800F2FFFB4BA2C85CB5FBC35D34
A60627DC40CB9AB16475D55A3CF1254822B3585BBE6B544DEBC72AC06DBB2587
03EBA2CC4A176B1EE20A0A0709D6C9E30AC4FB02F551C5C6AF76A0DF223531C1
2CDEC349D2325D6FAAC3C538A56146A24BECE5C6C1E4B035D4223F6F2D1D17D4
BF63645969D0E93F21AD9AAB96B7D9F8BC20D78E875C22E1F22B0C5C178AB80E
B31D3DA5A08CC0BF9356B5D1E65323C9938A831B4BF00290B79A6C6134F9F514
8881103FAD5B9772EC08DE1424D2420D551611F1756B58168F9FFB572D787B2F
FE01BC07C0490B0C890F4E78ED27E515FED0D2127C266A383D88CFB9EC16E66E
B77D4EFEDEF0B356013A8C8D0FF1C1FC7081C516B4BC5DAEC90D3E8782F7536B
6A578F07FEA92CF9FC4CA8CE3B38B842A0BC09149CB4CE7304C2B99444607B28
931125C45E9F06A9AE48560713ADA5048B28F82A76FB6414E6C277543D4AA0D0
4B945257A16BA754214E91AE048A6470C1D74BDEA77930F4A857307D09D8736D
E10838C1461A191841FEAC9647367BA11EA5EB8D4676FABFF32DC03E94702DC0
D15BF4854541918814F5E0F77E87C3882BB3538E15B9C6C1D465353A0D84229C
2226465DBD27291A7AAD14E9464F21D8406F63B2CED073C5F6916F9AF0C5F519
C9B8A966DD6D10A492BAC74F574E5AF7CF7F368502B037399E335F2DEAD06903
79DD5578A156314BC78AA750E91BAB551232ACDF0AA00C21B654B16D6E82C06F
383ACA8ED6D63156378F4AA09F400EF49715BDCDABD4EFA0BD65C24C2EAF1846
94442AADDBB4DEAF6141D460D1FE4D5BAFB1D33454CB6EA8CAB5AA5ADDCA2FEA
BB796415085A098772F632B8E1AE26BA4CC08A38139660C9A3A2B13077C9E860
FD25A4A697C3F18F402EBF1896B40DC70FD1DB61C03A2D1F9DA32BCAC746F42C
A18764E5644F2C405AB1EEE94C8BBB9FB6B30D0C660C58D19BB9B23202C0BF10
BDDC1D1B6D686C6FBC080E5ECD20F406A61C925EAE09EA64054B26923835E59A
B90ECE9A241DB0F41CB8F41411FD72C6E33619E904570286AF4D18741273DC12
0969CAAF54CD5F89FD89D153C58F0D666055AE1254675CD0EA94A638DBBD0D06
27A5AE85B3B7C07F2865CE66370F16927135F55194B9F6A1679797BC5DCD87C1
B92746E8267FA78B9321B7497195A0D094FBECA8195148EF85AE8B996ED24774
21F6A82CA1E71C3DD3B2BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8FEF4C
8FA43925639BEF4B041AD7722616B477CCFE4F4E18CEA3A79D573BB077085030
671EA04152296A8AF5E28EEAD2F0388A1095746B34AF1523F2CE107C12723983
683C6CA8537DD653B7FC3B5D61014D1D51318A76C4B8ED7F65F39C3EFA9C719C
A104B524DB78F5B5F255B704EF8E3EB56E15C79B7179EFF16BFA397CD5779342
1834C47D5672565EBC80E7DC882DC3CF7B6CA10E80597C6D46D97550C614A3CF
409A91055ED5CACBC8BF7AE410A2EC287540D764A4635BFBB44C18DF8A379C22
193172318686ED9E447F8E1859AB08BDACA34DE171D74388C0E5346B76F0A646
87AD759AEBD0DBADC1EA404EFAAF8BE15176E475E95DF937A7D749BA50292621
9E1D01834759C1B53084FFDAB17F02BB6E7DD57A7AB4A2C62B23E032D95B61A8
F02EDAA3D1552287455D693FBA5BC6292B909B851D1DB9FBEE9078A61A3878EA
F3347A63E2E5D92EF2706C69E83A5AA0980B82702C20B548189D085A7DE57A98
3492C2EE49F007589A2A0869871F1859DC38DC0354BB10BB8F8904CFEA6EDDEC
28F35F4711B2B3EF19EBE4B82457F5CFD7666408A166312DEA1F0595086BCE30
20D70CD9C3ACAC1F7C1C713C55DA41BC860829C1FC5AB7FD0E50294C91E426F1
222BFF42D71FD442CC584FD6EA914F5FCFA9A23037BD3211ACB969A367EEAB44
967489A34B460172AB269789DDA7DE2C6165C003FAE8A0C82756B921A63B894C
1E64FCF603E92140B149F33ACBFAD34945244C01F104935E52DE559F797020DA
C0ADC9411964D2EB8E4559BEAD533D5C6B598DD56974529CD78CADC41D9815A3
64DD46D9E3EFF08B64329E39312A8B3CC3ECC12154FBCFD55A03EE91897647F6
DDE9D1B9B33BED01D9B8FFFC229EF2635A58CBA13B584DE60C97AA158F47A859
49FD2881D28B935D1A346C5B78CDC695F0BE89FEB4B84CC0A3F6BE1B968E6F17
50A2379975EA8B9D16715CB699C46D137A70B82BC1471F59C8E83C8BDDE0C6C1
670C8E1A30BF278A959256964FC491B37DDECE569DA1CC532B9FC6714B59908E
6BD23218713ECB1780C6855C94FCC02CC2B21C06BE83AEA88DAF7295707C8C05
7B54B4A9624B1FE10329496CE6EDBDD11AEA31DE8C406C9134ABF2EAB0A9B1FF
0BC18895BFC1F3B700B684BAE16F5A74BA988F89F885263FCD852F0E28B2A4F1
AAD052694EA59A7A62922FC625AE3CF4A4D2C34A38B9F346E5FBC1EC7FBB58F8
9A73B433B74131B56767F9AA5CA5256758F29699BDBF420C15579168D4E7F017
EA4CF2FC6B4D770ECF6CA360052399CD1419929D920ACD6178F28C7A6791093F
C650B3B00F605F00205C205B35DF9B09559CD4BBA960C6183A0C8892CB53E6B9
688648C6824BDAF99F15F7C116DB632E372CAA22D747B160885030F3E9A1CAB1
83E05EF9F3644BF2530CB119078ABB9FF4D9D461FD91C88AD7CE0DFB5E45C649
F44580845F0A4C2B8460B4921D3608C16D646A7B27917D3DBFF4EE78AA297AB0
E97B3290EDAED775EAB0D7D553F222A3B01A85EDDA0B2F5191C2C721CA94A3F6
2DF5D6AED3AD275E66C277481778614D372B043761D928D66FCB9D760D34EC77
9E3D9C3668A71EA6E3A508B70E113C92688F8EC9C2ED4C91A0A5055336EA2E3A
555A00F773535716FBFDC0DBCFB3F096E3A2A49CAA65B4D366415CD128CFBCF7
26729CE6AF9F35B9EAA46C7074311F67E32AB14E0C0E68790026B98AEE3C8F2F
A30C42A668262623D6A60F543D13185DBDC938B5A37FA78DE2B5332780BFD3F7
FD1D7C03F6EFB53A76019CBF171C0FA972E49CC55A1D7669A0DA64B3B327B28B
5E97EF34E9086C0F5BD4BE5BC77BFBB9972E9A3F5D4A444F651DA0C3FA51ABCA
77AAA035608BB2F19D89CB9ACDD84F46D40B38D2BE60D60582539C29065D42F8
97B4D21C5AE58CBE93BCE3B522FBC3532394EE473E1D8E54EC3176CE6D4FF9E1
672415F7B96061C2E73315129DB0C939EB45253B4022AB3359D2EBB743BEA318
67340CA0BA459DD05EEEA240F0CA52B8388035D20B3013E756043BECE43CAF94
FD846C1F61C885FD1A730A08380DA1AFA9C97DB29535CE5375C17E056A35C378
42C492D9FE69488460352E7F6497C9C4BC364259B91096A56BD30EB84C1B2F36
FB593DA7C108DBBFF4A1C23A0C0952BF80DE3635BBCCAC44339F12F2CAB76B50
B9E3A02FCD5ED717976001CC3D83A7B271D917A56FE2DFD95D904EB18CCF2278
02E01ADE891910C66AF375290A89404287B17F5613AF6AFAD4574E4A60A7C795
64E2906E9E290BDBFC1511A90211685519F0C01EC1BD817901CF1D5FA69C6EA9
CEE9B4ED4C96ABA6E89D981B2BF6D3BB77BCA871A2411893A1195E6E3BC1FA23
789B498F2980228C0188F9951BB6C2EB4E8174C2AA327DB9601268D2C877ED5A
FAC1C7CA42198701654412E6D469B1817CC93614757DF03C5F3A5159D11C0183
171898E6BD68F543DDB08AAA1053697EA0CD0534AF49068679ED0D370F9E9BEE
720296D72369810AB8D41D661554EEBF7F163C82CB6AD1E94FEEAF338B687C2B
52F2BA47A11699FBF920248B57DFAFB082876B72FDD69A30D7134CC8FA66E509
97C9560E91F07521493A637E055EFB165093E904545A26E9C5B2E79B5F48FBDA
53A79EA6C4A94926DA77AB6E05AF011CF596A5BF23D96530126B41CE4D0EE888
C0C818C9395370E8796A5F5124E478703AA2F758FAE0CE78634280E83619D714
FB66472621113AD7BB240DE7DFBD1F17F875FCAB9EA20C301A0DB7BCC3F49D60
72E15BF76A1812FA8CE2EF30182C021C7CCCBF1968BFF32DF5977ED6776F722E
A22AF269313CF93D62BE9F3F102122C52BBFB1A969B366569FE04F95E458E1D4
DD1D38766B6AFBCF3BCCE313013F1762AFC73420EC7AE14E3B5C8D8DE89E2AC7
DE544D0991E0302D896C0885A3542B3B7216F6156428DA4EB417A492F5F4B1F0
A6DFBF3C2B722ACFFE5D374B868BEE1FEAE908CB10FBAE73DC10F3E3E5757172
38FA68BCEF7884FC0FBCD4609577CF14EADDB7D77511E73373504FFE42ACC4F8
B1F8FB7B26B0D96CA73DB8BCD3E76A862C33A0FE4BA3C647BFE5D10949416E44
403B68C635DA3BF701BD39F5357499F09BA763980C768540A8BB14D390F350DA
0CEBF7927D5FDBA5FE73D9B8FCA4872915C725CD606381E0D1929B3D48AF4220
BAF9D902BCE8F7959EBEAE69B3F0C08E14036696351A523FD9B1B120B1FA33E4
69AEED60BF2E1158F056E4427215999EB78142C128C6CB1E6E75EBCBB1E4614B
7FA09E5BCD82B4DE1097FBA4DE7BD4F60E2FE3929594B7DF8C58FB14DA87DE71
AD3AAEBF999E98D913AB360BFC201FB0E2487E6B157525363E1ED15520097495
048F58DF9B7719A3F0E4A1776137664AB17FD0BB8F00C317E3953F276B2EBF27
05ECCE7B2E29C4020F293249320D01C6BFE09231260973142B8A69E0C2DF0E8D
6B837AA0397FA490C51E8AEA4891E6ADF40B93234EA597B04EDF4539D429AE59
4C7B889D256FF8721CC9025AE4E6BF0D1AAB8077E21BE3E767CA6BFC0A34A028
9EC7DFB7C0B58C7B93A5357D715FFA30FEBAC715556C843FFE0E0D5D4EF5E4BD
8A5B894D2C4E3C2722BB28BF71977E1210E201BBA9A805612B4645162EF63509
37C860A693E533CDF3BE813A9E25A6144C2D1A59FE283278A7DACD7ECE7F10EE
BFA65E77040D45BD8008262653C16460331612BB398E69230A58C8336006B379
69C2356F93886587934A84923F91BC3985070ED972EA00AD362EB7FDAB82219A
599FD3530CFC6088D33D617A3DCB3B0D38E7B989AB593B037C329FF1DFF890B8
6188E2691DEBFDEB27929EFCA683A83C9AD337F4726906EB3D588F93D2154BD5
469AFB8AD3D0959B08F66B79D5DD0B31BD06D9446345166ED58E13B0A387F9EE
054A6DF22A38A359C1C06FAE32DAF5C35CC7DBFA30295A8764A24649010D4615
36A8548C62C88BF21AF882B124BC0F3DD021E1574B0E2ADB99F2A0CDB3159BA5
77D96775923359BC5393F0C58AD697D6550EE7BD9127448C90F6829E56D143AC
9A5F315BD694C60B1DC71A1EB5AA101F7ED5E4ECF1BAE72C82F807CEE69B5523
22D3F12B2DD4E4EB5D8B7370D2FFAAB5BA1013209625E86D3BC3946900C72DF7
CF454503703E08CFF94634679E070BC72F2484F8C6462D45076E59D083EED901
A7FCCFACC3BB3B94582FE0F9A903BC2D898EDB72D124F144D4935AB6D459CE64
31E234BA35006F1BAD394692F1545F948BA3817DE8E54F71FAC584426F531F4A
3F9C4892F319FEC839F4D48736977F5B21F6961C8A9ACF420BD61DF03A349AEF
61C49DE74E56FF237D7A61B3E01700DF27BA7D57D89A691D2FD404BF90D03657
FFEAEF857EC72254EFDA69E253507A388DE74333F6462EE1DB7FD6D546DEEFED
FB47D236F1DF488EA9100D499A87C0AD139E4BEF897355BFF6E213E8B7FBA1F6
CF98CFC60EC534F4FF9A46F0792B732E027546FDA56BA1B42B0007490486BA95
045A7372EB87999E94BB52F8168D7B194D57E9C64869DAA10D9AC7B96C817AD3
52B5C4397872ED1E0AF4E37E4306238F06F910C43CFB7809656D574C1887F713
2F498B4B8377F6A19D5F37AF5096CE711EFEBE674DCBAA2AAB7266038BD7CF8F
237D8E9B7D4AB72F8317614AE052036CE676AA39F9ED4BCEB1C2E7ED301F71FB
281D8F862785F5418FC0CF87A759574B67A91722127C2CED9F880D5BA59E2043
9E590EF307E3EFF504F72EC8D2A2347451F3EFA021D02B02DB6D0832576F4108
9D7E46502B22D03FDD383C388C068DAAD15CE06C5A90650BC469454D661AF243
C250B6193547DEB0F0A634BB36B38CE86196A8838829AA72E7DAB35155314900
A453A6C102F1713208C99AB6CCB0BB3E50A70B6A3F13DFF188A2EAB53160E97A
A67C23795550FB9C592FC1D3D17FDB790547FF23C860C2CFDCABB5E6428AD036
B65EAB880F202DD21BFD7CC9E5E7B232CD9570DED42DAB8ED29A4FE8FD49FC9C
8914C4A02DCB27989E0752A84B8BEC411FE48CF96BCCFAF7A173C1BFD4B934D3
C3358802E96ED3A7A0E86C8EB19DA903FE24988EBA6FC48DFDADD52A8D5B9649
141BBE104795D5D90AA454C1E99D846A2E0BE2026666AD30B65C11C33EA2040D
00DDFBAC4DB8CBB74ADE82B2F84A94A3D09EE2A4009D6F67B765A59A2D0B90F6
E342CEEA5C55AD278CA8D552F4BE09591782F8A664335F67B9DDE36DBA793EC7
7E59420D144564E5A47434533AE9CA24C26F757696C3F13655AA03B08FE311B0
3130ACA988B04DBDC33125A284CCC5B6D1B44ACE90701EE13097B963AEF5F39F
62964547638732B78C611D25B86188E2691DEBFDEB2BEA3DAC6E160AE0D42A62
8E9C84C2B85361E8D921630994B2932C1381DA138E7BED65C77A3F7BBD9EA0D5
78A876C6BD880EC5EFC49A8044402B03A5D6BC76F86FEBD25557B85F9DA78715
5E6780C7B2C82C0672CD9899B12E15AF039718B40B9749C1033BF3AF51455B47
5EC9692E9E99F6AE7D777A0D9295A2108EEA1D138B90B1C8957CF800356546B0
0E71E7D74C36412F614BC37849AD3004BA89D1685639033545AFBF576377A480
59E6DECA5D00BA874DF1C0AAAEDDBEBDA6B8EF328EA7E5E6F658D88D55F4B2AD
788FF7C4D82174ED5C933E8C855DCBBAFEB8FC0BFC7E8B37F8F00DF09785BD07
C7290BD75A324BB97F140B8573CC24A88AFC329EE09A6E6A119363C4496E8865
1E5E2C5A897B0F7BA5661166F38989425F8B5DD6CA3779E8F598B2AD44D8ECB5
08C410C0DF21807C056ABDBF5DE467877142D73D1AD3D3FB7699F2C847FC3DEF
7DEACF756B352E24638619002BAC6C3E086DCEDCEA37DFDAB1D490B28C12325F
95D43DE50F24DFFCD9F2CCD2899277946FF72DA1DA89CF6F9FBFACA3A735ED01
19A05824367A4B818A46C98482D55FFC768FD0EFB91B78A79F2E8D1DBCD2AE27
1493A54F1EFAACCC687DB7121310F05F159F8D215D39A65408501825AE6A1A62
8ECB7FD9259360652C03AA333011A84CF464F912EAC5CF755173A99C331B869C
AA9A5D07DD4E68D1245B3D956F42146F9744EEB4B92B6E39E53B59DF689B910B
DA0A0D31894C3C4DBB5ABB99AFD5FBF1E5DCF14BB07A558DD211A5BBED1313D8
FF4D801972EB6C8B045A9CA99C30AD6D43E6148CD0EA829EE4C311EF9941A187
1225866E12E2B87190DE920464952A5CAC70B1A8AB77403A0B2E538CFC17AF02
B2976E5B7A2CEF0B8831E122CFEEC2DECF76AAB9B3BC32C2BE8A21751D1FF032
610410865DC43C4E9819F846DB11535B7BADE49A8ACA8D973CC3DF7BED1F3B5D
595DF13643DEBD26DA522BF30ABD1E551A9276EA210906DC669ABED65C8B2952
4188CC192F2D4483E6E23CAB9F3FEBD589B26DCA26247A2D23E1068AA8DC7910
808480E692198AC3027ADFF7DBE2AD88CA3261C59CFC1EC0418A9799A59FD504
569655370A0BFF6552FED448A144FF882A7846B5923DA02C1C8ABD5A6298CBB2
6ADCEB45DF4D007131968EFAA45A1675EE98A1F25F640ADF732D0F3522AEF86A
DEE973FED07CB86786A6D5E41428143181B7E1827B38E35A85EEFD4DB4B9B2E9
C804FE27C8B6EB69128E599534F6AE5451F2BAC4AF890526952663F0F9951040
4DB8E22F67A0586FB179EF6D92948EB286A6A720330281C4C3F429EC27C0DE71
62C31E80F92528EBB5E1D86F18AF20AAB3741FA0DCF1D3D0474EA252AF193E5E
9B30FD11F04D70E268F1D4B1F7C575AF0249835F399A5539D63AF043C136465C
5C6B4BE63799A885CB745676F878333FBBC9DC5631A2E694FB18460C5F025DCB
381E83598F64C51C6506C2458861297169F46AA781F3E927856884C3C0895EAB
0C727A6B882F96B951F948288A2B2D331635CFD6744223FB1461149869F61AE4
74E06F77AC0A4BB9DEB8EC66469E4F8F86EE5D21DBD3488344F7018BE8DB1EFD
7ECB6A9D8CA938A79C81B5A58FBC01341947A201EED8B4E96B5CE5CC23F264B5
D0D7DE745A6C62D09EFCF9973AA59D4BF961147137F29D0451CB8F5451F815FF
783CDE0A5A0B345E8350B8F483C8F8FF051A513BC9ED89A17D8CDE9B86BB0D78
06B03A4DBA0586957186405F96413EFABC51A9D9CD37BFAAB31FD5D5D81D2C93
5C95B5A3E2B2325547D3904DC542958636B581EDCA3529B7572AA4AD73D4DD65
6B5C082E03BA4D824E7B833E8985619D7C8AFBD8B07C313A040026484B57B4CA
D36A5BB901B51202BFF8AB5B5A9B4EB45A97E404E7050159457B40912C929018
D4C3503CBED9CE6D260DC546841B251A91361A53953D75312631D6F07794B1D8
53251462B09BDC831EA68D419001AE35BBF80339DB364B26D05000BCA9822D29
72D7F1F13BE45F34A5ED9367E32E63E1FECC661C071351B5002C519339F0002D
2FD0113F5AE59619AC0E8D2257525FADEE1CDC8A35E72C9407AEB30F46784FAA
3F7E9C34937B2703445943EEBFD15EACF4EDEB082BB0838A878566A3E5DF65F7
90B7D627679909F5CE6D50AFECD7230FD03872BD87E46D78B810895316ACF09C
0ED35B2745FC6A6F74FBCA5445D5B4F43726D9BC891653DA629357F624CDFE1E
F9A647275BA31FA3B1D4E0739E94D38A25BAA076116C1C2D27B9DDC03BC852C5
D7937B732A478867E74FB71F2025DB83B2808CBCF67068F475601B88915DD9F9
645D2BF1C1AABA1E2AFB1682EA8409E9FCF8E7EB173B2F166FDA22E38A447F74
08BD9DC974B522525BD5AD0D67B9DAB26FB40C629DFC98E644F5AFF9BB0DF218
5480E47C868308F3906BEEE44131B11B2B14E276F28EA447E70EC4C7F0956A59
09692CF258F8A6D0B9B9B0D1D1FD16155510EA7F6410E1511C924FA76B3CAA76
3548A91F0A15A19146E5D489B729D02E13778D5021B5A2F34B381DA932CBD3B1
526FD5B73EF04EAD7F4591B0D6B59D7284386F6082C2362E3DE8610890A6A915
C1492BCA438EE1859760C5B57291F073C88ACAB29BBDEC92BDEECEC4D91D676E
DB6AE1AE01528C75262EF6C5B60BD81D2770945D3D682B01C354FA9F874E31EC
370C8DD051FCC796C291702DCCFA1DB030D440C6E39C68132A7CBFACCC3C03AC
FAC1A6B37A909E2842E0AC5D9D07D01A4BABBDE2AC70FE51B809A78AE2C40CD2
A6D1A85E6AD482097A018FD21CA0FC425A3F168B501EFA5DB606F3EAAE71862A
8ECABC9E50D69CC3B85C7DDF71629D9BEED18E2EE264CCD373C238387259B118
1F79E89815F13E62A852641124DE871B3CD1B8A4C14606404321066327922289
B1C8B98B68A443548598FE4B613419C97DCCA081630AA2DB6683955610BCB009
883035C5CD0D653DF28D71D6E3C1C44B9EED318424A41DD2F502AE1F8EF64103
D4AAE0AB2FCB2464129E9329C8F4674D9F7B470D9D91F2C1BD1ED08C01D4B985
59AD18A41C6CD05A8E69F4E4E2C393803A98EED710D6CEC48A28BD7B79B06361
5D5CAB61566957AE18AE6ED6C800EC8324F3BFB66198ED9793D2F90CD7D79F27
B15F50FD125C5E281490A346C4D818EC74D494FA998849663CC0B9F37610F079
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54DD2B16D6DA12F60EA605290CC00
00476C0235F3CD2DC5607612A19A316267E1B0C1452F196D8B206ED266C2A6F2
A7E3A70AB491FC90BCD65775FDCCAF911EFAB9012558A08714DC88840B711A77
1548C11BFCD146DFF1E58B742E4AEE3AAB63B382FDD2568A537E7296E0EE3EE6
FEE61D1FEE981541B50456D7D18E788D2DF9753691F4849EC9D734A287BC52FA
90B551817128AC48A4BC9A1CF92590F8851FE36EAC2473414A2D91C42BF621F4
6178C694B40008E7DA6C021B36D7AFDFD5F49BC0FF2D0BAFA19F4DEE746E6C65
12AB600FC97EC1602E369563F5AC6751AEBF701F3984685CD550732FC5E3731B
80C2AC19E83947412F122C16291ABB37F869AB550316013E85171C6B509E566F
224C9E797A4D97334E76C755B9B47FB374E1C4AE3F7E57DDDBCDACC0212DCC39
B2F1EC4B37A4A3B27F51CA42570F44CF36E256CCA009467CA2564D88C5CFE4D9
C01AC0A6703CD6223CD54BFA822BF93A2668E845B645F72EA9F27E474D56D259
4C4E1C7B1F19C6CE876DF6B11C6E0E20E8D5DFD50A95EC70F09BFA426C93BA92
094E9F4E750082465181C965BF231800CA424B6F5F95F62E89B545CC8CE81B0D
750838E2AD9EF09E7739D0E3AA5FBB4AC65388AB4D48798E217604D9EF01C024
64AD16865653ED3113141A2284C1B5CA8C460F4D8BA1C7E35A5D96F6D75338CD
5DEB09057861009DF8AAE92C3D7866FAB3619FA3972B00E4BFD2AF3AE6389BD7
2ECCD60896CDB0B32788A1E5EF97C1FB9597B0A14769476DDDE5810861C4659C
A50F2ED47F7323C259CD028C9776CA187F2E2286D82D2C8D15F7116DB089943F
99EE411D484A9FE682124D906D11A0600E03E0D8BD46FFB89820CB209891C418
DC29EBF35D00F82E59FFBE66646D41994F956C4ADA9B362B2A19613217853839
2FD0EED1514AAE2F5A994B4A0ED9E2587DA43FB8C1C0E624B6DD6378DB9ECA7D
D97065253FB067D4E599552C212BC43FCD1B668762C1604BA98ACEEE4161D701
F909C84B53E02726EBDD3FEC7A79DA57CDCA83FCEDDC292190B5432EF6FE8B93
49E5DFCB00DB0C8F77445B3C774A1ACBBA25721BA2A5A0479B30133D8E662151
1F7CF945B9E04B9754FB16AC6F33D0B105B315E98E602C965A55AD02A4348020
CC67B3ABEA718BF70652F8E07FF290687F9AB903ED7823010C5650652F92E181
F97B5B0D1A55372F44AFA66FAF590F38D40185AA45B7EE82692DC175C065EE4D
FF4A62234591DF422EB53C79D16B085D84BF0DCF366B0E11A9924BD3155ADAA3
69864106CE61DBB864D56618A5DA2B0EF698CCDDF54C62A0002EABF0C4D4B7C7
8FF990ED9B7BA53624F705D1082E8C8E985613C267754C6EBAA6A327FEC3ECD3
667BE73596E965113604FBBA6CD16AADB247350E1EF27A9244797E0F0C40C159
0950AF21710A1E9D07F446382182E148750FC0DCD9D11668D5D7B8401B158768
1C3FC53C101ADA4A5B6846160B08CA0399742479A68A67F18D58D8ACA342569D
7F3DB989EC43EA564CF06C0675F4114C78C6F866CAF69BBCA88780C18A0974DA
54AFBBBA67F4881DB62C827DBDE3C35E8CF6704F369475F427FCB95A74E49F2D
4669F74CF49FBD356A06C46EC364939AE5560BF33B7DBD0C93CD8D56069DC572
E91CA16C9F4F0557CDA16F979EA349042DFE0EFBCD2166EC4A1BF5899496284D
A04BA972EC6DC7C9453C5D799D1BAE934B418E167897272ED999E7DC14BFF525
DB774EFD3AE4D73CDA216E9D8E532C62FE8DA48771099EB795A4C6055999AC33
8C57A05C4E5DFB34D440C11D044A4B59A852A69CA14A2B3129DF36848498B411
4655F06D3CB18723EB449F88342349ACB6AF903489ABB6B2EB9F376CCE12D346
0F9FCD09011BE5268E81D9A7FBCAEEE06B3503EABEFF320031BCD6269FCB4E71
1AC24FB734C807FAF8CA8575AF0895AFD9D020ED4643116E4D38C565127AF240
DFD39A05D9B7A1BC7F7C6222934B0E45F8D96DF7E19116F269E93791B78AE752
36970181DB8B57813466C20E199B5D52C865789D2F9F59CFD7BC61AE2CF46DA6
CC1D18175FAAC4C18D6795566D6FFD31962BF95111015C38637394719A5DAC9C
D0B0EEDDB53BD1B5E2336A00FAFE8117AA3FA88ECB3BBE931E9BEF322DDB17DF
4E3EECAFA0DF1389A2D08EE19CEA6A41849EDF70EF99B1C9E5F6A198F47B102C
7C7586D8AEBBC7CD8E726F9ECA5C9BABFAE956C127E71EAEB8E9AB1696D54F02
0A4B4FDCA0659DDEAA17B1FD8F15F906F655D91F65A2C520EC8CCC4769A0E5CE
BCA42186191E59DB8C3986EDDA40EA35955D862C28F93482B14AA37F9E92F8F6
49EDE1032EC5C3314BB8B8E6121EEB51287BF1840FE2DA748288306DF3C9C619
E39FCA4310CEECD7B9AD890D6BC646AAF81D02EEB0C53311178435436AC47EDB
B2E191799A13AF7AD898C9CCA510F6C32802425AE0B2CE4D3CC5A97F0815B8D2
C84CA2DA5F3E99C97D7AEAD7E536D0F5726DAB95C069EEA6763F89F7628E4E5E
157412576EE600FD0532DDFD30F8E2ED9A59F7825FFB984E4C9C375A468B05B1
C8A0055FD937E0ECC4580517E1DDDCB21A83C6FEA7BB8556ACBFBDA8F6149899
C955B44507A763B0891039DACD1D84354209293D8F6CBAB817D04EDD6781926C
DB4EF7FF728713CA655608C88D21D0A338E2CE7B19367683CC9E617A871D9C5F
397A4B131881754F652E7E848833343CF174CABE441A2DE01079F050C4052817
D40003A5C1507B7065EA1ACA0B22F4D89B63BEC0A3122EB6C5B18E806FD55A57
185DEE466528E3FBF8F3866376EB2F3C3C5C8E8127E660322BB24E471F24F183
A32B829C39F5174D2CC799FFECF830BB5B8A608A82D476CAB79BE890FBD36540
5A418DB34B541DA78F4905A3EFB0FC7B38E0EFCE50C4864DBB024DB178BED1D7
4BA91D46AD90D4ED0653454362F6BD8BE17898953A65AC0232C69D13E7FCF07E
ADC281CC64944E08FDC56AF42AE32E572F6642EA5F99CA39C9553F3B87DF5B6A
E10D6F4D37A359CC77368BB60E9C9913139334005FC044840A772167B0382305
9D1F837CF8522335EE092F973284F379E3B978112C057EADAA29249BAED5FACE
B56E2282AAE37A57D9538DC7C74277ED97568A1B4A8CACF49CE041105695CE47
BE59B89A1D70B054FBDFE790239E1C1D34FD2C2E7265B81F158EBF0A72754A5F
D750C16CE631EC7E3D00418A97021A3298881BF90C4F597019F3BC13248D7E27
FD5FF2E0C86F2AEEF58761349F972E8292B65901DA2ED16413EE1DD5D8D6A219
6F574562389A99A0DD2A37B1C413A756A47D714EDC79C307820D80FC98ADD446
40348FE3D7FA3CB4506EEEC1C33CD5041A3E455D300E9D7E4CC87211D240FC78
B6B1F33025BDCE6D30393A5E300BBD48A35B6DD70AE6653CE4AE7EB668462E68
EEEF838F5A2647016383D3632A69E6B98165C8B08513B73D45450E65E73051F6
412B61C91D5846F8803ADE13C9FAC4A58827AC6E9400259796939E9B0B739817
4532223B91294889DBBF1254226CF436CBB708731FB70ED5F1CCBF4AE3434DB8
B5B6553440F44A00DAC85719552D49E60AF61953566BC23E82A8FBE205B5F40A
F92FA007DD5779F46FF9F324E2DCB3FD7656B3052692DBD61C62B542828E56FC
F138D1BD36C76CEA684FE8308DC4293024AA385D6E4A8B3C28BB92D12375356E
066C322B3EC096A1C96D66E98F813C48B1FB4813788D2AB45AE2EBC560E43822
D28EB100C93FE91CFF26875BC7B6F0078485AC5DEC92D9CE9FD2DC07E0F3F99F
13B0EC0639C9ED0FEF53FFB91E21AC8173DD3549D1DD511A05F1DEDFE32922A7
E0931FD2C1E4DB3348187F48BC100768AD76210475F4AD8BB1D44CFB8ACF6F1F
84C57AAECEF41029D3232F4182EFDE26EA3679887E7753B2C42D692978004FBB
58B21C0E3871E6D1964AA90B9BD792CA45A6BD12D3F57E31F63165C655FBC5C8
9C75DD4DD988765F79D0E1AC3547B4B564FA45A7008F4A423932CFD83F94050B
1A66FFA6CFBCD02D0B0D6B4063371752B0D5150DA599CEBCD795AAE7A37F8F1F
4128960B6B14151C4EF9D84DAC40163B45F286B50F0B474ADC8E0BD2833B8FA6
185B7C1DFB6074D7037D79B7329A7F6AB7B5970CD0ABA46B322A451EA8C4F8A3
A87FCD1415A77459D1D03417D593B9724B1B0FE3A9A572EDF41B48EE3CF34C86
1EDC85578BAA15AFAE3F3C1C0B674D6185AAD1D72DCAA73DA4E206D0BB98470C
94DEE54085D50CB5BE5F12FBDB4BC9C7FC8D51D02DE1651B2903A4C785CBFD09
DC209B92AD7AAFC99AE3D4142C88E4360B1502136D207B67B570FF1A96303C08
666000FA59472965EB9E083C33DF226EB2B96427794FD33930C78E8D2DF8E0BA
90FBCDD4B66726069E03CCA605067989C9E7CC95F3C5986721A7C4CADAD0A399
838C67100C70402B67359EE6BB18A3676EAA67454057D3326B3FDDDA9E065E4C
160B6F1C2BD3193AB0786C7530BD2080EBEDC8B5E76C51406A0387DBE08AEEE2
FD05FF93B3C74E13C0D880618713569A33E796A5DF85C222D5D0CBB0D260A1CF
67544156D760B542757C736E6CBD34D6AA5EA7844611E8D7F056FD7FA24382BA
57B99A1179923B9F6F0BE10D33727DA1AC6C5AA5DF0035D7008A64A36E522637
A76AA9C541DDEE0E5523FB9A8F7DA48417DD33B3BC2A6FDD81C24CBB05B4DBE8
7D8166B2A25F719B7AFE039B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E9D7A0546E34F8BF633F656FE32F1FF453232617FCB7419
0A46165FBE654065FEA56AD83B17114EC5A7245AE7D9853223CADF1D781A7E4D
07DB3D4F16AE25026F52A8DDD0C9028D5B251EF32A329A624148C46F02C06DC0
6EDBDF4FC7DE2392905875FC28D07872F48FED6ECF7ADFBA23B66124203536CB
04FCAA433B9C6D4683C6C6B46A36ECA3A2B2AD548B7E6BC11F3404DFB91962B6
7EB0838F0E570E8CF04E85BA16BBB3123ECF3733A72A52F7F904C17DC217C7A9
CA604CF8401B289C1AFE778297F5248A37F2CD354ACE5EFEAE295973F7FA2EC0
8BA400C2BBCF8152ABA14FA9FEC5040D1B278B4D30DECAD8C97075573080E67A
B9F074981BA85FE7B19453C2013BB61AEFC3A15FC3CBB1E614186292D44DCC6A
69F94C1E03F1215872715967549F665E4D31FA89D07F9F7B71AABA6AAE1F3C1C
D65F797C3D02191EA2AA3B8A85038832720291FAAC68BB43B9A09A43832B289E
C07FF27F93B72A12C91CBBDB130C200349628F5956A835CBA540866CB82A2248
4EBB508F45A2D621074C5B93A4B520F1284E1B7C5D8474A5E521E7AD69BCB87C
68F1DF66B627B992C83E67679EA3C924E8517AEC1141FEB78E3658C308139AD4
4F7081DA3E8F839EECED8A0313F0A6DB604D39EE99D02D3FE7C02D0BF476D768
D438A2C24653F345F4642D12EA28AFB297DE661883CC13A06C3620FAD86F61ED
E3925484E3FA45344C7FD3D4D3A68B7BBB2A964AB2BE5A83FBE336D8C2D1325E
033E6CA7B01808D190FFC22AF831712233AA23BA994FB0C2B8AD99539008D50D
C093C9E693265E828A441345EA5C4EECC58BFC3D4AFA6168B74E2261A1B0741D
368D2D66F5AA22A1627640EA969285AD222A233EC61899AD22102AE68685A0E9
78D4C5714622E75955FF3E78C4575D810E7E050508B476A385CEC705A2EB89D7
F32FBD60C08B86A3021A5E482C8AE579801B110C76FD7357B8B0659B1BCD7335
D0A83ABBAC55FD47082DBE00ECB6C5C0F3CB6F2433FA52B2594B85C1F204B650
9D5201534954EAF50FBA122F4899016E04B4623EDD9332FD97D03F0162CC8BDB
0FF69CC3901209AE676967CFC73A878756C67A46AE14E613A8B3A93323427608
2E17993B297043B2F75674AA08FB0BFC904015AA56AE725E5AEE820FFAC05686
3E893BFF7C0C4F83D0D961AFC767E7024AE30751F349735B6CF6543D1067A9AA
939ADE975C80C4626D6BFE9FDA94629DB2CE69239856F03E138D66F8F733E229
271102112617F14FD5C3C6C486658937E811DEC0282EE3D0E3C1A31B94D7F13A
33FE49FED460A102B225FF51C3CAD527A8BF9BF8D495F7B532647689F1F21366
57C025AD24664C9C8191484D5D8E1304268CD4715C7B381ADD4976C0C856986C
FC6730241A41A2AEB1DE5FBA892DFACE7CBA94036E7A98F6B77F65031C7D4F88
38154177B46BFEC2D3481EF9EE5D5BAE73131662CFFF5E427A5F5DBB56FE1FC8
15414798C06E05F9BEF1443CD00570B204F24BA7D6B2F266806E6B3FD434FDE1
329BEFE5A0C84E3977329139F1192DF3F9D6BDE77DD5870ADEC8900D6346957B
84C8C7258B552DF354FC6CEB056DA1B1163C274D54F1350C83A736479DF26E8C
FF16EEEF9346A156B1131100E3AF27DC49B4DA067FDF88CEF019BDDF15F1864F
5406CF60DC00C440EEC436274984B73FD1A0031F824B4379E2E62864039797E5
87FC41E5C04B4690A2F2526D0272FD1B8220A2F5882788FEBDF78B312FF0A732
2C021122E962CD756DE48DA93798FBDD034F46AD3FA9E8C2D786CB4E75B9CED1
03496C03093961B8215359D6875C634D9ACEF68ECA80DEC81A3B612DBBC52B97
CEB83FAEE7B897F107662E8467FAC8D9E2AA0F906E7211622FCCA2C5462EA92B
205DD2FB6D547ED3D559005ED37BEB1ABEED9E395F1F1DD95ECC8B4432266F91
66273B59935B388CF75B423EDFBC4680B3A107EA9167B4A22855C1F6110A42D0
F70DAB4D6B7E2187A3BF218A6457C7CCBC0B06CE3AF4C560DF495B58D53E718D
89741F32C6351F8C78E4B9A0F49AFF1B3302A64232D15AE1B845171FD57FBC1E
6470FBE00FFFF6D3664C5D0355F8BF415C1A47585A4736B1045640800B098489
8282CB81A1D8FD3B8EF85867862B8FFA7167A39E37833AFDB4BBA8D5D855EAE0
0597C351139020D27A614DF27C3A72B169AA4B53EB63496BE00FAAA681420DA7
DC25AFA04AD42EBAA71F635AD4656A8411543FD8B3DB6B7ACB32CA6E4DEC6127
A633D126CD63FDEE48E210E261C16EF1A0236360B2A298C718416514400EB47B
86E2FB3F8777BA26C0DA8D6350B352014576858A26DF969402AB30E0F9C56CAD
A5D9811D78900B7D347046FF9C2A9DA7AEE1F42E318FAC7813157D0F0ADBEC73
9208D41C02C71A920C9DC8CABFF7BABFC41EEF179A9E95A7B2A70E3A9170C482
33DB00A098BA24A0C4A864AD85DF65F71B56A2E8BAC52A17FB2D357BBBFB0E12
CD481F96252AB7402213DF9BB57411622FCCA2C5462EA92B205DD2FB6D547ED3
D55900582DC2A7C10394B4FA2872BB77817D1E2258EB8E4A109699B8A1F921BA
F0ED78D89F33F144043D0FEE36BBF30AFF155EBDF9AB2A053F432A3149B7BA16
8CA488A7CCCFF0B23C07EDE4EA5BEC2AA85224F7C29A671F032195D9DDE7F51D
D5C45AF9CB8A6362CD7F38CC43C354FB4992CA8AA113256A370E02BCEB767B25
5C72846F1570C10ED164D1841B2FE33F3DF5262A92E98F7A5873F70B91A6C6DB
6BA74C7DC0D0D0A183BD254DBFAA7388CF2CBBF3342BE2E7EA49AABA75AEEEC5
DDE1D8BF68483C3D2447F4FFF02D0050E6489C4957F418895E6576FD8A8492C7
E1AB315D335B1A481FE3DB344A5F50DA95EF3F0F93CD2305D67A473BCBE4830A
B55944F07DE38907B58D16FCC2A074E4B55A869C96FCA78117347B9CFA480FF4
A19B9C158291D7F537E66AF56C22A58D8D35E53CEFC1C884F25A63CA278DCC38
682E1BC6D134930242730DFD156C0584682B19C3799784C1394A7F95FA260EA1
3D49E335E7800708D97515CB6CF112C2A89D2D44816E907417BF962CB750BE2E
146ECBDD16A1584F3EA2AB3D9A37867D85840C6AB9269E1FFD3D6432231D47B3
729F7F9F81AEE979C967DC7FC302C4D295E606E3BEB5DD0B068D6EB99F5F10C1
83245F1B733C17D3B854D53BA686CF408A174C4095D3732590B5E767CC184E97
59AEBEA33FBFEF7360758B40E87EFB947F6EF31DCC61CDDFC39A2771827A03FB
E2486B329E785A8113B00497A08154752DCC693ACDBECD3B9F74A6B21D04D33D
8D6867E328F1F84E503918D4F7A808F1DD37AAA08EF4F57EA64B4B227379834B
494CB4FAD1E78E9C6871F23DD7DEA7C7D956560D8BA51ABB82EF2B3AD0DC0EDC
D1DCE78055807A3A8E822A31DEC6D989490ADE623FD53D3DCABB2ABAEF03EE07
C3EDE4F0AF6B7A776C63DADDCDD47EA7CC5A25C793F813C55BE3B470A5800B4F
EDC4A99823CAFF87E567B96574144DFFC8BB0B9B743486E0A343D68682DDD7E1
0A9FB3BCBD8BD4D92DACE0A7B4068772E5278DC12151835699EDADD87DC8C632
5F0460690BE677AA6DB7E0250B5194D04A18A3CDD0D72D52948373E38251C508
E4505E845177AB715C3E6AB79D37E3F452F951612427A24B996F9F170CA2D76D
94BCE9E2F06F49A6F65CFF1A4F8BA05BFF847954D298A39FCDFBCB88AC0EA6AA
CCAB081537DBE4849DE52AF793A4937CFC9E9ACC236CE307310AA50B8A67181C
0DDB2999F26EED9D32C373613F2E788C56EB0FA4ED1F232CACF2867E6F462C04
4BC20DA885EDCD48017EB746DDA8ED86888DDA3065C5091D99EEEAC430924707
3044D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AAD93DD3DA2A47FC87C5E3CF
18CE4227ED29B9A8CF29DB40473AEFA67EEF8FB207ACB013947A866A8ACE63BB
825F4B0F36E5B0018C20AB43FB4C215C95659DD7D7207F8C04C021434CC2FDC3
5A4FDC88E365F40B9D576708B6B6AA87B5EBACB8F10A27E2B97314A9BFED3E11
45BF128BFD65CC057FE1DB587C8B2D7A74FCA897EE756EEF785C969EFCA683A8
3C9AD337F4726906EB3D588F93D2104F2FE63F810E6A3000E8960E71B73E9003
276E22FA42881EF50DFCF371A8C762AF5BD7C49E875699AB0AF95891548445E2
423C73FBF82E9961A7926D1A05FDB243631EFA7025B92E55DD5D5897F13EDBB3
356F9E2B9DE1FBE209F9CA03F6B4CA4588D5430DD9943FA6EE299A4FDAD6B1C6
2ED755C31CBDECBBB7C3FBCA1B459501F78B07E4A73F5DB00C952DEE1F6CE6A0
752411EC61354347A5FD43D296FC220C6416877F7F1995EA262713DA7EC6ABDB
A76084AF0E901B4CB170B03CC44F6B34BC47F3A3226AC68289D2EC32B466D21C
9B802FF1810458E2756AEF02A8FD4A64972D941EC585207C0E0AE908826A5894
9611AD7ACADC778ED2784B3423154B7FC03D43F47C6F5546EDB0EDE9BC6DFFF5
67025D6E00A898F0FA2804E0BDA68B696F299A0821E42C97CC50E6C4D6C1ABDA
A045DF3C2F7F9F8206F24A189E57A0B5C178B7326860AF2A3347D964A134CC09
9A59CC5126F95FA957C3CE225C0FDF7C0B02C3678DF44F20E718545C2F6F7E7E
A4526FBC431FA82095A39C74183F41E46F2C56BCB59CE6AEF7E91331ED5D9A4E
479C21D6A7DA9D6B0B4FF494C2668BB221AB188DC03492775B2B72DAA50008CE
4A663353A1DAB9DA50258300B9BB455AA872810C7948B1EC866883E78A3F4C74
3DCDAD88BEF8B3F7104BCAA6E752EE90D2B38F2DA6707A896EC55D98E82E3417
677CEE755D41C6192B100D56F15192E10DCF5EA55C12219C8AF09C7FEA6FD001
3BC73E02B5065DDE064D64B07C5041BDB97BAB801A993B33CB35844961E68842
CFC30E62F392C5C166ADC35156CB090E79A5CC212295946E98647A6F5903A6BA
EDF01C0D83A41379B0ECFF59CE398BBCF79F56450208CC12BAF282AF59619638
A93EC62A029471B6078CFFD8A93C63A2AE944CDEDB8CB0483DBAE03637CC4C30
DF26D99F628D62581D54A0EADF9DEFFB3DB34A9F052BCE33D0F67FAE47CF016E
3B3AD1A5C090108D4964C7FD5E57B7B839E058C6917D4D2261EF3B27F4F84A27
603543947A1C2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C570E8F1106
F98799495DBB3A05C04BD649053FD29385E9D3822007395A5D78C698C7366C1C
453FD7CC6E94C29F597CE7E75A8F7613805064BA22FE6411CFF2DF50799947D6
5414D629B139C0B3C2BF3D2905CFFAE9EAF0BBF3A22B3EA98F5ADA485A644A34
CD0F70B5ADA7DCC9E4CBB91AE2FAA8D878652A4CAFD1F9EB162702D1F6805D85
A8216B17742ED304B2996DC77BEA528DD00039AA5387ADAC3617AD77C899FE86
E54B8BDB1490AC76FF84E5C3FD68A234C9BECC29AB2EA93D4D4B5A2BCEB8AB14
CF291E7A18859EDE149FF3F07B59EDA5362CDECCBC03A19FCF1125C2B0BA6F14
13D796C008A2ECD55E062CDFDFD9C0C549CEC434910D8AEAA207BEB7A8B22721
7A2570A2487847107009B163709687F03E8904C670CBFF1BC60D1A07473EB703
C2B27847402CA4B685827479170AE5F99FF4C1D98BA42AA91660B2AE39F7BAA5
A9077FB463B8C35CA96A594D27DA3C1237C61DE1A5F5B26FC8966F17D3D545F7
DA471CC77A08633A53B62B760DF589FB2CF3EBA2F6AAC3F6FD242C25F6952AC5
5C24ED123A69E8EEA7221CBBE91BC55A81CC89FDE91EA283543BFC3DB722C5BE
799C9F485827AB10332BFA0505B5EFA4F5C59B381527B753DEDB0BBB7D3F0376
8BAF8691733BF48669EC0B1D817B4DB795BFBCC80F4EFBE3D7E3776948F8D116
96805A94EF9D879BB2E5DF7188DC7DDF4D7C8273211809C8DCFF798F2ABFC4F3
539392985C4CB324B0007E830B78301A03015901FD3A2CD7D5958BC9670F3722
5555B3B50E5204E612A84E61DA20F004DDB1EA743DEAB15756522DE65BA32464
0B70E9B902E9FB32F894C4CF451DD10098E54CE3F758E2C884D6830B00E1FB1F
743CA70F98903806F30AF37522828FD5DE3EC220C719B63A95EE943F25A823A8
8C7E731F647895CECD96CA4A2FB08545662DE0616473D1DD73635F2A6D25FF8F
941042919BC8E49987E0A462594AFB132AF95D2C459ABFECFD7096366E004D43
6C27CC46EEF80FA1A05AB90D788643BDAA80A3358D068EA5038FAC8EDC241DC3
360844AD12B1FF1DA78D51B6F3880C38FB2349BE51D981A08AA153E57F9DCD40
430507B2814046F5F211E16EACD389622F0C6FABF465CD8674717E87E6481701
FD1E1B8705C512C0108055A1BDFD83F4E6FB7C769819702617D08C10F4DC99E8
0028ADA6938F1BBF331D54AF9C627586F74CA84272C6A6AA48D9FF64C0A8959C
2DDC8B5F4F725ED7106CB261CAB582F367CCFEFDEF1C42C612D947DF7BF71424
AABF005BDAB11CB8C655A72354626722C510D6E242E10D29DEF786D7BBDAA2A3
5EB13FD17790793B2B4A9E06A916D8C6A93A6C0E4A2AE7B930B69005A3A2C122
5FF0F5DDA04B584EF886716F299981EC9BEA227BEE986A9A0D47A669C20B732A
AB2589536FA3B43E92840BD29870214BA57E5DDD4315463D662B9274D2E29312
ACAA9B901E3CC8090E857AB029E6C75123998FC42D3E0C3F20960AEF3549801B
F7518806C6D295955BB71395C43390497BB8F03AC4B9254462A42F410D55B6F5
4027C1582963712777AFB86E4FDDC0F31F92595FE56D439417455C5DF15519B9
0355ABACCAB80AFEE37A412B255DD542E77E5FF7E1744D529624024E35566FF0
EF71D60ABD9581F43AFC4A1BD1D7AB84C2DDCF5DA974B2068488AE47A9F07ED5
EB4D391DCD5D08268EAB44BA2650CBFC0CA9B55CBEAF992D7C9F3D4C2CB294E4
4361808DB41180D66B2A43973F90045EC2A8437DF5F02A69E236E3DA43171237
1A1D71BCEF8BAAC89772FBFE65D33E336D9595FD349D0874D0203F8C21D9CC04
E187BE53F8FED4F33633BA03A22DC683B3C8533624EA8841787FEC863F584F1F
FABFAD3A2E6AD0F142653DA546D27C470377E95C9B1336AE10C98008512E1E9E
B36A96421288D8A846DA9F3D3B8DCF710DD336290176B3E0B546698B6A12F524
DC97030DFB981F11116C45649029E8664B1EF5856534B80E1124ABC86D6376AC
6E3F7414E4A017F9FAE43F47C36E5544A0C54A415C5AB2A72BC3F9A63FC847DC
244530BB6D83D8495BCBD805D3FB3054DFF46F83F65741B1017E96CC1AFBF465
C25A312852770DAB7D39E1217619DADD5A529B743B0977263E4EB261F6718EBF
15ABA15B45CE0008CF15222103B3BC5F55E235A90201A826568CF2C21EE1C3E7
45A96B9D1102CB26CBE3E62D0410DA79BAB5DBE07DEC2628A57CD458DF6ED9F8
FAF6B0A70F46877976C12FF9758C0625FAB1DEA0D55F11A0674E11C30C0E964B
009A0D5AE5DADC353EF52CCCCE5A99EDC232F01C9EA889DA4DAA4227182ACF45
5865CA526CD0C3AF1F22BD3E3ED3DF208D3C2EAD0BD5AD97E55CAC100AE56356
4FC1EDA0CDAA94F414ABCA46ECF689BA685F1BD831B4271EE6BF93276CC51C86
FEBB15424B17BAACFAD06CDD337834C067CA415362050ECB9A7C3AB8AB6C697A
D5845D58D9ED8F00ADFC43DF9A0143E2ECED58D83420F4B02BD746BA78DA8CBE
C2E6CF74853B93B427A89089E953E1E2F0364B9E535558146EA08DA0C652BCE0
1A9FA4A9F7E83E5A35ECC699EB8815ABFD76B252DA958829F3C7D61F31822B91
9195B5862C96EA1243561331C2D9EE7B65B82582FF665721196CC9E9DE49E5BC
7F4070BA732D56CE2A0B7759542BA952A714D454416CB94A007509B3DEE24837
AA2077762F4B71862C04384D39621BD0FC52CB938CB2D6250B9B5A29475E6D8C
7941A079B1FD89BA0DF0E23866F7FBAF466136460A8ABDC4FB7A6B0BB95D213C
9E844A30EF07FF70EADB5D360E52B0879E3FF37E86E0541451E2504DC6092E53
F92783E0AF62957C5F79B80DA6F7A9E9B5ED66F92F3918E329298D9F6293E861
4966D4EB74CBB3229F32D00F99B504DD1602FBCC202CC8046D2C6F867D0207BD
48FE8067168C4412FC80CDBA62F8B5EE4799A66A432D5FA8044190358D9A42B0
2D8D79081DFC1266E398C58FF8074C8E860FE132AC46A5AA4DD33561D6864F50
6D98DAFC5178F2888E87D68C0B8C9CF3C303218DDE862922A8F80A0DD8B36675
E83371DDD0804521CD931104741A6C9845338F0D171803EC04C9534EA7560311
2A781CB563378D8C5CB7F8729D436B65B80B3ABBF6F3A7A5FBADAB4FCA85D1E0
E9149E638845279D7D1882C85174FC32A61B787769985079D60CF71131977E01
B98BD4D92DACE0A7B4068772E5278DC1215183569F9F606219F17E801AF5F306
13E7A2C3D32301ADBCFAAE454977605D7A072513C78F710DC9A54F1891759DBC
520CCFB55CA9534511D08883DE4ECD76DFEF5D26165777E3A6AC573D7380FC35
63D88AEDC9A339CF931828B48A786E23104BF1F2120197E9029CCEC265896D74
07CDFEFB4F82C7052CA4B6D9562B4D49DEDAF13B1FAEA97978E66186A98D901B
B47DE5D3C0CB6239FB2D5B4AE3224D98927206B1397E32E2D63C350442E2115B
8D8EEB7C04319771FDCDC0F19C8D0285CBCE07513C22253B9753998B172BB857
A128D43EC71195255DB36DCC13A89DC815DEBD8D82FC9AAF598C88CEF2A15D6B
13B95692C2467A80D01B800831E129F0DBDD7BFBBEB8C1E91EDC4F4ABAE63F91
79E939E8E50F7BE4118ECC2CC40F691AE97489E86F730074CEF8E44EA7FC0D28
FF3E8AD35CF856DCBF0AFB088AEB39EE217541A4C17DF1A012D2896DFBD323C6
1060D30B9407C3D09FFCAD95A1C64FFBC6312A96DFB2B087FD918D3B0ACAB4DD
394F6FA4728AF2CEED07C4C304955D53D70756AFD54C0DF38C3D61071868A4CE
3EE4C9F842EF5F146D57D0287D62D1A34793E173D032F164360D643F1880D27C
0F7D73029F171028FDDF8B55093791EA7C2765D1983BD77CC4F02023B383E397
12D0264CB3CB960EAE6489CD6C8FB1F1FE5D283A981437DA8E17399F86CE048F
4C870A446EB3E06BFDEF95D17AECAA204ECC569F78BD73D380C572E5087A5556
397E485D176692361A09B1D7853518F8522B9D21C93BEA7C0092280431577112
645FA4CD45A4C459D5F7693C618A5993DA8F9F0E434C04CC0B14B0B5818A6680
7B57C9DF5BC56081F75C01250653512530A9EAA3BB232362BBD54993A73001BB
38598B98C22D00E3A9DABC4A0462936E42FA97182259D06005CB78305087DF37
9612E501BD37874E1B97916A78683B9A3AD981AB1D33B3D8C3BF7E8C5A4CFA44
553B25512B68E1F53B4321870D97750385866B1F923D80B19CCF78577C8065C0
08159E38B52F54B227A0C18DA8A43ADB7593E98E5E0C7519713F452774D1DF23
5DE89D464EF44F2C9297ECBF2840EC675E1354B3A8B9591B661400E4F79E0702
2ACDC7705AF6EB8DA3E68A7D3D06321D6DB80CD676DACAB1311AAA28A04F8FA4
3925639BEF4B041AD7722616B477CCFE4F4E19F17749048BE9FE976507B85FA6
4C9620FBB49FD4F24B11E7DF3C07DEA3C6E6CFB4F26A4B2603990736834B84ED
6B5720A8E52BF72DE7D89B9478948503286711952C3D3F4E83A712EE63AA3DAD
FD632A9621D26B4CFF003070037CBDE5793A1BC975B49B183F007E81DA9A798F
7F062708C79884896B537462AB0B27E20C9D3CF8D27B81A55DE3F509791369E2
E54C06B408FEE2918DFD868DC4480DBD82F856D2C05DE5DBADDAE7385F404488
04C7541E751784D52973F89341C7723D718EE15D3117574C43A8A8D075F4FF9D
F5B1BC2E13055CAED61FF851067307FAB0ADB527A5AC8388A0264C6A7AF6071B
2B9AD4A7D4E71CF7EC55A51AB1B4803CC515471D4FB80DF03D2BAF5E8AA097D6
A86EF230A314B3E55EDA5E61D1A1451EDD31135B78B03216A0164552AE036D30
935949DB8929F2E389124EF7F7E67189C32D8598046EF67D9CC27499F821BC24
5B3E266DEFB69FE32FC2649522985C27941C58E4F50B911A6C11B7F5F9B82BCB
01902D82E4EB6BC1D263A3F79FF9AA614BC64F3F70591B8E9107DAECC5D0D487
96C4835D63317559332B34FB651CC92781B4882D36D3C1FE65B2E5512F6B53D0
AF465F7316E568E305EAC163090F36FD0CA143FBA1C9F662A35F3BEB5A529B51
2E85E0C643C2F2B4BA15AD718CC5E605CD6C3C5A46E851536CDDCC32B1BA21DA
AB34F2A1CD801662934D7876C663B79E1B46B00F5554A12B671BB2CA1398F65F
D0A764A54500F0429E0883F53F8CF6F267B35795C7626A32B6E41849E355B252
1787F7A76DD68F7E5D640C87FFA05C0EA432E61552F957C636987F2ED81971E9
FC729AFC1E778A3C012D1B293C733E90B60F0DB14D360264AA4469FD8D653C28
D36EA55892105E54929F64A3C8A01C8DAA5F5DCA27C71ABAAA2524F7D33DE2C3
F202B96AB0C59A00DF442CD1F50796CADE8F0C39DF8F351E153B539BF8237387
D882F998D969E5996187EB83174F748F9F5C6E7C9E45C5DC39EE11FDE0AE7493
6FB0B1B5F204DB89A8805F8D77A933DF13534861328A5E4673A4B180A8AE1BEA
97194BD2AF25F28AD6A30D5AE7013F99DFD464CEA9BF8F1548BA93FADCA29EA1
31D482990CB64C201664D2D13D77711369DD518B9E0DA580DDEBC4B9FC00D132
8949B97B1C65115DF384C3FE28C017EAEB5CA8EC4897901FBAF7C899327A4C80
ED8F1CDA2D49D7672E195B09727629C1A5EFFDACF4DFEE91E68DD6A7471F79E4
C7B4BEA87D0B1D848B21F9B1A024989A6D9109144050CAA7960FE9A98FC87335
2781B18DB090FBB6D3FC3C71E67F46782301F01E3F4891F6E169747D0AEC4026
7FE1D3FD77700AC774EC43DBC0E10C70B7C2F14483E18E99BADDE9FD1364F008
8C1A95CED5A4D2401A80CE247323CCA5752AAF92BFBAC68A88FA66C49E1490EC
01C9401D25CC981E526F1D803C93B2A2A07D4200535F51B9CF26A817DE43146A
E4E04FA79AA91C814B18ABD2C55E639C1F80068C9B0AED83074C6270B177BAA1
8F1975F0E5D759C51EE7A31E4510F5196DF93DC22D53B21CC59EF1AD25F28AD6
A30D5AE7013F99DFD464CEA9BF8F154BDE44B33C06F6E50CD5E02F0313BEEF10
80B8E63CC100145EE1CF2600212964DB2ED1CF81F3E927856884C3C1BB65B5E9
E1260F6699D945A611A7EA348DB3C86BE4B4DB0FCD38B5901221B1DC3066AEFE
92E3FBB7E4176DAB13FDB286FAC18078C9EFE517926FCBB34E12E947B5120A5D
9397D02D7F1A024EF4D18D753C02DBB7AE3EA05189872E57D5B88BB9D233B5E4
7EEF26714A4CC8923A9136F58AE000F3E4E56446467C09F885630C7E96643BE5
3D7E30FF26A1AB03592F9372AF27DDEAEFF8B80E1A4AB3834143055A7ACDAF5C
195B4D4014AE118F07B7C4C930CD757FB28F8FD39312BA79A229868F2C81C2F4
55F4721435DCD24D67DED3C5ADF52EEDE57EF3EAC944D970B725574EFD751A6B
7C9AFE6196B3E2024B31F85CCFDCE8FE66249922A5752F68183CEB0C0D895773
952F4CFF196A41313B2A3FE4B50F3B2D61230D26B72776C9E82A61C7D79481D9
1814C47A0A3BFAF7465542D6822F564EC4B8F282AF59619638A93EC62A029471
B6078CFFD8AB99B3B63D78163F227F1385113B9D2A2F0C56DB55B7349E7CBD9D
F99EED9AABA70EBC005B7E807A854FD70F23244F74336231E9136F61962383C6
5150264A443188410F1CA9AD8CA4892D103A1F8AC88267A1B6600190E9DFA00E
D203C9F199C8D54B46606807DD209828B487303573B0D237AB3A9CE8C36492E9
9AED33256A1A6F3303F7A87BE1741043EB837C589B4CEFAC955BD04F4BCB9D5E
DC100A5DCED9628B01EC6F47232DE5CB73A83C1B82D1CEE1A00BC42B92571D1C
B29505E041FB5D15E78F084A1B9DD9F45F7F5D8BA3FA244C616DE064162ABED4
300BFF344D46262F0331241D87492D92E8936325CF2A102C14A0086A3A824777
3BF93CE143AB03DA13405FD339E7F17DE268E380CE610E6D9D1972AFB8659527
3E193C824705366A2DD32C0F4AC6CE4AAFE63836A1EC53E443C157BFFB7B901E
2D1CE638FD0D280DBDB8E20C47C7832C9671E04C9E37D08F89E84B1DCE7F2A0B
B0078EB6BC83820C06862DAB8EFE4893B9AF7EC84F69B0C95D4FB120530AD2DD
9F52E223FD098660B344B76A7FE3FC83B58C2D1E30248B5410C7C68DC45383A6
470A21648D9F06AA962C29680C0EF7184211C879D1CFA2AD39885649818DEBCD
A7CA7D3C3A6403B9A7675DC69ED861AA0478A60970305CC39BBC3BA6A8099856
FA043E143FA1A5B5F00968A8DA48E5ED3A2BA43BA9064D59C171AE87BB22E474
4FD26EA55892105E54929F64A3C8A01C8DAA5F5DCA24A7B4E52F30E55B902ACC
35DE87E70DE8EDFE7D803CBEB9E428E2E96E73CD01019E64A01054E5E94ABF52
DD9EFF0427EBE3F8C28EC36BA0E331071D9B11BF19F5E6E01322EC7B74F1E8A3
69DAAB3305C440A686E566386C4BC20AE0FE9CF57C6AFB258F73816CC190CAF2
5D9965C88F9594F80315901081B98FF3AC06F5C24B6A33DC92C2261C6222A84D
10CF5EE66EC13A71302C6786D05D4197E95ACE0EC7494D4247243DFA8385DBC5
760B397F0EFC6780ECEC244A1F30330B1C2495DBC7E205C4B0C7F6B19DB9BFD9
6112F27F9B4CDC7DC12D52AE6A36620F4FE5B14CA02F60B14F474E9D6CC7C87B
4FD6EDAD6F6F8AB10983B65326D7E2B9AC32B3983D26857286BAB3202D09F51E
5D893DB3D468C38E8FAEC54B50AAE18B4653555ECF1F6CB580E5E0E90F580B79
54B91AF65067C3C491CFCFC20F9EF9B7CB7F1D174B2E94953F541C3B84D43428
6DD1B5C4C56944521E76439B5DCA7732A29F37A08F1A2A1FB4E7A6CE89EA7C92
E036C703AD5C787C37A4430828C44D874EE1812B3F153E63FE095A87CC113B93
0D6A0A90C45CB9FB0D893F79F3230443D11313D6EBB9369B19CD50EFE1EDDF11
4903155F14A3D27477386B661C6459EF6A8492F020E67407CF321E01EE8F2811
A9C0A800303F0722046046DC94B5017D456E865FB2E416C4EBF62D87CF6CE663
57C4904B79B704C799AE090C2E12AA3667DEB5AE7DFBB73FD1A0039F86E84890
03F84951D87FE955B227F74202FAA42ABCBC4C8F87471310CA26AE9429BDAD98
8E5147C913B2E2A96821ABD9CC0AEA383EC8ABF7DE287FA97D0495E28CB8E2FE
2A4CC0B9DE515F7639622660DBAB749090871FD2316356C3CF06A91C423E8BB5
CCCCD5FD1F4EFDE44CD22214DD1C4B36E9D261249BF3BD8484D4C450FD2CC53E
9D5D933D8D348873F2BC98C00EAB746B3E6A119B0E7CAE91559DC6A5B3BAB60B
7DCD5F96C0B1D41127FA6FD0E462D586D2298E6DB61197605D6577A03DE99BB7
8A0AA1139DF5414824E7D72B4EC7BE92DE482C8FB5537B85222094CC28A53CBD
90FB755F36FB252F0335FB50B3370C94D0AAFC1CEE5C1376F02A37C14EF4FE41
6F8FB3B918C454BD5774AAFB220D5022527EFA589455B7C07547E3BAAA4AA7CD
8A238456094C22BE50AA44C469EADEE3FE6E519F3DF7A42DCD24B818942E5AA2
C99D424B8AB1F5A341530C88F64248086F20B663F5490FF79AC9C6851E779043
D6DDBCE84390CCB304E5A7B771CDAF55815279A3B8306D923FD97B222C97AD9F
6A941E5C554000A47EB5D9E377BBC162A89E871A00B9B346B62199A1AAA40D8B
35AC2F519FA7A9123A70E5B8F42D90434A48E3F4993DDF5FDF93C9E21FA1EC0A
CB4D27E6C934A2155DC2E79631499FB05BB37453FFDCF3EB4BFC854048483532
3410B2CF4626600B1F8E8118662259AB0CCC303901A207C83125D327B2769542
A31B0BE8A05CA56FE842051FE87EC913E4094304B434EE7A5DDFC7AC37A6D9E4
9F46CA0B3AAE98A934A36DFD2240493803D47C96A2745580EDC957AC4291730A
86EC4A4182329F95AB474108A296063BF7B01D5F186B2E093E82F0712F57138F
D0BF4DD5993987EDFB19660637741BE8D98416D772984988C4219051A2214B3B
FD198AC85850B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDDBC45DDDF5DEF3AE
D93DB4833D4DE82386676CAE2D18B84333575A237C9637BC3A58D7BB96AFD1BD
3F1808F701A335B9FA7332AAF569948EC55BAD355BBD85D66D6166F8D6F0929D
5D05E540124D1983CF4E2EC062206BD4502826B180CC4F6E2E9E73D5148A0EA4
3D89ACD8EDEAAD8234457C149A25CE9F8E3F4F73415A620F8F1D9563FE9CD897
B19C6DB033B5C6294AA6F5B93DEACADC3D74931DF11F8F2DA6B617473941A1ED
19DF2F6C55C067882371B36819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE637
C8597EE5FD1996F8AAE791FF65FB53F78C6F639F55A1790C3635D75B805B4F34
26C6C6E12E081339CDBD461E5CCC80405EF270A816607F248C5C1D5C56035A8F
FDC8F3DE95F1F507FEC112903F2439C1E08D8924BAEFB2D1BECC5EA35F7C4AF0
39C7D12B6BA9169218D70EF879255E6D7B0D4E3F7174153A5D789E88984E0A07
EE0942CC8CBC6DB7433B1B871A62E60353F613EC6187DCBF7967263679C8C367
5A673E6E6554D774D715491E2407EF7840DEBD26DA522BF30ABD1E551A9276EA
210906DC669AB337A41767EDF87245ADDCD1E94D2FEE120C7BA60A464E7A72FE
D312680E7155F6CD439AA96488958D280DE6EE3E50C07073C5F650547746D396
93734B16AB45A183B45857E4B8F9D6695EF332BD3BAA9EE551A4B142D8DE6DE8
9D1BA848F9FDECC6604E7D488ECF152B69493A9A0A8A7BBF8E4801DA35056CA0
0B0CEED0050C709C5F3E7C53FB4FBAEB6078B410935DF7D6D5064271899310B8
7CBA63800A37B6EDB5E58E81BCA267212F3D633FB8598D3F2F175BF705D4F708
9B2EBFFE432B337B76C0863B38A3AF14DD0F6D8741C2E06E6011FC30FDC6532F
CC7F3D2A58DF176667500E58782156ED773734596699171559DFD21DBE1EB344
E7ECCD28B98FBB721C2095CA9DB9DFD4673958D4D4F1CB3CD4D6AE55A5C48AF2
6AC803908EC18704FB8322977A15C8ECDD04BE95BF3724E4764D041D37D1EC32
C188F311A107CC79FE5120FF3149465D40C2834C6D68F3A0B7F152A9EACD5E0E
0D21CD6BEB763CE338A0A9D593462CF91C1DC3D228BCF7E99F93FFCA6A27BB12
FF9B399DB1AF4BA9A5705502F55E4CCF721BDCB9FCF3DD9FEC9D480599090307
21E8CC5D32447BAF3896E4A38C1576C9EE90FE9E0A9F5EC4928A31B813890836
371F7864291A3B3F753DEF98426130A132BE546B05E234E05E9C82777BDE4191
AA254EDA92887905BF33AE9FD2A364E65BAAFD767FC8DAFED6774B61B7E0366B
B5132981E7111A7668EB5E73730A4F8DDEAE362896AD30511AC6077F046C5DC0
D0400E1D29B35CA24FEA1E4C71D8E14AED4F06B3F1FB4AB16280601D4308FB33
E2B90CD3643461C090498AA7064CD84DC256855A3DFCCEC584E60274C80FD891
9AE84F31418152E3EF415F3BEDDD35FBF1B082396A17F0870204E2DD1FB9EBC9
448B8D0AE4D2F2BEBE39239ADB477FBD2B0D86B7025004216F6017E347DE8BD4
C3C7EF12F4BAEEDA8DD594F9FDD3F0341AC33F871D66D40597E4F20CAD0CC21D
2C3A11820C06B89FE882315994E7704F256531E5C82CAECA85AD750840174A99
A2367CDFA06D801B1588A55CD8FBC5B1A74A1F90D104EBADB9DA093211734428
05CF8F8F6BA06F1B6C9373F48144954ABF8991B61F0FB7E95ACCD3BBD200E078
01F2A7157FAA847DA5E22F00136F21273615D1D75B730BF1D7F063A8419830FC
907CDEC4ABDB74182DC5FBDD0536E7C70D3AC58AB2DFA3EDD496C18C8974E85B
94484D5D8E1304268CD4715C7B381ADD4976C0C8525ACF78DC7D453F813638EF
A565CADF3958184CF236FF2FF91DB2687D13CA64138054D591B1C7894E2A0D72
4995EF08F00707EC53E1CF114795631E3B14687B9E35196EA8C1CAF14A0F0128
05FAA4DE2E937E03744732E3FC287CC99ED39EF436CBA30F8EB1A6E543782DAB
E3FF83E5DE856B2386B006A01A109A8C8A833C61B9F1ED687557E2449DD0E8EC
1F8B9ECDD722D466D2D453E1F5D3C9F3C796CF3BEBD5F6E892F91A4B3291F219
0C5E20A58FC99E7B93748B7B0B7D5F050B809C36455121145BD772CC4C3ED8EA
BFF2230567998B58154582EE093FED8E2F79999D0D5FB2D1F10866FB55664AA7
D6B6CA4E3866DF6F25481C94C0C99771491E1E13819CF6A11897CDBFC25ECADA
33E3F6D66E6A404512EA065022CB17E62FEB500C2C5AF1427197EE6637F53912
3745CA88458114AC473001A6EBC721B3AD347F9CC5C2A27C33990101BB5C18BF
8300E8B9ED08ACE959392226C2D9AF99686063A3B951E33C7EF5F1AB73604DFC
C2AAE3C9DAB2C3FDC4982820B11EA1FFAD6406F59A25291292BFF6E9F09C4DCB
F759C9FF16A8E893C28EF549CA3C0F7C816D19F4AD4A5C73718F38A4E67E61CD
7A1713DE7AD5B63B0A7BA50A40B29FC17AA00DB566B2EC94DE5934CE2EF7C23E
C45EA8B7525DAAFF7B70A5414E182FB7D57AEE134DC3F9A71394B4BFA8CED0C4
1664DF7B5BBB015C15E90E9C96373CC7E6BFB2E25C8E5EC1E76C9D065EAED9F8
1E705C8136D99C5BD8C57AFA1EBD9AE6E949DB069E5F8579D27658A448FC502A
8DBF8D959B786221774A27EC6476C296EE579D2F20575F4CA3B9DA9E2DC2EFF4
9CBB4722FA30319B8C68F8F7DCF39E5FF7ECDAE3884DD8E0E9C7A5FEDFE41F81
3357F2002FD7D3BC2795CA29E315E9397ED241D48F5DB2174A712F0A1E33ACFD
F4F850DFBC68836D6598FD8B539BDCA02A0A1C3058ABF1106798FC39BB81EC7A
1CEB5D36BF344354FAA9B291ACBCF9B740335802AB247E9FD612C7762E866A6E
4C83D0AD28B3180DE0FBA6D2813AFFFB6256C6A72975F6E5AB21231E0E136B9A
315700669D9D8A3D985F44DE6070E8E4AF619C8A0463541489F56666025C854B
28533F3D64DEFAD31A1BEFC3A15FC3CBB1E614186292D44DCC6A69F94C1BE958
8697B33CC8C54E71E075F1693EFA5483DB7DEBB520C7BF832196D27869EE01D1
69FC58F743CD16C8F0A30C58416EFD2327DD0406D7E014791771EE369B64E66F
AF661F75F9A9415D03C8D92BA72C28C2C148FF488439DCF5AF83863CDCACA331
175F46778C3202D3D4F36FEDCE60AFAFB39332B22F2C43C3AD99954E96E39B52
434D8FC25A26DF835CF0A83D7BC91AD4E67CCE7B5DCCEE35431B1144E5302C58
4C766900ACEEA1303B6B7283508FD953752DE044C4904C375AACD66DDFDA88D5
3E98FE28B70E43B7C69F2BC1FA11191A2974874205A7DDA96A42B2D492847AE5
7C85675CF04BFD1410B56E616F68C39329AC3301F7E9DD385505F1A5891D6AD0
D0E3EF2F19C66D2509FEA05F456DB473994314820946309081E82621D1B79F8B
534954EAF50FBA1224AA3BF50544122F3662354376F998E255DECD92AEAF57DE
294C3A61A645A681C23966AB83B4D93D4FC5D149AC96A8331BD6A50B93FB0806
43433A0D2F5AEDBBAEA7C0A6D4AC4C90FCAD1A887E071087DECD4DB7E551DF70
32C9C43CD09F534B07AB5996711300B4E28756F69F8B6933F20AC25471C19ED3
B2D16493293F09EA311F4929581D3E2EE1E2B00C53DF9788B45591972391929A
1D45F27E3F89E4F8417201F0D2CDFCAFAC06766BB5ADEA1F62D09802F18C584B
F5F2330AFCE8FF92E2DF9B35F469A1D1AD50C3314D6CF5FABC872BB7CBADDD96
379AAF858D42D31AAC43F4EC19D387D38B78DBDAA0645B2FB1C9E3245ADA5B7C
80281E3B8177E30458C0E8F57E41C25DA1DF67A2DFE5DE21E630125AE03ABBA7
5B3C5272D5BBDCC972845D4664D911B0E64203574E588A6F1143DAF2573A8474
5ABC6D79FEC5A3BE33A9A0285EF5BAE463184E92A24DC07A7026EBE9E2D290B1
EEDFE0322838AAD2FB6F562CF3FACDBC455F5007030A8DC866FAF4CCC70AA1EE
4BD71E5344F2DCAE69E08F1BFE2F05C317E60CD87D8622BCFBF2709E1050E430
19FD6819999E1A5C2FA63A47940F5252385EA3E898611BA9C4C8A5E0A6AD4E40
D9A928D09FF6795A31930D91424572A24EFC245742B434A82034432EF4A7BA26
12F343751A68EA6CC4FD5FC02C703EDCB1F8AF334B793677DC9D0D6B2CF2ED2D
D230066CF987003900359010AD52472E97602424CC86C8245A33F617C5F28A57
87ECF6F5E76A133661B6DA9143D448C59D4A6E1D3A4BD9F0B7E0B28447E74136
4E315E7A1509311548A348C48D19182D79249080AD244A961CCBD0A6C4B22D5C
02D1E02E3603E885A6F4C9949F4D5AD4FA73204A4F206B13B702DC4E76A76885
AF0B09EB7F8774273C9252B73F1E4CDD4912B3995A7DB9B4C56C828F8583A979
A4821E48802F50EAC63D9917C10E24B9304C2B6E99BC9902242F0363BD8FA398
74B38A5773E6797686644768404F6882273FB569F825C8B5CF477E5A66AAC618
CB79AEC21E85BF1B65FC6300B048FCCA5DA7423FBC722485BA50072ED2124E0A
769E95F93F6629DAE30D14F1CB9EF1056093B854BE4DABB07F7BB64332BA41E5
84EEA50F61F4C70D353CFB11A82E401A42DF13634343E4A666C7A27E6AB0968E
0F2BFB2C8381E13CB69A288CFB8408890ECB590527209D19DA50258CFA1F636B
0C9C441A03AD99788F2C055E1A5AB5B114CA693BEB196781C04C0A6EE75D2746
E69AB8C4530A1BE5182B4F95B4988A9F5E686E357923D654FBDC140AE17DE962
63A6CA5338F0545FC28B003F1AFC72A01C5800D5233F46E4D3D830E9CA83BABE
9291E590F24481280A0242E823E22A4E32669BC829EF1B7584A7D1DF64C6AE6F
BCFBD9E9879DE2E51C85B3597B747E2F440D7F364C4030648BC39783FD7AE189
510DB5788EBB13FF9A22A528922308C00CCDEBCE60D893C887B0F2FF4E4A58E1
7059A66A66132D35680501A47FFD3C21C5FFA47F843A6972A781290D136A9B5D
69A31D428F4F003487ABC3D34172433CC652E9B2516AD0EEC9F4521A273F7328
F6F57B13A373A9E0DDCE6E0CB2008467372E0C2077B037B0FBA022555B0FCC14
21A0B660B7381800B7E7FF1754D70709127DE32FE92176B964274E37B45C5844
49B7B4737AD52783C5737C44F9E81FD41745809A37FB996A48A34BDAB4CA6460
6FB209ED35980DF79F5089C10E826801F1DF4E6A66AE2E78797E9880AD30315B
535018417C37FFED36B95995F7771FF6012B974D2061E7418F3B9E0ECE8D06DF
CD70D82772F56C044FFCFFE868A68E84D25B66B5A129C6EB45718D8EEBF746DF
1479C93E4BB317BFC633E3FAEE0C43A403D675816A95031288ABFEBD9868C847
F2EF773B62E31DDDBC2AD2B526C64DF8400A1782A1086F10E614DAB03DAE4B51
0B39F1E3A64CC661DA200D9C48D979929FCFE04D83CF33485A0ED2DDBE19EE90
B055D664E08E4D020527450B43705983772BB89072B23BFC19B9068BA1AD4B50
D9D2E025E00008D3625C1A4A9B9AE2DD4A7E15B5E90E5DFBC1A171A728EE77DE
C4295E388D5777C3D652C5C881935DFC736CF5EAE91652675CED53147A5A50D0
7DD67A01D90307D763884329B91924AA554CF3CB059ABE0DA5EE7AE080F39D46
61D4557C54BEBE502DD1C5907D7426961FA71506FD3C7D8649CA54D9A85449E9
CC3291F73F466C037636DD2F6365BFE35C63978876D8DAB0C23730744A2343B9
BE781702B08251805C0B8A6598E644F5A83218FA43C3D18C068FA8426914708E
4F8A9BDA0BCFC2F517A615D9C6A247BB6C62857312BB017A3FD3BC4A69A375E5
B63D5A2C7562A335345A58B383E3C1E375E92261089DAAA7D8550343C3BB9110
7DF7E3F4EB1F65B37D48932FFC8C217849C0D6EFE49E293AB82742140DC51CE3
BA7314B14B8C7BBED4AB2A74C045E988C6ED47854597
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ABCC72B6CF075717DF5200D680CFF152D215865DE535A6
1CA8E063640C195BD08DBB8AC7B4A3EAE77A96BC881F674B33575A0CE6AC3EBC
22862808E84C47AF37E871AB5A85B043190EE840144F9F85E8C54196C594349F
1E95F04AC99AB789ACD0FE5A2F6587BA6A0786B3E4FE1AB8D3A3BFDDEE2C5A08
EBFA713F917FAB61A4908CFDCAA68441D85A6DF5E034486589BA82E6B61BB21C
8220A1B04358CB908B8334BD4FE84255E25619ECCD65431928235DFC7754E5E4
D9771C3B3FC8474A58CBBA10C1CB73E6A79D8FF4926571A574E9FF295B4535F7
8DAA05993593185F772F3FF69759B5FDE2A57BEE4EA6575D9C44C7DA08D15937
03B153B8F084FFD4F864AF9CD8E91EF4012C66C0F5042649325815086097D07C
257CDEE7077470AF4ADB665A7D21A9524B22DEF089D8500476CDE55550C85DCB
566D966DCD3FBA66569A31069E321287573DB84CA1202CAD8949E3979D1A3CD7
94D64621136F2AFD63746E5172BFC4D9A88D7069DF6DCE5087F932415CE51FA7
17B899EEE1EE3B133ED53CC72F77F05B6DB7F2F1E7E08BA1F328A29096C3F918
50C9366B9AAB20FD65CE58B68C8EA8F978452248E2D7DE809649CBB514CE916D
02A62847F660C98F7EEE3AA151E024CDC7ECE8401B801254EE5E86731CAE08D2
ACE5B5A8394FE9A0D0F704D8398BFB11D4A330EADE7E45DBE4836F664EFD2C05
744C7D204CC1FBFA6F27D2C821EBBF45C6DC5678F3AD2C13E17D5697221CE8D2
13E6495C95E03F07F6C90F3E909F3D747097300ABF164D4CA2362943EAD5F436
C20232C307EEFEC062C8702BE20D01118579CEFDB7905887250E1F08DFC8714B
0A480E23D278F252BAD9752D486C386EAAE75F4B6A6FB3DA1FD680E9C78D12EE
43A66C52771FEAEA6AFC8B1410FDF2A3ACE295BF09B2ECCEAC25C6A7AD705C85
385B18D03F35A0538441B1AA19BDCE0353A3E259E7C534D28C40ACB72D815F1D
1FB6B66125131B9D0E23037E0B350B61EBBAD2DF91817CA49424409E8EB4E14D
750B0E980E87856D36DBE07C720EEC67079117E937DE0372932E901F9B131EF3
E3CDD7A24D4EE2F5AF9B52B585E7BF5A77B7D7C635C30C04DFF8A96C80EF9843
18EC3D5C90E80E3C7ACBDFF1387CB7C3F11226AACBDEC9E570C16D7588471008
86D73A876FB9BDAC355B54F50607C8862C9A4B505A6338A0C7BE9CEE5F3B5F9B
3F53FF12CAC528BEB2061E7860DD4BE1BD90624CDFD843EA9DACE5C827C97E70
FB2A8B5FE5E28B51A923BFA2F29E0290A4D168
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91D87663136EA17BB18715AA052BED594CE20910697A4DCD82C
553CBF42550ED97390766B1DF694CCC628695E1E6F0720F705FB727B15C6CAEE
EAC922B8F093E59FD1B1902FE450DAFAD952EA0A98B0686F3039CAF83588CC3C
30ECDDE05B7DA9A9E75D8DE747CFEE2E831CE2124CBC71B927051F7FB892BC42
936A1C53B8DB13075402BD4080216A226636DF2CAB859F67430D8CCE60A1EF18
205ED93EF4EB608B037B88D3CC7FFDC5252F691BF753FC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE515AAA95D76089B8C6D8CBF4863
3095FC397712BF000B4F2852F1C52ED15534409086E06FD6BC39007057B13EBC
E5D8E8EB108C21F7A32F8D0DE181A612268EF75CF1AA6A436B3DF24E7DC6ADB9
39B89E2924D0A92FCDC2AEE877BDC9CC108A18629F0D64BA727A5BC21B42B5F4
1E8F864AC5FCD0977D31EFCD46CFD2F60DFBD4B1B7E0041EF68AB5AF9B946FF9
36607E3512ECF70AC43BB1D4751F57512749F002E1148BF99DA5CA7EDBB00B60
E26CAD17086C48CEA3FF695D5E829EE6473F0C657F7655A674B43152DEC8B2E9
36E490A4D367D68214B348BA51DF871A83CECEDDA1F3DA646B38272829C49B77
DA56D8C3459AEF9356949ED2BC8CA8085F829B9F9E0B4E360140E2EF8AE58083
EC6DA4E70BE9D053F69949A8E464ED478A8E037FB132781E4D3BA60B95605DA5
5C67C5F6EF7AE2049EA3D2EEE67F2FFC49FDB8B4BF1A5B55899A71BFFBC96D20
CF2025F12147C5C8D5E39937B03356D453D819AB0EECCFE7DA6DEB238A87FDC4
1A647D79A3E56C4B5AB6B245E707523349225E6B8EB758ECEDE8173B87B4AA14
71C5FA50EF20ECB3E3080FC6D8B395542D5E464EAD1953BF60A81E14EE323080
F4DBF77A197944E1DCF0738600BFFAE3E467BEA9BBE6258A20D9E32E17451282
4E1ED5C40D3C40923DA150C493699F0E68263CC98B61749221081D1C75F39CBF
B348CC853CECFF1489C53CEBE1A6915BA90065A1A95764E697057F013763621B
17F36B310B47B715FAAF668FB7F142A6C7682F1CA89CECD0A14CE3BFFCCAF634
AE7A1DD365AB9D3569F5A96C3FD32EB201189D07FC46F41CD2FB9B1BBE515CE2
23213D98659912424520237D41AD0A00728D89D92DEEF30B110E58570A966383
AA9F7CE59375525369CA6A559BEF0CA0B802D43F883E1C794B9D3EE9AF8A5CD1
0A347EC4A862A6F0B3867EDE0A050EF258A7F49F5081F1FE098F53AC01525217
1C713B12582F6D29ADDB80A225B11738EB3D1BA708653BEC6F7AC682EFC32633
1F40C5E8FF16D3AB8647D6542B4C6CD77F4469A676906BA6AC776BDA43E4B128
3ADC30DB82832166A9202C67C70817F41B505FA0B5F906C537EFCDEE4C69AFFE
F891072A4BF938AF76A97EDD40B7F6F9D15E91CCF9B8B2DD85257EB6A2C747CF
7113878FC1B094729613788FD31ADEFC852D2E598734CDCCCFD8C05DDC3040E3
87C62F0DBAA9DC2F6628F61497ADF417AABEAD37062A126B997B7696988A9F2B
3AC897A10789DA53D2DF6BC8441AA916C8F02240634E21A4E79A7C8F9062C2AB
821ABC614DA8C5DE3657D1A80350032D19862612D6C80422A4362A89E46F7DC9
1B557A4C8683B5295596D591703D3A1C188354695617AF56DDA1FBC56DBE898C
9AF2FF244463C0DA21C717E348E0BE63120324C3F420649F82D4160A07270010
141602C3A6572740D06F3AE476ADAE3DE5D771C66E86F97387D4AE97D6E59A55
4057B9862A120162EE8B3F4E8DA71604E6933F27729A2C7FD9A30D9E8FFA9D0A
9D090B86A2B91B89AE3479CA9B27527C68B896EDB1FAE22EE3B71C15A10C1971
0517916D0CF980211650F7FD1D657C3164611037449E390AE607F3790491D6FB
BD58617B4FAA8341C4DFBAB734E78912D306347C0DCDEBBF156308BED3E724B1
5646DD2FDEA523D863CBD4EE16455CEA2C0BEC9873A424C98F8E905C9CF80FC7
24E5A519BBD1CFD777EFC9548086229ADAC4953EEEF78155D1AAAF6A197A1B14
F0A5EAAB461B7B4C814D7591163219389B0F4E74CAF6C646E9169D885AF04A62
7278E243314F53B604C87763D8BBACAE4B22606DF4F87EC63BD74CE9504531A6
AF606B83F77678B642E1E8A32C268DC6FE77C016E19412B6011FDA90BC02ACDE
8A3A4BCFF003E895AA05182617BAC758B30905B56CCEDE37F37167FBCFA2CC9A
F628BA1877424769AD11C53BED092CD4C17A17A44068884BE4DFF69219562767
BA09C44B8F1E68BEBF387FC14BC2377955F6408A0F6951FDECE16DC97E999840
09138FD539C739477EB1F5370DD1D26E6DE100B060B7E57DAF6051F6254E6A4D
3B38558C6287C81A6FCAD90C568433B94F8088527CDABEC674B13580A32722BE
FDA8D1EA7BE286D95B7DBF3D2758D029FE6D1EC1336A154B5490D8D794DA1A9A
16DA891583A755B987124713CD716D916700E68F601F6F8A63D0FCF3135BE7E4
461907C8EF7DCF59971DE42B2B781312D14C0A9051B17B14FB582DDFDB57287C
55A74F13B01343474FA3B865C083A61C715C777F8117D2DDB83815E3868E2F4F
86F53BE69F3BBA3D0FCF5437EABD8B2A042FABFF483882103582209E9DB25ABA
5906F28D71D53750ED0F7B30F268BA2559C0B2578592CDF1FFB8A486483FB09D
A826F677BF6ACC2410A685CE4603E79C04FF94C5059BAC10947BA16CC916C66B
1F0E9688D25AE8CAA031125B61B6BE8E2F73A22316553BDFB492D1935C76CCA4
F1168492672DD4645F808213658D20FB0D8E059A9D520625C49BB777EEB850C7
481BC165D26D9173D5A2B01AF004C22AE04B48A3289E49FB112331FD1DF46319
AB90126937F60CF9E48AC36377776EBAB2E91A00A9E009C531EB63E5300CC2F3
41264C6993BB7455CB374C42FF64BA9E556DF0D1A7CE8684138AC9AC0C237AFF
69BC6F8289F9703357AC4BE04C73C1DC1F84E03D692B02A2B072252518FEC11B
39FBD137292D2C05B69E55969AE74CD3A31D6E5204F3689196C1CFC6763A9B86
752AF24A305C366150DFACB4A332E59F85B57E5D2947B2D313480A405C62E9A6
320DF9C0B926C51AC0B85964255F7346DC8CEDC702D3D57B09EF8FF7562D4A75
4F038108BD7A61604A4D5FF0DD4EB1116228DBCF4E75722C9F37E4C9B4E010E3
CA56EAA8868DB2A3DFA7967B2433B6BD77628D7DC92221438E1C15460917E6BF
342CA6B772E8A981047FBA5F4107A2A3862024E0306BC0D22E976972C71EBE2C
8F4B253EDE6068C67A6BDC0841C2E785C0851356A4FE39BFC1390EBAD6D8966E
9B2609A3FCCC76F5ED4C048FE63430BCEE7CB7349C677A05C65CCF78C7DDD293
EB63D5E7C466E528CCAF36835EE227BAC4EF115AB6116957DA97DDFA62CF9AC0
C97851F982E62B258E26E398918A834C36A0C657D4208D512E3315950F851AA0
2CD0BD544751347E9AA35209B6820D0FF6FF28AB27D2F132BF72F1BE104309CF
C7944F3E75616D118C53B8834047CAC32A61BBE94CAC3E85E92416C778BE2581
0FE125B5C289AA53571EA1D80C452D25541F3D309AC650FEAF3BDDA56769149F
2A1B8CA7965127D8FE5FE873E98EEF621E059DF969C14E19E1C820A49FD2F193
75D6E5BC2521E803FF56AA45F1574B90D1F8450805C5DD2A8E4F4C23E114246F
C103EB63B58F30688C09E1B766F6B41E595F24356F8D6E6EC6D1476CBCC4C6A3
06753C7C6E67538BA28C743EBEF8C82DA0218BC5E3356119D1E4BD658E9EB5C6
4396D14E541FDA2EE73861C682D5FD2AE1B8ED3F84FEF0673D50B14FE29A5DFE
F03C2C1A78D554F14F6156FD26793B74454BEB7210A3F88B9E37BE276A19C497
B4C23B7F0AFD393498B2EFF70B8FCD62041BB2F4871B150F9865E3FE7207BCDC
7C8CBC3CF3A9129FDD04F9A09482ABEE624C540143A1A35A14E5FF7110BFC9D5
E0419ADD2F5CC1C09AD68EBB0935D3DA2A47FC87C5E3CF18CE4227ED29B9A8CF
29D9EA657B9BCDD963E79046E4538E1175311D5C8EC1832FA60469E495151073
2711716E70D2B2CCA0BB9CE60BCF933117CAB537A70F9439B5E8BAF9E2EB03F0
7F09F172BE0D0E1F94F3955700C92CB435D3CC0690B1AAE543C7DBDA2EE4D976
BA9A90F152D68E756C29A24A789A87A91C50ABBDAA8679300F6237728E5B16EA
7CEB75BD87EE6EB43C8EF8EE35119C43CD7FE068E1F016AADC734D43367E92E6
2A0EBAE828FADD77BFC2ECDC1E562DAF5660367E5DF9B7DF6566C86463A893BA
45E0BAFCB1FB0EC2D9021A27E724B353170D46D4B234CA5AF1422EF54B23DCEC
83B53BF3E745C7C96F9B7010371E9BD19A71244D1B49F4D6B25E3C834F74628B
06ED1299497DF69645730BBD0B6582B203C55279B6778D5405D301B6453F400A
1C724304941D884646C328C7B77E1C3FD22A147E3E4644FC01526E3326564A6B
5DC329FF4C44977E388689E13E80A0209B5599F0B0B5FEE06533568EFA5E5EA8
D1B85319EA3EABF03C8DB1BF7BB55B56047FEB442E1E1883C2B43CB8EA0DD997
522658FA91D01A2D221E3D64D048CE34560BBF01C461E2A4BCEB87ADEDEB2110
9414C1615E41C6952F8ADF3C605E1665B42B68FD220CD70AF44BB32F9C1DACE3
EB09ACA94CB6E88ED9BDD171A3100D4D69D8A56566C0FA3EAC58E902A6784CCE
B771D22781C30E5969EE3011690DCCB627837B57BC905B9A03FF4E214C118685
73EF080958074799B64D7E3A256280E9447A13D00FA3D6E666B4AE09D36A1830
2791AA7F9267FFEE49CE70902BC81395F39D98ECB559B599BDAEE22A72AFA0F3
9FFA42BC1097793FD24A2A31E50AF3BBDF68CC40344D489CFB91D1E9D4911A26
14E40577DEDD7EA8BA95C479340B9E18848E9E29CB0D6D40D3C144723F540345
3E9B176D8D68FD62E9FE76D670E012A4ED81A8493B153CEC0FAFAAED622EF190
6A54063EE0BC436B346E014DB4099EDC67BC432E470A43DA9BAC385340EAA812
5921E0646C0C76B875FF4244C0419510B5BFBE8D380ABE4CDD74110BD6BA8C25
ECCF84733AF5B4891F92369E9379CE45F6CBE7E3178917EF83A9E19292986A66
BD545CCECC92324DC9B2B6C25A3BEC76C78C5CB2C644DAB026162A499787D099
A660B6766500E083E40A01AC8CAEB19EAB84022ACF111E1D1826E3F3AB6BECFF
82024F043B8A1F226BDB844639C5C1AAB5AD4DE61FC357754093C51EBC67E149
9C66E969C0D0ED575241688173ACBB5E5FD0F0E523540498F79D701A90EAA23B
92F543A985027FD2715F4182BAB1640F391992E6A84E8AC7F70BCD0AEE3C4CCE
6E1793589423B942D82CC33673D652227EB88E279912B638563A1B51C0CB36C6
9F2762CD95B4BE8C22431014B54551378F52F29CBCD8D035B444547DF7D9B7F9
EA1DD690571689F723340082D075C5AAA0190182797E60835A740EFD72228AC1
5D0EC32050C617F6B87D60D24F432BEC4CF4656B4E7D400D0267089FCFFC7CC6
1A0C5ABB2E9F3E4AAA7AA9EFB7E96C9C26E1D03B98C42383BFC21FDD3410A4AA
F9FE6A14D50E1375DC1FA05950ECF1516AAD7B89846E96852878792D64A7BEA2
83E69EE9B01B3E29D6D60714F18EE60E6B7E2ED47E8E182C94D71C4A4896F091
965DAFAAFEE8AB73E68516B5714FD1D01246696D3C4566B179C91DDAD4676EA8
4BE72B3A59CEC0375E2F37692FC6772041BB732AC06C381F7B87B20C9139883B
BDE13DF3AE05BEC1771EDDB9B003555AAAF31F8B76F4B9E4DAA7AADBF42FBFB5
9DFA497020F39D3A40FAB5540E8BD4A282569BF33E2D2633CC89B940C77C4831
E9033E6406E6904C934DDF1025D0C7DC1257A0F0B1DF019A4CA177E48365DFDC
C4167EADCF5EA73F59CB60079859CDB77F637F9953C07096E17D78E2F610139E
B639806DAAF3E5F1EC2EAB9EFD6057BFFF54E7FD2FC8A3A06DE22FC1FC8C4F06
5447F5AE375E90AB1DBC3D24C1425C9328C360FD1FFE12027F79F212F19C2A57
1F988028CD5BDDF48851E1F958530DA41C2A68047308D198F493CEAAB36A6F25
C04968AA801A46BCA9E0AE0F1C14CE2E1288EF3E31E699E28F9E163FC9F1EFA9
E99171577848C5DA4B9D780E639977520327CCB89B0EB07AE1EC07FD93D19F9C
0A689FEF267B32AFC60CD11C891FD36524C9DD9001F4782D47903246B30E960A
439F315C4093F4AA8854274B18E8D4EE8893AC0F7BEDD9169DC9FCFB3BDE32F3
C81073D07BB791147CE9E15E1B72BD078B9B595DC4936FCC04675254A9CA2E2B
7D736DB0F32541B8D32B5C20AEBCF90071A0E52C2A97EFB0D86DD9BF2F3AB34D
E24D16AF015B0CC7A735A524C8B374AACE6AEAC8CB4182A887EF4B2899516B5C
020ADCA1F99D1C5060337CFFCD39F92BCB729A7BA36DAFC8FF3EA182ACE501CF
957CD9DDFC74A514242B4C69EECF460CF82F033635EB5B3A4F7DF718E0EC1B2D
8DDE862922A8F80A0DD8B36675E83371DDD0804294DFFE3A9E1B363EF5FA426A
242A4761372D68B5C88E50E101893AA6D9E4B7582ACD74AC46BE3E8161DEF949
C5618B150E779FDD9DB73AEEA11615E7DEF726AACE353E4DA8A74C8B1939A6DA
38FCF89EA2BCFC54BB19612984EC13A41D27D4E2D6E2102C7FB130B8642096B3
D28B5B0C2BA0F4CED1F847AB15F07EE41E131C730D6B8820DA460C53D5BAC0B8
9EEEB9E2F9CFC6BCDFD9A438C10A28B1D4B77E7716388AA987B266584DD8D688
DB19B44D4BEC5C982A858275556665128B99C202903A934E2CA96A4BC7AAAF9E
ABA24F5977B046267DAF6FDD925508A1723A5C2492BA056A43064447AC6D1A15
CF1D1A3797CFE85FB55B56AC05361026522F347A7E54C91D69A00CE5CF3F5C75
28E7A39402271933E0BC9E2F4B935260E4E435945E72250232CECB01F7C98823
349A006962A7D2D4D9CDCED356241DE54589655D79EE67D722E54198E66CA6EF
6FD2B82E5EB3EB472E3D5495B799C5ECCFACC357ECF91A391B8050E441C954A9
06EAD36D53FDEC9C70BF01856A65B9674C560D366B61EF18644E80E57DC95D3A
51508B5D2E4B9C51A64D9037CAD68D730C59F8916DD217E3C33D4819777C4AE5
8A7CB4A08F719102D33FC44E4F60F1E032C33C880A3FC4681906BD573C7A4737
87910AC263CAC0EAC1CA1D728DC24D8C2C25B06AE091DB97DCDE55F701A63D81
7F3BD70F801D02ED63B52CA0B86222F2B90F91C154CD64DD53C3264464FCB881
68ED814934A247C30339F2791D2040DD3C1FA731E3F8AE2E624ADD5886996079
3F3E91644EEDD4DD9074727F4FBD3C035BAEBD18239DAA35F6125EBFB0D710C8
3BCF6A989C96E69E411AD2392D8CDE70F36340D8417D27A83D007491C542505F
3BD5D3C3BD555BF349F40C318AE9BEA6270F8BE9F7891973BD0254752CAC88B1
2FF919A8DA0A99F729D2C995E01EA0999EC9E465A7892D5DFD4B654D2973AAAD
8001ACFC1C3211005DAF108ED84B38AE432E26D07AEA271F903D7A06CBA1891D
D8656751732BF41A130E71D69709DF3309A56B5E71AFDCE72C9225DF20BB60D5
EBF6D5B7BF0374177F2173BE413C71765E586A1A44663813D94E02A66EA741EB
60D9AE5503A185E2276EA24B32783B389678BDD33D83EA001C76B681675F5E44
00D758C423D376E2C1654FFF9EDA896ECFFB9944EB7EEADEC7BD012E823A30A0
3CD39505EA3B58A38A3AC2E3FB837FC094F774045DC1F5BC3084ADF7E6F8CF42
0DA42988B17383C10F6D94D0197DB0A3A4DF51BF0EFB5747A29ABEC05CE3C91D
1DD73569630EEA25E0AC1FF0A19C372A9734D2322D3CE07A3FDA799F40F5410C
974AC2A91E5100B5F8526C6BBFF2B1DB7C03F585CCFC61D9A893DA0177CA39FD
2874A687AEB8163F0F4B2713F2D03E73FC22FB15F517C72A4103D5F478A55576
C1EEDFBFDE9B94904E029869AA1EBF87F75FD4FACE6AB8A46C5A7A31F4D9698F
A188B9AA83AE2B91C0C602E587E63247986CC3B29FDF945B8D65BF67CD151A11
36DC75120048E1367FA203A5746C4AE3D51108E3306E02C345F4B464F05F1EAB
073D32AF11509A59F3447A24656D33CC5D961E345D619E8EBE7455F9E07E0D00
E38A7A2FF7E623808F4B3E81F4E11CA48899F9B2386BA4AD114054FB455C4174
0DC019597CF105940210209779C16B2A621D818752BE3E0596BFA33BCC2FB489
92BA917D5B91FCFC9CADE032280F7F2C286836EE7A131C5F333881C127924735
2449FF4375CF9EEE370423883BA857C54F7B3EBC20098C6212DFABEE9AE609E9
5DA8AAE4A6F8B0B2ED3A99469BCF9EBD072B60FF7C7FEC0715F84FA77D3B65D7
3DB6493FE38E03885C31AC92BB7183E58236D47999A1066D8D27A25819A8FAA9
15CD06A8F09FE0D3E9AB995559D6E80A7119AD00B984C064DE2A73519094BAB8
2EAA60AD3772159ACAF8967883430B4EC67FA6ECA20D0BEDFFBB18E470BE7763
0EE925BDD46EF192F5D048DD272295A1C5FA6CE741245155039166B80818F6C1
C130AB4B2DAE68DAC5B52DB3BD94842751A23F54FE999DBDC257EC4A6C0F3441
CA7811568D68DF1CCA64E069D10DE577C4E43F0E4BBC02B15011EB0574543D4A
A0D04B945257A16BA754214E975E6024A7B6E605242727E8CC4149D01BA99468
20758DCD91B8A1F921BAF0ED78D89F33F144043D0FEE36BBF30FEA6A4F6A047A
230D44CE6210E275C4AAC7931329F0B873764BD1BAC318E2717E7BDA4097FCB8
FCB635C4E9DF3E154262B37BD16AF15612ED9AC48BF60CFF85EB4AB084DC3A55
C75248E4DB744F6E0C54E83C14066C3441DFDA05B75831FF3172069E6700B37C
86688FAFA81FF462872760954D2CE0CE474B3A5826DE04B5E80FBDF2108FEE2F
04CFCB0DE24EA6A803EA7D37FFE87238BC7630649C9C7719F6BF954D1E7C03B0
5F4F4BA4A66901948F1235146B66C6AC37133B518FE14EABFFBA280CD8260D66
0274A8457B12F3D607619CB08AE72CC5BB3A34201F0D106229DDAB2A07CF8D93
ADAEF2E7B0528A2E085DEFBEBA3C5FE93DF12830D995534A8D82E4B822F07B11
5E0B63EB78BCD800EEF2627BAFE016A3D11FC76133074ECC53C341E532592376
A74B7042A9865584BFEEB4D4C3FB2363EF171CCD22DCB473B8173E8F9133A6D4
5FBB592B219CF5B2584CCCF3418C6E9D8A2D1481910C9571079C324AF829C39D
B36BFA67124053D79DB19F848987C741685702ACC3F554170D1B22CE7818EB99
A8E80923E9945B8F035FFA5B7481050ED9EF7A99E3FE103AB285CE55FC6626D1
4B2F917DDF19235846BBF4F9A6F044CCC49087BEEA512B1FC55E137D23FE61B7
D69D1EE4836316C9D8B89951E50522A21F77C58E90B261999E041ACAFD0AF760
41CB1AF30804A3CC34C06C6FBA8AED582215706881406F7F4BAF61516F52BCA6
767BD06B21212750EB1B5F07D7FB93D4FACFA45E68A2453EE195441C0322F169
C0C7843AC496C7EE85DB5413F53257F143B17D02D676505AD4BAD7E3D516D09D
38D4C49FA268C0A6B5EFE5E9D9578C34519695EAD030B18D2B1B928D2CB8CAF6
B574BF530330233066FCBA83EE6C45350AA213AD5635DE229642015EDF22C12D
9BC0CEBF5B09B91DDA2DC1E85C54FBD58E5318CD72CC4BB057439C03CB5C9E77
51731B75DE02D7FE33CBFBEB8307FA762111A1C05077AF91DA066F6B589895A6
C7494A19F5A5CA6AF7F917DD620662B408FA2C42E085C3F897F0D49D1161EACC
C4DE5819AF37982C1B68E83A7B0134FE419D23CF803DF01FD6055451D60E8222
7E9165B5363270BB0B7419F52B949B41056015ACD01DBF870413913F310ACA1A
A008979407171D74231BF013DA33CF12BB0F854CF1B11DF76574B9CB3F0F8B03
0F577C091CE0F82D95D2AB8451DB683159A392BDD09CCA3E498E6672788DE2F6
1EF7006D89EE6E8F2C29A495BE82CFAA6481E021CB53EC320AAD6CECD064FBC7
E47BB0E85FE638A6DA676859093A6CDDE716237E7C97294C6B2558C0BA02DE05
1B617F9A19D5DAECF77E2392E93B26FB4D5E3D1751ACBDC1812004520E40365C
830406D48B1DDBB63B0ED2891146949C92A50DFACCBF9A8DC5B22F21B630E2D0
D5F8F796E0C285B0BE95D3207C067EAE119EF37404C17535023E73FD32A1EF0C
6595575CE4D3BA865B757E8A132763F637266B57E210657C6E4EE536BBAEDE1C
CB9F8DEBD21E86825581E3955A5ED2CEB86D30AE540AD4662F8457859B8DBA51
655025FA11DBAF18CE6DD3662306521C620472E803A4E69106EC5E521EF996F4
AAB4425E9D7C3C8193004DF6B0E244652562A2F6E7D29AB1228A867A6E1EF0E9
C6F899B491DC136D5BEEC2216280187059B0BB02205C95B68BE31E79025E9600
A649B80FE0359DDB6BDCD292EE0320B1B6AF5535F8F540BAE5E044ABEB57E261
30917A464579B1F24BC8452AD33DA5F0E0E54A39325730A438A6EBB464931D45
71954145975B2DD760BC202A2300B50392C923A50F058803091B286BC4C0FEE3
F6F9B0C38F639E7A6265526966C93E01992AE7F8D0C563A05EBDFF06ED11E5CC
5495E4D833A1E4C4ACBA7793B1FA243568C3DF17E4F256A869D66D2B1C6378EB
A79DF5CB0D5BDDA62504A20E68C18288C7F45F09194096200A65571E7C455D56
202344F8344B0975E13BE96A55B5C87C6B53842AE45F669ABA4B8594120725C0
3B4132B7BA25E3B70D654CBA4A65F680CCAAA85225DFF931D0829C9385C6D5F4
8BC15D9DD6123A74B9E53BF531136A5EDF9192965ACA98E06316C2345437EC3D
1EC098C144D60AC1FBCB365F6F507132D4D07A2AE3DC264C9B58E9057C7C31EC
CF837941C0D95CF16CDA27795EFE5F6E32A89FFBC59649CC759617E7091ABE49
09845E975D40FA73F59AE22BC7A9DE94C8D7D6D6604856C8C9DCCC07407A115D
6D45B7DF6929B1C790908B537D321DB5621BE2BB042A97301D2FE70F509166FF
BDD8C537E382B549903534CC577FBE9D2FBC52DDC6865715D8D1E6F076EA41F6
4539056FD6F12A603AA2DD9DB0582621648F48CC413EDED067EF9BEEEA113478
80710FD78A9A97D2774EF4D5FBC8032955669B0469E354B981D1C7CDA6787DCD
0412235D838FC71F9E3CBB1C2B234763C84FA85FF22A970A1C98A32E96ABABEF
97AA767A1A728DC24D8C2C25B06AE091DB97DCDE55F701A63CDE99CE9D804C05
019B3A82879EDB943E49C22697037CDE56D72AC7474753A387E4FF6B9907F288
08DC922FBC718C467E4B0756936D8DB0925290F014F7C5A6B6186C2AD03218AB
9B7BC8F7037F433A0AB962F52147208D99DA2B5638493156301A8EB7277801B6
E41841E2DE908F1DFC6014FE4EF56765855524D5E38F1D85396E7C5D3D544E41
3CE860467D7CC0AEF52C680B8CF1767915D357EE76D804C5B83051BC46076F01
E2D91BA27FAF9AB7A1CB876EB4F5FE15650CF4487A938A117EE85ACC8102ECDC
9E58F15005486CD1B3524B6AE0717B818974CE8177F42CA787903E034A2D1417
98D21C74A0F0666B13E895E6D6F90EB0AC7B89F1E36AD630DED2617A67C1F6DB
A2AA2BB52E5D383DC3DE34556B64F1B8F1585F2DA9A242D6CD0FE98236360548
F75D58871FEE5164282E9A50396DA379D64952A6D39CFFDBA38C11C7238C7383
70C48D0856AE1E83C41C6AB175C3200BE7F1396F9CAF46C809DAD483EEF89232
B34BD8D1A690B61E603799AF425984813EAFE7F7F8D6287C0468E3AE99C277EC
2FAB34A27418FFFE3D52148AD0F1C8B8B3873F10DD19B813E15DA2B81CD15B8F
B58275287714443015F3694580C47572316AA45155FFF7E50BBAE6E3FF6AA5E6
FDB6827637A805D841AD5FB499AE7CEA454FC87001EBFED0DD4DCF5CEF72D356
792BA310AFFA57355A1CD7B73DD5401ED7608E0E388AD84CADB08638040D2791
1D5CD1C2DC6575563094024A05C3E613E093228678586D1590F4C85CCF00ACF1
C6E14A1E65E65A8ED13E0A65E4E64ADA9DB1DDD5368A713AF0EAACB83E7A32BF
32CCE68E60B178AEC588C63607A11D6366AF685F88D99F32705FFB5C31909190
4AA7A0A9860D694705C9FF3140A3CFB2BC5B409DF1132A3B1B34FA5D00D6B303
71349E91009BFA77876957BB88442B54EDE3A9BF589E24299FD34BD13605ED16
72C9A0E0A74DC6B684A2ABBE3BD976D458A2D390517969821483916F774C9620
4A513E6366951F097DB74D745DF4FFA76C47C34467F9E2C9A038545B2C9E6A18
CACF575938FCE4F91BA5DA79D7AB6BB91A0A6D6FB96ED1A9AC8C27EF6DBD36B2
91302D9CF74B61013834256B83DEE05DA3950CE873FFCFEEE3F93284581CD708
A692D0F738EBC65C09EEBC53684706E5AA02982C49EA0FE82B5C3D0E0CE24117
4A99A2367CDFA06D801B1588A55CD8FBC5B1A42667722F6714289AEFFD81A5C5
9D0F9224DA14A90F11A908DE2FA190BAB9326EEF9FE6A563644E59B5BF520E40
B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB99C2DFFE0AF6DB142F9D94
4983B19A5C42053282E1F800A29D34319957690CF7CD568224E9F66B93EF3B53
F90AF5D000126B2CE72AC322B4D962537889CF225B338654AE347896DE4EDB78
1EC82EA0697653DFA3919067E1FF45D95546DB11FA32359BBBA7F8046B52CB4B
E2C7A5C1785A1AB31239E96C9ED3D4E311584E53A1F1C38D2C87FCE2000097F2
C755A7F47553C52D51B91D09F501C16D19756F93C58A259860E29451D98F0B26
3012F9F28D3B42583FF880A6B21DE38CFFC2C878B26A2F7C2AD8E91C621443E4
A49280213A0EEAA75957CF08483FE4E9E64BC96B7C0D3E2B9FC5DA3C38A90FD1
F95E3D6311C4D50BDF8C89BEDF58DAB6334F4800695B15D7A73C7B544FC92219
A4CC3B27215BDF4252C36F8F82234A46B51F8F681A62FDB1B825834687536E08
910D311804686C70EC72A4F227D57119A0D31F9156AF4D76E60EC29311F261F1
18CFB985BD9A4913F440E3EBB41BC6D5E3D3027547F82CCD6212F2D560738B46
0CC66BFAC6456C51466E9CC1D4B4C1AD10889CB7851699BFFD28D02FF6388531
144B4F606D0467149176EE154BDCD604A3A3A5769147FE99FC68A3688AC93D92
4B3D3CF5002F91C3255FD92C058B735F377C51A8FF392A822244F5550DDDE2FA
03948FBCF8E12DFB9D84EDB11E86C86C3FFB00BC4BA7BB30954C8C403C373E5C
DD5962599AE3BA0D086EE6BE1683320883663E67B8D29CF63309F98AB4360391
24DBBF37CF2C460D4EE4F7AC5252F4EF69BBA047FBA2599562C5000E8E2E2793
7D3712B626E7C8B5F8709BC9CC5164A732037357EE57EF59082413742A4CD1BB
78156D5809A6885E1563B1D34923A19B1743CEE654C9C39665AADA2FE49EAC8F
703ED627284A783F001789834F51A623C6CE67828608206A64A0577ABD20656E
E99E9FF5470C355EDCF71E375AC09CE5AEF44A9C3F70237BEAC8805B0F588794
02CE4FAA2ABE187EEF62A1F70DE1CA0418BA70121ED66197614EF00EAB92CBAC
25AAB048F0EA0B18F47C1DE84548521096B1240EDC18A069CEA1467700403A19
665D6A2196A64D1206AB59C5FD3D761B784845155F0FDED1DB895A34B9E64343
93BA92AEEF4724C34EBD9DFDC59DB694F2C3C4563F802F8C21B71F0C9983A978
0ACB70BB906BE395A5D247A11BBEBA73C5E364170E0D91C3AAE4480C578D5760
BF6A389251D6969B8AF3AD360A8CC6806F50B27750973E175161DDD5A5C76878
980A10B81C481190035EDF5DEE6F02CDD1781911E07C871BC80E60FB2B99FBAB
0A2CEBE51FCFA337A7D3714416756677B1AFAFD23F22A09282A6548E395B9FAA
0B9939BE70A2E1BDBD0470BA0A80BCA7E7802EC66693BDBCA4E76473FE94B62A
75EB16BCD26BD752DE5BB21DC9C7FCBF815D33C591D01BAE3BB56977F0E8D211
58CD18F6523CF7B633CC6184230B776E9BA0BF1ED2545A0446FABDF17C6DE8EE
9EEE56276CB5C7A5863400BBD725BB08927B936A128AD7D3088895C3A2BAA31C
54AC236B499AEFCAF7E22DED0469E5C9D6102F1D3AE812694F637A69A84A6632
0AA04AAE04E8C4F911B346B8EC57A4DA26D80D31ECB29007C483EDF570C8EDF0
185B123D619284BEDF7FAE632F0FD4EA8343FE913EA90B9ADC7D025C2B8EA368
9D75A9043B3D6817263C54EC85DA80EED3D5F47556AC4B2DF9510C2D2AD2B24A
76AB48A5F30BA8F41A4BC3C8794BDE972C02A63AC37031CAEE62F37E54EB76D9
D9A73EF32C223E3A3C8EF9DCDA92FF0C8988FB0AF64B7ED5551A33B00600F696
EB582F5EAFD33A8B88C6D49F1AAEFA49BF61EF08F27E984ADFC4099E1610A8F1
ACBC0DFE56DEF572D709A5323B8C050C2A38EEA022F492ACD8D6C6254B4FE337
6EE46E7E218A3868A1F35192B6A29EBC2AAB1E6067CD2DCF8C5B352FD4124E80
F5B0B25E7CB7D088AE22D30B215C01EA61946012C986D17A147289DD4C38A3BC
D38DE9EA553056C0CB82ECE81B5964E65894E186336E74BA66046AB43C9857D2
15690076BD235137B97759DCDF37316FE19495581736B0FEE0F522702E81A866
8A0C2DF97DC48AFE50BB6138C7B9F9B5E28672A37BD8F322A212693071218A73
09D4A9FF6AC39477FA40778E989749B4464ACF6BB7EB6DC648DD591585A08F81
174FFE6233A798B6E803A0A99CABA87DA35B532BCA16C510B995B899AB826096
6E9B6F104FDDFFEC30B82EE84BD6612FB71FB57F70A0F83ECEE3CB32F8698311
B46D9A83DE525267DCFD74F5A8C8AB9126DD65245C889FE9E64B5BDC4CDAE010
B39EC7C3B62167A0BECB2176BCB51C7E6F47D5AB7F64351D1BB74818E99AC3AE
F06CC6EB0CD71F4E2359C5AFA5754133911F7E525AB4451F5780F6A614513FBE
4318626829B3309E20A2EB04588BED4BD16475772D1614BD5D0DA47B9CC1978D
38EA4E607D5CB9E6A1540AF4589D8C253E2431E2B8F96B3A555878AE141B16C7
613E701BCAECCB6531BBADEBA143C40DA56736E66D332AE7AE9677BBF810EBCC
680819AA8682CB1A1444B807727C458CA8BB27B8A15CBE5B431FB8DB20F592C2
A6643AF91FFE9A74C600B5F271D3039C8CAA118F768D47D421B07FB17BC8C1AA
6FB26AA5377376257872E41627B95E2CB63E964877667DFD1C89676C2FDF9F5C
D80CBA1764D7296033F36CEF74E1D0D8BA301DF403CA0D527FC5B22673FC65F0
BC11268312F2FAB94770F528E5EA0F3CD46DB4FCB96305F4F24669ABB3321E2E
FDDD7D4A5900036043FDEE0FB3717125F1946FC5844897F2AF98DEC23D240ADF
6D8AD7001B4D2B0BA9B3D98CF0B4AC9EFE04D78B9D26ED4FBE908ACAA25D5162
23C2948505BDD529DB8539B9B6F73E9CFD9CD3F1C336445587219DB379EF07D4
22F3F539D883187130017371A7854988C03CE410C50B4A0D0D9B10A54435F02A
0516B93C3088FB94EBC298FAEB151B1CF06B7268C13AD212B4FCA7DAF88EE055
B2CD2711EC377DF941205713E1BE6D51D46599D8C2DDFE94A2105FC2D898DF5B
697AA7267C0C4BBA87AA3EC7166170B80B7355E8025FF5AB46739D685FADB6B3
6AAEA183E79E3BB86BC0CFF5911B8A93AC42FCD811F7C7966D2112DB9A312041
1A862819F4F8F96019FB2822AE4D7FFB00D18FF44D2B065EC4A1B9310742DC47
A084620AFE85289172711778FD9E79D0F21972E5CE1A373AA27126199F3AD1DC
69B5C9ED0EF3BDE077C0B366F7A7F361F9477A2086FF309E505E9C657C590DD7
961A75BD428FC3CEEAC5805D812DE4340CA9A9792710DEF245DDE8A783B67770
A98459E23E0E7161745BBF5C6FD95B4E62CCB302336059A006B4D843C5203A87
53A5F749F4B5BC03E405E79FD7A65CE2B27DC55853283ACA5F58FE52F8741837
79228E61A57D942D0FADCF7CBDAB4C710E05AB9AFA49B934263E2891BC76D311
79EC890BBA4CE49FED241AF68AE079937FD97E121E49A6D4B8224C70EE22AD3A
B9740C261AD4ED24E83D21202783DEF88E7D5ACC855A6DC2AE4C627276365855
F11CBBA6D747BFCF42166EBE5BC93058B9C9039598AB63D805DDEFAFC5893B00
86804E60080A4C7FC4641AC84D9C0A610AA270C0374F541D21F6A8A812C1CC02
7C7FEA0A1B3AF89372E08B1F8AE37057DE0BC5B2799B4A6B62A9C9BBCF1FC027
3DE7B769AC9E49E29C51F8D2A5B205BD6A7338DD78658167D522BBA326D4E3F1
DC5CDDCBB1254A1ED24539002B4EDFE724B15646DD2FDEA523D863CBD4EE1645
5CEA2833824CBB728B11CF5D824D9BB84846D75651244286A20884E9BC568943
DE1A68599E2F3EF62EA528B388FB2C256423E56370594181BB8AD7FDB645EDA9
77D52ACC49DA790921DE07C882A78612C94D334950B682E506DD58B0868AAE8A
D241571F11840B2F4E33E2B349E8C63961010905EF19E8693C5740C0EF90978A
F0E7E627CDAAAB8F270C30E089B80ACD3A1C0EE23726EC1ADB0F7A54965A5FF4
8ACF352982D8F2DFC7FA086CDB457B12AC465122256F7D46320955677976FBB0
4E6A3577A212A6BFC40196082485DFE88C095D46C253252AF7805D5A0E67CFFC
61330B589DAFE477C1EFFB80CE9FFD454A2A3499264CE02983116E19A103C3E9
A071256151DA606AF14CDC950217781F9C6ED40C6247A0E077BB143C31CD9782
900535F5320F630BA5F689CC6D91517EA4B3F99261924B43BF6CE43C9140AA5F
8FE895E4093068661EBB228308C0EC5F43DC92B39BC4B2CEB9827F51E088B83B
6A0ED4F0A5D956F69B4B2ECB5B720B5CEA5B78ED3CD1AE1C8F30158C50457F7C
5AB2CA87134B9DFA8084C1DA6AF96082DD5C44FA3993D3BD1D10C217EA56B73B
3C9F2A6835375E0B9E13B07B4D38BF176C1773536706355071731EC605C2C85F
79D5C6DD740FA2EAE0C2119F4D73CA53824C6C5452E34A39E05BFA77CFB2AAFD
32A72D2D5CFF34E6AD2C296293BEEE1896F15F8594B13E0955F68F5DCEB6DBC6
94919D4F41D0986D277E4C46F6F1D3F34C7C374C6E2897064C61D4FD93BF6278
DBE176ADD28528A2DE0E788285B12B39D646C5C48AC39D7ED15868E719ED936A
BCB03E8075C3657F9F79A632CA27607FF060B6DB75AF203E18C12A20F2E45AFD
00A134F3C3574FE7EB32BF9D77C72644AFD1CB1DDD1FB208C4EF6D5D6B080282
AC86C63895D284F0BC035DF14271F0465F46A229A3D7F80CCF23AAF0ED8A8A6F
BE36F25958D31018F03D3D15D48D6A2C5C4FA9FC0A0D8AD017B3458BBE917D8E
C770158B58E7E6E62527DAEB344C24EA33F9F2FF7CD71782845B8A24DD727261
7CC3886BE23AA1833D2A527FC19F8695A97E7AB80C1F30099AAA9C14A35280EA
FE1FCB0328B9C4263703BD6DA577CC9346550A877293F3FF6ED994CD3C43E14C
9A59CE7D86E585BD066D92BA403D8E95106E447C13AE7F39E49AA604C79954F3
CD4B96FF76BE106E1FD1AD94F94D5A3F0D5553BE7C7143991CC012D234BEF89F
3450E42F0E9B4BDE504FC91790577E2D0E1267FA56D277AB42CC593BAA035945
EBFCA157EC28D8EA069F251F65DD4380212B2C5B87CFA09CE0CB7B382571C6B0
B117AA039E23F4CFC91B0A48553A7A28D0554E2002A5CECCAC565C16B53CFC2B
F0A5F81D668CF0A8C504AAA12B9A8FC7C5AC5F8FD8CEA298F72652DDCBFAE66F
26FA28B5A7678E7B517B74E1C5A52EE31BF793B26EAE9018C1959F462CC4820E
6FA8F7762CFF35FE939314431A0DB1837619382B1759667B7F6F52E579156838
A8D691D00141839F0032560881EE58F413163288751665208446CAA0AD7FD946
EE45EF3C791B0516549416F2D2FC8B6C4CACD47A917B8CD1827922BF5BB09708
7457BE14617E26AF53DB2BA5F5B6CCA6F90D80BBC986683BDC41DB21D0A902F2
1C5F50728CD6D8F2C1BE8979D4063D27CA20353DF495A25C57B888A5961BEED1
4C90960C8056A195BA46DC825BCEC4090EE7691136582F2E35E550571AD45245
96FA427B5E50A5C1FCA747E85677F3F0B9AFA4675A412361C02519D0B87063CB
39C0CC8C3CF43CA5F1AD15C37D3EB3C27776AC092A285AF9574D6391C93B9713
965E2392693E7072BF4AD95424750CEA579D0364DD3ED34401E2F9C16F9E442B
6D0D7F0C56ADF53B0F66C070C79BC4D5568E187E6D64C851EF6CA832C2B50453
555DA2CAD71E9E126150EDBB585B12ED83AD56BCD497C7E28AD134C8E9DFE3D3
E2FB855CA97E1B3BEB017BAA8166A39AD811FB8FD6551CA5CDA39FE25EE1DE94
7D49D435DDDA9D1C30309EC1D12C2BB0F702B24BB99832854CE2423E1C406F55
8EFD916ED7A281F84957427AA58F6C9480980BCD692461D85C3EBC20098C6212
DFAC917E764F88644C6E5835216ED2DD1B36FCCC468011868C0FF969F55B4DB3
DD55D05668D7629C66AFB37F4E023D2319DC25C887B2634DF20F2BA6ACB780F0
1E5437F3E7FC1B1C09B516572AAF2F5C98F5BC52DFFEC0A803EA64615F387CBA
E7C9F219BBDA322DDF6ED037F8EDDA43B2070098BB26DC1502786FC7DA9642C9
6F6D3C578E85E876820686C412BFC78C427E8E051B99E95D205AD9D274A43BCE
6F308657D62DC3F52AF84A520B094E69BCEFC716C2E59D2EF083F5CA27BADB80
DD0AE99990F2A4CFE6115BCA87F7B908E11F729332627DC7020D063CF8F6BC42
10F3CD613DF7E3DAAE133A102A196BE260790E2E6A8F8B74F9FC08D98CAFC92E
A0B6BBE53ADC954B9B3F76B2FAB6FEA260B384C50C1A2574698D6A2A43888777
D4EF42C1268ACBA46F5DDF43D34AAB120C495EBA30AD6F0407DBA2113E7F574C
7B17790478AB1C001AABC76DF02C1AB2CD28157038727CBA90DD35117F179F7B
9BC0B174C6193373BAEAAFFD81A7EE877EDC97C7C86CEDB98464C379301967EC
4F26F3CEAA224780C65D0357949E0196A34E3B547EDB2806235D9D92033D0EBC
E8B8A67D3E65A8709A2E36051D710DAFB9333E14C331C974219793DDCDDFF94F
BB5CF83F65A6F1952EB4096C1B91B6657C4BAAE607ADAFE8D8460FC48FB39C81
26488FA258BA955516DFE82FB250690B927A03B3A5C0324C29664A425D9B7A6C
4ABFDB21734FB6CF0E76FE72A965F4773E464222DC0349FE200BBF56560CC3D2
F17BB634A311946E5592638F0A006B0B015F6E10100E6646DE9C77B8D76AE6C1
AF7683006C3CC5154D32C4074088E137F93042708257DBBC2E0D024E46C35C9E
7CF4F0483189CBE81F5B5F1D642B2DBE4D1D0C823B1FBC8AA8A6C654B8440ABF
0BADFB2394DF0196EA4BCB09F019123AB92002863D00FB9C86EB8F23CCC4ED71
1F973F0DE9E5F9B684E433CB622E370D2D6220650640039772822FAE5B986A9B
7630F0467BE29D6DEBFF0D3F69E0C9AF6B93D2CCE135F356FE2F2843FA1DC714
679B7EFDF693D4C945D0AB66EF8B6E6A1FD39CEBBFE26F12F28291A6AE2949DE
48731AB38A786B3173F7F167F3D6FE90A266FA446E378D6300D9788ACEC208CF
1CEE59A30E3879456BF0FB5A606F7A211F72225DB3DB146BDB01C7E9B1600938
80A3C18EC4503D3F55A3374474F1D4BE72735398E9BEDB12DFECC33451DD7E05
2CF00FDC0A854E0424C4F738AB415B034B567F367CA2E2A8AB4936EA7B227564
909226DE954C56B5DFBE90C804C68A75B2C92CB99CD5DB3717525B37D33DC7D4
DCE62BC5140AB590C1529F840F4434BBE0556851FC6BE6C6B7422A8B1F6A1098
E4429674A494F370A7329477D58B435892A5DCD78EBC8A3610973983297A8BA8
3B0BAF12EF2385A7F49B1E3004E9CDA935354C7F42AD1879C36707754E855326
621EBBCA2D255CF0B013F84FD22F9302443A93281A24F7E55B6995FE31EF0F8D
EB63E295E8826BF920C8FEAE3B26B9769D08C8BA6318DFD495A3A35CF506520D
6F9C1CB57D6FF3F042BE49B872FFB60F14DF51EAB2ECF6C2B3FC12703BD45739
7797B1F5E1DF730CF36E7E0DA7F98052D72B1975FDE54BE1956BF9A81D91D670
3F3AB779487C0BDD8DE275C09772522BDEA38B0EA5D984D5835E64CB4C6FBFB0
11B6C12327592F8B086ACDB860B1B84DB9BA0AD8864E1C505E451409F058BBFC
0301087271EE7DCB44DA63430063A0E77220CED0EF8DA2C258BB069706DBA396
46C6C89D2FB896653CB3AF6C9466BF2240E2A71881F9A831ECA28E1110862C78
3931111D2A9DAC0C40A97C12E1BB3713F94D198424FF07A0D1ED3B50A1FCD299
DEB299ADC757944A22B273DEAF11E919084BB4AF51C87C30AECF6644A4E90D11
F885C026681C1A184D7F1384AD8EEC3C58565FE571E5BD2F21AF1DD3B3A2588D
D5F4C0FE6FD2E0BA03804B492DDA742E2774A10B4643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256A8A34BAD9B23E06267D9AB0480ED8F243C7A749160016958C
77F7D6244DF68CE4F1453DC12F039BD581D96BB690919A3BC4CF7E8DA48AE10F
19EF1856A705E51C921EC40F9D39F17020AAA178E5BA1D3E75E88BDB85907AE1
1677BF129EF1BB254C50C1EA4C86433A5A789F394BE256E9CB47EB5D416967FA
EAB3367C2E505380D87F43426B64371270CF9A0F211FB52B85053185AE6C5197
D265B37023F21B3923BDDE92891FC7C095084200EFDE14F093AFD901420A3DD9
1955D0744F83A21685D1900F6F56470DA911CBB3BD57F50DE521202CE86DDB34
598B8CAED5B6DA81A6C816C74752472458D3CAFB4DC5964EC24364FAC4C11F2F
85E0B960D1B672499B916012CECABF4989E9508EC480AD837EEA8ED01905F332
83C9C740EF3FB52922784647364BFCAA4975501ECC18F0A78587E1259B120548
2DDB69B0316A294537DD52DD42EA7B5C525587613D335148791C6FB25D01D5EC
474E7CE6AF8E5C9A33F4E490CCF863692104EF9A2DADA3728C9E3E0893C478B3
F7443D9A332101D1E729C03CD003680E92F0D10F566B7D87C01ED5E6E49A641D
6C43EDDB37864049CBAB6CF4D29FFADA86B2C55AAB0B18ED26CF4ACB665CF384
897F3E5156C9C207F4D2968158418AEC18D647A6DA9DBCF5A10C5007ADBE32E1
974588BD62694A5DD0BDB90C60A5EA34DEA9503526283CD719B7A344550A1D33
ACDBF5636346E0A2A60A0D4B7007AB165BC1104AF67922AD2C9EC2862981CC5E
F5D0932ABCF9BB1AE6F5715FDCC38757056512214E3767912A601F75F9A9415D
03C8D92BA72C28C2C148FF48843827058096353108C24171429FA99A086B51AC
E37A02D1152D470D65F2F700F5E0C957E5928EFB5275B1A0C0A02357A053A61F
73F5858DF3DD59E4EA30D62EAED7FDD3B43928223C74F16BB6CB155642E54A0E
057B4612850BD37015EFF4C930F466CFA14A31C24CF968810067A43B3DCA0C54
978C821D33E725C0B86FF022AEC92E52EF848CC7C269868F49671099B8B7B8BB
355FB5F045225C94BBA6396A6DEA130CA441F8073C261AEEA7435EB564240C09
B78C4B02B6B79CE0C8F63205C359A5F78332FFFBEF97A93AE4A238A8C83F83B2
02EAC8DB0E948EE3979D2D9049B4A3B40185BDF0816DA99795CA287927968E85
C3FE71046BF5CAAF588E6A907AF195C31A7F80552A353CCE50E1E3D72EF39579
E645DCE876E505CC8348893EE05FFD60CB436F61E6F21C48216AEEE4D31209BD
7AD01EB17C5D14F4E5FAACF6167862A987D153AEFF6650578358B43FB424FD05
4C51F0B5F5978A3FC55B701934302A3300ACA3E2A3149896D63DB2851DFCC45A
5BF541FC3D2221AE00F44E246D449777277A49B34FC6960F792B245D1E534663
C9BFABBC2A5CD7E1AEF23CCC883AA336FAE4BBA32D18A213869ABED3C94DC284
5821003F91DDB918AF2873367A3993605F947EB3D69F4B68CE7A549396E7C272
FB9E9857356C4ECEDFCAAE74590B3DD2096DBBD57ECD3B26C607EFA14CF65A22
F5837D99A00138C0340083FAC01F1A052E23200E94DCDA8807FC3021A1ECF28A
E7B07F30FC4E9EEC8EDC1A4916452575C7B3F07078D5000FCADF613B837969EB
3C7303D4653F41FCC57429075B895E41864E311EA0F3830F2017ED7C652673D1
E3C746A503C2C0F1F6CC28CB64BDD40530C73917FDBB3F5B1480DF7AC0906D8A
244BCE15CEA7080382071BD5D814AA6BA39F7A6DA2E4F9E5FA2905FB26784F9F
27A3F3F2264493E6766186336BF5DFBEBF01FD780E0983100AB715FA4B4904AD
9BDD2B9ACFC3FF359CC8667D7887C9BDB503D1E681CF8A9FCFE2C2D547F1B703
A410FDAE034C078C77708C4A345FF78932BA79245433EBB0012B5C6D4D02E49B
7B01852ADD0307A4FFD3A552F5CA7D4C7FEE980C1B1BDCF1F9D4FE05F4BAC0C2
40823F28E77309B1D0E6185370CF1261BD2325B000A1A619EB02233D61F76028
294FCFA010ADBA06F53A700EE7CBE03A260F2E92C7807C74EFED2B132A2915E0
4548D2C38AA680463BCC001CB36929605008F4EBF2D95DDA9B3D1096B8171555
A387B6A2C17093C958E960C7BEA71E37471AA75E5E31C34A63AF3F81BCAA85F3
F57B143B5DB207DF25DC59359DAE2A50B98AB2D2D3A6081AB5023B367D2B1B27
D50B5F8E93AE8BF9453BBE8FD563B46390F24BB7B3572D01FFFF3BAFA6428355
378CA104CC87B619F75E0BCF31E3CBE92822256BDAE8A4C5CBB5E43DABABA3FA
69E0FD82A04759D4161521BF6739131AAC97C5D91DAFEC73B8F3419AF9EFF109
0AECA836F7040561170DFA5D0695EBF7538738092BC8541D0EB393022F27513C
D7CE497C2EE6C45CC9EBCFCAA544F0BBBE334D4C3382B478515FC26501FC2199
5732B30FA9E466C32B655C013DDA26E8CD86640ED2DEB8AF4EE6BC02215D39C8
3A744A3E4E40C0073D15042080A1EE202196857E0636601B5933C228E64A12A8
C10E0AE05405DCE844771076FDCAA3AFFCC71DC7D819C3A202A4E77553F9C0F7
B7F8CEFCB79818A6D66025C20BC5924DBD3DE66FD02E7656440F5AD9F1B97610
08469ECF365D32C6CAEF1C102E6C5C0259E2410A72D950C9A90DADFDC11833C9
3640C96DFB9CF77EF07C44F6F4E45ECA89C32EC8E7C53F6D22B3DFF3A5DF928A
CE185CE5AA1C802FCC33FE8713856188B55786F457B5AEBA634A88976FED10C1
E3C783EAB794D6F30A94FA4A65A8ACCF7F7C36C7E216FBE4357AECD8190734C6
FC52BD298B1DE626D3E6FBD70B303E2D6010F849FE4E17A69F02E7B4C69CAAE7
0B9F2DFD5420F6D2453D8A30572DD2A12550B2D61F9D671BD621B7F7CC7CC9BF
A3DC750B75A26C3AF1CAE131E999918FF1A91AF36142B7AACBDF64C78915CBC2
50B553638F9492BE3472FBCD30E627DEB4AD85F262EC11D8B88F85CC8A672778
A3BE351E5819292D70CC2D23692CB89EE68F681581572EF8D6E8AF671989A16D
193B66EB148415864FD058E1EBB9EA9878D51C1542320E3F8C7C00ED5B17DE35
9DA187810E24CB244ED29CFC03F5FF651B72D3E5B70D2836DFE33E7BB6401B0F
13569A540BFD5B314A919A5FED3AD9722272027368F76D420E78726B25820600
4BA387FAA821247205501808E50151C166892AA2415303D2ABD61EAD6A41FDE2
054CFFFF5DA4728BF4CE1D892052701B48B81F5A6B8FFDD660789647311A16C7
0184EC4ED7759900A66B444CFAEC418E16536B30D75D3462EB461C609C8D47E6
8BD6E3302867D2027B198F10AB9C32AFE6492E434EA914D91182219104B22197
EA041EB4BD5601CEB6D079B99EA9094ACA0E96B31C3CE4C4F6B1D1D5CBB64464
4CBBE981835D86D8B1B0C7F00D67A636CCB3AA0C0645DDC96F30AD1E4913F65D
28D29FD2AB851ABD559211C7C5A97895C63B7B93E614D298236F65AE1DE6AF42
F220B87F22913A4347A452235919452C0206ACA15B0FA0098083597E359F0903
8051C4BC551FF80D0D21A69F6972F2E3A7CF3CA6ADBB0B1EBE8004EAF44BF7BB
CB209F4CFCEB7A52DD0849799A9AD086ECE0C46CFE09C77254D06EEA5818DF7F
C981026EA47CEE8FFB0EFA469E23050DF8AC188CEC6E67F64B36C58C36A88F60
969A764BC3650BEDA6CB9E85A6904AAFB352F840F8453B0B5FE4F667223456BB
16F60486F9C38AF072F4A6A07BCE44699387DCF83F2EE1E2B00C53DF9788B455
91972391929A1D45FC67BB0648FAD40756621200E43834B0CCA28532BB1E79B9
18F5DCA53EA0A57F3C9E271DABFEEAE10AC5CFD56A1A3B60E8E89DF07C2A11C0
E1F89B02D061B7C9EE627385A051573640CC57E6FAB11F92DCE88C14EDCB7AA6
081068C3F262FA279BABA8F1BB4F07B431A1EFB315AA5BA9837805AA0D7A911C
FAE6CEC7CA222024CE0D3D63D1B4D8BC2D08D64BDFC3240507494F7F10B401C9
A2671D8201E32B7AD77F1645EFCF7BA5E07C667227EF142D0763D44999323D8B
4FF8129A8EEC3900A00CCB026E694CD965791C7EBF6F454E4AE91268CEEF58C3
CD492EE4DBE7B03DE201E971AF222C24758A9D002CA04DDD891FFDF18A832F2E
6191D3F22E335FF24246DB126C6397932C72952511CBD3F7BEF02A7AE18CE511
645F9E76EFE6A64B1C399577C1DB8F5B0DCBFB9C0AF818C19F753BCEBEBAC608
199F61DDA2871C6C85AD4B903096F164D60BFD55848AD4A1D16EDBB8CB4667B1
C9C8795E869B9B74F712D9DE505B356951C13DA10A3EF094840AFE537D140803
2BAF29D0DE3BB879970E71C52EB8BC75FDDD19443447CAED1DC2C4FA947F9D7F
A8CFD3A13D2D1BA728E3C48C3A7205A402012BE5E3FE8E6CC190CAF25D9965C9
B9291098006F532E9227C04A548A84E8652AE73A8A9E61EC7CAED97B8D4D8624
6B3091108DC1E76276C23A9104017A962576CB9628EA600BC429BEC33432F3D4
A9CA4FE72E6C4B599158AA483FBF2D06CDD4D82A6B974664DB6555743021A09E
F714E4BFE0D7A1352D7D4274677B103477A0E3A34784D4C5CCDF5BDEC3427B53
C25B1BDE14ACA25822F86749308B73EBF4DC5A06ADDE6F83BFB368388BF12A8C
CF58D8BBDA154BFC9348A604AD1CD16445122708AB1BC2AE04CD5590CD3E0042
091DA9CC585AF0DB968697F9E15C59812F6CD9F83F21CF614D16623B35B21BBC
B07FC3A4F099F91F5D1E210F8948F92CBC5FA902E18529D3AAE7AB25DF8A37E9
92D8580FF57E5ED0D3627515D0BDED06C1CB188FA1FDDDACA9B869567B7E0DAC
CD9920813F1B3849E1959EBF034CD9229C35435A18684F553DDFE0CDD838ABBD
910E13581C1853AF3D64BFF5C657A63698BE5C023A96521129FEB6829B7D798F
2E57C0566EA3C1FD7A4831E9033E6406E6904C934DDF1025D0C7DC1252B9DFE1
E542CA198D45C3FC20749FC2732040F1A77F769A1AD12ACB834856A2A46D83CC
900DFF2B519493C9EA90569E68332769DD43B3A7B5995984F847014BB6267405
836B05FFC68D8337EA8295F7A6A319ED7849584DEF8305F1B3DA27604A975C2D
B6FC1854457C67C54DC0897601D976534DB8F4AA0999D7052483C3BDD1D4A104
5757C00A628121B6317FB8E40E11E48E61DC6DB3FD91167413795449FB16178D
B9AA5858AC777650EA0FE4C18ECDF229582BF346DD389641111D1A17D32E5B7F
831EA89CA4D8C46CABB6D498BC122C402E369CF06A6E34DF084EBBB3DAF7B5D2
1F6CFD57C497A23D06A35317623DCC68096360101378CC2850D828CEA639F1DF
E9775FBAA1495A572719400771332BF0154968884F95C0C24906443389169385
F0B0E6947EB44B5860BC803A9B2FB98EF7843F9A38E51623CE0E21C279F343DA
2E708ACC998C1BB5EDE3A45AB78996EB94C76FCD5ED5AD5AA0468323052D1205
BBE6E794D7FC7861CE208D610734E18A42C47DD0FA1E89B64F9271CAFDCCEA7B
2539FEF3E2BE466CA918FEECCAECEC13B9BC07C383E1C2E630210EDD2CBEA2CC
1E405651433CCFB0D90876614B5124089BB90C6DE8FE799CFF1EE3A6A8CCB0C0
07F4C50242E48324E9A31040AE138A86C89038835AFBCFD91900B19867E85B3C
C3AE38C42A92A0287BC5A6641770F5E9F75C572675AE6E69E7AE376098AEDF63
E0D6B5706557B831934ABE6D113D7FCC36B149D7CE52268155E00A81DD292E4C
BBF03DE6C212FBDF61ADBF769277F5D4878326B6ACB123477906B1BB4660F262
BC0CBC2D312B443B447DF41125FA6BCC772A6A64419EC00B753618A374051DF4
097191C6BBC815C3DB938B3312BD3509108B61ED33B18A73A04B5F96F94EB6D9
4F4BF01974BD8E120C8087675EC96EFDE2CF5F084CE50C6D66A0B188B533E41F
80B67A03356C8E3D527131FCD3CC15FEBCD2ACEA0EB86C80F997ADA635FD8023
E22F5BBDFF7BD4465D75F8DCA38751A75BBF6A2A533CECDE6F535C5A6BC7E6EB
24B1CE1E87CAB6B6187D2ED0CC5BB2D00229ACE7CCDD17602B9DDA972CF72053
ED0681C5482956E9340D6677A1F2676225A2299BC2E64FAD2F51D2218F8CD0BE
C5D0C7C8B6147928A0CCDB842F2F84219987AEB496582E58C0C3E1A010DBEF44
CB2CC458F45CC832FAD06C374A2272E6511BD0987B6E4A1FBAD528ADB4433E51
6FFA149FEDC651186F696F54D06555A5B0BB86729D6FFCC3D092520DB35768E7
0336C30AF163EF2E273FCDEEAB2AA86C1024DD737689525B7AE737DD81D4935D
6A71E8D64A6C6F6F0D77282F434BAA79DD6B8B5699B56C34C2796293CBC9423D
966DED4F341D225723A96091CD3A445A0810307CC13A1050AFDB5FD2070031BB
BFEE5106DDE5E90538B5A726EB20D1E5A42C4FED094DB37F5F58AE0DE4D1C621
FCFEC2011D635CF78E4B328461E3F7734DE2DB7D9F3C04D3677CD6FF6713EA29
2EC15E9D7002FCCB986AFB8C84FC5A2570A65ADFF62BD4C28604E044677A5799
B93F19AFDBFC032CCBB03DA4911FA25B6CE4CDDCCB0B06A5001E265D97FE8471
4E25E5AC21F75C017C5A11590CF98EB0DB045503C3E14616874AD27F1BF067DC
695E95C4DA8ED4244C8C0B8A144DC6692B0E45B081CE2DEE1B03ED1FB7B2F4CB
380640D4B37BF2280FC2BAD982FA9A2288CDA6B20E3798F8CECA0E3DCCBC573B
FB381C8E0BFEB2B97BAB8019EA8F4E119B5356CED765F73F6935478D5133B9E7
614C4965BC0CBC2D312B443B447DF41125FA6BCC772A6A6444279ABFF386E03D
9C1C9BA3F119A8D3E1CA21561EF564634ADC97DA44BD9FA34500F72B7B38CEB8
258173214CE459A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7669816C2DB10CA
DE05ACBC6787BB5EA465FF0CFACD9BD5596789DB526CFBD3C7467A1598A876ED
18B65ED8CF256812E8DFC0AA090E9550C701B76233A06FA848AF4E10177A57E9
9C50B78FAC6A62D7CE3CED36060BBA2543BDF6699F2B7C58BE9909CBFCD273EF
5617183CFA6475788BF93DC4B76DCA2AE3686F7DFA49F81BA6B221FAB4F9BF75
08ADAA2EF193AD1E8F143823BA37E501B80227AD5829E3528300002FEF053DFE
CF68261DC400897B7D2EE13B08E9D4AB856B9CBC75EEEF8D77DCFD4CD6F5A57C
E5FB0DC64127C5D0E0E138FEF0491EB32BD20E6E9D778A23BBC033F7EE683F64
A43A50CB68A2D325F02C783E3175EED109C2306A4A8DFC475F01E5A312BD9C98
4EE3B5F0C88E23C73B220E9E8A694FE5DE3E995341AD5FAE6E44B566260638AA
FA90922D7BE5B0D69E77228C39713D1C103D19667B4A9FB2E0CF52DB0AF9EA0E
CEFA45F8C22002713C1FDB9EDAD6982CF55BC7DC06B034D0EF581E3CA8F322DA
5DF130E7FFD197683AA301FACD379DDBDB9410B5BFBE8D380ABE4CDD74110BD6
BA8C25ECCF82950CE689787EDD1CAA6A64AF8E34D611F2A805FB9721A33ABD08
C428FCE711882EFEBB8E278432D6E9D53ADCB1A92C17F569049E4A119632C476
83095845CE528153EE7B20E23B36D9B12A032418B9321A056670EEA02CD48D1B
F11FAFD503506D77732DAED9B41D4795B74CF294B105A2D369E9DD9EDE9AC14E
4FD09695BBDBD7994FD8AE854FD127F790867A024AF16796441B7231FEC21631
6ED5DA683EE65D51B76B1080664120AFDA259B7F403B01BB48EECCA8E99A035B
26D05FF598FEC49E7127AC4128988F49C6BAE2B48B8C70F49E1D2DA4B16990B4
BFBF714D368CACE75623A92D1743E2F5EFB099C41AFF7700001FC89F2E0A2693
6BED7FF5F1BA218B085025240C14BD11F18C7C4343B99854C5011191AAA12E9D
000F9F4F60CA8D75878FE46BBFF0DC973B13AFB0B901A6CC47D7559734FBF5A8
070F38D54B5CE27A6511D75948005BAEE90AD5C622C544F800BF3B994C7E6836
CD2694F0CA576DBDD3F1212EDBA389110047916D002EA3132EB84619047B3773
0FF25D8AEBC3AEC1F2F9E6C0140240A0B3FF3EF6A2DD6C049BF4669B5F15AF0A
F4312ABACF3271326D246D4A5A7C3B4CF45FFD39C2FE5FB0183B53DBA94F6F48
C42648A31AF4277DF231B3B4914341EA7F65D44137C81D2FFDFE24F86F54E132
D8A78AF8E203D34D583A7F28CDDC8A32BCFEBFDB161A6A260C54E491AC467328
071593C9DBF2022D08BA44B97EBA8CA21311977A79AE7C1A6C1BE783ABE0A64E
2992BC1D02A083755FD449D8B610461823F0E723414FDFFA2F22E8E00EC4856C
550D3AD149405C211C99CD4CBCC41F892680CACA79F4F89C75580080B9F865D1
9D39118C27C28F112DBDC338D57F0747D582D0FDB84DF2F0BD3DD89D6DF2A1BB
D801CA0B0320DD83A68202BB253BBEE465E4A0B657EDE1E22B9D940FFF8CE387
B6B551248ACB0824AE7C0D7964D1A6941C80C7245E863A5F782EDF73845FF077
A8BE281CCEDDFEF90529A80F4EE3FADC8D91175CD0287BBF30C584C83A0DE4FE
8369787FD3F301D25B74900DE1EA95B920CA39F1EA9F00BB643DEA1377BFFF0C
F5C4B66006F82DB95730FECD70D5DF9F0AD468B8985138449DDBBBA4B26D31CB
F62260C433F52FA41FB27DB6AEFEBBE73916FD423B1BF490E440B0CA30E3C8FD
E909CD290ECCE7C57190EA830CD066D8F0C70D2CDA3A707CEF27E631A9252E76
8B4FD0AACD8EEE66B65EB2D6F8DE745C631D0B097082E735A8A1CC4263CE9F75
DD3A9EFD115FB6B7FE5731FF7E0F4C5C5F85293A4FA94A7029A31FA8B4C6D235
3B9FF6FCAF08DE5CF57868D884CE3868123133EDD3A63F1D158F91FA08DA5160
12C0F5065B69F46B606ADA57244CB3A5096FDC8C8BD08D23017FCCDE5A6339DE
49E3F3149469C539912275E6A8E6A0BF1DB857B9F8C9E9DBEC922E51C96F2F4A
99123D49F18EE863DBB1C72CF388ACA94041A69E4805EC708264761A9B8DDEA4
9A3D4EA308E36ACBC614BA6BDB327F8AECA6F18EA3DEA249AD283F5387228083
27C7B30DCB5A652ECB6E045534AFB7F3FEF8D345384BC8111436058FC906C540
8DAF2B71C699A3D31138712C86016CDB3B6DC61B32DC0FA9B000C50C4010CB74
BA8E660DA9F4C5CF8F8BC16746583F33FC4EDEAAD832E836D5903C7AD88AB9F9
EF66040E3BBA5C6692EF0D0792C274793106D4D82F9C29279189BAE30759F13E
8DE2CF942D8E552B6F12E3AAE3EBBBAAB312902B127E880E61BFAAA8940B19E2
B993B490BFFFBAE51D2134244B767EB7651F2409AA5465F9012AC63A16D3CA2D
098DE16F85DC83AA28AEC483F47437431DCD48A382217CB3AF4DDB6318DE6155
627214A1E483195B001842C9444FA79F0A2886B71CB3ADEA5B3C6AADE1CF852D
D818F0C73610E527981010DBBEE57378AEE93DAE9028B820CDC12E9CF1599E25
A83CC2983A854486DFFE2A3450BF4258768BD01C7B12BBE968205230B1B59A13
DAA3B723539698E5C65E9C2CE7D0C700924CB9986C4D60E8A104B1BCE28BE47E
8FB3C63338D68EE47DCECA520D9057EAE9ED0D1BFC270F2DB77C82023C8F37D1
3647AB5E9C000513B531F042C4FAB351C339B7DC98CCAC1F5F2B3DE9A86446F8
8396E0C8F5E851B6FC3DBF6F7EC31746C97F02D35F48434801222B337586113C
E34D92D50162CC8BF5102069E4BE73C50B054F83D7C2EF4A042867657A672DE6
014B04BAE19D037EB1714320149241AAD4EA50E61DB766DAA5EB27C83F03DF94
164AD5A6AD833A4BA6F9D3D2AA2E2DB15EFFF7BB89780EEE3961F51B56683441
D6FFE5B51CDCB847F010D3C3301F5B948DA422757A94260F3A591E64FB0CE65C
DB02D80D31ECBDC4AF0C102C6C92DB3EC87027A1E562A5F566657EE67E4B33D8
19053223BA6A0B5355A345354CA955F206A19F8B0608D77B0E45BB6146CC5A7A
21EAC4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 185[723 4[830 13[553 1[553 2[307 46[{ enclmec ReEncodeFont }
5 1106.96 /LMRoman10-Regular rf /Fb 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fc 255[732{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fd 194[1012 4[650 5[650 650
5[1012 1[506 506 40[{ enclmrm ReEncodeFont }7 1328.35
/LMRoman12-Regular rf /Fe 202[470 470 470 470 470 49[{
 enclmrm ReEncodeFont }5 885.568 /LMRoman8-Regular rf
/Ff 135[739 16[623 641 102[{ enclmmathit ReEncodeFont }3
1328.35 /LMMathItalic12-Regular rf /Fg 255[1033{
 enclmmathsy ReEncodeFont }1 1328.35 /LMMathSymbols10-Regular
rf /Fh 3[723 5[650 123[578 686 686 939 686 723 506 513
506 1[723 650 723 1084 361 686 397 361 723 650 397 578
723 578 723 650 6[795 6[723 2[885 1012 975 1[813 4[1021
849 885 993 939 921 975 6[361 6[650 650 650 2[361 434
361 2[506 506 6[361 33[{ enclmec ReEncodeFont }50 1328.35
/LMRoman12-Regular rf /Fi 133[956 4[1196 837 849 879
1[1196 1076 1196 1[598 1136 1[598 1196 1076 1[982 1196
956 1[1046 6[1315 10[1616 5[801 2[1353 1412 2[1530 1625
13[1076 1076 1076 2[598 717 45[{ enclmec ReEncodeFont }29
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fi(F)-239
b(A)717 b(3.1)g(-)h(1)f(F)-179 b(unktionsgraphen)713
b(zuordnen)i(-)j(ZO)g(-)f(BIFIE)p 0 TeXcolorgray -741
4800 a Fh(1.)p 0 TeXcolorgray 651 w(Den)591 b(nac)-36
b(hfolgenden)590 b(vier)h(Gleic)-36 b(h)g(ungen)589 b(v)-36
b(on)591 b(P)-36 b(otenzfunktionen)590 b(stehen)g(sec)-36
b(hs)590 b(Gra-)921 6792 y(phen)645 b(gegen)-36 b(\374b)36
b(er.)646 b(Ordne)f(den)g(jew)-36 b(eiligen)647 b(F)-108
b(unktionsgleic)-36 b(h)g(ungen)645 b(die)g(zugeh\366rigen)921
8784 y(F)-108 b(unktionsgraphen.)p 0 TeXcolorgray 0 TeXcolorgray
7965 10381 6678 45 v 14642 10381 4523 45 v 7965 13640
45 3260 v 8673 12576 a Fg(\000)p Ff(x)10445 12094 y Fe(2)11266
12576 y Fd(+)295 b(2)p 14598 13640 V 0.9 TeXcolorgray
14643 13640 4478 3260 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
16385 12562 a Fh(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19120 13640 45 3260 v 7965 13684 6678
45 v 14642 13684 4523 45 v 7965 17046 45 3362 v 8673
15769 a Fd(\()p Ff(x)g Fg(\000)h Fd(2\))12698 15287 y
Fe(2)p 14598 17046 V 0.9 TeXcolorgray 14643 17046 4478
3362 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16439 15866 a
Fh(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 17046 45 3362 v 7965 17090 6678 45 v 14642 17090
4523 45 v 7965 20451 45 3362 v 8673 19174 a Fd(\()p Ff(x)f
Fd(+)g(2\))12676 18692 y Fc(\000)p Fe(1)p 14598 20451
V 0.9 TeXcolorgray 14643 20451 4478 3362 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16412 19271 a Fh(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 20451 45 3362
v 7965 20495 6678 45 v 14642 20495 4523 45 v 7965 23755
45 3260 v 8673 22746 a Fd(2)p Ff(x)10062 22264 y Fc(\000)p
Fe(2)p 14598 23755 V 0.9 TeXcolorgray 14643 23755 4478
3260 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16421 22677 a
Fh(B)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 23755 45 3260 v 7965 23799 6678 45 v 14642 23799
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 24451 10381 4567
45 v 29018 10381 9779 45 v 24451 19987 45 9606 v 0.92
TeXcolorgray 24495 19987 4478 9606 v 0 TeXcolorgray 26223
15641 a(A)p 28973 19987 45 9606 v 29682 19042 a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682
19042 a 30115 19042 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 19042 a 44807 5456 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
43562 2591 a Fe(1)43562 -558 y(2)43562 -3708 y(3)43562
-6857 y(4)42830 8844 y Fc(\000)p Fe(1)42830 11994 y Fc(\000)p
Fe(2)42830 15144 y Fc(\000)p Fe(3)42830 18293 y Fc(\000)p
Fe(4)47721 6801 y(1)2680 b(2)g(3)f(4)-16584 b Fc(\000)p
Fe(1)-4351 b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)g Fc(\000)p
Fe(4)44807 5456 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44807 5456 a 44807 5456 a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 5456
a 44807 5456 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 5456 a 44464 5742 a Fh(x)44807 5456
y
tx@Dict begin  PutEnd  end
 44807 5456 a 44807 5456 a
tx@Dict begin  PutEnd  end
 44807 5456 a 44807 5456 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

44807 5456 a 44807 5456 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807 5456 a 44807 5456 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807
5456 a 44464 5613 a Fh(y)44807 5456 y
tx@Dict begin  PutEnd  end
 44807 5456 a 44807
5456 a
tx@Dict begin  PutEnd  end
 44807 5456 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 4.6761251111553825 def /dx x1 x sub 199 div def /F@pstplot
(x^(-1.0))  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul
F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub
{ /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit
} if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if  gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
59535 19042 a
currentpoint initclip moveto
 59535 19042 a 29682 19042 a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 19042
a 38752 19987 45 9606 v 24451 20031 4567 45 v 29018 20031
9779 45 v 24451 29637 45 9606 v 0.92 TeXcolorgray 24495
29637 4478 9606 v 0 TeXcolorgray 26274 25291 a Fh(B)p
28973 29637 45 9606 v 29682 28692 a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682 28692 a 30115
28692 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 28692 a 44807 15106 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43562 12241 a
Fe(1)43562 9092 y(2)43562 5942 y(3)43562 2793 y(4)42830
18494 y Fc(\000)p Fe(1)42830 21644 y Fc(\000)p Fe(2)42830
24794 y Fc(\000)p Fe(3)42830 27943 y Fc(\000)p Fe(4)47721
16451 y(1)2680 b(2)g(3)f(4)-16584 b Fc(\000)p Fe(1)-4351
b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)g Fc(\000)p Fe(4)44807
15106 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44807 15106 a 44807 15106 a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 15106 a 44807
15106 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 15106 a 44464 15392 a Fh(x)44807 15106
y
tx@Dict begin  PutEnd  end
 44807 15106 a 44807 15106 a
tx@Dict begin  PutEnd  end
 44807 15106 a 44807 15106
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44807 15106 a 44807 15106 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807 15106 a 44807 15106
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807 15106 a 44464 15263 a Fh(y)44807 15106 y
tx@Dict begin  PutEnd  end
 44807
15106 a 44807 15106 a
tx@Dict begin  PutEnd  end
 44807 15106 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 4.6761251111553825 def /dx x1 x sub 199 div def /F@pstplot
(2.0*x^(-2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59535 28692 a
currentpoint initclip moveto
 59535 28692 a 29682 28692
a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 28692 a 38752 29637 45 9606 v 24451 29681 4567
45 v 29018 29681 9779 45 v 24451 39287 45 9606 v 0.92
TeXcolorgray 24495 39287 4478 9606 v 0 TeXcolorgray 26265
34941 a Fh(C)p 28973 39287 45 9606 v 29682 38342 a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682
38342 a 30115 38342 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 38342 a 44807 24756 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
43562 21891 a Fe(1)43562 18742 y(2)43562 15592 y(3)43562
12443 y(4)42830 28145 y Fc(\000)p Fe(1)42830 31294 y
Fc(\000)p Fe(2)42830 34444 y Fc(\000)p Fe(3)42830 37593
y Fc(\000)p Fe(4)47721 26101 y(1)2680 b(2)g(3)f(4)-16584
b Fc(\000)p Fe(1)-4351 b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)g
Fc(\000)p Fe(4)44807 24756 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44807 24756 a 44807 24756
a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 24756 a 44807 24756 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 24756 a 44464 25042
a Fh(x)44807 24756 y
tx@Dict begin  PutEnd  end
 44807 24756 a 44807 24756 a
tx@Dict begin  PutEnd  end
 44807
24756 a 44807 24756 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44807 24756 a 44807 24756 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807
24756 a 44807 24756 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807 24756 a 44464 24913 a Fh(y)44807
24756 y
tx@Dict begin  PutEnd  end
 44807 24756 a 44807 24756 a
tx@Dict begin  PutEnd  end
 44807 24756 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 -2.1 def /dx x1 x sub 199 div def /F@pstplot ((x+2.0)^(-1.0))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1.9 def /x1 4.6761251111553825
def /dx x1 x sub 199 div def /F@pstplot ((x+2.0)^(-1.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
59535 38342 a
currentpoint initclip moveto
 59535 38342 a 29682 38342 a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 38342
a 38752 39287 45 9606 v 24451 39331 4567 45 v 29018 39331
9779 45 v 24451 48937 45 9606 v 0.92 TeXcolorgray 24495
48937 4478 9606 v 0 TeXcolorgray 26238 44591 a Fh(D)p
28973 48937 45 9606 v 29682 47992 a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682 47992 a 30115
47992 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 47992 a 44807 34406 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43562 31542 a
Fe(1)43562 28392 y(2)43562 25242 y(3)43562 22093 y(4)42830
37795 y Fc(\000)p Fe(1)42830 40944 y Fc(\000)p Fe(2)42830
44094 y Fc(\000)p Fe(3)42830 47243 y Fc(\000)p Fe(4)47721
35751 y(1)2680 b(2)g(3)f(4)-16584 b Fc(\000)p Fe(1)-4351
b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)g Fc(\000)p Fe(4)44807
34406 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44807 34406 a 44807 34406 a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 34406 a 44807
34406 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 34406 a 44464 34692 a Fh(x)44807 34406
y
tx@Dict begin  PutEnd  end
 44807 34406 a 44807 34406 a
tx@Dict begin  PutEnd  end
 44807 34406 a 44807 34406
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44807 34406 a 44807 34406 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807 34406 a 44807 34406
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807 34406 a 44464 34563 a Fh(y)44807 34406 y
tx@Dict begin  PutEnd  end
 44807
34406 a 44807 34406 a
tx@Dict begin  PutEnd  end
 44807 34406 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 4.6761251111553825 def /dx x1 x sub 199 div def /F@pstplot
(-x^(2.0)+2.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 59535 47992 a
currentpoint initclip moveto
 59535 47992 a 29682 47992
a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 47992 a 38752 48937 45 9606 v 24451 48981 4567
45 v 29018 48981 9779 45 v 24451 58587 45 9606 v 0.92
TeXcolorgray 24495 58587 4478 9606 v 0 TeXcolorgray 26292
54241 a Fh(E)p 28973 58587 45 9606 v 29682 57642 a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682
57642 a 30115 57642 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 57642 a 44807 44056 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
43562 41192 a Fe(1)43562 38042 y(2)43562 34892 y(3)43562
31743 y(4)42830 47445 y Fc(\000)p Fe(1)42830 50594 y
Fc(\000)p Fe(2)42830 53744 y Fc(\000)p Fe(3)42830 56894
y Fc(\000)p Fe(4)47721 45401 y(1)2680 b(2)g(3)f(4)-16584
b Fc(\000)p Fe(1)-4351 b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)g
Fc(\000)p Fe(4)44807 44056 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 44807 44056 a 44807 44056
a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 44056 a 44807 44056 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 44056 a 44464 44342
a Fh(x)44807 44056 y
tx@Dict begin  PutEnd  end
 44807 44056 a 44807 44056 a
tx@Dict begin  PutEnd  end
 44807
44056 a 44807 44056 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44807 44056 a 44807 44056 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807
44056 a 44807 44056 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807 44056 a 44464 44213 a Fh(y)44807
44056 y
tx@Dict begin  PutEnd  end
 44807 44056 a 44807 44056 a
tx@Dict begin  PutEnd  end
 44807 44056 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 4.6761251111553825 def /dx x1 x sub 199 div def /F@pstplot
((x-2.0)^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 59535 57642 a
currentpoint initclip moveto
 59535 57642 a
29682 57642 a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 57642 a 38752 58587 45 9606 v 24451
58631 4567 45 v 29018 58631 9779 45 v 24451 68237 45
9606 v 0.92 TeXcolorgray 24495 68237 4478 9606 v 0 TeXcolorgray
26310 63891 a Fh(F)p 28973 68237 45 9606 v 29682 67292
a
 currentpoint currentpoint translate 0.28159 0.28159 scale neg exch
neg exch translate
 29682 67292 a 30115 67292 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 265.76804 a add def
/d 0.0 a add neg def /h 247.54398 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 30115 67292 a 44807 53706
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.04878 0.0 -132.71925 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.80896 0.0 -122.73502   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.04878  0 -132.71925  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -132.71925
 133.04878  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.73502  def /maxTickline 124.80896  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.80896  0 -122.73502  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.73502
 124.80896  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-132.71925  def /maxTickline 133.04878  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.80896
0.0 -122.73502   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.04878
0.0 -132.71925 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43562 50842 a Fe(1)43562 47692
y(2)43562 44543 y(3)43562 41393 y(4)42830 57095 y Fc(\000)p
Fe(1)42830 60244 y Fc(\000)p Fe(2)42830 63394 y Fc(\000)p
Fe(3)42830 66544 y Fc(\000)p Fe(4)47721 55052 y(1)2680
b(2)g(3)f(4)-16584 b Fc(\000)p Fe(1)-4351 b Fc(\000)p
Fe(2)f Fc(\000)p Fe(3)g Fc(\000)p Fe(4)44807 53706 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

44807 53706 a 44807 53706 a
tx@Dict begin  { 133.04878 124.80896 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 44807 53706 a 44807 53706
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 44807 53706 a 44464 53992 a Fh(x)44807 53706 y
tx@Dict begin  PutEnd  end
 44807
53706 a 44807 53706 a
tx@Dict begin  PutEnd  end
 44807 53706 a 44807 53706 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 44807
53706 a 44807 53706 a
tx@Dict begin  { 0.0 0.0 pop 133.04878 124.80896 exch pop } PutCoor
PutBegin  end
 44807 53706 a 44807 53706 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 44807
53706 a 44464 53863 a Fh(y)44807 53706 y
tx@Dict begin  PutEnd  end
 44807 53706
a 44807 53706 a
tx@Dict begin  PutEnd  end
 44807 53706 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.664551521417402
def /x1 4.6761251111553825 def /dx x1 x sub 199 div def /F@pstplot
(0.8034864676622124*x^(3.0)-1.4080886953721717E-51*x^(2.0)+1.1965135323377876*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial 59535 67292 a
currentpoint initclip moveto
 59535 67292 a 29682 67292
a
 currentpoint currentpoint translate 1 0.28159 div 1 0.28159 div scale
neg exch neg exch translate
 29682 67292 a 38752 68237 45 9606 v 24451 68281 4567
45 v 29018 68281 9779 45 v 47992 4800 a Fb(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fa(F)-123 b(A)369 b(3.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 74649
54804 45 v 0 TeXcolorgray 24746 81281 a Fh(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fi(F)-239 b(A)717 b(3.1)g(-)h(2)f(F)-179
b(unktionsgraph)713 b(-)718 b(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 5243 a Fh(2.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Ff(g)481 b Fh(mit)434 b(der)f(Gleic)-36 b(h)g(ung)432
b Ff(g)48 b Fd(\()p Ff(x)p Fd(\))368 b(=)h(2)296 b Fg(\000)34081
4344 y Ff(x)34820 3862 y Fe(2)p 34081 4933 1265 45 v
34388 6154 a Fd(8)35479 5243 y Fh(.)921 7788 y(Zeic)-36
b(hne)433 b(den)g(Graphen)f(der)h(F)-108 b(unktion)433
b Ff(g)48 b Fh(!)p 0 TeXcolorgray 0 TeXcolorgray 5418
47482 a
 currentpoint currentpoint translate 0.97017 0.97017 scale neg exch
neg exch translate
 5418 47482 a 5851 47482 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 331.1326 a add def
/d 0.0 a add neg def /h 329.07167 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5851 47482 a 24129
29426 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -142.26372 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 166.01196 0.0 -165.12064 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 165.96507 0.0 -163.1066   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 166.01196  0 -165.12064  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -165.12064
 166.01196  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-163.1066  def /maxTickline 165.96507  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 165.96507
0.0 -163.1066   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.01196
0.0 -165.12064 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 165.96507  0 -163.1066  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -163.1066
 165.96507  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-165.12064  def /maxTickline 166.01196  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 165.96507
0.0 -163.1066   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 166.01196
0.0 -165.12064 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22884 26562 a Fe(1)22884 23413
y(2)22884 20263 y(3)22884 17113 y(4)22884 13964 y(5)22152
32815 y Fc(\000)p Fe(1)22152 35965 y Fc(\000)p Fe(2)22152
39114 y Fc(\000)p Fe(3)22152 42264 y Fc(\000)p Fe(4)22152
45414 y Fc(\000)p Fe(5)27044 30772 y(1)2679 b(2)h(3)f(4)h(5)-19733
b Fc(\000)p Fe(1)-4352 b Fc(\000)p Fe(2)g Fc(\000)p Fe(3)h
Fc(\000)p Fe(4)f Fc(\000)p Fe(5)24129 29426 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 24129 29426
a 24129 29426 a
tx@Dict begin  { 166.01196 165.96507 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 24129 29426 a 24129 29426 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 24129 29426
a 23786 29712 a Fh(x)24129 29426 y
tx@Dict begin  PutEnd  end
 24129 29426 a 24129
29426 a
tx@Dict begin  PutEnd  end
 24129 29426 a 24129 29426 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 24129 29426 a 24129
29426 a
tx@Dict begin  { 0.0 0.0 pop 166.01196 165.96507 exch pop } PutCoor
PutBegin  end
 24129 29426 a 24129 29426 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 24129 29426 a 23081
29758 a Fh(f\(x\))24129 29426 y
tx@Dict begin  PutEnd  end
 24129 29426 a 24129 29426
a
tx@Dict begin  PutEnd  end
 24129 29426 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.6 0.2 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -5.803326901850101
def /x1 5.834660888741994 def /dx x1 x sub 199 div def /F@pstplot (-0.125*x^(2.0)+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial 24129 29426 a
tx@Dict begin  { 61.5887 62.91548 } PutCoor PutBegin  end
 24129 29426 a 572 x Fh(g)24129
29426 y
tx@Dict begin  PutEnd  end
 24129 29426 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 42506 47482 a
currentpoint initclip moveto
 42506 47482 a 5418 47482
a
 currentpoint currentpoint translate 1 0.97017 div 1 0.97017 div scale
neg exch neg exch translate
 5418 47482 a 1 0 0 TeXcolorrgb 921 53458 a Fh(L\366sungssc)-36
b(hl\374ssel:)921 56003 y(Die)371 b(A)-36 b(ufgab)36
b(e)371 b(gilt)g(n)-36 b(ur)369 b(dann)g(als)i(ric)-36
b(h)g(tig)370 b(gel\366st,)i(w)-36 b(enn)370 b(die)g(Zeic)-36
b(hn)g(ung)369 b(als)i(P)-36 b(arab)36 b(el)370 b(mit)921
57995 y(dem)433 b(k)-36 b(orrekten)434 b(Sc)-36 b(heitel)433
b(und)g(den)g(ric)-36 b(h)g(tigen)433 b(Nullstellen)h(erk)-36
b(enn)g(bar)432 b(ist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 5243 a Fb(___/1)p 1 0 0 TeXcolorrgb
48228 7234 a Fa(F)-123 b(A)369 b(3.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 61729 54804 45
v 0 TeXcolorgray 24746 81281 a Fh(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fi(F)-239 b(A)717 b(3.1)g(-)h(3)f(F)-179
b(unktionsgleic)-60 b(h)g(ungen)713 b(zuordnen)i(-)j(ZO)f(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fh(3.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)404 b(sind)g(vier)h(Graphen)e(v)-36 b(on)405
b(P)-36 b(otenzfunktionen)404 b(und)f(sec)-36 b(hs)404
b(F)-108 b(unktionsgleic)-36 b(h)g(un-)921 6792 y(gen.)921
9338 y(Ordne)535 b(den)h(vier)h(Graphen)e(jew)-36 b(eils)538
b(die)e(en)-36 b(tsprec)g(hende)534 b(F)-108 b(unktionsgleic)-36
b(h)g(ung)536 b(\(aus)g(A)921 11330 y(bis)433 b(F\))h(zu!)p
0 TeXcolorgray 0 TeXcolorgray 2683 13111 12816 45 v 15498
13111 4523 45 v 2683 26159 45 13048 v 3391 25214 a
 currentpoint currentpoint translate 0.47179 0.47179 scale neg exch
neg exch translate
 3391
25214 a 3825 25214 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.3429 a add def
/d 0.0 a add neg def /h 213.65605 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 25214 a 15791 13319 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.24323 0.0 -108.09967 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 106.19633 0.0 -107.45972   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.24323  0 -108.09967  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.09967
 106.24323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.45972  def /maxTickline 106.19633  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 106.19633  0 -107.45972  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.45972
 106.19633  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.09967  def /maxTickline 106.24323  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14546 10454 a Fe(1)14546 7305 y(2)14546 4155 y(3)13814
16707 y Fc(\000)p Fe(1)13814 19857 y Fc(\000)p Fe(2)13814
23007 y Fc(\000)p Fe(3)18705 14664 y(1)2680 b(2)g(3)-13435
b Fc(\000)p Fe(1)-4351 b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)15791
13319 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15791 13319 a 15791 13319 a
tx@Dict begin  { 106.24323 106.19633 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 15791 13319 a 15791
13319 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15791 13319 a 15448 13604 a Fh(x)15791 13319
y
tx@Dict begin  PutEnd  end
 15791 13319 a 15791 13319 a
tx@Dict begin  PutEnd  end
 15791 13319 a 15791 13319
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15791 13319 a 15791 13319 a
tx@Dict begin  { 0.0 0.0 pop 106.24323 106.19633 exch pop } PutCoor
PutBegin  end
 15791 13319 a 15791 13319
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 15791 13319 a 14743 13651 a Fh(f\(x\))15791 13319 y
tx@Dict begin  PutEnd  end

15791 13319 a 15791 13319 a
tx@Dict begin  PutEnd  end
 15791 13319 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.7992750623912968
def /x1 3.7340282377430136 def /dx x1 x sub 199 div def /F@pstplot
(x^(2.0)-1.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 27552 25214 a
currentpoint initclip moveto
 27552 25214 a
3391 25214 a
 currentpoint currentpoint translate 1 0.47179 div 1 0.47179 div scale
neg exch neg exch translate
 3391 25214 a 15454 26159 45 13048 v 0.9
TeXcolorgray 15498 26159 4478 13048 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 17277 20092 a Fh(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19976 26159 45 13048
v 2683 26203 12816 45 v 15498 26203 4523 45 v 2683 39251
45 13048 v 3391 38306 a
 currentpoint currentpoint translate 0.47179 0.47179 scale neg exch
neg exch translate
 3391 38306 a 3825 38306 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.3429 a add def
/d 0.0 a add neg def /h 213.65605 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825
38306 a 15791 26411 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.24323 0.0 -108.09967 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 106.19633 0.0 -107.45972   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.24323  0 -108.09967  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.09967
 106.24323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.45972  def /maxTickline 106.19633  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 106.19633  0 -107.45972  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.45972
 106.19633  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.09967  def /maxTickline 106.24323  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14546 23546 a
Fe(1)14546 20397 y(2)14546 17247 y(3)13814 29800 y Fc(\000)p
Fe(1)13814 32949 y Fc(\000)p Fe(2)13814 36099 y Fc(\000)p
Fe(3)18705 27756 y(1)2680 b(2)g(3)-13435 b Fc(\000)p
Fe(1)-4351 b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)15791 26411
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15791 26411 a 15791 26411 a
tx@Dict begin  { 106.24323 106.19633 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 15791 26411 a 15791 26411
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15791 26411 a 15448 26697 a Fh(x)15791 26411 y
tx@Dict begin  PutEnd  end
 15791
26411 a 15791 26411 a
tx@Dict begin  PutEnd  end
 15791 26411 a 15791 26411 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15791
26411 a 15791 26411 a
tx@Dict begin  { 0.0 0.0 pop 106.24323 106.19633 exch pop } PutCoor
PutBegin  end
 15791 26411 a 15791 26411 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 15791
26411 a 14743 26743 a Fh(f\(x\))15791 26411 y
tx@Dict begin  PutEnd  end
 15791 26411
a 15791 26411 a
tx@Dict begin  PutEnd  end
 15791 26411 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.7992750623912968
def /x1 3.7340282377430136 def /dx x1 x sub 199 div def /F@pstplot
(x^(-2.0)+1.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 27552 38306 a
currentpoint initclip moveto
 27552 38306 a 3391 38306 a
 currentpoint currentpoint translate 1 0.47179 div 1 0.47179 div scale
neg exch neg exch translate

3391 38306 a 15454 39251 45 13048 v 0.9 TeXcolorgray
15498 39251 4478 13048 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
17241 33185 a Fh(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19976 39251 45 13048 v 2683 39295 12816
45 v 15498 39295 4523 45 v 2683 52343 45 13048 v 3391
51398 a
 currentpoint currentpoint translate 0.47179 0.47179 scale neg exch
neg exch translate
 3391 51398 a 3825 51398 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.3429 a add def
/d 0.0 a add neg def /h 213.65605 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 51398 a 15791
39503 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.24323 0.0 -108.09967 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 106.19633 0.0 -107.45972   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.24323  0 -108.09967  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.09967
 106.24323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.45972  def /maxTickline 106.19633  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 106.19633  0 -107.45972  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.45972
 106.19633  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.09967  def /maxTickline 106.24323  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14546 36639 a Fe(1)14546 33489
y(2)14546 30339 y(3)13814 42892 y Fc(\000)p Fe(1)13814
46041 y Fc(\000)p Fe(2)13814 49191 y Fc(\000)p Fe(3)18705
40848 y(1)2680 b(2)g(3)-13435 b Fc(\000)p Fe(1)-4351
b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)15791 39503 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15791
39503 a 15791 39503 a
tx@Dict begin  { 106.24323 106.19633 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 15791 39503 a 15791 39503 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15791
39503 a 15448 39789 a Fh(x)15791 39503 y
tx@Dict begin  PutEnd  end
 15791 39503
a 15791 39503 a
tx@Dict begin  PutEnd  end
 15791 39503 a 15791 39503 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15791 39503
a 15791 39503 a
tx@Dict begin  { 0.0 0.0 pop 106.24323 106.19633 exch pop } PutCoor
PutBegin  end
 15791 39503 a 15791 39503 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 15791 39503
a 14743 39835 a Fh(f\(x\))15791 39503 y
tx@Dict begin  PutEnd  end
 15791 39503 a
15791 39503 a
tx@Dict begin  PutEnd  end
 15791 39503 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.7992750623912968
def /x1 3.7340282377430136 def /dx x1 x sub 199 div def /F@pstplot
(-x^(2.0)+1.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 27552 51398 a
currentpoint initclip moveto
 27552 51398 a 3391 51398 a
 currentpoint currentpoint translate 1 0.47179 div 1 0.47179 div scale
neg exch neg exch translate

3391 51398 a 15454 52343 45 13048 v 0.9 TeXcolorgray
15498 52343 4478 13048 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
17268 46277 a Fh(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19976 52343 45 13048 v 2683 52387 12816
45 v 15498 52387 4523 45 v 2683 65435 45 13048 v 3391
64490 a
 currentpoint currentpoint translate 0.47179 0.47179 scale neg exch
neg exch translate
 3391 64490 a 3825 64490 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.3429 a add def
/d 0.0 a add neg def /h 213.65605 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825 64490 a 15791
52595 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 106.24323 0.0 -108.09967 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 106.19633 0.0 -107.45972   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 106.24323  0 -108.09967  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.09967
 106.24323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.45972  def /maxTickline 106.19633  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 106.19633  0 -107.45972  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.45972
 106.19633  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.09967  def /maxTickline 106.24323  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 106.19633
0.0 -107.45972   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 106.24323
0.0 -108.09967 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14546 49731 a Fe(1)14546 46581
y(2)14546 43432 y(3)13814 55984 y Fc(\000)p Fe(1)13814
59134 y Fc(\000)p Fe(2)13814 62283 y Fc(\000)p Fe(3)18705
53941 y(1)2680 b(2)g(3)-13435 b Fc(\000)p Fe(1)-4351
b Fc(\000)p Fe(2)f Fc(\000)p Fe(3)15791 52595 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15791
52595 a 15791 52595 a
tx@Dict begin  { 106.24323 106.19633 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 15791 52595 a 15791 52595 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15791
52595 a 15448 52881 a Fh(x)15791 52595 y
tx@Dict begin  PutEnd  end
 15791 52595
a 15791 52595 a
tx@Dict begin  PutEnd  end
 15791 52595 a 15791 52595 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15791 52595
a 15791 52595 a
tx@Dict begin  { 0.0 0.0 pop 106.24323 106.19633 exch pop } PutCoor
PutBegin  end
 15791 52595 a 15791 52595 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 15791 52595
a 14743 52927 a Fh(f\(x\))15791 52595 y
tx@Dict begin  PutEnd  end
 15791 52595 a
15791 52595 a
tx@Dict begin  PutEnd  end
 15791 52595 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.7992750623912968
def /x1 3.7340282377430136 def /dx x1 x sub 199 div def /F@pstplot
(-x^(-2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 27552 64490 a
currentpoint initclip moveto
 27552 64490 a 3391 64490 a
 currentpoint currentpoint translate 1 0.47179 div 1 0.47179 div scale
neg exch neg exch translate

3391 64490 a 15454 65435 45 13048 v 0.9 TeXcolorgray
15498 65435 4478 13048 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
17313 59369 a Fh(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 19976 65435 45 13048 v 2683 65480 12816
45 v 15498 65480 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
24451 13000 4567 45 v 29018 13000 10207 45 v 24451 16361
45 3362 v 0.92 TeXcolorgray 24496 16361 4478 3362 v 0
TeXcolorgray 26223 15181 a(A)p 28973 16361 45 3362 v
29682 15084 a Ff(f)142 b Fd(\()p Ff(x)p Fd(\))369 b(=)f
Ff(x)34704 14602 y Fe(2)35525 15084 y Fd(+)295 b(1)p
39180 16361 V 24451 16406 4567 45 v 29018 16406 10207
45 v 24451 19767 45 3362 v 0.92 TeXcolorgray 24496 19767
4478 3362 v 0 TeXcolorgray 26274 18587 a Fh(B)p 28973
19767 45 3362 v 29682 18490 a Ff(f)142 b Fd(\()p Ff(x)p
Fd(\))369 b(=)f Ff(x)34704 18008 y Fe(2)35525 18490 y
Fg(\000)296 b Fd(1)p 39180 19767 V 24451 19811 4567 45
v 29018 19811 10207 45 v 24451 23172 45 3362 v 0.92 TeXcolorgray
24496 23172 4478 3362 v 0 TeXcolorgray 26265 21992 a
Fh(C)p 28973 23172 45 3362 v 29682 21895 a Ff(f)142 b
Fd(\()p Ff(x)p Fd(\))369 b(=)f Fg(\000)p Ff(x)35737 21413
y Fe(2)36558 21895 y Fd(+)295 b(1)p 39180 23172 V 24451
23217 4567 45 v 29018 23217 10207 45 v 24451 26578 45
3362 v 0.92 TeXcolorgray 24496 26578 4478 3362 v 0 TeXcolorgray
26238 25398 a Fh(D)p 28973 26578 45 3362 v 29682 25301
a Ff(f)142 b Fd(\()p Ff(x)p Fd(\))369 b(=)f Ff(x)34704
24819 y Fc(\000)p Fe(2)36257 25301 y Fd(+)295 b(1)p 39180
26578 V 24451 26622 4567 45 v 29018 26622 10207 45 v
24451 29983 45 3362 v 0.92 TeXcolorgray 24496 29983 4478
3362 v 0 TeXcolorgray 26292 28803 a Fh(E)p 28973 29983
45 3362 v 29682 28706 a Ff(f)142 b Fd(\()p Ff(x)p Fd(\))369
b(=)f Ff(x)34704 28224 y Fc(\000)p Fe(2)36257 28706 y
Fg(\000)295 b Fd(1)p 39180 29983 V 24451 30028 4567 45
v 29018 30028 10207 45 v 24451 33389 45 3362 v 0.92 TeXcolorgray
24496 33389 4478 3362 v 0 TeXcolorgray 26310 32209 a
Fh(F)p 28973 33389 45 3362 v 29682 32112 a Ff(f)142 b
Fd(\()p Ff(x)p Fd(\))369 b(=)f Fg(\000)p Ff(x)35737 31630
y Fc(\000)p Fe(2)p 39180 33389 V 24451 33433 4567 45
v 29018 33433 10207 45 v 47992 4800 a Fb(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Fa(F)-123 b(A)369 b(3.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69508
54804 45 v 0 TeXcolorgray 24746 81281 a Fh(3)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.4/FA 5.4 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:55:15 2017
%%Pages: 3
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathItalic8-Regular wasy10 LMRoman8-Regular LMRoman10-Regular
%%+ LMMathSymbols10-Regular LMMathSymbols8-Regular MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.4/FA 5.4 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0954
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E086141A4B481B1D085ED61872E8BE023618298C154CA1CBC5A23C2
ABDC7EB93B1287558374ECEBB8152B9043D36537E8FF707C55BB3148059BFE8C
2A2F8B3E9B2B8B1C12E534AE818467322EB65A2F8B46533DFEC5C073C6294F2D
41197996BACA6164963C3AA18EF7AE2BD8E00C40760E980317E83B7F3D7B7C54
0FF26E1F0C47E3EC2566D4D5A4964EC940DE020C1FC0E17F57321E0EDA82B002
F1242AB78D5C62AA5706D772C8605CB0E6236C00BB8D99C674CBABED86D3E1AC
FB9BA589AF4A27153C1BA0F0E5220558AAEB457F4B00907E320E13FC71A17351
A615ED755C44BA2C4FE3451E435B9FFE8CE5E5DA025E51860CC2BFC8F6A39250
91E22056A73A0BFD5AC430BD6E93F7B7FFC135AF43A35FE99C7589E1488D85C7
A597F03CC91CAFC1FA7EC3AD0648CB1234CFA649DF0FD4AA96530F9201FEDEFE
FBFC5485DCBA940B3EA7017290F8D08C7521686B742757221B47D9B670258499
2D0E51483266C628C67969F8F3A31E945C00A5254D0BF588504EED56B101D953
DE2C558CD3B6629B6897CC21CF9D292D151141BBF59C32DFBADF8CCCA7D62EC9
049E6006A6D63BD3FCAFCD03950CC5CD32
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A53C8FDF62D7AAA93C5E291B366328456055AB39744
62E418808C864862A624D51147593FA66F656DE32F0A6D144632E51E33C6706A
5A5B843FD5945BB7BED781F108736190105E87F87F94D550EEA00C5AF638E69D
CF74FA05FD70FA998C1E0AFAFD8B2CC3E2B2E501F2CE1CCAF92623CFA3BAC9DC
01F528DBE5E869AD87BA3D177B1B1505B3F1266F6D1A444D206502237E6BCCA5
0863717A3CF64F79182DC71E076C3A1C81C35E575A07E0F6796FF97AD61528C5
CE06B85DE3D25FD16B61D7DE097E2B831D5A1F3DEF82E6DC1B9CB0B3A489A72A
3417733C3BF14262A19A1D897B1A8346625FAD9211A0B5DE92954F2D6129EAA6
3852AB9A6F2B87081C25CBA2CF7D3DC7C65AD3716E55C1CF0D98FA450627C39C
2D01215C112CE8B6B51A8EC5A715CCA6CD9F39480F870AB6BEDDE79D9E51B15C
FAC8F5FAD913019A6B60FDD4163A0EDB605A58DEF27EC19DECCDAEFBEDE0B6C2
F3F4C232941433BF4DF053F5FA5FBD131F4067AE542DA437CD7928C67AFB0628
ED994B18570144088AABE88043FB9809F3E5A3A1B4369B6B6034D836F4D3ABF8
F98A61E2F7722C2E5FBAD08E61409BE5B483B16FA0677861D29DFB38D215364C
6D79AB918A86568316470353F5481A8F35E2D841D3B50DFE339C97DA5C05FDCC
7ADEDDE78F8B0103078EBE655FC545BD520BF0ED0584CBCC4965AFAD378AD30B
0B716722052C43BCF1A85E802F2C461BD1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C54BA1B0981AFE60C32AE5AEA6F1BA42EEAD2C89312DA8D4EA9E
4728E8FE799616C7F79EFAC5C4F5BCA65317E45DEAF86873DBD525C29DA1F2D3
3041FFA2445CA658CFAAED3C30CECE4F2514A132C95F5CBCA3A139F60B929FB8
72EB89B9E71EA6161CE4DC61D1F0FDB69AC593886BB0459536ED20609422AA71
AB51589A018331D25E5B0F5E48FB91D15C10357563DFE608A3CD20A80D08E270
1A520E35CC383CE5CD307D419B5EB603FC44D6869D4A1731673EB4D084BB1534
7693FC31907FD6094EC7065BED405AEAFCB4783DAEC99BC7A3A82EB333E78317
ACD72DAA3215E2C2823903980506A9F523F673BA8CF49FF629186E5AE8335042
BBEBC8DCF193CA3D40E5337359272C890DE990FA8A632DA2E3BC27F9476CB699
295F324F6901C647D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8ABF336E7D
8DAE03CB25E6664A35015FC9684B7899AB6E46C2AC119FEE2CCBFAE53B96143D
E8C23DBCA777AC4E842F3A5247CD38F0C8DFC61D9996A8FBF914209AE12FA680
17DD0820EFEB02CDE5BF84E5F1E8C8572A5A86D808FF1497362CC036695A3B1B
CCFCEDA9577FB496F376710C86A02109B864FE34566E17B4A1A09F9BA10DED06
0F5AE4AD3C94DEA662B7342EFDC90B3BCAB589A88641B4C53C0D65940F2D3916
FE46C254C25AFF36E0A79983B5D27B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC2A90B9A7B70258F993C87F2C75BD72B5278CF84E2A883DCF21F61FC2EE6
DF51A16B4969B5619E2B15FEDB0F7B5D8690F5323C48054E47E3F61DD358C698
35A31914818EF301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6BAC2210992E
8C115F926BB8BDD04004EDACB8E3A599A56D93AF6603E7BE95D2B9E8B9F50EFE
02A94198A795EA3AA8F36F17AEA7B3CF3B80E235C0C70C895EDF6B031ED3CC1A
7DD250065F3ECA5C4583845A6E0F89C9EDC2F8737A0C119FC35E435A69079A46
C84B3CF54BAAB62AC19D25E46C51D541D23F9D2633D0ADDAF128E4E336E41C0A
F1E31DC3AD15631556A6C760A49679FEF8377A04BD2709C556F99D6D0A7E6D0F
72BA8FBA57162992D855DC8EE82E1FD21984D255DAAB15D2530F5004F063AD76
EE2FA09287295C79AB17E0EF4C7AFB5ECDAA96392891C296D28D5263EE631BE2
0CC1F6D56A03DFB8DF16CC64DC2A4BA25C78CB3BED5E7AD9383F870121370795
8220C6EF8004033A4C316ABB86A95F8FBDEF27B9FC1AD3259CE2A9E4027A59D6
FA0607168B4145A22A5CDCA376CF8F657942D643E7118C6FB8485C3B49DF8D5C
B26E31B287804D9E5DBE8300564D6210CE95546E90A839440D5347EFC3DB1019
7E7C1F9FA4153F56D8354C28DF9541B60056F95693A5DC3207DBCBD73B067552
BD50DC53426FA7629E8518074632F6BB0639E2AA1DBBF34708FDB80ADF685477
F1D1B294824781CD883EABB77A8D8A93CE85F961413148C812BD4323EB029D02
1211373CD1ACCDACF821F97F498371BAEDB7B887A8C6479AECBDAD3753FE1D35
BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB223EBCA7E622D460701760E74
95135D6EE1215286E75E64E9F4333B259C51DB04F83FB8A8CFF5EA08B850563A
283BFD9FEAA5AA98B091AECE8681999D7C8CE7081C63CC2F99FBF847E30932EC
89D7AE31C15276590ABC46672EEF02B2AE8F89259944B1272B1259D760D7B237
396F4F3D80745A2E1EE8BB1E2717DDAB52753B36705655AF3B0E97AB1E6E22EE
5A58C7B3B5A46A860FA2AF035F558B5970DE1368D2F20663BC22AEBB8393C4BA
41857657A780F301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6E3E3E23764E
9A5DBE640CA98585DA2A4AF9DE5A50460EE4626641060E55159270B4794F9C09
45FEAC295D142BA5CAD6BD84A5074B5832023E809B80408BB9B61C2AB51D8CEC
6E67F64B36C58C36A88F60969A764BC3650C9F608A3D911E2C01E031D302E806
1FD13C0751886DE01BC4780E971D3952648BE3ACB42BEC6D5B5DA0CAF19F96ED
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A2E43A7E81959D74397B05AA
139C11D8E49A593F43BFE84E32554E529BFFDCE98C901A79E3E0354517C3D95C
E9C02C72E8CDDA3C6402606AD16969621B7B86948DED33D8870DE90DBCD8AB39
72CEF5BC502DB98B9C81A16F71982B56E3D30B195E00D83250BCB311128B7FEF
549C4E2A1FB5DA9475D34528238FB664FACB2DF3175DD6744B6F80332CA317C7
C7F1E95469943D8FA54558F298E38B7C47A25EFDB18D279D752527A0A701EBA7
3263002176824B16E5192FE1E7C6EF0989162AA88D31807317CEF7334C32EA38
CBF518502AC8917F8C0C4DDE1AA36C332BB853DF3C8BD16760A91B02D5E8D679
C227DA8E3207E226A8165D453AEE422EFF10547CC2E44F566E8880D7BF75598B
33B68992E7A2F38FC0102D37B14D7743D97690DE073F312A8B3CC3ECC121A487
2C7A2E643F42D81DC81DB094A39F0AC8535F07BA31C71CA5D158A149F9312B73
E4D32170A9DF0ED814B56FA36CDCE4CA26E456B7F80E01E965F2ADFE1F47E8AF
B7E2430FF5C29D2907B641B4829531FB2A32A4C0367F3CDAADB9A370228BDD72
D36A310B38B163A986ED841B89F943386A45621E129B313186B14136429634E4
766722F56E044B37BC6D86BD2B25404BBDE5111A09F2F70FA32542FF1E83E1FA
20A5DA57D8B97288C1771381D3DAF5B148F098CEE2A1576FA4E08BCFDD164C8A
2DDB6E607138E02333C892AC77F693FF450B0BDBA1789FBF48822B33BFC5FAD7
3A5F027F88EDDC45179F7225B6871B570EBE05C9D95D8F947BD0742B90BF5407
FBDD9646E0166601B3481A982BEE3ECAE668C682BA7058FF2B516EE6A1F62AD7
88D7A56D82E27037A9D4634A52602A4A406CEC3E6B836FA313F76E5D3BB8FDB7
30DA86C9CA2049211DFC67FEF43680759C5753F9AF573A9C560C53F4EC10F01B
24BD3061707FE66ECD490C249247B1EC843A51C18F15B98E16EE5DFB6E5EC238
5A2B60667E25B40CE5F8CFB9AF2BCA1DAD558C1F217EF746F550BF0657B5DC66
0728C942A87295109A90C9155DF0BE682193E60B2B5FED8BF8541250B992E39A
E2E7E3C936A06A609F48029307D8249FEAAB72F6E1CC2C7A3875079EFB568ABD
139F70C1EA8869611D9D4D5ADFC1463D664FAF1E15D2819ACC236CE307310AA5
0B8B1F887BF840312068D7236450B39F6F363E3AB6F8FC5A8BDDBA070CA8F456
2F321D000ADC343E2B1931854355DD892B5A163785EC96245A45B4ED6B5BF9F0
750DC175E04BED0223734E5A7F68B96A1184091D122ABB1E3895721160D7C2D3
174873F55307E929B392CE3475109E22CA5A270A188A7649D8D1437039443AA9
46A7630D1877A6697C2FD31E9717FE5EC1A550EF9E2FDEB0F43558C7981EB189
B81F8D1BA098074266404D32CBE9E1B8220BDC4409274CE1CD02D148724B2561
AB1E54A672AC2EF7F6BD91147CE9E15E1B72BD078B9B595DC4936FCC0467525E
BA8965CF383F4F4AE6DA98D1611D05E59ED9BE06C7BA2AC655DCDFC20968F5BD
12B078701E01F539C74A0B5D6AC9CB4E4BC1D7C2248A8F6E5A7695FE9B0A14BE
253B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C66C9F9BEDFEE780E04042
3DDC5E3B4876FC8A9E07B69FA56A32CEBA6D7B35526797A8C94EA0723B306240
918211E0EEF0934AD0C63700B4526A98631477A19FE5E168BC242740D8C45888
D4A0CF8AE610E7017E11E78CF5E7141AB9009DC1FB985090CA164DF0AAE5DF99
7D62692FFCF574292909EE79FE294598B8493F9991DE93CAFECF7231EA8FB209
39EFAC81F69FEC9D92AEF953CD07A639CB7F9A7CD9CC027EE23F3B3BC61A40EA
57044322C232BE97AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E72267A508
FBD0C338ECAB53C74DC4E883803F2FB7FB3A3A802092EE50089F30F3C4ADE4D3
07305271D998208A83D58F3BC00D46513F0358C43A22C413D9A6BA6B3E100EA8
03E2F0198DA96155E68E8F6CDE3F99D19B44295188865207E8C79FE8C1E98BAC
BDDB68AF7CCF8E9071B691DE0DCDBD7CBBF0BF03BE50426089EC7071143F5177
610D4C2683129C912ACDB47AECE3F9786E47398891C3990700F3123E5BB8ACC1
07D8B722419A9C1F8EBE330D7A360FBCB6540E7EB3B2ED0460F81AB38B9240BA
E845D47A0BD6760B31870D69C4C15EEA09E1831354F7C4A16212A067BDF0ED84
C9A5735368A09CE46A5C17CCAC557BB69FD42494D5D2B9C1ED812F3CCEEC1BC0
79E837DCF4EB4E495547C25D2893E35E24435F55A2D66CE9FDEC1A5F81FA219E
49C2F4D2C8EC80D9E187F9E15825F57826DDB17A35CF2E4C380E50E1797F8558
26EAB926A051DDBBD93F907D31D6709284C86F0542486710BCF518C1B5D1E6CF
23E0D97980F20EFD24A6644AA26EBAF342B36AEFAAAC0AB3727E59F1642789A1
765F02944B8E689BF03404F5426F7148BB8FA709AF1344271173529372AF6DA3
83511770EAC39ED55DADB32778CAE943CE6E928C9521FE45A04F184800733B13
440F514AF796BCDD85974E0AEC9A164C369C237DD28FC4BE2843036E872B2A03
163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796FAD72EEA5713D78F437DA
E50160FAC28C1C21FCF83DE1B5516CB04C7CABC1D37D26ECC85EC180EB8EED1A
6E85129293842B429B1AFB33D68BC88143F92B5D64DA3F8DBFB0D329C7450A21
E4F97C8FF528ADC2F97F87C592935C07955C1F1B0F125261DA0D2F7312CE5B3F
3A1DF65DD60AA679945BCA6A71E4329DB73E7F29098787D96D89D74796C6908A
EFCAFC2C9DDFDD855116AFD66EA16F96AA4B9F040771F86CE98994E113749F20
47C28A0906100EF57663A483AA7375C850A31668037014979D53F051CBE5D246
FC0CAC7850013FB3F1B075D4754A82A584DF54EDC7C8DB59B77CB7A8592B7CFA
7D097BB4BF8EECC6634A8112ED925C55E4B0DF0E5BEE4B29E5DA8177D46930E3
E90AEA7B324350D5926BF3AAB7CF462B8C46CCC43F2AAB8ABEDEF76AD7F14CB4
16CC957E016A4C72A6A2FC3DA24AF084E7544D8A76154942ACCED03A7785D88F
EE716F2A7D77A990393CA5CBCA996BE2E5186292AE634456B428623FD1E62155
5BBCA26C986ACA69714EE280FFCC692113CC15C94DDD294049748B473FD5F4AE
9C321F8D3A7609539BB1E313BACC161E4DFD3BBD84E1216F1446F95F7E0B679C
0D5FE02E0CF9AA45628844A54275C0E5894655E7B06095437FEF27B81EB14663
E3073EA68F60F1D5B1A01C9D57853580E6F180343DA29EB6D4908FC8959EC547
4049A693CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C99128
2B1240D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF0
2E3CF25222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96B
ECF95B625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7
B80CCCA6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C504
5B028700C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6E
DD6AC0425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D41
04669F132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23F
F685C14584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE
1B5EC42CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311
A007ACCC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F79B52E
24284B8FB0941BF71DE5A8C04AC209B2BC1057E1B23131263F844B18EA91B956
02F465D1AD4EB85656E66D39C6D94C1DFC732A196B89AF8000D828F0B96CD1B5
C4C56944521E76439B5DCA7732A29F37A08A140F8C0036E35125E11CFB8F1E39
7508BCB97A2A87578E15D147311B7C07C17737878305488298DEF3FCFB79A08C
1884C223247C65FA99AC139A69ACDE989B3FD5A2D5C0A6D3663AFF2DE36A2249
BFD2DF460161D3EA5C1B998A83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0
E80C86A751E25B22ED67B8950124818EB258558D55DEB25473A60B53D4B46DC4
CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8762859353E43AF38D0D4E667A801
66DE5FBCEE3580C618C1814F112E445F32C0970817BC4050803AAE80CE06895E
ACC815D11C5043C96E89E9C036E84F31BECD3B9F74A6B21D04D33D8D6867E328
F1F84E503F30CC012322BF86C75D542DF2E2EC862783E843F9628CD09328D96F
2191AEB4D4ED70395961900B71104E33D18C699CB21CBF1E702A43C212F7FDBB
168337708E78CDE23E82878404BE7530ED3C037A517E7F4D92C7AB7DB46166D3
F9D51BF73E000254A8671C3523CAB620C1D56647B6CB1AF0CDE7B27ED2707252
504B6C74D1B1215C450ECE4FF7677CEE2603269D5F288AB410ACA8C41E7649B6
6330C265A5B7F41D915514AA0FAF252C2D470BE8E487B5C8A276C074A1F51A8F
AEF46319AB90126937F49345B442931D89A2D64E9CEFFBF0E3792A219D478D91
59272C789B363F4B77BB6F513F2D1CF82BE364B0469874C6EB4C3D782F2BB7EF
F536480AA43F0D960075B6036943E3EC779A517C4D6040629FA35ECF5F72BC11
EC5003D3A2FBEB95AA878584A8ABDF1E8CF78EBE55ABDB3BE9C60DC252CCFB36
274DC69EF2D60CFF2873563D5F829FAAE46F12CC16254F52A26FE47FE41504D3
E851A0670AA04A36A3BD6DFED9BC3104B7D31460E3FA77DE5FE016DB36DE56AE
7E663E81752C1539A5613325DCF159B32F71199029B3C52A85E3A069D5265B78
DF1E8A68FD35569FF3BD8484D4C450FD2CC53E9D5D933D8D348873F7A02DC5A4
062A9DAC0FEC368B11CD07341EAB622A7559CD4601AF33637D19547C8D92E24C
1190A50E8DCED4C7B578B8FA81CC9559856404124F851CDAC202F133D2A0021D
5BA5ABB98A5D4359E63E7B5982A26F1ABC0F7843685481E40BEEAE93DB98DE23
6DEF8BA32A536C00BA8999080930FB24143DD7851B5539E97DAEBC0C57E6CAD2
FA699ACC80B728B77A07EF96201F5BC9187B8716270EB91BC97E629FD0ED9D49
87C1C3F19BB1DF75F985EB18BCA8844B267B7610A6D157EA3ADA7CF63EAE1CDE
BED0C8CF6560508A7BD68F0D6896FA97C1DE35DD2DC448E17A060D578CBBC23C
7B47CFE6CFD6EBAE3E24A85D002445BF81B4BB62B6863A4CFAE37F715EDF3EA5
A33679FEB21AD1156AC74542B942B0A4F70B64F7A89EB8D38652FB57A729387C
6E48EFC3641A1DC59A816C933FF531910AFD36D4E7369C37B8761341D2763A1F
F764ED045DEC3F74111957D7B00FCF5F246C5AFD97D7F7DAEBF8092DFD40519C
D63CE8E38A742078EF5DF4BCEFC85437AD3B3AED02EF14AE8BD323700B083E6F
B9B54FF40B63FFE88BD7FA6074CD669B124A8333FC4173EDC8861F00421BDA29
947272ECDD4FCACAEF0B0D408990758FE70625209BE1245C285B171DAA6BE705
FF575048CC768BB8F138C00B63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB82
1BE08A1B06587ED0BFCD31833B1EECAF947E67DBA7060CF90D715B1B4C7A6B38
6466E51305470160FFA5A9FCD721692FB97A0DD77737F84F944EE4F182641F05
1987B79A1615938B81AFA5C99B02AB37CB7492A3032BC29ED513ABFE8E6F085C
4FA6A856A3B0FAE27B20E1DF3B80BF4B5911464BA2D6CD239CAA9B28146CC516
ACD809E764C8DB3BD7F80C944959B74FFA0CA674B3A52B5E428F6A5529408AEC
4A8149338459F8BEE4E3EB8047907EE0174E9379E76128411F6F62DA21245722
95D7FDF91A1B0837AA7F80FED4EFD79B47D31ACAB7921E974E0F025141E0E37E
FD447C37DB455D2F083DEA179DA4FBC32DCAFF9A18635F0C806A7F79AB1668CB
03AA08FB060A2ADB1D7FC295EACA3E7EA4F5ED92E78990A082ADB3A32F0774CD
B0A4428FFE3F0A1088EA71BD2DB74105301D0957D57EE4D15D0E8C5B0F468202
F91976A5D9C8BDB5514157F1C88F69F5F803FC20B59D8A94F59777FF203C063C
4273C41CC2B831FAC8B35A70EB34886F37C2D18213DA6D79F0231FD18090D6EE
761B5AD3510CB3E47EEF53A23BBC9033481E0B0BF46B0980D70618A821BAD346
F807B68B77266B06B756BACEB5FCD36A0F153536DAD78AFE7ADEC90B959AC3A1
9FA9D0303DAC5BE0058B7AC46EFC13F30FFEA970858E80ADA63052023889668F
4C3E84553C56AE4C8E2478A28257BE4461BF0D5737FEF579DD93DFA22A948E88
B3B323E0DD7E5B229A8753CEACC4610765D2CBF708EDDB1B5DEA54A92603EF47
888C851EEDE853AA9F0EF60D11E54B7BA0471056B021C03FB2A2D2262AFC1467
A7217C1C887F89586F84CE132D460067CEF74BB5AC6ED2CEDE02799D369A0193
3B7A77D835694536563232D2B7C11EF06056690527A4EBD1F1355C3BD6CFC4FF
B40C1CC5E799B3728AF8D6A742D6FB17DCAE007D8E2C41A2EF916B6A2EAFB651
D0E490A79CB8484AE4B453B00318B966EB78912997CA884D714876239501D7F8
9D32735ABD099F2B35842AF2A6CFB7EFD6B57700B114375B3A18CC1B963DFC1D
7F5B9FABC9B989941219026BE888DE73CD3E463B692A4B59BA7A760DD7A81CDD
A23CD0707F8B2CDBA530E9795CBE691C141A143280C65FB2AE0253F1E002F576
583BF8FF1FEE3ED0DB577DA27E45FA577E9D4B958FC9C413E5FDF7E3F203BD2D
3299DCFDAB3D314077FAFF599A6162779C3F18AD0908F75EE8A4B38C1C582F30
C6DF5FA2097A078ADFACAE547DA5926B3D5C9A7A59226CBC34EC86D2CA91E322
14DD857E80C33FB4286BC47DC77742A8C011C9628BED9C7AD8647A15BA064C8D
BC0B9A1993A9B392A4FB76D29C0565E070600C36FA9FEB325D9B4567CE2EFECC
ADDC8A013BEBF580573F64AF5AA364DDE7579E59AB8F63B4E0D1C4D5047F251B
4AE34CA73B1499B395127BF2453FB7F04A266A9662CD00305B894723028E0529
C6B747E58310BBA39C615BD9DD02347E6B3AAE64A949E5C87CCA39AE1F17BCA6
C77E1A59B2C119DE916B29DE7054ED785232C74B7B92C5138A7307297BF2B08A
80874CF0D889281F4761B0DCFE61E56EDDE14DB1462E4F9859384B15882C6B0E
2214137472F7DAB6811B1027FDA86CF66E032F1B0D4946100FCFC2BE23B43458
474D510E94FCE182C53165413E1FC4EC239B58976F94434C1FB78334D81374C3
59FC481521A3784357B8E3E7B676414CF22CD112C8DD5A99D30F55D7EE28DF2F
0F6174BED2CA19D075A462526DD5D645E764B114853CA1BF1C54B28F3591C1B0
5ACF3D46952ED60024BBA20AFF928DAE47397075327EED7195DEE9EDE5DF536E
CA77341301986811B7C76940F64EFF4AFBB062D33A9D22D14C37AA9EACFF7CC8
1EF9860D5DA595CC6778A7F06A3C36A4C792D168DC61B0E00C91D60564524D7B
1F773165050913614F8EF8A85BE29E113D06CC844D519A65F780A78E56CA9D87
4106924BF00029F54AC39F6331A4A81BF6562ECE87586E03C99C4FEC726E5D5C
D4281510E8B82A5E5CE852D1AB080F8E3F97843B172D926DE310DE9062984F69
51B5AA2EBC98536501922111BACF45C80493B3ABABB911186600AC62FEFFF4F7
754935BE18AAC41C860B70833B92CB7228AB2C8F68D03B6326AAE61A8AF0431F
373DF8E1A969C52A99052A4D3A2FE770C9358686071FF45FF489BCA0F4BAA4D5
D965566BCD23CC0A112E0565D1E1920094A0509510A0DBD662C731340D67F8BE
C315412BA9A18E9744CAC5F1C047BDA803928A286C4E76A6B2EAEDFE2FDB17FF
267D0F21C35E0E6977AABA48CD601358BFC654F3C7516FBE690A67828F56C593
686101542A0830ACA6918C86EE5D21DBD34B2EF84D336A889395E771CEC29602
496D2F4CC3005863B6DE09084927E0DA3DB454B1BED8CD3EC75326188E28CF53
4185E66A3A161EED1F99B8496A9FCFAC13492DFBAE8110E9811B2898D889A581
451395C7C58186048384504A909B92A16E8AE2275E83777297529C5ED2573FDC
622D7D4307DFE77A4B16D1848D485679E592C1AB0CB02879C5C4AAA33FCFA22C
0A4AEABE4D4DEE308AC29CABBA411987C715206297C0971364CC5B83001B0789
5F0D8126F67F4A68120DDA56FC6E466A3CA47F0F2383A60025C5D0C64D459276
BF2D8F25F13137C7F1CC459CB3B3E945760E98EAF5063E373A084CD6829DC18D
063618B2C9C5C3C3F9B01526D9D71A74984522CAFBAF6CD275B0F8470DB58184
D56DEFCA7213829FCEAC430A54AAB1C27135F14DBBD172CCE6CD2B6095B0157B
9B295F244E6197FFF3759E08318611701B27F723F3786A03BA85152A3C6A3620
836DA8BB5CE31BAA722DDB36BA5642CE4117AD1D6B9E368CC0191FD3EC665A0F
563B55F2738B16DD43CF81342B8A5B460CF17342B3EC42F3EBB3440E2E602354
F10D0B89AA2077894331ED25BF6955E13DA0B4DE3740C28682534E57DF995F87
B37C537FD5D25484B3B641C95A5D96C622B04FCDDB40B675F081053377364DE9
9FFAFE6D22E975678C98EC8A9069AEC8E237722DBA55BA4214EBF66B06D64001
2D108ECD3329117185F2DCC8334D331FDB4CF16123266B94843C4586F7B0914C
F4136BAF49D0A85D7764EBB31166A29307F6343DCA5AE9814FF8EBFD456F7784
4FC27438F6061CE0C155A07D1064B66DAFAFB39332B22F2C43C3AD99954E96E3
9B52434EB13675C377D3C5C7267BEFE151C52A60427176D702F257ED71B2803A
6BF70C74D8EF4783865CE3532C2BFC6208F2BEDF5E26A4CAEAC397152D34458B
281D8EA05D6583D2796F440720BE08EE3F855A597B65071E7946D81D3FF2F85F
8CC4417D0D02BF2477552010705ED42A0896ABD62805E2042E248A874E814B3D
78F46AF4F001A3885AB7E7C4F285F9BD614A00DE6825572189A19315AD3976AB
880E5F0AFAB2498FE1D79954BD53619CA37601FAEC649E37E9038CEFC41BA172
055892C47614A9035E7CD93575C377D3C5C7267BEFE151C52A60427176D702F2
54590A4A2E016B5FEADE1A79C0AFAD4A873434BA54F6D717AB58F78A4BE43408
C7C2F6D4465B31BDEBFFA59EB012DB2B39A9370330D258EE8515E8CBC0DA34E7
9D8085F8BD147086881CD9C9335856F5F195FCAFBC3813546176EEA6745F62F0
715C865422128A163B6C6AE0D98CA8116AA0AF078126540BD2D435D0AD6CA923
3144A0545BD34F7449237157219D79611E52DE72B51F2BB650628AC5E429F423
F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3EFD3404FB795EC4D0857AA5D6620
C95021DF41F3DCF687067554D464306A44A49AF8095E431F91B8EA9B312FC277
BE315B18312C8BE99537C3E44E721A361BED6541FF9AB02AB229B8D20C7CCA13
1B23CEE3EA3747DDE3939D38A4E5DE096705B4034226D6B5DE97BBDD742027FE
22B2AA7037F55F05E547ADB16F56669A201DA41C1DAA9B4E66C8E5A03D5F1D98
DE47AB51DD77014C2925F4F0125AC8AB538565E06699AE5D68759A52096B7958
42B6283A0129D49E7E9AFCA904B37EDB25A80BF2A04235CD244B0A88652F5A1E
C5546FD4DEAA2A82A209E244948D832C75AC8BD1ECDD9992E9F8CF3DB923D549
EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BCE8B6B9B0696233F5AF80CD6A7427
3F5204CCD208C109EE75EF233DF172A38D2174B4730947637701EFBB2FBA3063
483F9E82D2336227E1D03B98C42383BF31B68F6A6309C9BC0124812E4286E9DB
31983877FBC16B4E5EC481D8E9EF87B4C4C108E799E71AEE8C115164BD9BF92B
1A79C9C7090465E9A00FBC634995A712AB2E112E3E6AABFC1D6F293F9EE845A2
ED6C77763127B0725900DD92FEAB15171D272BAF7200828B2E085A16B4BB005B
30C1614AEAA2AEC112F30B3AF57D9EAE465FBEF66FE82623DBED8135D5D1E2A2
D9811D78900B7D347046FF9C2A9DA7AEE1F42E36FADCE69D1C31BA552A09B302
16F9A60D1F58E74D0931CE5AB03850ECDAF201BBABA430326604E56F26766AB9
8A5C51659EE74A875CB811177A20A894351D75B4E76BFF75C71D425F9409954D
F168966159B2A302B801CBA292D1C07EB52F3849F14FD66B8A34A64B53A37CF3
00EE316C982A0D58ACB2AB0B6D52C9A745F440BE173AB90CDB8D5A62492E44D2
391EBD6625AEEDB22442CCEB84056435B2419148A456405A6BDEBB44025A835D
94E3FE7ED4898A10D61824D760F2B86372EC36424D8A7581AB38447347DC26F8
B6F0422F3340A01614CCC41D40D27BF1870C1EFB412C14EBB08548C09B8594FA
27E14DDF887194960B9E3222121B24B97DB7866E8CE52B81CF44DA54017243EB
1546BA7FE32409951CADA934F8896AA6037462E2444EA33B01A22F873D195661
CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646FCB6C28886EC210A1F84DB25137A
35AA5C7691B72AD442BDDAD18F30DB190E4D004740C567EB0F86531E771C74DD
3701419E5B08ED32C290A30B02CF572199F74645C0D9B4DB9DA965633F5DCD87
B03DBADCE87FC499FF9DED0E6C8FD6715B5797EDAC56AD49F59AC389979AC060
DCC4606454904FB9E7BC9FCCAC1D1116278357D8659BCC81753C2906EAC08FC3
FB9AA3D2A83ADAAE5427689ED559EBE5BEE0A331DE6080DA757EC74FFC5E9B1D
2F70A87D381F424FC2F34BF902F401264C69EECF460CF82F033635EB5B3A4F7D
F718E0EB68A4F615AF7AD898C9CCA5105A687B74DAC1CE89B910A9B6D2C887A3
C469F9DC2A96B15D33FE7C565961C2A1C0E5FDAF8955FBC699FC847F077A8104
7021DF46F69AD1EB8532A8962EF0DB618EEEB9F1CACEBF7299500D3C3520DA9E
6E7040E6A0131184185A428C37E133A909D02EA7CC5DA03D0AE482ECB5F7AABF
9749CF4B5BE79087218032FB6D3C67E6A4D8646298E229C517E89E253C6E46CE
01444ACD693258A53F98DB0DF475C8D74928A381F1E74BB27AF07B164374998F
867ABA7A5DFD196AC274D49269CB03F7483407DC1F346E0934D208422226264C
E8AFE6E870382132172F06F105BF2DB51EC3DF2714104F031BF8D85907DFF284
9E4C3C7B62E653903867AB470C9661EC12974B4B88A0AD2FFB4491A03346BB7D
A151B13D4957485E52C2815090CA3B1221A12F749E5C4197196D48244E65F7A5
4E14EA3DEE4621E32EE2D28136724789FF2247D8C7EBBE4E95D9CF6F8D4D204C
C6D61EDC66E28B7CBDA7CB79240357C0AF60E817427A9126A9C32B377627ED3A
D4456E3A67BF5BB49920F6FE6620D699A53E1F1DF8D844BB4719549E214E3759
8BCD577141B8DD30BFF42B4C55ABD3F432E2D3D9A96182E60BC67208F86C7C42
D48B75DF9890529FBB3D24651664E84B70E96397DF3694BD7EC9430C3C2F7970
B696DA577C21452444F02CB398D097D7FC83EAF094FB08A17E360511788C24A8
415B5BF9CC780D7FBF21C20D5E8BD8EDD3011931835A50D4CEE445EBC7F8251E
CD7BB67468D0B7F04516FD1D7DE759C6BC99788940F8ECCB6AF7ACD21613127E
9E4D3E714C90B76219991D21E34C2E2089A27762BAA33B1293BC4C7EE0C09F38
9FF828AA7585F9B7FAFA718A1A97CDBFC25ECADA33E3F6D66E6A404512EA0650
22C9B033A8F72733B7F3B44F48E78519E114A8BDC93D4009C2FDB56199893516
7338ABDBF7E8DDAFFFC3D0003ED3439C567438C6CC6F9A9024949B47ED2EAF15
2F6F7F69115359FFF6B335C54700A78C7C9605BFB0F0379CCDCD04AB6D9BB094
26778C3D750976876ADABFD96E5F3357C75F219EDD29984942CE3E5A6990F99F
FDF77D85D434E47B234D7EE7AF00BC8DA24B5DBA872B606D8DEC5A9707EC0438
83C3FE759DC1E6400EDEE1D79081462E37052BEDC79ED55666FB6BE037AA2EB1
0BA574F4485259691EABEFF092AEB20C9A785CBEBAC7352F57C70ED2E462B4E9
C21D45FC95F4483FED80420E4BCD787F6C1979B70F7E1FBA9D012360110F4C96
901E634981F74FE0DFCDBC13E320FC6896E2F408B840D4FB9786E782B22828C9
05CCC84E7AAA3C6A481246858A42684EBEB008B52B29C6A90BC9C73264E94622
6627968FA8AD8EFA4530AD6F44F7DDB1F7B334E90E1996E4C2B83A5863391C91
A7C0989A5FE68D9DEA3C0DBCF7C332C1413109E975BFFF110EF785C8FD1E8D1B
ED5B24BC6E9028702C35FE1AD1E9021EB5FD773C8B9DD0042C5E51323CB81A8E
DE313FDA5D5D53B2285CB5F6566613FC427B31144927ACE6A31737A4451C9BAC
E4A515379938C91AFD5DA7E08065B0AD6DB135554C9B7F8041AAC5EFE5279BBF
86B6202987505155954F393FC406C0129378B091F6E0E0C2ABC7FECAE4053D8A
001880D27C0F7D73029F171028FDDF8B55093534B853E32D9E7581D407EBE3A4
2FB15333B8666884BDE2736D81497DC8EF0FD5AF6AFF636A37A47100775C5E54
98ED8BE24F858C5E39311E6F14614753089F8686A53448D308EB9EF64D89D5B3
75D6426C7F6AB266B9F07627BE18ACB755DDDCCDAA8680E8103F24F901AD90FB
502AC0AEFFB80624427713EC12DE43B5F289F4C4058F4A02629C8B367774518F
D062DADB5D39353D4B378FB0E472F835AB5CFDE59E1D7C42D5D5C8C5832EEDDC
1546675AE16824DD84B6CA375598B6C439A2E90AFD4DF4A1B5C4BF78895E49CC
6FF69C287D243D1823077D76731EC605C2C85F79D5C6DD740FA2EAE0C2119F4D
770C87CBB418B5B2786E77B69ECA81864B4F28882C72FF1294660CFD380BE8DA
45A7FD3452FC17F10A319F40A9530D45FB09FE852DE1E90FFE93A59836B61BED
A6375FC4FBC9FD363316E91090D76CEA4A3B2BFA0B02306980261DC8500CEE0F
9EA9F0C3C3CFCF7EB4D1CDB7B5D5B18B5D29C115D1768AD9C9894DE6266283FA
BDEFE132CF1F145BA2C7821CCFFE27CE3176626C459BA3D535EE0348A021A323
AC91474BA2A605FCC3A70DD76C862830F89D24898E7A9F6E03B6E677A0FB26C1
2A409AF1057E6EF231EC7AC1950D41B8B1DFEBE2BEAD979398F26FD1680CC331
C7EDD3E4B4C9307DCAFBC3A407C19851D98823AC4376B8270587E8F37218C017
5CC80D07137085C70F00B4AA2A3F38FE549D727FAC97CCF1CB0F26A82703271E
CB04CC388498F04F23FBC9BF65EE479C6E657A4D88741DE590A670456AE85076
9861C7E6EB24B1CE1E87CAB6B6187D2ED0CC5BB2D000B88034362CA0C6A066AB
EA6C1D3B8F40238DE24F302B1D900E7E8C8D94E99EDE98DEF39C2CD2A6F2692D
84F7F94B1D59B05C81BE2AD99D3ED86668487ED31BD3A285459467221875C14E
A3366EB3E54D34BC73F795F8C1C4E3464E3E8B5854442C5FB9B7C287E2FA10D8
6AB5C6B0754F69D869E5D40EB344E5D2C11E525F08CF4752ED2479863460339A
EFAF4FCC58EA396431BD4F95BD5F6DA4CE092ED33B200AE21D0404DCF32BCB28
A7373F882026ECAA0838734E691BC16C50353B2441985488F0E706131CF43A7A
CA2BC270E4E404F8A08B6EA22077FDDCF0DCEFCABF832196D27869EE01D169FC
58F743CD16C8F0A2564E978CA100066CDE17ED245D82EBD6D8A0E6E054327356
24AEF93D86C1A0DA6BA58119FCA2570964C90545E152B78A6A20247B49CE4109
08042ACDE9414264C06DD8E7C6A18218DF587BD534F0297E3615F4E68DB6BD28
0C9E0075F512AC73798C9668E38E4B93D0746AFB81B763854A391F765DDE7429
DEA1C226F18639E36B48F6989BFA584880EFC41B863696FEEF72E35112E7BADE
4F046FF8D913E47C201A652E0439E4E2B2DB67946562D76CE644AA43A8117C0B
9DD6DF82B5C4C610882FCB3FB67F81E8E0987446F1B42166292D0CFAB1AAE654
1A3DB6A13EBF95BACB1DC80EE2D091640471734405A64A1AFA4C22F47661DF6F
504F14DD921D63C229C8B7CE8F110BC672BEE07695968FCB1C0AC1B004ABF61B
57863F0A872C916292B463FA2680A5A1E7FED1E46283199D5A2682B9212E2D2D
868F92B8459BCB9EF09ED7B52B92B00BCC69EDD85CDB32DFDD7E7BA91C053387
AC57104B86FDE52C94BD5914E56E65B9D87A982B88D8B3B42D79673ABAA54D46
EF908488A99900CCB06F62E8766ED6C6933B6EDBD250909585E7D39B53D6F30F
2422E6F169F49CF7E24BF600FA921B18D78323FDD2B568E3B034C13FE34AA254
78A29D2A93B9E8C5FE755C4C8C84BE288AE899BDC29B75D8D0F5C57950899E63
4D204BEECDBF521D414D9517A1ACAE3A443CAC95E1C12DF3F7B4EAC374C5172C
527988DEDEDC52B091AD4296CEC91F7997CF265A4ED6A5B90EB70E2BB7C7C23B
7B83DD252947979728D6B8C4BB6EFA642D9A7F8807674AE8EBCAE8630921AF7D
1CA940090DB58920B9219284D91DA3BD4DF2892F1EE9501481D533B2FE9BD05D
D58E41616BA8F945EF65944B9E996CBF597BFC9418A44915C93D445D44184F67
83AC3979608E0F6D544D92EC2B0F3684CC2E38D7310690DD2DDCC634D3D634D7
CC06195116DFE7AC820DEA4685E3C5336B647097086C931A6103A50105C56359
73A97CC8C165D47371FC14E56AAAB01F70AD75964407C4F840B8607ABC3EBD65
B115CB8CC353243684692E02CF81C8C0565CFF9B73D799201EE2DEF2F16D6564
758E1271DA0E46468695A4CA7D1B1BF6D4AC2B193FEF9FE00BFBB081D7E78C44
DEAEF007F7421EC91B233C05C59E090680F1E0C94AB5509CD19279CE7A23C719
63F36C43384D2A356D2DFF4254DDE3C571B9C6B07B09618AABA6EBD886D93F3F
45630436BCC3F8ADD162DEA2677D41E4045C6DB3F15DF83E0185CB1398EDC35E
34404FCE1EA2C28AD15560CE44A39581BD6B555165091C5D410715BE32471B9B
FFF791C452F098F3E8AD8814BCBF2ED9C04B5AEAE9EF8D735BFB4715B7E2454D
0F598F0BF61BA40C93FA0DF9538D50441B5B1405BB15DA7FF83A5661C83EEE0C
01516D988D3FC6AF7AE474DC38E339FA60C75AAE6F24DA45F0DA3A2D5C32B18B
F4A99C62B6D732AE42FB8FFC4DD9E2B7C8DF1C241030B68FBDBA63C29C3A6225
D0E6CC6B1905140B6A496100C45E9108F029E68716CB381CB620CACD3A22A788
1910197E470E7277AAFACE92B00D1D5EB1BE26422297188DB7566B42A4B0CB64
B4F79257C9DF28361032F041B46A66ED989AA7F51CEABCF73E80769277F5D487
8326B6ACB123477906B1BB4661BBAC784F874870B8D6F7096E251C6B88360835
22612462A8B41E72EAA4265BB0838D519432023A2EA97D0B4EE8B67E256379A8
63677DCE24A14BFC52E9210C8A69223772924147AFBE2E6D1929EBECD716C6D7
EE18FABC702741D05BDDED79975DC15BC1DB4D67B315C4556EA67F63ED793505
8ED16528D28E50E37BBEB1D1554503645EF120FCD85CBC56C283CBC6B66733AF
A4FE8480F8CC8AEC9F5F11356E462A7E8180271AF307F9D786059271033B81C3
BF16398367DD2F1A199FDA3C8FA50A3520295F453D9EDF140514463E4AF6F820
3B584572BFE5E7A4BC926D534F40CFC7F7F2350C62A192333E15418156EEEB5F
3E0F01017DB6D4137018EEF6C9BF625A1596A7A3B8C6551AF7D1036FA5C79353
03AD6D0DDE22CC3126DA216451F5C1D8EF063ADA63F3351D5E8B2A5BCCD28448
09BABA4BF6A1ACA730BA1FA90C0D7F09B3DD6A5FE918C868F90D761567EED3DD
7565C4419B7D05BCBA0D2CDC7C84BC4D72186ABF14A12B8ABA67E37090F3A56D
06FBC5A22D4284647137F51242C7BEEF2D574F2F1413B4C6B0AC4D5556B2B4E1
B37DE4506ACC4224CFC00A8F833390C655AC67DCCC00076D10EBBB44DF439E59
0EF307E3EFF45AB5B31EB70F31F472166B18FF30E1425EE578CF00F926D9BBF6
760D67B53706A450EF53FBB966763DE878DCA9B41E72EAA4265BB0838D519432
023A2EA97D0B4EEA16AE8838EFBDA5D7B525C23E2C78194447371F903483BB70
907F63153CBBA652969B46C96701DFBB9E88872E7B4B66E4DD3B35BF99893789
063BF7B01D5F186B2E07591326C4450B4AFA8AFB0FAE8E8F1399304DEFA7BC92
8FB26913EA6DF16B0DC337D4C5A33C6F9166B400716575ED4FF4B0E5BADB6E56
F7B4B3B9513B8FBC8E3A56DD4C252137451B79C52B101ADAA48FB0A461461225
8CD2D5503DD3A3DC42C9107CA0BAC50A027BB01514BD996EE7BAEC876CC50FA0
C3717E91F68E6E2C6DA9D1EB505FCB86E287DE2443F8EF01D255DC5C45C28FD9
F66E59279A66980ABE0ACCEFBA3D2977040D8E3EB3311872422A0E1660E8AE44
3837A2E5276E15E31A9CC66B827E1BF9A2D26CAC14916C11B1FCA1C171B7B183
EDF89D009CF25EA1BC7C8AA2AA554CE30086F803F11CEC80B5A4ABDA4545F3BB
CBC0EF7AC86FED4C7CA29BF669B44C004519C18BCAE42E376A4BF18143CB463B
43B8D35C1AF048973AF81028BEDDEF64192FFE69A219D603E1F13740B8043BFE
2DB4575807094BC15E6CBA2394CD0C08DACE9FB329C277BE315B18312C8BE995
37C3E44E721A361BEFD6F9FF4067EBD927ECD3B5E0320C672715B6FCCE55499C
2C036947A623EE86048A0CA51ECDDBFE74ACA3475BE5104BC4409B9A97CCAB9D
A5C76148888F30AE04C7EC32FF84740B68AD9FEF4DDB7A1169F5A96C3FD32EB2
0062FB4660F955C6F90995E1895A56ACA672B233D05F41B489EF12C035039A8A
A12C719C0339F766BE6275511AC70610312A3CFC4AA9737766394E6DCD202B31
E51621367BA6C97A4FB2C2CA4E89F6003274118D0B8D1E0D16ECC211273AEB78
CCE20956F1F48D71825B795DCE254D74CD56631A4A2D5AF05EA2047988AA020A
AF03297DD44D4745427455BE9A926C7A8FF4F45AFEACD58AA7A9F9ECD8B4C4E3
5656CC9F8DBC6622F6729EB829951D29150A4376E8F22C5EAE00C1CA5E0AB1B1
C4E91D35DF767DC4EB96F5B69456110B9A8BBCDA8551C3C14F979F3CBEE91BA5
BDFB1FA225CEDE409A83E8E129216035F189C846161CBAE0109F23BE0E07C896
3EA8991C881EEBFB91CF2B0E41FEC653F131CB4AD5EE08CA3293FA4F4C6B802E
222A420EC9F149FD6A55F1A51A895E285885972115BC5775F656CAF198F1073B
7BFE06EA127BA3B1EDF47E6110928BA4BD9F1C63B57E0AAE912C86CB6CD5BBDF
81B69D7140E4A5B6C8C04E68D15FD03379057EE574A15D7DDAE81B0A41EBD0CC
6D71A2E4B5528296D8827B8E9DFF5A7D0B103312B17D16087D670D7F854D5740
F601C39CA988DF0AFA1E08FF5177BB72916D578C2C6E72A18E210502AC903220
E53C6287592EA45D3836BD27C07A0E26407D1E59B1EB2EB0B151FAE64E8162A5
61FD291E1107A84A835BE4E35EC76C183D87B3A9EE8E14F4C6B12253F056B80A
0C7E27EBCF5F10E07D9A75E9F4AF50BED65EC207CF1423844608CF1F77EF9C78
0017684ED2D13BF595BFAA794784EFCE151A072B9B711F0F159347F1604582C5
30D8F47B26EA0303E6DCC989B57712EFC45B0701E1653DF36A29C8C3254D402D
0140F5FFEDA7098B030F577C091CE0F82D95D2AB8451DB683159A396F05B3A4E
975A340EFDA6FF45D81E5DCCB9C26B9FF9D0DC9C1BC36F047FF6BCA7D2B30B63
683747CFEDDFEB27523760D57E81C232AC4877088B9B84432383997DA60C48C8
0FB940FBC00A9912B63DA88B3C465E434C7ADE8D36D048D6E58CF8102B09B0CA
478A6A6BAC8CD12D58C9AA8A3437607DED09C3415310195CDFBAF4A69193C843
20E8705D80E3DE0D2332FFC0DF09B20D2A30C907A4B0F4E9C6D74E85AFF56B0F
9630FF48D6569DC5C166ADC0CA1D1B118B0D0451FA5C0CF712548B9D164B87B1
EA798B777884B8BD7016B83FC3997DFEA159A40DE56AB528EF2F6EAA1B1F1382
9E41C922DF981188F09E377CC2D32D9E22B5ACF8839490203560EC53F1F43913
282D7DD780FEDAA5926EA5679791D474BC0B7939D43C0AA387B8C24386349B1F
747F1354E70E1ED37284DDD65E8228EBE97418BC6304D42C39157FA92FE6D38B
5FE1E9E278FE373975671CCD5E63C77F43B63116685ADCC03B779613417DDBE1
48DA73249AA90013DB77AC6F4922CC21BD94F44A39F52442A0323EC2D622350A
EAA20BA78BC29D8CF952F40C89B75E7FBC53EF85680076F0A90CBC58D0627CBC
F282AF59619638A93EC62A029471B6078CFFD8AAE891B5C1AC746A23640AF1DA
AE306808A6508B40890F518432FB6D3C67E6A4D8646298E229C517E89E253C6C
E36ED14A6F8F240AC53D33A332B7C38BA63C1AC13F5AC038647C5F531173262D
A2DBA680F9240B8C62DFD256E7F1C3D020E853171B0D1612A3DFA5264D6B6437
1272A7AA4FE2C7A802F123A58715D6017F27C6AC66C0B04F4AE08645E1F5AC04
7A8204F464CF29A60BA4DEAE3FF93994C521330EEFE173B3C0C54AC0A20438F0
184647B932DDB64F35E0B30FCDE41CE1882A74B0D383A2088637ECF6A222D580
DFDF477821A9913516CB0B28F80FBB480E58AEEC690CF237B5C9AA6C81744861
352351811FF8A562295C24C872D6B5CCE3E7097D5D0371CB8797208E02C49B95
3972BCABAB06157DBFB18A3A746FA3102EAB5D5F0E08468693268E4DF9E0CCAE
59FC2A788EDB10196BA23E7FF21E598B73BD532DF4D9AFBC409178AE62859F5E
C3461390711E0E9DDE26CCF1965E76FF2374E36A6A1F0B078E5C8EC998673E8B
1A7FA3C723DAC77B64A04F2C039ADA8A80553F052F97988D4B276110BCA39FC2
3F39B6B59E943262F2E6EFB223B25C16F0A20E27F57DF891A5676D177D65D68A
55D40B1F81CB274EEEAA28E4D29622B1A783A8EF2AC87D34B6407522AB33411E
CA49B3DAA6BDFA633EAD07643CB2C30CE907623303ADD6078100FA58CD4C1C3E
CDF1B6ABE0190FBB954E10D29A3BC76EE4086836F54284D6DB46BA9856A16B74
D2B54D33541E62FC7E2E104143923BF639CC3241D6FC539FA7659908AB11E021
B27915CB45438F2DC4BF2D389770ACB3C12E97D2F5991241159DD6AE25EF91EE
B3C51C3B43E97D2E6884AAD6751AA3C570FE0E4F0239E05BF6E98C9FE41F2C92
0C27726380FBD329D29ADDF290883487CA33BC2B462A476A1F590B805B34FF46
5AB2A6DD504A9B6FDDF77D85E9D984422D428200823D674B1893F033848CF51F
3BEE72F0D67A10232543AAFA3E7AC77E51E1E4CB85BD2A75EB16BCD26BD752DE
5BB21DC9C7FCBF815D30B0DE8649A1B1B360921675AEF8F27C12484CCE6E4535
5D47A99B6DEAA787FA4E224F7FF959945AC0B31D21CFEE8351510761D477BF2E
71699C0C449977FE4CF6F28C151360D1869F461DE358037AFBCD4C9A32376982
8C5D9994543F08886658507D715A5B9B67A9395FD76257FD0D217AE3313B8D61
9B84DDD8CD3878A4B306950873DC70F341E0E4A983AF06FCF09E378E967934BE
54E7DB81D43AA052F94E57F85A9C923D1FFDF45FEA58F190043ECF0803576DF2
D32C346D6A51ECED2875F7F94A744C61C9222A2DD583FD795AD2FD055E7B3A1C
57F0A516BF05B43B2F77DFB04790905077BBC7B59C5C42CAB2E88D259E0FBC05
D3F178B531BA4517B183002544530CED9C705BB2DA12624B76F586D52B66A64F
52700746CE527475F4E7D83CD8447B926452AFF608EE55FE5E327737A97AB827
67D27812497EF6A45BADB374BD1C3CC6D8482BAF1991706EA336F89880CE4C5B
805C3C54F112F7AA206B77D39B769837DCFF74605CA6C3A4591D0CB0E76F4BC3
401111F1756B58168F9FFB572D787B2FFE01BC07C04BE2F6A0D5EA576DC9E9AB
838AFEECEED5B387AD84597E133CF8E54B79142482B2FE7853B7960061A6C420
A690804BD5C18FEE8453579EE23F1785112E31C6DFD8E9EAD23EA517202447C3
43BAB5CF6D6F7B82AE7FA98BF36671859E106E1FF4CFD07444051DB0C9C9843D
A6DD24803AE523358E192532476CD8EA1F5AF507CB853A32E8C79BD210DE5D0A
FAFF0687C7FBC708A7DFC55327ECCF5FF7B2903D4081C1D6AAD4A849E20FDEE7
9F2475C88FC81DD14FDA13B91D0B53F41B0F31EEF6E5CB36F29D511B4BC9E758
B49BA91CDD5B32B1DC5E7C2ED1A7ED7569872505818B57560C08868F0F26B2DE
3A8A834CA3151272529B39F8D5EBCDF09262E8550151CC2EE509E4E648F59058
68433C0C11E5B9A2CB4F876881AAD188D821D2C8E41C1A30A2805ABC3BDD397F
3D5B215B0698D8DCA31405CD6BAC9DE0C6E6C80B24CBA35366945769918BA185
60FB4D84D0893A31E41E4CFA0E9F124FD73991B3D2816EB040CFC45DE1634C04
CFAAD333FDF84E0F33A2EDC45D93BF7A5233853C39BA13D032A7A28FD0AEDDF8
F5622160C406E4D95578B4C5A9BA10884C31535448C20AD15A7BDD386E6AF0A0
6511DF6B55DB4DA414EADB89A67351DA3A19E0D9FE5CC31E24BE49768AEA5B1F
6CF841E2AB4940EE5EE7B62160EDBB0E637A063AF9CCD4063B8984C3889F9DDA
AA2086E7D34C832FCCDBAF4AA457A9C9964544EF6666C16305389F1B74E77801
F2A7157FAA847DA5E22F00136F21273615DE6F5D6AC9BEA869A5C6AF8470D265
27E73BE19DD38D48EABABD240FB7E694DCFE132CC1F6E0EAE7BB26824CC47A54
6671F04ADD10C478B7F8D9A562487A9FAD8D2C7C928141403FE386DFAC2247BE
094A885352C70B1CECF945C46647F5024D51CD78D79C802EEABBCA93CBF96815
D121C5D74FA1FBFB1C177AED502F9F054D68CB91DE6F3A4F8E10D3A5157E4115
CE3B6A3BB452417F1D87BCFE0B4F04DDEFD817355D4F877256023ADE33D6EE10
BE23CCEDDFF45B230623DD994111A1E8B4BFF9EAB5E6E85F2E5960CAD59B4B3B
349146BE16B93600F1254FBAE5EE8C32634A369986740FF81ECD6153D837C098
342260CFCBB83DB7EAC12D840FE3260C36B0617B3A8247AF30C293B2132981E7
111A7668EB5E73730A4F8DDEAE36289936EB0ACB4D27E6C934A2155DC2E79631
499FB05BB37A730293D479FFD5CAF4D703926F1BA042CBA121403FAD9AF953CF
1E33F6EC39837B204FDD6937F45C869DD225C9C1090E857AB029E6C75123998F
C42D3E0C3F209606AE03D037ACD19E72E02132283C34E1C1C2771321F8D55359
8A24FAEA2264AD9C7AB786BB30C40075386C8F18799D10EA85E741412DF41F4C
59FEB8AEF11EC7D148412E6BAA45285638D00BD50C2BDA08AC7EB34404BF8A09
E4FCAE7D390F878368BF418BFC665172859FA935BE59F50CB9EBD541AA9FBFDD
EF1F775BE0C411788B054AA406A6ABDF05D656E52E3959574B0B4BCFA0B9C7B2
590164A27842D60CB4A26A706440E79F43310E4B9C2EDEB8C9FDD539E4754CD2
C62F1790F8A442D94ED07F5F983479E7CDDBAF985B29483003371125DE05D104
2BCF0F26E76B747A7AC47A9D2F4A10FCF32787186F2650B1FAC8FFAE4849E67B
8185BE80DBA33BA7714FD25DDFFB546CD70845323B24F840AA363C8C06EC0F4D
58005511B088771DF5DF1E54C31DD9978CF04C83551CE25FFCACC54B0D60E59C
9B85F02AB573DF6352E12A2CB9940DC68322EB5F9F132635E835D2D74CBBB259
F1F07DC7F74A0D28A92031162344AFB0255A91FF7A44F6B705CA7C0B29F427AC
C25EF78B6F2C46B77A7D53B3279DA33F642F5DEC2B384D46262F0331241D8749
2D92E8936325CF2A102222E8696AEF56F99123DB82304BC662D8D46B342E531E
F891192330E9CA13D9C379F6D4BF688ACAF9F67A3677B4E6663B305FF97E0E67
C3DC15C0E44E8010F5D4D890E4EA376FD88FD8806394F2AA95F0320828C6D740
15E47C55E892E1E6E683D2545B0EE0343D1FF764ED045DE736CB9AB28FFF48B7
9840BCB88B9ADCF8D66534EF2D7290C4F214B809F8E9C5E8FFF907F8E9C1C7A5
220CEF4378435C37B73BF471798ACF4B7AB8AF885EA6B17E6B060958647C0442
A1758652E9C06D433214EDC7DB88FCA8C73840202E2A9DDAC2DE5A70A6F01C73
BA389E9AD55F2887385DF1C5D1849CC8B148F01A786F929D349433BCBBC1031A
AA33E213BCD4A2FC290A17892AEE0DF882D6B2D4BD59189409DAE5EC159AFE0E
69AC92A40D5B289E4B5FF90ACEEC31D8370D31D967F1D5D895FFA68D10988458
AC574485620B852EDC982838D9E1250187623EF27737F2939A4EF9317A29B3B7
15C5160400721A1E213169B8A7408AAD81608F30F5A80EF9AC359AEB25CE29E1
05DE852027084D133793087399AE2CD498572B606E928D9068DBB46068C80864
59C41FDCDDC4D936C16AB41D8826D09FC683621068C667B4CE8B329D1DEC009E
1432C34D86A16264E3C87C918EB484ACDB376DB591978FA7C3DEE6289F2F56F0
65746BBED1C3312E785F15853D5704820B2AE3AA64E85782238B95B1C1288862
6EC91AE20CAF9C545DF0B9350125AA20AEA46B3F762BD799AE74F4F367D2FCD1
0CC420FB0F40FFAE9584C510FA41ACD230B1E0CE995F201352E2D6D3F19BA522
41B5991234DBC0B99FA3EDDF6A0122789BF68FF1FC2185E6C16FFD0B560C3A0A
DC8F6FB653AF9CDBA96EC532D846493453795C3CC586DD7BC14D5A7A87D0CCC3
41FD4DE275798B18130A4C1EB76659E6DC93CE0E6BC3439D68987734E8CAE22A
E73CEFBB46102711A32695B1A43C3BEFABA1B254F55BAB70D0E2007E0D3E8F61
5D9E0717A8BE736F27711A0EC4BC9CC52CF922787AE1097ADA9F3D899B52E107
11FDD60DE05613D9183CB3D6414A5D538754D84D184CE4E718AE6F6591FB7C15
088B66D884EA0C981400F4E6A2459709263D08E5683F978F0366ED661A8BC0CF
F041093D1FD68B34D0CEFCC6CFA821650503A31B0F0114654169FD5A90C0DB5F
CBE1DB82D746CD31356F4E9491F878865306
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DB1749576FC52C627F2181104E45B6D90C4CB7ED8
92F1A55E037EC28EC3EA1E403EB80B85A444CC84F8DD351882D81CF6D538B644
942B6B97679E4B3D29C4CAA8344432F60E76A279100D53E3A652381140A60AC9
E399D564C91C1B998EC74BA4DC0AA1B54D55FA959DBDB3A3D59D187984C8B19E
111895943C6CE54E4990F54783F3F12333238AAFB953188F9C9B88B7B5A19F81
62E5D8454B7DB90D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C48C5CB2C644DA
B026162A499787D099A660B6766CFEEB7FBD3285F689A85B864F9D252EAF5F5E
73E8BB70E64EEDEF0CA24784A1DB7F945DA3C9310C929E52E7F1E520E0F0F50C
287A850CB8F474F37399F7AB451FE1D956E1254970C706438805E25284C7CAA6
EEE7810D69F2428045CD609E23CE37791362950FB25AB2A10AB693413B1AB7A3
5B65D857089968DD4A6A37D5F26E8EBC016257E8F4D3BDBF3850A455A4BF834A
C254FBBBDC95998DEF2EA825E3BB2AEEACC0F30846E22536AD74B6819A058C9D
D483677E091DCE521CDF390FEBC79E7F50D3DF9F3E5B6EB1E7F5517A860224B9
ECD544CBE2D7C6FCEF4143E50F9A9079DD2FFFB1672751D8A658C45E07B9558E
776E94EC0991B31B7DE95F23639AF5C05AB13D5A1C28A17DDC8EFA3F3BBECA06
E09D438052E27B75787AE81EA98B34D8DAEF36B9E5DE1884D783C1E2041480C6
862C5CD0D47E24A2BBBEC8AC451239E34711ADD347782194D0FA7B8EA68D5671
095566DBB3F327C441B2392BA948E1EC46435ECCC3A6CB7A5F2F60CA54F14A5F
F3B3F2B3A0D09C2E80E84D859005B46DE826491E802DC10AEC6FD0AE1C3298FA
99C53536EDED25435CB78EF0F4A8EA38C1F73BB1572F7875CC54AE4EDF1087D5
254167A21EABA1D8287E95DCD5BF08A1FFCA11B8BD493853D06B8FC46751A568
9967512AC84C42DFB2D9C47204DC605EF7BC00D85F75BF5F32B350E2CF46BA0E
8D0120BF165A428CA13FCD6B0686B1A34F221780BC3FBEFCE27843EBC897ED2C
6EAF713011776BC1FCD81EF9A29A807BE4300283AE5AC540D464771454AC4CA9
2840DBDA7E1B7B1B1505B3F1266FB8568E4BFF0410C0775643A871CE8580556C
16A49C4B4E8851D93331FF3001E75D64C777FBCB70707F4F0F088114534F6D36
E4D76B65F8774F02A5CFE926BD4891985D68CFD7AD774BEDD19E816587D025EA
6DC053011212523A5C86E50C82C0D98D851C9629B978FA10CE2AC0425C783999
1B2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C564E85513A94BE894217
DECA2F18BF6FA92CFB8D535B2D1B67CD3CF5EF4349B3DDDE8CBDA5AFDB246485
6F531DB9D7ECA48701B5D4511FF86644AE56F46392D9CF48393E530139BE17DB
6A1EDE43613759B68D109146C4433B990B0AB267D3837F53B0DE93BCDA243268
E89D1BA848F9FDECC6604E7D488ECF152B694939E28D488E75BBF597DB49E3F4
2610D596C1D91A878B4A2648506E87CD85E84C54E47C448AB0EECCCBC6EC8E82
6AB2BA27088CCF6A8F90D91ACA913F1D146B2E267EA777FFD62509810B87C552
46B60391D5CFBAB7C1B86F3EDC61AD43FE9BC177C7DAC8DA44B2655D8EC9A13E
235F1B8C2881C0B52D16CB8A3B5D19876C830FD788150D82EEA9530D185C5A01
2B4AF8FA0D43DB3CB9F83BEA96C9925A5BA00548A3141A3981955A3C282A4089
F04CEE35C0B41847C41C143A8ADC78D79BFAE3A811F2D67B799250CAF1112087
3098B51384447951AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0D339EAC1935
F8964877EA22D9E5D4256F3134B7F3A62C11FD1710119FDDB6C7098134D90F8F
B896D5153F114629439E6B8AB2B752FBF5AD056EF2A9AC6BEAF4358B6F0A756C
A29721D6784A86F3E68670240CACCDC5124B1D4E67DF3C21F1D051AEDD11F65F
E0F14DAC46EC88F3B6577184B17C8320CA028F402E9602317FEE444EA33B01A2
2F873D195661CA3A1BBAEA7BCB4E465DD4B94E0C5EF66E5F4252E5511A19172A
E7E16EFC2202318BADBD95D136728FDC1F3B174E3596DB82865BF5053CFB253C
24C65B5AA6221F458A151C340C5A2F835F9D0AC73865D83810A3A6B72B91DCC5
B8A85AB8E16778C4284F21B29864E26D31511F85D2D2809806065D2034DDAE9C
7B38F502A82A0D35F24B66D798F61E9D66510A1A86F80719F3D684436EDE35AD
601627B61F029D08D9A281520C4A3B4127C06741F0F70E1A55F20456933FCA64
CC1B060E260782BEF6721C7F108A0C2CCBC094031C7139367941CA39AA6DDE23
8ED59B3BE653A80FE9B5F613D694EE004270B5FFF26BFFC184A3C6A182563FA8
F8F6A0A210405C9B5CD8796AADD16EDF3BB714C5A037F58DF43A39DF4F494455
37B8F67721883BB280365F5DA1C9A7DF298B8C2FE351292F1C935F264BC41873
E40028AA8F3DD3F0B1A291E4A62D5AF6B69ABD9CFCCAE361770F7112D35E277D
4D3FFD95F32C14424A2B5AFE307C7807A80183C5E50DA12BF2F08521A17641A2
F5541EC84195149F6D621C746CFEAF186B9198AC674D0A76D7A11670C954A449
EC4E1C006ADFE2CCF08EE40B2837B09EDB5A316F841806A3EF9BCEB1A196F940
1A0C475D1D047809FB018964439FA7B3877858BBA8A26697C5929DF471071938
6E4581BF1493794B0660A2DE342E973DCE4F22F58D24B4AB1D4492ECFB3F7AF5
C3ECA837029A45B27572914CA4189749A74DBB0EA1CFAFCDD853C87668F76D42
0E78726B258206004BA387FAA821247D20ED83336504E06A82A194C7BD042EE9
0B6808E249327D58E53663421E0B1356D7C73FF4178CA4DBEE8AB7684BB471CD
800A378306459C022F4127F2E2207BA5EDA5BF150E373526CF55A76CC97FA47F
FDD7D89F79716527B77AA521C155CE3B0F52E354F0BA788AC9BF66C3DB5DEBD2
71270A478AED9640392137548DAF2D6476ACBDCDFEFC8B7BD24AF41D55196DF6
FB2F204F9812F73D55BF7E9EB4330844CB6AF35D2AA9116D7B649FFBA7CE880F
D80F40C3AC18AFF7308E78F05DB84209A2A06E998BC239F96D24325048BACC9A
BDA9206D0AD26400D878FC92B08DD94FDD0788C9F699187671D845C8C43BCE9B
25CD64E26B57F1DE47D6F9DAD18BE66178622BA86B74865A45D3C82058957883
B5D74BFF42EF404D0B72EC09A99E846384818A44E541E4E108DFE5E1E97F3BD4
57397797B1F5E1DF730CF36E7E0DA7F98056197888148E53F04D4CA153663EFF
8A63016F79C7D0E6C9026B336804C9D88F0EEB0C993216CD336AECEC76C0FE3B
7D5966A35557DAF14A4FAE61403855815D8F7983522486EA3FD2E3D8B66473C7
4888BB0C5CE966D64204063C1676C3926651F5B3F8666E369D50682A921BA05C
82DC800F7362CFA24BB2F3D4EF7D39E1902C53053C202C978749A095671A46A4
D8C410705B100FF1033BE014B7CD8C2DA31500445B3ECF6C6035F883EFC0DF2A
A75EA95E9E898B13ABCDE7322323B3A2A02A0BF388E89B4DF41069404312289E
AC5B98F664803DD7D474A5E0C3E67E8FA0B18E7063D7748945087CFF16DD1DFC
964B4C27683FCCD1C14AE308A9DE8E06E047C76391ED93D9810851A03B9CA089
F7320D1B9BA214E43E83C1FCBECD573418C920277639390ACBCB6F9C5C70E555
DFA1D8EF22E7BA06F33A32C37D7C00D1EB61E25ECB12B1126317F7ED54C97748
1778614D372B043761D928D66FCB9D760D333DA34E243D08DDBCB12F26FBBB8F
9C43DD7BF7665D5C87EAC07887EB84556F43AEDEA439FBF139A16A55342EEBC9
0033144207DC526F24B186BF758FFAA8B678DF14C6FF92CF8BFD11AC59DFF36C
25AAA8C771A83D9CBB7DCADEF7866486665CEDBCF387F67EAA68EC3C5832338D
9BB698487988764781797E2E36F85B97FB489A5D5A12D536115F01BDFFB5EB6C
F214440E4DCFF294E01915AB0165004E47F96B61BA0F88E99544E109918AB0BD
CA908DF6E9A1CAB183E05EF9F3644BF2530CB119078ABB982C5CFED39BC18430
53FB2909D78D0CC5BD0202C8FB9DFB22D48FD50D1EE2A9FEF854CD6238126A0B
323E6E81B31C557A7D64B43EAF4ACBAC482D06AFD458F0DC3F4133EB34835C7C
0E2FBEB1656E6DE0718D62481CA06AFC73449B22937E48C950802CC7B24EE992
477BDAE8844F739EEF29A005231D03B51D3B5ED98C6D02341ECB3E8092A4D59D
6E77D53634C137AE6A6E83FC0D04CA55D14265E0FDAD510D721956F7200EAE8F
93ED95AE429D7CC8C0EEF48029DB6BACF364CFE0BA0B773753BB577FEC7FBA4E
48F13599875048DF2F55ECEBAF8931ADDAA4018FBF2C3CAEC235BC863688B43E
45786255A4DC7DD81BCB713697BB4AF64F4D308793FC1B34FBF5A82D9A43BF12
78F17B4CBF6DAA00B960B965E9C7F789DD05BC0945446259B8B0A4B09E56B245
38CEB6AA2DDDC988D12BD4E208610DFC26A600CB272F79AE07698A0018620539
FAF5FF0CB60BCE7A4975433D1ACFD965F3C47D22B2B8E48DD5EC60FB40476AD6
E7850D0E405AE6523DC0CBB3604510D14FDA13B91D0B53F41B0F31EEF6E5CB36
F29D51120F1A78999867C5F0970BAAFB320F87FC5D14039580BCA0C820277639
390ACBCB6F9C5C70E555DFA1D8EF22E7BD90C911C42005B99D58516FA232E661
C7AC66134A730C1BAC007FE16F87149E876229B1D9D79B17F2D3ABC764266F25
BAC550C282E77B265156DF6B789ECECE188354FFED7B26992399F7151E5B56F2
25D5F360452FA11A8A4A7847107009B163709687F03E8904C670CBFF1BC3FB7E
81230D0F8A676B928A8884081996FEA9AEEF4208C6BF8A2279E9B01C3D7B00ED
AD8F622B8166EACE5F1F7E95016F858D6608F304E3C1B9FDF97FB541A598466C
BC731C76FFCDE3DC72DFFBE32D06D800F52E0882EF078AC20504D9C77E08FCF1
01D33E908A71B94B57A71E9D0E75B54A0ADEC289ECF7C91A46344E619A84577E
90EE8158BEF379A1F1FE5E41BDF8E59075D83082AB0165E301D00B20DAAA10AA
02B9A6E6EEEC07FD93D19F9C0A6B2EBE3165BB4DE936CC3A4BF19EA1C5D6C0D7
9F9DB3B7F0D34576D44A44F108ACDA4E402DBB7F245AA757A20B573E93B7DBC1
3E8E66984826F1301300FE37C74CE4097E1C142088443C22628E66F9D36C8B39
6B58282342412B7EEFCE0EEC76414116026BC6FC01CC7AB541E85B3C974C1E0C
593449E31AA562B4741A6B88834D87621FE230CFD21CAC6764484364FBCE6D70
1FB389257B8BC394FC2BCBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0D5B1E
F637F2B625D3A4C5717F7AAB0EC6DEB96170BC42E9C0AA97AD291A3032F4198B
12D0D7A61B06D63389A3DE8DE54897E8B9F0A0E73300686A2EEA2E5002D7CC42
9119063C790D6986F72167A7B5FCB735BE5857F22DD9BBD6B1916CA2E00321E3
409DE3B9941C7165AEDF16E014C1FFB37751AB5F9D5F7E685C44F5AFAC1CC00F
6CBB2D50452F80C93A84675B71AF94DE6734578EB4A5B62F0BBA64443EB7D0F6
C3883D195661CA3A1BBAEA7BCB4950B83A0773D0F7BDD47F29D25A92DBA2AF88
984C142F296F5EC44CAFED396F68A43C26BF138202E62D84800765E74119F5B5
3CCF11576A5B3D14BC2AB8ED858D43F66DF0CDA1BD5C661A4788A758181C6C21
3A2A51EF5CE647E9971FA87911950FD65E90E3CE3A2F684C07F20223EAFA0A96
C971445D731DF9B83A7A1136A9CE87477940047E4EC37FAA311671BCD21B2926
BE4C650BD6D0D1ADC7C4EBEC25616CC076DC7279B83FA125D6DD423540BF165D
4AC10B712825A46A68EB78AA3D2C058488C29EE7524E942C90D9FC0115D85BD7
B8DDE271A0D13042DBFDC1FCE6C5279097919A2254314FCF21D618A11C8FE5D4
0D30BEC350358D62B7B015A019679B0B8E742902AAFBCF4D4AC975ABA0286FC3
1EBB7B819AE455CB993EFA453C94914EBA348614E3850F73A8B2C5B0AADF8AF3
E1CE6D032BD2BB1D80CEED73812B66E3738E8F677979A1564BF38BDB031830C2
A5366F8716DC33D8AC9B5BF5782FFC1FDCBCA6456FE76D34AD5D4D314FCC5389
84EDC70C0FC586E3FB319F985782FFEB05794CC8977E665AAE5AE150D961FA70
CCF2A9568E3A47FF5923031E7BCAAF3A0E143415DE40C492F1036351910FE6B9
3342626EF819845D63ABE36CC2C0C7204BF83B4F7349ECC5BFEEBEE4CCBC754C
D04E4FC6B1E3DE635362BE899C415584C1F2BCCD0BFAF40BD9C5A8652C95246A
640E9625BCB3CB6C9D0F6AA91AD38D69132BB3CDA70EDC5342656C12DD50C531
6C548AE06C27913E3DF2FAB630C7A12F545533847B233CDBCF7C83ACD62213BF
6D8A8C77FE8B2061655020DC0A92111ECBF02129EE8DF16E063B7BB9D3460685
F19031633A7155A83360304FD4175BBC50F3077109A450059DBB3994AD63D63C
43278C28FD1A4F07B8B0680809F32670C2F1A54555FFFE67565AB5DF23A71731
265FC524075ED47DD6FE8909C387D8F02A88FD24540AD7195A850948F76183A8
47F202D77815ED3E8E7869950B26B528DF4B5AB8E1B0DC311FD77D52210EB207
3CEB06E5DDB36E5A8032FCE0B50CB70D4F7E3E5272E57DEB9A2357403C2477DA
990FC58E46BB65AB0676A40A8130F05B1B0E50E6BFE03965204975859AAE67B6
7B37AF86DC4A75FAD4A862142B7A895F9DB67F41582D0C817460440E9E04977B
DCBCAF0CCF5D22E677FF4BD649053FD293830C4EBD3CA5719BB456D1AB80B6C8
0C550CDEC09BDF5FCAAF5F4DA7743A09AFECA6DC807448B48C85E46121054F17
F4288E56438EE91BC7297A8469F567938D322536CCBABBEBD4A514626C26F052
A95D65D942ED54E36A6C2C3BB0D89232567FEF3D544A8F9B896303A47E29FB09
B4ADDBDFD0CB0D5516F615FEC677A6D52BB7D6B0C6BAA0F25B2A9F922A4995E0
83622B36DEFFE1A6AD802B4FF775B6DE6FF9635DD8C6FD508F211931143BA01D
7D099985E73099943D762D20ABC42DFCCF4ED0E151DCDC6D112A08E068177852
1870E80CEA2A87AAD5CC5FB7E9D3D3D31B8637A7FE55DF98DCBE9015D4A4D35B
006CE68B3D19FA3B61A759C707BD7DB9FADF6936E97D67897C643267D9CEB295
39BDA71BBA7E79A8A11520BE2B47FA59E78C28F8C83803992132E16AF8AF6D02
B1B53941ADCC68D6220A1C15988847BCB5B01B04F5C3A01B3BD2439367DAFF1D
47B7EA53FD3D3ABA9F3CFBF0C0DE305E7AD2C9014001A032465003A5310E0401
6C3AE50698C63E3356C89EDB5D5B8AA2D56A311120976314C02C4D84CA61D0D3
F0C0E7EE52EC5A8A0AB9A574039A5B0B9E2065FD7490C7AEF418EF47ACD12550
68A21969742C55D97F1DC437E05F76B3DC275C95EE5FAF3A6D876536B55707F6
850492FCFC8615892C4304686401B0AAE619F7F850A966E7BD19641F47A05F49
CA2A65E0A3E935AA652C0B7305FFD0D434E7C0F668AF758C46B5E53F46EF2081
22D8CEA87738923689F96FA3FA86AA4C503C7CA2D05701B6A0861F56A5C5F8E8
DDD7180F306DF16E79A2D2DB98072CBCAC6DCE622EBFF358E63D9F6000F11FC2
357FA3A8BBC91CECA3DEBEB081964C6150ABBD5B3A4B88B8F2141AB69CBAB904
43083A74742E895C8B2BB07DDA99390B706F0403DAFC454A30381E07F915846D
BCB2C690161DD5A7476AF4893C6475A474561B6385530D40BAFA9E409C73D39A
BBC2B58D97BFFDD887380109216561C53A75A5FB859F2B46DF97AE05915E791F
1CE849154C53C4403B43AFDAC96839397CAA9C23D0F483D155FB93C29415A779
57BC905B9A03FF4E214C11868573EF080958074403F52A37C14EF4FE416F8FB3
B918C454BD5774AAFB265AD654FF066474763370EECC9E1E60195986EB4C4BCB
3CCE9879E4C129CC139E86E1BDC3F13FAF7100C965DEE0BC29EC531D24870365
A38AA8C5EEDD3B4748251058487B73E9760C57EAD7CB37952D1A0E9F744FBE80
41D7F80AD445AA4B08E97B5BD3466C6897065446F7653445CEB58FC5DE5224FE
992AE7CB66C69DBE7886D7ED3F27C3617B84B6EAB895BA6138753EF23A95D41A
8069B91AD6161F18BF75E71B5B6E7022B99AA55C94130C7A4AFF9878DCDA9764
F56EC19382F2B86AD651CA2B01DB899DDBE0D0A526643E1D0F81D86CB8595D09
B1A874789AEDA31E71A915FB663A04001D43A504ABC776456B69DDC90C6D7DD4
C2D071F1C8E049E657F5F14377D75506A96CEF9417BA30602EBDBB815DB99556
9B3E9E6F95C41DEE629A189E9D5FB2A75DD37A909F53C828A653E838F10070A8
A262363543F04DE5B6F611520DA4696FBB73F3CDD7BE198EFDB35B3317308967
A00EADA8A54DD0385F305D14E32638D350F86FA328363D1B4FE236DDDD5D327A
B239D9D6D92DDE4B0DA61C03BF4360FEA49064FDE911D77067C20C6F31801F82
3E6B21EF61C7E869CF3B0AF9B350452810F9349B099A38501F2314DCF08578A3
0A60020A6B80A374C5060D0F0776BD7EBDA80080E3B3FC14BAF82BFDF274D3B5
576966137E9F90AA3CBF50D220AF7255387FF65A63CF2A927E5F2D7313EA2C56
10209DAB5B6A9150337127C6068B9C79A4AD5C1991F7977C9EAA35431625FF8F
D008BD4402918043BEDF77B840B2BE0E5594243F7D9FD8D8EB4A878F25A58C92
0D0FFFD6FB602792243EFB20D792FC6BA87AD98A0BAEC9D3F17AE9CD0CDCE693
6425CD45C0A5A4197BA038ADB36BFB0B0C531E479A988692F0931B645389DD9E
EFA606C7C16504F882FD78BCD95862F2884FFFA17C26969FA7AC28A6FF2DC4B4
7B3B48AB7AB10734FA0475D4AA4CCEA042816BACB5C7A0775CE1A0809D5C2979
D409E4D68BB6DFCA01368E371454CFAAED3C30CECE4FD7CFA6E4BD0ED071182E
6129ED82B2F9D5CB5D32B93F2CA8FA546DB1A5A2BF321AACF862FA731D18CF33
BBF61F01565E3C825B0D6146CBCF1454CFAAED3C30CECE4FD7CFA6E4BD0ED071
182E6073FEE4C6B0BF4F58336B495790F2A96F1D10C8EE6ECE02DCDCCAF5DC69
E296AEB1A806F0222132EA46587E2AEAA3B904112140552E1280DD31317A2394
86A2278F0FE2AFF4DDD78DDA83C237AF564E874A8CC6004D041C55CFAF405F47
77D344C4ADF44538F045091160DFD4AA29DBD79382F68E3993AD0B93A7C03D10
20B9FE9F780E3D55D993744BC84E03D6F2E5A5B2796AE96053CE2780DC7750E9
7BD02496F62FB0778169721B3F1714B1B621965F59F2054FAD9A3878CFF50032
C9215ABB00DB8951CF82013C7CADDC2C3309492A3DB33F8E9EB23EEB04AC45D3
4A294115CB01446379D93A84DA7DDE692830CEEA2D544889141651A5DEA6262F
D54F422E7F9553C125FC3B9DE248268FBE788A4214863168A679D4FAD134E4D5
6178F717E6E7FFF7B1BFE2E98D872573C86536F65E670A06A813D9B83BA91C2B
1EA4B102EC16763EE0F5092CA5030AF4FDDD9069BEA6501105C9AB89E142758E
F9A36F77FFDA9116B4E8CBED2FB8719044CFAD402ABF220653833437ADBE66A5
3BE748C4E76934D67AA367955FD34BB7546652435EE004F57D417428F2ECC729
EFB3AC2543BBECF09337AC26BBB0E45CAEC8BE479279364FB841F44BCD49BCCF
B65347FD1767DFDB6F85337F7B399827B86434053FC7DBF813A96D33773AACD4
000D71140AE06EEFAAAC0AB3727E59F1642789A1765F02944B8E689AC7626485
E1467125B7EB3C9EEF561001051A26F3196E2238683140701ABBD926BB41B1B5
31E491065D57658A2845522035B2875A44EF7DAFEEC6B06D7DB4B3BE25BB29A1
BA5921AA479B5B48F87B63E0A3565639CBD91D4DB48EF838AAA5C53454E279BE
24D3DEAA67D8ED7A01FFCACE2EF9EB9AD584935A58676976DDD2B6E118FD1D44
E863059495BB77FF54F014CC293B27057DE8158DC15E40A40D03D5DB93CE19DE
B7C60644ACCDB4EDEE8DBECA784878F4D0643460EC9526C92A00ED348D40DD39
B82DA68451233CBF49B756D42FA0CBD862C56A5046047DDA8F04FBEDB4CA29BC
51FB2BC0C62CE1B3FEE159A7BD1F296CD053A5C735EDC975CEC40A46F5AF536A
3AD35E6AF31702C467B05AD7A7A7BE352CFCCE52D9325C8BBDEC3C3AC8E233CD
F3BE813A9E2555122B46A03394E8950F77701729711369CEDDA424A9E19BED13
D137DFE3F01D46DFB92C897D83ABBA76105BFF7E7929B8B36A0F3C383E41D33A
E8B2BDCC9705D1EC8848293ECD9599CAADB70331F694CC96CF93B817463535EC
7FE247A0CB0AF5CD770D3297414ECD1FEF73532047FB1478F8554CC724500DFA
E395E68FC891329882A2639575674B2A47C068A119CABECCB9206CBBABDE8C4E
5E6E6B61FCFD3C2BA11D6C86EBF5CDB65E8DFA20E2077404B83803AA3A4643B5
F81E0A22131DB04E222FA8EF0F6A31B9820C7AAF7C7C9780FF5DF5F69DCD8FB9
2B332FB6509FC3FA395199F80BAB0C5F04DDB4B27952C3745B76EE5B168F047E
593066E242C394C0B30C2D8210846A85A5E58EE0E7270BA2C6CCB305D9C4587A
C495570DF9C4F05525921AFF53DAF38EB59E0F97561179C2C0F08E832E2DDBE7
C66ADCEC06F5567D31B488B661F8C45EBD2FB0F0EE1D4A21068DDFB24433BDD9
1BA70E84115929BB08D42023B94C5E08A7C457F254438F234303E15D8F7E4DE0
09307129C044539DEB57AA3DBEF8671AACC34F3E4C8B7F07ABEA1BAEB58FFECB
7489DBD42DC2A12028ECAFDB6CEAFCD1246A7E4314E83E34DE35A5260384175F
C38213E84E11690039F50C12725A14BDB45D92379CACEA43CE73C4B7BE0ACAC3
35EDBFFDEE3E46DD584F04936B53C3C81CD9E76B3AD9F8290D5915969AF272C2
205E542ED8737891E67A8F5DD2C3154FD5480E88E9BEEB2499BF34A46C864A46
97B0DBA695DE4E68439B79B33FBBD44312EBA9063EA631195BBA0DDA3F3F7061
C15460E3C1BC8E20988FBC4701BFB8BF3EF2C1C6DB56FDEF4190263A01AE737A
CE2AE4620C9803C3D031ED3D5783185B69DF809544F529194D26EC7B74F1E8A3
69DAAB3305C440A686E566386C4E57F619FEC839F4D48736977F5B21F6961C8A
9ACF420E7E30E44365D3319C2134B46322F7EB16708D2BE2CA02AB8E0D0C3E8B
D00B108257F92AE1869430C6DE57F020DB975DDB312011F19F94F8BD632589AF
0FB8C8BABC8055031363EF056B5D65444578CFE08378B1DF7086315EB2163A26
AF2CEB9E359BD9E5E92EC8F6A19066B51C2FE1678EF11064986DDA53A77FBE2E
DD38E22689D398BB3667E4BA66F7844A77BAEC87EF5053D888D6C101B6CDE17B
92E526BD45A921C4D6D0F443215273F91C3DC8707547AA2DEED29B985455F21E
95225D7DA4780BE7588842D575C429AABA86C5E24DD1A399C71785CB889E27F0
BC2DBA726B307A8EA9890962512B2DE3CC959848E590C4551EEBA36E8B8DC122
B1432A6BA9A8A674CA2D5F3F592909AAA8F44A6BB4A34F1C35114EBAC0B0F263
ACEDDF61DD3D0917C1539A5DAA9AD34E7134BE594B65D76B173700867E2028EE
56949E915B81C56CD5055CD7F5226685F558D0EDD67F350C9C4105F867E2AA3F
10C3D706339772D69BC62743F758B67B1B1C6FDF84C9B2E9E9B298B465EADD6E
0378A1F7D1A254FAD9F125B2599B59AF47877A82449559F4602627CA0932C2B9
38A071A719E64DD2A0A2F32C5D52B15F9621BA9E1688463FEA43F7297131115B
4AF2D9DF46E1E5B36E223885BB7E1E8B28BAA3232595A07CBF1BD05B68870AA4
FE5CEAEFF2DCF00526FE36A64F79091E373D27C0B88AB5F039A24FD0F3180EB6
F316B59E7BB99EBC7521DA5BAEF8AED3B848E230572F14524F98584ACA795863
2CECDFE1ABA0F78067D00115EEE8DEF5E7410B896BB3E651A8C015BE75966177
9214401C2C0A05FFFED46A72C245F7529B8EA55A038A8A1E77BAE6D06BB1AB0A
EA89B6683EFB7343EA55CD37FAADBFC6867B4BAB0208DB3C5DD474D8829CFB02
6CD35422238CB8CE62255BAF0145692EE3B52643A0DE3E672F294230B9826E63
22C4D6231EFE10719E907FECF47A5C6D76E2B23333ABF27FE159FEFE89CA6E88
F43E2C8E5DDCCF48393E530139BE17DB6A1EDE43613759B68D17753A29357D3C
3A6403B9A7675DC69ED861AA0478A60C96485883BD24D106382A82EF4900A178
29C8A8DDDD4AE47E5F846A44428053C6C606216322B5CB00EB11973241CBF09A
C718F307E80B29885BD8B971C8670EB6567ACA29C72235C37392697AF95FB4F1
AFD8CCF42255F331C4FF7FD0FC8962530A98376BD26C39075D9EC1A987B85615
7952F4DB65684D6CD4AE246EA88B6567C07522C696589828D6CEDCBECA38F7FA
E8C1363A6CBD8AF8B8B82AAAD74A6B73608413B8369365B495E9EEE5FD08FD42
4F1E0FDFDF3F6E03A90ED01EDD1A46782159CD55630124A2A344AB66411C9853
1B2CCBE9FE78BC1AE4D4254787156300D914119D59CE53AC7B8F718013E92256
1CBF76BDAAE575B67C26D06A35A0D394EF1A332D55D8641DE53700800271FBCC
D9DFAAB5E93F903A8FEC0119ED18B7C08EAA7D1909D5833FAB8D6671564F796B
070A2B371E3005BFCF09E533CF65B356A8D902BE94A449C5EB8A3B63A4E70BE9
D053F69949A8E464ED478A8E037FB1309B7A6A7FC778190DD5AEEBEF9B6A034E
133314CB5127107DEA1344C6E44869135113CD900AC1F0F5F458F5034F43D570
1AECD409DBEBF0C9E95509BDD99A537F5C974FC5505CF6EDCF2412B0A9382D7B
9B373257AF837DF7C393F64BE99AD5D15052BE4101EFA8E39744C2315DFB588C
F4CB885E940AB179C9355CE53FBE5B4786920842A92DE5D9D36A9AA32C283B25
D9E35BED54243580FCB2E61F1E46873EDDD6D5EE7953B988399A6C9857B8186A
1963F7B741344010B345394F22199DE571B5E71F57DB9E12622E4A7A73B41920
BA2F51F6627DBC1F119BA6B22248DA2B391A8E87F2C6E50D86A356603A8642D8
BBA038A739145A2BFE6D055580AF134B7DDDBB9BAF94774040A003EDDC21219F
392DDBEA601D6DDCE7A8645953235A1B19A9C0B0BB98EAD3B5ADABB830C68513
A5DFAAB2F6E691099EF8CEB0036F32181F4A5475392B4B1F92B247446CA5597B
EAFE42535A8C88F9F1937BFB87FC8AF3376A38AC8D43CDB3A383FE182EE89A49
C28C2D635A28DFEED16CFA4D5E4A384094A1D84A98A21BD69CF349E99F848A4C
95D7EB3F7FDB5E41BB1C0A46FEF16EBB0A9052013A587AC9523706FAB55BDEF2
D9A3B50D9F5293BE9660E920F82C8D6C46CA36C01CECA219E2EF410CF4A72DDC
3DCD6254C0BD756210F38F01D757B83E2090337859341376112BE48FE6BBA3D9
D06A0C77112AB99ACD73EC7A7C5FA2A0EBCC7E875A641694AAFFBAFD9547DFB0
345DD1B984860123DB51D12DCC5FE6AE3B89F87E115F5DF7BA4AF93B4D5944EE
FAC690FF1C17DA3D4B6BCA8CC6A2941732B8C31799B4E67102E1628592D5D67B
C8114CCE47E44D3355621E4291E8B19372375C5DA4CF8BC684D59F65F460EA1E
5927D4524FCBFA7625C922AD1FF0D05657A77F77AFCCCD82CFC289D46552563B
36DA5DAA33C9BAA665D56A05FE6A270625DF8ABA04200678179BE71EAA84D69C
E8C6203A71CB424C72AF75C1818F6A18C9038E3BC1299256E1D1E4EDD740CB6D
461FE1CCBC3D60567E9D3EF7181B20F534678934A4362DB20B0C8089BA79E701
707CAD347208550DF890CF5924BC50D349A73787E125446E5CCB325BF943C3D7
F32D49651F5744A767707EC61AA529E09D262A841CC9C1CF25413ADC7FEBB158
0922A191239DE0D26635EF19DE46063E625CE2919ED902D587BE6EDD46E091C9
5E57B5C19979E675BADF2FF5BD15F19CBCE5F93259A6C4A8CAD50B9186BF1464
B59A6BE348681CF88CE442026AA09F828E59584BF2C4D75E749EE3C9A2EE6055
14EC228BB66A22545962DDAEA5BFAD178EE10572D29BF719BC6C31CA404A9C2F
3980136B4825CF63C13B40CE21656E37A0FCB6836AAAC07BCFBB26B2A8CFA3C8
6296F768E749F3AA8A56ADCC26A31FE2427FCFBDEEAAC67F14F71B450BC562A1
95E9F1CD42E7EE23AE4194F920986C6CF3A993077C0B2501E3E95B9672042C54
3338449065A454F82E6DED15B32E690092EB2420B6D9F5E6FA1855513B7131C7
A04B00038E4F5E8E26AC74EE09527348E31E31545F0FBAE0813944CF1A81EE3A
4373691772A120BEE77098BB898BAD2174968488B406DCB59972FFBC57BBBB49
3F2C1B5C38F173A377099E99F717FAA635DAE480F40B36D3154B85F978280E22
7A1245FDA84738BE165A609F79CBF49D51AB8BCCC1A672B2BFBA84A84C9BC409
3E2151EA61F538857EE9787034E207FD3BEBEFF03973685DD97F036BD60D4E32
181A0EFAA41BF0A7F27D2A274B1D654C2683E8F0DF6444233BE72E4B676F7A21
1F72225DB3DB146BDB01C7E88F672F6E37605D7BE1D821C67C6D1B7D6DE18064
541C2185B57B67071A8CFBB6CAC323167D9D96DBE2AB5428094C37B2C25CCF3A
F3E0E78A42FA0F970C9B27AD62347BF02FB21503D2FBE78C1B07A8E09A3BFE3E
B5A5B70EE00D8ACAE49BBA679D9E0D06BB86BCA7E5FD3881744B08F6CFFCB789
4DD565CCF14EAE6264E06D391FEAE0D9A6426BF0FB5A606F7A211F72225DB3DB
146BDB01C7E88EB07218D82EC626C936209AAE5D9735BBF8799A87D12607D361
FE8C805163A6957DE6AA4AF7FA6963E77AC9A423F0333E981166F8F5DA8E7B44
48DC3FBB1B774C324AF6862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57A77E5
046A4A17B5C3E9DAF063B335EECF830F146463EFB387A53F157BD60FAD744915
3823E9F7778158B67FD318FA6BBEF386127BBDB53D25E68448A975CD56BE0A96
A497963436F1B526B5A4CF3AD27EA5CAC1BE4E5AD2BF141E24BA210DFCE1D138
8FDAA040A900CD88D739CAFEEA8361B68F6D0D6E11B3FE268772307DC168E01E
794A180B85422DD886BB8C53B28E48E232FE7D29562B3B0F2F3C9005DFDBC7EC
DA793F537AB616249B0358EEE0AA25B669AF5703F015A210D9182678AF5F984D
EA53961E820CCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D27AF3D0B4
525D7DEEE210A4239DA49D23EC2BB5EC926970D31963A81F3099074342B9F995
4221EF653D3EAE803DD1D270D5456DD52043ADC089C9F1CC96E65C4341491984
C107C8FD9285F08FC3C879AE6D42023BE0EC35E3584D0670E527BC95332D13B3
980549FA02073BC15B155E044D8050BF7C551651FF922639E5077C139E3A837C
35A8D8A8E583D3B87C35933A35DF08B512C2ADE26B7A2E77207E6022E9D50B28
2B1284DD9EA66137C2960AEA8257076676FBC638F830426328CF13180FCF1524
2BAB9381F5E959095F3F1EB907D1413F647D905576F1318A0DDD5C6C2F44BF83
2E4D54880BAF264A44318843E37328644C3FBC75583A7943ED882DC2C6ABDAF3
8CAA2B19A756CC045D2E919084C7D490D88689FC1180B0D18B9D406A0635F4D6
0C3D5A5D5AA54D4566C36A1DE47C68F80E54D3E6F6B2BDA855EF11E75D72EE35
A7F1FC8FDC81666C72993BF21DA93935F90595BDBD4D274FD42F121A21B8EB08
5BAB7D12B3B5F1AF9C403D65CAC4A7A0CDBFABDB4D358E8B8DDC32EA172A2DE4
E8A25320223B96228905711E015CA1115B60CDC9EAD5BD6FE180816127DCAB6B
9C8810A52BC5F9674D286FD002DFA5BB313F36A362D3FC884E32841E6BE12817
A12E65BA65C7CE66AC6BFEEAFE31C8A721C2D46AA00C10681BA9970D09F522AD
91E52759DA17CF323880E5EE7E183DA41EF7DED6C7F61AD6925321D4DD76E461
E79B1CC4A0564E9D7A41C3BDFDB730DA86C9CA2049211DFC67FEF43680759C50
8FC6D79481D91814C47A0A3BFAF7465542D6822F564D169726BA926E6A7AF094
A1F9CCC08D01256B7CED1EDB959E1D48109C2E5D22864BC6AD983C2493CF1748
613F298E07C3D70161F0724055E78899DDF3BCC34D14196CC4BE07D3031D08A9
591029380209D4C769FD636A4A1D08039889DCE822D58B48EFD185C651E24ACD
1D0A7FFAD264D2AE5F9560C3190AC388C4D02E161B1383535A429D90276FBD02
0EE4F28EE492DADDE9A7DC2F40FF95BAD9A9C17907788ECFD84AC599CF9C38E9
18B17E14F8728BD62E45FF52188FCA5ED5CC9D1A8CF9027A5F84AE683086D34C
EEF0FE8FEDE01A7AAD5D667300F07CB0251E2F245297A4BA42AC9083F142DDEA
2183744D33C42E540ECAD829C4255C893F7749C4E7B6796855E211E6751305D6
9561508B1E19EAFA4C676576BF1DAAEDE320A0520B3B46F772B5E5698FC7DBAF
51DC2CBFCE0781919E031A880E3767D8880357E5017147E5372F54B764A8DECD
0CE7B6FFFBEA22D61456E974626482B4C2BE49CDD56BB91D4D1DCA305FD1D602
269C73C8B107D49B98E5E0C4E46DF62197B85088749F3CAFA40A6A3223D4CED4
95D2E481273DF6CFEB55341D3FCD1B53E15238A93F53D2E881629E37E9038CEF
C41BA172055892C47614A9035E7D8D6115A4CEBCCB7E1BDCE1C7CD54907F2ED4
CB1E9D646712495E7F26989BF6328610AED78D0AC8A6526EA144E946A63B5D92
47DCC59E67DF990210DCA0B584944059773DE69E1FE68FB06FBD58BF563372DB
D30BCB727C36153A1E8F2E42D4D0358B380BAE915A183A8FBFC7A569BBE3D2F7
F6618C375D1EC39D0B866481D723779B3781C52E3E11D3AAE27591284292FB1B
F22EA7654C2797615A7F49FBE31D6CC6B63FC347F5E8ACED4509C0A4F07878EB
7D8E64D01390E9E92FB6FA21943BA9C3AA45E954E7F6CB68063B65B26A95C303
711943DCE9AF05FCF282BB8B94E2244B800EA15AF8C16B9B8329E91644DB1EAD
A03E2F74D9A26F35F91D61E51829D31791F1D36CF69DA3337F945275CB4A4692
393F561AC3395F6D9B8AE4F9CB71BCEE0AADCD191C733C695B8DF0163FA0C03A
3234BD65400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC21D32B49D0C265EC2
511211833F8C475D7BDC3959C33343C76AEA8C43CE8FFC9D1AEB97BAF55DA23B
2FB4A86C886709387253B0851D0ADEA63D9D5B91BB6B95C298D1E77F1CDA031B
D6C638971FF77622866062969131FEB0AAC8DA96F7CA93B7288B2491380B2F4F
87646F6BA4269E6436524AA186982F47DA47525569C373B4B066BA73F9E3FA72
97AB17B4D2307FA2839FCE196D5BD93BED41582931E78F5416F58A9AD099D024
AE7F293E55725E48A97C62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAB55C5
3D979FB64C1924B9A869DFD9A72C83D2DE423A5AEA2A9E72DFC04B7B823C551E
0567C0A543A4B01D70AAD9B650A20BAC294E4D392E266D5F57CB4C3D19DE6FDA
4BB449E97F6C22EC02CE64CE9F9DBE52947CAF49A78C17F38F9E167389023CEB
D2F0E3EB90F50FD11EAB33A8CF611F0AD7E9C1807ADA0EE65BF63372B9182E8C
E9964F169C29074B680191367ED29A5A7FBB4EB2423B73BF347B4247FC0D40A2
C3CD57E796482600AA5E73A63B50D4E8774D50DFF8486F20890332071C3280F5
71B7450BE821B91FA306BB15DA5CB7FE994C3506E6C02DD94BF37C93A17263B9
F0369B66BA6CE4410896ED9356E725FD1523F5B849DB16DA76D4B6E47CB8C03E
730F739778BBCFCE2FD2B999DE15BB9EC58DEAC2DCBA40925D29B3970E0582EC
823434BFCFE218A4B5FF0264F1EC9818FC87436020E36FF2D28374CFAD56A12B
00C3D409420B491AB1B0D595041D0FC126AADC040D9212923F8948E5A8CF7FB7
E6E3FE51870FDE1C24DD45E854C664AE533D0F945638E4121441ED02D5DA83B1
A7FEC5FA6E23A2EB89320FE2FA7297AB17B4D2307FA2839FCE196D5BD93BED41
5A8E97423A8BD29076BAEC3567CD7EAFDFADA9448F1CE2AF347B4F9354DC9006
85CE73A8D5738C2BC3A5CAA921D9A22BCE7616FA610E4B920460316C88FF71B1
04301CB90945B9CD7B18C88E1931B1D04524CDC4DFD91253C98897423A8BD290
76BAEC3567CD7EAFDFADA9448F1CED47FAE296405CA92AB1E898987F8990C685
8F1F6813E2878A429DACE417CECEA2D839810D562BC8ABC302119B717A0C119F
C35E435A69079A46C84B3CF54BAAB62E1730AAC8F75EA67125C72A4E324619D1
EFF42E23907DF6304704446D3A12157DE158671515E8FA0324852EF8AF2E67A1
324B65EA61E97B2819EF932341824C215702B432B8806D34BDE286AF78464D9F
BF4D80433243428C84CB94A6BA3C7EE4290F0D898BB3E404CCAA91FEA4E8DD46
98E1DEA814D34AD1C22BF3D7E222146343ADA948C30D7E7077C518B22888EEFC
64BC1C8D7F7111693805E92D4C6AA42C40192634B360C4D9BD88735ED4D83C14
121B5DF384C3FE28C017EAEB5CA8EC4897901FBAF7C89938115844FDA9A2D92E
CBCC9770D0132628D7CAE18A95A8FABFA9E50EB56E29C78C0F5026AE72E09208
216386917F074F5B3644BB3F93D7F96770C73499AC0AFC39309266C84CF5342B
479A465137BD820832EE94D79A89C21EA9A0DC5A9EFB7130EE72EB3313510EDB
1DF48D8CED92810D3A39848C4AECF40555C99ED63E70A93D368F935147AAD5F4
9FF530E9B2BD87EBB101E1FB697AD8FE7756479581DEF6C117C0FC3E2F617807
E129EAF9B119FE404AA7BA57A449D7BA28B98B743C44914DBD029C44650356FD
F8ED6D2FC85A9073185DAC6B1AC95A90DB6EEA8F861E7081B5F3781AC83D1C3D
AC654D066ABFBD20E39216722D7026D65F60ACEE6BC75F7E7AD0E48C13FBF90D
B85389D4204A70AD659E36425F3228E761F8E4E1850518F37C8CE316534F9AE5
B4F96F5B5DA67E7B99A0C6AB0D167E0872C810064F456FE97436E82A4C35E1F2
9A3974E5DDCF2225DC8422DA353A556CDEE26ECDD55EEA26BED4EDF2A827D85C
A559A19311208547240A1EEA88BD1AB4D7D89DDB56AC0865FB4A435B05827CE3
2EF4FEABF5755AABA5F5B07A0BBA3E8D9E8DA92B042A8B42FE1B8504D8FDA604
61141F20230127BA54E78CFCEB65ECC093932BC7E64FC9768C543C4502FAFC66
940E0FDB2FD9AB838A00EF5A60F14DDB2E72B2B23D7536BD03D50360F00B5AE7
869B04902DC65AC862F10409E680BBD88A035417EF4D90A40C2B158F31ADAC46
B6F0A144A89B0BACAAE1EA43FFD83386928F960397F9743F1BDDFB6B9EEDCB64
ECCE7EFDEC9FA72A69B62A59AD07FE176C8425A37D6FF6455893676530FF64A6
DDD00F6D4B9B74D033B16D1CC6C5C9277451F7610BB95C3D5F524BFDD0C33FEC
56FC3FA6C1132235E894CDB0D0185C961ACF06A2DFCF319EBCC18AB4BF001752
E079F0A7812807CFA5F48F9D6FE0BE5894848EF824D6819A1F79B497E96CC3E0
7B9F327EFFB3D2525C82ACEE2E8CEDDC4BF5916ACCF45CBE2315698C1FF03AB0
7F66A665C3F416673B7B30987C7D4EE0B9F1AA2D9CBDC9C09DE4BF32B8EB103F
3612856F1BB2706E9AA685992F19237102D0AE9F6DB089177C1553A770DB559B
6600C4B567C6C3D8B0FCA6918524107FA365E1C02B72D4C97FD77B493C1943D6
D44A7CD6845F0281BF6AEE56CCDD5C198518EDE53AE68BEA62412CFD9E09FF
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CB3A677904DB96A4FC7509374E544FDFD4473683CE7
52445AD38E6F3AADA886EAD97F34E1B4DE04B482145F39350CB3BD73F6BE22FD
F714EED60CF92C851335C54AC440689A9CFB00470F98FE893DC9FE736A73D749
8A032F336C94C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BECB17039FF93
8277AE848F2424871BB26E5F9963F3C6022BCB476ACDDDC00930BE769752504D
9980BC8D8085015695A4B206D94F9FBEE46F6B6338DD6CF2924E49D59702A6B3
E394C790FB4FB698F2DE0CCFAD5EFC9D6CA122FB2077E554C9C84A1760A7316F
84CB56870EA2BE9D0B1D1F3D34CEBAA0367AD81238E83705D3D364B37D066466
4C6FF0AEDEFB064DA57ACADC778ED2784B3423154B7FC03D43F47C6F505D45FF
0852F8FBE17F4D877138BEAA81CFF4C06850DB2F112B40FCD3E8F4C87083C3FC
BDEE31DB7D253FADC2D5DB3E63BDB98388322D348850314ECF0C50DAFB6A411F
F6E25AFAD63BB5005871EA0645F89E12CBDF247FCE91F39076EE06BFD3C04FF9
33CE48AE61ED583AD674D12B77414032B6391A56012DCF662892D7799A406B7A
6D96510D772EB2BED726D5F12B4487AF460BCA586827AAC1D462A387077172A9
35EC2DD30B9896083F300EBE5FFB17D309940D9D5A1BDF081F4D718A20CD1D15
987A7716BBFC20EB3DB805CAC99BDB80D54264C1B79D2B64DD10291FE16F35C1
7D22DB84B970BCD5F146D480050FB9734E92EE2D81D708B1BD13B36117081421
61A7701192F6C607DF5CB47BD237756E97126B8B4C2350C974262C08329FBB26
005B45A10D5A88DFA6422C5EBD6DE21A5B9F8A24ABC3CAE648B69A462F11F22B
48101F2E0E89BCDD8B5F3CC6792459C05724ACEEEF8DC018E388F3C9F683C1D3
2DBFBCD3D643B2291CB6B10B7AF374ED78AAE5E44725359EE84142D88EC7A3C6
E0901F595D24202DE22DE3D1C72ED1035FA69AEE3175F2541B3E4A4B1776A6E5
FDEE28D410102935F02C646DDA1374D058A410E3960562308AB131349EDDD377
71B9A700FC8CC33C9123DA85686C8E660711441F6C28D2A2C78209EB786488D5
EFDEC2920B2AD2C6BC66B39C49AB118814547A1D65412C71017D8F455E99CB91
2A869D178ADCA40A7D57DF2F0C16900F271E2F99E355513C1D0A56505E6FABC4
C971F577F6275F5435F3DD911B28BC96A6A768E833F61E231FCAC8F012F9DE93
74482B2BB822219E54B3D204BC6B1640845FA0C36E9EF2A6A130AD1641F68175
4C237D55EDB998362CB7A220CD8C5B2728BFEA6413AC8185E7C6C4A35E3290F7
DC6B5178660B4EAF6806E03FC37EF7503BB71F3520DAD693427846B54AAA709D
8EF41FBAE00B56FBD0F098807C1374AF4E5417C35BA9D7B664BEA7F3BCA59798
9856A5FA1B35BE2C3211CC10B3104F55892F02215250E8480F9A5AA83EB0A215
A6A9F991F03EC08533EBFC812DF0E0BB3BE7DA2A760FC90B9D51541BC1079996
DB32757C6A690B58AA8BFE47B51BEFC2C98EA47EA759A4206FBC1226943E71CF
C93B80B737BE67F19A7EC4BA8A486927ADEE699096F58A0A27BF0655CEAC2B33
D332850205C14908F5958163878754C4B15F3BFA726F30EE9C5F44CE8CB2F09E
356639D1171934CBE969126B2DF423AB989C11A6DB9D9BF10876727955446097
BFC0B93C04839DBC5A3D4DF48C0E91CC83A072C51BAD941384E24243E29C4292
E02F179178B1E155E1CE49783055A839D05E3617D0D7851E3EA2DC93FF6A1216
FA0D1B3B8E5EF50543A6AF964EBA85A5133237CE246D00AF7B88D9D25432A404
EB5B86CBE584B77FFC2106F8E659B11BE9F8BE8387C289B8D48CD43768D4BD36
F40EFE498F11F44235986ED02B723E7C271BA35C2D7B1968FFA87D78A5E86A76
D18855CC16896FE67502EFF6D4BCA9F4EBA3A6618F333A355B3503B96002827D
90015F4A5D4AA98883E47151567411B3C5F275CFF4784BFEFBD76A59718DEAEE
EA7435764B8E08BEB211024135DE51FB7EA33CD30C6E58F2B90CAEAF75AA2C1B
9DE3AC49E6A594B3E75CF38E13E483D3EB2263482C26C020E0D7AF6D0C40FC19
9B3CC9B6F44B9EECB1BEF37C425FB61AC792469C40990652FE4332BA0E132C17
2E140230410BDD8227010C869BA594A76771F3B9CB53EA80E15FED0660822B97
AA8E013D62105602A23BD641D5F29EEED0AEA97EED7E3CFF2F3E2599982BEDE4
19406310BC1FC310D4695B761A871A07204A463F8C9F65A19E4557ED15462BE6
B384BB3288FCC5B7BBA70CDE9F3FE601A0011FFE97B78342483748534C283AA3
2A894CE237B99F3E519874DC0F81914323C4C3A2EC8A9D0964982D34024766A1
046ECF416E732B72FE3DB89894A87436FC61D5FFDAED3454CEA9FC057F679948
029BE7E9A8E33E5CEF8977A9D7363920AE7348F98D3C6805ABE8E2A0086683EB
BE21572CCB43398C3A6AC60D13AE1EDBF3789061F3FE4F50ABA7885211110A8C
B2FE3F4D555F206186AA6B7FF282
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99A6A452BDA7CE29D9E0AF72F0AAB66DFBB8C
8ADD16BB65D88A7AAD93961976DE90E40187EA775CC79FCB6654FCFD2269F2EA
7951C85F49D40AE4D7D193541D0631D347B191536A6557B5B8C874FA44E71539
3E6B62F58F9D3B055E3CA3FC5F586E8D1B006E523AF961E9C9893E8D65DAF13D
26C24BC276BC5F72AC1343EE49D70ECA4F25F58B6C3937F7A3D8165EDF4C74CB
B662283EA3FB859F2B46DF97AE05915E791F1CE849154C53C441EF100B3D3F74
36A5F496503A3E108CBCD7AB1104D13535023D5E0F563059F9959F021413C8DC
613D035D69EDB4DCAF6F52EBA08FFC62384622982E88BFC0C20B422D4B14971C
6890397008D96737F48EEB999FCC8F26AC74EE09527348E31E31545F0FBAE081
3944C8BDCF6E32FA15B53C70BD06F06681193AF93A55066E8345D531472249C8
FDCE5D2CF3A342C8C3E0EC7846ACBEEE09B1C6048724F4AD47323294281412E0
33B051DE4B5B54076F7EE652220C5CD20A575A917C9E7F9EB8C5D400FAC3275D
E7A1CB64B5D1B5FA98029D7BCAC785BBDD2D86B42FF91FCE7E06435BB2940232
8654C6213212E127B968C9D09176613CDBBF70DD3492B82A746A18621FCEA034
C5478EDDA7C1280A05B1E32B4537274E5102564EE586F97C1FDE8E7BCE01645E
6997373B2BD37B09BD7BE26B975CFB5F1762444C53CB604A45763B67768AC526
1DF9C7E081A7F60049B0EF4E1912DEA25281CE4DDC8BE953FF658A1117CD4434
A122D6BC79EA3A1963B94B9903CD874CF329240A0A080B93847EF4A6D9FE1590
71334AFCEF5F9F56BE7AF8FEFDD9A275F88659D2ECB70F44FD2643BC95F886D6
9F8E5C9750C4C9E76545696CAC80421363FD81AB15094F74295A600EE8A42977
8B0570F27487933DBBAA82C5904BD2170921D4B2CB846E609078D5527C1141A7
903C924ABA53A4B5C7C390F436CB4C096165F9F845E184CC0594188DC4771B89
04EEEBCC20BB62DEAA105FCD48375C11A3207B5A381FF8E1C1643FAB51C16D1E
2C79A7488B9C54BECCF570BB1321CB3136656AA6256F36CB1B93A8AE9E43D2BF
759505E1F5F3759E08318611701B27F723F3786A03BA8515285CD7FB6640DEBD
ACC45D477D8788EFC79A0297F6D18FED9656B074B08F2CD31FC681245C724A8E
754BDA7CF80902AAFD2B6018DD0680B43A5AE7900B43027D002C318363FF20B5
A0762A4A9A546A212DB60D5242FD1C2D25BCA2B4E479414E699B812685A5890D
C3FD97D8C2434A8886D583181CFE693F96F674A02769B1E1F51667A11F7CD5CF
8FD053E67223B64D740B7B5746E193B5F15C9CAF3AF3BF89D94C253CDCE59227
2EFE43323DFF913D8D5F9B31D94A995E77D369B625ED15E573C039463C85D6D8
0D2E3F6E3D9B0F29434DB3C314312748E0A60E83AFECFC0279ECFDE314BC8E0B
6C0895146C40ECE0760D71E25054717CCAAF6D21D4382290691DBA3D105FFA49
D59C844204CC485B2C61FD26C033019C4ADC916AA6F4753081FA1D94EA99EC33
7B400379BB84FED0BA2E719DD6558D875B609A4EE8EA87A10FB585990593F20A
35C876029EB65E328BC84527AC2D1E06F8F45B9A4E0A50A5974B4E84FAA55133
861783867EAAF8138F4275ADEA0A3E4C5F2162ECC430C5BFD22467E3B7B7EAEC
D9E3E13E5A06C67184BBCFE30B3C2DFDB8B6B023CE7CE84BF2C517B5295BB70D
0AE365DDE57674C4C849CC0D1B54E47D44B807D264B8FFF9E4D785C1BB721B91
E3B18B10A96E8ABB5CFD28CA18CD9013B79779DA096E1F56D87595343D1C24BC
1455EEF8582ADCE366A721AEC716AD2358AE18DD2EF7767E50C44C91D9277A7A
CB3C766C747C1997953D2DE0551410FE5FCC36944911C50C1FB0C41FE10B6AA7
C7B13A244C3D76660C2C850DC2F7EBF48033C4DF64BF191F4D7FE5616B55B114
7525E3147648B24544D4D0D280C358EA9F015D31C4AE041FAB38A00EEA61310B
34AE2E68859E771835EA607E168019FF408B3C783D0712BCA10A436108F0D6B8
7BFF46E7E197D8541D72B9EA99D6F56F1BE23D9AD3885E2CF29FC8866B0F82F1
56C86BAB9E9909EE52CFD9DDA56E43B43EE27728E64F94911E78F99023106688
8CC3CA21D9B855B941930D94B358A511C38C5E844F53F8CFC95AF3BF1C79D435
EAA779066ABD2F6E793C31EB06B9D8CFCC2599AC3E2FE2CC2B57993BF9D3E087
8EA796DEDD4A99CC2F0BD0358E73D500D9A5CF19043C66B6476C28FC1B1B3E5F
EF3A3B94CD552E29288AB0A8AE7D78EFF8A0D27FEF34B60223FC6170F5DD66C1
4CC479605CED53147A5A50D0C160A05FE5C50204E88AE3CB8DE317F7C1449E4F
6C8AE7D67AEE9BE9CD45E61487646AF7FA888F5689FB281BE5AB48A4628EC39D
4BA102CB88228BDB94B4800143562A1D24AD69B43554F5CB698730F542F14B01
40956714F9E17000CA4114264126B1309626DB03244237C973EE66532998004C
DAEA8C7A9EC5C3EBD315FA64EDEB5E39A579BDE6E17A26570B8602F9FFBC326D
9D0B73D843F76A1B5D4A90F08ACA4085CE2182B18D0F0A3BCA7A7AB687037FCF
F73C21FC6E077DC85C01A5929CE43C6E207AF7A13556514801FB8424A19FC7B0
6C5679A64DB5E2FB6850B4977E46252518F059176E09DE7BC74E4EBF9CC38C7E
AB641BE9F5D5BC258A8D370AFCE72583758D1D5AE4904590697E8612476C7782
BF11CCACB9E7ABC7BDB8E2830239F397B1662BD176230EE1323CE1B26A165BF7
5291EF6E74899AB3A9D824CE570B02C3549C030A2182FA8F453BB48A71F8C007
8A809559DF7C0D057FA1817FDF25DB83B2808CBCF67068F475601D6820ACEA37
046A42AC0058159FDCB85363C9140E4CB113FBF9B4879A99BCAF708E326D070B
8A72B4B3BE25B94ACE7262724BC9A9A578B3BC9DB5CB1B44B1BD592D45247ABF
1CE631C747480C8C7504D585BC4A036D73CCD7AE63BD61FA705D30042BE7B6F8
167A42D598B4A63FF9F1C09A6B70EC816AB5DA4E51DCD3E547451191D88E3360
EF236EC08F633408FF890A42960F7DDF911223A1C4EEB6751AA3B925766E9C08
169E0ABDDEC4210CABA300BBDB0D7657DE0BC5B2799B4A9B76855632CC48F0D1
002B24AC734368535FA484CDFA635C7ABD2360B226B790C4AAF242059AA51DD7
8CAC1544AF7D07D78F5F4C1B7C756E852052EF1B8FFED3E58C2B1CB5633E895B
1A65D1A4AA90FE8ADF79941870A8893D25DCBEDF56A8BA35342DE885B0C370FB
10B5E05B2D70ACF533C80A39605C93C53BE5A90A66A7F0E606D1ED898CAEB9B7
6170B80B7355E8025BB9FD414CE37CA1229401BF634DB899FD96875233389595
D56642A713F9F3E50C4B5ECD451DF3F6C5D12CB95D3DC2178422A46CA54A7E24
3BE377996B8BAEB01F0F81E2F33E81335F7086B663F0AABAF671B02C86C84084
5174596C6E1F9EDD7A369B9000BA27005CD6FDE60CC49B767DD3BF6BA86CC36A
492CF97D117A3D578BA261CE4E68C0F77F30F59EB17E7D2D0A8866EA71B29661
6734020B514C8B677ACF46C893BCB056B9A6339D5B4AFAE1B7D87F43426B6437
127403A378FDC8E849A8639D82520AC5332EF9745D6349200771D42C495F3A01
57E54C5133C1136DE2492BC07C0C81F3B6F7AADD70B4E5993274D3661BB9A999
124ED712DB3E84907C022BF4388A788F2F72CEE5F5594CEA611CAAC1A9F7E87D
D609A40C735DA40E068D61F2BF6EECCB5DA1D8CFD55EB82E0C85A089269EDD68
33F4E48FEDFDACD080AF068F7A1CDE18315BD694C60B1DC71DA51BA087227D78
3A0BA41DD693AA5276475B876CCE4296AAE94ACBA679E67E6C71F4B0F9E6222B
1E11492D2D1BBEBD511B8CAE488343C923BBD13695840A4B561422998DF58ABB
C243DC396238C49860350745CACD7FEA1FF9200BFBEBD6E542A45CD9DF121101
DF7CD1147FA1817FDF25DB83B200ED07760873A6FA09ECF40F73FCD8126A2D82
BBE99EEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD402712C1E1417E02C197
B010E49F7B468D51C05113E4DB9D0E46E118E97B1EDBE1ADBCE77243B1EB202A
F53BAFAD3079572D2DB7F7BD8C20562D791FC03198CA758ECA0B9CC64D6A882C
FC5745047EC2FD9F4582E2C86DB7DAF041E2735E882D1880632A2768A241A093
B769BB09B91B88627CA0EAB65A76FBFCE0CBAB3792E7BE9A167600E424F9AE57
02DCF489B585F5190F9ABABC6BA8BF0A93D7692E755BCAF6AB8F5B958F7B9138
5E510CDAC287E82CF1EFE6E2B12759D876E93E78E14FD76B97270E30E95C96AB
C1C005CE38BD1FA7357A6B5182917E61CDB10F4D59EB9DCC214E61E8D1E091AE
EF1864ADC733AE203D9FEE015E65845B48444847FFD8923E2AD093B00AF017AF
F09CCF772CB5742104AAF7F6B37234BD3256784F973D8703B8139B8EEC22BEE2
E8A1A721E5A28DCB5D3CC6642445627E1FF938AC1A373333B68E810458E2756A
EA1FD8C09D647BE595260BB70C631E70BA8FCA40C0D865F2F7AD066EF848E437
B506885F93E00351B55FADFE83D9A3857E065D555CB217F8857FE0DB1F6F94DA
F5104ABD16958F1A6B52D6FF2F1F28DE13E4B525245B82998873063BBD2C297D
25B4BE338AE55A86F9BDDB2548C6300C661669E0D271F30024C0488C71FB3079
1F330A89AEACE265C063768ED394770CF07675657587CB8A56596BD6070FAC97
92851F1CC40481634C777018C2E5F8ECF6127FEEA5713D78F437DAE50160FAC2
8C1C21FCF83DE2672345617BFC36D07E89110A0E44CFA2460615EB10B76F1C8B
3B0F66D6FBE907224496686847529F68DEA6FB704518D2DC9D321C43C5E17E65
894994FF8ED6676E9255EEBD19641F47A05F49CA2A65E0A3E935AA652C0B70F0
45DD5C79D026CE9F5B78A5923B07946AF750F7C23F1ED2F127D66CD2A2164C29
1567D081D4F769B5CD39E9216131A125992C686832DA19007A512B2432256C40
1A60314F9C65C30DE793F4A68EF039BE787A32CE4179F2DA227A1DFE98A369AB
F290AE8A785CD8DDFED8FA29EBC57C3E00B3BD73F6BE22FDF794A8AD3B976234
8E65649D6C52389921BF84B06A7F9D4ACC50C374D88734FBD23090B265532EE8
3FAE343882AD0796D5CCBAA6F264F2D52A88F1A24BDB900338B4131ECC606449
83811AE225AFF7C85C21A80A68AE510704F729FEB3AC16B6E3061822A02376F3
E8F14DB832CD33E7EB920AC03641019D7E89C3B58FA4A388D48E279B57E7E5D2
23D544568AF2B596A4C89E877948CA4CF92F1BB9E3825B748C865593B80B6A7C
F24DE7029566695B04E40439A30337C834EC6C913FF06C046670BF3272A4D0BE
62811BBE508DC0A9589C4E836A645D52C01CE8C7FF03578C4859B55B0365B514
01510A28F4711700040204A47C39359AC7480C14BAA8A9AA19AD7875CCA19E45
CF37ABB1F372CEB8D1B8D4DF63FD13FEE2D75755FDBF7125FB02920466AE4271
5921F017176B028A8325607AD57850ED64DF35103F88BB227E90541B15DDD0C6
D989490ADE623FD53D3DCABB2ABAEF03EE07C10663DD81CE07ADE6E6B2935B26
BD94ADD389BFC649DD83AACC23650C429AF024EF5EC2592A32E90CF70EF4A2F0
4946A46DE0F2FBBD5CFED6016A7F8A61F00CB29BEE5AA9D59CEDCA3C0660DF16
3D854EF6C3A694BFC4C5F3CB26320AC4798C4A051C009742A11FA4CAC031296D
C567AB448B9CAFFA4BC15B304C7446A71A59F056B37F07C8B984E5E6D8371666
27BCFFAD757782DACD8A9C6BAC033EA01BE43757C78C12B423635C620AFF4D8D
3A1530112D5351BF04B9EE95796C135C1123CB216D77D6A11627AD1087A1504A
5BB67C55F669EC434CC8DAADCAD82F6F7E7EA4526FBC46A3E5A49E9738C7354E
9284753660D4150D87FE8400FACF1F3D5D8D9A2C8C9DEB1846A384DA00E5787E
74F8896687CBF52C1F079974CA6F28A5541AC6D2D811F0AE2BFEDD47C0B41235
E05FB023A6E44AEC660E02AD5C0E438F96448872B9B88D345869D96C57CAFCFA
148BE140BCCDE6A73F9ED4AF92BA5D627FA697E110BC240CD8069D8039DA36A6
E77AF6E525B313128359FB837C6159BDD3495954EB849D8E9487FFFB4C55FDEE
648948F92CBC5FA902E410B1E185C99C45010F8767C9B877A8D7AD7FAE19BEFA
A91A90A346C4D818EC74D494FA998849663CC0B9F3738B279F38A2D283BF456D
5D8BFEEBCB5B69717F22A057979077824562A0E86E19FB8D49646A4C3BC15E37
1993C3AFF0BD1A161889F23347D5B63CA29ADB163DA9E3F1A54675CBD7ABF2B2
F3E2FE347F10ED094F00C582E783C432A64175A3FAA4377FE13C0D61A47E18CF
ABCE6E0D39840B546A6D81B33255F7D3EEB981E561FDE888DF359F302BDBA57D
A671A26A6A2ABE9D3BB94C816955D5A631CAC3F1A53833DEEA43BE551A26129A
FA9DF18C663913C5028D0F35B01F081084D92EA30AC2431DEECAF0A5089BFE01
9466013FF3A3E8684F0CBEEBCE9EBC2BE8A24091CEA8B1E529DD5575C2362EA9
F95EB9E16E293C178828BB42507B524B622F10AC8781B19CE8AA27582B2F2639
3FB39C1F05FF8F31D2DEF37BB9B883334F51E9536671A309651590C702791FD9
3386C254CEBCF49B7A849FC5862ABBC985191135F0156722F0BF1DFACDE42033
9B78D42537BAA87E0BBE78BA5B5C0BAE2F3534E7A6AE88DF0AFA1E08FF5177BB
72916D578C2C6E72A18B968CFA764F314AC16BB1740C1B9A34534A154E2B0401
44A6FF81169C5D1ABA0AB0CAF5BF3FDA754EDA86BB99E7F290F346F585A48F89
006ADDE2E437DCADA997D6EED987C887F24F66C3477F7D2EE671BF0079442052
A2B9B90068525AB3089C91D6A134411D948AA2F90ED6A018E7D5351B62952C6A
EC9BB506A5AFD9D9C202A4A34D53A10256507544F5B8FEEF1DC4FE433D4881F0
977C9EAA3171C41E3A930F7D96A3F7CBBAAD1697059C16BEC49F9EE3273F7A28
A16A343214089692C8B5C2BD542B3D41DAF4AD1B4D86C188F1E2EBC7191F8CF6
627BC3064CE1AA935E3FA70B901CD5D2C49144778CFFF1D5B63E099C9855BCD6
F436C7390B71822D2D464A10A1B14C33FAFA662802C65E737066229312A018E6
07AFD73EC28FFBF5817118B73148CB30D76BDAA84DDD46A6CA29C1FD7E7A29D6
54B5E2BCE051279788C2BE631FA20B58F81A1A215F70C54778486E4637F97A4E
391790E00CBC39BE0D051BB73DEA2B8B4B915900E55B9E7C914E0074C40AE691
EE10F8257C892EE7F286D0F6FD415C4E0F9536586CD367FA092EC9E8AE96643B
6D5CBD885DC93B61E6BA36BE6A27F528935D5CA264A4C9F0A8E0E96BC0FF6BE1
358916C3E66F8F8C21AD1D13D182F59E712FAF112CADA74CFF4BD78FEEA0FBC8
28E7706B4EFFB51B6407D6FF025F2C1BB35A613C0A0FB5538245F2C637E44993
AE72672604F139C49930BAB05BC1A7A3FE0605924C1CD6937C4F646ED0FF4EDA
98E456F41F67A7063A2EF9ED5AC30A07B87D5DD27361E68D79B52B6C9A96C1A4
0596F048A31C4ACBB487F2A5E50887AA1B0D3E5ACEB5EDAEA605AF5FD65D28E7
15C6AB21674E82E6B49A5DCA8AEE53295494C0B9C822A8BFA0F031A3DBE8DC1D
6FB37B2A939790B6FB6095EE87EB93711F2A49C15DD57EA42ECA4E6E8D58BC4A
1E5D43FEC68E9E3DF1AC80F8FFCF4B8DD9CE727EBA8B13A51ED614E0C7FBC733
5681207464ABF8C4ED5B8F8742219DDA8FD87341F337F112E6E649BE407C85D3
D7359AFC593F00644D679B9F17FFED44F44192525D19ABA0631EE6AF9187E298
CB7AABA58E3FB5B4C7E86616C25D05C5DE45A3519F7136A882713399C831384F
A12690241AAE5FB3FD08D95F9EB0F889FEAA41F3B26B7144D292FDB92717094E
CB693C6A287E40B44F6435D089AE68F90802AF3247216D8F96EBD8D1EC18D48F
EB29E968BA814A7B50BCC14DFB635868845956AA111A3B5E5DC9C461F32A34FB
9469E4CCCF24ED625237EAD55FA9C1CC2D918647525ECF7E0304D3BD24256912
A2ED3C59B32CB7925DEF6A8492F020E67407CF321E01EE8F2811A9C0AC46D13D
75B9229B28B167355EE678D6509EB484D60E207D7B069A9236DBE528855255C0
52E88D186373488719EB806074669C7D9712D975674948A0C76CEBDC6D0CEE93
14AEB1BC9737DDDB8D941425DE145DA043A710A148B8836A491E1E20F202321A
E8696A2B452CFB7004015917BCB3D8C7BC445E500C128AA2B10494823BE83120
9AC88287B705D740C0686E3F73337E28400D716A714D8670BC05F2C5920C97B1
584B7E0051107EE778B10EC2C52268447A7CA919EB41D7E8BC0BD4D3EA61170F
94D3DF372A6C5197A556E05CC460DA5FF8BAA066043F44D1AF32F06F455B580A
4BBE440839A54B385C9E4571C466AF1C0C846AF17DE250CA1AC04FFD6E62D922
CDC694C0A0BBB98F022ADC8E75DD413871CAAB11C9262D553D7CB135ACDBE81F
C2CE7BA777B592888D38EDE68FFB3EFE8384FA47301B6535236B09184689D672
FB302CDA74DB0C401E345AF485AFF1AB405004CA0DEDFF110AD9468A0E401FBC
38CB32649C98597DDCDE8DDFBDD70EF02E74535619545941D6326BFD00F8E2C4
6B4C975ACACB7A8A5A26741FA81DD123F8434BE971D9EC8149468CC0F2C45ACA
71B9C5557A6F90A3CD9FB434F4D12484E03E14C9CDDBF822D9EAC45AC7D42782
421D7028420F0A116296B882236A7301F5C7C276F7365F6850198D96C8EB6D69
21D7653834FF96E72458EC8813C0142F72DD544A3412418263F24EE43CD621EC
0332FA04C6BE2BB3D65C4B163F647D13AE8E9159D1C5B8CDC769D91248F41D22
88B20D34634022241F7A371A6771D8961399208563422DBE459C3CC79AE1D2AF
03ADBF5D625AFA29921D869E56A6FFE6E3269C262DDCB65D3619B06C872C0658
E8618B148DCA86642048F2BB4DCFF0E1BF468D27DEE088CC084BB1D69B96D07F
2D617ED8BE90E81563C7BD47B973622A202A3062F218582C59B4973E4E9FB1DC
AC3EC5C490E3A7C5FE2404D7748075F07DFD48CEF6189F15C9820ADF2269E52F
330B4B9081C54BD3A8F7E50CD99CA00562F00EE394976F0A2F4870DB0C0FCBEB
6D1699072168A80EE9423004FE6A5544CF02B59DD72EBD81EB49A014807CD210
AFD2C02131258DABAA1CD08127A538F748070FAA304FA53EEFAD183275132017
3842E6E0A54280B7101D384B1B4921FE433664A9A773A525380B61341A0F7D0B
8440F4C7ECDEC691CE30F65D0AC2A61B783BC37749D7EDF4B3170188BA06228C
F9255F6A85C773B6CE6C90F7420DB2B423364F9C248A2A6CE4E055A44E19E224
E9D306E08AF280717717DB055E4F381156488893EA46C5C9397942013B540DD2
91372C1B03D764F3F042BE49B872FFB60F14DF51EAB2ECF6C2B3FAB8DB2A2065
0D6513EB0DFA577FA4ACF0210CE8292EDDD2F3E48806DECC819359047D59EBFA
3FF0B82B98CA9B6323EAF39BDC40B3CE28A9BFF70E85FBE7E7CFB5E76D2525E4
E007AFC9A36515572732015C2BDBE0299E0CA31667DD5646D48CFD2E30464DDB
D18FFDCE2100BBBEDA191E229E8FF040BFD4CD3B9F79F1BF79818A68219E8766
9DAC3E8F977C22150E9DC4D491B11A57871330BBF7CA780C3635D75B805B4F34
26C6C6E12E081339CDBD42C7785C55AAEF32B582FE54F0B93A85F0DFC1C26779
888C81C7724296419D91D7204489394054D1FC534C1F062EBBF616B3C6BB81ED
09F494B51A2269832861BD92C4D5F355188C75096057AECE6C61B6FE484CE582
EB7FB67E928FC166975ED6FB9DEE4585381F74DD1E8BE9F6E3E1B34122606B56
8D2DAAAA8A072209EEDDC3986FFE2E002AA5E58627242C75E303F4155CA1CAC2
A5CFF1F3144B65D05121AF6C3FF776ED7996C5EBA0C337251B70DD7F9829EBE1
21EC0A2D8191742514B5769D6E007E09C091E207CACD00545E375162DF567C70
F2DCE2E5A2C5F4A205DFB1F62A556CAD6F0F434CACF7361CAFB8E0126DD680EA
912A18284AFFE60A0C7A2BFEB165D5351D5AA30E249F8496FFF2FE5D5DD1C32D
FC80408D750304E9FDE2610969436A19AAAF7D56AE4FA0CB1089D002BECFF60C
2AEE0524DC5A11D6953BF80EE02E645EBB50EF5B88409CFDB3784C6366C4A1EB
39506A273761A898F69A340232631AF42FAE660915711E6C2700B38FD7F4E03A
D36E3D39C136173D5D9EF4C45B087BC34E8F14FCED37AEFEDF8C592E158DACD4
D9005B983760C79C08C12658303A39BB30841E4EFC9ED1858353AC4063789B6A
407EA9CBFF11CF62785C42D2C746A9816765E79492E1FC57CC5D170E550DF52C
435281D07BAD6EC65DA4791C5CAD5D6C7128962A81910C6EC8950C3DCB9316FF
BBD1CFA91D0E2276D5B0C8E74E5B98F82EB1C6CDC69C59C2F18FF32DE52BCD70
724C847F33E89117962540D9AD3349225E6B8EB758ECEDE8173B87B4AF1A1B46
4F24F5E4E1A89954B77EFF44E1C7C5B7562B0D343F0690DD2DDCC634D3D634D7
CC06195116DFE7AC8774D6B53FB0BF788FC6CCD3C8503663E537B72974527AC1
F25F19AD53BB4FE9559A1CD46A71E1847119E030D758CEB0BB982F75ACF33109
F8AE7ADE4954D0B1E18027F926327559465FFB90BB57BADF1019900BD7DF733F
07DED36A1D161889F23347D5B6BC503300FDDD48F594F44B3CA0799897DC2238
5D1C16EB13D1F7C524C89B8DEBD032D542F552F40503BD7F3E05B0DE89799072
9C0F4D1DA4FEACCFE55830A76C6B243487AE5A649D850B6E22FD2C82E7C310D4
934710441F46312EAC995D35324DECC9515AD53C8DD8710ACDB3786A919FB356
CC2695CB2092B43EAB7D1EE6F3CCA5C368CB407B7D69AE0E77E97DC7508FBF55
23D79229E9BA352E4193A44EE745F76037BC0244C513B87939EFD9DF31C42A62
BF096B816BF1E2AA20619023BF4100A37F8F188486B3F0391D232034070A7F03
5B2D8E9D8C05B11778948FA94928834BEE3A0ED19C53C42E821C769735FB8658
60424EA7F5CD9AC21C7B1D14F0F2278479E7168F2F4E058C0177456811B2D438
D0904EBBD089B189203DF723F44B7870557B23B9D50948EBCA5A91FDDCAC2042
AD0EA58773ED0DE9FC13FA502360025FF58EEABE4D126395AFBCBD073B0FCA30
A71DA56B122954822C27F9880CA42AAC79E825472320B4402E8E36CD50403070
3DE5077585A11B1710C6CF862882F3C185BF1E4AF89319F6B0B5F32883144D56
858DB7D0EEB0EC68A78F6911E36E12E02ECF7E9DDCC72C99BA48A60771EC0FEF
E058B9944292ADF21511621F53D54EA857E4A992CBCA5E1285AA1067D470813C
4EE003437197ED043B7BC1D982E7CAA79328DE04F0F7A33D4CD50BC0D086F9DA
C374E9A17AB678698D2B6F11332AAE28B05E06202AB45200693D9EFD2E0110B6
40E38CB4A7EDCBEBF4929EC7CBDFADDD1496335FEC30F5E9E16AC846CD4FA184
4B267B7610A6D157EA3ADA7CF63EAE1CDEBED0CB59CEBFC1A3B4228D6526D50E
59B5135B8CAA9F3EF320F79F7EC0494AE7680BC389A1D78C6E2E6F172BF65168
097D1EB275BC1AB6F8847D80E4BD474269F936D2A152CA1E9A94780A7AF45966
CEEE10B25B9A4A279FBBCE3FF27B1EB40C8A664FE68BFEDB98E14E3073ABF39E
F798D9BC5D4B5F3926CD47F8CD3FCB12D0CC866F1414B1CAF0321C6361D12879
D78AC6396BC3936BD40FF1476A8F1A46F3BA2F3D1C14EC30CBF83E5729F1C074
D4F164FE3D13C0CA57A43E7425065D6CBBC712B23944236E53B933A2B7BCCB72
D6E2DD788C45B1719B1A803034812A3F4F8F74F609DDBB9635FA05510DDEE9C6
50C13A327D344F31C1486D6B0646AFBEE8172CD48EFD8B73CE7080A0A1ABDDCD
1A2C502230FCD91FF58247EEC1668C8E7DD441ABD3D68FDAF7F8756B84668463
680AA78A41E4BF5F6B836239546551F5E6BEC12C895C1F84907B95A2FCDF6FC6
82BA7058FF2B516EE6A1F62AD788D7A56D82E3379F608F9FBFDF25D677997110
48DD8CCE339CB2A6109FC9D829C4255C893F7749C4E7B6796855E211E67515EC
64B6C6D9888690D7D2C56568F77049927852E3D984A9F64C7218D7C2DB814803
15A1E63B66E9630C4F792C9F83E76420DA236D8D4E7B48130E59DA01E46A79AD
A933EE59C49C0832E1B3922E9197956950D0A9A11D8B4AF31B2D41FB10A63104
AD5F9CF990CCBB01C6ECBE840C8D34A15D91EEFBEDFFC59EDA04A147FB51227A
5AB0C3931DD3C00F8CC890179E563FD9E79C9FBB0F67B045A3DD5DF23680C0DA
9FF7E6BF4298E548FE405D01D18D8CC9D6441FE2F5A3B451290BCA5D541320D8
DE866103820248EC2F9EA66E8AB516C9FD3846E540D8F39F442BDB13D3D0ACDC
545F5E9508298692F1D7A25FB8A43CBCB8FA8785351DA764DB623D1E0A59B9FE
47D7D4D67C241C7C9EDD1994F22CC5E79354065CF6357433878A4512DF7BE781
AFCC44A5C176DDF5EFF2C02F57FE5DDAEF20AAE7336AEBC01FA7F87E6028A855
29924502FB565176F3BDFB2D643CF953FBDFF9AB4FF7DAB21AA6B30547145B57
007F8130CAA0B8EFFF57F7B76C620AD57C33296B889E4EBCDEDE568BCE4B97C1
4DB45BBBABA2360BD5352066B23B64E6957AEEF5C17D832383CC11E5D6419158
E0F3D2B92CD6BE7B6F60AFD2657A1913E3C0A21FC6671193F6584EFC5ED60AF6
B276713EF5869F582AF9C2D26B1753E8339ECECFBD03C4D31652F4BD758B0748
B26C938581BF7E09FD39B4341967F54537ECCBC61816D57CA513150A5364EF1F
6F3A8F40FC28A8F80062CD6C9CA9EC7D869FC4052DB8D75FD0F744A1470A7A67
AA5644EAFFD8DE8F3BC00D46513F0358C43A22C413D9A6BA6B3E162264EBAE66
BF89F37AA3C10A401D4D84A093077A9A2694BE0EE94B2D54B072450D206E7C18
B1B44DBB0703BEFEDB3681A2B60906330212939CB0FBAE554A620FFF22099430
4DFA1BA796741EFB725BC55CDE681DBB192993B553048C58C55F0E420DCEA1DB
AF3E7FF21E598B73BD532DF4D9AFBC409178AE62864993DD49D77B928F1470EA
702423E369484A4945CE4F165D2F20D5864807AE86831051F55FD1C3B0A09767
B74827235EADEE4F56A388398B1E3B8EF7D9F110CEE189C4C494A7EEF8762859
353E43AF38D0D4E667A80166D95542165605AE3703C3F096A04154F8A7384570
B8A0A6C3C248C5C31523B52641B2281242D1E8539722361272D2DA901D7508E1
7C81A5199A57BA3B720C1693D02E3C316F722D2FCFF856FA5F423972AC19B5BC
04DF4D12AD05680652325462F52902A5B684377AA75026B2BA6981611B57E2B5
531B227A3879412434F68276BACEC7094994C0C84B04C87E046D425D2C67D68D
0A054F8A3F6FFF3E33D2133568D54E0077F0F1379F08BA39BBC939845D80915F
427B31F18A672D31DA3CFAA35DB22ADE1210214B5AB9C453592938E50753358D
106FB48726A31D7C14799D10EA85E741412DF41F4C59FEB8AEF11EC7D1484DF8
4ABD82A1F2E2B2402299EFAB09130861D974DC68D595D2E97F2E173BDD0A4632
BBD84EDC3F4E9EDD96EBFB4C0070EA7B61DABB252EF91EE58963B8AC0BDA1089
A3364A2E61C5CD126C3761032C19EC723FC47C996EE3502C3CFCA7120F8F3A8E
42134F1B6B0C248D56F247AA6E96DBCE8031E1273A9000C8139BAF088951C2DC
EF71238653C343DD3F3DC1599A2B89F3F57C11D3338681C093AD8038273210E6
07B04566B99B40DA40C25FA70652F21E2780D960765CC29F3A81304A92BE0788
C6B0C64D6F3E375CCD46EAAF3E000C9245F536030DE2F2AC2B228D5327541C44
C3092FBC68C718702C35B6334C7A025222CB9BE761E937B694F26909D2A34BFF
70378B1A9116D5786F4CF82916F0AB41B429CBF347632CFE037499C0CDE7C438
485DDEBAF95388BB7F6588A5E347A760B51AD01D89AE715FB5675E54C76D7531
0BB3C560683619972485C7333F581F17DB11717FE743A511D1447846216EAA90
17CEAD458F7A4D93E6230235359F6EE6BC32FE658EDF0883371DAAD3E660F09D
520BE063FBB838F923953C393E4522AD74E714466099CCEB3CC2744A506E329C
20D03E5B00CC748B3EBD9A17525E8ADAFF1E4AD161C1C1E17AF3203EF8D03332
8E19749F719683F7E13FF8928C4AA20F6198921EBBF6A5C4C1329F1B063F32C6
9E40D0F63977B44DC57D2D73A7B25D93F078CD2F5485DDE4B9D40F638A3A95DE
5DDD14ADBE77FB6A2BCB48B923012E45D9F0EE55BA61EFAC69501F1BC7646E38
251125385AF1647A4E4169D825AAC0866A06A3072281BEB2D27D8ED7FB312FC4
15A0BA6147E665037C5FD8D2AF4ED82E1BF056123ED8131724F0C8DF5E83AF98
4E2CB403FDA02619818663488538FF139A3634BC748DD0B0D95FF70261749C49
8DA498FCBE33353764322FD17A23E5BD03AE612624714E9347EB76B1AFBF0CED
C0F6980A02A40CEB2FEE42B631C999B71EC234FED7B75265332D8273DED975BD
53607ED94253CB78FFAD6ED1AB67292ED9D9954D71AF0B943E3C6B83B82EC62B
BD367367D97910EF46C228F3CF7D181588127E7DE13DDCDA5F500D162A761DC9
1B2470E13087AD73E4BA42888612197416854567F8867AAB0196AAE40FEDCAF3
E4DB41FDD47A2D1C66818F676D0D959F987B4513F382042F803115BB97516287
7A0A7E18DFDEDF0B7D717569ECED521E67725BAD70526CF070783BC4AB150DD6
BA5247D7A2545C261E5D670EFE6732E74ED760BA502FE1D51D579258D8ADEB33
4EDEE61F171B62E7EF2085C8D7EC43C53CFED5FFD25223604AF01B5F46C739DD
C81B47978F0BDBD1E0416F1E81B6612395461652E3B256C4815D87167435038B
60CB78E56087CFD6D96C974511645E185638040E7BA26F2835DC5945A6E5F664
ADE6C3B87BA087A2AA3F1074BB5666143B0479F4A697E1C21196EBF6FF55A07A
7C236174A5F5B20AEB40549C0F81188129B749815999FF445666DCA912B30A80
181BDD09A9EFA93708AF402D0E261B4B6BB7D3B5F1A81EFA5CADE920EB0BFEC4
DB54A651B386C61FBA934883FF68402966BADEAE6EABA0BD89B15B7581CC4DC9
AF07E2D9790EDDD5B263562FDEC52C8BC49911257D63FF262C6E8C4C3F2D1236
482E61A951F93030CB5809EF9869DBBD561D7D4647F08CFA3D6E87583EE13F84
224F7B3C46A41B836839CB5E5171920D116E8C40C4205ADDBC956F80DC9DD29E
5799889B6CF26FFF8E723E61F6839C92612258A1A84F6EB775371426F903CC81
4A129B5E153F51F22406970AA0C136D0B305A13A7003C0E260CDD645F7E2E898
9D70E8757680FDA0C25393852B5821DF13E39601278FFAFEAF447B9CF03A19CF
6D0CF8DE28A9428CD64D53DA0EC4F09F99FC46E44D11244197EDE9D6CDB3122C
29C6AC257CEAA35955BB8C6381C433E4CB69486D32DA95B74F0BFD306B5585FD
510200C2E03FA0533046F26A199627A8B91C3820738AED606411C317D8B95D8A
CC51667A624E7FD7CA2FCBD9454FA77F1806C729F19B40B3F063886E4BA75BC1
88F39F53982A69E787B0B0064C1BAF4D4B77A63FA324A444EBDABA93B5F8A9F7
AE0B676CDDA075D0A69BBE272A856C2DAF29B0DED8AD371A068EAEB6FB98FAB0
441D0F2AA5043F240F0B0F9F9FDE48EF2AA82F66AB8C5F6A7DF812E594B87DE5
62E062B50EACD5EC510BB1BFCD57D8D54FC15D2127CA5AF0F946C3C536F56BC2
2CAC2476840B83783CB18E5194F5EA7E797089F262252ABA451A2E501EAEE233
0BA33474DEAC4ADB7FF6B751D3816531ECDD6CF5B8243DDDA8CF35E7888916AA
AF198330A5E5835B0DD4BD9FE1013FA4946E779A09F2EE7F661715DBD2382681
AA18765FFC47D07E7555C79A979CAB7D445BE99338273185A0D58547DF242355
FBAAE993609DF10C492AC84FDE272E57F69C323196E1852CE4E0C011432D8D26
DCB394C140022D61713237D90708F4FF23650E79BDDFDA84FE7CBF61562A75E0
005610F69C3E7E7872D45334316E9D38E0DB5E5112393EAD799E37CA58CE08B2
5D36300CDE5BE1C5B3B2CFD7E622EC22116100A2FC607E5E29CFFB52D37EF1AF
F8DD39700EBA8985E295015920425A5DFEAE15F1916510EB5B2170B260FCF823
1EEAAC70827DAAFE662CC938FF9AB6266490A72D78C51DF51E7B3B571DB4942D
12241A00ABA6FCE7CE6F905BD44A36B9B570BA2E6544BF5BF7C7806E08A7CE45
195BF6C1877CA4FAC43F0BBEF8676C172E737D5BD3537474A44431C9141940F8
1F907F1F5269657D36462E82B9E759BFA73533FA3C709042C760FA748E96C169
FAC2497992B7685EABD042E69CA95BDCED27CFEDAFA5DB5DFD9425EEF795DD0D
E23C7DFFEF8071B9F1BE8FA48454B62A6A1F98CF4441D4E3B1749910B7500420
3E9C274F5C6836A42988414614F7ECB3DFB96E991FE628BB732A272FA4BA67C6
60B3854A4BAF1C57FB59E0AC5FBF899D204D04608B34C0259F11335D4482119E
58855C21ACD9341FECB404616956D588104803EB9A79E2497BD273153583BB40
D4184309E68D81F627526BB3CBAEAA9DD1029B6B92976C034CE348818DFE130E
16CE25E274C80575071A2BA736F23610E9862AADAAA49552D2A1C542C125919F
39FFDBA203D531A5797862EC19994EB015D3A2E1D9846F7F85495A9FD52DD231
B692D4FC4E741A3DD9230A4D650A8FE0F01E28499677DF134EF6C6B454C14B43
4899583170FC0E47DD48BCAF67335C613703E2BA1123605392B7163DE62A2032
43B7D81B9B3A1A3B2A147BCC66225A636283B1F4D45B42F326CC98A3B0237BAE
47AC98BB3F58D7EA633E39173A36DAB47F6828E970F8B11D113B2A8E53571EA8
687AC3FEC8EEE0C77171F3CAAC5CBFD12E05211248A9115608ECC18A9018FAC0
A713EA3903555905D7E29D1C73ABF96524385F038232FD9A41D6094BF9699DF5
9CCD03B051C8DBA7797685A6013881A79CEDDE7E2A53781D12F05415240C9874
961089AEB85DE5889046CFD6F423199535DCA95E8EED15C61BFBF76760771399
6022C4CE7C7C320301D5CF6875EEC07EB25C3F94C553A70235409242361403CB
91881EA20ED05BEB4630D1E0CE779D4F6477CDCF0658450EF906B6FC4D831F00
03AFDCEBDF244FFDECE750A8469CFAEB83596123C8F7557D698E913F65FA6D5C
047044A3FB28ACD7D8A62118514F9A4F0EBFE1D6D0CA544386D209958E82E39C
166F966894F6F148E80CD00A3DD8E93C9C279080FFAD1B25BC739BE33AD18C1E
A75B4C1FC380622AB54A020EE2840E81EC3127A6AA4C8D9161510B36B230EFBE
71136ACB5AD3CF9E5D9EA03684B80D3156C291D9F7F18E2FC68DB74B20F2AB50
459A60FA26B611C2F8977880FE8A5B7327B888A09023326B2D9212CE0FFAE6BC
3CD65F26CCB75DEED44F404C5CCB5493644672D2654AD9182AAD908668A42854
1DA3AE5354548D2CE6FF5124BAFF81171FFACF825483CE776D9843B68C4F879C
F1F35F539B4AA4D51D503F4239774EC5D2A53039D58833B38C1F5F58F4610AF2
1086A2875297AFE4D417E7CA5119F34E59773331EE1F4354CF6070A8E844D100
D069D58B20A9453519CFA6FAB1A36C5B660657F3E9C1BDBDFED5063CA4DFD0A5
D42117C717E8AB7A87DB099851B96E6CA5854EBC267891A1D8F178D9C5A94A3C
055C31251904EAA02C5E67DF836C868185917F53CCA695807E6307ECAAF180C6
D3EE76222D2FB0EF136D727A4C937BDAD26211CA76639FC6C9EF2595D174FA88
30A18AE1C56554EE402A762B383B806FB4EC884B26DC2A573B5927FFB533C122
62FB038D665B84DBC4AE1F16972C1443BBF86DD28DC00C70A93F05D398E04809
34B948A8138D7ED79434CA017C1692D8F39CE29F141E204E49013F32C429C4E5
00EA1A8079F34A6E3DC1FD9DFF0BF426694E6E2ED2018668B62BD2411C3CE49A
8BB85DE1507772B53E6AB75BFF14C624255E2F2BC444229AFE4A2684FBE4E08C
ED552C09CDB80ADBAB2BFB7CE27841CA18FAEC2921BAFBD8687C4F810F4EFBAA
F7E6E0B2CFD9B929543BC8C9410138B76C591935CF61A4A22718DA29076596CF
EF743D4C4DE01BE2CC5FFC7237A9259E62B0CF3376F4183EA4FE7D5554899232
43AC19E67D95370803194940AA70D27F317DE8D997220995B66BA6A4D8A24202
887D69C23D88E629A812E4C499E66D166A0AB5FE78BBF75C127D9088E6B7057C
C8773BD7B0DD19C991CCF5BF8575A24E5DC5C20226FF8039E890B96AB0C59A00
DF442D8E6FCED73C8C771345EEFB470C543C59D960BE4E2329B6F7A83534C2AF
267EE06D621BC3334F3979766BA04F5511F3F8517737EB69B41CBC8E1EAD869F
D07EE299DAB2B50F1FA983B6876AA9250678536497B42F898F2F96401BEE2833
6B24962B7C065A0EEAFAD9AF1DD039551830921C443100AD2E504C16590F8608
49407742694D57C74079D5D253BCAB9BDD320580E5BFB8D66F4981DB31AC3AE8
BE9253BD32F2389255B0491050D42FD207CFCBB8DF6A15526ACC343427EC7768
74244FD14C89617289688DEBC02A6E020E7562C8ED6B0FC580CECDFE81B0CBFF
F6950048AB847B7778DA7713092AEDFAAC0EF6FB2D129EC90373FD96DECF2B1B
5E78FB2A23A04DC52E678240A69DD3F9BFFE4684DD28D0FE296D0EEC9444701D
0090375002F1918C8DD19397F04B50695764479E2296D9E21B49B68CB7CBC860
D451189D05FAB4B56970CD156AF4E2FCFB1E1F43E822EE2721E984E4FFF861E8
489077BE69C8DC50CCB537A70F9439B5E83A3A865F7AC53A5E855FBF6FCB6244
D37FE43FC88251E2C58FA2AABFC429BA955411AEB30C3851E3999411E0F8A5F2
1AE4492F6C83E4690767BC72E25D0503FBF11341049D029FBAE54DF7F3A845E4
CA0D55BB799F81A1D67FC45645147F6442419D3A19BDC2448BBFC520C3A20209
9D7E9417A430304244193B8B5CE6EE63CED9FE4B02CFA3F32D71F34DE70DF3C9
89CBF353FFD4BAB647DA5761582C90C7AB5071280EFC3E597ECDE0884F0F70C8
A8AD4B90F90DEFBD39D68F1405CC37786A223D6072E7092B72E9E936BBC50D28
B5C185399BC5C251127B6D1B12A84DA1B7F2BDD3E8ECCE1499F3925DACEC4309
6CAAF3FE69F996DFE2E68556AA79179EB8A837E314E7193D91DE33DF6B1998C3
39DC7ED5482C1E4CB27785B3C50B2B3188D3EC912ABBDB40FF63D8266E619F06
217EC8D56A7C96B6E4EC3B82B07A1EFE376CDE4CEFB9477B56B794AF3E40CC20
A10D515A89E7DE32873B4B95ED5FE4406A9F37FB744445B16301F159CD592943
AF146BF5A725FE56025D186BF8C0C46DEF1EF8F55C6F1523281D24EF36708788
FBB3F206FBC691A93C2AEA072E8A1516730481C462A196DDED96476B39B35289
1CE36E21FC18837E9EBCDDD17D5F5E13D9232CE59C669CCCAF46C88A299F59CB
C68CBC02D9E9819A2B668E7E803C66A82D57F36FE5AAC7F406105CE1487A308B
95E6FD08B08C2D53455A41ADCEC903E9ABCB6ADF24D36EB1729C199C0232842E
26D38EE6E1A123C9205B9CB5B9A2C13F6C6782BB756B99A95A3396AAC293DB54
B2A0119BF23F24C15EAFBE38F8557636E6D2C08737ED48304109356C50C44733
1DBE5F084CADFC33726397207EF6DDD8F164D299356BE42DDF0AAFC63C5FAA03
840CA7779456C990603B20FD37EB3C524F42A73D44B26D6CE463BA264FE57706
DCB1FFBD0AD41ADC92E0922540D9AD3349225E6B8EB758ECEDE8173B87B4A962
AF9EFC8B9210617913129E86AFED8CAAB5D4AF142526472C1C09361F8E3C79AF
B84406562388EC9DDA8A888D4BEF681D1D04A10B049AB107C2423E0DBCE9CFF9
2C655F87BC70645DFCE5B9953B42C246D45ACAA0ED26154AB42F9A3FF38075E1
78627AB19D68360334D9604B62AD24723E74ED4F0A759F69D60EF707D6B37137
F6B4B93F604A39107E1AF85604AF078AF4BE2B4FF67B265454A2AEB5E12E8445
2783A9F919E96FF81D912306198FABE36FFD781A6086644F966031930AD652AB
49634D7A69D42A1AFF237002CACFC6B24F47DA63FBFAFA7B00759695B9853EAB
CA1644E74824BFDD450A04896A823C3529050AA960B9D932833D83FCB0912976
FC49AA65343193F93DF239A12992E860C899CE14C1894F4E5545FF91A27912F6
0DE02E09F6EDD7742D3F0FCA8FFA03F35D0F54F815D0B02D784BD7262B52663B
E12F6236DC74986796FDB72303838808BC6F22AC86BA610A6757836DF27BC311
5EBB604FAE4E8C46D31AB5E00A36674827F60884C308166720F8ACE86B117B19
DD19B0DDB402FDE3A7682E0EC230477131755F3823A7EAA7CED607C94D661304
B93408ADBB0872520647FA07B7B6A0D06F3C5A9923AA703FDE110E730657DE2C
6AE6027D1CC0B252FF9ED5F0D2EBB749EA3725A0055EBD6EFC0CDF2843A07895
295A53B97118CB7C169A266871978FFA3BFECE3465E9F0918267336CBD038CEC
212A30D4391FF1229E4F84AB4DF31358F02644E977F3D11D7F08293CDEB52C95
B6B66A2DF1FBE1986140E28A8B6DDDB556D22D3BB579328E4AD9D5C3475FD065
50E3A5EF20AD5F81706EAF5DC623312D05C50B08D9A8AC2895E51EF5E0B5004C
F25710B509F95C657D19D6D9E6F249553C8123CA7721E622E128B1397447DB60
018798FF08328B306EB87D7310047A748169ED914B77AC826716D3EEE7E626A5
C00845FA9AA63D025FD299C4C7F8B077C2DD566B50B27750973E175161DDD5A5
C76878980A10B81D7E73A5BB7A02A4163FF3616E6E571DC3871F3BD4C833460C
979549C7FCEE1F220DEF7CD6F56354DFE69300CBF350BF079B6A4B510C09A2BB
479CDD5E7030DDA7B801566668F08739494C0BE68F5A226D95398EC839FD5449
BBB8CB1B6D138FEB8368BF104356CCC73F00A3A167AD66F05115AFFAD8A8AAE9
1F17317DFEE2A9EAFA48610AEF5D6832D73E3BA99867EBD80E56D09838CB83F1
639BC50C4505E6E18B34B45B0E4EC4A6B774FB8B5F0A4614B9DB208D130BF516
8DA78AE8E4073D57157EC69C28E277F1A17FFA2F349DB210A33F62D6DBCA54D8
5B78FCE7F80A682CB7DBBB8268613B65C3EA7D1BAFF413C9D870AC66B4848441
BD94880D887BD0853F0E745508D8E387A34807D0D02BA8AD0EE7FD17B98CEF60
A20EB9CE5C454B869A6EB19CC8756AD1987CC032FA04994BF216CBB84EBEED4F
4FDF57FB83618F2569C3AA0BE4B7F092E0A168982E81BA53DA4C205C6862C4B2
EECD079CE5B77E1296A389D60A925B0648327DF6B2CAC0FA2C043B1A2F4CE095
DB479221D8EFD1ED3586F545F77A6C45651C4655E028EDFADB39C0916F2CF2AF
56DDA1FBC56DBE85B115C7F1CEAF8AF6CEF034B7EEB0D96A5EE961480A47E384
E48BC0FB4EF007EBB868DAFF467DC64EE410F3C38BFE4D595D4086C01ACE671A
E0FEEF728C697E87F13BC0D130FD930C49678B5D0B5985E79D467795BC437C3B
FC0BC98B0C16072EE8BB0C7C806A639F45FAEFCD5C76D29BF0C50A680F0DF3DE
B82BF929DD037BEA807C8DB15485BE5285E83600D55508E00C6354D5DF611396
50117E65779D80FA5DF0DE22F7D2C8945A5B9451C48C374BA974F6032F7CC22E
4B6F6D6C4D2C8BE376DBFA348CE9786417D5B97EF2DC9FDB8D5298BD6C19587A
51978F9BF38646C47EB6B3FF5B23AF87DB8C6BE53FC723139C401C5A0CB0D9E6
3B511307758244AEDF7FCB42EC3ED95BB7437C84AADA0A2AA09EF714E4BFE0D7
A1352D7D4274677B103477A243F16414F27C1433A5B21C85C4D2603614AEA308
619B0B8D04CA32FD2BD85FE9CB0CBC01BE86B8098D6CFA831D4D11513E03DCB5
7BC461B92DD793E87BB01770779ECAACBC974C5E9EF4CDC3E58AB3D9EDF47AE1
004EBBE607CB2A3FCAFE42E6A907DAD902718283670DFC26A600CB272F79AE07
698A0018620539FAF1A50ED78370EA8A21FF44CF705F713A4FD09177C50200F1
4381BC83477E81D9520327B17837D2C83F0DA0F874955E5BE582050FBB0283EF
C1BE822319C647E9F010F17BC81C098B5945FFF255705A4D77311EB7C01522C4
E7D38745357ACC8A77DE7108D85BAA9AFF02BA7BD6A9F971DFCC0433D3116D7E
782BDE11359FBE9A8F969FC41A37205C97F4E2DAE9A904C4B300F403060912AC
4899921DCF8300B818383FE550B3DF19AD885292CDE418EBB828671CC95C7628
9D95C3117629DDD10514E6C44FC94E718D5EBA6E86C248771F736073D139466C
30217A7F258FB5FF26ED699C5E4DB434DB441415F0DA207B3FAB2ED31F43C1E4
F64C84CF07CD7AF33A0EF12559430E0C2A9C8BB7B082707B2B028AEC886C5417
DA88F96BD9BD67E0A5EBCEC560B2C88BA69B325A11DF1406AF1D0AE60BC2939C
038A308187A101B6ABDED1E6453952696AA1F098E9DD27E4F23DBFE8D81777BB
DA711E73F6CF45F31613A24A30023BEA9A27D8BAFA0541F2E746E3F5A7F0A84C
2334C2D0E64590A42D4C978F194F0502B7E610DC069791E52CE628CB54536862
67667E1D4C76AF0CEA8A936F9CF329B2F4350B0D95BC5CFC3BE8595738E3F5D3
003710B04AD8F1767A495CB58A5D350AAA08318765F1F8406A7234AB0C0FB1B6
F12EAF1E8228092609828A232A2187CA1F9C67869C3CBC0648C34CB88D33935F
BAE571E72647098D78FC2B67D5B60F01E33162C568555E92BC759973C4AF3F8A
9496BD691D249DC236DF188FF79D3352E460D00EB9FBA7B36E37C45466D8B8D8
314855684448687E04BB86E62DB883C5E7E3F11B54FCE233A82D99958A7CD242
F34F4F47FAC184362866F8B534249B0DCF1743198542B093900F05F22DD65388
E04D1B5B2FA357456E97614EF00EAB92CBAC25AAB048F0EA0B18F47C1C38DDB4
DADED4F7BD5C89F7E9583F866BF240CBC92120475AC5D6554A37DC03F7D25213
0515FE125DFD62D2C7DACB565B16F724EADA26DA0AAEFB825B5D8A26087676D4
034FF97C512C2C654F78E4C7C95D376D2C48FFEA0D825AA3CE8FF2CDEAA927EA
8ADC88C53D2A74B7D6C493BB524ACE854107F555F4C05FDE1F82292CA07F3948
B726E9D3DC6F3AA19E84C051D185848F038485EE701DFE15086D6492464AAAB6
F85D8553AA81DF891DF490B9ADB6AE50712D084034654428ED14CE6F54A5A6CA
C1DCE1FD8B15622AC1F6C8A56E75F0E84DCECA6AEC42602316F201851D31F54E
6002A3D56EC5A8C686F4E4A3F2972382441633AB9F4342BF11FD360B1F24B22D
4EBDDBEC18785B4B37407B8B557E09CFA6CC2805DA60765CC29F3A81303E28F8
EEA9166EA302A957B7CF608BAF2F740DBB68DD4256E44F5AC000511DE3602988
E41A36EF964CB853BF9C214EBE91587A24F6F5B93A7E310004C69239BB497177
C630CAD99148FF92280A7479F1916BAD37FDAA2A1350611DF27268292827D933
5F18B4F06463201B00F833E21F66FC90C3B358537D4D860FB53A39AA12B1CFFC
CB6450B896CE0731E2045B788212270B5786AD55546EA518308C9278B440F45F
C2E6073239EF68BB926C483E82D47B433AECEE97ABE431A8D1B05BCBE69CF10E
B696F21E3ADB65CF0A519FB5A109CA9D14EB30F6F4C1B85C7C5363C128BE96A8
72391420BFEC53355E4FCFBAF202BE40ED9D0FF3AE191ADFF9F5DB0FF74793F3
C5263756C50AB4599F4D60FBC4C2709D6B1A188777C0EF5D26165777E7E1A886
AAF55790E477C71A2F804F5BC335B3215767185ECC97859389E6ACB50727DBCA
E3F80C8A308314EE0814BCC650D9801A6791A3CFCF4E7C90304504CEB652D6F0
EFFDFB8082AD3654C3613C899DCDD2B16F71A44E3CD6BEBFBA593CE34DC9F54F
0EE0986BD86BA865BB11FBF008D13A744CAD69BCEB3C046C2694DBBAF882F878
11A96EDDE55E91EB15DCFDF6EB447EB37A3093F8BC87EC54C4E0C42B085B628D
9962C55E71761462FE9F1C24F12DA53F9865CCE54F1FA30E64F2A87F902F2836
15BA37673DFAF9E0D2ECB4C58BCA70FB7D927E36A2E4A6F34E754C8DD8EA2571
CA77415B6E81FFE824554C74679BA52800A6E1CAE753D70AA12F0713BAD6206B
689CD21E26A5AB9A2BEFB424EEE5ED2029C4889518AA85AFBDC74CD5E60C0E32
AF4511E41BCBC8A788EB5539C901B03E67C1468FE729A2C3C5BE46D6B9EFF28E
CAC52EA15A23FACA0A7286E5B7730263DBCD3D7B9C42899E5BEDD82CBEFEE9B8
5D9A74BD0299162881D079238F999D6A9F4E5B8B2316E8CAA48D18DE6EE6D2FB
90F3933689ACD25EEA2A6125867EF523C2D6CF21873E1D96D50482017147AEC0
EDF0480A26C76849D33630C8C2B842CD2E9256B4C11C35BD8D0F969871FAC523
EF8FA0A75171570D704EB4E75BA94D1DA288C85830A7578D552D649D9C145055
209ECFB2112202761FBF8ED8506075894FD728556B4481C7F71E5490795C548F
028079DC4E47AB0B9B2192A2199B0627088CB2993413B366932130CC5A24EEA6
F04D8807BF6C64981041B247F3F194D6387F64103E2A76CFFBC91DEBC2DD56E2
44F71424AB6F781A5822A147A0E22E36D40917FFC2755C6D47F7E4103D0635BF
28864CDE49A92C4F7F8E280914519B4C58D8978C9714CC588D047D6F0BA7B746
EE015EFB334F4F2A5BEB4C0D34407A7CA919EB41D7E8BC0BD4D3EA61170F94D3
DF304185F0D2FE43DEBEC8EFE49627213BA42C597D0FE5398BF694B19E966F94
B1F3FF879474E9EA34D55A9EEB488A8BCA723339562A07092ADCA96F853077AE
F7EFBFC418770CCACAE3F78F40E9A45653BBAF2A5DCA560DB5B8C474534B9C81
6B706FD5796FC3F2BBFBA6AF616906D91F1FDFA35637E92BD69855D1A574A791
473CC952A92EC5067A346D48AC8D2CAC9C2990A7CBC4991AC6229CAF607B7B16
433C90ADB15FF5F6677DCA7F1C959023B655F22809D752B9BE85CB4F7CC1656B
E602CAAF7D89959658835F6DD1A7BF46C6B0D78AD8AACAB446B96DC3801FA871
5FC91FFA1CB3BB1FCA6382226C92B9537DF8C4F37383902B4E166227DE08167A
D025F24591E5C2F51F98C01BF41ACD72DD27F864EE95F42A411D26C48562C814
D59494554390A482657E7A26980893FEB5496F9D7C6BDE291A2BB41898FD4BA2
CA4021C282B09B20BA9B4009B3DD6A5FE918C86E9B207AB57F34C18CB7563751
3AA762A8A88C2E79E09661690D8525EF5A5B34BD7C03CDEC68276DFFF44152AB
74937528F717EE2E59FD9E50F7090C17AA2EB223C5C997AEA092A2436C0B9073
B9CCA236087D55B98366906EAB47CC6580D973FCB53D74BB1BEE16DDB0839E90
F19EDE771FBF4FD94680094D0A888D0C5FFB8CC9C9639562EB7A2AFB114183DA
45B3EE908C60627E06B99C73D440591249C8468ADAF74763A058CC31CD5366FD
A28662B8B1E5B0D69E77228C39700A4560985B376D7905F7302C36F97F5F502F
2F1C38C001D4A22BCE7616FA610E4B920460316C88FF71B10433A6A0D341002D
08C85443D34FD1DCC618F3F16299CA91C4A97DCB5C1AAF8099653AFC4BDE0B93
4DBC586BB071E1C6CFE372CB6A755035B1B05FB1E0280AC2FBA2FF488B1F00E0
536D48ACCE236B3F01EC4E65463A76C4898B9A5CAD86EE841C81626C4BA6DA0F
8F6EB82D0813EF551EF5AE9BF193D0622DA31ED62553CB9EB3A7474AEF7C77EE
EBA3B44D21D66FF0FCDA9E9B8B26574391F5673DF94C4581908538FF1983372C
10C59AAFD54E4B9E2A7773AC17BEEA178D5360CBEEB65035C26FBEFAC475F3DC
F23CDDFD7C5AC123C412BD8A0B47FE10639233EB195774678B4FC74C56AA8159
88F2D2BECB45091D9813F535101ECDCEFC53BACC6E3BB5D80DE705B33B36E965
82F36B92D1FB73C8A04748F803F96EE6D31BEA60323294281412E033B2CFFEE5
E0F97FC9B58B6A605314F854A16AC3011DA8D59EA169761B7A9C7B95BD29B09B
930B0D82F2C39F9BC4F00585FC5EECBE80F4F0307AC6A1696E4EF84A749925AC
B54B56D6DD6ACF0F1F7F03277A90E4CF1FF6F1C54806CFA77D421BDBF22BBCB8
E672E80C56AD004870D5241AE35C075A3F6DD61C993326B94C1FF76F3EA659AB
97D49209F0EDA8FD8E3EE8BFB0B49A2AC41080DB9F3D8ED4988245288236BA68
231730C7F281A21D820F227EA9DE6AEBC918CE96DC234778DA7CC148677359FC
5A88C4BE9CA8EA209D0ED925508969E8CF42FEF3EA9F9172129D5CE161651614
384D7F83214B975BD1F082D7E514335A7075C6FD56077C00902CA6AAF0C12EB5
696A397DB5F22066D6F8D2701298CC9FDA7928F99CA135B6980A0998DD485662
7B9A8F49219B38AAAE5471FD6A61176ABDA6159A270497C44D0C5D34FC406C87
7AEA43141AF4B68F3073DAEE9D88B75EE46A48E9C4D49E716E828DB0E87D5D49
3E16FAA75186E7E463661F67414DF1A49EEFF600F08B0D75E13BE96A55B5C8F6
75836784937204EEDCCFEBFCD6A2934F9D1E4A815C3450183014518BD8A4A9CE
2FD561AB6B3DB80841252A006F55BA489F02D2D90B7ACF7A123900F1EACF0056
E4501B9D07C041D24ED01904D1B9A2C19D04EF925650F199AB675E8A439D4D1F
C4034B7B00924FBC7A16441727480D1361B82E1B0B2F7D7107A377EF76DF1F1D
6A1120C5BEAC6C9B90F80A589C2C8E6BA68B8A9403FF86C7845355222D68E2F8
F0544CE29F3929A98A589D9CEE75E29F5B31DDE304F2498F905D1D74E554B61C
C07CBE503584E123364D5C226284125367D1805109DE664CAF43DAF10305E52A
5C4D29C53E6297DB6529385B330A08A6AB55D3E6969BEA994267A832E18EF928
4C7C5979CC234E42B59D82B2858C5CB21BE959CFE857883A29E20B6B00AB8DD9
B808FEBF747437A7576D46E41E492368277FD325D5A015C1D60E3E0CD68386A2
BD186064AAA58F3D9A4EAAB71035029680AEC79365C6C3BBD518E5832D4A46B8
CB0250E88073D2DCBA11371D7F846959F2A14ABB8C7E08CA3D2F073F1C099004
B656FEFB71E0F03130D1E3DC3919458F37F2C0205B70A74400FF397574D7C0A1
ED15F4A6B460EFE17923AC043D249897FFB1C9913179AA9EFAF1F18BA2BDBDB3
0BCB72E970396B1FB8ACAE10E2EE812C36C1E2B485259EA0726876A1B6498F5E
DF6E0C13AA68398A6E28FEB3B0BAF9B77793D9BAB1BB97CFD909531C68EEFE20
CD2B55EFCF2393055C9EEFC1BEDE9E9906F6A6A27D431B5958314B0FAFBEBDD1
53FC3FA379FB4FA05E9C2DA2CC5689517F828829DE897594668E5362800B0742
66808796540C5E982496E0007978B358BBD8787A96D8085E0A35BB1AFFFDF087
FFAE2E59993FDE5BB0252BEB0EF930541BB33BA3A847E228958C8ECDB9ACB8BD
2815B35E37B35BD900CA021AA73958DC8DBE47BE80E806372A8654B2505C1375
1A67DD030104698695A78AE371279CC77F3C89AC8F1622217B2B0CDA4A3C5F23
0481E42435A2AC03D88AD52A35233116ABF21152E2EACCC2B86007FA7F9612E5
2ADC7043B3BD7D179DDE5DB36DCC13A89DC8168DE7CDC41893478EEDACD50FA6
1FD2BB18812A646472AAB8D653B37C789C795E97A5370057EFDE8713840063A0
BA6F53EA59CFB4568045DBC7366726E0031C7DB004BC810054B5515D56012DCF
662892D77E823D888D7918C6D6AC4FB340CB49861F7EA05779AC07B66C1E17C5
DD710E6DE3B94D853362CCB1538C5D066117D48B67929C0607DCCF8B94594837
0BCE1B20E379D24BE9A49C3474DEDFC3928949F1E3D6428EA6B0CBAC87602B98
D97094F568593FA2731925615014990E64698623F7807B966D24D9479F21B36E
B96FB5FCCFB1D92C8B0182782F84277397DAE62595E8913877434B12D149E668
706DBABDC86EE288A39DB1879EE205A354FFDEB75DEEC2216280187059B0BB02
205C95B68BE31E7907454FDBD0291F03932E92CE5320DC3DA94674E8E633B683
9A0DBE3B1EC0269ADC9B69CDB6C18852EAAA0B86C81C01879AF1500FE9A95034
D47818B8235920A92F4F2BCC6B8032AB362D65C77F144A456D5A77B0C43821F0
400EBF34C601909FFC3F3564B6E93FDF28014355835819F01A044111D831971C
4BA33E9FD206A7B97E69443C938C3ED674D12B77414032B6391A56012DCF6628
92D77E805C52537DDF27956B459526E5CD19579F3127D1D8CE6A5C6CD69F02BB
A5667B7AD3375595524D22C358B736991924D58247DE6ED8D91F32EBED2672A3
B75FACE39A62EBF9B8FF36B39A9FB148BC28EA480C6301FFC0A4E59263EFF860
E0F760A402193CF7BBEEB04D18803CE91F938ACCF71CE9B70B6D626B4B7BD2D7
B85BC1FC027EC47FB0EDE4D2906CF1B55597831D98B641D4B2BEFBF1EB66E2E9
10614F0C02936959E2CDFCCBA8D55D4E992F9D944EDB02F6B9D49C876062C19E
602D5D5CF8161E0E82187082675F91CF7BB877BC1BD97582F130994BF9AB0BC0
438C5F9AB06D6FA688C48C7DCAB3F27D94801421B2FCB9A96154DD7D01B83978
699B881FFD2D63B51E71CE4F9FA406446C3F30BDB2FCE712EB0B9849C4FE8FBD
210694BA937FC0B4D6B53B53B9E8A4E78C119235564F4BD7CF18486E33C6AD14
424873AC44919B5C41CC562C47F2DDC9632F3E1296252F084D6BB74CAFE6D85A
83BB6C66B998AFDD35BEEFE05CE8ED74EE7E513BBBC8C868FB6AFAADECA9158E
C9419109D47C0ACEAE751605A551D654286D5C2C2D8E23C436B5C1BFE21C9A4B
9D5ED2B35C47ED5151A5410602D04B01BE3E49EC87516D6B2F00D56237E3430F
B8AB80908254835ABA6B381EC379295DB67E7B2DA63D8E0EE3E998ED5A69BC0E
018F44419EFB00053102324F4C54961BA2C48F44F01EF26090D631EF06BC9BE2
5D625891C65026491DFA2F5C337C89E9DBB351772B39CFF1AFC1D9270C241D2D
5FDD6069C6EC81ABEF8E876DAECDAAAF8AE82E0C0E8E06F1934736F8D73589D0
E11692FCA211E046B6A382431D8103500E3FE8AC2976782D0006C2A49B0FA8E1
EB3ADA8B0196C45E0EA33CE0C93397C6BF0D4B077C496966786FCF969639BF2C
227E8B08DEA68A427C573F654C9EEFA51F513D368FF9946BBDC303CA24A1ECC7
9CA80F21118BAA9E70A8DC75BFF945955F6426C143DEDBC054B6BBFAD0FE7766
EDBD7CE06A64C55D98B4B6E2491256DBD49728AB2F1555042E52D5BFA90AD4A0
AF17B08759FB45133291C5B945CB12B0259760023D3A3F94CF0C7669ED9E365E
DC2D5A99F18C212AB26967845116549D2FF228A4E253490F1AC29E479B090926
F08F6E61EC3A003AD97E7699C8982A05794FC98FD87584AB9E41653853CA54FC
833F3BA1F720CE8A05972CC2043DF077AC81FED5ED45CAC091AE3911DE781EA5
75E5F8206663C717536ACC410871C952C783144C542042A98574F110E907C79D
B9CF37447EF021547AE0F7544FB9072B573CFADF17F2FA2F841B770D9BAA91BE
9CB5AA31AF46279B26B3B10AEC09B7B7D697A6CC355BE29D6BD5706D9F0A6F5A
4CEAD10B4729E5749A10EDBE644886443D12492C8458896D2536853A9B90DDDF
7AF382425ECF399CA39D217A4240C0646BBC718267381CBF0029178B87DC935F
9F839546983922682850C4ECE4F22D72CF86CE1AC1CC0597E5135598B1011B41
84BD18F186FAECCC09D7C7CC129F6BFE0B3C411DEE7242FB50365FCA266539D7
7E9CB0D87B5F005F4B13EC23971905D8C31B9C3178133782ACD3465C5CA2D45C
688CAC47915FDA3D82FC347F0D24314DFB378B7F001843D449827083CB5367D9
FC51A77E2745DB8BA22B1E79D2E2E7F8714AE0B564BEBE2FF35ECC4DCCD14C35
346631E2ED5794259ADF92A39FAA53198AFEDB046404E51D612EE02C17329B1B
30C213CA73E745515DFB5E3CD8A2CB8E1DB6D2CA0CB8CB8E904E7535440A0654
93480FDA1C555A44CD48489794E223CE3A1F5A84930FAA87A50C937B559AEC19
83C732112C6ED490BE8FCCBC2CEB4D2B531F07072C30026AB518D1BE399DB38F
CEF12C4E988752A9B7138DA3489F03F9BA2DF35DE06DC843B5446A9665C86476
DFD6D591D11D35F3956CDCD2C060A03B7E474179AA81BB0FB25DBA1C7EEE0BF6
6CA01C0C71EFA07159512B12C78CF2D2A6913A5EB2245A3974E8CEF99710AF2F
9E26B3DFD6E842A797547F96F9206935478D5133B9E7614C4DBDDB0AAD09C439
797D92E1120186B88DC96CED6B11DC2D510331888F63D113F9572C0413F8C790
BD5DE8AF8413AA3057B7EF641B63E7A29DC5D6802516EA5919D0819CF973E6F5
9FFC509526FE60D369FB0F35D1958370014EDFD3445233A03E5B0520FA526840
EF5367946F3DF67C10B47377A99EBF04DD572C623DA41AFB80699B22545368AF
6CEFD616466DAA68B04EE1C357E7DFCA59E5ADE840293284CAAAD36E34CFB37C
3E6083A9639E040DFAD79700B32684652A92930A16A3B2C06DB0195090203A0B
2E3E378303C4C86DD1AD8A97BD02D2B6E447A751622A2B85674103FA3F81E297
E7AEA335F81A48D4511ED4FB84A59F95C5A3572DEE420EE2E8F7EC12F665A6C2
0A8F1AC9C1E4C38F3C44C56A09C74FE847D4F787582709775477B23AB62F1300
4BC7009F6F9F9EEC5E58734EABA8A055F8A2E3C28E5EF33151FD5E006C70A17D
7880F9ADCE10E7EE0951FF4CBEB193B0708535343334A8479BCAEB272DDD9297
2ED8E7789EF9899B5AC4C3C3F9B01526D9D71A74984522CAFBAF6CD275B304B4
BB18317E3AF85EF0E05ADBB822FA6AE823D871F39B9350C42F6BF7A4521B2155
4098DCD8F7DA25492233A74AB05D2D7C3AF72212F5C808FF97D6EBB5C4DC13B7
09F0A1C98BFF1C73259669E3AE2639BE0ACE6D50AFECD05D9B29086676AE09AD
2F2C71C240A7FF9D029A572F53B76D9040AD0DB47314E9395370152136FEB80F
752A4225027286DBF1AE8B44DEDD7C754FD217B82820A3C4CBD2C00B2639B3A3
6AC4C11209863BA41EC5E12F1400647CF142B49AB4E3EE469BCB07BF3085BFA8
7F183CC0CA3266EB7C24BF59913E026E132E8966C4D5790BAC88EA178A568DBA
46DF9FACDAAD6E56338170FF46E358F0043AD5D69AC66F6DA0468D5C98B4E9C9
9FE1B4DE04B482145F3FDFDB539E597DF1BB2FFFE276DB12DF81F103DAC3E37E
C2E95EFC3ACC0D5187DA632D4BCC51FE58FC26FAB5DD000383C1C9B860B740F2
B4D53A8656B4EABE3095AF2A1B0A94CE082C9B9A6C7AF788223EFB01D8675632
47DAAA494E8DBB6F049C331EA174787ABA8C3EBCA6A4A7AEFD9A45ED474F10D0
A7A3E62BFA12665ADC33831D41394E8678E8A4F454633B52B445FEA99105FB06
99485950DB378917938A18DEDF1292F617922E884D87292FB693AD826FD959CE
669D97E45834FEC5C90ECBF4DDBA641CD8A0C7A4055D56B801F96254FE0E52E4
700CC663CD9DBD73764BD1BAC318E2717E7BDA4097FCB8FCB635C4ED1C020962
CF1989F1179C80ED82109EF203E8E6F42E7894228CE57865184F7B0295EA8423
C7301B1B5518CC31B2BE7A94E27270B41AB70586880A7EEB24A6834CC1EC9C24
541C44C3092FBC68C718702C35B6334C7A02522104A5B38A6CA58290D557AFA6
B2F76D3C2C0D7C2FEF33B1BFB104E77F7769C22788334A91C91F02CE675DC148
61A7588A2772E3C0F8EDCAA35785180464F0A9BC8CE984A1A3C052CD7679FFFF
591E87C0AFFB3B203F6E03A90ED01E2FB364FE46D51F2DE86747E75CB9EEA3D8
6513574FF5CACA48D0EF83D4F56FDBB0B23D75819D89695EA2F0320C361E06B0
360C86AAF98899221AD6642BB8CE78D3E0B2E15022929D7D4B8B6AA528E19898
4098111A971A519C13D55B12F687597341C49575D8DC6015FFE2D6B4C7A6EB87
52FFBF3765204C0057A11348E189BD98A3D65FD799773EA1F2B707077BC18F66
A2B95F2BD0FBFCF937DD3BE4A5B31D1B869CF99D01F1A3E0367556933433DE55
7922C20D8C1D4BC1F344CBEBE2B7E8689F2965CCFBCA090FDC33F885179DAE71
D9017F799FF01AFA41ACD230B1E0CE5C51CB7B4C8639A75F061008D7579B368A
22397F22D8D01F2128640839E2CA355C7C0947A11EA87B4E08CAE59E83FFB892
8BAE071B42DD6F20B3C2C736ACF14784C9BF367B5F0FE8A0E749B9ABD3AA4637
5B4137BF65889EE9FDFA11A543D6358BAA6FFFF20ABD352C6898FB52E8D60EB8
F100DC970A6F6FF1EC54033DF372D7588606F7AB41B429CBF347632CFE037499
C0CE955C23D5D0BFE8BCEB3E07D6EEFAFA9B374E36996C3B1280F1CA5655EB64
342E5FB6E18F2149FCF4C0F743AE5469F4E8DAB9DECBEAC369D71E76447BC024
B5BE2973861C005236906B6B49A9E2D48836209FD44EA76C173FB3174629439E
6B8AB2B752FBF5AD056EF2A9AC6BEAF5E2FDFC11A7338F380927E5F20F65E610
32E53BD00CF177C4A46EA3F235D96256173888541BE8C426A6B534106B32C622
96D3FF4A3DF2F0A91D542493AD9EA37EE3D2812258E0366966388285EB6B480E
E167890B0007DE7CA9BB46DFD90D77302E6290263966E1A20D911173D2A54F1D
1B22718DFD7C846EBC9B9A9122A20E640BB0061D51718A417DAA97D2EB972EF2
FB6E3B03EEBF0E3F18B97FAFD3261F152EBA489E6FF5CF760ADB6FA04799E3C1
DEBCE99AEA7E08AA43398D3138DD772AF97834F949E9E39091FE140E31CFA488
2F7B9B62EE1105F3D6398459E57518AF0367C438BE0DB26F67813D77BE0E0C15
95E2B54CCE665049EA81BB05009F31053ED2209687582D5892B6C65955ED92B5
821AB09B6750FF4F7251375AD50873987EA5CEB924980FB4B1C08FE654FEC960
4E48B0C79CFBD23838FD7F190A983872C58A3EF67DD12004AA92D62C92068B74
EA0CA8B9535FF52AD52866C01952826AC4743E91424EF80C55CE69A0A1BC6579
1B62A4BE840029E49CA4149F93605BA3D6DB449F6C671E9F4E4CCB06BBE7E942
83CA7CB351D9E81B004F6F72DEF61D99BF7046E19E477935E77B0FD3991FDEB4
B74E40BA8E5C0A6D514873126FC6DB71D7AB6588B7422518FD1FFADA16AFD4CD
4501B0ED18E867FDA253BF1508E15D2186989383E7F6AC2F5BC2B869D0BF2D43
E2DE63AC59FB8007D3236D4049164DD69D9CBDA3DCDF1090712BD18B65110D59
E3C200FF9D077211C76A68D5F97FB3EDFDF937F9E8A06E46B688AEF740CE088C
C453BEB1D6623BA6700FEA3910F6AD905FD28E971DE74CF16F0B0C40E395938B
263BE5573B848F5A8536E981EBB7D3D6F47E28A71990C9D9D9D8E697C3CC4FF3
1BC2EEA82F135F67D5F3AA77333B0AC36EBF5A75BEC8F6DDFA7C35E619297837
396EC1FAF6F6A2ABC570B9AEB820F338FF7792426E73BC6E074C5DA5AA0DC9AB
51AC3F7419453782A406C79F65939B07A261F5D95B2075E90C0ADBC9F5CE63FC
4902FEE6ECF3D4A2ACACE1C86E0EC2BD1221EEF8FE51D3EE2B81C4C11EF7AE69
BEA1E770DD3AB3599F4F0A09D1BEC9AAED5614D2F547A80D50E057F505088B0F
0D88A6E9041C7C0CF80CE45EBEEF49EA07A45E0B9902F099B8A4E7CA88E23856
9E4E6FFB4AC38DF549ABF13466A9FA8F120B9B0ACCC9BB8A74B900D35FE67876
5C37E5084E2D9970E2169020C4B058EFD2A8E7084C4A88DCF4FDF78157A6D98D
F52EBDEE05CF9B087B27738C3573B37D6EA8C4D8A99CF6E0D879A95373D6E8E4
1416D819C2561793DAF4414E61A034FF2F3B605081EBBA7882B98A44E317D45E
EB68900934484DE67A2EA19D27AC66E3A2F80AFF6C8FBABC84D662378369394F
A1FE342DC0767C8843DE5B785AB6AD0D1B67577C18B1787032D492C1B7D2532A
2ED584F3DA60C4FD0D852D27092AFB45DBBF99A6FADB8BE47AA6C6231A07E2A6
8B669E13C50FD4328319175427337E131D7B50FB4A47F96B61BA0F88E93BEBD9
2DC59E210B0FD7F8EF6F01AFF2EBC33ACA9B0CAA3CBC800E92FC05630D5CAA6B
1D5509B534D00C5FB6C98C465F083258FAA843EE8D6DCD83A55372D68D0D3C02
ED464551E7047A4022C6CBBACC6D85CB3FEA989BA82303FB67DCA4A6AE550FA3
E97194BFF317286881A3F7D4EDFF6DD865ED9D44671A24849FEBAF1E31B21D4E
58135FB4739839AE79117B58648785F1B296B2E115F0ACEEA2BD526277B048A7
110A03D505413A2A268AC35B11FD4E5933212B4E4CA2D20362776E6D5B2C8C9A
163B067FC143D2D76424AC006ADFEE0313FCEAC44751C9B017B5D2827368C526
F11F1A49466B554A4F0BF0C7E1C4A90127782BAAA046949B34325ED1DAC842D4
9587F10D53012BA8D9196D498D55EADB30BCFFA3A71E5F311839D48651D5EB6A
E923223A2797AEB39A0045540D09F4D98FE9E8ACED1173844106270041564210
4A1D8282704F444782847A3CAB37C02E120339A1178DC5CFE650832EC9433ECA
01891B4485CD019DB08C6617361087CD63EAA37F03347D5EBCD781921F4FBDC9
83944DDF01B3B23B97DAA97AAAE956C340D41AD0E4CCE26ADE8140513E1CC430
FC55B3A379FEF69DB0716D52A0A28971E1E0AF15A09040EEFE06E85C4375E47C
6B99D9054BDED40784B39135C6096EC30B2DD5245F8AD295C50961B1B60A7CFF
5844A95F4D4E2F7FAB279D0DA7D8C95601BCF82754DD325081283E40FA5060D6
E696850FB507C62FC7005A3D8D5D6EC4A3A80577053F67F387AC4C40E15D2F28
D58870D964D8FA38939A024DA816C9CC7B59EEB51E1AED59967BAD4714B7FF40
ECADBE18606C5F05F35600C178EAB069AF7233DBDB85EA0340EE0279E74AE26D
F6078ADFA8B34638B4AFDED98A79B1993FE378CD0EA5E0C23465BD527F267FE7
79A17787772062FFC861C8B6559F06F3AF119EA6CFA9D42A540DD9C60EDFABF2
861D83B02BC26F696A084E65F8E20C07733572C4C243D978BDC6063FE106EB58
39DA490F3DFBA9E148CBE617DC7B82C92D7BF00C6F812943F8151675E9F2BAD7
0BFE001E2757520C6D50E18A0498F374C03E693DE1AB724674F355EC029E99AC
FC77529374385118652EB37C08EF2CAAB05677FFE4A5FD6AC7A0A910866905EC
04ED310E371D89E5C4F07D6A257F4320F51ADEB2045B3AA8B4A96F30722AB4DF
AE84C085461C1FE3EC562DB23D00C09A49DBF96C785484BCCD585D3E1AA620CD
19886D6B2B42BDC4EC4570D86A8F467541036A0DEF8A9C30D4BBAAC7DF34C7EC
1313D7D45811C11D9EB85C3C44D1F76657BEB0DFBE4E4CE7DF8C43E5C12332BC
0767B9FBDBA065DDF2B68F55F25416B9E36A040DF342DAE3457FC6666706EE7E
FA0BDED0297E9D7CF68375BE8B074FF04237BD9D6DD3DD9BE77A850F513BF9AA
E27CBB31B9B5DD70E9D0FBEF5A9BD2F8EAA9A9ABEFA38F47E694C266A33BC2D7
2B94CDC6CA6C51AB098ACAAE638112EACCE2AE47EB806D7EF78648BCB773AB17
B7DB1F34553B4A957F3A2F5E11DE056B9A25F562C9F66B1650962D4F8E9D6419
E26EA22B17CC42F71F5A271F1AB8EEA5DD9385F5E046C12C9114EE466B45DF3B
43B8331D3B81570610DDD4E60A14835DD839001EE9A68A742F1EE846F1C037FC
15695711BD33FBA40F7CD60A8C0A838B0A7ACD42579B55A2F2D2DD4F84FDFDBC
70A40B5551A0AD3A699C0CDB49EACDE8F9CCD11A4654C502B446D6689C31A43D
0CF000361EB0C425A134A8524651CC35BA330B1A9B6DE32EC81792A89424C6FC
2E86128E932D540A6B9104DBBB13D97BE75496E417DA946E9A0D05E0E851E054
B1CD76C0475783DD301FA21A398AF26B352B19E1D3FA7B6F643681C391B44F15
3E4C2D097726587020B972E1CF363E868A72A336A51672A75CA75006608CB3DC
C69E16FAF62AF6471BDAC236377465F477FB11E6670AA1D25600CB502D178466
452988343ACF6BA32E3CB70FE8C85E47F3563ED83A7DE146B0FC136704F681D5
87694F77E73A384468B277F81C433A9CF4A62A0AA43460E1C2461115D3ECDCA3
E4C5CED5ACDEB6C424340307ECA71DCAA6FEA9A0A02900DE823DD129C7BF653C
A07BEE7E3E235BC66EA2B5169D30A65601E847B810FC0561B8FC68CCDC5BE328
5D3504742D31C0B69D34691BE0DC6F1ACEF742E0A7BBE0CAE264A6CFE3FD00B4
4B5E5373431EA30005C31F177816F9B274615D6AD0880FB2DAEEC0164F3711F1
CB6D95CEFC6A96548317ED18E7474C84BB1BD45C708938EF9F9CE5FBE9842A10
0F73634CCF12379958B45B1AFB7294BC350D37149FF9588A2761DCCC00076D10
EBBB8EEBCFDC922C563D266B0CFD366FDDF8AFAA4CE443B81038A9C4D2215528
CEF54546884C760865615696AC90651DB04A500A304AE6F8C6F223319A4FD8BC
937A561D28418F2E2B794E6B2265FE2DFBCF57D3428D0405D93A8627E404DE88
A391E3F5F73FC5C087E2A9C436AA35E08517A27964C5EF3D258255C1B82F3227
E3D3F03E7A17DE9394F4B78EDE955CDFA2ACFB91D1D9202482230225853D73B9
8FA703C941C2F9D401FEBF0126FC145DF78D55A9A925ABEEB7491F64B3A55FC1
2D29D46255761DC56126D96255814147758F160D84999086BA27F75686A7AB03
ECCC79A9E9021CF7DB7D40A2EAEEC1EC40ABFB539361D575195A086DA31E0228
704566F72DB80F328FE2573F5449A6342EA470D8871770919058BAAD080D2E91
7EC3E48AACD2CBAE552AA46549E946D3547AF47C93215AD2E3649AB1932FA5A9
8BECDFF3C3060C6A503FCF4806DE74A18E2072DDB8977F9D8B92ACCF77D6D6C0
2E3EA1800D2247B6761E67BC056009E5E5D074ADECF4AD15DBD47A27DA51CFF0
E36D2FA5AE8E520B296CC2606C5BFD521C0D81B0427791157B3205F28C5A1D42
AB092C9C42161D181D35A9E08D6E272DB158B66443E371A66FF4F520F51D2CC2
1E644DA44D0A08A19CEC3E5FAB5BF2D5A0845043243221E8FCECEF09C7F32ACA
AEF86DF6D53D8956ED0D05122095E70D03DC1EB0D59571A53B7E39580D2453ED
7551F097B3DDF74B07BD7F8DEC54DA293F70C1AA54BBF8641AC9A088DF3F3BE1
452F239BA270615739E0E67AFCCD2CF2848B6EE2E1E81C5E55B381CCFCD84003
04D01D6429E23625F632EF1D759EC9606AF751D462E249FC2F1392F74C40444B
BFFCF68E4F76436EB93A944C8F54415DDF657C117019CDD37AEB100C3406549B
CAF01F09B8073EA853DB9E4D521744E6222B65D4FCFCDB93E7691F6122C78CE3
5F2D3A44F84EEBFF1F7DA099FA8D83DB67796B3E3BA1F2150809CEC6579F9AB3
405224599D3629642F9486A3BB1CD5D78653D918407AB99EEF38F1B0DFA8A359
E60EF03EBDC8B1A10727AA62310588601C9DC9772252A856B8AF7E88D2ED0725
5141441442135EC6DBFDA000E6286571F70E395029EE4B1CFDF4C78BC1C4AAC9
B8ED18D30F3FD3A453B5596EF5A3356B680CFD9B2375532A444A44CCB4BD265A
BCDD7CDD31165C6A2C4FD06DFB8308782F3D949CA8DBBA20C5EBCB7C348B05D8
FC6E8437243DF22D89F34264093F9964C07E2FBB4A0399AAE8E5E275C69B0F13
5064785DB2570763BE7DAC0A4AE87018C008FC8E09F1C3C6772EE2FF1E31D915
50C307BABF986D5D408202F7483C251D52F76E6E173E0984B51D5111091F5482
A15357CB8E602D3C1284A30250BAE2BA9F71AE4B77DBFEBEDAE9ED8402B8420C
F63579B09B201DD54389D782C85632A337B8CC265A307A8C1FA9F142DD27FABF
726C5D1477498335FF46F6FB8B4280FCFC9588E6372D163C4504E6C91122D145
F41ADCA07E4CF317A934CEB595763E094D479FED34FAFD8795FCDBB2CC7EB8B3
97CDDF90302DD239FC3F500538FC191E55F49C1767842BE34F79190104FA79C5
06EE75BF62B0C3854F8F474960733237B42286E69445193D70E77A49AF46BD24
1F1438CA3FE9CA92D3CD6E72CA45D4DAC591FA0511663BA5DB3782A624CFCB41
C4AC202FDC6E0085FA2277CE04DCB46A6DFDD08231934B0CEB2DF99CAE673DD4
34B01E8901D5F9452B4EFCD8FD4ADC616841E173F4CEE1725F15B89CE97E52B8
1F305720310D8B419F60D361EC94FDC471799E92B14ED8787DED2E3414692A14
1A946E9F30939178D9A544430CFFF9DE97699EA328D7515723373BDD31C214F4
077D210F538F2D64ED7E79FAC9A5C4D3CCBDEDDD5996AF61CEECA39456FD2220
92DB74B124BB323BCCF405AF677208775D33374D70BD29385699C90B85C27310
CD065D11C4F6860128824EBD7E368338BB76AB428D28112538E71473EAAC9357
FCBE6A8D6CFF5EFBA369006CB5F22E07E732D32F0B950FE68B6C6E6EFFDDA02E
47C997A87E396F1FCBC05A0CCFEB86BB7E7315E34A94C90771B26B6ADF95EEC0
4AEC04D057CAAD42715D6B216E63054CFD65D18915FFD7BECC96C2364C2A18B6
E4C78A9AA88E72B76CA79E18877A36F48A665AB4C2A318F9996DBC8A432E5DD3
01B9485F5F3B0AB9747E724B62BB03A1A1363A6F888C3DDF8A2ECAA0565D83ED
EE64E3A7504A95A25ADE02A31C14CA1AE7B82F4F7E5EBAE0B9DC6016ED797EEE
E9465BE5D3622673AE3BCD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB734
7FF6E9BE216CB5DE5D367EE01C808604D05C0188293CCEB93839EB03A684528F
D6D2338146CFA73C79387A9CD3E5580A9B0D04792165CE7B496CCFECBF86B13F
B55102F200060AAE9365ADBE3A878200BA03E76A6E7BD58283E092EB9858FE35
AC03221C7A349FE630A3A99CEFF3533D1F695B6C95552AE6D4412493E0CDB7DF
8A03EFF3CE10683BEA98EB2B7C1F4E93E0147DBF038DC1B5EB22D5F83D6A295A
B9E01BF45591DFC3BF8CF0A1B8BB3F6165335C2E2D45A67FDA34DE10D9966CE1
A8070A91E0E3FDF6589ABFC300AF7D838E47852269BCE9BE310444836999D358
D5A91A6F4A70479DB2F8646A73F3DFD53F6C81B0072D34807D5442C8BBE6FAEF
CAF25D9965CF69163C8681B75AD590B3989AF29DBFA51DCFA2F15ADFF1432E07
918647A8191B6842A62FF9BCDEC699B45A4B55DDC7630290BCAFA572B05150E5
14E1B8EC2384C3A178796E8610E8151E461AD28A9416FDAAF5A00380676569FD
0F181B474EA46E23D22D486DA55D42E89A622655DBF21DBA158C8F48CE67EF22
954C8FC4789C8807DEEE79EC564EB9E63BE5CD767D0337574DBEE3A176FE9C5C
756F429E14BD61F0BE2DACFDB86185E3161CF11D1AFC755FD129D59BBB545976
E19C281C1686116C1DB4E9DB4F560B582060391D13C26A450F869A48C9A8894D
29C23D28871812FA17AB4680663404682AD61CD0776567E41620460040A52627
E69E2C22A6FD493AF2C0ABBAFC8C61E5C82A76F1B17C1CCB5508F9BD20714476
E6672496EA3BE48CC4826515D0231727B7E0B6438A2E3FE488CEC4339C9309BB
A8B4AAAD9FD325C398E049FC951F28A391F664BCE4148D31D6ADD3D4F7BD5C89
F7E958B584298DC6830F31E283AD7E5E93A08414E5CEAD55C5F2EC61150D2E80
B538DEEBFFB4C4C7A6F71524A3FCC6A18CEA55B17E22F86BC000F2E8B19ED4E9
4FD9E829F95B502689119035707779C53A814E806BA302C66E38A5EE79AE03C1
5EAD46F05347E952ED6375607FB40613C7BA36F7CA45E5C756BF56006F88F034
C93B37438B5E4A6DA9C531E1F1D1F01367FDC17596F2EC4E446E3CD8B19A4742
3EFAFD11AC5FF0A590473E52B0895266528DE2002C1004D28FFCB0DAF4297517
2A3050B2155571BC963861D9FB249F4CE12F21D64E8893F5CC9849C8FB20A6FB
A6C3FE2A62E3DC6B0951BBB875C3F5E7DAFB103AB7405DE9F0DDDD92ADC018E9
FB8D4EADDCAAE18C7B066CCE8643B2E55F7B5A4B9FE69F0331383964A553F6D4
E321D80DE1A3F93B0B334E609BFF7B5EA6519688CB1B224237D9D3E846ED6F86
C111B06B31E5D849A56BB0552D00C4D31149E1C884CC83DD72D4A1D9DBF5F171
6136A7275562CB7CF55CC498145C29CF263625EA5777F04020EBC7C3197C14F1
88F8DDC8468A9A3556CA8C2957FE1953688965387A19FA446D9793B31260E6E8
6828D866939E6A61655EC2B5190F7AB2CF2A5A3CFF8C32B8224C48E56BBACE75
87893E63E5AD43DB563C73705D6DC4AFB72458C3D611A25780773ADA111EE52A
F4FC086B71B052166D83691F064CAD82023C4CAB588B80EABB5A01928CBF8B3F
339E87D236AFDBBA4476EFC470E0EDA57F81B3BB5793FD8C347276F37B08A4E0
D48237548653DAA75F8E3CF78E6DD3CAF0134F9ED3BB7916ECF226200F09090E
1AC97E3C249E8845294C956C60040FC240F4238F0268315947AF1BAFF93DA7B9
B496EB37FA090DB96AC083568685AEBA8CFD9822210C0D3B11C4719A2C09A509
8EB477414204E323EDB4957F9A27C95FF6013208A9563EA62E3F1A32D865664D
54BAFF4C1BAFD8C31DA9B8597BA27749B87012199A78274EC40BE6C3947AE503
2163D7C0CFE98D01C9D0DC2FCC6843DA55E44E10D9A897ABAD2B800A8AE18489
150B3C88E67A78A686E1C64CF0208F8A49C570B24A053CBEFF191CF7473DD793
4595BD992DCB84D6994946EC2B742D32B593504EDE33C803123895B0B2C75FC4
5CD6CEC3FD76B11C92CBA117E6029525A999849B06DD480402850E215638AB63
52D28FA21B69BF166B07F15B801342C5CCED2421E897B6F15699A99E15F04110
050F509449AA281030915792732EA1C0A502E04D344B3EDAE1C6F473CB1F2417
08E5E6CCD078D7CA03A7CB523400EAB5A216DE3684B3C7E5FFA866A619274CDB
45C6BFE44F6D4EEB1E23AC492E494DA3CE50140E4E81DD5084BF631663DBE608
07250EDA3E499F54071F17731EA3C7D96012303341A0A12D3A55FD5405D689D9
D47D673173B467D4BF59C4723FBA2FC1191280BF2CE92B05BD8CD3C4F36F3D65
62D646764E9F6C8CC225592D134B902349B424B505D844E96D45A2754A8267D1
DC275A848146DB37564130775C39B6F9E2DB74C6EF35EEE31EF1838B52E9E2FC
04C217EF42808118A1E83DC64A8D38C82AA0CE881BF79757C1C6329BD61E2B18
FA08714DBE465BFDFCF4475A0B5E603C7BCA674F49AB0C8CA612300D51C912BE
7CBA6224BED29B73B6AAB15CAEB946EBC9307747F7EF5B39DD94FCA4ABC92810
B22837AE81AF3BA35BE7D30CE6957A3DD1CBC68711EDFD06E0F458F079ABABF5
1297094D8E958D6B98C9A2964E01611BFC461D29B19746086F0BB74FE96A73BD
02A072ABE4D970CC453CC06D7D9822EE4C2C331E0E374FABA5DCD683AB5D2D91
D7A7489D24620664BCE0EE2A9DD87BE0473F0C657F7655A6C1B3BAC007F41D0D
EF7BD9B9D54CD06D3F5446D1CD896B43561B98B6257862AB27546A934352BB80
72C8FDA23888B626491F0E08ED8B363BCA056D886BFB2D142311AB9D69B47500
549C4F8BC934933B235CED00A8059E1CC2BCED03C43DD095C1C0D6EF14CED946
FA93BAB5BBFF121B22F1B1BFCA7A23A3A413548CC4CD5BAE60AE88DB834532A3
ABD235B7C91B21EABB387CDF3CB6256197D8A72CD2FBA1A11C9C8687F7A6E8AC
64760AA2DA84DDD139519C218D43FF7A3AD33A77E4972D6BC1206AE14434DF43
9FADD4471AE2375521E09FB55D5437D60C236C35C6EEF806175ED4A18B5868F7
BB6F95C0285D865611B0B81A2153D9FFAE3313F498AE26C8E5ACD0B8239716F7
5405985847E59BDB3AFAF9A24DB0E22FF723D90BB9AD06EDB2E1BD26A3C0E129
A7A2147FC75D229EECA6DD6512A342CCF58A2AA3E48E01B3A14B1863038991C7
3D1A9B7330F22E2C509A15628DBE4E8E0A6D2469F85DD4DEAC8519E4CFE7F97D
CAA3C82258409AAE7ABDA64E7D1A57D1D58B93321D491ACBDBC51FFB7C163EE5
3A6C2FD42CCA4EA920E60080FB5759BA2AD0CBFE0A3F19AFC1925CCD25B72E33
55B70D82FE598A6E4DE75B02BF6BEFE4B2B985FB708C62A2C19AF84361305C4C
86AE605C31A78AC6E33439E255F4DC49A2F83E8149394EDABC9748A2BCAD702E
B30D61FAFE2100B047BBC96518C236E2BE3F87CFEB8D6C07A1CFF0F94FC004B1
AAF7430FB45B1C771BC1DD373127F5EABB4B2E37941CA36DCA77D56690F7B9C7
782427B26460BAD9EE7E180130E2EFD4FD589AD6AB011FD20CE8B99181E795F2
C88DC6205F163916D04D8D3E88E3A03773F53D8D876371289A53FAA1C1629493
1542489AA3BB4BDBBBED58FA8BD3EF9E8DB45033FFAB07D18B0BB17C39F2781D
9B0CF3684DD7EFDB14F520384813135B77D0332600C6A3AB70051CCCEE454733
6DC64AD7F53F84D43D5E7CD59407737D38CBADBA3E42E186CDCB5312DC43C833
DBBC2B01885503C0E658ABAD80847842FBF8D81B5A9C833F1F902A0FF012931C
07B3BE0ECBC31F13ABD3D02EC4A44CDB42692F1B766CAF82AF990A46B7188276
251874805030211A3B044C5D225E0DA3E63C850E94E68C0CD0976C363786D9C9
E3D5AEA2FB3D176A0FF5D64D84536CF12B17FCDF3EFA07D92AA8DB01D006A065
FDB5353D77A6AF03E67DC8D533F260A8D17188FFFDDDDE54BF18DACDBDD0B7B8
82FF16AE976D9F47AAD5989FAC3762A1B034796BB11B55C2445FDCD78BF5E218
39E285AA184A1C90FD004A64D932A9F572887004764CDDAE511564F9FC81E19D
BEC1BAC19A99B1A6B6C0243A1C4899A4DEFB2AEA12A09700B2401201314ADF68
ADC3AEEE45B8831620A9B4779CE39FFDE5B021F4B2E3BE357DC4DAC48D3709AA
3223A6710CE8E880A75F6DB3A749CF92BE2E9B78B9ABEE6BCF43A5ABD20DFEEB
B04BF09A868F38734EEE548B4C9473F7CB3FE613CD5ED9FC01F16238E37D3515
A3BC29B0F96AE5EC052DB11082666EEE444739749AECBB1A9729C2BFFDCE9E08
877B2C7A844F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE51213AA578A8B93C301A831AE89
3172B7D2FF24745F8972DF419022F6B4D7310D075029554F2E31FD6843FB2454
1DC60BB39BB060ED6495AE98F6798010F76FBF63E31324B0F048C2F099F9085F
C2395C8F5A89348809EE005D206688D0DC863AE9D671BBAA034E8C32025F984E
69BF65497EDD146516938637D1DDF0F7255864D2C4C8834BE9EC41F48EE50AF6
797489236880A9CBC9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3137F136AE6
76E52680371D036D1801406A3A5009F8AB7638A1926BCA7B7C3F049E3E5B235D
984FA314E9F4555AA5F99198A39BE62AF7CFBAB277B8A66C8413AF546739AB46
30018BE647C048D9204778226D706C55505A06D4EF01D9FECD5C795DAA94A1AC
AB3F519B354DC0198F2957A103CB2F0D1F55AA122628853277D0FA20345C143E
B8F2A289EA703C24663DD7C2033892919E4E65630EE03681A62471A1C035932B
6545FA5D6F2A04D26899399FF91F4FB98EF6E228ADD22D093FF7C07247CE5236
EB13B7F1E8A15AB9B0819C35691AAC73AACADC529A2B37845CADC5D1C00E2592
7E8523A776A608FC51751104BB96EAF8314E2322C457EC61961583124324CC49
1AA909ADDCD2D038C3174BB48F0E846DF3CEFCE0977B68BBEF34E03365FDF696
30AF010FCC79FE5120FF3149465E612A7AEEC2446ACE741C2D86A04B426E4778
6802DE7FE88E84A77CD3AE846ECF2693940F20F5176D8D1B6DB30D6740156644
17F53C060AEC69C2987EB7A9DAB2125D445153AFD3F9CA5169205C09A3ABA72E
EED76A0453B2D8B3EF3EA7CD9E665C4CB2B3CDA28A0E667685A662BF38551B50
DF4F12EE6C72352170B4FAB1037FB0997B367483D2C8C0D44E6111CEE2EF4370
AC4CD5D68004F8B2012B1A0C9C20040175C45A00D690BD3B098CCE53DF66B332
030F66A40C5371D8A6507D35F092FA58B287777FEDAAE750B107CCC7C39AE7C2
72FB9E9857356C4ECEDFCAAE74590B3DD208A9754D04BE163B9E964F6762BDF2
BD0ACE10B99E156A67CAD0A3DEBA0D947D0AA1F03FCAAAFB247078719DB68E22
8E6AC9E51AF57A7B2F22749A53E22583C0AE5B3E7506A8D328199ECE23C1F65F
EB3C45554F66C8FBFC1F3930B708E9E73D9E9F69FC7147D6F806458851F3D994
762E9918C422D1763BE8FDED2C51369E0DEA4E821067927EC46753645F880BD1
38BCBADAAA94EF14407ACFF4FF975E04E30045D6FBA477667651D8C7368B0E9E
CE176300D5B23326DB319B1509B693779181F685FFAC786ABEAB809427D3C924
672E418A8F273187F24F9D209D78E0A2FD3FA71C28EDFC1577DA8EC167B3ABEA
718BF706ED33155383EF6400CDE98179A9C3D3166C39DCB64337D7A141529B10
FDAF9ECC35E387DF38E4B5DC807AD09ADAD44A2DBB0299AAB0CC3944DEB241F1
FD9A5FBEE5B1F2620B814FA2A9F442DAF6C658893DFBF0DB8BEA767880B7064D
05AE383EF05A00A57078A6C9289FBFAB908E868942C117CFA7CBFE350C693B23
476C3C77F0D21406751D2DE44887FC5DF0B7AB1BC8DCE622DC3FABD85B0F740A
5A8CCC2B509E9D70AA5F53D932C71EA76AC75EE6B68937852005B46123D78C29
6F0A156E288433A91BF564EF22B8245F102B7DFCE33759312AB0A03416D0DF55
1593B3392E75FD9BEA16B3FD22EBFB9D13E7D7EB59D752001FC8B8E3B1270C1B
EB1C4042BBA0D34125774CAC70D8FE9B08C9033A1E95F5F8A1717DBBA7AAA1EA
7285589A7279F88F053DF725F2FA768CD4958CD594AFF8C59F9CD25756231AA9
6C0193B195DE5014BB87872C738945BA0F664F19C2ABF0D00206548CB12C58D3
7F6DC0A2A3EBE9A5170BFC5A58D65A8E6DFD583EE98081A569696544F6B1F129
A8207891AE60FFF1229F6F875D5783D804EFCC8C4F5D5BAAC2D11907D0090F63
EDBED52E7A45C7DB6C2F3431241965694818722E945EE8DD772B99FBBA9D68F3
6654B20EC2DD55C31E3FE7541B2DC374F135DB26BF1BB505BB4602DDC56B1E8B
497797CBC2D5487DDBDC27DC56054DDC84389591B0C348ADE52E536208334DB9
C53B29B8EF5B8C6E1FB46E5C40B1D2D23D99FAE30364639514793A83B7CDC6E6
F044C69648A0320DA6B8939E3D5DF5F7CCD561DC7ABC388F4539424239C618F1
D92DF63DA4C509B1150ECBF843C38A4E32C9EEC6B7BDE14411961CF0406493C9
7CDCDDA1FFB9497706044BD0507AB45160A44D125456BA17D8B91011010407B5
F2CAE74F6724A7B6E605242727E8CC4149D01BA9946820758FA8C76B72A26F7C
5BFB146E5B38643081A91DA1D968D5BF81840048F96BD4AF2EAAA6B47C55626F
5C6488D4837669C8DA7E7CD7DAC270263550BA374D54D4BC31F747EA67B5EE5C
C6EDDB55CFD4CD875072FF79F4ABDD8F90321383DF0E452D5BEC576F18A38E3C
45E186B8EAC1CFBE65C0F3E4585CAE02092F991F62E3F6573133B8CC186539A1
22D6BC79EA3A1963B94B9903CD874CF329240E46C1AA9361E93490C7ED6E46D8
0DFA61245E8447B1E0D38F1B3CFA112EAD850C1EFDCF13156B025DF2E518A63A
71113DA020BAAA0E7C14771FFE20FF6134375B62BA0111133173A369A4A30AEF
8299AE84CAA85176660078A3C0362C77A7FABFF2FFC3F1C143E13BE6B003CFA0
DE2E46FD78C82B8FB28E0853F6F4FCD97CF3756F13F194204A8847FB6F2DB279
AD157D1C68D877F9C115383B4FCB16BFB2D70AB75E3F490621E9A09BE0C89F99
D1AD03EA2E2B3A3B35663BF0C3011A7832CC8A959A9853BA6B381EC379295DB6
7E7B2DA63D8E0EE3E998EAC4C84F7CC1656BE602CAAF7D89959658835F6DD1A7
B8E2B638C87A9DACF56D583486E8DD0357E35E1805174C5DE5CAAAEDBE98C69F
89E7E71474CFC7515F73F86723043C93E598BA51322F0548A74AC221796FEF28
187ADA95A2249AD64F922526C352765C2A041BD4C5BA15A44BB2ADB9347D3FD8
F575230559220F6A416C005EACE2A18A4705803F4C580F80546B2D997B174FD5
3FA4041B087286BAB7D34EF99AD642B738312FC6F300093EBC7661493AED8EE2
895A696AAEF0EB67902FA53D9E8BCF2B5D8D06C44B538EEFBA6788A85A9A6F99
57642C677B94DB7A0FE1A21FFBC5DE2429EC0989A3F2B6AE4290A005FBE3EF23
9F5035FA46F719B503CECBC280007CA7FB8EAB591C8300A6D2EAD6DCE72627E3
2175A0D741E384B32C67ED173A46B3719D7280A90EA7038A2F6390BC183FDA43
88B0FF585B561BD3EEEAC3E8BB95BD1C6596BC5DD9FA10D626A9235C76FC3010
895BE4AFF551597F0B1BFE08FFC52F6B458208BEFDD79BD8C4C6E6394AE72B8A
7017489A37A541ECFFC41F3DD3FD2EBD84B672F4AA1276059882A8FDE5AA396E
BD58CD1FC98261FE9546C44F98D996599B49EC9587706A53B5D5DD4244726E81
B17CFFF3CB6B0C091A7A2F6B6EAC7A5B4D39DAA5C0E94FEB24D9511017E77DE3
0E4887C0E7B8F2A0D884F8C09A588008731A0FCE134A886C645E9E28195FB50B
C27AF8E38324CA3DAAEF22AF24628FBAE363274B2C5D1C50FB8E29D1A3240450
D1453A1CC3F8A5BF7FE395C9E2D7796D0B633965BB6891B9F34006745CC91933
64AA3F547FFF70A5B6DFBFFD8BDCEE6ABC218F3ECCE85ED1F4FF5F2DC767133B
9769CCFA21FDF0DC77CA7AC67CBFAA34A11578294F66E2585DD7181AE09F38A8
152E34920B956EA2742462589EE9832FC6295AF61B462F8DDAEE658222AD6C53
001050958C69140F1F2C1AA25026527B2EF907D739ACA3E5878CF3795A0514FB
67759ACC4C6FBF1E3B769D7BEF9E00B824A16D67D19A332E3D2B2766AFE145F3
98CED574617D14C0AE26137B1C9DF476B6953A8DB701BF7A8D27ADBD5FEF37FB
59EF89B24C2896D309B94C08F3D6F44D40452171096797C6CE770C761DA72242
FC059A2C0FC15DAB7AB992081CC71C6BAD6E8C7A2D807CD06926013E4242176C
CC9F0661D553F814511378EBB3037BB0667F0382E30FE68A7CCB8E4EDFC64B53
FA54CE628FADB2EF29003015A9D364B1CD13DCA3D385B83499C715ECD7598762
715A3F6D4F3C9CE40724AE4F4714B8933B54AC4C09372C28B1310CBA00608A4B
24045FB082AB4FFE58DDE52F7339852DF58E88CAB2CA2E8BC7860CCA854382AA
5CA56DB2EB9B986154E767F4DD7373D2E090CE356984C422A22DC440631902B9
2C516F671CBD98E454F752CE7410CA9783F428992270E1039CAEE78B2D136545
062399ED56FDC3A725F26CA64199D2B763A3098A82D583E1EC8AAC7647E25105
A3E124929876488AFA9F7987D22036AF7261E19E0B78B36BE80A16237A613F5F
46048128D88BEE5E2AB0A03416D0DF55159466BCBDC41758B4122E88E548D22E
15A2087B61FD69FE33F5B60E17C6665863AC03E8F8CE02D50F50548792E03424
1D3A427F9B1AD26ECD535E46C137084A835CDBB865DB1B1AE65F9788563B6C0E
D3D9F9ACD05998073827B9EF53EFE0CAA60432FB85C125190EF73FA305264C64
110C95C4C9DF1F49D41B4604264A80570E47C61AB9B119CC7FE20FBBC297B193
5A3A5DE94E8681FC6842832971FA23CB7610BEAD29527EE5A5350D4D63EC9EC6
D91F57B8ED57EC0874E26BA43EEE451D698BDF3DE1588EF5236196D2E4BA1BAE
2EAA53FF433AAA6D12256F20494CBE6FBF2402581F6F84BE8AAA3CE7A906C63E
FC4CEDAFF667E51859F4A455482B979DBDE13544B856AD10C052D37D202BB697
39202BD31EDAA120CE54ED0DE7EAAFEA68B8F9BD9F4C10B1CA1196BC062E04A4
E5BDC058475169BCDD68CC1860B3EAEAA564961A7F9523E1DDB68B707D12C14C
FFD98A31AFFFF8C34ED4505C7F6607DAFC41C2F3C695FD46180C519916C2A57C
2909F2E640F991DD45B978ACC96226775B037B920804532521E7EDE46BC165FF
7C7FEC0715F84FA77D3B65D73DB6493FE38E007F68BA9B877B857DA39049F588
7F6C75EA22E2C1A23C39A2E523B36A2AB5F41BAF1D6771576B4D367AA58DB1B7
132ED56EB6794BBB90FBF34BBEAF282A69007BF67C0DEBCAA8B511A630E8148A
51C1394C7C321156CF52EE73535C22D9DC361A0FFF2CC6C99969ADFAB5780847
9FB5A64F1C48527544E28F808AAC801670C3D6BAB0DA01231DD9AC89078910F3
D70211659CDBCE05F0733AF96931055D457E55E2913AEE591678EADA8F6E6D3F
AF39BF497749176712F636C95B9F8AAEF8D29C974C5A18DA8C8AEBD8868CE298
57AC764A19824E49578AEBD9108BFD2805F0F378D0E993DEE8EFE824AF1F1A64
F91759B165A964767BC5470A2A7C2376815CC23BD0FFB24E731F7FC847B39D4C
B0C0C97CBCBFCCAA9A1D1F7E29F00D8E4554E603A6E083BDDB9E7E8BEA64DE71
4E59438AD980E0B1FFD51EE19692ED65AAF359AD713BC6DA67172869F9E4359B
75F27C0256E0ECD12721E8C240B2D22FFCD960B94C55460A557DB6EFD58E6D26
BE03212A8087110839B09D287C411FAB348BE60B05AC2BE886D9D90227506923
ADC66BF831DB6A55D577A4F1EDCD09993D20C046089A98EA5B70E06CE96B6A9A
706EA336F89880CE4C5B805C3C54F112F7AA206E8A3FB0D9C59C15DB93E45AB8
6731E47F691F9E8A3366ACAA230A1B797ACE38376DB0321D7D2B33C37AE910E6
0386A31CE022CBA49FABD2B6BF09FCB4CA2D81A942C5DAB2B99C881ABBF836F8
EC13A5A32A91CDD341E13F85238D610616A417C37827D8AD8802F62C21D16B3B
6B20F82BA205BF77E16D1B0387843CD39A2AF0EC9B51677305D9A912E47FC61D
09F44A31F7D88B072B10C44A60DC11A5B8DC37E7C7C0CA4DB5C3993FE8C1C4A9
0327065F99470A18B40E952E098614C2DB3FA57D400530CA6FA8B32DAB5C6A16
58D1858CF4AE06685282DD09D47ADDCCBB891BBD258ADFB0B4BD92AE3E7CEC08
957D1E08DDA1C52CFEB059A019B99967A3E3F1526DCF6D389B34C824538EC663
458C94BCA7D9D93AC694DA7DCA8F8DACF03CB8AAF73775122C66EC7854FFC24F
0C307E4633954DE17FBFA6BC4F5AAE6D6DB69528E8A707179011BD1716C67635
44EF3D5D6E29CA1405DACE81B2FF46A7BCBCCA74B6D314B33AAFF216180F5999
FDB2041597A8A577304663F5FA4B9CF430BC88CE2B9F2A9C06619AA6CCBC3DD8
120AE66A6A6A8862CB1405A49D37E9CD14A077B05AC1D894BDEC87BB96D4ECB2
20E432B1C20CD382EB8EEC2982333428081F09F426B8A731E5A1CC35B646ACD0
A28749B62599E75F4C6636C971E51B9E9AE8E9D60E06A3E169A1A02B17E1E5A3
21FB10247282CEDAF295574EBED606F105B7D02EA4F29A5542C9EEBAA74EE290
B3E404CCAA91FEA4EFB986650A8610901321BAFE2BAF5CF065EA8A940B85D118
A9B728D27C8018BECD829ACB6C3D9129E976A2427879647DD536BF55E7669038
BC12FE40176C417A05E552DF6E6A65792B16720DAEAC440C578B2E507397E65D
A1B16437B6BA413F846A887BD1B3B89EEF73565F3D0D2ECECB1E57276D48633D
CDEB7F9D21B332CE4982A6E06F5E54EC23F02122B8BBB73BDC314ACB80A9411A
DB242C4B5CCAAB478A87C1AE97E95FF9D6AC6F933B5F754C104FD0B58642160A
7E068301FF951EA8B924095332871032ED406DE854CD5B93EE3683B75A88D3BB
B2778FD9FFF367226E73CA9D6D0B12D3A1E0810B01C554FDBB8EF9804F5C2EAE
78A12BA2E9E4AEA452AAB51A81874FA8B3B9BA33E5B0AD0172D858E0301C9311
BBCE073BADBC77B49CE7823D3D2411ABF3B4D813FC292A572B4E353E1733ABCA
492B04D4C63E9582AA6642773A62555FD57DCF1448BEC02304B798A60137CB99
E97048161FDD3D79BB1648BD39E1555E623E1B5D69C1D5C2AADF0E960552D2FE
27E75213E3B3B4016DBA3AB39FC05FA6C191F7A83C324AF0629A2698BC8B9CC9
48BEF8AC77069D64A294FC4B927E16F3C2229B17434F729F7934CBA23B5A181A
A5B60EDCF5B16D23AC84BFC8C13F36F2A0B60F82ED1C7F608CCF232FC7B022C2
A0C750E5063E960F37D2B0FE314A6716712E9731A7AF7C0021B9D29C89BD121E
69EDDEC575B281609ABF3D92DEA28E7C1EDEC044D9422F1B1537040858EB3F56
2DAE388D0521522008CC7E3AB92D3244762ED374AA78CDBB721D100516CB839E
DAEB4DFE011D1947F0D4874EBECE41A5F11E5AE7C363134DA775544B63D281D6
8BD8002D535970BF8BB79B0D31DE79456DA0AEB62BF9F89ED0B9B27DE9E81273
25C87E3842D1ED01722E83609867A7689219BC87F668804CDB793530EF5B16FA
667198C8823A06974C660A27F619ABC0E178D15C8C2172701E6FA73CE1E18A7C
19FE9BA51A9EE3B8F06BD971FDDB944811A342BF7E5D940928D79AE4C0334174
61CA5BCE218C5F33EF0A5947731C8963554083117746434DF37B1063356F9DC0
4F1E0EE7251A03EE454C754DA9F485DBF25CF19A2514018792CA5E16B365ED83
C24C44A68CC2E0C4C4FE390137495FA80D6E1F61199322E0D926876A97AB4787
61B4583654F891D0E725E80010DDCCE8009580E8811507FDF834395B17DF6719
3ED3CBEC072A1A22806810FDF8547A117592912B64F0FD7556C89E94F820C4E5
1DA8A54ADF45EDD0974D752397E6D2ECFC851848CC68C63ADCFC01DC4E231D02
8DB42A3AE45E2F07C06F3A5AA5803067301427E026AD1A01EC4C31819DA332F8
5B2C745FFC014051E78B8583FBEEB315F718AE6FC93E01992AE7F8D0C563A05E
BDFF06ED11E5CC5545D68A00379FC4B64991B4D1FE7795ADD2B571F1196CFC77
95F73AA2A50EA7671125D3AB854DDD7DC1FFFC2481F76DF4642CD37869BC08F1
02BA0EA2EBFBC82BDC79AC9345ECC6C24DFDBA3074D24F31FDF9A7724A5FE71F
20D2FC1E4CE9448CD7D00E32944D0FAA5292F033D145A87271966D5E1909ACBF
EB342BF961147137F29D04545B0B0C908B6A3308B89B8E77CAA452289A98F103
29E316B49A3CAB44362F017F0150616720B0E2DE883DEC38C059E19DAD78AD44
C7C99DD91D71CC2A3E0EF740120EA74E519FDC326FB44EB81C69A18DEBB469D4
0D39A72691CAAC1255CC2BEF4F604136C32351E839ABB8FE5B53055FBC0A4921
77451C915FD543B77DBFBB4559C6AC59327DE4A6886CC43455C6C44E9FB7F55F
D5649526F934A0953B3317E339B3191F3B728DE40ACCCE8E958E03979A7F63AF
E837B7F041CBBDC56ACA7F3925001E64CFD37E279E73A0EB1FBE7B70C8CE0AE5
7426572795B0826CADFD859EAADAA9F0B3363576CD1D4DAB0F4FD5F0906ECA43
2A0DCAEFA2A20B54EE054AE15F26A7304A9A97B5E49E8EB98365BF356222C354
FB0067EB457490979FBAD244CDBFCCCAD7FE46DAF617CC7D1D0E4A13B262BEA6
58AA67B8FC1B1350787F4E7C2C6BB5DBF0D3698FB728652F3A6571CEFAAA7EE4
ED83A7D65C10357563DFE6085FAD3790BCC95E858948260573B4F25EA15E67C0
7A4AD81B3CC862A675AD5B447888355EC78DC9EB4AE83D1CB6E4DF546FBC914A
6FF29633BF269241C0DA67E5BEC040A958B14BB3D7821512A664758B40E87EFB
947F6EF31DCC61CDDFC39A2771827DA897453C309B2164090EDB62EF3DB681E7
ECBAC9BB218F403FEF6D0969CAAF54CD5F89FD89D153C58F0D60B07CF68FD0DA
482FE338FF7162B38E70ED0FA6771E3F843B8307F90041D351B844947C40B5D8
C75ADA3F1A59C83DD82C3A35416BE740A5410D67AFE52FC469CC030962F8C484
4A59841C7C7682105E23A374BCA91885E743EB2112B04580233972D92119549C
BE53B0896667EC79D6A2CDE659C1E6CDCFCB3FD9ABF5D7BEBEA6BEA39EE90D68
7307318ECE80777A5FA529030B795AA0CE8D74EF1AB4F340C8A71E60B4CEB938
3ED0A8391D817BF93005BD72CEE01DC08FFBA8919951279F1ADF950EE828851D
229848E34D0C2E929AEF3C8034A681E5C185DB2E60922FE90FE15878D53394C0
C7D5771B0E9E6859B0E657936EF4F7CEFC601FEA3FC202C8478B0E1C44B0D90C
20D8796BEBABB728E5EA5A88096175F2F9D4AD0E3F3F3A46E8926CC48999B193
67801BA59E660FC5B2B1E296511B79C40B5A1957EC8BF8D5D1F781500EDF990F
78D693521EEF35E6FE57C59ED52DF91DF9A97F17108D4EA3AADF3FBBE55EF1B4
1BDA01D7778687C22CB79310A9000BA9A9366614FA32317445B8B17258BFEC3F
9566DE3A93DD8989DA03B7F86166C6E95B3D63FF2D022DAFAF5278CD2EACD87C
47C937209B3DDB4F2FC6DDE67D9ECDCAEB880BE556C1A83904F00C6F8129E347
C6489FD4FC798ADCBF2E93183A92A619912D6E53B350637A1C6B75840B1007D1
5D6F37D2BDE9E18C4A49EE7BBC8F82D8EBA66BA451C2435C0BBE449DC1472CEC
D48825737F1A518EADDD3A9E0D0B3FA0CA60A2E57AA31C1371F8C279D4D20916
C7A59A5457C0CC70B58A5018F201304D0437CFC4AA06048DD885D64EFEFA5140
9FC4D512C520EF5235E1EADC70C48F8BF4AD8007467DA608C07BE939561A6925
0DF90696B4E3EE469BCB07BF3085BFA87F183CC0CA3266EFB10C105656270A53
6E5DC0236DA24612993121152E7F217DABB769BA0DAB927E1D420A61A18D5977
9EAC7571779124328C2718FD61DD12AEB2F205F7524BDB04A71AE76BBD60C6E8
4B9FA28BBCB712C15A5BEC215FD698B624E99624170E1B554D5833833818FEA5
F5ED726D4251D0BCDFCE60D218A8996ECDDC6138478B29F1588ECD61A0DD2417
08B1C760171CE55D8A01D2B63116814C0F75AFF5D89E22D34EBD2B3C90EF5D9A
F0A0DBD5145F0FAF630D6E9338E1559BE5FAFF381BD82A6C71C267409463BFAB
0AA5311FB05079878AD49127A054DD75488BD6D419C183B3C8533624EA884178
7FEC863F584F1FFABFAAAC0EA9C5B92A11EDC335D079E6ACC69BD64BF071A2E7
20D14267C78552F465CE47C9BDB42BD4246658BBA3033565E562A162AE5CFF0C
DDA4763AAFF2692126B4FADE9498A1709E0591879D2EBBF3BF9D7499840F2B1B
8D810A450562D2CCA1906CA660FDCFB60E1189D7BACF8C68E42226680D97565F
E4D1E216A9C768A454647DB379C5912C5101FA3EEDB73500B7AB35DD7F93E4DF
60BA3214DDF9208403DC91461325F612CF1421F3099CCD799C2667FA18390F67
BF16F9B4CB43B26AB9B8ECF42FA55819C242BFBAC0D6B05C8C570A8F4BE71C6E
AC82D9A687BED542C3E5389AECCEE733A2DFE5343CB6D3F245E38635907E2988
B08711D1C26A6F7FC2E24FD64F7B74BEE200B05DFF97719A22BFF5D31C9C6C0F
F56F9B3DF196373710877D618DFA762A90DBF8A81AD82D0A95CE800AC282F843
0233C5DB38E639321304FA1B2066E255AF3111495AFF40561A91BB942FF755C0
A1B04D23F4F1B2E016298E97A7B240A8362813974AAAABC799660EA942EE4C05
C94E443E6C931F6CC6ED108E765C879314E532D888A53E12BF4DAA942280A326
B0C4356B774DAE57D209909D79C9F09AC718F307E80B29885BD8B971C8670EB6
567AC5232C78281DD6B46CDFB5424CAD9B2753E3A579E44655FCD7765504E4DA
6CC0CBDF15FE40AA423055761A63572A112FFF6E06D4095CAC5179C10AF28F23
35EF156910F8F0DA75C9221E3F45BC7A8F8AF3361EE4B989D3A517F1582B6102
9C9FB50CE54BE9BAD9B7508388DD936F88C2CE278F26B5D50F9C8BBDC7B3D5D1
44869BE59F0904DF6AE6CC86E8B493367C1BAB3BC0C3405741CAD56CC32F4FCA
748915856FE50D442BEB8A77F9298A753B4412B6D7E24E2B18FA0D5A7BAAB82D
3297C9CEDC20F96441EDD77912A6E278C4C61BE30E4CE55CEE9E4D5B2FC43ED4
24F1D4A26A62D71FAF1FDB22E36A57E3F58DB7AD120D9DA6DA80D33DF167B2D5
EB80A3007FBBAF0BD71929B7706170B67822A5FF7C730360CF6EB23BC007F533
891BCCA2818D6019FC1622A804C1238FB9A0A8C6E375F4FEBC5758FF0C9116BB
0D00B6E24214CDEBB2918B949FBAF7EAC2D6E2FAF9287268BF1C0FB911F7C941
7894D8DBE81B0A41EBD0CC6D71A2E4B5528296D8827B8E99AC264C8608360CB8
0F0E85619073C13E213CE2CD9639843D9D4AAD46370C76C3162444F3AA3672C6
6C81B3B7E6D475C429AABA86C5E24DD1A399C71785CB889E27F0B23348AF0E1D
B32EDCD71B48CDBA049DAFE3EFBDA7D9A67E7B67CBC15B6A857627BBD49BE34F
5C7B2EA6C0AC33E522A40C38BB1F69F691122BFE48E6FE4003BED0D24E4795E1
2032984302EB1804481D62AE03D554871487EB47FB75983483B8E9F23E06D7DC
79591C3D2E376B51E3726E32E5C129BFF10F485B8221483C2AD47B0ACA1ACD5F
DF73BF7D5EE5FBAF3CF3E7189AB59B814D50658E1A4324C3B0C1E808A67F8C12
72B480A6159DAF45EC32E93CB5F15529115D38B484207D8F70375F3368518796
92EB95905F74956D7C9B33DF636E35011FF6D197C9BEA0190EFAA41BF0A7F27D
2A274B1D654C2683E8F0DF639D78374C15A410AC5AC35FCB375E20BD3D283BE2
AF971A843073DAEE9D88B75EE46A48E9C4D49E716E828DB2484A751597C7C5D2
5EE9D241443F85CC936AC92B6A66F2C375798319F29DA8C996F21B95EC298B4C
5C9808467F55B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADA84CE308717B9
1244B5FFC30C900245D5DCE465E3CF3CCE175875B876CA70B1C7D8A94FF1FF6F
EF4143E5FABA608F4750D9F6C92EBFC774E82C81D58DD157C1E71879DBFD2366
D421F3AA230DBAC8CA9B123F8F534C157499657E565BA5117DB4AAF5E956EC5D
20F1C64FE1D7838B468C663E67B8D29CF63309F98AB436039124DBBF37CF287D
3D5C30D20FD1358CBB61AA05EF45403C3B8019E9D8C967A5EAA288D5AAD329AD
7D1352E00181C4C75D7D3DF203DDF0F46C7CA67023CE052E3296ADB222FE2154
74A27F13C35538CE86CD9BB2321C5698B48F381A17E51B6660C1E7EF7566232A
6E513C7453D17EE21BE265B3F2794F257028C2BD74CBD41DFF5CB88D0BDCBB4D
B840A04549B1860F032E844EAC0E22D4B4002ACD8A06F2994D5FBFD1EAE7FCA4
E259856EFD5CB9A80D1CAD55D9DE12520D103B7F02C07B858697BB50311E3529
62F28E178127341622FF8A2E7844FB047452524DE681D9A7E3C87966B6C4E19E
E407FF50F4D224B1BB55E4436C6564C21C3CCE2DCFC39617FE918475FBD0EC66
FC2DC0504D432FD01C140E76FBCC6C6AD664E159FE319894B6CBB3425418EEEF
9BB535B3BB2DF00419F59E7D9B9BA37245CF1C3BCB4FF9EB8BF565CFC6665360
F71EF764906D8CF815AED3472F43BDDD82AE26C1A56BF48C23BED908642364A2
516AA18F35C7CC9A7C8D719E8FCE2E4AF1F3B747D84E04D9389D396B339BD812
67D36C0798F5C481E2DCED9FC19D635F88DBBC73AD3C77E7D0EC1C2534CB9A21
CCDBDE63E1CDB4CDE6CEADA87D16F3BB71F5DDB909BEE36A3DF05B3CC7E5AB7C
0429084ECFCEBD777E6FB60322F06E18DA533BB2FCA2267FD97ACDC041F92373
7AF827D0AF58F5013466FE35AA58273F81C7787B17C4355BCD1740ED981AECE8
D13DC653D59255F868EF158EDD758854B3CA9B1F3952D101D6CE60D1A0A97C99
EDB3FADA875CD27361E68D79B52B6C9A96C1A40596F048A31C4CA84B79ECA831
5278B0B4D113A3DE9EC13B449FCBD7D7268030A2283B586870FE655D6308126D
E32C494C6AAFF03F75966AEB09E1E21DCC69BE4D9266BEB9644731B8BF9022E5
EE37AB81456EDC2766E58C7E0919F96124E3D44F79190726592F5D4BCE6738CC
357F0EB6F73D82D602F094E4A4A8617B8C8D09650239DAF887E2021E75F771C9
4DF36956718925520070ADF1C1C69664036AAE24B2A8606B83F77678B642E1E8
A32C268DC6FE77C016E43B03A6967B964DCCF25D2190505A0360352CC62DF4E9
4FFE26C6E56BA3356F66D123C08884E9D27DC1FFFC2228F8D3B48E76DC5386F7
163541D0C4B93E527C3FDBE559390502E692582B811FEC555145C96752D54369
983678F60F298368509D3A43EA64942D937F2FAF5C06C8C166C58DD1549B7303
74F5251C04E601C27E854D53B858011323F1D55EDE81CD9A7D0EEDE17D01F041
3547027C48BE389FA76416155347AB064A53D346628FFCB7CDA7EC7753E56C03
DB4F9975DBD607AA00EAC0104FAAB95A5E6EA991BED6CD2F0AEBB87F65D5E67B
A200E39A0DCF5A147A07E082CB873440C4648D3FFF06A1499A5C7EDE76FE6748
FC5864733816E1508D5C8D60B37A148CE5D2077612A01938185F1DEE52D5F739
D1CFDD9459D56F76A86E449686339482AA1837850FE2D62A37076A214FF499E2
9B0DF425F90DF8FD6B5003D9C6C8787A337728D2A8DD3218AB9B7BC8F7037F43
3A0AB962F52147208D9EDF10C417047A8B74D9C1A3A4E22FD5FAB52B018842C8
EE56BA6EBB99DCDE2D95074091ABC9CC2542CD6C1098B0EDBF6AB303FEBB2C20
AB717557BAB2FFC553ECFABE8C88B26ECEB21A1007D6F0600E6791BA1EC07C6C
D73237A5EAD9838923342D8B23AE0864DE92FC7EA1F45B8152268850466A1FE6
63624FC26E88758AC01C1C98B5682342ACCBAE584E51CC1432C5F44E74E36936
63C3C16083AAF7DF1C9C512BF46E5E8F8DE7D91802CB02A1E206F7C1A77812A6
1DF88B80A192FE55A90B9B3B2437BF1ACFBF790C5FF425189D7A118CF52B78C7
9AD664A57F77226AA8E9366E0BEFB97591F9BA5D835B77624B250F7A90CA6409
D12E90D1BBBB4BD84130D816DB1255CB2548E1186CF3B370647CAB18344C7390
46F1F08811C66BD560D89ED61B57E3EE12F10AA1FFBC219000419C8FCB2E9189
28E55E3F16D464B4FCA258AD32BD99B92E6E63BC639819F59A963E9F90F4A846
85377B43F208A3F331979803EC35CE3F946D7D804C18E9DB580E492F7617EAEE
D853CC3D3CC3A173A7346B4A33C99BBA62EE86C30D0F4639F50544122F366235
4376F998E255DECD92AEAF5B1FBE7092B6596500AA70F399DC0F72C1F50D22B1
CA70769C4367B899A3688FC658392703ECA95499FA9D3E3AE57D90AF68DAC5B5
2DB3BD947789E40F9B74CCE1D5C8600F9AD8E790239E1C1D34FDE64332DB4C9A
D7D44086450D3EBD9D0A3DA94D8013DB6CE3DF54B83FCBDA79DAB70DFD8CC5ED
A3BDC42B5E3363A031F994326E2E2EA920985DAF8C271AFC2B0A6F5BDF6C47A0
FD0107140349D975F6C25675F4AB3AC032AA766939BB9266FCE46EBBA6359B18
A3B5686865153877F6F2408E2660838EC273E4D72715CB7BD78F30CC6E534616
2A410BD172C0484F92052E4A7259CE9C087E3D9E642BE1CB1B307A7A9CA14A29
05B84C0F90A8595B5B2E7DCBDE159D186205F68DCC40D23A9DB7735C52476CB2
85983164D26789F92FA27A93EAC3234AEE7BA514CFF0554DC3ABD77C95DB5A6D
EF71A52BEB3DCA668C32F4C209AAB55A31867718B9BD4373BCEB1C016B7C461D
FAA126A524413DC8D8937057CAC80E8FA60C452A12782F5971ABF6B397F3B968
3D04600010664F3299D669CE80192EA7C37AC97A776C19D97D3DED0A32241189
8B088AD85D767FC63FE6ECA1FB5FB867BF719B8CAE86492272A268433F7FE02F
EB71A8F1288B84ED4C91D5409B4DB4125EBBDFADF71A885CD7810230D6CA807F
F530C2BAAA8A660D4904562B9A1E8CBF76D626EBB3AEDF9A84C2ED95764DB414
EEBB4CA0769D3135376F1FA3BC541D6F289B083AF3FF0BAF2E5929BB08D42023
B94C5E0F00B7C98D7282A9483867A5E3CB8A16807D552EAC31EDF5DAB58B1C72
FBD5775C226F6F5E269DB6E969FCF3602B388AB41DD75410BCE2ADAB18F79902
40979684BEC38650871CE739E97B7A05D57D22E3A133AADE8677182B6ED8200A
C01880F2CAD5A57206BB1379DDD71CE22CEB99B9AAE35D05F063488A8DB6C41A
A0213ECCFC38C5E30884B01148737525E9FE2D2C753B4840934440C90C55B3D9
BE5338BBE39984EB8115BFB080B2E13090929978105673588C1F11545C20E21D
6D22B965F0AC5D56AF4491B6C4DB37737BC880D36EC0611DB7DFD41217DF50CF
B858513602908B93975C442426E857CED6002417B2FF13A94C2CBC5EC7BDAF63
292E398518BFBF1F3D6446A4E1088C4FBEBEBDF018EB3E77398BACE26DF56284
6A6AF6077A02A3CC56A3C98F0AB1E934AD0157BABC91644CBCA94138359D4787
B1685A17563B3BBD5D96E9F07C56B270087BE288F3C6DFABF6FB56121BE21BE1
A6FB45BE3FC86F9718516747FE59969832A666D91C1665576B6939FC4232467E
221C481C51D22AB823B47BA1583F6D365564E0430662AA1A4096C1D4D817E396
C1B62F17329B1B30C213CA73E745515DFB5E3CD8A2CB8D67A651547EFE9C11BA
EAB87E7827B8321C7FD25344A15C8DA9F80671A861BB5FF8B74EE2D7043B2651
25EDBCDDD3D45D282696AA2A8063C2AE6A819FA16571B213E6480F32C2B938A5
D3F04EA02988AEB936F5D1811E416A9CED945FC41140A1223C38A2A95FF08743
E487E1F066B5F3CA4ABCAB476D9EA8FD7AB9A4E35B2291CB47DAD4083B36E171
341565E6BDAD8079E5693565BAFAC11C3F555BE1B2E60922BCEFB61BD327A58A
F58D2FEF38BED218E8835229BEFA5E26F8DFDBBFB0638E1A35B6426E716C0AA2
A7D855DD79E4177FBE327843A65FC00053D094DE0403BBA1A6B764F66CE61D11
CE479FE6477286EB7914B7BF4A14D94594408AD1128D4055E1785F67EA7F75E4
C9A23AD92CD3E957A3352A119D38FDAE53C6C554BFB21FFBD2C3CF374BF49D90
A3E773D45CF964854E867011316598CC1E8FCE51CABF4914F165C4F4E3F187E8
E9D2CFF26A23A7F3272A66FC3363BE610FF39AEA43AA975071240BAF9B3F3673
B57692969B02EF115AE4BA927AB02892816C5F79AE712678AC0B435BAF51F561
CBC0C1A1D15B52371CC0C5D96E71CFF1E9C12E9F359C58F5B13242558ED9CBA6
19B20815EEF1594EF249F42E7FF835E6D4434F61A151D0ECD80C90B4E0612D9D
BD576FAD5805DAF995547BDFFAC3519570C53AF72843ABB0DC01C1F94ACF91A1
51D628A0253CA223BF0B8B48C1F74F11E0FE23511BBA82406ACBD9BED476557C
66E3EF99AF4BBA0FE1934FBD83324D0AA54289FBAF9E2CC7D9BDAAC09EBE46DA
128C0F108D6D268E0AD0DDDF82939669A03C2A9AFA9544CC0C8E8B145BCBB87F
51AD83318B32C62B5C7BD1CDFB109F708BB748EBD53B9893C7B86193998C9AF6
B6EBA334E42E05C376CFB59CF131C6A1AFFC9A0D7FF6D0C3F6913518950F8F74
E64603E3FEAF444210B3B5205B17E52727960E086BD7240E2A3CB3A171BC3583
C5857029A2664C7C6B57903A99A2CC5B5D4BB4E247AABC5740BDB1B6EBF63B41
B9A3F95ACDA469FF324490B2179C3753D24D82692F9998D43FACD708AE88D88F
ADCD8693EF82ED1643B437A0052F05679EBFB9E65AF623FCC881A69774245EE3
39D315193003BCDAA4898ED6C0184D558925C941EC08C8301EB6A81029F1C15D
5D06D306390158C91859859A1422520BECCFCC49ADE45BF9B8A4311888AFCB93
0B8C2583C45D88054B8DDA4BF59FA845687135708C6BE071C10EB76FD9672B00
A1D53C143742755B3A5B77E344D5AC813D7293EE908AC339A4334A1140E0E792
7B0A2AC6E1FEA0119DEA8542E0D9A65E36E0563EEC927571A851A64C4FFD2C27
84351BDF49966FB5292AFD8002C379961DF223249A2588429BCECB08A1116B66
E74EFBE543ABC8F0D5992A885DA915C60A49369BECA50F5F2549E9904945C03C
6C068573DEAF834637080D457B87C5601D7503ED40C1F082D030E598350A470C
355EDDA15C53B69F7F9713F521697F75F4A0116546A9D962C54E04876A61EE05
92365D4A01DC96667E2896098DC7553CC75B19FC11B97671068172F99A7F085D
9DEC3446B7D57B087370680BF1F01BDFDF7646A6B124102E3E79FDD913C722A2
03347E6B3AAE64A94965377C3484E63F176788ECCED50C3BED8E499BE594DEAC
5791824F5770426149862C25A9B84D4EF6DC6113C254CF39D464E36D407E719D
280F8319E80008944A00D7A19CFA001FE8FB3A8E43F5FC00838187454678D97E
DDFCDAB71EB0654DDB955FD2001ADE33183B5F100177685AB5002C519339F000
2D2FD0113F5AE59619AC0E8F823725A3FE184EFED5F7091C9A9B200C8836B997
BA01C1AF6FD69D9EE7E7E6B3126A318F15B21ECD20D872D589EB8D184BCF6A5C
4AFD15904D68C140C6CE231015D80FDD2CA9EC4DFAF3F3491D3024502E3DF760
580C061569034F8BD0ACF2405A282E1B51C5BC3E3FD6C409F8FB96500ACB9EA1
2DCF01A33D93559EBB6E9B751AB16BE6621A3B1FA63E1F00466CED4D9DA22721
EDC413FED19817AA5C20D2183C0B86B78C2959A87D2F83D7A0618D34B47511FC
E8D9DC39E50740D1E3CE4FB66268A6880168D762405C64F27A07678C00C67E66
DFB662E6C280B45E95C951F58F44994493C513B79CDB7107828124BBDE5487F5
D004799FD862B2BE73235E47D4BF3EFE242EC07D438574308F2390D1F5A1A1B2
14905805EEDD7E7B309EC5DBA385067C93F40313A14F21711B9548E0A7497449
C44A31F70E44EBFBE1A5271A0386E2EA4B06BDF05F7653DDA96448F3FB5CD6C7
BBF1E0D9B64F9FC882F5055D9A38F6DC22CB70E933811D70DBA9ACDD4589535A
39B6D98D6760700488C2451D0FE255AFC7662F80E1C42677231CFC7665016DA0
D967FDBFC77347A049AF60C860AA9D845C3EE9692A939C59A97EF6DEA8CE198A
CD51B48CB8EEFD48E705F80B009AC8DACE992316A2DEC84AAFBD92F033B33EF2
BB8A4796B618E6A3E8C6131B4F0D752C4C6A9FC68AEBF25F1D023C6E5B424F73
BB55E9EA795D3FE450576F09B34137B9095AE9DB32DF74EEB735CD1C98201F89
5AB94234C55AC2BAD918F124929CAAF9701057B34D94BB8BC0A27D0FD27D7339
98E988F4E0E7C56C93EAFB9C7745EE9FA75E2E15540C6DEBC833692D4A13E2D7
95232E925FB4EC9A258475F96CA49D0F9A5A63AA4C9451B3B017C0C2BACDA567
D9D0D8F40C7FA40791289E392A4DBCF54D19ECD6F66101CE4BF209AD55F2D683
CE217DF2D10EFCFF762800084B48F2383B3319A212AC1141D5E0EEA2F21919F2
3693D6F1241E39637EFDC805B266B494001747473ED6CEA0EDC3DAF024EC9433
2FD441BAFC5A788B815570B1407920CEA7DA106F7D78511B7CD76AD5A8C95282
2CA82ABF85216B9C3B894C2A2A9A56EAD87F6A2D06CC100A0535841540166130
D55B83C4730957B3C7FEF7CA977E504044014B09C17C6DD9508BD4BE394555FD
48923639CA09EBA5961DEEE6BF168CC636F6F3CB15DFD3B0573753E38D5A582E
37F98C252F9E2F4272879B9C16ADE146732E32340D7A0EBB74FC8062448893AE
405446B06F3931090F86BF704C0A32F277D568887987F95535283C2DC6E2D2ED
5E86F9874B4A1F25E5B01358B13D4EEEFDA9113239BA1EB1F51ADF85A2426AF3
D0064EBFC23908C4EE8655E12DCA4E6B66BCB89D193E796A58FD029922164DC9
0A3564CDD2050E48DBFD45A5E3D51594B472EBD68B46C87FFB5A530833A191B9
040BFFA457F1244C6B5E4238967370A588E43EA781795DF995D4ED2A5A72E242
59E976663A314360CA2E7AFB7F03C77D8011F8A9D8B5530320EF3B60A02EC622
EEB422FB45974DFC36217433DF6F7C74E2A35D66C4C18E416D2D1E4E85A5B3AA
5E57C6464C3AA88AD9FB9A1F56F1E7C0EE24B8B5D79460C017D8D66B2BDFAD33
4AB928770B071E88010A0816EEBCF04FFF7B14D090CA41E36A8C71C564AD9BA8
97628865E6BC4FE91CAF5131B7476A38428254BB24C40CDCEC03C42BE39DD84C
0A549ED79A5D5E5E098ECC6809B40FB25A0CFCD521A928776CC849DB3D188C10
EF494237F9F3148BEE2434DF7C97C3D176015E50EC1F51D74FF608C4D97F308A
09E18E7B130462CAC1C6199FD1D3BBFAB217AC5A76CF4662819215DB134E2748
550692083EAF823A4650D794D14775C5749E968CB439B2A08319445360C80810
81030F8F05464D998B930B827705F8DE7D2940970883CD836D166836976BB0E9
3DF8A73C492F82F4488B90A41148C8C69F7DE194D81947170F9E9F859DFB1F63
9C19EF850141BA6F7C53D0DB42CB322828EEA84024DDA0DDD38E7939829CF1B3
AE14361A797FD6C6483DC2B96654B5D8C4D7B68B8173C3CBDEDDB55BE14CC1B9
973ADF81D7EC9660DAEB9A49ACA9AA960B45B053079246F09B1F8BE89A55CCE9
E9DD740DEF15804BADB8D45E7ED7DA325277EDA7BC213C42F3698B7E08BBC858
02ADEF5D6C2C3A0A2D4999E5C46F160F4388EE435E90903044DFB72C3A137B36
5B8E7EEC3189D141E02910DB617E3C78C032B415CFADDA43C0BE6B4EA3CF08D0
688B9FCCCCDB9F3270976F17EB9990B05BE794F0DC105795B21073D844FAF8C9
C2D1BCF61FF6DD6DFB21B8555D6DAB748885D3A45330BCA9F7F7F4C90EBF3F1F
ED5E887377D2DB85BB31458BFB63E9E6B94C38A1D88435BD34693F54570B17EF
F49A79EEE4953A33DB4595E959F4D0FDFE24E8043E145E1191730E2CF138E7BB
12C79A6D561477BB38FC5A48FD3DB919332DDD383571D2C61C7F34D68DB0F793
64D2FE9E11644579DF288E46E4E916375D11E72F64C1D240A6321DAD6D8A69D5
4B43174104E1FEF55CEA074875AD1987CBBF217AD91685F5F363A593AF5963BD
B80E04623D0517232107B05D32C2DE49274D4F80DFB954602DFCC896C4BBE6E0
A75F03C7BF231689A66D53866CBCFCC071F6020002BF945452850AEE5CF9ED1D
A2FA2980E80FD1EC852ED253C4698A2A4DCFE6875BD8F7EABB8974A2ED56D298
DA8160DFD6664348C7A8ADBC32B0EE7AF1B21C91041D828C72E2878F2F679C3A
0028F3B291424BE5016B74116233186382B5EEF1B534EA13513B4232B2268B7A
FB245DE6EE82507913FA0FD10A72CDE7623ECDB2A89E7CD23C64013868FC804E
C6E60D4E0E7FC91749B114A9943D1541D8AEDD6C0637363AF3BCFFAA7F8342C0
E4D6DE093D59AEF80ACD2F00DDE25D97C7055F023B18F838E85B8E1227FBD0D8
BB01592D1AA8F52C2D05D9A99DEB612F13944AF6485DF46809D5AFB202C84409
CEDD4795203775A54CCF219F6E6E97678F4BF5AC89CACCBFF849D8CE2263CFE4
7234048B9AABE348C5E81029F97EF028CED6999BC37E170731759397CC3D47DD
6BF0A486C7BC519E2903E365FB8120D2C4DDF65456B353EA0D2FCB03FD86FD6A
1A1A68C4191BB8BC30C5BDDEB04079726CA43FCABE49351B4A5FED8650813470
481C50894B3D6961D460C98A8F7C911B616DECE890445F10907355E926ADFA57
57E73CF123CCEE639BD2715926204981DC0A45B3ACC18F6865BBEE2C50DB478B
FAA5565E1CF17841FDBD5D6171F5847731299332CD0309CCCC4B1D97FDAF1B73
1C5C2197C6A100DE20B8CA80BCD39F3372EEE5C9E22C82E9044EA18ED3A5DC8B
3E0ED62CB975944C3DFAA8F1F4154287F37A4CCD64C667351D8CA4BF261FDE2D
0CDB2AEA4C76881F7134C3254F4959130C6006EE18BBFB144946EDD6880C3D75
B079C2E565B6C11109AE34EF4E7CF279625550A95F3940A7F9F220F04CEB5E47
E08BCDC010639684301DC937337A52C179C588B4923E1F2784D8B52E77CEB9B6
2612E029B7098E35E6D57675B77D63E48D7D88E6552BB3C3C6D4E427FD7ABAFE
5A7068DBD0D9E36DE06337119B2CBB4573031BE63689B0B2F69F1E987D9EE54F
C6C43EAF6D3AC4B7298379C41532719EC0160E33824B183E50AE65D0674AAE69
C8D1707DCDB5AAD9BE0AFA434EB87638A10ED0C515FCD9F39ADBAB14BFA908A2
2FABB9098E839FE137837826B366EA3018E6EA15B928B2F78DB6B7C32913CB3A
32A712343AA5772845A518108C5548A8E05D6B26130180B89DC4F46FF9216F1C
43F4414B7C12B2DF11399D2282BEDAE14864E48C57D0F833DEB0CF206031C57B
B9E0C33618F76E5C0AF797744A09169D3B1D389DB4A01770863B5FD1D6CDAC9B
9A1DAD5804ADBF5BF85251DF7DB7E4CF77A2DBEB151A0F9CBD00E2EAE5896DC3
5DDDF5DEF3AED93DB4833D4DE82386676CAE2D18BA279288ACC23ADF1096031D
F2400A054E10E28F8BAAA845CE2AF57B2EE7205F707023A5FA5306CD8C2CE2CE
951E2571A78D4463B995CF6379645825941C8B7E1B1405E126F75057C2798537
EC841AAD80176CDACA3BC49CAB0CB620D3517AA2725F29A668466E60F4B88FD7
3A25CA0FEA3E5238AB3271A5B75ECE9721E484AEA8DEFA2A76B623AF48D65FF1
C7E8F8F8A34611ECF2FC72D04C39358F80A56E63115F1A4B4CED1CC44BB69DD4
1DE505CB7D09B0648AA4F3378FF330328CAA3B0E487196843C73BC7139824D1B
64CCFDC1111183811EC78038D8521F88E29E4C1A481201D19F2A70D8EDC02EA7
8526A80A3E2D132538E059471DF1BFEADBC517962A728E8C81AF5AA20D5CC92B
1CB4FEA12D19A76772C6F496EF2D2E5A6DE68D65CDDC1CCB2F040914451A48CD
6DC39120D16ABA9E1840A77FED4B8B1946C7CAEE37D8B823953AA248937D5DC6
E4CAAB6E2ACEEDF17D2D7FE4232862C16D1DED41597BCF640B08B8D586177DB0
14AB4D745196AAF73F06391A781FD3EA1EFA22BB67887DA8086842714B7BE4E3
86CA9F207C994776F65CB36C1789DF059995B04D0FEE3A3B7C5C436BF9F4F769
07EB0A8726619B8300581F6FF5CF10A21CCFC16BBC7DCEE46CC68078DB66EC96
269C90FFA27C5A51513DF558A8B499C7B6158A10B24DAC05EF13006A116C82E1
319A636C7D42C6CAADF62B15E735265413B1CB62F544C3791E2FE62B0384F9C2
E3F0AB9902242F0363BD8FA331F6A97927608022429BCBC01CFE15A4FF5BE089
6FD750B58D4BEC7A5CC93C5A589FBC2327DF691A4371AE69D4E8A25ECC7D9DBC
8F674F2F7B9CA678F7753479414CD8539E4704114F032BA029D8207EA02336CA
A0AF0587D4E1F7AB4DAE1A010D4FCEF3A23DB0E87364259B623B07898C027235
1A8050A5862DA9CD822BE9E806661514A65D9B5966938543FF45041B9AF54300
B6E768F96E93A2B631360664A35CE2BF47D21F6A7D4E95C2B5B1043A451D92D2
873049D87288A8DDC2D7BD0DDCE24B87BFA3F13B59EEB1F57DFD4ABFD20D4BC6
325B8C959F20608A339997D35387DBE2CA7CDD580C06A7DCD556D55213302791
AA7F9267FFEE49CE70902BC81395F39D9C37CE48DAA549DE6A1C991A3B0CEDFE
7569ABAA9786FAF86C7EC9D666970F39E1F01522BF2FCB6B28C527C32F1D735D
FB3BE539628048029307D8249FEAAB72F6E1C8D3B8FEDE9638C09DB8EABA360A
BADCD32C16E9F72E361851062C0D09191F8E0EEA8B2AAB1BB852FF9A88ACE086
185ED539DE6FD5CD5412150439080FB47F44979B73D8484B50D74D647D3426CE
D42B69FE1F61742673891352C144B40C5D496DCB96A463116389EAFF59824136
82F5846D525713A4FAE45EAF59536DF5A7E855ABFA3AD220FB352CF26ED3CD24
500143F538CB7376977E198F014D0556F15192E10DCF5EA55C12219C8AF09C7F
EA6FD2E1ED2420B6D9F5E6FA1855513B7131C7A04B00038E4DFF664771A58D2F
D3034EF423860093D81FFA11EFC8615622184CCB17539CAF6DB91BF6FA48E94D
48C1EC30A6BA30426EB0E6D69461F38D18878CA1FBABACC7C75C1BF7FCC76496
D80FBDE4CD2AFF544E59A633B5520AD3596F0857EBBA201642206044F4708FDB
F62294B8B300485F23313F77B8DB95CCD05905D4634E6514F2E6934B448127F4
E69CB601B34E608D91E065D219AFC34B7AF717E6E7FFF7B1BFE2E98D872573C8
6536F65E6200289B672D764D2F51B2393ADC71A36AC0FF19688AAE01844D622C
39534F12614E0DF155D72F1EB250827963D6D7864F506D98DAFC5178F2888E87
D68C0B8C9CF3C0F4AD17D591BA5E7D65FB18BC5BB7642593932C9E0DCFBAAF46
7119F1E155676D10A8A35955BADB667DB1018414188FFEF21AC7E214FC46936F
BFC2974743672B0F7DD281523728AA1F1A4C1179F3A0216A8774EAF00900BAC5
749FA9D196E8A0DE32FE52BBE6B0FF051C62F43C7286E7F84089E6E0A57A6A25
C2E985B02407F7153C13D5EC0E3FEC027648302A7D804CE1F42242D99C041326
97C645666DE201ECACEAF139EE9AFCEE5399DF86F18C085F63C61AF13F3B40FB
A7985A2A016C885C5A2271A224817B83351A82E98E7F9CD3220A11910C1E0F7B
5584C2E6B9D5BA77B5B0C130E19D6F2675105D68ED1870E955F58D5DFBCA8513
343D1FF764ED045DE9925708A8714BCA85FE11E8B61E2D46440A38083B9CB73F
8C64E51A1017DB919CEAB585B907BB47E6B700F7BFB9B1D564334AF337B596E4
F1204D41B660B370DFB93A12DE26CF50373AB7D47B509AE6F5C4B100BE8334AB
E5B80FE63BDD33AB828E9D80023B221DF6E4DE8CDDBBC6E37246D639A48AEEC7
69BC76EB7C15B023993CC4C4F7961AD4106C0B634039BE42FDE0447CB92C35E5
D1C4B8121EC2C5D4A229EBC79F56C27AE186E1BF92F1B58A38F328AA7F40F899
A64F1DC9AB27A302E7159A49181B7361CA0E3E304CE75549E2CBE414A9EAB291
D61FF851067307FAB0ADB6EC3A7359B9BC53654E4EA1BC3974206D4EF92EC1E6
01B55EEAB814FE9F85C938662C952E8AA77E5ECA141339E3017E542C9B276DAE
5F6CA5B002FEA37CCC641435FA6A3023533D99D222F957C060F5E18E43FB703A
7EF38F9CEC2CB0BFFA436CB8AB9F857C69E8ECDABE78DC83C438E6E95A894621
0527F4CD34353A8F9EA092F89CB76BD1130BDC552C7383FDAD1D5047CE22E7D0
086CDDC73B5B87112D2AD99FEAB937FA30BFF478890B8DE836F9B0B5A6E79835
4E80D1F3EB55F1C52F59FD01BDE8915301E406E1BC306254CB2456D34E588D67
23C4036D41DA43164BACC8ECAC6EABDE9FD121FE41E99CDDEA8DA5B4E516AC39
935DA37F4B3EEEFA42CF303DFD961CD5057F44D52C1B5FCACF66DB19F790BDDB
0B2EB573082BB774BD3A77F09FAF5C0BEEA7BDF5FDF540C8F5DEA18BC3044E2A
895A1C304D5FD0585EE746ABD3D68FDAF7F8756B84668463680AA78A41E4BA6B
3DB9B4CE1751A5903126FD80BD493627782C24ED17F9477DDEB103FF247068EF
9B9B43A951DC93BDAEF8478F5CA8D01F20F126F94694A52779B387B62E677AB9
493F19F8EF318A13AB1A56F8A23541BDDCC53E9F8B9BD3A6E19D23E9952D4247
8AC7AC35C09AE75F79198D5C60E652EF743F21C5CE711A883ED28585B6D59163
ED5E3D5958A8C72D98458D5F55DEF4CADEB8BD8042A9D8756F767AF4C6A93FFB
C5E0C28C3C460D540308A4B04DB21596C2F4E95A64E1AF8D887943226B7C621D
F48471B1570AF71C6DBB82FB7EC1F08F04A8146CBF08C0BD5AB991F4496B1028
4DDD785135C1282DC784E4B54412E8F2E3C4F57847EBC5AF87C86FF819AD0834
C9B7DD0218C101F7C98823349A006962A7D2D4D9CDCED3562419A23F568776A9
6ACE6FCBDD69667868EF371BF4BF97B67748B2DB3B3C57F7748ECBE844CF256D
98ED4C5C0A227E904203953A7E3555C74717BEA43B9BDA541D3F3F7A51424DC4
F6D102860A54D8E65681FC9A157599093831540CD7F246A83B8AD785EC080513
2321B44CC500D50521576BF0D49F0A8FC42D3E0C3F2096080F06CE4BF209AD55
F2D683CE217DF2D10EFCFF76280392A878FEBF5783565884B33832E598350A47
0C355EDE6A955AC85C1B43EB9623DB369D2E0217DE72D65B0B06C19116475A5F
5B893924EFA75F35C0412036C76FE0FB34ECB1F82313EFA1522DCEAE2C884D56
11A9FB51C6402B0D6797C0233F418BA4179627A8588FEBE93512B86F05473C7E
82BB2E21934F0652E84E68E517BD56B44630B1A6BFA438FDA7772A0451CFC77D
761DC1D072CD01B49DAA9AA7801CDB41A857C051ED79E6FC14F3EFFD282311E8
89CCFA7519DBB19F459459A259E26789B12EDD6E57CBD83348288C778F0F49D6
A64F395B415F9565E574B571CC7AC0511ECACD8027F440EC08FDAADCE219D41E
2FAF4E6B6393343A1ADD11CDB5FD36D030FB2B0EFDD9A57200A82974EAF0D36C
036B67A5DC8353C95AAE1E7875921684BB0FA3EB65D1FA0FF4E4E7321DF112DD
A778B1E50BC3B744AEE2F5C10C170915C33A6954C526D89B6B4629AC85D148F3
FCD59C29531C1F66637AF2DC7EF1D9963700E3A6CC6F2E4D9420B58F9640F02C
2D847365CB13FA0FC8DD404ECE7B7EBABB8F8300601476CD50E2FF831744F4D1
F8727B7F021BCE3FB62CF3D855FF25F5E0A03E407CFB38451B2B5A1C0E218AF5
4C91AFBF843352327381772606F5C42C194788D20A8168DD2085C4EA1814D98F
9BD8165E07032D4178868B36C2049406AB33BB7CC58CB532690B4BB9EB9FD468
97029B34E09BAA559E20CDA34AE650C23CB519FCDB1F15407BE246E17A70D63B
06C79767C883413637C6154A010CABC53339E8CDF172B872311C783A8F2BEFEA
7FC4EC2DF9FF5831F242B8B5A0FB902F9B2355F428C3574B3BE35B72E214974B
2B275CDC9CAE7B507C0A263B26287771F728FDDCE8BB0876873C49ADF8152818
A56EE364EC10133C444A86EF7C38608D246A1B4379C45D8295A4AC0ECF36C30F
76ADEB12ED4A41BADF2F9A5110BD01A06AFC0046335F97A2FF20EA44F794C1DF
D6B102660B0F70652222FC11308DA39AACEB2C15E617A55364B066B51835BB12
46CCF238F394F8BD72279BC3B0D28AB0285EB64B46FA556FF6AD04D46529E9BC
9A1876241A0AF37B1DB0A04FA4A80796D144BC1875A846990DF6FCE4FED3B0D7
87379E79F168B55CBECA8C6249F0739922B9E3610D8A1D644FBF257E8C925FF8
F244F361E78960E760F04383FCC871AF08E7CDDA69390985D83828FEEA902A3A
8052D228572ECF09F29DE98EB0A544672A851A3425B83A75006A44513AAB8A07
6F4A6739934FC130D1F008D8EA1BA584CF2DF2272546DFDE0F436FBBA6FAF73D
162E6A496A03F7B7B0550022C8AACB0B1C4C7D1C9185C16328AEFE032A82125B
FC780B67E76CC145477430843DDC80D805CFE4868E62C90C06533AE6C9A73E81
E0C8A798B6E803A0A99CABA87DA35B532BCA16C510BB70D387A2181F1D6DE4E1
83631716C21F0F952E0666AB4D330DCAC9C79BE3BA370215A15953B841058296
B4C31ADE965CD18FABECF6253EFE1E6EDCE9C0A6577A87AB79B843AC58E8CBBC
E530216B73DB0F2D11A1630CEF8BDF6057021F6B56DAEA3577DBB01E39FDA69C
81621E5DD2C351E1C312D6188D585FFA65F1B9EC81442B2266DEDD1AE262F020
AC43AC01DB8BD67102E1322FD08D6A1AD76D8FE9E88278D6B1082E18664E2333
A6BB929B7D2298CBDA972B35EDC8A6EB58E6FC06BD6957EC65834BA5284304DB
BD673F79CC1DC21B27ABFA53F4AE2E622FD816BBDE01F6E2DAE85D8EA07DBF8F
15A237EE733B8BDF3A9F4690278DC16D7BBC5E62DDABB4DA5C9565A5F9EE56C8
CC9375BFF982E1A068E9C61EA876F4FEA72D9BBB0CE566A60552DBD6A302E6BD
FFA20438F0184647B937DDBAD6F59F50D0EDC193D8E54625E72549B331F99949
9EE485346BAA58EA64499CEC18D850227063A8D9CF5706D604A0001FC2015995
DEE260568C439E051F9042F32A004F31DC71EA7A458EB6620FCBB0A5872C27D7
B74DB62AC8A9AB022DDE36A1D32DC13EF721BD656F5752CFDE4501FB071D6713
5E11DE300672BE196943B7DFA43C7D8C132234F694BFF0ED77A7847F7C747410
CBBA2473F5869D11C20D92C297BE6F1740C1AA795980BFD4498A70B19F2974FF
ACCEC903E9ABCB6ADFA4EB07AC36443DC19A5F3DFE72A253B6B477C24A622E34
73E11CC603E82A0A1085F0AD066EF848E437B506885F93E00351B55FADFE85BB
AEC4A93ADE99FFDD00F27CFE05C79882D616159786943A6866C0A6B6B8371E23
402A1CC4C7A06BF55F2E034F9C4D7D31238DF99FD12DE31548E2A2FF78A39EC1
65ECC6FAF6FA4A71C74683F2BEF22420FE0AF6DB142F9D944983B19A5C420532
82E1FBAFB7D0FC6951D6EAFEDF7F0219F677F101EDC739651619FB75D71497C6
2154E0B91E21CEDFC72269E3A4717152DC502D4AFE380534141BB989B0507001
D56A6AEAF466E28C5043B7F51A9CE3A629A6F9FC9ED41C012CDEF8E43A09C19E
DD9422F77B27BE343F685149BC5AD0083CC0693DF3A1A9D4B70DC521B212129C
BBD99BFAEFDDE78E346B904264A92A74FDB2B29ECD6CF81A54A3638213550235
AD11A2AFFDE3C954FF3FF9CA1CB2D8C5A51C4067BDDFC9A597910685A9BEE4CB
A868D352ADC10A5648BAF3128954373F9718877DA7599DE0AFF6ABB520C27873
799182FA161075ACABC7546CCED07147F459F299DA819F96842AF50BBED0BBE3
BA0D089E11BD8BEC9573802BA7CED8F5284B730B33CB7C3EA0AE08492B397CAE
838CA9CABB5A17DE7FC301C201A9B3E65AA5E0D230265959318F23AA05505670
EBC3A55E5E44DF8F5E39715663615EA685598D8408D1190424E34A664631E00C
17D80D4BF7C5FCCB5E7F9D9F6D462A3C3239C9397C79645EE0922D843D955A35
B70900EAD57E09228E923A91B2F778A0C0A9E736F7343AB6B84F1824B5F10F4D
4AD31EF47624DBBF1942341196BDAB13D1E474ABF85C79603EFA6E08301ED590
7E2D4D982E5FA720F57EC7DF7CF39EA825E6DD146FC3C90F4C459352F8149CF3
0339DAA54F8FA10295E0529BC61BC2C8C582E13D39634BF37685483F86D1F471
D92F072F126379A165479BE72057F0D6D0311BF204A0F06EE920F82C8D6C46CA
36C01CECA219E2EF410CF4A4879FA0E949007DCF8453E70E60A519674D305523
D33D516E9E84979B100B84152CF6E0E17EBA2352DE294B8539CD45ABE590232C
D6C8E17FFC724B0190424C7B39D8E7CA7983B9E80168018E04A84AB47C854C73
FC58A39574487E817E23CEF2A923C8DF147D5AD2E86744AF31213A4C7763160F
3F2AF7CD40352982F402E135F41F3D49A0AD06E06A2E0D9DFBDC28DE2F4431F3
A1923FA3C5F1E269C934BD3C34DE43B531F84B77A8397BCB1DAD738FAC4EDE63
8085CCD05EA3C8B8FD200E41CF7CC9AF09A5258D338A1A92C7E3D3D377A6A97B
D8C6807C21C6EA759EED61E6577FD724C7520600CA298B3013A64F1E02E9AC1F
F2F84BEF8FED7F6C22EC02CE64CE320844BAC4DDADC833B5ADE2DEAE9F99F951
002FA131D5B9B93C4A51F5FA7F361A73429F8CE0444E5A5E1F85305297040812
35EEA2339794C62CC07D0C7C919F7171D18BD6A5DF5075F5028D7EB875748BAE
25E1978780A922836FAA01D50CBB9B12B543AF2A86A99F4D512456D8D2AF4ED8
2E1BF056123ED8131724F0C8DF5E801BB31925B0BBC46FCCFC4AE4235F7BB492
3EEE9B65CBBD0D65F140E43A7EA149580132082317DD4A19E976C4C60427E82A
5A72E24259E976E6FB3381FBEF9762C42FE9FE7BEC1ABD547CBDB6BCC20BBBB2
89486F6C7E238A4862393224793BD5B382C23B1122731C45591EDF98D20D59B1
4294EA45E98F210DEE90F6F195A3051CAFF0CE719699C70E43EBD1E81973D800
E720E96FDBFF1B2D1B9A4577C2F4EFCB6D11B27F8A1E3C95DDE4CA70E9A40C4D
A7C306E48B967253105BB2A689D9C05CF8ECA2B285476F17F0A3661C091D322D
3FF1357B446B13C8880EF61DA7383F955444E4D85F3A4B29D5F9688F1304E332
502A4F4CB57B5D5B537BD2FF89086BD0C4CAE557ED663602182B0ECD5C73ADBD
A46E862AAEBB04D578FAD4737CF59D8871D125317E14B83714D18F84E5C4E50B
C74E41D2E4DABC951A7DBF1AB5613C04ED576C680B6EF4A8F9C6F1C04AEBFF8E
BC9DE06384A3DC6EE944C5EE7644A728194A008B3ED3DE2EFAD93BC4967FF861
E0FFDD170C5200DBF83E152A7105F942DC1C0D858CBA9164F2929FB4030E62CB
F39974B0BB0EE8E682F85A01C38883315921B693CE5605FF93A95A46C4E63570
D71786AB04B97811D3D2289389868FBB2765D46E6C083F24CFE6F8EA75CFAB51
85010A0816EEBCF04F8BDCEFE1F6613C06CC541A874039B3D9446D6F27C2CEBD
637401A381FAE7F306F726656B73B1A1EC29E2AC3B8B7A0430AEF9BF9DFCBFD5
AA41457847C5EC09C01622C089AB3CB216A5C27D602C5CA02817E893DF04072B
5D76AFE97A87CF71BFAF23D481C1335904DA22349A847ADE3C060AEC69C2987E
B7A316F6637DB6A215655EF488D040C63ACB5FA24E41CBAA6588E4F97D9C29E0
3AE381D34ACDBB00E3CE315A4B84B2A7B078DC11F710CB9C611D45774B56F81E
F1B1563DAEF08DC79854203280F8DC0EEFA222B9762C9846F7F3810CAE4D91CD
CA8525D00B9C4D39928B366BAA2EB284777A242DBF9CD389969C893E9FCEC976
8CD4D79AC47AD8A3AAD6EBF4CBBF8A7D89480C27ED5076D0F5393DAF1D8ADE58
9CE054D797015E5CBD6C0301DB726E6D3DFC53685BB5C015820B538AF606A1E5
B20DA2CDB6B5C69E42A69D64B62FD9BE77E6F3E541BDB0A42D8213DB41C1DE3C
202E9D83813823B2767E288C056EC80EB3AE0484BEAF3EA116F86A84DEAB38DD
EC48F63A24E5C051E8F76A4D0A9702D1D32288BD5C56FCBD4D1B9997140FF1D3
8287F621D25C2D74762F72120EFA39177E5FFF4A92BC9419DF5055786FD7493B
30BB1BAD145669EB205236FF88AF224055FCA8F8233EA946297008F271858B24
D25604B26B9BFFA5F44E336306BE2AF1192D947AEF115AA3D52E8B1027AEC314
89695C7B989AB876C6FAA943B2FB5B1BA001EF34B710BB4BCC1371402F8DEEE5
D544BA61DBC1BC58A95EEB85EFBD1AA3F0E669411F15758C33421E655A71ADEC
8429A6A40EEEA2DD963C04EDD832CE362C8151951DBFE23B898E96D81E0D3CEF
296B90FA1E06BDF0127CF7DFD11B59E2A4A16E941CD74E9D5098DF89C8B6BAF5
B2182FEE3EC44713052211D95BC662CC3B5C41B00224FC6BB43B7CAC8106FED9
3C2C588ABD083D372CA1B821957BA3B4373DEF6D49333EA0B1B33C6D3310DC53
4280DD38273B4E3DE5DBFEC65CE31D071D9223D2F99114E91C707875D4FAE7E9
C8CE4394668E7B4A30054775A204B855FB6363257A49745EC9D6EE9652C16E63
15CE9D47B1A020909ECACA8BB669BFF9E50664A6B13F302FDBF469CC22228D7A
7C53562474E361175B1198B9AEBC323C8FB3441673B0868CA45EF3D09F1814B2
176ED6EEF29FE4187ECA941F989DE4C469E77DC462E277620FDF729124429F4C
75FBD5515836A3A82900170EDD70FFCD186A2C8DFBD4B7CDD1841789F8D779E0
9FD392A0412CADA48EF98D2EE3DCF37286C046ECF2F52B2CFE1B1C5A0BEEC500
D46D44B42882F732110969CC5E81BD4FCFDA14BBECF72DE976D89EF6A0AAC130
E91AE2A305866A9A365D6B241BE7D9253A2EA94574D83843F194953B8205BEC7
AA6642207F906D497B89C0FFFC2E1199C371FD5F566167535A21D27743CD29C5
CBE2BBD39C3FD6BBC365E2DF2237D4313639F5601C2E5EC3D1C4927C4EABA8A0
55F8A2E3806693E6D91705DF19E85DAF8024685EE6BBF07288868DD6010038C5
AFC7BD0E74E4B3142109EE736CF7F7C13A2ACA19A8CE3C2B65126D67F7A6D7B5
F71143318BB4E61AABA47CF03B2DF10426FB187087ACA414D28147ADCA483675
F5EED82F6EDE7E1C5739F0509EB8F716FDC9DC778ED2784B3423B056E952EE39
810AA1571B537B47B6286D0ECE173A08D335FDE3B3BAFA9D023E66D6152466CB
EDED4C5A0D035374E9389AE46696B3BF3533A74D8CAEFE4F1D60E4489FC74414
4D747D425CF61416205CAF5BD25988ADABE6A5C93CE60EA5DD2C7E20D9469FA7
4A8497E06889F560B2E5BA130F8FA3638A107181B4C84F651B7DBE3E7C7BDD5E
D11CB3E522BC7861632D242F4870F765B947062FD8B2E8106F365321CE6809A0
37B1088D05BEF8047C7F25AC69F52B1BDFE9F23049183E23E2700A92E558B1C3
9B735BDCF44F54DBC7C2DFD81DC813954EEDC5D692F83BADABD86C6E8A5737F0
3BCE6C46F8FD72134CE01FCEBA51BA31DAAE557524B3ED5E7C5FC7313E5D4EEF
54C7729E5A5B5853AA7B9B262246B163F6C8F1119F9901A04F8C690CBB87B28E
E18C377E448EDBB082DF11CFFCD5FB109407E4360D280C9D239210D96EDB7C60
22BCC5A3A6FC19E4120868F5B26896DFC352E478C4BC3A902A64A764F9CDA8C4
DA5BC02707D427FE660A547FAD205405FE5ACB0EEB8E35CDF5DCFE535380DFE1
E09A3E6EE075AD7A69E50D87EA64A9BAEA850A4DB2EF027DB00B7026D3CAE5BC
072970057F5CF41B8DFB6E4D581393394C47FB01291F94E62FBB99C5A9BD1AE6
03F077572234B5E488B2249C28B904784242B9D2F7690A4AFE06E094933972AB
B4DA5BF152A75CD7ECCF261967A11FA5B0C985C53C78A45AAEA53AE3A455B322
3FEFC6A545382A2E7222F3F8A5335C37216F0E6531F1FFAC08CA6BE307888B5F
8D96F98E2285D32B02591630888B5D9C049ABC897F856B122B20BE512C4C0BA0
C5DA2EDB46F0D35265A992E29DB2DDC4AE288E61B099FD74C54774F3596BAEC7
BDE11636BB232D49DDB12A79CABE41AE960ADA62FC94FC1E4A9601DBA63640CB
AEBC10CA78A59DC2D65AACAC7266038BD7CF8F23D636C0AAE37F036A52D0586E
182A82C6F21B7A0FAADB2FB345CE7F801D08EDBFFCCAF634AE7A1D9040E89D3C
0D13462EA8A0F21140B9C53E17B4AB567174EE235E07C8C9476651EF63BFB0F6
5F087E3A2F686D0CFE51760C4C5E164C16AC0425642B172611E2058F2B8E348C
541267B3FA6EFFF40361EC7AF786763CD01049E0E8E46E4FA23F1332E070DF4B
1082D233C74A46F3C46E8A0BDC3A9F19891C00FE57A74EAA4CEEAEA98A534121
C8577CF5C53E2F75EC1174B331FC27C2BD73813A6BAA4F7CF2CCC1DE576C89AE
AA0717339C9E950B65B5E193F491E82C64D7DE9BD8C1B61B2D90142CB21EE355
0B6CA3A9CF69D8F475C9555FCC561D461175FB0AC81B46F88B017CA0805839F0
FEC0FC0ECC47822EA5F83DA6BE97B5DDDBAA38D18A86C73D6C434F867C1C9022
FC2D46D30740FBB8B5A31D01DB9F1230EF4779F9BC61BAE83F78BACCEA6C7D92
9101D12A66A6E57F252C7D86D2B389F7B6E5FC8EE0A4A0206ED9E38A0F129A47
CE4FA45FFE25F187121D9D3369B8ADE0B18E8D5C98E3F2CFCA966F1F68F379DE
7FAAED75EFAB2716124F6D3AC184BD0433C54E8FA683F78E23E782A9FF3E0D41
0745365B8E1DEF18FEA3684AD88D24CA7EB1464E4F8DA958012C83C3F5AADFAA
3B1320C05567959F0F8440F12B10451D7709D53B651F9BA57758468DEDBF9982
CE0819A5C1709C1FF4711EB3B76F8AEE4761037AB3EF5A602ED9C4DFD79D5344
849E8692DE24360128C6C70B2697CB8D5E2949E3AEFEAD3DEAEC166391D3AAAA
C0D200E7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 173[959 82[{}1 1328.35 /MSBM10 rf /Fb 207[255
46[261 1[{ enclmmathsy ReEncodeFont }2 885.568 /LMMathSymbols8-Regular
rf /Fc 149[369 51[0 3[886 48[369 1[{ enclmmathsy ReEncodeFont }4
1328.35 /LMMathSymbols10-Regular rf /Fd 185[723 4[830
11[553 553 5[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fe 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Ff 206[470 5[732 1[366 366 40[{ enclmrm ReEncodeFont }4
885.568 /LMRoman8-Regular rf /Fg 203[993 52[{}1 1328.35
/wasy10 rf /Fh 135[530 15[542 1[452 436 79[549 21[{
 enclmmathit ReEncodeFont }5 885.568 /LMMathItalic8-Regular
rf /Fi 162[361 1[361 29[1012 1[361 1[650 1[650 1[650
2[650 650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }13
1328.35 /LMRoman12-Regular rf /Fj 134[634 739 12[676
2[749 1[641 603 1[560 1[683 16[838 17[1012 650 1012 361
37[759 21[{ enclmmathit ReEncodeFont }14 1328.35 /LMMathItalic12-Regular
rf /Fk 650 2[723 5[650 17[650 105[578 1[686 939 686 723
506 513 506 1[723 650 723 1084 361 686 397 361 723 650
397 578 723 578 723 650 9[1336 2[939 723 2[885 1[975
2[1011 1[469 1[1021 849 885 993 2[975 1[614 4[361 650
1[650 1[650 650 650 650 650 650 650 361 434 361 2[506
506 2[1084 3[361 5[759 27[{ enclmec ReEncodeFont }59
1328.35 /LMRoman12-Regular rf /Fl 133[956 1[1136 2[1196
837 849 879 1[1196 1076 1196 1793 598 1136 1[598 1196
1076 658 982 1[956 1[1046 9[2223 9[2041 1[1685 1[801
1682 1[1353 1412 1[1554 1530 1625 10[1076 1076 1076 1076
1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }39
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(F)-239
b(A)717 b(5.4)g(-)h(1)f(Exp)60 b(onen)-60 b(tialfunktion)713
b(-)k(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fk(1.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(Exp)36
b(onen)-36 b(tialfunktion)434 b Fj(f)576 b Fk(mit)433
b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369 b(=)g Fj(e)30687
4318 y Fh(x)31272 4800 y Fk(.)921 9338 y(Kreuze)433 b(die)h
(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433 b(an.)p
1062 10378 44260 45 v 1062 15175 45 4797 v 1770 12238
a(Die)i(Steigung)e(der)g(T)-108 b(angen)-36 b(te)433
b(an)h(der)f(Stelle)h Fj(x)369 b Fi(=)f(0)434 b Fk(des)f(Graphen)g(hat)
g(den)1770 14230 y(W)-108 b(ert)434 b Fi(0)p Fk(.)p 42912
15175 V 45277 15175 V 1062 15219 44260 45 v 1062 20016
45 4797 v 1770 17079 a(Wird)355 b(das)f(Argumen)-36 b(t)353
b Fj(x)h Fk(um)g Fi(1)g Fk(erh\366h)-36 b(t,)354 b(dann)f(steigen)h
(die)g(F)-108 b(unktionsw)-36 b(erte)354 b(auf)1770 19071
y(das)434 b Fj(e)p Fk(-F)-108 b(ac)-36 b(he.)p 42912
20016 V 1 0 0 TeXcolorrgb 43621 17950 a Fg(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 20016
V 1062 20060 44260 45 v 1062 24857 45 4797 v 1770 21920
a Fk(Die)435 b(Steigung)e(der)g(T)-108 b(angen)-36 b(te)433
b(an)h(der)f(Stelle)h Fj(x)369 b Fi(=)f(1)434 b Fk(des)f(Graphen)g(hat)
g(den)1770 23912 y(W)-108 b(ert)434 b Fj(e)p Fk(.)p 42912
24857 V 1 0 0 TeXcolorrgb 43621 22791 a Fg(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 24857
V 1062 24901 44260 45 v 1062 30156 45 5255 v 1770 26761
a Fk(Wird)347 b(das)f(Argumen)-36 b(t)345 b Fj(x)h Fk(um)g
Fi(1)g Fk(v)-36 b(ermindert,)346 b(dann)g(sink)-36 b(en)346
b(die)g(F)-108 b(unktionsw)-36 b(erte)1770 28753 y(auf)434
b(das)6427 28230 y Ff(1)p 6427 28443 471 45 v 6444 29211
a Fh(e)7030 28753 y Fk(-F)-108 b(ac)-36 b(he.)p 42912
30156 45 5255 v 1 0 0 TeXcolorrgb 43621 27861 a Fg(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
30156 V 1062 30200 44260 45 v 1062 33271 45 3071 v 1770
32068 a Fk(Der)434 b(Graph)f(v)-36 b(on)434 b Fj(f)575
b Fk(hat)433 b(an)h(jeder)f(Stelle)h(eine)g(p)36 b(ositiv)-36
b(e)434 b(Kr\374mm)-36 b(ung.)p 42912 33271 V 1 0 0 TeXcolorrgb
6421 w Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 33271 V 1062 33315 44260 45 v 47992 4800 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123 b(A)369 b(5.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
37343 54804 45 v -2331 42645 a Fl(F)-239 b(A)717 b(5.4)g(-)h(2)f(Exp)60
b(onen)-60 b(tielles)715 b(W)-179 b(ac)-60 b(hstum)716
b(-)i(MC)g(-)f(BIFIE)p 0 TeXcolorgray -741 45952 a Fk(2.)p
0 TeXcolorgray 651 w(Die)622 b(F)-108 b(unktion)620 b
Fj(f)763 b Fk(mit)621 b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))688
b(=)f(100)424 b Fc(\001)f Fi(2)p Fj(x)621 b Fk(b)36 b(esc)-36
b(hreibt)620 b(einen)h(exp)36 b(onen)-36 b(tiellen)621
b(W)-108 b(ac)-36 b(hs-)921 47944 y(tumsprozess.)433
b(Wie)h(v)-36 b(er\344ndert)433 b(sic)-36 b(h)434 b(der)f(F)-108
b(unktionsw)-36 b(ert,)433 b(w)-36 b(enn)433 b Fj(x)h
Fk(um)f Fi(1)h Fk(erh\366h)-36 b(t)432 b(wird?)921 52481
y(Kreuze)h(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an.)921 57019 y(Der)g(F)-108 b(unktionsw)-36
b(ert)432 b Fj(f)142 b Fi(\()p Fj(x)296 b Fi(+)e(1\))434
b Fk(ist)g(.)217 b(.)g(.)p 14033 58059 18319 45 v 14033
61277 45 3219 v 14741 60000 a(um)433 b(1)h(gr\366\377er)g(als)h
Fj(f)142 b Fi(\()p Fj(x)p Fi(\))p Fk(.)p 29941 61277
V 32307 61277 V 14033 61322 18319 45 v 14033 64540 45
3219 v 14741 63263 a(dopp)36 b(elt)433 b(so)h(gro\377)h(wie)f
Fj(f)142 b Fi(\()p Fj(x)p Fi(\))p Fk(.)p 29941 64540
V 1 0 0 TeXcolorrgb 1481 w Fg(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 32307 64540 V 14033 64584
18319 45 v 14033 67802 45 3219 v 14741 66525 a Fk(um)433
b(100)i(gr\366\377er)f(als)g Fj(f)142 b Fi(\()p Fj(x)p
Fi(\))p Fk(.)p 29941 67802 V 32307 67802 V 14033 67846
18319 45 v 14033 71065 45 3219 v 14741 69788 a(um)433
b(200)i(gr\366\377er)f(als)g Fj(f)142 b Fi(\()p Fj(x)p
Fi(\))p Fk(.)p 29941 71065 V 32307 71065 V 14033 71109
18319 45 v 14033 74327 45 3219 v 14741 73050 a(um)433
b(100\045)i(gr\366\377er)f(als)g Fj(f)142 b Fi(\()p Fj(x)p
Fi(\))p Fk(.)p 29941 74327 V 1 0 0 TeXcolorrgb 1373 w
Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32307 74327 V 14033 74371 18319 45 v 47992 45952 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 47944 a Fd(F)-123 b(A)369 b(5.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fk(1)p 0 TeXcolorgray eop
end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fl(F)-239
b(A)717 b(5.4)g(-)h(3)f(Exp)60 b(onen)-60 b(tialfunktion)713
b(-)k(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741 10102 a Fk(3.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)413 b(ist)g(eine)g(reelle)h(F)-108
b(unktion)413 b Fj(f)555 b Fk(mit)413 b(der)g(Gleic)-36
b(h)g(ung)413 b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))368 b(=)h
Fj(a)254 b Fc(\001)f Fj(e)37853 9620 y Fh(\025)p Fb(\001)p
Fh(x)39662 10102 y Fk(mit)413 b Fj(a)369 b Fc(2)f Fa(R)45291
9620 y Ff(+)921 12094 y Fk(und)432 b Fj(\025)369 b Fc(2)g
Fa(R)p Fk(.)921 16631 y(Kreuze)433 b(die)h(f\374r)f(die)h(F)-108
b(unktion)433 b Fj(f)575 b Fk(zutre\033ende\(n\))431
b(A)-36 b(ussage\(n\))433 b(an.)p 1465 17672 43454 45
v 1465 20991 45 3319 v 2174 19714 a Fj(f)2957 19232 y
Fb(0)3267 19714 y Fi(\()p Fj(x)p Fi(\))369 b(=)g Fj(a)295
b Fc(\001)g Fj(\025)g Fc(\001)g Fj(e)10731 19232 y Fh(\025)p
Fb(\001)p Fh(x)p 42509 20991 V 1 0 0 TeXcolorrgb 43217
19663 a Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 44874 20991 V 1465 21035 43454 45 v 1465
24098 45 3064 v 2174 22895 a Fk(F)-27 b(\374r)432 b Fj(a)369
b(>)g Fi(0)434 b Fk(sind)f(alle)h(F)-108 b(unktionsw)-36
b(erte)433 b(negativ.)p 42509 24098 V 44874 24098 V 1465
24142 43454 45 v 1465 27213 45 3071 v 2174 26010 a(Die)h(F)-108
b(unktion)433 b Fj(f)575 b Fk(hat)434 b(mindestens)e(eine)i(reelle)g
(Nullstelle.)p 42509 27213 V 44874 27213 V 1465 27257
43454 45 v 1465 30475 45 3219 v 2174 29198 a(Die)g(F)-108
b(unktion)433 b Fj(f)575 b Fk(sc)-36 b(hneidet)433 b(die)g
Fj(y)48 b Fk(-A)-36 b(c)g(hse)433 b(b)36 b(ei)434 b Fi(\(0)p
Fc(j)p Fj(a)p Fi(\))p Fk(.)p 42509 30475 V 1 0 0 TeXcolorrgb
14089 w Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 44874 30475 V 1465 30519 43454 45 v 1465
33590 45 3071 v 2174 32387 a Fk(Die)g(F)-108 b(unktion)433
b Fj(f)575 b Fk(ist)434 b(streng)f(monoton)h(fallend,)g(w)-36
b(enn)433 b Fj(\025)369 b(<)g Fi(0)434 b Fk(und)e Fj(a)369
b Fc(6)p Fi(=)f(0)434 b Fk(ist.)p 42509 33590 V 1 0 0
TeXcolorrgb 1373 w Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 44874 33590 V 1465 33634 43454 45 v 47992
10102 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 12094 a Fd(F)-123
b(A)369 b(5.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 37662 54804 45 v -2331 42964 a Fl(F)-239
b(A)681 b(5.4)g(-)g(4)h(Eigensc)-60 b(haften)679 b(einer)i(Exp)60
b(onen)-60 b(tialfunktion)676 b(-)682 b(MC)g(-)-2331
45986 y(BIFIE)718 b(-)g(K)-60 b(omp)60 b(etenzc)-60 b(hec)g(k)717
b(2016)p 0 TeXcolorgray -741 49293 a Fk(4.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Fj(f)575 b Fk(mit)434 b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369
b(=)f(50)296 b Fc(\001)f Fi(1)p Fj(;)p Fi(97)28151 48811
y Fh(x)28738 49293 y Fk(.)855 51839 y(W)-108 b(elc)-36
b(he)442 b(der)h(folgenden)g(A)-36 b(ussagen)443 b(tri\033t/tre\033en)f
(auf)h(diese)g(F)-108 b(unktion)443 b(zu?)g(Kreuze)f(die)921
53831 y(zutre\033ende\(n\))431 b(A)-36 b(ussage\(n\))433
b(an.)p 1062 54871 44260 45 v 1062 58089 45 3219 v 1770
56812 a(Der)h(Graph)f(der)g(F)-108 b(unktion)433 b Fj(f)575
b Fk(v)-36 b(erl\344uft)434 b(durc)-36 b(h)432 b(den)h(Punkt)g
Fj(P)550 b Fi(=)369 b(\(50)p Fj(=)p Fi(0\))p Fk(.)p 42912
58089 V 45277 58089 V 1062 58134 44260 45 v 1062 61352
45 3219 v 1770 60075 a(Die)435 b(F)-108 b(unktion)433
b Fj(f)575 b Fk(ist)434 b(im)g(In)-36 b(terv)-72 b(all)434
b Fi([)8 b(0;)221 b(5])435 b Fk(streng)e(monoton)h(steigend.)p
42912 61352 V 1 0 0 TeXcolorrgb 6494 w Fg(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 61352 V 1062 61396
44260 45 v 1062 66451 45 5056 v 1770 63256 a Fk(W)-108
b(enn)409 b(man)h(den)e(W)-108 b(ert)410 b(des)f(Argumen)-36
b(ts)409 b Fj(x)g Fk(um)g(5)h(v)-36 b(ergr\366\377ert,)411
b(wird)e(der)g(F)-108 b(unk-)1770 65248 y(tionsw)-36
b(ert)434 b(50-mal)g(so)g(gro\377.)p 42912 66451 V 45277
66451 V 1062 66495 44260 45 v 1062 69713 45 3219 v 1770
68436 a(Der)g(F)-108 b(unktionsw)-36 b(ert)433 b Fj(f)142
b Fi(\()p Fj(x)p Fi(\))433 b Fk(ist)h(p)36 b(ositiv)435
b(f\374r)e(alle)i Fj(x)369 b Fc(2)f Fa(R)p Fk(.)p 42912
69713 V 1 0 0 TeXcolorrgb 13610 w Fg(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 69713 V 1062 69758
44260 45 v 1062 74813 45 5056 v 1770 71618 a Fk(W)-108
b(enn)378 b(man)f(den)h(W)-108 b(ert)377 b(des)h(Arumen)-36
b(ts)376 b Fj(x)i Fk(um)g(1)g(v)-36 b(ergr\366\377ert,)379
b(wird)f(der)f(zugeh\366-)1770 73610 y(rige)435 b(F)-108
b(unktionsw)-36 b(ert)432 b(um)h(97\045)i(gr\366\377er.)p
42912 74813 V 1 0 0 TeXcolorrgb 43621 72617 a Fg(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
74813 V 1062 74857 44260 45 v 47992 49293 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 51285 a Fd(F)-123 b(A)369 b(5.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24746 81281 a Fk(2)p 0 TeXcolorgray eop
end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6921 a Fl(F)-239
b(A)981 b(5.4)f(-)i(5)f(Exp)60 b(onen)-60 b(tialfunktion)976
b(-)982 b(MC)f(-)g(Matura)g(2013/14)-2331 9944 y(Haupttermin)p
0 TeXcolorgray -741 13251 a Fk(5.)p 0 TeXcolorgray 651
w(Eine)442 b(relle)h(F)-108 b(unktion)441 b Fj(f)585
b Fk(mit)442 b(der)g(Gleic)-36 b(h)g(ung)441 b Fj(f)142
b Fi(\()p Fj(x)p Fi(\))383 b(=)h Fj(c)301 b Fc(\001)g
Fj(a)30773 12769 y Fh(x)31800 13251 y Fk(ist)442 b(eine)g(Exp)36
b(onen)-36 b(tialfunk-)921 15243 y(tion,)434 b(f\374r)f(deren)g(reelle)
h(P)-36 b(arameter)434 b Fj(c)f Fk(und)f Fj(a)i Fk(gilt:)g
Fj(c)369 b Fc(6)p Fi(=)g(0)p Fj(;)221 b(a)370 b(>)e Fi(1)p
Fk(.)921 17788 y(Kreuze)480 b(jene)g(b)36 b(eiden)479
b(A)-36 b(ussagen)479 b(an,)i(die)e(auf)i(diese)e(Exp)36
b(onen)-36 b(tialfunktion)481 b Fj(f)622 b Fk(und)478
b(alle)855 19780 y(W)-108 b(erte)433 b Fj(k)45 b(;)221
b(h)369 b Fc(2)g Fa(R)p Fj(;)221 b(k)415 b(>)369 b Fi(1)433
b Fk(zutre\033en!)p 14644 22739 17096 45 v 14644 25957
45 3219 v 15353 24680 a Fj(f)142 b Fi(\()p Fj(k)340 b
Fc(\001)295 b Fj(x)p Fi(\))369 b(=)f Fj(k)341 b Fc(\001)295
b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))p 29330 25957 V 31695
25957 V 14644 26001 17096 45 v 14644 29855 45 3854 v
15486 27610 a Fh(f)98 b Ff(\()p Fh(x)p Ff(+)p Fh(h)p
Ff(\))p 15486 27920 3086 45 v 16123 28688 a Fh(f)g Ff(\()p
Fh(x)p Ff(\))19073 28230 y Fi(=)368 b Fj(a)21136 27748
y Fh(h)p 29330 29855 45 3854 v 1 0 0 TeXcolorrgb 30038
28260 a Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 31695 29855 V 14644 29899 17096 45 v 14644
33117 45 3219 v 15353 31840 a Fj(f)142 b Fi(\()p Fj(x)295
b Fi(+)g(1\))369 b(=)f Fj(a)295 b Fc(\001)h Fj(f)142
b Fi(\()p Fj(x)p Fi(\))p 29330 33117 V 1 0 0 TeXcolorrgb
3973 w Fg(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
31695 33117 V 14644 33161 17096 45 v 14644 36379 45 3219
v 15353 35102 a Fj(f)g Fi(\(0\))369 b(=)f(0)p 29330 36379
V 31695 36379 V 14644 36424 17096 45 v 14644 39642 45
3219 v 15353 38365 a Fj(f)142 b Fi(\()p Fj(x)295 b Fi(+)g
Fj(h)p Fi(\))368 b(=)h Fj(f)142 b Fi(\()p Fj(x)p Fi(\))295
b(+)f Fj(f)142 b Fi(\()p Fj(h)p Fi(\))p 29330 39642 V
31695 39642 V 14644 39686 17096 45 v 47992 13251 a Fe(___/1)p
1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 43714 54804 45 v 0 TeXcolorgray
24746 81281 a Fk(3)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

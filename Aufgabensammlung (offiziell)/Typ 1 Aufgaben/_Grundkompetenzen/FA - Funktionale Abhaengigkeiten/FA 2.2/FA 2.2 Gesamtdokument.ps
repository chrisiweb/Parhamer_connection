%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.2/FA 2.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:40:26 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMRoman10-Regular
%%+ TeX-feymr10 LMMathItalic8-Regular LMMathSymbols8-Regular wasy10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.2/FA 2.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0939
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8A4A3A66DC9C52
96DFDE89C5BA45AA1E939DFFE83840267D7D1A70288C3CBA2FFCDF1A4368603D
692DF9729847B5A4A1E37B766568C833B98C74B15426DF65C9CEEE3E3153FCAB
3050CA75A82E9483EC5B384BF87B91E7273975069C907199D36165A282C7C6E8
5A1C921EC9198BC03CE04A0F0B2113C7B19A19D7E3B17E6B882EFEDDC7E7567F
116654EF98052AFA60869686385A3FE61B5BA1369DB20EC80C8086DEE33D0297
BE0403E7694909E0D4657B9A187A73655F4CD055362BBD43CB8103899EA8517A
B8C18737EC2FAABD1DA7EB3D39A3B9FDEF15DA1F1505CDD37755796CD5FBA681
D46CF9314CC3D7E9AECA005DB43AAE1E43E95639D799B5CDCA5A5527048775EB
15B80C65DB647AED3D3068FA9D4ADB75BEA4DF343AD30344E6B4C7F83808900A
54D9B875E95CA8166B84CCDE9FB92FEF1C8224A481E31A42902243B83DA90CB0
F503589D4D806436C1287938562B2203565FD277C13BD2342C13A687C6CACA5E
2D35E33B794FD84C274A4D9C2643EBEC142CDC1A985E6F3CE8B6695B3C201F4B
7CD67C0896DA7E0638810834D55746262B47195560253D16818C5EF8A7D897D7
E9C788459B39B30321C6ECAE276B63BCDCAAC66E6F6EE4CE4ACFE894C33EDAC7
5933CF06BFDCA9E282359D114C1015DECDE764D6A2B3B5DF5C4A154702C42C30
D07D729FD4F2FCC3A6B97E1F5FFCC19203D7FD140B5D3C78CD706A23DACE1AB5
B13A4DEEFD88C8AF7468EB28FD5E0CBDF9E23D1FF320EBF19F28142D78CD96C1
1B52FE223AC12C65643F2111724CCA0EF177EC0C2D3AAD49BD2A0BF511A722FD
CCD19792FE94B9FDBF4065FC6CA66B02202BFDAA805E647AF9BF332D5EB49BE2
1977146C8872ECAD4D82A933A8A5E16FA17CBE3F977509340FF834EA210BF0CC
D3EC84AC8DBFABB91D54CC819680322EAB72E1250A760A2AC753F817F94AA693
9DAE286FEA07B203E7227497062C30026AB518D1BE399DB38FCEF12C4E988752
A88D8C98DC43DB22C6537028798198E2D3B0453ED720B08BB46736BBB09EE961
0D507A44794CEB9A3EAB4998A31F59584455FCA7617F2744370D43F5E2B9EE5C
AC85A80C440A6FDC9D19E8E4F78CD805598AD98987F3158905238F53B5565761
668A6EA34CABAFA33A7C345CCD46EAAF3E000C9245F536030DE2F2AC2B228E07
453FECCD0AF58C15FBDD5D36338CB0ECF40BA237177F6DFB6E00260EDCED9A6F
C8E5B7B915712E24D97A3E013429A238307E3A46BFD486834A752E5C0D519117
BB643C87DD94CA2BB185BCD37C128178A0F79CC8ACE6774BCE7CC77605F93ABF
EBD803E01C35504AEAA61F56E5B463649E058E104A8537D3D81053D9DB65EF6C
050296ECF0188950E744AB53050CE216C016608427C3FD501865604B85880B05
3A592E36D0A04CD581917A0935303EC1823825BF2E2F5C26BCB2EF1C38F3C951
2D50FAA648A9822FEE5B4BB37010E988D53382FF192A77346C86A5D1487047CA
DAB6064D531B1FABFC5730E478369E2FC89F2F28C168E6B988F7655114E5FF71
10BFC9D5E0419ADD2F5CC1C09AD68EB2CE58E9288356FC2CB43FFC49E6767BD7
DFCFA10CEFCC78AE7264D6AC158960359E31A4379AC573D700B7780D298520C2
D0698C337BF594D24900FECB67287A8B4CDB963B1104272310678F74491DA157
2344FA545EAD39D3BDE3E416E13D6B23272517D28E9E093AEFA728236C3F0625
42EEFDCCA2D1CE0A5DCF82C18687DDECD38E11AEA8AE17B02D3D65057422BD31
1717EAFC337558AA398E37BF984F934C66986C2EE9A510A9C87045DDEC6576D7
46C1AEC54ADE2497021A2B1380CE9F69F2A80BC2BA01FAB65ECE0514ED2F8CD9
0861F80D2C9BF60DBCE86FEFEF496AC7B23474DEAC4ADB7FF6B72CBBFD3B611B
72455DF41DEFAE3EF8FE12D52CB89184ECECFDC9A90A49DF2C1C2E47999DB23E
CCB74AA8F9B65CA96EA82B8A241DD366C3956669BAA979C0C7596E61997B9C81
8DA3B882966F6B909CB12D82ADEEFAECD240805D78448DF7E49A11B2F211A64E
B78A90BFCAAAC5B80EC514976A747B8E08E66BC3DDA8287F5E44788AAFEB2E05
BB7966CA5034B8EFD58FC08C1C182F83D34FA65B3FD76716D40C47CF247250C1
34FF33B4D8D885544C9A64BAE28239DA8BEB1A6A96E95B783B19DA7B1CC72721
564B8709C55F98E7C5F18E48575769447F56E70EA3FC9218AA9AA6EA2A3CCD85
51CD1AB6EACF05D059DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A13349D4BC
F8AB4CB14661759C675824F94CD151CD192AB4CD68C2588CE112A6D2ABD44B74
8AFED5F42AECB983E0C97BDBE9BE1744123AC8C0F438B7780BAE139B47680B3E
A235BDEFE3E247B0C763E132A0CC5F403CB09F7F5BC5378CD303C411BC079366
B9E331D0A01FCD55C9562E1FB2D410C3641A1DC59A816C933FF53193EAAFE6E8
70382132172F06F105BF2DB51EC3DF2714148469458A1ABAAA7CE8CAA45A9CF3
2034CD2106773B47C4BC871065E8C41CEFA4148A2827452E7CB712C1049B9D8B
99CE058CA4994F6AD3FD93A2EBD338C28CDCBBA3BD8E28289EF48A40723E39B7
EC79F2D3822C6F45A6AE025B3B7251C5F475F0C42E877B96009E065BF3653115
B309B3AE2E0B1F5CABE244D8F1F6D29DB3997620BB2E9F8F840048F96BD4AF2E
AAA6B47C55626F5C6488D48375B20B61BE229F35324501AE0F98009DA9ACC5F0
2B837CF7A3D467865B963C6CB6C2BAC0238F0A2AB3DA2768995A63AAAF50D6EB
1A77F44DC13FBBD93081B66089B327240A3BE0633C33C8E4823681BDBDD2635C
3E87602F531C59F95F25C76E0550BE3A0CA759150DEA693AD05F6FCA529C0B07
5B82B28489526829AFA5269D435D1D91636B826E97FC91A0A25FC7955B4348AD
DF7CDF13C26984F7E0035E5BF66BDB22301ADAFB260DCDF734710F51387DBF7F
59869CC9A2D5E699820F4CF92C09C7B8739428F2881E4C77381AE42D708DF8E5
C93474AFDFF07356C98DE52FCAE577C7EF0A72CB1F4170BFFA48734F1EAE0165
D6FE43CBD8FA5C85EDCD122FAC36F59FDA74420AEF97D620DFFCD216CFF0DB2E
60B9053B0C71F73BF2BAE6B0B60411388FD7F8F95FC7A4542DD071B9BBA94C49
6DCD748D1F24E11B7818B6347AAAA74FA8A5BC6F63F55B2A9F922A4995E08362
2B36DEFFE1A6AD802B4C6AF1F169805580F4EBFF87B92A0E4040F9F5A61B558B
A7502D0551DDFD1B445C6BDFA438D70A555F767B79213E14EF7C24C48C184E2B
C4350D72B6956D0C2F549618A5188F4F3D785A31C1CF5B24D127CFD021D684AF
84A8CBF988CF6C34BEFE7A9F38537FF36ACE4F4C186B6AD43875BEF479A567BA
B3764282DA78B388D27A6DEC10E31F1070B7F934387FDE0B8736AC99C312BCE1
CB7C2B074D386AEFB764BFC86DFE3CE4A2AD2F1014CD74242AB2821DF38563E9
D926F0DA88423DC2849432C1F9581422696BFA2AC17072EA6C9F52E42816C85A
F34C21215E773478561500E9ADB8BE5D338698293881FF237E9135E1DA3CDF10
9AB7631B321258281DAADA221C4D03BAA1C893DB536F4BE3C86F9764E9D7F431
3861B4D82AC0887211C58DB0AE8D8FD27767696A71E401C3D7EFA3F690695CB7
DAF3EC66FA0B727FC6AE134C01819BE812383102DFC5AE3F0F649948253EC51D
98A20B1C4150AECE1B6076A57364A56FAD9DD85AE2E3CDE1A4CFFA3B012398F1
6FB210FE1BFDCEAD62BC0C4D9CFFECDE469085BCC3A247DD47403BA7FCD1B57B
6C8C3E0553729B37E4FFFAD130F37CA200B432D886A12EF6332152F0E30D38E2
B0F1C316C4111563ABB27AB6E746CEBF9CE816B349CE7E2C8EE3A00E3B6A0740
8043CBFAD9A3BADDFC68DCCF67E30306F803C21AF93B4DCC5AA19DB2AB45BF26
4FB98956E358AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8337290BB34F9C
9378F5EECF7AB9804EE6F29D00C325FE6E644B9A34F6D0492707FF62210299A4
423C3ACC13EA148737942B3ABB615C574286277CD3EF604179CE6CC654B087FC
10B4C71E24BCFED96E689908E9D864BE3DDF1EA078FF00A40E236B7BCA3A8319
2D97B128519E4CCF2738342D8157822D42F334B8793F13FB6797C5E5249F87F4
EE8D2B2380848306F12A275DE016D08DF4EEA409ED0825634FEF2BA64D319E72
F99A7F085D9DEC3446B39CDE8886C5917EA8C3D12C66A4CA6D951C5831F822FD
91C71A737C3C3B405D049314F14D6FF093684229CF7A810D9FF2AE1806BE73E7
DAD8CCB7E454B088821A9F14B14855823DB7D1D12E2435634CF69890D14A1FF7
6CDB488E576319AE8FD72E288AB89F4ABD066FFA0C1E746B4D3945C2101451A5
903126FD80BD493627782C24ED101F4140C494B0AFA172887001E098FA34E89A
BAA7573D1485E21F13FA431B7B117E787AFD9B6F938D1783115590610C8526BE
DF26F171C5F4C80871ACD7CD327CB21346320CD3F2792ACA6EE48DB376528012
DF50DB540EE406F86B020BDCC75B131B92A963902D10C5468AD2BBD7BC209831
FE44C13336BBC3B0569784320814C4FA99AAB02B955569B4CF96EAD1B32729DB
E4756DEF299974B5B02B44080CB70534647A4C09D8C8BA4A3DF138CF7418003D
E88FBC1FDC0D203E28BC6425C308D02CD968BE87AC37C0E0F40739A4EFCC2554
F65D9BA49E0247C276A7E4411D3999209B7C8C8E880198F62F1EE7D0DF4029A9
0A8DC295D102DEC16E24B0E822A9BF2F4841144E5B06E3583F5C997211E5081E
B83DF4D9F3ED021857F33C1ACEFD2CEA6ABA7AC14F35734CFB25ECE3A9EA5EA8
03DEF478A1DDC7BF0C5793831F89BFE0A70B1DBD9977A5F4C77183F4CF9B18D3
648CE36D5ABB16F60486F9C38AF072F4A6A07BCE44699387DBC9B9F89DB6EF65
77F372161863C546327B4BC36E956EEF8CF19B47E871B05E8ADA834E775AD694
8BE41E7CE3784F49073B8A3EEB12EFB77E7AABC37F57BFA2BDD7C1143BA3C5CA
077D8042C15732284FA8C066B5436D54B97EAE0CFDA85B3EFC1C18FD44FF2BC9
93B88B9FDA9A8BC49F224A8A389D0F351D3C74500EE5012C07BC08690DE3BCCD
E19E8B67B5DC829278B1120A3A5D37A68E599900A96500D75CA74B270861D027
B81EB14663E3073EA5D1D9D55A0BC8ACE6E7972CDD9318A247900C698EB3D318
C1E33758D8990D8EE81BAE03AD70AF745817CA28E17D34137157DF2F0C16900F
279E3E77591E3F95B9158CE71477D7CC62FDEA43428C6F79C332342E15F75B08
A1E0A25D766B378FE86691BB1283618D234ECFE8B485CD72D666FDAF3771EC11
8B6420ED41D724F6F33903DC93B2A8D6F3EF87869378858BA7E6E918D5E46449
525A4A5C89902E175AD3FD3DEDD4C85EE5217379DB414EF338962847BC752EB0
EFF7BE8B688A3622826EC83CC42DCA4C808DF9894AACCF6FCC5C78714AE6F776
AD12743DCEA3C8C9D08E167B32B266A48D168A7B15993737BE0E6C288711CD6E
BF9453B2F632E36A15B373FF3FAE535329F1FF83125F1EE19256CC5053025616
EEEF28F24F95FA92776948AD4434F8B41FD8FB187D24F232C6D89B727968420B
73207821859BB191D53398A26D610D53AE6A1B04E7BDEF7E850602B6815EBCF3
E19A3AD3094F5C09CAB3EDCFE19EDE2E31F837DF86F1800F59C89EF6401112A9
920EC9C57B38834DF8ADB373A5B5BDB1D57F414F3B9580E3A2D1A275297514E7
62C01CD9930799BDAA3C034F4466A9AA7EED0A2C9DC58C0E1C62AF2EFAB5813E
8C5F1250F2589FE68B29179A3E97A3F0B35A3FE8DF5B2583CD5333D961386F3C
0BEB0B0E360A3343249D4A6D0E97CF931207960C9BA56892999790016B0236D7
19FF602DA5224C0BAB8B6246766D5D0383CBF71F3159B5B1D9A6E3BBC4518671
B8D6440A282859DB641ED9F940FE4ABD8A3824795F928AF04C833497F7C4B1B6
92D0495AB0787EBA30853A9B90DDDF7AF372B76FE598D19AC35D7988F76C9041
485C16FE9005D865F680319DA302AA75A3E4AD0DD628D2D969B17440CA9AF1A5
4675CBD7ABF2B2F054AE1254675CD0EA94A638DBBD0D0627A5AE85B3B0609E57
994F61B3289BC269D6321696B1D9C4208BDE9E79F9A6FA677F1EDFFB70E37A26
C6C3F2E101693C94644471363E157B01E8B11BB02FB00762A522A3DF2BD0251F
D7822007395A5D78C698C7366C1C453FD7CC6E94C47BA2DBDC17A5FFAF17078C
C55DE418D9573497D3911E976926FC81BDA50FC3126234044386036954E9BE82
3A79C27A4408AB95CC3340C7BC2658981FDB476C67E8BF823884C97FA6FD2DE5
B292D97D0335BFC690BCDC1C21BA7219C6A702B7E6453B1672D45B719225BD4A
B0E5451D335381488053602966F43A43037554E44CDC08B36BA9CF1C1C78A880
0AE691524E1C6FB25F41A15D8BBEC9250B35760D221A457E0EF8D3509E398373
59BA3562E3DF1EC0530A838346B7C97C616E393DAF3553A5328129E033146AE5
5A893A5F9B7B3709B544C8412F8BF64203D554E47F31B7AE43ABEAD548324A5D
AEB9AC7E77DDDC367975577DDDEA8FB03F750A52C070289822BB03028524D9F7
34EB854BE550341FD8148EBCF4482E9D977385E7B94A9DEAAB1B74EEB7B90824
5CDDB7A093C1AA3078E504231708623163ED2DB636BA33208269330C24A4E0B2
183FADFD7E2B2575116286D1C2A40545F973870CB8CC759E6CEB1E2B2930DA14
63937707D0661275B66BBBF9BAD3F33E0E13DEC23F367F3CDAADB9A370228BDD
712FB3E6E3B114C105A187E4ADE0186B8ACBDD4537C9821B586C1AA0E3D26C56
EBDADA436649A0E14AB04AB9A374E930A868D4872655A2BD4F485C7FBBFC1A88
E17F145078D8B20BF06930D39D4AAEF7F72881909BF65CB09380CA8135AC83AC
F355B3085E56A4087ED0849BE7D62640649C18E72E35E5721ECC6A9B55431994
50D4DCF85355B62186878ABAD0E20B2DC4557602FE6F058A6045973BB2EBC862
E482643DCE6A8EB4E099D4A15B609E3064DC9FE24A1D4E922593B8D115267A56
9CCD715FE50EADC5978C60627E06B99C73D440591249C8468ADAF74767FF59DA
5904DFB6386ED196F743FF57EE7DCC2FE096C5565DB42D5A4BB5A14E1217960A
56E41FB7F566D32F10D41D5E07065AAB5CFCACB826EFB41D1A7A6F59DC8AF874
E461A239212F05BA154584A312D0DC1C199035B90E8B3A19D0573BAC967DB056
85E1E2031A7EA3B7A971E7669D6413FCC65C406B8A7DA92EB22F6DEC316C5898
6CDDF0161F8F98CC3027FB5FDF901190949B4B6A3297CFB9B7C1C0F575F4A979
FF04F1B3C17864FBC8B92B77DC4C2A52659DCB7D2970392C6F0911FDFD11B254
DA5A7E27E60E386F32B5BC0788181F511102AB15CDC60F6EF061341F4D3A8A3F
C67D9F369BED60C6E321A55CB96FC41F9FDA1FD2D967EB9B7F6B389EE22D1C08
02FACD28FFBB1FD06344F73CA4963E8ACEC1D74254D65FAB990CD2DE0ADBFE59
B74C19F6098ABCDB06E2D56FD40D8CEFA73DC32A2614E905203DB858BCF75E95
321A7131547E0F2BACC0D0B67706DA244B8DFDC8E62D3C37D431F6ED8353D14D
C335D2BE90B5C581D6E786B578AE7262FC845FCCF787429F4A3995CE613728D2
6E6E3DF9B321D1550C15C0E45EC2EF425AEE66B4BF6D4477E72DC3B753BC0DA9
4017AD3ECC7AB7872B90950DE333A444BE5476340C4F274EF8D30ADEFB5B856A
8C34BC6B1DFBB5E5E0FD6150E4A8F7948D77CD88A995C71A69F35BD0CA454282
4B1F4329D05463C019ECA4A7C3C21E322AE6C2B6732D60633B59C2D874151117
1B2040FB6637140BE927369F803A4FF311D467EC797A7675CDBD7282B6F1E814
F280483A55C252B0A40E7584C71AFECE41946AE57589E52A9DAB9B4C1330A789
52043093DBCC03FC0A022D504EF495A6B5D5A0181B21A1268D6E761CF9B88320
7F1478ABCD112D3ACD5829460DFB26A3E003F3B3FBBF28863BD0C4165279A8F0
5A7CCAFE3F27CFCB8FB95970989532011E12FEA1EDCEF3786FFF98C2969A2778
4051AB6D62A72179B3A6C7AF7262FB22E5DD6D1A43DBC273DB1BE1C5360938A7
15794B78307D3B0114860A6C96BF87BA567F795DE7D59F934AF63B21B8188396
2192FDFE7ED39A2F4EB718886E4FF6A985BD93B63B69B0539E5B60B9B751BA8B
96989AD1878C8A5C000CBAAF4D8B1B920CEF000A151C43D8460E822184095395
E09244CE34C8E2F3833988827CDDFBEF79999598E57464E82D184CF76BE6CC54
6FBC0F3B272BCFC8EE865A632AB4A611CAD82809B72668606C1F992A1D8ED0E0
5E441BBF12394F7EEB8B3819183C0B4D2F92C01428AC9051C9F5AA344BCA6CEC
10B732679DA262C5151B948E529F0C7A21052F1A28CE3432A48774F657E6CE1C
BBA31DD5B6A2A51DFB6604687AE4E6C3FC0007733572C4C243D9DF0E9D06A41B
396DEBEF9C74E4017237825DB5F7B38287124B1DF043B0FCB636084A0251325A
A04438BC14D47CD354A980A539A617AD6932D9D66638FDA8BDD4DE1F10153D55
1CCD7325032E3856BD6E6C845E2379D4B42D8D19FA6D540368BA9F7BBDDEF785
603AFB76B55C10426C6B620BF1890A7406C7A73B7596DD9C1EAE6D72382D60A1
A753062A05C1F131CE46A71C51C1B1D3F58F626B0C4F0382A7A3F51A65171E8F
6E05FD0EAEB026BEB5B1B2ED69589587A48B075095F4999DFFED7C736E945F84
53ABBCA099EAE8CEA000FD30953CFB21EB332B423034CF5D6DA93D934D5C58DE
02DC65C84D914A718710D358014F05D7703139CB3914A6C9BDE8CDCEAF38C0BC
9E406A35F44C6B412ABEC732BA0C53F153AAC4D8526D51B72E18F4D380225458
93B5D04818AEBC01F60262586BDD20A1184ECCA49857A849D09E0DB940A5951B
BB6FD4919B97FD653F0D102D2B7810619C4BE23EE4244A76684DE444A8B5E1B4
37D934C50BEF51FDD152F3E1D16BB5DEAEE0CD3290E421B6313DAE88F83FDA1E
8ACC3588B776A0F38DA32B37B3D6B8701CE2C2E237091723377A30F50EE2D9C8
C41FCF68538E049F605961485103BF3C2DD396E682EB072BFE1C08796A7B1CC5
A228D37AED24A6B76E20BFD980910C422AB3AC370CDF22BCACAC6B2846EE2005
39F53F833F07277994D2904DC557746508623BCEB72CF3851245881C86665B77
8CA1824DFEC5DBF19D4E9789D174520A66E3DBFE628A6567768FD3A156D5C125
B46B837416E74BB617AB42062B7C7F46A2508F86BB55BF9735D016B803C38B89
2380B03933CF7AC339F7B421983E6150DC5E83C804BAA57C6E19CF8471A5E819
CC19FD7DDDC82A1E46EF79FDC5CF1DF72D2275F3857BFBB4FE70DDD0A2713820
D615BA8AE46DCDCD93BF182F0D752C9B56270A188A7649D8D1437039443AA946
A7630D1876FB0AEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF5124A5A0C14
3F7D89F5A7906D76138611002FE7E928296A30F501DAFD59EBCD8504F5FFF188
84570CD80BB698387BA9A9D4DE33CD6D813D150A71DE3CF9D20F5FA45FB3352F
C60563D081F110CBB181C03581AE7F5CFB6E2CC811296D37D0B3F10D8795B37F
4231A18A53FFE7F6E2AFD4F1259F366FB11B9A9D5FBF66C5988D9291828004BF
D1506E19FE361FE6870EF2EB19DC31D08B3B506F8977119DB201F51DE0923D0D
96041E11FDA9750E1F4E6F65FB245EACF240CD5E1806A89D6122B7F23C4C6B1B
456EB717ECF3B8886671E1B1081AA96246E185C477A9D3E90928C19BBDACAB70
E1FF207560FABBC42680DA4692B70C5BDC3190C4CAC7F46D748B1FB871C97A78
FE15CC07DE7FA831F8D98B9A1E9FE0D79698ECDFCF6BEFA01D9EC1E9C7A986CF
2EEE20EE2DCF174188380EA574CD7D927A71662AD1F1404A836A801A94776AE8
FF003132928A98F3ED13B3A092119275C4A4E8E7635BE88FDA3523B8E87EE260
9E8397C2DA3E0F382A4C8057DC812849489EBEFF8D46AC997C8ED678DBBECEC9
5B1E3EB16DD6D9288D01300D51C912BE7CBA6297E68387A161F72C8751797854
D24B672F4AE01822A9E0A89E34E2F500E5678EE0E9433AB4F7CDE57AA7490C08
03B59CCB38B77BBF8CA0584C11295A73FE3649A98308BC5906C1DA356869FF6B
4DC925E8C00BB3E642A64685456B6BAF629AB8085CEC7C0EED7A3B6BF6112C35
C2953F4A76FC5F90AA018907D25EF38327EBE4A4D71078881731C0445AFD7EA2
01785F7CE75AE288A81702B5D53D7FA71F20E220317B91916BD508870C6C6208
61E751C779512C404ED48FF12B79DBB642914AD1214B8BFB43159501BAEAB263
FAF927BE2708B21D9B6D5A3669931BEFCC716F622A9652257E0469310B4681C5
8D18345EE64DC11A1319A075FF8717A86574669C7D9712D975674948A0C76CEB
DC6D0CEE926120656B73B1A1EC29E2AC3B8B7A0430AEF9BF9DFCBB814B092618
2486AFA66185016F9E506375D1E089C674CAC96C3233AC20FADB3505BE2B8C29
DB3630B72D102B8809C634549DB4DF0C90A4B15CCEB79085BE0B5CB46EB11E57
B71E6713B98776F95D3128349CE319F1E98BBF6959D8DFD24C4CD8D9B4A021C0
D6ECB58B929D51B9BAFEFBEA9A1804A05B350671BA8D9838EC6FD9269FC730E2
D105E1ECC35934343FFF768A9C7C69C1DCB4086F1C2DA5482BC6A803CD7CBE72
97EDB0D63A166BDA4DC1E9C77C262F5C1D848726B4230B4F8D878451CEFEAFA4
974E3F1E88BEDF8B54AFD478D9E939D0D4956846605418F3A87CB3A0749412DB
BE8555BCC1C9301918B98CB3036AD9BEC1CCD81D28BEDE22CD263C60160BEC9F
A8BAB9A3FC2CD04488D639D423941364192AA53E84DA5A4DE530CD4DF1E45ECD
B7329F90BB064E90631978245ADC09D8BA1FCA6382226C92B9537DF8C4F37383
902B4E1667173B62202487944A1FC201C6C5263EDD2A7CC63B5B775019F11E2E
DC39FF4DBC037FDEEC19CFB7C20815516316E3733B9A89343A3AD1D072E9FB6F
4FD96BE01DD08C6C539A6483A9BCF868B177F15C14A034E70C5AA4687613C37E
1EB159606D2297BC192D312488ACA3A78A2BEF253D6D1B216F57E649801411B9
3613AE10E6C7EC3198B55A098D5FD28E46480B0DD99F4679772820B94DC7FE83
00821F105AAD8F008A01ECC02E7933E19CDA965A884BE6F2B792C0BC289B8FA2
4D22A82C90A63566472F67838A67117694133A3248571E032FA87046115B7083
074B633F7E7065EA1ACA0B22F411E04AE47B92F8CBA53F25371A95605F8A120A
04A3E08D6749F21CE313BD5A80C3A2DD17590E8EDFA7C7C277BBF9E386D35F95
636EC0307954ACF32F737961660719E8594F3D869FAB0C30EAEA3A58039F45D8
7E787DC0EC3562E8A8F95F922F3AE3020D344F1D4D782CA0ABA987541FFD5934
A377B4E670B5F2DF83040BF71A9A9B369976055E2BD80245F249EE3B890E33B0
6E3DF0CA28D9626A7DEEE92DF84CF5967893ADC4A8C7BD0E74E4B3142195DD8F
5B2A24F02D547171668B1612C379841BC04CA5D5C9E7B9326E24A0D47D6C4E2F
881EA0D64F3BF02C625B92D884416C53CB94E66F3F50F55A041447594422EEFF
ACCE6AF7CC9768F720A33CF4229BF696B159AF031D2926ED0C9A92315083D99D
5BB8B016EED1AE2A0123C15585E849BC46825B83A5610C3A29B98BF9BC188EB6
535481A757C2255E5832AA2DCE5CAE2594D4F72E5FB7E033402B2679E21A616C
8EE824E4B46F8EB3B207344F9CA52989AD8A876F13387DDC0686A09422A17124
B098EBB0C3F25994A3516862892CA34548B4769A0AED35C6A162A2F8042E0762
A9360A77D39CCA3E498E6672788DE2F61EF7006D89EE6E8F2B7EB66114FE9DFB
07B6529FD752D2FFA4E8E41BE6221D59646155ED2C2E95398C0BE9BC7DC784E4
ACBC3A4A0EF41516A90F3B8A854B7EF90FA0DFA208E4C47AEE28224DE50DC4D2
9EF5120477430432067801A15476104F287263B114853CA1BF1C54B28F3591C1
B05ACF3D46952ED7C735BD3065066563083DE066F1E9B3F312F1EEA3FB272DF0
32CA0DEABE21398FDA5FBD5500DCA48E4802CE99214F66E2585DD7181AE09F38
A8152E34920B956EA77BF7EE8CA94484C8D06F0C5EA658E1E27E801178FB40CD
091CA3CBAF94EE7552736029B38142005DCFDC0DB99F04C960DE81273E2CC87A
FCE644D65932A5F34BD976E8CC2AF7C0152DADAD834A43DD5CB510F4E2813868
F64E427B56ABD8AE83CD6836A2A624A32128393B9D4638F0A9BB009B09A4C293
ECEB28980BBE80093D74FC73C15FD1819DA9EE1F6F67A0D65D35E3D0EF63274B
611B23987085B0C1A6D5250933CAFBC2CBC707BB968B61EEE568D34742728286
23E396AF3355F932557CCC2FAE2B10F9E5FE82CD6AA69212F7C45DD001CDD50B
27558998789A9665A76F64D7D5EB49B35CBA7981059C65967C51EFA557909650
BD9404BED91639395DB88CEF35A4B85061663B70F9A37D5032501CA2C904FD03
00ECCAD06E7BDABF230270BB9367AC291B5554ECEB61CA3FEDB24200F34D9051
89C29DF8F410C6BDC20BC853E357D674717EBD4461CA415362050ECB9A7C3AB8
AB6C697AD5845D58D83C5DF04B3BF096B274A94FCD5719F163517FB66E333C81
C7738AFF44731B6DB8007749D1B605F397413DF96D60AD4A66E5F8C165CD0D25
4DFB8F56C192F0F96AB797B70956F01DD65E1DECC56BAF8D3062CEF9A2B89179
CFB08CD31335BF56C3BFA9A6819731D70E62616DE4997C6C883ECA60623AF6D9
E93D1D93EC8C8C2E8D9D06EADD9B67BC0CBC2D312B443B447DF41125FA6BCC77
2A6A67ED1E3E4859826310476781777382D05A089F2CEE01C9E68921F58EC322
B1D86E58CE46F9982113791C051AE4F33632D2B7C11EF06056690527A4EBD1F1
355C3BD6C8641DE8AF71499D39CE0567AEA286091BEA9D6A443A5A773349515A
B10DFBF0BC3B537C3B1E57934EC351A8FFF8A878FF00A40E236B7BCA3A83192D
97B128519E4CCA3DF3D3E0197151EFFBD0C3AC4C36967A941825BEAB6C5ACEAF
10CF6ED9FF7180E277C771BBC84A300794A6EC7AD19594162682F9947E1A097E
36367B9D631483124BE3226F6BDFBB08490E8968CD02762CE02CB727B8B6F518
1D399378863E3AC6FD31927C8FBE090DFFAEFF60864D049ECBBEABB9AB7AE452
21207CEEE97EF66017F71D67430DFB26A3E003F3B3FBBF28863BD0C4165279A8
F60C36F81075FB9C13F2418FA6F805C3413C81B051C4409DFB641AF333A71119
C04E7C670E03482CC063B751457AFC19FD124FD7CD9341AB55C7294195B48964
E2F4A96FFD97B4D21C5AE58CBE93BCE3B522FBC3532394EE454709A2A06E998B
C239F96D24325048BACC9ABDA9206804375A8AB16E3C947A011221956AE269FF
01BC597921E9A872037A8909560E5E33878408EAA317D42BF6A57FC51FB377F6
5FBBED4C3200AD75E44E4CC080AED96338392E8A7CBE4369FC52A6A243D4ACAB
37996C3541108281E5CDC599E8BF2CE72DE9FEDF547B68A41FC346A14E09865C
4AF4C0E9655171298F07DF376DE565D115026FC43DB779E11299E7A4D9E7D8D3
70CFC9EAA5658F702B1EEE0B5F523A8B2E7812E325EA858A25C26ABBC4C25B96
2DD5B440190F11C953C3C8FCFCDF5C20A99F85CF1E4EEF5A38478C0F43CE39C9
A9EB8F8FA55020FEB0FDA41DE10DC4D29EF5120477430432067801A15476104F
2874C240FC359510597C3ACDE5E2829FD745C84B9029A95F60AA27FB7279FA09
966098754F32657FB3C5AB5CA033213722074E8876405E2368CF3BC650406488
18172B14F5B87DE5AC09FD05A1762B36FA02D42C15F4551678E7E57803293097
6128CF0D4E36F4147CF1BE39E1089B4E8CD7DD9C0DDFF09EAFAA8D67F25F80B3
9F4A584B95A9DC63FC2F876B779DC3E8C553F076877079FE2C27A4B959023EC0
FCBE6548410923051F875718FAC168E4E59A7AB90D4C37C4E6C970F7D4EA4D83
33C5B27CAEB1C72F096247F8F1C697A6FDA6211191D8856DA7689FFA37F8E0CB
8C621EAD3929CA3359322E25A5E9FF521C76D4AEBF9756DD3301F4C4EB5F7A46
D1EF564F9D4A077B576EC1EF005C040A9C6FDBFBE1B6577633973D5A09174E14
00FD3E56E171C25804C38478DFD3C9EF826C2CABE871AC7BFC460AF16C5AB083
3A996F6895C2B27804D8A3F901EE03A3ADB919976D4DBFF11B246AF9C2FE922A
8CCD848D4DC7D81815E0260D9F69D2E42819E144C77720F9EC60494281C0ADD4
A7DD834FF84339766A71803F1C6B5305C897B2DAF5748CC962C2E032AD6D106C
AECCB45EAB880F202DD21BFD7CC9E5E7B232CD9570DED42DA921FBB1DFF31785
3626684DBC914B43B953D2EC5687607D122DF7FDDDC3E32466F9F87266BBBDB5
0946432A4B4B5D283C822A47B5069F7527ECFB9E79DF4FFBF19FD5EA3EC20177
6EFF8C4D4B6B7A4D7D18E8F9AA8DE19082B5707160EE6EA3E6E8FB3190B7E1BF
4C2BD3DC8A8774E3E046819FA3CDFD931CCC6900B258DECDC3E77C89E6FAB2BF
AD96F77A39A1311917C8506BC967FEE4D90ADBA060396D9F990892C2D7E95B15
9A68B1967CA98D2A8BAC586FE6BB16A2789F0C4CE7806975398573D65BFE4FF0
5D157C03EFE10F06F1A23130C0BB4B083155753E239AFAC3A05017A993D91DAB
C265A39EE4A494BCDEE0725B0F11F95F8ADEFF72173E9A5F2AB2F62C427E5BDC
0DE2696CE3474CC7DD07E691CD9AA1950FE5D3ED2A5AB00895E827694FD82DFF
58B3F2848D455ADAFA8F7470FB315E82DDD7A545A4496B56480919654F753822
663BE679C05B4B7668B9D71129FCD524AFF3FCA1C73129BA85EB41CD483BF1AA
D3FAB74C2B69537837A2B70DC0908FBA28E63CC875F86A646F1492C18B24E846
33052EA5DDC12CCD62C502212ACD4ACE665C932C85AF503A78F1425F39CF0194
1C2768D80733E456821FF981702745D81FC4EF9BD374804808C980CFC1AD9B5C
F9DA1F1E6EBE9A14A590837CBE55E8818A643F3F3F88BB227E90541B119B7306
6A485F3B1D0C21299E38A93996A0EB7A3357EE47E07E13C4711484075AAD24C1
0874C856F4FDA49C612ECE7D8AAC4A74715CFC76B176E1104CE528460DD02F14
960521ED35A9488016DC834C3F251F5A4E3AD99E43A62A1FB0E2487E6B157525
363E1ED15520097495048C30EAE3CF25BB0C4EE70CAB7C5DA7C9BCDCFB67F1B6
6DD995DC518CB551334B31801C22BAC713DE7CEEF020D20C043E1D02CD57C896
1D1E0EA51C02097026083440BA42B2CBC71F9DA6B570B4451375B9EAEDEA1115
846E09ACA21EBBD2FE4DC35FA945B109E02BC9D0CA8F2F54C1BB6231BA7DA2BA
D9955F9061A59C954D39C688341996749BB68FA387BC053E36BBF9C0955610BC
B009883037A11177D54798FF0F3074A82D3474850D054DBD9ED91FC2C91C4992
B14CA7B8F884CF0B65E50AB3E501CB5D7274B154629AA70CEC4B9A451A119943
E2ECB4304977D9156198F440E5A3CFDDA5A71F8DB20E14DC06904F0684E742BD
3E2A4E824433934B7C586B986BD69FD39E64A4A5AB99C2D6657E242BEBBC0D9C
6CCDB639869DB9B6465B364BD9A0170CC19568A0E08CE6352CB79629CB55B772
BF6361D35B0C05E68E1C0C20518533DA77B3495C30DC53A7F96392D67FC82ADA
13FC4493F50CF3D97EC8E3A679D804C5B83051BC46076F01E2D91BA27FAF9AB7
A7FA0CC5A286E5461354ABFA8BD2B6DBBC8AECB140BDDBF533ADACFBFA00F3A9
244BA837A3603450748CB9D0D1ECE58018E16ECE31415E2010323BF7B94C460C
35EB74BC3C7ED241D48F5DB2174A712F0A1E33ACFDF4F850DDD4B26FB8B5C997
DF742A415DAA0CE1B8745736395AE80A8BAA07F1893EE9DAAAE01D549A252D77
E79AD37BF1594E3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B8661662842642
E43962CD0B203CF0C34C4E0A6D5C41063DBE65E34060F98FC38430DFD56AAFEA
4135F59E74D468E05988BFE7F399175DE7D08904B7A508E489571C79B5310054
E8AACA4ACE065E9060B8ED8671BA724909C1A3443991ABB04CA2D32CDD53F0BB
71EBEF1D3FAB9CEBFE5BD9DC1454D461B2681AAC16693FF62D9E03AB3AE268F7
C2F3919739DB56F4522D02299507F5DF31CA0AF4D72077111F936A36E33A15AA
AE3D4A2A56DCC2A73404E970D68CF5162AC51A6AD727D94AA242D99B153AB4FD
74DD116AA1E3C01687A658F558B8F61516680DB3C059EA8A23137AD2A30F9CDE
995E06A82E0E3D4D0616EEEE3D23AC8E183D32A58D3C67AD87A413F6D9746B6B
CFE2EDB8FB0A974AFDAD1A5ABCE8FA93A340D6FA33885C9B9B69B1C23A4E6B60
8D86B95CF89CD7510A3E65B51023E7310BA2D369E9DD9EDE9AC14E4FD09695BB
DBD7994FDA0707B4820157A9D93B6B6511AB4FF1A435EF8D03A4E346E54963B0
5614804C9235E28F5D93FD74122FBE17C4645285B9FAB32BCDC051BE4025B683
9664B8ACB442D8672C7E742F52F8B85D78805A95B8CB191C775A2DDEB43826EC
7EAA37C1097D33F137E4E32BC68D8280472A48152FF1E41C94D9928885FADD5A
7E59CB42872E6AA781F4570BC50881826A306E1DFD7A9290CDCA4A16FFE88CEE
D47740E0685E046AE1B99F5177F66C4A4B2D5FA12F6D881F390A0F59258E4C76
8AC0134A614BFB94C297FD39889A5CCED84E6A9B242B04ACEBD27260F059F014
BDF376CA48DF034EBCF26BF1541090805059DC8CA6BA8D3ABDB9EE1538E9B119
28A12D7760FCF854B593ADA3B57A15F8AF7771A5099DD25A70A0126D126E9C7D
4E169742EC5D2B6043E38F9D3D350C7AA1644047F74A2E0794D9AB80406E055B
5274F7BE5100977C6FC6D6D689AE576507F3A39B8057F1202A83E86015A3E255
BF5F610A61CDFE7F1EAA77D169854A04A6DE12D47876613723BFF4A68DAE8B5A
7550FE59B6053CB900760BC042A642E33E78B960BB15A2E89395A49AB5121BEA
666857D012715E3B92493BB601205A40E58A483766BE159D101863B1CE6E7D80
0138FDFF7F5B941C7D4C1A6BC35BFD2F387D01E4F56E5EC1E636E9AF44D989BC
AECCBA2C9619BA020984777DC32533D1B154381BA3ACDDB9797E3595FB04365C
D4B4A5FF216BD8534C4ED6F449E969B40F89C7BAB3F09769CB0CCADBEF20034C
2F59E19726BF8E436DE292F16B38803D5D94C3C8199AEA2B6647A883A461F0D2
C819AB1BD86DC885DEE281E53E2BBA2BBF84D8D4DD7FFD836407D51EDFD1383B
E1BCACBC9B10E2D7FE4A6A28499638957480556CA407E57C5BE21A9DDA0AD4D9
24949FE07C887741C0A255A16DCC32BB7BB54CE2DC59D4DEB7F340C8A71E60B4
CEB9383ED0A8391D817BF93003D99EF3EF4BD87036A247571D2628CD9A1A562F
1481E59AC6A907F17A4C84ED0BF61A99266AFE0BC2925DEC6603425478F90B09
7142D73136458A6868587A364E5DE440E3671EA82ABEA5D6505375C53C1C54F2
74A2ABC15F6E90F7ACD4DC86B73EBA2F8F54CDC503FE67ADDA409BDD0F731B90
C4F19A0999B940D7B30E13B1118FD1A28784C055B8679004B35D754A18A615A3
D23ACD78645D8908B6DE06EBB5886888D4A6C5C7AA46BF45AF4BE80774788776
78AB3E75F3244DF4FF6E2C70988FF57F1229543E9F505EE9EA569397DD2D8B63
33C5647E33ACCE6F11AAB9974BA91A037E8F82032B7F7ED9E61AE94E5AA7D00A
C8FDE35422E18D1107544C13AA382A565F697D561034581568304D52C6D83326
0A4EA5EA2E051985D4BA9ED64D12AE542515AC1374C62651835900CF9323BDF3
2FC40F93E50CB84097243D32C2D1B6BAB87489E74A732B9B7F6CFD3DBEF46E2F
7BC79D272D8074CDD68340D52E137B1DB6FF17B6678CB3F1C9B1FF14094FEBC2
24D73D391F0AA6AF31B474E27B25B6AAB2F67D8F7A9DDA4E8CE8CC248D31ACDA
955F9AA5E0441B3B388BBEEED1D3056387A8F66056F954E4C9090E4A38386A63
47B7446990DED4390410057B008334DD2A25E3326F02BD117F82FE4F8D74710D
32187BAAB8C78E9ECFDDDE7F42128EAE3004F46894726A7AF96FAA938D96A6FC
2785A8C80F736AD31612362758E8DDBBA646816DD1E6EAF6999E13D836C7B0C5
7117C97D842DF6AAE5843C949952BE48F9E5C850205DBA7AFA87273053365758
F50534E61D650001BE80A48A2B1CAC0D9DA56472498878636226AC34ADA1597B
2B23416193A2C89F08E56C9637125725BF8CAC5473F8755B70B4ECE61DD6435F
C6A7C2B91B672FA23D9F875C001E76EA321A5B0A94FED862564AFE70CB777340
59B1B136DFA65DEF4997F7CBB7FFC71FC82F8D173315A44103BDF54398519B5E
05F8ED25325368D4BFE10ACE43981CCE9FA80DABA04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F392A3C7A4055D56B801F96254FE0E52E4700CC663CD9F1C91
C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2B123994334BEF890240C606276
B34A7453D932AE04BA8DC50544C74A96F6CD2A907CD9398069A573964AB81D00
731AA12F78CCF3BECEFDCA01075C07B67CC7F6C981A1BFDA28D5BF0F0F1E3905
5E86180C7D70697B73BFADE92A6D8B2AF034C738EFD85CDB54556BC6C7FF68FB
D043603C6C26CD0F254CD8A11ED77D05FCB64F261AD82C4A6FAD3B996A4BA457
7C38C8D4DA614E158F4693FBC3115A5D0AB5D098057BB2FFC2399D9F67A7A438
1C9283191844BA8F78896DDFEC3016130B68017CE4B928BD9A8633E12F5F0E15
73B4EAF93F32D4DA0BD5BB4D841672A26EA389C49E7CBCE3D62B490CD8884C44
6855340F9232A7E8D4FB1C5B6D1A5FDA8E7B6EEE1454EC78D44CF0A3C96B3CC1
2B868DE5F556B5B7E9971232DE58D373297150A1BD25542746ADFAE256888BE8
E7AB32A13A3DC4FAE0E34E485C31FB2952DAD2A6167A48606C83FBE5FC602B7E
70A0047A05623D54F22D03931C568D68DF1CCA64E069D10DE577C4E43F0E4BBC
06F20AC7F81248FDE0B428EB05FDD26BEEDF3943D11F3E54411986461CDF084B
59B5786859662242E4FB891859F8D245C74A25AAFF389346BEC4AD125FB66DCA
12A965CBA2123F9C30FF7F2B77E767A4C9492E72CFD9691204C1D900CF57932B
A4C9DB0F15FAFF7CBD701050A1DB9F05E30A67FA23F60759FECFDF1379E61C14
31AC809D401D2B7BC4256EB11057091DF68C3A9475CC0A3F8F2E4F70BC2C42FF
FD53ABAF7ED904BC8AE20B2B15F19F8A03B3AD6B1DA2D5D8FCD132607964E58D
19D8317B77DCB33EB74DAC05EF13006A116C82E1319A636C7D42C6CAAEAC3FD0
AB6AEEAADB72DE788D21EA16D247D6D3A4545858AA7A9DC070AAE46948ED4831
B9682349058F0AB3DD3C34E9E9DBF1728BE7D46E0435F3BF94F2F019832A6D1D
58D1071D3D286386BC415C75B275E6C81F049B145F14BB6A57A8209D2961D621
F6CDCF1A1A7561B5B8F7AEE37C714CFE26A3C1C28E91DE1632FB202339095AEA
546B0A3F05C7789F3E9C32180B57AC2F081726B5230D7FAEFAF02DC8E4C2826D
76AECC974203B482A98F151CA288979D907126C6A6BCDF7DD623DB7EBDCC5EA3
5F7C4AF039C7D12B6BA9169218D70EF87874B2524592D4D6813FA53700775B2F
6459EDB9D667FC68BB092854DAA7B54F9E18142403BE85D1E2F89F77160507D3
66B9CBC118E355CDC5E86364FF13B34B86F0669D4D1344E414D0D88A66D6B4F5
6BEB9360478E29A025ED6D9481F53CB3E5279437695F4A115F669DD6039FE44F
8E33DDE269A3E703626A0F204E36BEB8606041ED5B9C21CE4207DEC332AC167E
282459BDAF6F4C56D862C75AFCD3E19A4F5D703731C17E595D0E697FEC6C9A25
B8249B6BE348681CF88CE442026AA09F828E59584BF2C6B3A5776BDA43E4B128
3ADC30DB82832166A9202C67C9E65F1047EC22A936598B5E50FC8DDC8DEB238A
2554A33C7358C2AAF242059AA51DD77F8A56C433059E839702F7EE08F27E984A
DFC4099E1610A8F1ACBC0DFE56DEF7D42B2D20D6BDE27B65F9176558D8B65362
F61FD87D9D67AF025C9F7479F64DE90E4A3DB09F7D4988BEF2B66E5A06922C91
F5C99F9CC06418549D42176DEA4E100EA4BD6388E57AE9B7B392D167B63BFDC1
102565649B536A78D0269E8D4CDB7F92E030156C7AB18411EC8745F5A2504B35
3171B8060DAE8A58AF29A28A5E7AFF8DF1AFCBC64D00EA6A7AC505A4349861F3
FE8BCDB2B447A5343C788D95DABC4ACF593CA80F3E58961CB4947776D74FB575
71A6C97A4FB2C2CA4E89F6003274118D0B8D1E0D16E12F268CD34DE9BB73AF0A
E804E361E17E714A55EC6B6F452C1367BEB5D5FCF8A418B61D0C3D28A6836364
A9D17B40FAE3FC5EA21CE3A2075A5E0121CC9E245D34A6F1B4B45EAE75E17F79
039819178A985CF7B2AF77E68314DF7F0434C9599D055D786DC25523AF3CDCD9
DC0AA1123723667CAA346973A0F5066F1FE1971379E54DD05E427C2DF89FFC8F
337C8CD0510F06A63566E4E57C50FD29FCBA3FAF5E895BE7D9C19A7104679524
74962267820935161A714F070388531C5BB9B3676EE853A00BB06447F7DAF259
9EF2718C3BBE737BD085229CD7C2497ACF94D46E085D6B51FD3EDDA3EBD21CB5
B571D21EBA563C81D37E3D54588330C297834EE3AF5505DB8C3431C55A20305A
A1A087B1CC97528D5088D1E07DE9A232AAE66BD0F0A7165BE3EA9261F7BAD646
B373701920E89CF72A34FB9469E4CCCF24ED625237EAD55FA9C1CC2958622C5E
CD72D3C635376F88F28238E2BC34D15E5DF5398239194EA386994A41063D2E2E
868BBDABD12521947BC5569E0B58AEEA746AA0E2543FF09378E5799447FE26F0
2488C0C56BC9B7259086086D6DB7D4E4CB7F8B315DBE76D0F01D6678376BA32A
BB536C1CCEB28652BB817C28AF3BF5C349B6B6DDE84434A7395BA02EB478F07F
1D12072FAA7746BD98E8FCC5EFA3A9ABD1278BD0CAB02E0157C43F632D02B9F7
3DEACC920D6060DB63D12FE1658B473F7F1D4C2912B3FE7941F50B2978AAC500
E170E2BBBECC09F6E1116BCC6806DB370020B992389E32EE4328A88F1BAE07E3
F6CA5BEA9C75CE43DF7A16B38A4C65021C071CDA2BC680958FC70C9FA4C882B3
C87B0D1E0FD2F60DA12ABDF5C63C5B1602823BBFC0C03B7A421A84185AA1BF42
7D1B34CD1E4536CEDA1113783F70F630B32D3501FB89443353F1F032FF5D7F7C
97A02506798076FC98469582FAC2901B629CE4137326A88F6E1DEC6634D31682
B53CEFEE5A5C18087F2C3B28BEAF58B3EDA5621B22692E464DE4CD3E76C93397
F7998AFD5A64D69038429EB2348F345EA56D9F24F947B9FB2A4967D4EBBB0EDB
63150BECFCAB9AC7528E3792B8C87BF92E6A39E5C8D7E5BF6AB303FEBB2C20AB
717557BAB2FFC553ECFABC29819D8E9487FFFB4C55FDEE648948F92CBC5FA902
E0D0DEC6AF76A0DF223531C12CDEC349D2325D6FAAC3C6EC604C284889CDA3C7
19DA2D9A4BBC6FEB4F09163CA4902471D28A37111149C34E4D3D6159EC2CDC8E
70F1F3C5319FB4A1C8D566B120010C9F61CD79BFA55A42174F9024E34A71BF20
230424C778E54EBDBAC48EAA0CF06C0A5A9FC6484CD39D18A81F7389979EF408
D778E57338EF0CC775797678988274CE2AE002639D314CFFE080800EDDF709EE
8ECA30D88785FD165B58549F12163570DD76D933F5B6C1A7BE4066E1E941A608
D1ABEE882F8B8E79C83639778B44311B287E25E918991187D441F2AA90E6E027
E682C4F6C7A55DD17959CA190630ACFFCDE63AB90B9F4CD12860F931703DB69B
14ECA94EF3571938E175A1D4A6ED3C2D0B1B96D7F061EACDE498346A3CA6A77C
0F96E8F754462F21E9A2F3C11C5DE4ADCD17E1B1862F87858284DF3301A70760
6734572F807049EB845BD5EB238BA56E63115F1A4B4CED1CC44BB69DD41DE505
CB7E35AA156E5CE91FBD5F44F0E247D957956045B16131105A5C59F14F692AB2
81984EE6A56410101576B49CE7F51D4F6A6277A32F6D5D10F8D4EB8147315E5B
D5FBE88A1ED025E82B764F67FA7165C2CA2C4DBAC2EC5EFF288D89FAA943A90C
34D2B74537CA1B5456842983851FC922E70A6E9F68B17D0305373271A4C06932
2D42C893A30F39992E83A0D7A93F3AA16385F40896D4A047C14C559E7D60CFA8
65B49FAFAEE9506D2F10DEE673E177D6279FAB9B0A09C9002478AA31E4240F13
D73182F04410A11D13641EE6AF9187E298CB7AABA58E3FB5B4C7E86616C69BAC
C61113AB38B1C20D59F97D4DD6E50186F11C5AE8EA620A43380708A59D633773
6BA2184DA061F6AB3B22D6B067211584805688C232D2B236F56713C8459A2E14
22627D079DB00F337979DA04BBD485BD56300DA794ED5D9B8EECDF403BCD3BC8
92094A5128E251260C8CEE4C516FAA24F57CFA5CCB8485932F527838C9E2F188
9D14DE38E5A708FC266E193CEFA816D88F0C4D6C5DC31B9113F84D814CDCAAC8
30DD6D2B2353019C8CBCEF3798222BDE53690FAF7F415B3CCDE7AADBCF72697B
CC9D146283809A2F4556AA437BAD036E1931583807EE0A93E8487FF01E951EBF
31F8B1402F7362B2EA5FDF15CCC34FD6E996019857F82B0DC22D4242A24C8218
1C70A2A97C97A28C4750D9F6C92EBFC774E82C81D58DD157C1E7187A8971C66B
0FA98EAF74A87B9AEC2D29AA0087D516607881F599333565B6755CFECD5A7D6A
FBE3357B279034825079E8C4A4ACA5ABA29958F36904BA4D3157ADCC999B46C6
0A33C0E343BB16449961F30B34D1933177E5EADA8ECB3CD2D68EC6563CA73B0B
F0D53BC5CC5DE889C158B2E74025C69EDD9422F77B27BE88174CAE7D8184C713
8D98D84E467E5A83917C608A8D11A4810805D3D51A7CDA9C22BD358D4DF6FDBE
3B46604159B5AA395D66CB4F4334D8B1F3FC735507D0DB5F68F2D8B520AAA7E0
F1D50321133AAA792BC55186C6E84C2E1CEFD0BD71260782BEF6721C7BC38BCA
E42E376A4BF18143CB463B43B8D35C1AF0494FB861FB7FC6B4AFD951D3E5EDEA
88234888B9B7859B5D7F2171469DD7F631CE8016112905E5FE16FE502A4479E1
22A1890B785D302C38EF8C02F86120E587F7F3E1AEC25051081C696B4BF20053
13F6D6D55387C03EED12750C2DF8B8F596612934B1A833E715BB50FC7489227D
02446817B10C94D1EBF9CA1FBE120BD59E708A364F23B1A6A956CBBFB8E3BFE0
248694758D9BECBCC9EB81EB3A66AB189684ADBEFE40D6071C2D18A0B9081977
4D583507677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAB5671A806711890C1
AC5997F21A14E7523CEDB295474D54EC12F1744F0C101D3764B8BED3E225780F
2D9BFB593ABEEEC8611F427FB16BFFBBEB73850E2199B8D101CBEAE756AB00C6
C757576EA0E4C8F0F14614231A275835F6C7336438BD4A45B7C8FD52577A49AC
DB394CBBC16A24EF8580D8518F86D5368897BB038CF07FC21678FCB8CC9628F1
85FCCF89BC0778B174A9FB4F5872BE9544ED3018DB2B39A9370330D258EE8515
E8CBC0DA34E79D832DA89D875019E23C31650A25CBEEC6B93C575C363FA80C83
0CE512998D42FA38107DB1C1CB3292E6AC20CAF1E705922C91F5C99F9CC06418
549D42176DEA4E100EA56F3C462660C34514D95C71475CEF8093023A46626D9B
079972D32B0175CC893C82F25885DA6573473294AC4FCAE543CA6E01A14EB988
19E6ECCAD9C3FFE7E5403F304E170A76FB49A7C535BD506B2B226033A297EA3C
8C9C8F7DA0548777361E9F6D6198FAA089A7379BD912296E6B564BE64896CC6D
EA0F7E3AF4C39EE4E68AA31889A374695A5AEA9D49E3F8A19E93F3B6ED6ABF5F
BA7CFC2157CA6F528840E8C30572AD06D6EF7B0ED471DB941811E83326F032CA
0DEABE21398FDA5FBD5500DCA48E4802CDEE320D30F871E16F52290B1D877C63
81D1B21393E030C61D7B79723F7A2CA078E32C968C0BADA2601C1CE1C1B3CFB6
B199BFDB6E6884D083F28559E60B30C220A2DD1C72BA6C37D351D4A88908E1E5
7D683F7DF75A468CE25A1FA6768AFF1C80468551E82593219AB39BF20402808F
BEEF5D5AB3BABDCD98A63B8F3650F86AE90725D1E53AFFA58D8467322EB65A2F
8BC6050605CB87F380D7920CA753D1963D180EF18D90A8CA521577DC386FFEB2
7035292FA869F347D7EE2A6148603C8B5BDAF9AB2831B8F4825E82EAF0F9AFA9
C087F43AD07BFE56FD1D6ECD3F8DFACDA4F4CCA46CBC2C0E86E4DB8F5C31418F
FC78FA787963AC30C3CC71D1B6A8BBFD963C92351F4D749EDC2373D635242F0D
9CC02F1BED5F60F5C9977D820E70CDD934502673993A968DB1C85B5B9A43E1C1
874610A1EAE4D060128B422B6C3FE9EE339CFBAB2C866D8E21292C680015BD53
6A1DF4CEB57A18820351A6BBEA97B430900C1E39CEDD870CE2D6F34A1F89603D
6FB6BC693EF959078763D9BDCB5E906C1591107758A825039CB1B4E522B5C87D
E1D975B08CF8EFAE3CEF3EF3ABBADB2E0722A28D29245A4AFD3AE32BAE8DFD59
DD21624C48090CC3D3B7A1ECFC649A614211EBEBA3D0A82B20021D530700606C
EB24A581288CA7BB872A4450AC4A843A50E0EF065F9B49EC9587706A531BD668
86F44846174260DE22A027953EFEADBBDC33AD0942BD8492F6E5466431718D71
83A50F5C8E263B7E189B0658313AD9892F2A258F023C1E0DEDF9BA72428181FF
A0DF52F37B786A58AE7C2F43D985874AB8A3F2044DBD4B9240F8828A4DC9937E
A9FFAF8C077A7B40723F6B701EF8C4F1F9B7BECB0339036F3C3B3A2FB108872E
8860AB6F6793F29BB9C374B5FEADBC644F5DB80AD83E7792DE58F2BD45606C83
FBE5FC602B7E70A0047A05623D54F22D02E2721991AA8800B6FB0EC0FFB31E67
81211DDDB191062DC5BC2058C407F125EE256A951D8CF895A44E006FB6886760
C1E7EF7566232A6E513C7453D17EE21BE265B06FEFFC1B16AB69F3BF0575F598
ABC5B57218EB1A6ACC8B30E08856CE35E812EDB26D73D944E82342C9142F8253
D4B1916CA2E00321E3409DE3B9941C7165AEDF16E6CDF3125843C10F6B022695
445B95A6A7487485A275D4F8F8E45F73DCA2513811A6517DBDFD7D818F48E683
53E3EDDECC2A93B482ADF9BFA9BA653CA71C9BD82D057A9A4CC3287761E54228
CC345D7C5AD72C7EB3C42AA352A564F2CD09BBEB1FA1FF7EF8999DBA1B10FD88
E772B10E793D2CED36C34221A80A61C79142B953602628FA17E568B5ECD7C9B0
A6F6C0264048F377A11D08F846F08A18C0D60C7E1AA2761AF25BD01C501409DC
094980FE3CE043CB73B31B54F16384D54058913521F90293851FFA7D64087727
DA51CFF0E36D2F6F445CB662BD8BCC4CD9229C3B369A7D65F430E83301544A15
96FB497EAAA77F8208A4FDDD613E1E98225608D19BFFB8773574AF9233F45C0C
3E1F77717FA3924B7B7C32F3D4A9CA4FE72E6C43CE1528F182ADD08A93C2803D
E442A578F58EA8D520ED2CBA77A3F888F990BAD4D1810A9046288D9C33E403D6
0CC44F0BABC60F72CE2CB794D5D86E1A0419D9579B60F14CA9CFE75AB6288B53
1DD76F5B112B0D2F53BAC7A90C89A114C17D7BB7A7D771AEA61BBCCDA82A2973
034B82F22F4D29ECF78540427039371C045B266FF717BED80530F18AD533DC0E
8D85F9DA995E6FCBB0C3BC8FBE78E84B1D5FB3E0B29DBBABD906CC19E131BD43
A669BEE00685E959E295903FF7CA111DCEF22BFDAAE0A7FA0303A0269B0BF44E
456A69EC3497D2D84B19F68EBF7125FB02920466A89AA52F46B49774F8273B5E
98BD87426D2BDDD57353527B96579D536CFAF78E601BC228CD716E472C288EDF
417DEE6938763DA88DC72FE6A7DD768B984FEEFE58A2013413CE17F036C10A98
2D3D5A26CAB55D1F43B9F5C86865E56BD62C6909B9FA2B48549448241EE25E1B
5D82132D49334E9CB20A617275B4BEB257C6238D56A1FD2E970767F1EEEBF97C
F8D7F3E36B580DF9B1AE7581B12885299F2E834DA45E999EFEA0D47007363DB9
164C465494D32F8E7715677479DB92989DF0BDF25EF5F7024C75B312709B288B
D7DC6DCD6FD5D401B0722F87176A0D72ADC1049F1BA37779AFC8C0315E00DA93
7DCF13C49E7E3427B1468DA767BB437092DD7CB45AB434C53EEDB7645170A6A6
B6C1A85D0058926158DEF85AB1FFFE0A6A33736CA5A0A7A75023BD9BFDD0C94A
FF9A394A21568AA5756B2072DB14584DFAEC37FF325290D4A186A0D5AF2D15E3
3E6F6A2701AF81BD10AB4443949CF58A257E97A14969834FEE29E5CDF49CCECF
817B88F8183B94C9CE1424E86B08846F902CD400D1F79C054C5E3DFA0AF0A538
61A009796C15E07C79096EC53557460FCFA16FBABDBA9EBDF4DE3A734D55417D
4499D2274EDF5A8CE52E360EFB5E0ECF810FFBA9BDE380B680EE3AB9B3566A52
6839B597386E852EECBE1E315834B81998CDB22CDB96A25ED403ABCA3F1BB14D
ECFB18E5B96AF5CE6F3D1EEFE8ABB3D2BCA2CD5BA3CD63BF413466B54EB1EAA1
C995B7D1A07FF0F73B0283C8843E9A3001B4C98D804230788460D35A12C53A21
2095E8459ABFA315AF948FC6212DD2CE8D723DEAB785CF0E1806D7B4826358ED
A0DCE180C8257A3ACC1122CE497D5BF45F0130431ED0EC0CDB28866065801AD1
6AFFFA9897485FEE2F1DA09222B1A783A8EF2AC87D34B6407522AB33411ECA46
2835CD37FB970F7B11087373B6D43BC6E86AA0D5F88AD08DDEC6EA43CB339557
002054212AB9C5CF1A074DD69CD63A305FC549F4D79F4BDE53501E2ED5A81D91
A8291E2C87CF6CE66357C4904B79B704C799AE090C2E12A41A1C14F6E13EE500
835D79D5FE278516EA983936A6C22848D99AB786A3D5D0C5AC216EA68F8F7D3A
5BD929E65FC76DE74B7B16AA04828FE02F8C2A22BD64092A5558C8BE863F189B
3E4F336841E8CEE0825DBF87AEDA7FD8FDB80197616AF346FBD5F507967F12A1
EAA5556C949152DF2B6BEFDBB6DD1C40BC813A1C32744F72C2C4E793262F5E73
45E8891E0BA36CB5914A15859FF2B55B2E2E72BF4DED81403B806EDD07FBA3EA
7CC591823E8E8F0E72A418D94AA074BF8FEAC4F0AEC8ACD59C3ABA73070F8B3C
4799D6498B2F62BC76563B05D63BF0D1C3CF1E5DC7C05F1C0D388F58EE4C7126
7AE00ECB3C6464C6657AC6980B91657E5ABECF299A8AC6D254E74DC1322705D0
8EC033F6D1A5B6E1D8A2A3EA61B8AF242E4F815210D6C2EAAE014C26BF75ADEA
293858333FAD8A5DF5DE0EDCFA64792B40AAED1287E8AADA2868B5E11EB99A49
944EE165A56C8F43140871BC528641F4F162138539A052C771BC53913DE8E26E
48E8AFE2E2AEFD37CA33B926211F5C92A5A624FC79EC6937B5DDD739E1B59730
59BFD124F2BFC328DB09AADB8A0C667CCE4717B7070B93080400E25D70A165CD
4510CA50F1B85F57673C6CE09EFC4E229D463548AB4DC9788CEB212797BBE778
DCDB2D0F6726BCF115DA153E29B8F25CD74F91C9239CF4C16C523352299DA2A2
20968B1682FBA1FB7D44FCB548EE2EF56D3E57F221A0D22FDA49421240850599
926BFB60AEC2B30D2A6340553EF696116B9E368CC0191FD3EC665A0F563B55F2
738B16D1FCD94EE68060A81E14EE323080F4DBF77A197944E1D282A9A5903F42
AFB4E19A95C7D9B71C7D637420B70C1396DAAB55B916A3E13042CA78F2DDD02D
8632B42602C7E7665D1D65EB1583EBC21520FAF42680772C1BA775AA202D818D
8B16068294BEABA5CBD4F32EA6822EBBB7B5A456B9C11C290EF9B8E5AEA2B840
DFB40191270EE3B0F8F7F6018C8479E187C50BC36C500B101DE6C11079EDE003
B79EC06C7B364E6040B557C7D6B0F7E5E5521E2A1AFBECB7ABC24AB041F3C6E2
B4FE417F3CB94335244FABABF77B113DEF98FEA35066D72AD708D3B7210CEBC4
B78719BDEBC7711FD414CAD3D3084BDFA10483B09CA310A836435A9D29730867
5D34A307FAAA9B65EBB571C87D1318EE0CAE193EB0EC4A380E3D9615F917F93D
84F2DEC7C169CC9DB82A8970B3D8B94FC891EA72A2E4FB46159ECC3F8C31D6A3
99B64C56A238F977E9C71B2752FE5C38FEFD02FABCB0157B9B03C236978B5120
A6C9445EF559915113DB2CA6216B156BE4E097FC0A3D62781CE05EE2FB9BB795
F13F12650251440B24932CA1EAC5949E50BF2533AC26EADE42C45F10F49DF3B5
0E1E5B0B1BD2F741822FB77ABAEB3174F20379BA02C069649D43361E23971132
9F8A099490C5AC6E43AD0D92E404E898D34E7BF3BCECD62E089E4B82B98C363E
99FDC7801889CC07241FB7CC2BFE2EF0FAC54F1EB9246FC0C8D9A769DE9F200F
E791A3698DE53C426FB64DB7CE4D867B886EECDA61E0B3D178CBCC12C34CDEAF
466BDA62092C5D24CE3B80FC692A08677A36127E7FB5052893F0B6781534CBA1
6DB1D40165FDB567665F3FBA32A0EB362741EA0B15785664E994902A4C425BA9
D496AD8AAC41E0792792E442165EB74E4D56214DC51F03FC35A5EABE996F5E76
9F84529ACF0D78E8F091FC56387F3230CCCAB25DD25EAA185819C8E8CC056CF5
A769F3E0523D32B22FCA7F2D88D302245F7E76F033114E0F26603C0396FE2DB4
824B9F38640204466B6FB837287622294D3302297EC30193B73D2C7D6C71A136
7456805C3FE82CE92CC78615C6FDDA6F3B9A3726A3019E4EE622AE946F989763
0C430315D82C6B7059EE3A43A7240014DD42EBFCEAC0F2CECCFF1E3BEBB071F0
449CA536A1BA02BDB7EF3B19BBDA0A0644668786B904566AABEC063EA55C8E5E
D41E2B1F04C11FAFB17733BFCFDDE446C949D049BF611766B2BD2525F67168A7
0C272BB280B969F771E3EDD15016E83A18D7E0C505FC6C2B56B0D9ED44F36E0A
EF81DAAE574F44A459D048B4D41FEBAF2A1ED05E446035A8F4365160F17A1578
F5D6EA718A86BC3F241489DB617B39677748E429113A9F0E1872AB45027F170B
696F104506682F16B14FB0F7271CE2FD26550CF1DDB3F11DC1F219E5F31D179A
F4766D6A7D1D056A6CBD636D3BC644978E122060FF22FC840C5F7E6AFE72CE60
B1C1F3942FAE35BAFC1C0822D3EFDAE9B8971BFC287C7CC1F2465EED29CDC0EA
D1C25F3EEB67BD47418869ED27DAD9B1BB1CEF6E1DE9329D2C0F28F6EF73D734
15F9C1B5342FFC97C0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2D6137A0EAFAF7E99E776758DE763ABBDF4941EE3F019C50D6
95AB27025E5B23E9EDFDC28477D4089FA7FB24903DFA8601A9A94DDC7CA8856A
61906BB7CD5369E9866D34B4787C34D8333876B55306EFD1EB85F4F7C4373DED
D9ABC33FDCEA9CEE604BA070EA8AF73445F2B3D162BF0BF4CFE393FC90D13EF0
3B05D613B253F34117B33916DE07122452693669CE60E1EE687CB3C92EFDF198
20959B28F5D6AD0907B6E4B8B338BB46DA634F07DFE77A4B16D1842C5AD87F0A
6ACF0E5B159F8FBE4AEF2681C2D96902480E4D107381C72D203BBCC9341E8242
EF8C770B22DE47BAE6D026B56A63B31C16A51E7B81164771440C131B17A026B1
1C35C6417958B3D6F3495EC3D1F62640E4F7CAFDA130212E40A68E47962DCB31
39FAF4746298CF54263F982CAE3C82B9619E3DBDECB17038BE25A83B43CA7FF0
A296819C753E396B1A1CF8E4487D117421506063ED26C7B061
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6F6BDD983146333DDA29DB81DA54F44DCF5364857E
A20DB59006F78BA077D29ABE7A537D2358B1DC13AE97ED90F7D1AE27A1CB55C2
F534E2B546BA5531AE88840CAA741A57ED1F4587A72E74AFA15F15C69046ADB1
B3B6C392AFD856716F96B850D6FF61144F6A9E51CC1B8A86A35087D4A3A37081
D7529F94493EB4739C267B8C54B3A1FC2146237C1D110D4A10112D496250647F
37A36F59299DD9529CD003AD4E0847689E519FBB2B7796420D8EEF6ECA04DF85
390E261B43A555BA97B9F30C18F4F39F192B2A2CD3C1D68ADB1867509CDA93D1
CF858DE8EC69D57E5A7BB2741F4713569CDA64AA18018935D81D1ECAC3C42C4B
6105C3B521226A3AA2ED3A5EA5FE176CE753C04BCA19E4C4A11ECC428F62886F
B3AE8EBC12CE6421C3E633443649187C8B38E5EE9428E1E533FF1260DD242EED
B955A9E3C2F73B641A68A0EF3B9E26314B306649FD15D7B593CF3F02EA2E6627
C292001D28A40628F89D0C92DE66489694C976E71D9214BE0875849A35084581
5873E4D6FF4EDA98E456F41F67A7063A2EF9ED5AC30A07BB8768BA4B23707BE8
C925BE37F7B4C8E511C95D4B61E15A9B84DB541D8D299C5C5F56DD69E7635073
B64FA376773A98E09E6A816DD71D80C3D80ABCB006353330E36963118A600F83
AF3F1902CB9FEDC0DCD19B1871455394437C3A7B477AC27F75850CFED5BDB2F0
71EB6873264F76A5963F0D97E0C4887DEFAF1A5E5016CE039FC62C37DB28EBBF
F30F651543A11127279FFE3AB5F06E440720BE08EE3F85DDAF46CC4190F93B9B
749C6AF33D323C2211D5ADB7AEC6905E1E94099DF34C4CE52D95FDB6A8E7ECA2
A07D4200535F51BD082591E896938B584450D9E008CDD0202DB1B3CECC4CDCCA
F87401373886FF9BFE508C3A751057316CFDC6729F65C26996C69E6486DEE35F
247C439B8FBB6A187926694EC48CB03CF1EACFD31FEE3C7AFFFF0C5E0BAC7583
F21FB6E4C8D2975DF55D9CC0ABC55E08BC81772751BDFCD4A1FEF82C144BA8DC
FD22EB1EE626D143E2530483ECF9EC3055FBEF738582004DC27F7E8E3BCD4513
9706F68286959C07BDDBE793C16F9C0CFA569344FE06F0B093B14CD9DDFCEEB7
BA24A8294C452A3E6A6E801FDD83FFDA10EF926255FD030246AC687884A3547D
A00438951DDEF3CDA03C46B2C8DDD315850235962879E04DC0D62F8ABEBB427E
01E60CCE30B0F2B691E3A8C1DD510CAC115E06D26A9BBE52E1F8AC594D1FB97C
C66F87A5FAED84AFCA8D7AA9FD3459A7A0E1D38EFF958AE17E8EEAAE67A7B343
8B6BF9DDAD0CA0F208E714887CFA684183E6C588A9581C79E063E6F8C16CCCAF
7D31955B4348874282130A00501BE511BC18F5756C90C15124CF46DFECD56D79
43807E2BCEBA9F20657F3620781A6F8CBBA7230D13A315D8A15EFC9D6CA122FB
20F73C7DFD73D704B6A470A77746482B51619B1001652734C842545C17FF7A60
C7125F3FFA9505FD190CA38A4AD685925D5E43CA9AEB873FC529D428C37FCABD
ED9E6DE990EBF8B64509C99E367989E9AFB0002D3164706C5E1818C2C8C582E1
3D3963FCF7943DD303EF2491F4399DABD65069EF962BFCB8A697AFFAF5F03013
9A27A7778F0559ECD8580C285103C020AFF7746075138BC9A3DDBE05310711B6
C61235255C0EEEA6C09AA34127DDB616B6779840DE59548E1A97FA50AA810970
F89E08CCA10480640F8BE7F4EFA9CA1B4BF9EE055B9BE0962B685F6DD8CE4060
684BF01E1BC251798F4DD677CC8EBA13F0BA70058A07931FFEDEFB7B887FD8D4
2AEF9B0D496090809D9C6619AC7EBA764190E00020E1CB63E581D746D4C29402
8E49E32BDA0A200023928ABB08CF5A41B54B4E881874A6A30D58EFF1F283F1FC
66DD87814C360CC1FE8C2FCE87A134C0FB9989FC8E237B81FD6B88FBF07D8B02
C3278F930C6A56C869629CD6FEC82249ED3A3D91ED90AD4D06894074060F1EE4
8714EFAB0279B7FA99B9E4D5737314B18CE2A40772BAC3A386448CC3857F8F2D
08D9A762AF98EABD542B58C8AA8D6E21BF8D8D5716E16855A1C497893FAA20D6
5A9833ADB3DC041872F323F40E3164C25B19498F8E966D935EACFF9FABFF05B0
081DCEEF2AEEF14902C76591744820B76E4E93649D6F330B2A919D6EE4D6731B
E260997F6057C04823E23DC45DD4AE5D978C933980DBD6ABCDF544C8106F47D6

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BEE85BA2BB40F538F55C11D50F882B739138
48C40C08476F761BDD8D791CF23DE48A9C407138837783A7A619EA936D0B6239
F72579B0E99370DA9C9AE14A6753DCA4A6667BB22C841A91A8AC118812C9BB04
9DCB608F8DC52CDD6C52BAD1A1502779B638DF933793E463238A36732C3ADACB
0EA238AB8B29F707E615837444592036A2427850EBD6C17EF1545EEE457EAEF2
8C8D76A53677E7150CB9A33D3DFF3946558639A6DFAFF2F6BF055A524058940B
CF1CA8D16D9A2D6E64C044BCA10C564EE265DA452D7B6433E5816135B31CE8B8
BB9FDB01E4A7E246A98E073443AFCE3DD2B1B8A93DF1856620D7CC501580BD13
E4F0D19684EB8773549BAE43FF1AD0726CCEE70F1AA9CEDCB21C2A3B0DF78B09
19481C505E451409F058C657B3502B5A26E753AFE2700E52F39743055B62F027
5AEA4719416FA35EE1C53E92313C397F0A208EB0D328555C5B86713BA4B827A9
6E1EF33A39173CC1AFCDF3D52271D6CAFCB00B7BEF6E47AC23B920F7B535193D
B8FEBDF4B87DE5AC09FD05A1762B36FA02D42C15F455167DE94BAF94A4BB66F4
0FD286D9769861DFE1683E2CBBFAFF817D3382959C18A903DF75F4A3D5762C29
295E431425372F765EBB37367CDB40EB73F4BE5C47E19B535F7EC7A5A4B9F621
4465171F3AF111E2722605554A46271AA4F65EF4832B592CBC9809C6CFD90AFB
12DB06411FBB41B21BA01325A524D676161B14D376DB237618616EC4ECA8CBCC
9086AB4D09E359B41CF74AED5B75C01085EAAC4637BA9450F00D4F0240AD2B9D
62E41C0BA3054383C5B9A3F000EB0818CBFCDA2DFBE8846E142A9B2CECBD5F40
713999C97BB9F989AC66AD864407F5DEC4738283E0B8AE0F0492EBE6CF79F6A8
AA99949CA91F15452DDADC572A39FFB35AD715BB0DCD4B3C7CF7FC717F01C74D
1384B83A4B674AAC70539F7866D7B3B832190CC928E89C5355F29E7EE697BFFE
CCAE75C27AEA6C7231D88ABE642223D82A657245105757BE84B599C63F2C3356
6C0086C730D91093F42EB0554BE826A2F95A986C62764C4627CB1675AD8F922E
6C8CB669074E47393EB370E4F6B9BD413D4CC15B85509750AF485DE8DCE8D6F7
3B297700711BE194DB6748FE4F98AFD044877F327F213B076606C6576B969745
7E6FF9E0F1EB6964C2FBF17E8E01D202966794ADCB2AADFCCA798F2E57C0566E
A3C791E7B530885A508D2B610CA7BD6C31B86706637E25732B52A08BE1EF71AE
0732F89FED1E26BE5DB8A5BE44E0043B5C73E7D6A82461ABEF2983B43D784D9C
57675573A5BD451532B9E75E499A4499A52A7E549AE4DD1FA1B75F4FEF586267
439F149549A6615B4315E82C359BF2EA82E2A4CCFF81E8B58F2F29E19F7D715A
D567F556BF49627C8CA24D6B70426ACAB0D7234C04D1325FEBECEED0F2E7B9F2
A677FDDD69FF7796C609FE7A9F107A419DC162A7229546436378570253F9314A
F146E6642DDBB13A00B6103D5F03C92D885953DF6CD1C03F7CAFFE1EC3D3A270
530780EEA08AEC4786551B7514AFDF162F23DAFB58CC51647721D4F7F3FB37F3
6472F6B02B8A87D444B44DFFFCBF4181A86F0A4BD25C3921CD2BA8360EFDC5F5
E0141EC96BDBB7F712CE93ACE28EE2BFE7B05EA1E2F07973A741653B6DEF9E37
BBA262BA683AFCCC03AEB3C59CF1BE5DF4BCEFC85437AD39454D6756801D8EAF
F2CB0EA7EF8149006D72E2112DB78EB51A8F97264607F6FEDF59F6220F55F834
2930A75193E883C04AC3D262EFF196C10136869186AA71F0C1ADF3AA8290123A
8B67E6AE08325E059D8D3F20870038B6EA3C5E41A3E6E6EAE70E60AC2B658B25
7FABC2CF76D35FADC354CE9369D5B87FD457EB152606CE2C64EE3D49A20E05D0
5F4726AB5F175BC47A65836982C22CF80AFDADA54DDBD91DFF437FF75783A636
10E47DC498C33F37E0080DB96070BBA2BA84700A9F72D598A43D47BC25601681
9AE4E9D95853BA4CA95968595A23B2F32A46B578F76FE7027B3CFB43CFEB5A72
D5B3B22BFF3FA494F5FBFA38486197A1CED5292DB4D90A425D8D532C28479972
3DCC04CE3A194D0D05C3E1EB84CF88A7DD5419F12E32DE866604580CDC0B07E9
FC526286A98D901BB47DE5D3C0CB6239FB2D5B4AE3224947D5AB54453E6A4C7B
7F667C14A284047744C14EDA3F079C1C56F4D928F66027A6667ED51E045924E1
8F0722353CD43932C02CA9125AA09D290C96D22C17CD43FFA008B07D7667FB38
5C61FFD25725C9AC23F19267358C01209DCDB8524EA0501EAEC5D21617E9E56D
6801FDCB619BB7F179EC5881CEBF7EBC3B30AC8AEB18B09AC718320C8210BCB5
B93E04FAA62C2147ADCC67517C05D3140DF950DBEAB698898B8C456B760EC883
DC7C18994FF414A4D04A28C0E938F608AF10E3B31B98C36E5AAA15FF93FCFC93
271EE576454A86A0C216B224E0DE81D66ACE456B5583332BDA82C4109E89E7CF
D5C7E6C184E7BB76320865DBE500F74AB96D945E03481E0640B8DD548160E588
2EC03CD003680E92F0D10F566B7D87C01ED5E6E49D89E5B89695B5862C96EA12
43561331C2D9EE7B65B8214CE30DC4855D7D17D059958DB2A907C0843B26BC24
8AA34F0EAECFE4448F77D161F6228107C92BBA3269401CB8439A69B75DCB34FE
C581E5FD8846A45307AC3C6AC7D299276FBD020EE4F28EE492DADDE9A7DC2F40
FF95BE12BDCDE0AB54DA1A6F332BBBD2160632D7AC1BC0248462BEEDA6757BBF
ABA93EFAB83803A78F22D80EDA1C2527F4D25F4667FFDEE2AF8A30E836B33CCA
7986436F2254E04BEE398F16E09681886CD627610737CB42966EA3F47DFAF030
A10ABB310B4D67130AE7053A2C227BF147EB916C94394D91C7EC0AA568F7684A
6B37CCE936BB42E84547CBFB95D27536CFD0723A39C93D6B5D08E759E6B7FF6F
C207372135B875DF11865C20BE5944EA064215A17CE3FC168AC57D5611ADE424
14B45B9B2E8BF75D064C594859D2A47248BAAA2A6D4330094BC0F348A0C85971
366F841806A3EF9BCEB1A196F9401A0C475D1D0471A1018371D5B7758A43F98F
4DC4792308CDFE2779CA6F2168BFB249DF4AB0F974E93CB3F3296C733FC7489A
0FE4C2303174D9022512B07ACCCCD0FC88CAFA99839629CE4F187D767EDE855B
520ADFA07DACBEC45BBF0C25F3911A9D0164CBC2FDCDF94E258881ECFFAF1B94
A89FAA41131DDBF8D91B3909AD56F61099321A702FA5B441C93E902B34C98007
58D65193AAC2F0809E2B80041259D760D7B237396F41862B58DE7BC071016119
0BF4DEF69775FDBA7529600A4723BCA2096671FFEE9B7C4B058BE8B5CF61805B
B2B82DD1F047911BB34107E71F1884D692FB4BFA8E2E4B6D5180825F9C769CD6
11F343C793DEDEFB0A2B195538DEA52FF18085EAEAE51E4D7B7D66B4481823B6
0F897FE01C80C6855C94FCC02CC2B21C06BE83AEA88DAF729136220B103C1BA0
F0E522055846D636249FB28B7C58D81EA17C03278F02394F4611CEA11A59B78B
90C463CFD3ADA9A893F6281F1192BFFEDBE544A95183E9A00F23B8C22E9557A0
9245577F997AB5022480252D5611A19652FD2A24E2ECDD3E91D91C57D855D818
C86819DA7A0A6E6B1B0A5DCED9628B01EC6F47232DE5CB73A83C1B82D506C62B
19317FDE765000BCE9A1A61A802EE8ECB4D53EFCB45F457DBE548C32954C6074
7297001747473ED6C9BB92BC653F199BD875EF9720D177DF67BD277272563449
43E4728D195114A9B35634AC999453690C2945D129AA68326F696544F6B1F129
A854A81ED65184618E121919A6E882C369AEFA43E7A19A87A47BC3DF2C960468
1138E2B4D24E86C0ACB8FBDA3F0FA3DC2979E7E5A36EB4C1CC67BBCCEA84568A
BD139F70C1EA8869611D9D4D5ADE1CE046EC3D22FD0D29B686CEC5D71A81C043
CC0B56F71A0412854F4BC16A4CA2BE0C84BF4624522F116E8F602AACE82221D7
8213984E0E17FE6AD3693457C215FE046796B89912BCD081546DAE1EE9564A9D
3E07106E80147D7FF2EC8DE42D3BBDAB958A4E4E57F1F0D6386B53A681558677
A7ADFFCA03CCF78564288A3818DFA72AC5160CEBC4F8E80A54D110435B8D61DF
BDBE592A1205CB465393A7DEB7DA08B3012A99FB2FC7F6FF7AE5716CE3E2D422
13218F2ACBB2F5361C86BECDAEEEC705F0C5EFF3DF1F7018376F68D27AC36660
F8B1F03444A2D704393995AB14CD756C4CA37202E05E0BFE9B820605676E8CCF
447A19D91B8CC30481B5C49B6ACB4DC451F9C5269002F00B43F697D889D0339D
2FFBA5F17EF15B074734F791D5FB42C42113C538E707C16EE24A3F375E7C57C1
D17A23326CD8E2332276F32283CF0F7169EE52BD767C7CDA8354E5B65B92A631
0EB3C3F577F2A16188D249CC317F91CF44D7D24B679F3F71A5B3BB3F340BD76C
DCFC533D2835DF0D37360A9B5DE91E2557AB5F1B0A2DBAC4019071BF2F6C66C3
BC6E9DF45A22A24877E4A44996913DCA6807D768CFFAB4CB966B5DD8436D1ABD
C3EBF2B08543C98684CA1AC7ABCCE6CF63DE924E16D4177B3A02310786B20A52
DABAF7035C76955A8160C768A454647DB379C4E7E452DD435E23F7395871ADE2
D0C28A16DD5A422D7570CAC22FCED0CB242659ADDAAC725D06E439C9CB1D7B5E
9AD902909F64DE5F15DBB6E43E79928D4D84C98B3D307BC94A41300492CA1038
FEA46BE4C39E04DDA52A0012383B0425D73C6432E51AEFB4E69ECA96FB516F11
23474D93C05C07B8689FC4885699E4BB766354F7CC4CF3281A312EEEF077C86C
3D5EA3A3A506531D63823DD3561EBCBF76153BDFB19DA55B3F6335426B6A2405
F03BB593307B759B93432F1A710625681DEB0AA097E3AF25260F2E92C7807C74
EFED2B132A2915E0454C2867C4B777B147C85088703C68330FC23480D8FE136F
0D89CEC65B1BDD6CE955627282CC6533F36B62286E5F5AA0B73B682401EE3774
ADB723864D60C8C50D59D0F608E8471A5D00FC26DCEEAEFBF5AB2C8A5AF1CB91
E74AE3AC0A92714494A92CC67A80EA5DA92DF6E28BC6A05471D5CB6B24482008
2C75FC3219A3777E7F5B09A27FABEA630145358A35F0C0C7C1A5357A7E9CDA86
B3581FEE6673C2CBEB28F470193CA13DFB563457636707754E8553266219B02E
502B266293EBFBEF1509FECEAD45D7BFC98BAF84BFE6EDBF2589FA35F5DD8965
D1E08ABEC2E6CF74853B93487296C53751C3AE9F7AA5B9A9AA4522C68E504583
8749BD66A3B6DFD76BDE579A02AF74678F6F31F5CF266753287FAA1AE38EB626
E9A41CDC6BE62BC7B6E2617AA502EECECA267DD00B5CF3957699F87206A02BE6
B9F4D8EE4C10D079E09DD0A803251DC175E7ACB31ED9671EB45ABB32D64FFBE3
475AC402B3DEC385C59338C49A448917C5B7C0486172439C132B32E829D10EA9
68E574E17058A7998FA34AAD8C78DA36221A147B7E77E5C891B8A1F921BAF0ED
78D89F33F144043D0FEE36BBF245FAA6E7FC9D84A0F5D7D4B35D4E24AC4A11F6
D76800F53FF9D85D052DC85A50080668D9F648ACE56F31BE5677F0B344C69264
CCFC2E9F45921E62AEB13D93E84422B2D2E4F51FECC9351B42923E388B70E7C4
1B77DAE3DB681E7ED881F1319F9405D222E21746799E8B90B384D31B046075AB
71CA71ADC08570D5DE3EC220C719B63A930EE9346FDA4604790E97B39E274197
FC6E23FF8368CF246B2C8E5DABD16A1F78C77DCA1277328B7AD72AF931700163
D4FB90366A4CD61AC6757F67D7CFCA851396A5C9DB466EAC17E200523B2AECD6
C05A0A8366D4EBC86B696E0C68B301F3F440B7ACF7F73486DA4826CBD2C1C82E
285F936D0EB0525FE1A4F80270BDCF2F7B1453034640C0D59189A954664B53D0
10212ABF10E4EFC417FDB11ED8EACB517109806DD2CB6704EBB0D4389D121708
0B750E12DEF5DDD4EFF63ABB930D45973AEF0CFA7DD1FF23FAAEB8D23F7C9C77
D990FECD8CFA96EB61F444122611ABF70A73211447F2F4AD6CB5ACB2C7C5DBEF
5E30FD859045B57570D9D15D84CF9F0FA89B2FF059336B57B9B7EC0E2C37B291
851D973D08D99E12B578C4992EA47CC22DB897502F351D81614CD73E27F23004
6F89E913D02113D5076CBB9E7F70CC4ACE14D54BD3389E38DA769C5670DCF188
F011DB32D5B5240EADD9B21BC2CFB46A86BCE81FA6C6BE1F33A0DB7564F01C4C
D135F96CC59DA793300F9E9F33DE6B1D442AF96EE9B4EA9012AD3D9EF3C729B5
651B2647FE0CDE1A2258F05CBAC20AE0C9F80EC7A5ABAC56BCC6E8078A53B445
AC303B1FF6809EBBEBFB2242D1BD7BEF204EEE7DE594518B78765EE60502B5D0
83E9AC47D1D84DC1DB866DDA7C82EF6E646CAFAE116B4E04649EC536995B673E
2385AB99DD43B9F23322B5F5B1AD9F661CEF21458170EAA54F518FF635ED1AE4
DC1C53E27D18A0F8C2954C5B86EF7AE3D016A2A768ED4178CC13DD87BE8C21EB
3A9ABF13F7A9C46B596F66A0B188B533E41F80B67A03356C8E3D527131F944ED
FAC007352614C0B6C531C06E1725F39215694896C912683829AD9700B3205A43
3016971AF248EB257229854B2F5A13400556D1D07217CE900C16506F57014371
03FB4387012FF7455004899DFA70FF7E29DCBC1F46A8DC401C49F10CDBD78047
E8507EF8D68A3B96BC7AE1A37EC827603D8470B05A14C8D3F127A14F0613DD64
71B14667721A220ED3263AD4B45DD11376BFB3A2C968EF269DA797329610290F
1382E9F2913A74A23D19CBEC9091458CDE247E1B38C4579FB953374103A2BC94
CDC589974C55513AE7F584F04821258A77E64304D83D454B729FAB2693CD5FB6
8E72D452A44EA785E273ED52156C072485C5377874A00CEA0712D6AE10D4FFE5
6A86A59FFCC90A00E691EEBC3E6B26E3CAAA3A6EBB0C27F6B3D45356DFBEB0F1
2864B22FD14086655EC6E370B94F19A54C3ADAF77BFC22A2073293B0B056B9A6
339D5B4AFAE1B7D87F43426B64371277A2AEF4AC63E36C288D37E6AC05331D22
A0AEE3CC6E024B32FE27E7B4CB920DE053CA8B83B24B47E99776F0BB4D4F11C5
FE4243E7935788BBBE08E047BF014BBEAF3FCA01932FD39526DA4C043DFE6F77
0C564C4CEB9C6375E89F0EAB2B56BBB89144CE810C78D8CA0851D5C3AE03D656
334D7A3E9F845B49E2E0C1B754A676A2CB9BAB1CE577EE970A2B5E013E23CB06
54536FBDA05DBF1ED58C422A119E8C6BB471DF05580FB2BC843D925AA4394661
9AFA7D123B500EE628A13C1DF299898AA7398E119088C53490119121DA941D8F
96C9CFB1946D4B17473ED0505F69FF85459A658EF4AA3557F832DEC8804A2435
D4E8D2A7C864119F4A76CC251077A31A0D8D38BEACE211A057549489EB815FBD
E1DC64691C3E5A6DD2DAD872AACBF8AE866C0504DCAE2EA0AF63D45D80F3C0EE
ECAFF795B9397057D3AD58244783E4BB0036D7FC5F7286D95EC08325BB6A68D7
3736EE2874EBD426E37B28D8853CFE0F9AF5A1E173349F287CBDAA4BBB6CDD4D
9DD59F406A0635F4D60C3D5A5D5AA54D4566C36A1DE47A8ACC9BAE522B482198
5E2F3BB273C45AFD346545AD9C28F3F13E38812F6866EAF9C081A5A116993652
2382A22E37CCD2C4E4103FEB184076F816ABF37783C71E32872C04B9D13B930E
62909CED0EB18DB2D17A7C0FEFD235419CFF880C9E2BC216AAEDA4CD5A9F739E
9761283FCA12F9CA712FADC6FD33E9B0E6F4977566D227C89956CDE56A3BB8F2
E403EFEB2E3BD728621B9FDCFDE691BC8F2841718DC369D9C0F1A3DC52485671
95DA50C4BDB1AA0E4199A1AF04E3C3F00E776079A79D9BFE1996455985D97919
645E1468A2277FA7DE48DA99DF7F2F1460A76680C873F7D99BFB580F4481CBC0
E5EC84A3D9055FF80B0F830DD9E5D9541C24BAFC53EFA42A90A1984881D91A62
0D734BD20399504F034BFE4C20E7A31326783358C59AD46897029B34E09BAA55
9E20CDA34AE650C23CB51C05A72C1C67BD2932A5244CFE4D1404FEBE317C7610
92F1BE0F6A35AA1894A23651DE099389D561B469BE5C04EAD0F6AD56640152A5
010D25C836FAD8B8569DAEAE67A6F4C154FC5623575161086BC2003AC0A9698A
E84CBBDAE3E45D3CE6524CBF56223468C987C1883B80126A33493F2C600689D7
14E5BC01BEA2ECED1DACAC54423D97EB820130F76D51A3CF5FD030B25E6FB679
DBB3EC55E1F756439D26453525D02165FDCA6FAD543641E0F8A3E7314914C307
549274C1929A4A40B8681E1A56C83637A1913D5E8A80518B985D783FD7F4E8BD
EF7E850602B6815EBCF3E19A3AD3094F5C09CB63C21E84FE02F29A08B5EACD2B
71697CE18F151E6CD0DA7D7887BEB3F685B182706F5DB4C7C4BC2FB81A7D0E7D
5646073D42A8AAE4A6F8B0B2ED3A99469BCF9EBD0677CFDB89474563B87923D5
23CFF87D0A87D9C2A2B7BAFD76B782F24BF7ED544AE148467180DC2293FA812D
87143F6ABCBC147491A0EB8BAE82C9F14E9F3B744B51DEB09DCDBE4141F92DB5
75C1BB3E34E3C41615A138B1F068411EBE568B4DD7BD55A2512D895D3A9E6984
23B4F1BA7DEB0A5BCB8A96755A83EB0F6EA03C1D873F0A7ACB5536CE58D95778
987AD17F6C984EB17C8D73803867953361F1BB529C9100B1D878DC9A077D2180
5E89D8B0F962DB54FF066474763370EECC9E1E60195986EB4C4BCA0E7F2988B0
8711D1C26A6F7FC2E24FD64F7B74BEE200B054BDC8C2DB390FA2BF1C1B653BE9
ACA74DD371CBFF0F820B317A996878BA057984BCF056A9D38B3AEFB10A943F50
44A04E04279AAA541D26750E85FA093624E316E1FFC3A68CABE3508F62EE68DF
DA4BDE678A10433A5DC8E470389672933EA7C28B31822AA9DC74A4F34B67C8E7
620BA4AFF79E9ADC4FEC9D11B0CB1EE425FA28690B3C53615EDBD8F12E703C62
91D66ABED70CF63CDD5FE7230B5BAE26B394E8356F6C295B3A746BF7C3269627
25A9410C57DA93D0027D617FEB2C807C63D2F56C93D6ED30FB3D71007387C697
011834635F86095CF4ACDCC4CBD143E555842091400185752E88DB77056FFBE0
D14367B61031B73F09457859EDAFD61E7768236FC0A4304941856457D249AFBC
F651BE1ED1687A01278F81AED807AF9C968AFA8EBF05E3DC22E084326D3EF8D3
4CEBD5EB50497F624A445AEEC02EFF10D47E585D0ADDEC4F95C3A87B9D31633A
7155A83360304FD4175BBC50F3077109A51899AAB3B2C8FDB9A87D88D52B68DA
57097C8EDD95A75EBB9BE412452247B0D8CDAD32D6982637028A7DB25C9147EB
CA5A91FDDCAC2042AD0EA58773ED0DE9FC13FA53BFFA07C6576B9697457E6FF9
E0F1EB6964C2FBF17C28F08BC4EDE0996427EDA0CAE0F19C2B1D5B917C508CB5
8A9D5D01A2D4CC7AC292050E48BE6E8E6E1C6B6C5933575EABEE5A3EFD38C40B
C3B14D9504DDBD0985505B8DE7A605BC8062E675FFB48A0D1AB9DDFE6A5A10F0
2CE55B65E61C972A38E423874D699CA4A0EF3803FDBD2169C15F098EE928C73D
0E6F2B209BA791971918903CEC0176DB1D4D77D17EAA35BD7DEF5A54D050720C
EB18CED0953523892CF3C8706F2B45C0D0E17A30A5F045271FDD5D6CB67B92DF
D2184A508BA545215157AD16CCAB7870DCED615803F7ADC6CEA91AB7B45CA7AF
8DB57AA51111F02A3640713EC3DDD0DC45DCDA48200551FD1140A657AC865094
0CC040EBACD5BC7C774D53CC63B57F7C9DB1EC4936A45983041115DB80EE611A
E48CE6F5704936535366A6EDDC541AED28ADFB33908C7332AC97BE9EEE41D1DF
451636E19BC9CEA795AF21EF3258E5238D15FF6B096C159DDAB8844290677BE6
AB51DC370B95A56E0B8069ED4AC93D2F55AA2CD890BDD9EFE44569F2A13CE280
77815CC640335575C69A9EB838DAF9A2E8056EBB3CC8E2886C5417DA88F96BD9
BD67E0A5EBCEC560B2C88D17AB1268AFC408D019ADF2A20C75052F46FDB53266
BDB321970C83A1C4698C66A8C900013C14ED7BA85AA032815F0A4A7B42E35A5E
61A64238D399C475B37ADBA95F47F3A70A7F40E6350594AF318C9157FB09C1BE
6A726E254FF269BFD4C2DA659C00B09364F5192ED3D272734367FDC4CB233060
30744F3CBDFCC6BC3388641BCD7335D9EFE8E76815C389EB932443AB7C855B75
672B3C002815046242CD2F7BF079E4557AEA1F9C18CF250FC5195E0C3FF3C951
2D50FAA648A9822FEE5B4BB37010E988DE7D837D314BBF92D3F1CABDC48E9156
123182A8C9355F3B056CE74C17B45A78C317A54F00A58FD073CF35C9CB7D5636
F69CA8A0282200D23FB0EC43EE1071847123556F1F67AA1F04A4C533EE8B901C
FD0AF403EEBA2C528B55F71AD1D714E0BAD92538EB40128CACBF5E2B2981456F
08FCAA50A011D7D48BD7C93BA0ADEEBDAD503879F852B5DCC87392A9FDB4F0A4
07E67926A4C335B9EBDD1416A17CB1DBC01B15FE8F820FB7BF9216301E19C025
E4CE556A35E9F2844D17BBDC178AFFB0DEB4493D2BEEDFECC7DB554403EC5566
D6D4B270A06BA454296EC17A8302113BEBEE9050B2C092B1175F139CCD692C12
AFF1565A13E4EB78C1A95CFEF5D63253821A866F13CE96048C858F2A644B56D9
00F24DD56743344DC8969A133789BB6A87F18430B571D1DE58FC6F22A3C5D499
DB9FE842BFC9E7AE92245AC31B810E4C95B7506440F3B34C329E6C4C43E19233
8977159D77AC6BF76682B29B82D49241BD45BF252C7174A732813A49A4731EC6
EEE64EAE9409981762A9A3591E2B70F647AD9922E0D0BA8720C1A79360150284
80F2CE7EE814B92E58531B9E7B8A0B7FF55338A74D2023B34333EDB0DEE3AD86
3DD54070C80AF82DC8CCC76C007B90466167D1AB7108D5A3D0AF39AA1445BCB4
FC25289CD86001319CBEABE0CB51E6718BE7511AEB1F990DC016DD1DFC964B4C
2263CBBCF1F660E8262CD10AA45C67562303483314B5B1662873F2E05385D9D9
B472E4E275B3894B4DAD7F9257FDCCE729F35A6DC7D1869E4E04940F45D19709
8DBA0A2F43BE43B3096B0D75AD07AA1023161186FD0CCE3AC7ADD14412312CCC
D8E06297A576398B0ACAA04C99BF3E5CB3FA07C6576B9697457E6FF9E0F1EB69
64C2FBF17B638FEDC6260465A657929DAD4FA1EFD853F06A11B08438C579605C
ED53147A5A50D0C160A05FE5C50204E8875B4AD570A744863FD8EA705890890A
C5BC2F0A068C75C6B8C8674EF1F7729CDB19749ACA9CD399A4ABCF28F95A9B42
D0FAF6CDE696534896406A8A5234A8AC19BFD0C880CC15BAA041EF80C5BDC12E
C1F5786BB41A5A210B6BBA2F2E8840F8D2AEC81319FFECEFF0B5C6F44577081D
7770BC6B9FCB889D2E0CB11A825DED6AFC88E7BF77B36F422812B050DAE9D1E1
121A5E880CFD73B51A92E3E0AC64F877396BA83809446DD699668F9CB76B73BB
62E240174995D179680584434D8A5C8A4255456DEAD951C8BE50D29B17FC27A5
506496FC1CC6E6C651681C8A24BF47E496E97C50334C156FDD2F9219C86854E9
6B7BC459E78AB828EEC69F3D2498503AF00EAF3AE0B8065552B98992AA2E5B0B
2D36B70B46A1469509A5FE8968FE5BC4F23D76FA47E1D2A4777FE0F2A4F6CD51
8EB67C27FC32903192098773EF4313CD8AD96FF7FA7D349FBD703B3D2D32D92B
D20A3E2112F44701EB6466C1DE8DF646D92A9499C70E43EBD1E81973D800E720
E96FDBFF1B2D1875F886F1A234FDF8ADEB552B7E7E10AA577ED3D559072518F9
9775D63476CDB2ABF1E4A13CE43745164220E55FCA9DE648DB1736797BDF15C2
A600ED17943DD010B661953B851A9684ADBEFE40D607EF5BB9BA25F7EF95B70B
BF7098E577C4E43F0E4BBC0411A336E4862600E511399D22F773556780188DBB
551E7B489BF3327B9AF9CAFBCA001B7C0328E4C7DB807BBA1C5D51CBA7A97B8B
09755D3D61875115365E93E4896D7452359E2893B59E81369BBB557FAEF2B888
3F578DA057F9D6E3D0DC8157A389BBB3C8C2D91E42A8F3E97D7BE0990DB8FF54
513822A586932D1B1219BE525A61FFE83E42C01A924BB9615DBB6786DF6522B4
AFF4D46E8B5714A56CA0AD4CACBEB2E1DD7F47029E1579A62B5E34F8CD4C3867
A0379D12D5B121847FE1FE98E609E6BDF94B2179DEFD070173D7AF2FFFDF728B
7EB14228DDDDCFF63FC9D9EEBC5F048B0811B8F3BF2BBA45C9A57E7B274F1BF6
67F875B4722D0D4A5D123AA93B983AA070D345E33CA1F4D96FF84F3C5238A6CC
B4758E36CF9D10AFF24919F19CCF772CB5742104AAF7F6B37234BD3256784F92
3639F67B93BE909C4403FE3258790FF1B3FF67F4C958CA167E0A8EEB2A4D518D
F5FE373DA1264FA065C0B2C801738CD790989027AB9043E20F807BC9C2A57259
E74B8D1DC8E9A6787E86813FAA0C5F1ED2BC24B77548F1E3BC5AE224C2C68C1A
85D18199E0C313BF1E3064C18D2EDA02CF73B19653C3BCCAFA1AA748409D3C1E
1A165DB628BB230C9B0BD14ED17ED6CBBFEA9961EA9580E54EF5FEE4E37EFD44
7C37DB455D2F083DEA179DA4FBC32DCD024D1E08089556DDF207E96FCA8530F6
9CE397D99E34B312102877FD5ACD5B5AEB988F314BBC66E74D098D77E05B113D
2971E4111C082F8EF18BD155CD0A30477BB85AD1AE006BE4448843DA468079B9
AC221E9C8D8277D05F7B268B901FF9257DBC7B6BA960D2C2AF40C4D22E10034D
EDE3E473598327E47DDA801E831580745B2C530AABC2BE0261E48B3052E92B07
DD5D9412C3DC063D165D5BF2C89B1952BCC18068B84DF163D293E2719354C0F0
8F31CE24CD563A21ED2175A4117A9D3AD3DED4F1EB84F0A77C006EFA4A697DFD
000706D74F17037CDFA5ADBF3A23FFE878B3D27D4062F874C6F2EE63AE5996B8
EAC8C1C3A0C006B2BD3632006ED6A30C81F3F447DF292240BC8B70C1E059EEBD
8D8F0C09C8BA3B0DAA86FCAF6BF2A7ED530D47FAA5AEAFB44B4010EFD7644D9A
0016C6CAC1F72A5ADB017D0D3F4F6DD17556CFED354791D12CBC5A6553716D59
7DECECA7D847983B4489E3AC601BEEEF0FEE574A0E29070F3A231A311B0EE536
68AEC5BE69A93D9A253F72B457789FA0A6A3333723EA914E9D304A615C9BC3AF
0128138DC98F5973F50B80FA1D1705521FA601D63E2AB997FBADA09A8A9D172F
EB292DE6D4C278DC7D453F813638EFA565CADF3958184CF236FC98AA086AA1A9
A5011FA002E6C13D1654DD3B360B31AAD2EAD7924AE66E8AF8E9FC65AB0E94E4
3BA764B5CF7F80BCFA679317F0DDA19CB544AA10A900EBC378430308B39CADA7
2E58B0F98C27346A06C2EACAA1D62C9ABB91110A2710228A5351859C5FA04133
A684E2C379D7B54922C482331185A518936CFAE142996CF46CAE51FE40CB729B
4F8218366FD57EBA04BC1F074D1ACD41A38142C9078C0ACF35BE5EEA1639489A
7C700342B4CDBA37E871313951758508D0BC98C64D43329100C61F4AF736F57D
769E6540BB5681B0266C339E04836A94728FE3BBC470830ACBFDC7E518F3F545
F8E93F16B94E74BAB3896C193D23D6076589CA24107B5B59AF50358F17AE9634
14E2DA5F349ED897B5FAAA268E1C486AB1F88E6D0D0C8D0E151D240450B5C81A
557D30B1E8A41036CD4257E36A2BFC0FE9EAB1E445F0B18F92F2E07BB92A0DF8
3FD26C9416E31B637D5B0092AAFAD9187D03FBA58301142A9C6A4B3D545A6EDB
BC60B0A1837FE329D491BBA0898AABFB71009290AA159E679A3C8E26D3632D76
261A243E97E8EB03882C0E1E16BFBF07B018310FE3F522FF10DC37485B5AF753
46B5F5ACB49915BBA44CE925833BFC841F5A2D62C7ACB01966748E9B5373A1D3
258D018F94E082E122F8E0AC8F81163F22713E76593123A0BAE5C55C9AEE6108
7590D8F35ED41E0B270D36C2037286AAABB3BE60BC8EF94A8A89C82328F63639
DFA6825B55A6078DEBB5C93D56561C94B8B2D6AB60C97299077B0CD48DC95B37
EB683ED24BD28862AD6718086A4F9DB6133DEBD42A7DA5F30D23CC75F45CA636
8B56D8D2707810F4B8D99A87DF51C86FAE4EF5CDCF756F0BAA123FA05B28F08F
7DD010BA25B28DFE8FB458008D77935865BBCC6AEB2526D08BA997447B0E2346
31BBD41C53AF43231B0C499FCB8CD67A6D4E04649218FAF36BF07045D62BDAC3
AB80DB4844F2C1705FDA2AB8EEF2A8BF1DD13641CF203A0D91D7872C7C1E5A28
36D0FFAC90ED7B624CD4E56B978C500F5F058C34886E6D5794A2FCB59568E37D
88E25B66A5F93A3D84DE29F5108A11B7D22169E4BD55088FE5C2CA4C8DE3A67C
03DFB0C5E197BAAFCA8F949F9510339C111DBAD18BA4854BBD4B4F1863E52040
82E60327A940A56EF73BA31026EAED433F4DC287230E4EE703250125C11D82AA
549B1A47EA6587E800152895F7607A1F49CA66CB102C9E835C84160BD00B1823
53563132985D319835D00D6BB3ABF010CCBA2B7048CA5E26513E87B10205D270
2910445CC374F68D1E3A840EE6A9D03690A745F2901535DEA489968FB49244E9
3161D982A6EE397FE9FD34EB6002A0E4E2EF6843C76145B64FDE04CDE7C737D9
FA3435EA35605042E1167E73E06A2DC00F80B7F6E4C9D0D3C0A3F3186BAE42C5
7DC41AB9714BC1C4E3A325C7773441418561DBE4894CBBB220A692C75091B2AE
7562AD15DFC6187A18757B54CF7D3FC26534ECE31AF8F3E949A81D87432988F9
5BC9C3695392AD88824D01807FDC883E15A77916DCBFAB6963DFCC916D3CD8B5
839780D58C28398D4995BBD7E1A7A25AEB63180335655D52942D556AC659C061
F283D1A17D1E1D7DEEC6AF4761B7571FF9BDA9E2E1CB1A68E3DCBF6BFCBACF2E
07F5603EF32355AE5BF25C90B9ED61DDD439AC01D6FD911F378CFE6AFEB751E9
08BD8963E34C8799C001C63F8965536345D11D811D2461FA0C7877CBE0E43AA9
08BDE2AF8A98CC614894C0CDA9C1A9113581A93DD9C6EFAC73F13F594611317A
84F8BBE0702CED9D39BA4CA87FCB06730863F245432ACCA56945EB7DA5A45EE0
F0E20D2CA5B7690FEF330C46B09DDF01B4651B5742A30EB80A9F2FD46684C9E7
8B7EF5CC9B9D0B17C5A2FFBC6CC49221176A15E67FB09CBA56D109DFE6D18BF8
6690BDCA2E2EC35417E21FB838AC6B4C3E4031971AB18460242BEE2E184D0D67
AC9B10312DB3BBFFC7E5B30C75274B0AFA9065DE1B45450160380FF3D0369B86
28296B649817D5DAEEDF768E372C79832D166CDCC679A67F9E5E87C8733335BC
A0E424471A3FC3001127475C6264D7CF1F8DB3736E1B9E9C601861D0729D719B
EA95A88E93D13356C919B6B21BF9F1C64AE9850B36FDE95C678C19576D99F50D
3656449BB365D059C283FFC223E4729529FE23CAAEA489400FD0F02099CF6C89
47F962E2A0867511BBFE0A5589C79D491334A26B5466F6EBF45359D6677213E1
04BE321773BA9386ECC998C9C2349006AD858D7380415B00972683436E9FBDA8
856F0B6E9A0B46158AD7070878CC1A0E4AAADAB67691277FA0C71250D7059F4F
4C3F9A642D098D4B85638369D905EFAD4DD59AB6A3416A0AA498A967D890C295
77E00E2E0C471258C4D46476815F98C8B106FD26F9594EB69E911FACB51BDAD4
5965CB3E4CD451B5A1D6149A66B468138EC1501C46CB5B5152192E8D337A77D6
0A3BC6BB90CDD5B85319EA3EABF03C0D21319F3267804C0E1E0A549F19412595
363B9409C8A7911EC4DC40872BA69468347AE6EFC8791275717F67E1B04213FF
1C0B3BB2E4E7A9647B6A3A5A6F85313230B2E502E25CE5EF4C776908E20AB376
2DB418449B6777496746C149FF84D3EC780E08F9E7A7A75A43CEEBE480797FA0
2094024DB22A703B505D58D030C12C284D27AB2D2A209F503364AF1EF93CC52D
71D57E0B662923224EB1B46C7219988CD2EC0FB691EA6198D69E58A2648D9CDE
084FC670085CCA785EE521B5D53F74FC05FBE54DB7956956787431C577A5BA99
5266D27B22169A22BCEE67C9B082A1A3734F2A903C3CF1BEE3D92A9B5716033E
972C52448724EC91197BDEDCF2A21C4B824A6274F0A064DCF69186C2E642E235
D660DB5BCD4E274E5E666E2A2DDC92E656FCA5AB5BD3FA522E6B79E6AA16A980
F5B2776F0C26778CA3810E145757CABD38D6A9B95F7209DBABDEF79751E4C0F8
4EDFF3ADFDE37CC5A8BFA27004F390A9E7BC970D7FFD23CAE96C94B20AE2F1D1
47AAB602E9889CA3D243193276853DC19BF2C5D0A0310AF788DA8EC92DBD8993
A74455C059A52E7817C313BF97AF91D00292D27C490A7455B5C9A4EDA0EF579A
13C516BB0ADF303A11F6DA071FAAC65CF1D8DDC96D9C92B5907558D37A615F38
91C009ECD5758EB2778B8D3D70590798B43926EF19BCEC5AFF9BB5608C4ED157
76DDB1B3534E0E58E589E697901F95C2C712B96981E417FC5E3BDA5BFEA3CC62
C90D70B5187331B3787A1160D7C2D3174873F55307E929B392CE3475109E24A1
BF17B838B41EB2374992009A28469591EBDC28F75C691E4C17A1F352AE1DB411
5AAE231F8F66E9E578E6A1D31B05CC35A2A23A7F8D48E3D955FDFE70A480F488
8A42153AF3DC331CFCF87E428EBDD9F1FF7DF01A4DE51F02959BABD1E8D779FC
33438BE47E57565743C7AA75447EE8F7F26049F60EE9D12F81C92E1B801CC59F
440CA8D40050B2E2E536E61366D0E9E9307B625C75E59B2AFB843AE2A8B12D3C
E3BEE1CF7596C4CD0C814678F20A728A082E21E9D5B69147F022CF1F1C5763FC
0D5609169117BA6F0B6B7FAF1D529163E195DEEB156A9ABB9563FB21478C1D82
9DDAB83F624DE21EBC8145C88AF47A73147DB9EA4B851C0B2CEDB41F0AF010B6
9D10534D911B82B137AB85000F4F67C2D05C983034085ECC6005D414C20D4DBA
D2B7A447D402249185582B0D86B7025004216D875C52537DDF27956B459526E5
CD19579F3127D1D8CDBF6F86C83E57FD4CF4FD2543B7E673E54BFBB305DD7B41
97110EDBF060EF1CAAEBDCA1A8C90528E047C64A35D63C03D0F7A0E59F2158AC
DA27072C3988F3C6CA7F213277AE46C64134ED2EA0B9AF6CE1C68CA05F3D54EA
8735B7FEE14F306FBA443982A082054BCA726FD7CCE75BB0F1D3CBF9DC15B995
D2B71FE1A05B6B41E04B3165928EC47EA505C0871967BD941A6152FA49B03BB4
0DE7F8FBFBD36B12A1C1F95A92C43346292BEAD105A169AC099700E454C9B0FA
AF6F2A73D30725E66C5852C838BC3BDB4D669E857C7280605EDB29A42CC11095
5C6FEDAE7B54D6D13B903D2FE2D30282A034AD82C941C2774AF399F6E93075A7
A0EC5AC289BB9C96CE6A0043A8C4A0951F09F5CDA8DFAC8F6F47CC3C93349512
E9B5D4C7FFBA335639CF2FC9D535FB6C582CA6AB85FF738077CE95EC93DE7E76
13B1AB413F34819B2C1E85372873F24891E37EBBB97BF575970E3C3755B64EA2
645FCC509055D0140BC91580D08AC36BE7E9A369DCF635331AEB20D043C2DEE8
08BB5D4B90CFF2A1FF6614C4D39682CE25462616C1A9EA070F64ECB9A6808106
37C3D1D709566DA12E0FF208CDBD6E5295077393CA34CA225C19B6E2DBCFD799
18B26CEFCA0AF2C43FDEF8F22D998F11B32FE2F5922D4CA97A58FDAF6CA56CDE
F097EED3EFE34FB1D6AC62FB3115F92393F105A8683D31D17BF687147415995F
D52ECB3B015A306F1EEFB6689E951DFE2E95F8E751237CB42E5C0973C1A85513
B4EFF1E40DDAB3EC2929DF086D2B8E676166D5E2ABD2BB3A808C5ED3C12024FE
DF558074AF74AF97DD276A2BA311BCB0B6A5B3D051BFDFC91651E3F490774A62
9568688389E8E007C02CE987D26750500844D46281F07D0809D7EA59275299E6
CCB1441635BA8C71368191EA9AC8B85387C66232419FCD0134CB06C603070FFE
F0DFAAC256DC4D00E4DD9F83370A2E509FF6EEC8949C19C52F175EAF3B7101AF
39500AD4EDADC4AD71580BAE977001F1364377688CF69F234889C59DE3CE75B8
79683E733BA9BBDB3DFD3877B6F2FC66A443BEC66723FEF0870FB0713C0A3601
243CF7815E16974842DFD041D3C94B8E6B3957201485C37A420A07A7314E7640
EFADCDF83E362307679E7BADF26FD245DA8E4945F6C088CD5B6D00AEB4CF601F
6FB7EB5EAFCC56D2A7432584FBEE469D943873171D8AE2A5A36EE4EBCD4E3BAC
D1D3766B9ADCBB43423FA4C730ACBC59C9CC7B9ED27195287C7FBC69EBEC68DD
1BED6D127E0E0ACDA87A47E1883C27EEFDFECB43860DDE32C79F575CD2CF8FB7
C0579CAB173AC93C0F9C6B05D7EDF1B0E5717A6B3D01A2FAD886B78D67CD5551
97309D64FD3F44DD873C9E50D108A802E99CED7F564652506688A1F3F7FE839C
5027C74479E299891FFBF8ECFB994BAC1C446E79957A7AD909BDFDF01B3AB5D7
D8EEA9777858F4CBBE72CE1272FBC6DAAD4A90FD840DD65B9C982D50BCBD9B70
2C0C08132D990C869DF7485515733ED6658ECE5CC68BE3943949B1CC8EA1D2DA
E7FAD94F10504B85C03352C5B5920844D246CDC922FCE611D8EA0C60EA52603E
0625743D002707D5995E8B138022D9843D5AA0428A937B41132A9021FFA31132
3049F7375CAE2EB17FC15928FEAD6C4DB3C64BCD5588411CB573CFE599DA1DB5
EBA1FF56FD6EB9859EBB054D05B4096A313C46219AA16E13EDCCF90A4BB9A5A1
906D3D1E591AB226407E6C99CFB6F3DFC7D308B5A5D28AB4D503F271A9E25CDB
DE8F162EFFD0DC696282107AEF48D22E71F0F57E906AE3F15F062CA4814BEFA3
FBF8C750844288083720D9B5CEB6E04DADFD184340DA9F37CAD8AECAEED513DD
19C88A2393BB6ED5E4B8393260A52ADBED7E329DE831589726B8FD45D3A39F81
918566EFC4B9E48AB5F583F295737287E12154F82AFE11B520621152AAD3341F
35585C1CCF07767C15851173B9DA4B4678AF45DA3057241191EDEE385943F220
8B6BBED794ABAB6BFC1600F7EB1D08B5EDEF0E0AEF1C612196A64D1206AB59C5
FD3D761B784845155F0FDF8018EEB9CF08C2BAD47CA484F64080B76D7947EFF8
367DCBF201DCB485D18FBD2E0FE571BD1EB145FE7CDB5250242C7BE1A3CC5447
4A1BCC34E4F775C8645DC833DDF0B21595B16AF9E044066353662414DBD469C9
2C4588879DDA19968541E940E2965DEAD4F76711CE6B9D74B4E39FBD2EFE727F
36708ECD6D4CA39743D90725B633A70C6A747EA3371AAFA21DFC19A7847D7A4D
C77B47DBF10AA8A94E967E6F0300112027525B222F26E80325FABD9D050C6EEE
CD154AF19D1C27E4711A8A5C3792E6CCAA54DF87BFFD84A27098DE86274E4DDF
D0F9EFE2B72AAA6ED3353657DECD7BC4BFD32A3221DEE11E2F7DD272AAFF10AC
FD1AC0B8D1821FF981702745D81FC776D9A60944CFC4A423BCE1E4E7A132DFDC
3D139B6BB0E36B6BE01F522E902DFD10709B2059B52413D4157DFF40C28D7DAA
B3C2A406D5D5905B7FE0DBB6051A80ACDCFDA18E03484970105E49A39DF4BDE5
52D73456711275DD7FFD9786AD89BCF9DEC82C7BC9FD0E59DA01E46A79ADAFD2
86D0EBD87BCFA27576320CCD853AC93B1A20D5A5D5E58F6D3E9A582D4A07A439
0FC84DFC83DCD3FCB4F7B7F4F59388CDBFCABBABD8212F1997AE42CDBD4447CF
6E26796987E276F0FB56BB7FA05082D385F1232F47FC9F26B69BC6A6319A56DA
0BAD53E184ECA2EC6BDE0384A050948DE5757FE12F80DC2300E36C2B3A50DBAA
4E7CF5125B84580D8132CCA0AF6111583071A340C7572385042C76ACD7FE9637
A3099F1E6F70CC2BDCDE7FC024C01B24891215A5EA62F9A49BDFEEE884DDB377
D179026B5646EE2F014F708ACE0039F1933D1414E69BC1353D82B180DC696AFC
6246A0ADE73941101DA787494DD6B14498F047FC86D86A019485EF31E401ACE5
8DE4A9808979B2FEF19018012754089BD49AF829EC00526C93C55879A8EA0224
911F0728FB73B1C2DF5551D2575190475FC4232A38D8F360979E53F67AD27751
127AF869EDE7B748EBD0DA27A2EEA125B60A815B578A72FE63EFC07872C497CF
901722BDF3C84482968015267293F96331602574E0B93F82B6A2E421B50F287E
32C2135E505139026A45B8347529021C967162FEEF366F2F37CBA48E2A26DC6C
E7C3F1CC174435E28B237359CC5631C2A4D2D9DF9A0F7075A2D2128DAA6CCA45
F12A41E58939114E13795E57E0A4E434E0126962B1A926553F41637D8D85E993
439E8642C786978EF9638282E2163D12E6DE1100B6DABF46013CD2BB6796CF45
683829ACA92F1758689851A9537A6A016C41B5B2AD6BE04FA169800228BAE3E6
D4040A1B790EAE4F07E5A69C6BF3D0C666FE354994325674715DFF6BBAAF1BBB
41CEC95266384A43CF65B9DD5C89C39284D4A482E8CCE7CD96C724F50B4082D7
9FEBD2E0937D15F1988030393005B5716042441DFE8915E56E54CE51F940FD2F
0461DE36720E108D1A9FEDEF877C0FC86A7787EF56EACA79E2258D77C2640768
14BFBF88BAAD3DBC74CF2C7FBF0C76FAA4EB347390DD09E2099E9119F74F5BF0
76049BACE2FE320EB3DC68CB4AEA776E899105FA9D9FA1E2909887825AB45243
06FBAF08832B72D46B82BFEF58037DF422B423AC9AE422E0BA01261D582C3C22
89B07560B8E22BB021FD3CEE2B4929AA6237613A7BC12E70A8DC75BFF945955C
C67915AD859DE9837D710A56F1226CD9EFCC4EE7C8C40D6A5E1BFA519B08D04E
9B6F00C525950A2C67D20C9515FBD0D0DE62A292B1BBBFD06BF77C1B49904F0E
CBF2F890CFA8657F836C21EC66896CC2BB584D5CB279A626BF23C3768DDFE088
426C0C1D3743456C6250CC608E913EE027C4A7E177C396385BFF862ACED422FC
C49A1FE33CC1878F0CEEE222B10F5FCEA940D396EF9FB63E7BC74A1EA9079752
B0985AF8BE3D4DECC61716281FE1A662DE75C772FB11323AD065201A7943854F
8BF54052F09F53B087A3E5284B1C41859808C27C7DFEA923DC04B524A3A442C7
E50D342AE0995D1280C93ECAB8FEDAA6FCD5EA297233A013D722D1BDD8D002F4
6AA2806A926A5A11E330BA8D4F06D6E5BCFF42E60DF2F654B4EACA409F6480FF
DD24433A0D8724ED046FBC57085A2FFF1968FC0B45C682B69E02D0FD19ACAC50
B4CE8CD9DA1F909E04CF082DBE1386640593491D634AACE4C4952FBBD540D8D1
ABFDDAE449FE68185327170B046B27F59EF6731AF11F62984C5F853516C1419D
F929D29EAF4490A7E566DCD498EEE1EE3B133ED53C0463FA402781CEA9FBACA2
23D8F0AFCF5899F87AE547394B667B71E1F08F6590FD4E36AD80B47AE7684FB1
1C71A1DA9685B0EDE6F9DCDF1A4AC2A4147BAC8C8884FB2AAE9A7EDAD4E5A800
95AB26839E607297892E09B979F5F152B869142FE488F9EA5CFF30111D6400AC
3CDD3E18A80E96B9FC9B3861D3CF617825F05997FC1E538791637549E580D08E
4430665EDCEC71DC39584BC7A6769A8A5B99D1262787C65B147FB7AAC3C51FF0
1A5977DEB912C5D3995AC2F8CD477EAECA89BD87B86D248C294FFCD5573F0F1C
9D097C5ADA3695C966468708DE14D0E03D90B18C3C095C85461F0C4E0B952D10
AE95CBAAB2029D54B3548653CF8009E7726806A9C6BC448888ECF646A49B2C58
E9A830E17A51E93BC0BC2310AF7E66F09F04BBC8B01F009D09BAD4E0AF95ACC5
3CBF939792B6CD340BA06E12F284DD1B240595008DFCF2B3737A6232E4783EB4
A8AE56B83ED766137AC49176A84492BF9B8D010255944700567530AACDF07626
3D4AF829C39DB36BFA67124053D79DB19F848987C1AF5DA5A06B2AC8B13D844A
44C61135C81F9D586E0FBA23BF32899ED1D9677A4F8D8524778995AE14357215
49801F77BC4BFE4B2F5EAF3C9EFCADE1E4A49EBDAF90D6DE5062E8947A6EF187
E205B98DD5879E79E5B150896F6EA915AB04CBF3D343444382658FE7F92C5474
5222B83F19150348413E218F1C59F5EAD17AD63A3F52A5E447B4806F53AB6EE2
A755CA88C185A6C4F226FBA859F740C1BCC5A0BFCA591DC15C2AFC4524BE8F0C
057FA1817FDF25DB83B2808CBCF67068F4756019283E0F00CD0DE83A89CB97C7
E6E5D5C17A42A296FD765A69C65C70BCBADAB10AE54A0DD44C28DC4763D04D65
3A947E5325EA8D2985AF7B9F14EA2C7C51096681B7757906B3C565FE949A30F0
8F9A68541FC740549496AA708E652DE3DA6F20B5957F6F748928F9156100AF21
730CB485439BC8E1F55749C832D6FE26E1653DD01511DD562EBED40010E62BF9
1E5F195DC0623C166172A1F73B7AAC6CB4F7F3B02D8E94207DD447AA678A1793
A45178243C7FD9688F91669895F9546BB02C2CBC1A6621EA8D015862C27B0CC9
D8A54A606A104088146256A6E7868974AD6E0F8C5061530AF14E383078AE4503
04AF4C884129926D5660E96B9741B317E35A9A501F5CD99DE77FB500ED2E8F5F
E7FE5D7AD4DC5080832196D27869EE01D169FC58F743CD16C8F0A1A0BDBE18E2
F7ADADF3654EF0034947F21F3C35894F7FA1EC31238C83DBB5E47AC0EA6DC989
16E823C45690DD6C25C42CE1633636307C390FEA9AC4785AA1A2B368DEBED5E6
7C7715A70ABD4585072F8547427127EDAFC2B1E9183FA1A76B79DE786773EA72
6DF905B7376E0D593DF37D06A0FD28F4DE04C3144330A79937DC3B0E8DF14B0C
D8A5724D8090D603EC4420EA33BA3CBFF5910FCDC3DBC35FFD30C4F063E876A3
5D65230190A7B379DBB3EC55E1F756C36BBE75139397BA1076DDDD811D282DC6
0E3BD6E40A5F59CD15F1C9316E8B665EE7652EEB7555B6F46C64597A36134B71
04DF5BA86BD5E91BF1B58C840313AC9023C111274789EFBB83B332A77E1A6771
D89613992082C82E0270BB9367AC291B5554ECEB61CA3FEDB24200F288AEDBAF
4001B1A75E37F0B8EC78EE59EF00278C493DC10F6AAE910EFE83937474321B1B
F625FA0AA604E171EEFA30668944B28F32689F8F790E02E610F2136C3E2036FD
38ACA799D6B69AA1C74175D1B58C4D2012E04E630B10981D48109C2E5D22864B
C6AD983C2493CF1748613F217B225520012B01FD773E8672A7FB14FF902AA732
2E5380869D9A7C6649CBFE96C23ACF3DD9F075AE024C674E0DC3A22897F457C1
A044377538A5464E87D5457464650A7F1E8C3154D380E0A7B36DC2F7D2A4D6CC
0937BF33358AAB8FE1040FAECEC86FBE4964497DF28C3C460D540308A4B3DD59
23D5D0BFE8BCEB3E07D6EEFAFA9B374E36996C39B182FCFC1E029E64293585DC
C8F91CC8B8E94D2D8BE56012BB8E91D060E6A3F499A8D73E633335336696BA01
04E22CBB1ACB7E8F298366DD49EBC117E865B64A2FAC992AA577F7CA4079AB8E
656F9EE8B17A2B1A0AC4F2A9F031B003657962A09B09FF1A2427205D6B1CE68D
344490E066B665ED50562E7343E8E3BA1E4E2F9D8EEDBA09F0462AA8FA3A0735
EC6564435BF4F490AAEF2FBAE84D4ADC6FFB0C2B5330023FA77F2A213308C0DB
CFE52528A53C58DCDB1A9449D543E340FCB797473E95B47764330F141A2FDDC7
02DF20B781B809CED6EB0F3BC878FC55C33E0EE5D5505C3562657CC9ECB22230
0417282319232BA8D689548148D7DCB55736A343D4F9EC8FCAFE2322B848C135
82FE98BEC0B52B6A1FB25A49DD8BA2F82A8A628E65C071BAEA6C706C3433977E
C0AC0CB08D9B02969B7305C9E8B1362BA3A2DDF29C622FA55D54800823824AF2
D254E3B470A5800B4FEDC4A99823CAFF87E567B965718816E74ED1642B917B64
E296D4E219A3597953634A1B5C99AA1F0727C28079F6A3B59A0FE50000C38BDC
6A50BFEDB959957A0BE481889125A9F918B0D589B3F75132A36D4DD2848116A7
0B06EE212F2DE7DBAE27E80D0F610C7220EBB29EEF20C628E433F1667EB13AA2
A3FD598FC8DF54F4C9E2935D83F8DE1F125246FA5F8F83477864A835108816E9
072BCDD886F4D5CBF1CC2B737C0219CCBAF02A248C68FE46365EDE23F552ECEE
5F6072058BE81ADA2C802E293BAA381DEB0097323CAC509BC842494A6548AE3C
552F6A1581CF08AA2641759F9A91361F38D10001896C2DCAF0CFCC62B288B065
AD7F038C8A21B412B32B89AD7BF542DAA985E03B45448F550B37FE6FEF1645AF
320769BA583881B63AC736D73305BE80361B8200EE608292248B384B0FAA18E4
DE79F70475401EAB5A1F08C1715C7C180D2765470C9D43236CA5D98F8E5E6D42
318E2A17260EFBF8890DDC97C313D83D481291F6858FCD031A30A0F87D7BAF53
4E49D13772304484CE397B0A9B3CAAA89039F2494B3B4406C2A477CBD1EF75B0
57C86F9DF295B9397057D3AD5889F42FE3C305801AC48D86E096492C753E2FE7
FAEA4AD4B75EE1092A3B7FBF63EBEACFE45697D8FB01AEE6E71AB1A4233D51BD
214B17880CEAE90A5D8304CE37D3D708FB4C197F972E2941C9919B061BFD2AEF
CEA2ED44A912B653229898A70219D4E18DEE91565E3FFF139244184C765292CB
CDDDE9FDA7A05648E8A35FBCEC8E18E784E3D7F128652B265BEFD402E570FFE7
C330962B19E76A7776F67353EBCCC3463BCA4DE70B2806D0B7C335E9EA737E03
556ED127AD8CE5324232D1F45F7C9DBB3DAAB1212FF2EAFFE1D8FC012ED4E9A2
F5990F2DA488EF4D2A281DB54F8961403855815D8F798400A2276706EC7C748A
40418CD85FD323D46131B9284F77850AAC284813B298DD1D7EF648B69F693C23
EA484BCF2A694E48BE728AAB48D8D37DC284BD0B3BB9F871B4D1F7DE948403EF
E192C326FD237E22A8D86CDB5E8EABCAE19E970A9605AE205B223885BB7E1E8B
28BFAEC991D8572E182DAB2869CD2CA1ADB7817E697473C879F05E641C0D3353
5D204EBD07B1371BF9EA67F870BBDC6D34FDE69C11B84C19D5604318006C640C
6F29BFA9DF24D946D937A6C2DD7C2320DC37841E76F57069E9178CAE1D34097C
1EA8787E7960CFCAF59773DA852733FAC5B226A038BCEDF5EC19597B4A2772AB
B4466A6127743E649E5DBFC813A5966E101D283AD7D74A6E8A05E9195A46B28B
61224EBF24FF7D787580D9DFF8078E77187028D5167B689206EB5365C15618AE
444E5C08BE328035D319BD0A8D612111C227C9C6358892B6163D3F3F90C5C01C
4F7F25C697E474D4AD0AF6FF47B13C5FCC011F38E34C393074EEE28CFA47054D
C41A389203BFB3D601BC9A46A8B5D04E2831ABD0593ECE983CB5E976DBDB2D13
A7F86FF7FAD85D58F4F20D8814C3C4F34403C404C616BA3859A5BA5921AA479B
5B48F87B63E0A3565639CBD91D484E4634DCD369BC6549D8D02596DE943C067A
52E1E24EF3BE6E29BE619FA6C38D9D2730F56CAB2EF32E0FB0A34A74027874C2
914E1E07BBE814B1DE83F81D00D3990500BB937892DA1C573DCD4590D322280D
9E0E702C7ADC028244E78DB3CCA399DDE7FB9E517AEEBAD2F9F0891F553381C5
E352B4D7C4C16789062C741C76FFCDE3DC72DFFBE32D06D800F52E0882EF0024
429FB501AA43231F13A05FB9262024E28822E7347830CA20516CACA5771BDD5A
B3A167D1688AD4647350D6549AE551187132843E74624DE754D866BDAABC2FE3
2C5318A2EA0B7A48B80E127950CDFE0D5DB68A6AFA0948DB4DD181908FAA63F7
A90AC16BAD16D41CCFCB9F98E7642DAEA768ED4178CC13DD87BE8C21EB3A9ABF
13F7A9C46FAF2DC08F7FA182909671965AC80B6206CBA287AC703779559BF1E0
748350F56DCB040D37CD64D4D293A2975C6AB0990D747476F17DCB0D8B370B9D
CE24FFD6EBF90008743AB5667BC5737A681810F253990C97E6DC26B83665DB71
D369D1D144D4D2C1133B746943703D4DD9E799A24C02E3101EE9E47FF41D7260
F75815B1C8E42AF19B0C2EEDFC11EF2BCCD076529BEE076434721456C6AA5B89
AECC81F2666400D69E132AA9FA4408FFEF23C6E656C7209922A5752F68183C1B
8FF7F3C84ACC7C86A298598EC9C37CF09EF210C0EE85DA9B53F85911B1D001D4
980BF93FFDE7DBAC99DC13BA6BFE78C99ED39EF436CBA30F8EB1A6E543782DAB
E3FF8230683621049928B01E78C6FC5FC52B1CB9BBE02BB81DB5048439DDCC07
5F1566878834A1E4AB49B80D2E138E98635C8E686F3F263BC002C8884F38F3BB
6E09768DA7E63783D723FB557CBC51ED0027A70B19A0039DEF9FD0ACAC2822F9
0B9279975DC15BC12880C0C652943431A2B89AAEAD493B1117ECE5161D129593
D4F1F8584063E33615701078B378D903EF6555A351474361AA853B4D07B9843C
0E26A62B3F6F93CA35EB458CAD1A5DC5D263DC9C01FDB36A4BA2B4C25B6D9986
E33AE42B7AC8C583263FE6DFE251E3AD5137E03DC6BE83EFF71A173AA590B6C9
2E272D978A286C4E76A6B2EAEDFE2FDB17FF267D0F21C35CAAC03D604366CD82
1AF3AAE894AD59393FB40A14AE62874A31324AE09CC983DA83D5EE615576101F
0D2FADC980581AECF5BDA5152FAD0A33A0B5656D48163B95E51AED9017F73044
5AEB721D19EDED52411AD43DCE9966F93DBC8E9CA5E8979D5232371AD6435768
A2539AECE0FF085B09A9992A4108B9F49691CCECD295D8671B21C3DBF32034CD
2106773B40658DEB5B6AF93383BEFFAEBA1CA6C565DB7F48D70E9A114E6733B7
CA2FAB28360724E0928C85C21A9F5D5DF2DB15F27D165264869A4D5EC574FFF6
4076FD6BE210102FA806123FE4272074EBD88C9DB6A97951259A5AAC01E3D9BD
36436C44082EAF3A1F9CFACF27C387E684376BEEC50F7AD538D04CBBC14666E4
6DF594E5D19387F2CD6F30ADCFD2D364E623338F48591719102119E946728631
34F6BCC2EBBD3703E9619F762D64128A18C9505AF28C398B5B6A6A2EE27DFA1F
3F613094594116E0E93CBF157A83AEDF417E0B742524E7FAEF78B5907B740FD8
090DF7B4DF34233D0713A6DBF2A6FF6B33BD3E063B3ADF904C436C52D290B244
90304F7781337A4EE5A955F9F2215872715967549F665E4D31FA89D07F9F7B71
AE8A2CAE5443B5B8E77B8D164B2F15290E5272B2C64B15C0E2D16CFA4D5E4A38
4094A1D84A98A21BD69CF349EB7D4C5AD9FCDB8B5653DCBE2D97FF4FDC32FCEC
52BE9B3D78A721815A222BE811B4B8A038D3058F19119A3DC3CA702019936594
1F774F8CB1F07D5498B68A580366A988698C0E5C575727665665C88AD38E13EB
02AC3AE5CBC8D9DF2AC9D0A67EB98169406827DF3AFF918B174A71D5DDA36228
0B33A15621CC996967C4DDC40E256A15CF6338FBCAF80A3108B6321F881E98B4
C51B908B0D59E6CC257CB5621933DC5929F623CC2170D02C6CABE8B32B8660D2
759970340F342E48FC8DA1BA1C20A1BBBDC532662182AF7ACBE0F0F8390F9CC2
E0FBCD89779E8398B3FD21D1FE47D715C304B749B5A65638BB77069D0A3FA3E8
BA66A32F7839E4410B48557459EB0D5D2485F1A3D080DE8FDF0905D12A6E339E
C90324A6617D143023DAF80229ADDA35214FDC42E414169A39946E56F7158A09
8CD4C026A95D677617CAEE4CA4B282C8E6ADEC41BF8C1EFC9433FF2BC36B4DBB
0251B630473F7532AF7738923689F96FA3FA86AA4C503C7CA2D05701B2627F62
B5D90F48DA5BDB8D01BD0DF36D531892BB3AA8CC2E4C548E3C0112562503832A
B107A179CB30F3FDE3769B8956349BA90A6860DC939E2484A7148CB173E54B7B
022431BB3E4ED788AD97A1CF750CFCD09294CF22AA63F23732FD175FC0B96FE3
51908A32217E5C9AB35BAB672AB65D7701BE2C4206934FBFF4842335DB94EFF8
FC80D699581ABA7D9D6F98BBDA827BF8D405A71E139270F72734DB97A902EA79
510201FFC961DF47FF659008A35CBB5D7C67796C37BD773D87577DEEE43A264C
CE73117939FA29AE7C893FD921D33DC6CBA82CAF20F3D8C391A5FDDF4B596873
16A523BAD41FFBF45A1DB8403C93FC7DEA11891E13F9A9E976E71D0D1FE7FF2F
054B19D41743B7F6C200BE1F81449F491D791F5D8486C6B5D7E189A06584BE2E
6A1DFA3ADA0B31CA0DE096B059579D65A721332553903C48A7EA4EF745FE722B
0B6BB7DAA1FF37AEE8E9B81457552073B1BA615867D0EA3446F4FA176517141B
75FA51F69D54402A0F4AA4DD26FE70A69B58F455646837F53728D93B32F75C67
6EF647EC262E4C15BA42E855E249A638240237769EB1D3D27326EC057B1883DC
FC095CCE0D9202E19010FF0602E5F63A71729A13D3922AC2BE00E1F189F9A508
C70E5B811B074589368AB6A320AF81CC89B0509E0A3035B472D110B72A67ABBA
5DE9B4789ED2AD727F9B3C990B043C587C5210BB4CD192933ADEFC9229AC326E
30E27450182C88443C22628E66F9F2DF6C83967024DD43CAF541698AB02A6411
F0CB91765BFBDAD8392A0B5E18E1B4FD3B44D85BB710E508ABD520227C6CF44D
51025EF8B6CC48BFEEA12D897B627E71B85C94A97666B16CE59BCDE3EC511B97
40AA52F8C6C5D809F919A8D198DBD1802F2EC862FB85A143D7B299223ED85252
02C755BA4C189249BF0EAE8BDB05A6B27B6C63082606B805A084E1F42DF06C8C
3B0209EA4903C10D598937DE19466D30BC43FD9CAAA37CEDF28E1A793A4EF215
5914A2F03F5A00E201BEDF5EC40721B6721305D17812F9302EE8C0D310D1D0DE
E307C32699453037732F54AFC0BAF606899618C741D0FBEDCC43893291BDCEA2
DBB162B85E7721EFD3127195B72AE08A0D398286B2FB9050CA34766751B10B66
CD40D03EF76649A6AC929DCD3FF06B9FBF62FB17EC88D6FB660D65C6BBE76370
F0389AB1DC905D2BEB7CDF0A400517411ED880613336943D822F2E133A03DB0F
1AC2D1571D44ED014CB9CC49C5FDF45FEA58F190043EC6CA04279C428DEC23A2
B17CA95332B6326944FB6970D6A2A87CC9FD874959462454B5D439C456BB55FB
81B6B452C8AC6E9BC0C1E5143A5DCA16BBC20A5316F9F40ABCF4DE95F1F507FE
C112903F2439C1E08D8924BAEFB2D1BBA0172345439BEB39CC63FF75EA03F6F0
D8FEE52D1783CF447A19D91B8CC30481B5C49B6ACB4DC451F9C03E3857427CE4
B4F1A2AD2F2CBB51D2ED3128467617D654A7DE5235A7C0F4CB41C32E5DC7B2BA
EC2278DEF6B3A250AA4D2B60468F2EF9010C645A00CCC95B68C83FCADF396A99
A34EA77677BC935500722066F025C1104FFC325C7E849CA8A382972E086F827F
F93742EB700043207D012E6870A063D2BF1952AEEEAB9A20EFC7460E849106D8
6BCAE98F31DDB93B1229B2C4A068AFEA4402EE56C49254064D0A6D0235ED4F08
79954600D2E2FC7D7E10BA4420193233FB4633FEB38F6ADEB5AE7DFBB73FD1A0
039F86E8489003F84951D92427404A3CEFB3AD50732A73133F621717A771A7A6
1A91E8160437E8612F98D9EE77EFEE51088228C3EC785F55077D186CF212EB9F
1701AA8B031A7D95689DB319A8D068193360C26678579818D3B7D3B2A6B04E50
6B0398156AE3FB3294257DCBBD7C57932A3DA9C4816DAB848D14F031CD251CDA
9A32A0FF8E295ED1638047495B23A893DC58A24D65F44CB43F3DFE467E6FD1B5
291ECBF6B1AC7A25C002DEEE56392A8F025324C4F33870BE5CEBC65C9617A1FD
6DF238ADEA88A806D2DCBBCA2009B9BC67129F777CEB99C1BEC6A13835B688B7
9D566F17C754C58BF1775D61115E8B7E9432C43E1101F497F5E4B884F5EA4367
2526783A7D6FCC9B36AB34225D92A8337472E000AAFF6F7CAE9CDA6CDE0773A9
B3DA9AA486B793595C1425CA7A9ED3B11C918BB38D10BDE05FB314649E1B48ED
CB3ECE7A948F758BAFA69AF85FAD614F701BB7EA01E8978F788BCA69D42290F6
2CFD58CD2B1EEC07707515C98EBDC2768107C74AB503E55773C46BA826C19DB2
4FCFDC97A92D962E6C56A4B495AA4142370FED9E0F297D698CCA8215BA271A09
8F840FE83A6BD9CE1C004A263F48263C2748475C60CA8D1F5041C3190C40CC95
FEC86A4B6CFDF881F473764325EA88A7A3362B755624D6DFD36898DD9C5319A8
F1C8695FA473D20350A67D271FB75FED518F62D40390A7C2E5682DA716B05A61
79C18288519739BE3029B530AB99921E6EB29842A5B1729778E07A3969715EC4
91033B3823CFC214868978AC8129B184761BE599B45656E0EA348B0D6BF5D5EF
773C30E25E5C12A81B73F370431F3842A1B0CAFD4ECE7F0EFF8342A5F062F69B
935148E81C557C4E1B77F5441CDF41F46321A5D3A5906E2108DF5E38FCD9C55F
F414724118266F25C7EB68DE604375D3D9AB22AF9B88E1494C20356C461FE03D
435D01FFF15E7A613EACE41E72B21E95EC6DF1BAD110A8BAF3885629F8DDBC3D
3B09C57DEA2E6277C985BA26DD7650B28A326F8B92F4E100749B38E74392E79C
9AE9523AA6DBBB526995C1C0A3FB8B3BB423DCC19701D58A8335D97B202A5FF6
63188CD00372D5F0CB7965152F19C026C89FE4A47F9DE9DA86D75A9D8F39764B
C4D34A483CDFE067EE6B3F7DFE0ABCEA24D63DBD90FADE7F3BB2FBA15D02DDF0
3EDC5726A21888E25B687670BE20E9C9B38EF5D524E99EDC6303D31E91B7775F
6C0AB12587CD09D31CA720413ADC66BB12582C606C4FBBFB2AFCD73E9755D4E6
FA5671C1DA26CAC3FCFFE7C6728D9E330928C1E5F9AC7FE7B1E925556DC91B71
027A8CD0E6DCF56E6B16A8A387B26C4928CBC3C8D3E114E264BC85D3ED2103D8
AFFE14BA96475D3AF367496E34A2E63D693D006CF3E86C271EDD61DFA3C4E6BE
9637FC8B211D37939C56AAE1E81872F9B5858BD10DB262FE7774AE4CCA477BE9
39561A69250DFD59C8C8F8CAB3B0723061CD74ECC58667628A27FBE6309FFF1C
060F395CBAE50067780449CBBAAA03FC80D55AA72A7F9FEE22B0F0964D1FFF7A
25E837FAF38B9FFDEE2242C70D8CE777D9982642815A073A24D470813C4EE003
4375ECF81AA0C9CD00545E375162DFF44FF29529DE5A54CC8BD1B589670AD721
CB31F77AB8BD48AD311845FB6A54A2ACF7DE287FA97D0495E28CB8E2FE2A4CC0
B9DE515E44280722A28D29245A4AFD3AE32BAE8DFD59DD21624C480F2314035F
52C165A49120D5332A136461B27E1D67AFE08D4AC55330E8A3421C1DD9ECE7B4
1ECC4C92B193AA443ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B864BF571BE9
C8A524C8B374AACE6ABFEB98F8F9FEAE5848320DCF2451C4E14976E65C5F1619
9D7BCFB18CDAFB031EDA01A1FE6FA61A1B3F44687041F37ADD6989E85FCA2753
6691566F85A386DC278C8F7253779EB9D278001C931356460D7E1A708B7D0EFB
2B5FF55F9E4571C466AF19F8016B3C9FE4AB485221FB3FB929400C555EEFC678
18B84D0F36E5B0018C20AB43FB4C215C95659DD7D7207B4C1D5BBB8ED3011D4E
2E1A18B3FA3821FC62C3CBC82752178F2868FFAD1BA378B23B9336F12F73A223
16553DBD73607D232EA5942ACE88AE8582BA140101A62893AF9BF8CF29AE1080
1C278365895FE0A07660ED1F5838B37241EC9DF978DD7975575BF519FC937533
379E1EC104AF6444F6FF65EC93C0091B975489D56258D2F6D28AB99760ECC8D9
181CE5906BA8E1227AD61FAD276939E557C2B68BF74AA13D459A9CED4CEE2C80
6315194E9A820E20AC9BD025F5B4D0EED30077A96680B02A01DA7C2326EF03F1
A0548BA8CFC157CE45EFDE8E555C2BD1D5FDA8351635D700FC2EE3FE180C18F4
CD8BDF40345D7D1FA13D41942300948ED8D57160927CFF10954DDBB800C0EC59
F9CA562C2391B7771CD0B765D88A7AAD939619D057109D12B7A2E73B91ED26FD
27D0EFD941B3F107E2D169DD1CBC74BBA90A2DBD4F6ABD2A8D4E4189BEDDA0F1
1B8FE226AE94AE671D48E8E25D60C2620163894BF4B74B100B4B41BC8F36DA1C
706148E110C4DF37FECD57C067B90EF50919EC23C9284C3C9C30FF7F2B77E767
08CE71DED1E7887F9BB07F30E9297323AB71C71DADFC7C372BE70ECFE0D60BC4
C1AB1B5BD53E8EE06862B848B2BE4DDF06A143BDCCBEDC388C1D638DE2B5F328
430F2E0096E9D3118A79C934ECE64A4B4AB1A51339C4ED5158D45389A494F32D
78674BDBC8B4C299E78B4D987808EB351D0E8CBBBF16D6A3E85CF65D0DCFE08F
837026E5AD158967B1B77128E1CB76ED70D4BF02CAECF4EE24B0B95950FF018B
9790210993BDACDCC755D507175534E9B35F90C94E588C3F3FB1F762CB4C5191
ED8FC02ED47812754B8BDBF3A89D699C1FA8A766FEEBD1E1684069D430A4FA17
913223EE1EDA5C273A5C8FFEFFED2EC2ECFD6625CB35A970764B3C706A295200
C42F1C029E48DF87A957B9E156776955CA8F282F3BFD581158163B1E15D0E7CF
B1B81FB90A7CF7ABAF5C3936DBE80447B96DC0FB4A7A490D775BF6E777BEB9B1
6E7D91F9A9FB6A8F3333AD3BC0392B050B30D9BCBF47FDE3B8EB0513D56D059E
7F55E504601A772E13B2C9B642D7C8FC3FBF7C0258A691EEA965185BAF9BBCE6
1A1E58FFF7E50BBAE6E3FFD523081B2EA7194D2197BB86769FBF118B6B7403F3
1376AB8678D40C3B58D80535F737E321F18B058C2BB99A54509127A612450764
EE42101E00352B1A794DBD34A345A80518480D1FA7BE6B5293BF32E394ABA296
C04CEF25B9DC67012F276D217862BED10BEFC3125C6759005DA2CBB49291AB1B
6538FE84F63B96AF0DE452C13D55F42242621D57E0162CC86DD0C740FC8EAC48
0B11B97FE126B31CA51EC201DABE940D246A0AC699A656601CBB3B4205F4BB9F
D4DB45346CE73C34CF5D0787BD00A4FFD1888567402BB3C272ACB17F9A4D88F7
33879917F63B9A2466DC964AD4C82A29DF86B8A49FE6FC52F3EF45BC1555704F
F147F36D529D4B8DC1F4BC012DCA6A4F4B5A992CC01AE6D604CD5F147F0A784F
0C5A4EA62F2AA702E925315B796936BCC579E06A87C99D5FF21AA7E57EA76C1B
7E77FD8369511E590135776EE37FF8863DB66D6D888EC34FFA802DA3ECB29434
A131BB0FA8DF5C0B48238A0F6681EA91489BBACD7B2AD7EB99E59D7CA652D9D6
49FEF3C2F479FA651F015653CFD8112C1F9144DE9664EADE62A5D08FC519774E
C815802CFFDFCC8077AD05D2E7B51CE82C4EADD45E0AC329F274C3EE8360B14F
482B7B1354B82DA17DC0647160590CB568A13A076C943E69021093332D4EB658
9CA175DE7B1D3E6FD2FF35AC52C4CDCF9A1F5AB97913C86EEAE9AFD786B3A432
B5516F816E62D99AC232017DA1FFBBD3599DA22ADAC792D8D075B01F4329F562
6219A849D53640C5E55D9844E8F7562EE573F89749E55E8198F6F06839217C08
B524A3A442C7E50D99DEA3BAE3AAB2E4E83AD56D4CE2AD76FB226EB77B4105B7
6E4DF3A4FFE1EC865CE017D4F02479544BECC07AEFFFFA76B640FC051F721D3B
6D133719CEB4E6B4A9F96052A16CC06279077389A2CE5DF3D6AE896B7C202E22
33C13856802C386858080EC6CC209FF8FB34871F61F40EBB75EEAD71D6B439EA
B20FC65CA82E24EC90D5C32BAA7DC2799DFF5C9EF7B504550A3CD279E813E0D1
0BFB1AA3A4E25130C7FAA87E0E7A094B3D782F2BB7EFF536FD02157873C342D3
39F0509EB8D749A63C279F61DA43B1A2A570F9B93DFF3AE832DA0A18FA408672
D6EB72944AB3A41AB96148B87232D14BEE211899251BCAD1AB49940ECD176EC1
66A2B817BE576B03456F12C0164DFD2B9FE2CE494C7193905F03069B82F1A560
43D56C7AAD9A1FACB1645808C5772F8502DD9589873AB990099E38DDC7A80496
3EEAC98B36EDF39170F7720B771425A4C8D3CFF1304BF5DDA678568454622B22
590C71C7191DF3DF36CA1101AE4868012441E36C6EB483B9644CA4E5F88476D0
E15806F5EE3D6190D4B41E0807D6A2D828B99060C2A8644C93CCD82622FC3AEE
BF715D375CD401A9441CA31F1F4A5A13C10DED8FAE6E6094B0686DA9757D3EBD
88967DCD3F5A5CEF3848B7D49E2E7C54CA1F19CC2C1AE4243211055D695D24A4
436F172A702A6F91DBB61A4D571FDCE5E598025732B8A45435390E23884EAFE8
E559AC865413A76070C7CB41DE9809D947E6093AC1C6A31305F0E9A0FEAA8299
322977DA990FC58E46BBDB917A67E52421DD4E76EFE343E1E973C9FA29B4E3C7
C0B6717E8B794AB2DB519F9C6128DEBCCF6C27B4904AE05C6A7D31EBAD6E8969
237B9B08B48540396C5E6C1C1EB14CABB085F7AA4D643F212DAAFFA4EEE8B396
3046A2A4F550EF9655B23060A311E91F1FC422519EB60105877122CBCE3159DB
3E9099CD8C0CE8B35959BF816656788A271BA9406078799C7765E5098D869B28
EF8C64A5D517B1EB4E302709B63220F886B4C6DF7F831827ED25D5330696F786
2B7AF9B4BE0D10A571B408A108E9782444960130CD1C295ADED6767B51064642
EC4528604AFAD2306A88E3B7498C2CD227B543ECCBF231D47E0D4D10FE7D60EC
84C0D29F88AEE951C245E43ED281A87E3AA05320E618535C314C48CFD8138448
21FF395F775C6A5BE3F2FCCF4B785E60C90152C2C6499BF6C2B4B6D6C0A73B9F
14C4071AFE6324110B0FC9FF0246841864CFB51A58F200EB4E62D59802A67CAF
CA93DE954CCA2CFD70E7A87A830FF43F15B76329B3372B17F52B64D6041EB9D3
EE0BF516E0C93259F7DED2E5A57C719DE1E7909363AD0DE3249E0D323C717C96
5599B880B4A85FA8B6BF01600E4A1137B0FC68D2F1DC28B373F2EF2664D0E327
64523FDF93CAE0FD4D2A666D2986C2E5051304B2C91CD7CEC36A60DCFC8655A4
40E82F627454A83EC7D8FC9A6087D2E6F1CB1A3B00E77410A768936D1EA96C1A
23A1237E4775485D12FAA38EE1B99A927A2FCD55DB7BABF7F5D084B01EC1AF92
F12EB66E020CECC7D882C1A2BD528AAF8E04E50C66CD6762B8D4113A8F82F057
05A80ACE1B00EBEC05E1521A8EDCBC137F57235C2D90C48A277758B03760CBDB
63B3AC1894E20CFBF921ABFE0BEAD06A1B93F0F9038D85FD97BD2905AB298110
9830BBE3E8D221925B8B164C58A83D958565C1618555FCC1A04692296D9DE505
AA762A2C53E4726BB0C9E28485E65D4DDDC6AB092A9C03E35F1173A97E122718
30D28F43B9B4BA2AAB2CA1EB301D04E91DD624D2FBF8DDE349209CE515E8F2DB
E02396F93A57DE899AE78A151DAAFF1052012B1DA1ECD909853A1A5D559E5F7F
245E736B88BA0A3781D2BBED9BDDC361AAB17FA85786BBC38DEDACF6204E9AEE
F7548EBB1143392401311F979BE668A0B53C977307CEF3AFAD55FA4BCFC017BF
42B27218346414585B4F07E4561BDDBE618CC7DD66234F0AC44968A930846CEE
4C9AFE55BDC3415E3DB59C410AAF482499BA775C9818BB7346B281574D8F60AB
E247056798F04183C30E5343D2CEDAD6297414D0F831CC8854ACA8351F2A1BC5
7E20E7FE287143500DF774F27DD119E7FBC849F147EAD785FCB0AE78DFD1BFF3
EBEE80CE73272013C436B1E04AF2AB73D672770F29F9D59C93D13ECC0B6E28A3
A5C25871D190E4C2BB1A8FFFC047117003C9C70FA1601959180060E2982972EC
88C36AF42442E63BE84EAA60FFE2959CBC78EDA92310F491C21E2825F0C20D5D
7371427BAC81B38C5402FFBCBCF070BB8340D29257419625CFAD1CA8A964DAA7
18FB8A54D9A3FFD09A1B6971405832A6C5DE6505375A5F1A461E0F0727442939
5B32DE52175E498B8E147DCC1AF4B8B7697868AB10DD0A6A388ABEBF8AD1E8B2
16315CE27F6BE9168FAA48B1E64BDEDF196B57615177F4A2A03D2BB31409D075
D41C86B0135FAC94B1F5BC4FB24E1D888E752FA2B51A01D1FB2F38341408D265
214100636A406CABE9B8EED817C48D23C88ED40278B34E2CE0A31BF0EA5A1D0E
9DB37B8E32DDE0F955F6FF77947592ECB227BACDB1DCD79AC08614F6E3ADE637
8D70D81FEAAE2990D342C11702C795A4414DBCBC61501F95CAFBF89D2B795713
CB24D10568BE6F54F08ACCBF5AA36A7903C00AABCC8B6F99ACE2C14DA1610CAB
C7A3D77E568ECCF66E8F256567CC438C717CB3A96E51C36DDB692CB023E1F70B
1DD3A5157E4115CE3BFC0AACF2AEA7A2237B403F87A38A4749E2BB285BDA679E
70F1662AB779230049992425B43AC1E4AE7C98233C848054C53919AD6A66B40B
88240378C1020E22797CF74EDD21CAB6E89678C24B7162E2080DD3C8A08979B5
2CF587E6F4A4B0B2BFEA098015AC4717761A83722D9FD0DF05B9A97406C74920
98540EA883BE5683AD67BD44B098B0AAD492E295B377C7CBEA1ED0FBDB6995D9
A275B8446F7299D830ADADE78866B7381B8887923A149DA01F52A28C96286B86
A1C5411BDAEE8464B27B298066624A0468D5BDC6F6C441093DDC55F74BE171CC
FA34FB8AF8796EA395326CA049149C59B0DEF3554E5A319BDF8F181DF9172216
480717119F3EE6A9AF7CD4F3D6C2FE9FED09D9974DCF1E7B11AB73A841A95545
D2022CD551C8944EA7BF617776A192F2F76EA3B0D4786C750F16E7466363DCA7
52E5E10EC5E39BE67941D135106DD289B46E8E4BEB8523F9216A60DE22B48EBD
44E5D336C31BA0F124D74B47E3AE127CD1B275AC6CC6BE523B9379D68CD2C613
FE83C1501C46CB5B5152A62FCA272166D1A0D79CC672B0ADB5D0E8DEC8A2D228
46599DDBB64D567D7FBF40F6584E2E7ACAF11F7F3738447B0067675E1550A897
4C1006D5451B2161E1B166B61AB7EA4EABB4E9304E087E0CB5FC92B1FFA1E1FD
A46589A109BC1B660DF5FDE5D59D0DE2AA8A034E4DE8178EA6AB2C212A037AE6
EA691155352AE75ECC221F62B2DB295EA1FE8BD96F29ED8EBA2BF2E39BD19BE9
7F3E0B2A925839C8C34C6EBD1EFCCE576BBD41CACBCE22BB146058D29BC6A579
DE3BCAF3F2888BA8009FE7BDC7D83DA4D358ED6189CC696E472842626C8C03CE
675592B2FFD1DC8164FD91C88AD7CE0DFBFCCCFAFF9ACE25280BF7F3E4464DDD
39A3E92A6BCA2976A309CEDA8F1E3A6A544D4B1EC37CF27B99A88F9040FD797C
D026EC0760697FD7BC1EF5F12D8E6BE0F4F6D925C27A1ACBE70D0AE6352B75CD
80AB8C6529557BE846FB942A764565C6CD4FEA81F694DDA5F6071341EA1775A6
6675174FD52D9614C5839008B4DA8536C2D55A8AD5C5E4BFA7ADBD46C296F4C7
D23E346A9EA87A5850CD24D608EEEB1A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0417C7EA00C3BF24A9F25D40F
4D6755FDDF7FC12E90F2281180BDD1263A9AEDB29E4CEDC083E9A8818E4F0C86
5FCD780F40BED45ACF63A6B1CEC1CBCA4B0B8145DD941B8766A1D28C0EBF9178
9E2B42D978A47B6B18BF0134F12CB398D097D7FC83EAF094FB08A17E36051178
8A42A3D87ECC5243915C0BA12EC2F8AD6305A2F219F870D6A1811AD7326AE12B
896F411E09C15B0506D1F805511965AC7FBF7EF0A2AE13FBDCC2812207A6503E
B00435B0B6EF5E5E1F853052970408E1B96714C7B1D4F806F889EBE1F2ADB31C
432B7A6B88F7B26F555A751CBAF82B795CD0F1BCE51275AA635695BD883B2F6B
22C897D136C06546E80EEBD1B06127A7E7797B41DBCCE9E48F09ABAD8E116038
BEB06DC30ED8E89BBDFE4480A36CD4F92F872474D1DF235DE89D464EF44F2C92
97ECBF2840EC61A315630066630D8595A47913D246893E3D1682833519113716
D1DAC8CE1540946D3EA0CEAC72D968371521CEE81C167C0322F52C3B92C29F8F
D050130FF7C7D8E436ECA4E5227FA99FBA99942BD86CE4B46FF5C69BABCA7859
A876DA0B21819E209EFB5641184DAEAFF3FC3E99ECFA3D1376C47B399F2136B6
E9A563BB6CF6EE049BC3790CCB1FFAFF2326B40E27E034DC75E7E797B53DEB54
9C6D3C6DE98769691F9CE7ADA0F5D6C1AB83B98945A1FB9CE7E2D42213218F2A
CBB2F5361C86BECDAEEEC705F1F1DC687857D57A34CABDBE4B0D8667BF0FE54A
8E67BE8E0E51D90F63043196BAA257EDDD055A37FC3D5A6F2AC7D97350CEDE8D
8720A80DB951D1D9FAC8ED3EF4D4B03D5D15AF4C6B62C52FE635D7DBE1DEBA46
03B10AF1715EA3418AA997C16C2988EF7E0148A1DF74DA038B947205ABECE765
A6F5C39C5A27A1661D9C192421E79A5C0E3632C09A62F2A89E84964B2B68602D
92E9EFF00404DD0A2AED5D5C4A91CCC4E24C50984C346A441E0D4C268DD363A3
82E750152A94A0A0DABC97B4B2A944138C5413B08F8B757A68BFC53ADF8F88D7
F4844A8FA4414EF339406E166CD727639D26DD574C550AA3864CAD2FE404C29C
FCB9F734AC514A3B200ED1151418051744E40FB9C87F5F56E3EA0BB5CE010201
005AD0317780B06EF63A07D938C2D114FA43CE0B06A5B8FB130A3936C4504264
CFF299997BDAE4EF14F9E60E487517C8ECCA81ED1DCF6536EA8AEEA67912F19E
B02D56869F7EBC6A93EEBAC763AF4A2556E76F11E21940DED1DD6815946798BA
56470026735A1C33E62D7A8D23C21F63B4642608AD851A31DB1359721319B911
DB91692758F1907EC08F5E8ADB0E9A092174032BB57DF31DAABB7DE1EBAE20A3
8DC804C230E228574DF9E9896FE3FF392A00DEE04E3156C97F8C103897DF3058
6958C707F0205C3F9872476833B252DE228173010F59376FB1AEB72D08E929E1
630A7750DE134C6DA77B5CEBF5D03BBC3C2FAA19D4E7C58231807317CC077DFB
EB40EF57CD4DDFFCE7B9035E2CE43776643E402FCA886F5949790A7E4B850B6B
8E31EC18B7321E63AED47752547DC27269C1904CB0CD0160136BEE30A0B65D10
BF4D7CC2F28CC4EFE8A891B2A31968694C04BAA55BF3CFF37AA1D0570FF3D683
011C315D6B938837DF75D2AEC19BC7C0F4C7A421734301813921B971F6B6E7B4
1F58302FA1254A1FE3C44528AFF1B6638CAF87F553DF1F0A84DC8BBD23B356B7
A1488750A4D98DD7966737111A6B79BEF479A567BAB3764282DA78B388D27A6D
EC10E1B914D4201B9A4B4971ADB498B74F8F86EE5D21DBD34CDD4E03E5A41ADC
0636AFFA3A9031A7D52AD383ADEFECE76669BF76C5EE35D36E883E3362E8151A
38AD6FA6A56560228EF0C0B8703123FB2153DED6B9D4555BE6678F63311F130D
EA693AD05F6FCAAE4BFC1F60C355698E356465F57F984176061723F228A13B73
04F3254E39EC3E810060742A7B748BAD4C7AC5DE779115C57BF3DC3E66A13B29
3409C469920A5E60BE73C36611705DF0DE76780DC2934C4287B17F5613AF6A08
21CF81AA3BD93F1BE08D614D0CAB75DC0396E0802ACCEF1ABA9A1CD9797E0562
5080815C62AA5706D772C8E0F2A3303895C92605AC43CEA7CA7D3C3A6403B9A7
675DC69ED861AA0478A60C98204C5747F1FC0A88D9E1C5058E00713382AA8099
89562C3BE6FA1B3C3155C4C2C9D9B6784C80119CB77D9C30A1FAB83995414E9D
3900926FA8087A61383E01E64D3344B5A6B6E1AF4FB0AB0CE7F517E28F67D1FC
7629636842E7AD3ADC6C73336EEC461C81B8128C629EF0E86EAE03D5EC474E7C
E6AF8E5C9A33F4E490CCF8636921014C5E850C6ACF3DD244C32A9E4618FF40C4
90B27180A053D6567A2F0F53E5FEDB788C961BC74FFAE2E26DC36958C619EE29
BCD29A724AE4024D5B5A6A25612F7378744512C5BB5DB4DE1CA9064368A00D89
E04C07B80303E089204A1ED054FAEB7C41A0858354B42706AECDD9AEA1AABCC7
00A5D6C5B7D1CEBCF30EE34E39143E5676CA9EB5A3147745E7DDE2364F639260
77121FAD39A304CB7BD67738778C600E9F7FFF00B5B895884BFBC020895A26A3
8AE6A350169601AF4CCD120E7C16E6B195372FAE49A9212103B3BC5F55E235A9
0201A826568CF2C21EE1C54D4CE496E97C50334C156FDD2F9219C86854E96B7B
C3A5B87E38409DA085A2924AFA002FA83DD86D63E9FF50B21ACE4ABFBFA159B0
7ED5C93D976CCAD20691B072DA28B696A9284A1DAB3BB85A734B583B3E2E7960
9CAC4A2A0D12DD59CC296BD8D69AE3E4FA2CD789ABE07054E39695AF6B99D5ED
BE2499BF00ECB6C5C0F3CB6F2433FA5BFCB2320F6AD8E6CFB0D2666679C13A65
E1D6872B1873FB09BD48225E110640A81C7C151D784EF671B66930A143948E27
E1F2FA81FE54BE6C57EF8C2B2E460F086265E1AF2573482AFDDA9F1D252FCF3D
CCDCB3A72541318543A028C9C9DCBFE53223D096351D214B3DC904C32A71036D
0A741AC388F04B00DE2653B18C99512BDA16157E02FC97731F1B39A4924822B5
265773A5E86A17A4185EEEC3C4AC7AA8B27CFF05C5E768115C104826CC10BC78
22701F493A3471A97B87D1E05B7A9A4375CEB76B0F1827AD916E268A701EE540
4CF3ADD7D79A33AFD79FA05F287659B8D7B2924AF04D875E139FEBB73B10C153
AA656370D0A0C5489848C5FCEE650ADC55C703E9AB03C4C817DEF45CDE086413
5B202DBF7983071104BEC1B29A1DEA1E99918B82D8BBDB1DCFE65325453720F0
2A01A0A015630066630D8595A47913D246893E3D168283351E1A7D6609D033D8
0A82CC481EAD70AADE0E2676CAC461FE45040B5255F62BD2B6A93C68B79E9026
102990E062B5B058542C45F05748B1A1A133EC7DFFCC255E05EB66D60ABA9EFE
F377E49B7A134356A0994785F9078D1B8B97E8E73F801263DB7DC7EBCDD9B3D8
4D1CD5BE08DB019DB26819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE50BEC9A
4878ED27E515FED0D26FEEE69602B2BD58D145143D2FC60563D081F110CBB181
C03581AE7F5CFB6E2B1E4009215DEEF49B959AE6CB67471140028BDB77F8E0D4
EE0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2CBC6847C10CDE73950A2DBF
81F7C3B10A749A1436FEB673921A195027DB020897E28DA4C2E24AC43738F842
045A04919A108CCF28ADD9B2582CF6C3178700E56D15B63611A51C51B31574B2
FA8A71BA89DC8F6F167C7C0336FFE6DC170CBF5F561E004C322217D2A01680D7
EC23747CA7156E5CE91FBD5F44F0E247D957956045B1613112CCBB7091B33FEE
92536D6EAC29F1F7D265EA9CBFF5415AD85E4004694D39E05F5E2AEE30F76D51
A3CF5FD037153F66F8765090E7AAE59D8053AE0BA8DB3BCB2AC0437FD14A2941
15CB01446379D93A84DA7DDE692830CEEDBB812E26126498DF01A8B4E7DF01CA
E49DE944C25FE5771EAA9AEB426146DBAF38651053E5EAE46AF5F5F19491F679
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80CCF9A71394B4BFA8CED0C416
64DF7B5BBB015C15EA34DB8B90F2ED9FFD88F15A1BAE76C6EEFC79C130434BDB
9F865580E510F180C63CD039D399B1D9C4208BDE9841363695AD2F8B3922A609
7DA81E6A3D4B3F340503E6D9DAF82EBA11D53BEB168DAA474049FA840261F7A8
A976812A938FF436B01AB54EE1CE32BA926E34A8F8C31D8643EF6B051FBBA7EA
E4D5967EC3646F547C1BB5DC530423DD7C44A82B622327EA30ECA42B8CB89314
E8AE0CC7634258E1A49C6B865B75EAA21C02F7007978FF715B59DB48A55F4E05
03D39165A53031425C5E1F37426ADB7B3FFA6D2412BFB5783DB3C0F6D60E34BE
594B65D76CDAE5693B2E8739D9BD57A4D67E09514EB3A1D2DCF490DC1EB5FC03
C43BE397E8115F3A0C322EFE02904D82B3032B82E7C310D4934710441F46312E
AC995D35324DEB1A832126F491688AB4FFC28B25F44AEF8261BB77AFE63D26EF
D97218971819C58624089FE39F416FB3FC681F6312B9BC458258383E94966CDA
9AAB97986B5C9091DCB1F9B280BE8D374A8D48A10B2713DFD32DEABA293EE9A1
77F5C40F7C7768A67B861D5FC2887F1635AACF2785AA6A7EC9D666970F39E1F0
1522BF2FCB6B28C527C32DA580A7A619EA936D0B6239F72579B0E99370DA9C9A
EC6822571F3B782893E1631735FC7FEF8384AEA8C2273268144A010CABC53339
E8CDF172B872311C783A8F2BED76B849B93DD14AC40A4E4226F5ECD3DAEA01CB
2604024F955DC5CE4093E2F1A817C538EA4F64E96C20699C8A54F090F212398D
1FA9D5FF8CBDDFAFCA66543CFB72EEF26CC3F3561B1CA13FDB336BD4F041E9FE
46C75BA73BFF8D88C56FFA843B1EF3AACA3FCEE17C7835239CD82463FB4A243F
8C74C0035ADA5BBCB0E724AFA0F51B8E2EDD6E0ED16D2ACFC90A1ED23A88CF1D
EE3F583DC78DFCE980BD40FB1344156DE7712A41673F44DA2E1E7D41DF6BA988
0AE784071E6B3E2101F0B663DE14DB1ABF8B7951914BF2E9C684E2C80951B24A
AACDF129B2BB843A35322415E37E745F1478DF48659E20919F519EC7B7BED843
F35548CFE3266DB0E088F48DBD44C379EFCF03E929E6C390138AA7A9BE8E9EA7
6D1DED1866D5010782042200B3914DB7477F4ACE3E01C310717FD8D10B05176B
2D990696B3D4677A6D2AED73403C90884F55AF936438B4F0B1E942537CD9A3C0
6DA77812BB4EE9929C9CEE82C265186552E9231CC55FAAC46EDA9984444FC750
9374E11C1651D0A365FAFC66389761F5436DA107749746B5118ED2297F5A7BEA
B0D625692F612266A93EF535C72093AAF178BF91230BFE3F36B8A0F98A0CC800
A501580CAF3478CC65C774E5244912470606D852A39CBBE5E41174596443BF7D
A121B8C73AFB3730AE0710CDBBD49719043C0432C014E7CC244189592FB944D4
03458FF43F071C38FEE3A811F2D67B799250CAF11120873098B5138445288FDB
AA54FF0F25A13DAD43232F7EE4D840B4362172F75AE64ACD2B72602D2A8F76E1
3CA240865F625827B5B14B93CBD317817EDCC1726036E156CDC649D036DA3DFD
DC31F576F64475E62FBF30074B701B39665F4BF41393BBF474A9CFA2EC28FEC1
3422167D2F49D7601A570BEA14B7C813C7EE435E6B39AA70A9F61CCC446F6FD2
D440F8B6F47E9C8E5C2929BDC7EE14F6D868464493DF45E9E560FB40476AD6E7
850D0E405AE6523DC0CBB3604025E1F18331E151718268DE4D626FADFD70DE44
B561BA1BD4626A01C282FEB8B53E2972147D9EBD179E3D9F1452AC0613F8DE36
1C46A55BAE9F54A1BCFE5626C854818C35B88DDEA6D3A49A83886DB260065E42
3B426EFCAD8639CB438AEF68DB0DF2F2FF138364824C7D41C3B93D9A5B6B2091
FB0F74E34F73B119BE0CBCB087ADD6D2804D2B798B301739E51DD451D8071BF1
B58C840313AC91D346479D38E0ECB73664581BA1552F680511B5FE3EA89500B8
23A0FA5A18321056A36750BC67D3CFBBE3A4B914ECDC45179F7225B6871B570E
BE05C9D95D8F947BD7D9F6D539E4754CD2C62F1790F8A442D94ED07F5F983965
896021A6B8466391813B9003AC9B950A22EE900DA9B2A80B9BFC4919F2483E98
68E0D59E613B99092C8C0FCD223E4499C14B7B552BDCEC37E745415462F2538D
A2D71EC332D6C13A8A7B92514B6CD803081AD247BD97FBE97DEC3941BE4A948B
3490EA861BD99423B56C2084510627CA5DA18A0F9447DEAC39141E4A8C8584A3
8E57441EEA00961DD0EDCEE6CE7F6AD035A435017F8EDC6CAB41EA6234C70FF6
EF6CA2A853FE0F76AB1ED5B97A1067B820BDDF5FC2AF9A36305E36C2A2DDC690
256D2085B52886DC399FE1D8CFA559C93999700F1189021D601510F9AC22E36F
01DF05AB58428703B5F8FCF7156859F14E61042D5A147F0A784F0C5A4E1934FB
A251CA55B73D7515D4048EA67AB4E1DD05CDD42DA117D5956FFE7111F53C8D8D
F395CE9A836EFFBC02B41CBE8D589CF50BA27804E8971CA26B393A98569E59FC
7A33A9F31B1198C6D9980B7C21ADAA911578E0CBDBC8FA2043BDEB19CBF070E5
82307367F5F9AC09ACDBCF4AACF533C80A39605C9702070CC252B957DFC1A97D
522C07B0F972DB969DB77637B6E22C2CAFC254B52413A107BF5B596BAF902B8D
63C8A18E045FAB03CDAA01086862BCEF11AF66D26B9A0D11530C6F70C1B6E7AF
8E11BA4798C1DD2EB7D4F9620F1C42678C956D013FB0402EF2F6C3B06EEAFF00
FE2602F07B88E183809095E88840F703E9BF997E8A6666919D00D517CE6D9C2B
C0DE6516B649A4DC292CA2AB1D7823261B7B7EE08A4211AD764B9A8D9CAA0D1D
E3106460BD438275B8B18D8D9B9D2227C7649133EC6A81002AE7A5918BD0EF50
FC3859C0CCD704BF425C64379E8F07D1B21CEAF609047DB5AB1D11EF4A587E56
9A48CB419390489F70CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCBCC365
9E3AC8CA5DF66DDC7933F828D3CF9ABC2827A6200222621DEACC953EB5D4EE5C
195C81DEFFBE1E3A195EBF7787BFAFFD9A066C4CEAE0ED581BC5A9037A4D15F3
200B13F44F655AD6FC40955A3EE68C16EF312027D054C0D88996599333FDAEBA
AB30E04E3C78DAB918F9559C31EBE12912B39338A6BD32CEDD4E8A51C229D309
11AC105F799840538DFC9B186642C1FA978B5AE2733334BB5EC0151CDDBD053D
D22218B8B0B71E60CCC50CDD5C6DE465C7932B3C509D3B02172583CE1449920F
9A073DEE6F9E6A6A1DB9213C2142AEEA0B692ACA1E819ABF89C01007F28C5A80
F4BD3C2C515EB5BE01853F7F1EA8A3815901DA3DF606E424677807FED4146096
85E975670E68DB88850EF4DD9314C0FEA2661CF8688C3D53F22AA0E1A26B1F9A
C6202BEA5AD2C4142CA7D8CB954B8D0C0C2BE2CB8DE317F7C1449E4F6C8AE7D6
7AEE9BE9CD45EA51767A0C5ED8C8CB4191E950DBCCD311A20B14B4177092A52E
3F29539FB7F8E16596FFD4151B332C718B173132660B0ACCF1CA0A25AB10E00E
4D5A8D0C3299FD3777981C789FD4BBE40DF2F03232480D73FE00AF577494DA7A
B6FB78D744C9ABFCD095A12C405F561BD9FBC456DAD7FC9C900C91E6DF15400F
35F789CD093396F0E34A66267EAD315CAA69F4DB314DC26ED5B60252DD152E0A
11AB38A0C98C9BB1216EDA7BC3094324CEA4FD5A9518236B742F3579E050C9FE
A8E1EF4F3252FD330D163CF0F35CAFC0D61E05B8B32000D4F6A0D9B74E591BAD
A348BC61386E71104202FB3F677DC4F398E82228CEB92CE0B5E695D536274984
B73FD1A0039F86E8489003F84951DB86742C3EF61F720CE7F7788599AAF3FF46
CE5AFDA1081D3E544F7F4FE29CE4952D5E50B1AB34F96DB9F031C7920CEC9A16
4C369C237DD28FC4BE2843036E872B2A04C4C2DDD09A780E3211EFB72BC5B2CF
545D57AB4B9C46F8379EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3C5E33BB
337D4E9D38D33E46E3F79F2BC92D811CC6DAB2EA0636869186AA71F0C1ADF3AA
8290123A8B67E6AE0C769A5E8CE27B8C4B6E8B4F056867F1C0B014E2B65B58FF
1D647BA03560E06391BDE9A02514DB9B144641A5B2548D2909144C30A00A6E01
0B4220EBFA66EF79E0BFA03358E9F753AA892BD9A7AD14F509BA49C6320EFB42
1B3B10694FDED4B3EDBE4FE9C3DFFA5E45C08D537491AE24293BE475B6AFA056
DD3F3F525DA26365A2DF7F72CA78CAC785BBDD2D86B42FF91FCE7E06435BB294
0232870251A35518DFB99CA7E44B6E03DABF8ABB73228AB478B849E58ED08010
8F18DB3ECC698AEA11E32B5F743B75E26E66A24209E1E34EAD17A0AC81EA7357
571737966E650CF2D73DBCB019395239FC111EC0ADA17A90C19A43D4206E2B15
F0ADF54FA750FDAF7121246123CFD3141C81FCC5C5305259AEBAF52AA9BCBBA8
C9636E63A0DC0690DCCC7AB8828C02B00920293556311878D421BCC9FFF72437
7740502EC30BB318289197B74B960686FA892002C19B3221F02826617596B585
5B28202F696BF41B341A01D47A5FFCC91ED4B7E13900CB00E970CAAABD5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C377375572C513E842F42BFBD3511F4A
DEB1E990D07CD4D46A5703E09CDA5B195BF1CC49F81022023B083A73BEB9A932
238BE4D2DBFC52FB6837D0AF6FFC27B43A9CFA3F57E9478D3251ACCC0EA722FC
9DCF37794E7186404D252F9A0289664EA62E732C4BD3A421E8F13A717538E21C
8554823E5377C82C08CED9509AF593CBCB7B0B261E24DFD30C40B6D35742A408
FA77154EB77D6F52481690604E0614F792804C8C32AF13165D47FEF1D6AA9194
0F93EB95905F74956D7C9B33DF636E35011FF6D197C9B8FA15F1F8FAC9AAB396
62E6D137560A8363F8D0B481C71ECCBF5D498496818C244467171449C73BABBA
B53F4CDB1197769BEAF49D19F0841D5E8EC7CCEAA4D28DDB3E14935B8CE43228
548E00800DE1B6C627488ECE138724E2C9BDD46FADABA26B5433D34C2AEB0760
31841EA02BD6006B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EC7104EA49C7
DA55875A3CCD94F522EDFCAE0CBDD9C92A04E49DF56331E837562DDFD2B9A20C
64458327A48F3351EE3B21017973B3B0C45734AF5241C5ADA1387512EFB6528D
36CD1DCE4AB6E7671F4276E6CBC2A4EBA4E6ABD17B534BD65EDDA5B466A2B687
F0998FC59BE4B93F43805FE0EB7A4A5B00AB550C451413A237842D91C888C4F7
6414E6C277543D4AA0D04B945257A16BA754214E9256E95A6B429C3E4C9366A0
32CDDA2F0B0340F42BAC73E5382A5F9CD71974101F6C389CABC69B231B033132
6254BFB119C6057DBFC2B0085C818FDDA774EBDBE7A957E1602DE3DA6F20B595
7F6F748928F9156100AF21730FDF1AE10EF475F585B2E615996C11BDC84BD9EA
252474D8F9450FC341D125DA3A11FF534B375CDE3CA6DD714223D35D69FB6BB5
17B593AE025E7DB76E3B3E083DD36D72F6A3B64826CD95F02199EFFCF454A40A
C29D2907B15F8C6AF233C3C2792A42338D892C8E1C2DAB56438F1FBD0E63A5EC
278081506796D4A5CE91258B1C760B7B254B34AE37084F9F621C590DC9F91688
A7F5806B6D1EC164588C020522D7263EAA89B3ABF870834A682AB8809F82277E
FC2083F279926A360E4B995EDD16A401B12A1C0D488AF24BC0B83C2D2429E576
E97C39D2034E884EB9BF9BFA200E8DDCA68FC9E9478D07F4C6EAF1D37D624314
BA2AD28316C66821F40E54E6F57FE832B12306953241F8F05D06EF7BE0D60FD9
96223903C9A02FB433E08EDE786CFC2B617CFE4D6E5B4077B438642E42F89BD4
36AEC67146942DAFE5DDFAD97B5EE4B04E0B479D31CB771B40D48806F82B4B5A
A65A7A9B6E99FED552EEA2F20D725EB5F1A1B135B5E5097E60AFDF729A535E05
1501D8107244C8E2C33EA2B27F97F5F7C5CD526CED2DF28AF1814B5845898D29
7A6A791205A854F67B54A58AC1D5D57F0DEA2E45DFC9822A4CB5B59E51E6B799
03D29C1C63A7964CE23DD2F5563D5AC32CCA4ECB7E39D3C74723A53E54044AA6
A13F05A35BA44A62A5EDC245455943A3DFE5422C5E45E5D0CD32FF862402772B
16F6E7154C570048AD99925459B26B502DCDFF0B2514EEA06C4D3BE4D8D2EFBB
235EFEFC8FE8B2D6281A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF759287C
6F4150C4774423E8C99C28166E5FC3BCE52C13E22A5EE09FF45F2D070A7FF539
1AA9BB2001FF87704706D141BC860829C1FC5AB7FD0E50294C91E426F122286E
F473301DA3F5C5D300555AAC9230CEB38F253DB2EAA39E117FFE2DA4B5BE5CFF
577D6C74AE6F4D4B7A8DB95D4EDA2C386289EBD7CCB6319582D7B0F7571F47A6
67323B2D8E5C8C129AE6DDC88039288277AA477D07BBE7D570327ACED1EA729F
BBF3D9C2829B9FA5A21173244DA052356338CC0F8950392B6C66759DEAAA6C9E
414B784A95EA7DA862DC3D3E6426D42279B1853D20A31C612CB246B36F01C671
0BCC3064B3896E28AE7389D260CF07655CBE427F4C91C807F1A3B23B0DD937C0
CBCED5F160717097C94BDEB5DD87563AEA655AECECCCFAEE257464E2F26DF464
2CD37869BC08F102BA0EA2EBFBC82BDC7DFE1CF990C5349F494200A88FDA22E2
4F5D5F7DF0EE66CD58CE0C9013DAD8E90216B044810A668F1D6928EDE7C4ACB2
916B86943E19CD454468FBB4187C77274565235EB9C1764AD9D987DEA4536807
2750CAD0C9ABC3F4960F03A501C5BB001FF37B292301F1244DBF5A2C79B9B609
CA550922E73CFFBE4201AD7462760440A2317E38B2995775FDCB5F12391781D1
555E66E0D67549FBF0833BDCCAE990AA8B26441324A228BF89C162EB68EA6DB1
574BDA5274485AEC7B63B1A63307494907D3050FC9D556B01E8A90F3893CB2E0
B4C75A713F443B08792A50891CF476483DD8451FE4FF72E37B03CEF0E2DA4C84
2ACF7C33D5F487598CE1C576AC85423EC679AFDA95EF3F0F9657F4161F425FC7
831B3FF7FF114C014E1DA800226FFC3331E33921DA5D3F2E4484D88CEF40CE31
3C8754B85DDB68BD9644EEEC6439D7AD0810B5407E1085B1D510490E597C17BD
16A11DFD7D48F4FE71A6869C42FCF442B648AB6C761AEDE8AA97262EC0173560
C8F5722743E02AC7620BA3B1DE132F1BF1D98869BFDBC9E1DDE716C4A642869B
B77B93F37348E5E9F121810229014271364B9050801D1F3041B13A105DF8C41F
14E954B6395B87FE5AD8CB90B1E0B6FEEE1E3DF06973DBC08C1F72289D2F0DFA
19A971CDE9629C0B16424CF3609285DAEB0115E4AA069D84EC735F63CC8A9041
7E80E396349CCE3D47F08AE65138CD662779BF9273B7F448B79D76EF0ECDF6D9
3AA535986D70C6D02EBA1FD4BF2EC6DCCB7B5F7ABCBA1B4B701FD053FF0F727E
E7A62C4A4C0C8D10A93430C7FD647B873D93D17B5F45A358A7A162679E52850A
292A04BA1ED15A0EBF2C8F288214125072AE15C467502382E801BD0EC484A189
2E79A94AF0B3C21C166DEAFC24FFCC9696E826E8C364FA71301D51FA54830E23
648C1E0DE52FE77D3841B9FD401A469962DF6BE268D3CEC78F0CDCA08E3A714E
15A869A760D44D5B355836833BD1FA7CE1F62ED81160B6A5A4468B2B2585EEEF
01CD882063EAF15D3973445ADC0F6EA36C6DA9CBD276DC4FAACAD5A1706F843E
857C6FC2C1E3CB2BB26E7000AC331BA4ABC5112BA320C636173D5D9EF4C45B08
7BC34E8F14FCED37AB55EB94BED0241E39A771747F79A79D9BFE1996455980D4
0DCF76E7D4AED20EB63AEEF38F8BDB6AEC7B662102EA88663237E82970FC0EC0
32AED2A2FD2D948114EEAEA1F50C497704AD5892D7F2E681EB1EA12AE2DC994A
212900B3DAB9948677AF0CBFD70CD2844F5601EF69F8182D757B66970563255A
4B7C49FD16D8FB2177F2F088D2A4F66A44ED8B88CB1B2544153A1AA8D2DAAD95
397886DFC855A5FC36A7C291A47A69E9C57AB73343F5FD681D5BEAFB5055592F
74B91FD7F78DBAF995F1D86F8EC129FA664F8841713DE784371B9FCE178F9A75
F3504749F3C67582004AB0973A5BD735736D9A2DBC7AFD01B46325492728A57C
D458DF6ED9F8FAF6B0A70F46877976C12C6528BA7622E2E44E7C653774029E70
9393A4F8DDC885E8102ED56EB6794BBB90FBF34BBEAF282A69007BF67B5EBC83
8FC0B5926498262F418310539EA4CFCF5990D005D60E8D0E067E2A3D0BE8B2D3
78E5E3EAAD4EA0CAA974517C1141A7903C924ABA53A4B5C7C390F436CB4C0A1B
56984FEAB4F519600668E48BE0C7A590D6C817424D3C384650DA926F24CFC1AC
7172514CF1F4CC942F4B98E43E8B3D4321C04AE86EF9AAE55767C0809544F529
1CDAA0CE9488C855936EF155DC90A020CEA122A36D71C5FBF0007D6DCB2A974E
04CDD34141696BAE8F8DE78320F88DEA6512A0AC1CC00800832AFE4B841DD774
7062821F3C9F82169E5FE0D613468676A21638730B3AB634985E739DD8E5D987
95FB0A08C894BAF2BF8E26A9102AD655D5D49203B02F840FB06091C8BA03B62C
F71D52FB4D17ED6234C70FF6EF6CA2A853FE0F76AB1ED5B97A1064276E76E333
BF24A5894AA474C9F08EDF66B627B992CC0698D646AC1CBBA7BDD35F637D616C
7003024B08E527812374D2950015F2EACCA793E7888C26EE723E78F3CB3E539B
89DA648B919EB362176B83298EE2D8B405DC651A522C2D87ABEF72CEC76681F8
FF7ABBFF2A12FDAEBB2F12AB5978361D83B9D6C514372866A572B31491F9BD0A
742ED042F0A9F8DD7CBEBE018E1F056476FC098BE08AD2F4571771532737CAC4
FE269D52662BDA70D7019DA708A2A4254B80C17134D2308CDFBC3BF32EBB01BD
6D00B71C87B8BC5CF59F64B790DADE8D58756157053F86F4A129B6D09B560FF4
3A19CAB380E2ACA02B1F4DE659CECD29C31F9E8C66735C59EA38E3BCACCC6F85
A6E451B6D459DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A7E83F5C91D4689F
7553DE7432E5B553BD7AFC2D8E6F339A46E1917DA885DD96133A5CE1A290DBBF
D88AF285A7BBB711D0E9CBD331ECA61B000C13A681B5D7FEFB9C0D8A97CAB9D5
1FA9412407E10C4A4FAF36CD27DA3CB90F384CF8AB617BAB11A3A5EDA03CAC5A
C431C893607DFE852F3BE5F7F9BF42EA170FF2EA98485424B855AAFFF82E47AA
FEDC471ED6488AA685D04243BF460051DA59D4B269BE8AD8FD28A9EF8EEB25F6
A230DC6AB0708EA9048247FBDBA229F6F44316033FEB0A4244F4405709FAE17F
AF63980C768540A8BB14D390F350DA0CEBF7927D5E289AEC1BFB8B6DA74EE3B5
F2D77AAEA3D3241C59C9CE7D6326FD0229D451A1EF4160C90D2A1B932C5284AF
F153351CE0730E2148AD363D40FC75EB3F94FDF3A7307A67F7657E96DC43141F
02009F1C1931DEEE7AB6BE273A084E4E325B88AC132D54A5A908B5F2A32F3896
0F407A2FFA629095B531FC4DBA01FA187DF959E597FD86C9DE4966A66C9F2C85
01A2E9324D5E6F0F1294E1C0AC67EFCDA8EDA5BF150E373526CF55A76CC97FA4
7FFDD7D8913791DD48E3DAEFF4E3760A8B0E1D0641C7768CB7980CB912D457CD
214D05982AE778AEA1330D4DDD264FD3C872308F2C21B7CBDECEDA8B484FD4DA
121C010A40A2D04B35C085CDDB6DE033212209872667423B22D9891D718E11C8
1A7F567B7814B47E09C2B12838DF827ECE6D24315E612F1A0E540B3911A7D284
91883B928672AF8E7F5F27F67C9281DDE7EDA445CEE41C9073FBFB6DB15CED38
94DB7F3E6174779CDF1D7FD2815F9092C346805F08F4653BBBABB95F57397A31
C93330A149C5D9572A20B495FC41E49E8816E1FF70E1F51F027A06DBB5236240
484C56E5567ABD3D9951F55183CA0B9098477F133CEE759D8359A5FA8DA61D2C
C4A2247218EC017302C9A10B8B217BCB06520983CC6741DE803E5B6EB1E7F551
7A86048D4A0645BB84A6B098DCC8D21513741301029A9B2BB7E29428F185FCCF
89BC0778B174A9FB4F5872BE9544ED37FB1E796C29E1E4453B45FEFF5E341613
DF5E22169BD90D12DCD840C0DB82DFEA436DEB4794ACD823CA8A116BDFE44465
D651D2236F883F1F42ECE339B694B19D21A3B201C0AF945259EF364631E8E8DF
511894E8900D786DF564EE95F42A411D26C48562C814D59494554390A5B534FB
16636516C6190C9681EF5494CA7A44222AE28E49BDDDF620002D182AF8045FE3
24CAFE784CB873F37AAC5ED2C00F79A4F0E84F0F996562DA5BB51608D3FEC3C0
1D08BBC8AF9626B1DF061FFD64D5E9727ED81446B1BAEB0D9443060D79DC3EE6
5E742ABA451A2E501EAEE1004CCD483BF1AAD3FAB74C2B69537837A2B70DC090
8DDB4ABFD82D5167D7A4C7C44F78456C84DAF476A00A96343D7C8537A5FCD099
50C59D0B79467CED736D9EE1F82F58620615883B0E589EE3A0E0FAFC9DC93DE1
77F14F02B3C92F57789B62A14E6495133A1B3B110F97D9D17E63E0FDAD510D72
1956F7200EAE8F93ED95AE429D7CCEFD9D9BB24F9FB191508C75C058F8FB6539
9CBCD9C9E557DA75AB3D8F141B95F3251B6DABD584F17C7524786CA53B78C328
DE953F3494CB99CB209FA97A20E05E027918A67FE3E0F8CC792879EBA47B6EF1
6E2C6DA9D1EB5100CE21181170BB05CC2CAF62830C2C50EFD34C4EF05D228D07
CDCF8827EC04177712A79AED14FD6A58590CAD14A92B83EF282429D430CE35AA
150D692C3EA405779F6C395E1CE48D9D7DAC7D581318D98098F86960E14829CA
617A7737256C6A801B16C8ED115437A8EA8CD328F1BA64E9F096EA448EEEC367
52787F85EB045535E44A641FFD86F1A234FDF8ADEB552B7E7E10AA577ED3D559
049144E28A8B6DDDB556D22D3BB579328E4AD9D5C3475D72601CAAC1A9F7E87D
D609A40C735DA40E068D61F2B9B0414B8F0156C0BEDED15F61B43914C6D17D10
38335DFB13DD913ABEE28BFA1EE081811FEA1AE3C2AA46C5AD8DA264298E5767
D6881C64BE717E10AA577ED3D559049143D4EEBFFFE810F076D00710C302B4E5
E8AD40D6C17E325BEE543B7320DE2F49D840FC89CB8AA5D5C034614B31D18FD6
9AB6F539560F9E8D4C9AF6C8BC23B0EF11F37FFCC8BD8C4F0B6AB3CB42D63190
91FB1944279C1BDDA556B74560FE64C1C440D1C866159D8DF1A8F6BC59A16C7B
47B88DEE02EE578910A18CD1827922BF5BB095A776A2C5CB23494F45B1A378C2
334376FB34610D1A4AF71DE347DE8BD4C3C7EF12F4BAEEDA8DD594F9FDD3F038
6FF6545DD7B4C68A3F79464C1D64E30219493B2269A1DE208282ADF04ED5C226
4211DAD907074BE3AB545E4845219DDA8FD87341F337F112E6E649BE407C85D3
D2CFE41C4D4A1F2D1CB9276400AFF35CE170D31F2B166D2A01235AF50043582A
0BB588897DA22D5C20F8A2C7C95CB1E55F731368F373A67893FEE2BCE0512797
88C2BBDD81475211B28D9A614446CEE225D117901D017E0A380089CD031A30A0
F87D7BAF534E49D13772304484CE384526A09DF38B3FC60F78AF509D7B448A0D
A42C5E456AD713694C65D2484218CB438C2B9FB81757802E694B726851A966E9
3490C7ED6E46D8FE97C313D83D481291F7BA24FA33EA39EF3D2AFE9349319358
1479A70FAA733BEA5E0E08468693268E4DF9E0CCAE59FC2A788EDB10196768D0
23D6BD1C2CA79CAD7F0FE9BAF8F71089C3F94FAEE44631388A38FC1B81A193DB
5D59CF092C82E0B5AE1F39CA85BA749C7CB1687ADFFB0B83A7838452A6F18291
0CE6F49D4494A93081D9EDC3E6F33C0CBDFA4AAB1FC2970DA4619E834957CB1C
E9106A9B0A113ACEAE5A638992C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2
BCC86ABE5811DD097EB0065B1E01ABF5E2D8428D248B1B0A1132A8DA2DDE3EEB
17C167E15736CB60DB4FD58B00CE00AF066C2169DF9B3D0654FB87EFBD4C7B75
3F6E88E8423D1E060B20BC8498014FC6AF9154768BA86963E006ADEE6D7A1161
558E0103D69F95627A6E45609919178CD5015D613B637F19614B32D3113FEDDB
8BD432AFA87F26F693CC93AE903B04DC70CEB126E37F9B68DC215D667243EBC8
97ED2C6EAF713011776BC1FCD81EF9A291438D48073CA60ABA155F4A03A5FEC5
A8E14E5A17FF6BA44447C98400B39FB9D00B7880E7DAB1639CA2A26D53F630F1
FCB2560AD582DB153772FA61136A0A5EF8DA1E9300A2D369E9DD9EDE9AC14E4F
D09695BBDBD7994FD7F9A51C6CD3EBCE191B0F1897F45E676D2D16E9493A259D
B7DF7AC21D9B88457317ED0F6CF9FF5A2907997EB82C15C082CC9D5F9EE46468
3A6649D8EBF57C89305D25FC1B1FEF198165415498597436449EE0F9445B4C80
696678204E90FEAFE0A407C7C23BA5F5E684764A0FF3119B626A67B0061808B1
AA8A9F4E87C682601AB378DCEAF01EBA7AE208615F5D00DB8AEDBC8209595969
EB322C601A8D700072E3F5010A9141AAFCE6733B371BF3603FD6C2816137832A
56C48FC89066B9FF63B80A84B36F7F9C83605DD868C8F663872B230E921494B1
29F80EA04146854D9EEB4034FA39274D2EC964B32F3FE6CC7D57F5CE48E4912E
5431C06D2C1CEE39D5413C110EB25E1205995293762A7A83FD2F1415C012F74E
253D45C14DFEED6FF6A9F6A5EB4F570CE4ABE7C8A1852095D045E85DAA4BE53B
26AE30EDCB46ED7952DD4F10F3A2F4EA315404C8E04A5A873CA0A32864F262D4
F64C91525C1DC028495987E737091B05A3BAA49FCAE6E32DC9D1AED22C2EA725
FA6748AF1F586142B2524A8EA76881278EC54549FF754E46BB83E4728E1CF8E4
497211DAE158F2DDB6A860F0624618239067AB0D70008BB2ABCF06E283F5507F
6333B37A975BE804C5563DFC3C67C8166A935E2DFDC5653F8CD834A1E8AB45FF
E334532FFF6EE351252820E234C97E96A5687BD9F33D193276CDAA152C0C5007
91C762581B3E498D5EC423985F63F7BA5EA703122EF3B1696DAF841B6693BB70
A7AC9B290539B172E2F22DC62C9855FEA8779B1D7CD4882F55258C57D4A8367D
82EF814BD97304C3518422CEF3C41D748B5A07A0EA50E3F6C38E0C13FE30AAA0
7C0CAAA57932CCE22798816FAC800F99054B041CD28CED6DA01287AC96E605DC
58670265FC8FA6BD03DD67593CC09B3350E40689A5BA6F5AABF3E70533868D72
0E28A4055091ED6C0F733B035CCAC9A2CAA2829B9E161412B28D4DA44C60ABF5
751A90099A4DAB23C36BE2772C1D183F91D837DAC94609659451F83DAA632524
8CFDD49BC425FD7D7EE5953A40F8BCE27C810BDF9963D15FA4283F9CE523D03C
847131EEF1D6A8C20BB052FDA9FBCEADA2194F7BCF7AAE569CEF156BEC782E44
6B2A3DDB53C4C24F3408C19817F0CA102F52A894B559D265D856CB17517DF95D
8D5E51D994BACE39AC902E200BE756716E15A3F345F395F32CED2CB15B87902E
04E19C09209B93C6D340C9839D58A365195647F6BCB28B5B171265D2C5490FCF
C21CB7024E2D8F4807D027C96D69F024A529E4FDD808777D2040627A5F4BF8E6
14FCBD870B67CBC48B6CC5688CB047EBA45F170F697E22B2A18E87EC2FB4DC73
752C89EA423A179B77342E366773F2D5DEC1FB3C7B344507DF936A19ED319C82
1BE3E8EED5C48B888B802F6C66C3BC6E9D748332D74655C7992458105D1BA286
5A52C5F4D31C4917A92596DABBEB1928532E4F497C5954BC12FA428A10857D35
B49AF5976972FE4E64245ADB6834824495ADAB8157D6F56BFA6DA0DB6915A9C3
21DE19CB262905235EE0AF42A48690647B2E835E7ACF892DCBAD677F212328EE
F599B0A35E042269A9C4C3F2ADA2D1985C85211AFD2D810F5768CA47F9728AD6
8E52B5971389DB71AA4AB9CB38D2E9F15FCDAB2E629D25F75FB061D828F2BFB0
6CA814AD93DB76476C5578E5CCB30BB1D7D4129D8AE131229F406CBB99DCDE2D
9507407BC016D0B0CD2F795D0464C9E334DEC573E61A9B752E8869F9F4011DC7
021D34FDAE0D6951F120944F679A2F9A3E46D77F396BFC9DE708C2AFB5967FDE
32BC77530DC353B3CCEDE3119B91A719719C6D317FF562DD096DD0A3EFC494E5
B642D674172BF8F3E5E75E2890C12B6AAEBA7855CD28A4884E0C99A95F819AEC
23F177F11CD02925F54CEDE04FA10D9B7516803EFD9070DFB5F96B80FD7FE20D
1FD09789F7C7007E6B1AF5A8F5EF2CD04A4EECA469B2A6246AE685A6044D3A9C
EBEDEA5A8D3E4AA152E5432BC2A3E320AECFCD68551094D1001C6D1A75CD0EA2
2D849D589FBD71A844C34793F87E35A363E14DE497CD19B91CB92E669C8751A1
D3C5C417DE391A82F969C55DE88DA79354B160AF878383043DB5A9012127E4C3
22040F87EA6AC9F60265222606BBA53965AE74AFE4077461CE13614CF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91CF9303D9A09D90460D4094163FF9D5B9B8328B7D716708A5B
C5AC3BAB6258E19FA15BABC01C842507B425F413F5CD32933AF5DF44D51787BA
9027C34FFCF0EAE1840E691E7082F8BB15A4E9B2BEFACF92CB46E229D1C0201E
E1258C35478E5DDA1B9710CBFA65D1C788E29BEA16B3FD2201250686F02CFBFA
121208FB74F6FBEB770091BFE8FCE0D7FDD0B632A343B6E38A279C2993F343F4
8465CE9DC9E8C156E559FB50C47152D1F35FCEBC5FFF400BFCC336001F8F863B
26115CF5F0CD1789FE566B01F668423A7E374D082D8E0C1181013A82551989F9
0DA6EF9FF06FCCDC760F21283DA5D165F10CC2B8F46D9CEBA0C03EC78BD0FA36

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F4243F63B1C1767A866F1F9B4B27B64CB3D44108486
E4550EC5C68153E7DC46ACFFC6C3CA7EDF84E81C7704100482EC15E4BF7FA46C
8D7CDB53136660494D2E9949A49AAE6BCC2E319ED9D5E2D6D224D301DE616EF4
75FADF08E27FF18CFA86C9A98FB9DB608D0760FCBF45DD8C31559C8B61790857
547C6FCBB35A79610367CE47D1EC0E12B5AF108B0A14AC3F8338E1910099477D
1CE91DB81A77C19C9BDB4426F2E6E52F6410BD76E446CB16D2C86996B95C59BA
14D36EEC6BE9DA05496091895880E3964BD3201977FE9C4724F18937391C3E47
F5E0B28AF6259E183CE31B0AB03A0FFF290FB10359EF6B59B669723240EF474A
AAC6D3B450D864B6B348DDBD788C4AD71CF90F39E1D225BC2CCD303A5DF0182B
DAAB61673AF9EFCF4289AD9BC9BB2ABD70E577990193AA89D277C341427D0A41
07DD5D6B4AA14C7EE68BF805D039CAED3E67C5554AF6DFCA625D5253D4AD8C12
397770CE7ED0967E6AECDE8EFC332AFDCA6E9481C2FF9BAE09B0455F73F94825
20AAA4AE05FA237BDBAAB9696E5753A18E4CAC6FED9AFA7459BA8F445251F6DA
9036F9DF1448645743C70661F7F3BE9D016CFAF756DE65E4B95327928767E576
78CACB1BE5D65FF5576226568D05ECC5B7ABF62D772FB4DFD9223251210E0C4B
EEFA8FDEC2C829EC6A2E0D9DFBDC28DEB481D305165D6F1C34F50E447BDEDFA6
5ACD9ADE32B093F5D533C0090551C1616F8411228413D50C4E6B719588E61ADA
CDCE2CA7DDEF84D0EC4AEEE034E9C8A35655F3C4B34BB11F6298661BB371BA0B
A4C3FC5B8B10AC5362EFE6A4271F2B6A98BCC944634407025ADD94489BCBE0D1
B74F8D5C7B44A10D44BF63153E8EDD8BD7A5C64D66319AE0C7A00D9FFB2ACD05
A3ED43457146464C1997DCC8EB65845ACB37DBDBD6BD0635AE67E6496C1639A5
610D15FFD651F751BA6360EE27045DBF8957E52879E3A37A9C25015329C02D15
43C52F4AEAC9E6C8A485263C91643ADA897237CF0CB64A88781A9CE2F4F1732E
173BDD0A4632BB58FF629922B6F6EDA54E9671B1728E03C40BA7593334F55966
0046A195B82FFAEF136EDF0C5A44BD1E7AAA8C02B44504A95F994D1B88152FC4
6050A7101D682076D1E373425DA6C4EB0643E0B33EC5DB4B23BB2CC1CE0D98BE
749F53E7886205E05C408A99A60E1942CE57BDC55E0026171F769DB1C733B72E
ABE68DF8E98A4B3C055C014816FE56D45E36577B473E66E9842912408F28ED36
A9D9526BC4F01A9FB6853A73B1C9887FB433B288D017360AB55C071851AEFDC9
EEB7D768E432877F797AA52BEA9B6C0F8AD521EC8FF4A958ED232D3F24C4832B
5C973477A19FD191406A78CD3F9152680483B656E0D4BB397EF1F038FC0D8FF4
C42B9B24ED86DC8FFBEBBB7BE713AE0EC4CDD1694511EB6BE8A7D4F6C74B25AF
0ED3ABA819494EDE83DE7359DE62D72CAB0B087411DC441C8CF0C5BBC13DA872
A27A53B8E7CD2D28743FEAF5E51AF9DF6CC80C41EF9B8D693DCB7C47C937209B
3DDB4F9FB62A45FE457969D442CFBA053C4C67953F8CF7CC8F72E7251E420B33
EE06DFED834B97831178B7ABD7C5AFC8D647785A5AE5E5598876617291AF138F
4A5425BA08ADAEB1440B3B568D91EE48E3CFD1EA6FE00116D26F4D513C87F476
D6853BDE7FC7192010243D6E0E5BAC7E61873E5A8A9FAF09C0AA940086A549BD
76E9CF765D19EC70A162CCEE3454119A6512F5B7412166597000493EDE9CE6D0
9C8F243C6247E27B9ECCAA4EFE9611C05AE70235612BB1928C510479216E043A
5F537F8541EE331F8F57926C9A32FA5A7BA61B93752B47C5DB0A611D0AACF528
2799D9DCF12475CD52398533561D40BD94067D16624B76F586D52B660ECEFD7E
B63DF776B2E143A3E1B3FBBFE1880D86282EC0DA56D3B6D89874EB6571BE5349
96690B767F8381AD88FE1DBC74281C769818BC77B9080A83F0CB2A220A0442C5
FCC4ECBCDCBB64A4451641AD2AB358C6AD89540FAE321E0B8D7E8ED798B6186A
8261CB48B28CD6175C12E01BDE7D040E55351993731C407B58686744F8EA3026
552A3569E76026D3F07D3BDB8681884D682DF12742A45AF3121F91436751F3DC
D225E815DBC4B2F537EFB65425048D25FC01C7E45F346AF30AAB36136FA42332
0496B4EABD2EC310EC2D25FA89AE548EFD99CC2F845586E3E2EC973FCC45EBED
BCD840616EFF7E3E58301922FE78A7588200D9513F04028598FB33D18868F9D5
F3EAD85CF187320A4638FF0C70B238E6CE76751926CC0D94F0FDDA1F10794BC6
8DA19D48F3091936FC174F7B1A9050E301A2BFFA25A2B7EE5B23115D1DF49F51
2CEFB665512DF5DBCFFEFF3586D967CFF976202EFE2A3CC54F7443DF73702A5A
D273ED6F5395CDEDC9DE470E80D702C6F4311A7C76B0E7A966D613D2097F3886
F3E90C15318A0087EE52535EEF301B4E04AF7E97A66FBBA002116BC63D2B6BC1
AB9ACA7A932021B0C48C243EEEB2B6E811A56D2C4995C1F98B625DA1DCF31DCA
CD939F06C990DB7CF54FF2DAE101CCDE69379236C303FCB1BD88CAD9A3583297
412E5DC853346A2524335BEDCA9493FD95DA7A588BF06316219F71E1109EC7BB
E8E5B7128CB33E2E290DCE116BFDFEB005E8ED1A4F908069A22965628DE6F260
050DDBC3ED5CD5F19E9A4E4AACAE75A8D5C5EFEDA906302691610C5104384E06
4148DCFA1972D9BFE9EF8D16A24F3543EECA8A10DFCA242EB0E48F68565FC891
DFE422045F45A358A714885A2D4AD79A711D7B7C1D954DCC3EF117A776A65F8A
A1BCAC12E04031B23A2F2A7F9080E5CE51B3D9AFC070BF9FA7C274856F321D31
12CE4555B0AD7D21183A764CBF4A6FB6A4A432655687EB1CCD56361126614114
3E0C7DA849C6FADAED2E6C562B3899EC11441680A7B3D5E56AE2D46279B632E0
009FF02DA2954B7E840F15237C8D4A00CA919356833ACB44B041D7EB29AEB73D
D3028108BDB431E6C0BDDBA40C6F902001D51F9B829BD7ABAA4D5272051E222C
95BB2FD0AB5A80E3DE0D2332FFC049EADBC21FADC14B09565E78DF512C8913B3
D933EFE4A747DB96A30A837249B404651132EAC5508329D8E36B05BAB68BBB93
0666F6047CBD3AD8A82501E61FB3D9887BF029A1CE992995CDBC1B08C048E651
2AB14ED01BD34483D2A6DF98443EF7671DC73274D85893357B38DDFA1E182BAD
4700020D3EFEF12D8840139B39D83F59306B3F1AE978221B712261BCB329931D
2FBE375AD3520E0C0082DED22174091548FC31B91A77AADC8BA2577F866D0CF4
23C5091CABB13C017E0B418A1DCC512D27B64397A39E769DF23C1D07320BAF56
ADA55DBE1DC5A5A11106EA621DA3D1F080FFADA2620F0858DF1F5AE6A48994D7
7C942FB9D07442C08912704F36052A57978DE4968B48509B7527CC17606702C6
3030F4241E990967573F31A8DDE4AE47056B94941E0DF083952822EA831BF9A9
7E125FB0B933E18D5A685C118DE26D1A1F383AE79111DA28E85EF222ABEEC3A4
B78F07E2A2BE8619201CA5303FB84612783E0060C6E83301D29A7A24D35CD9F0
49F8DCE6CD2BF4E9C8B2E43E1366CC4DEB19617ACD003D639F7422F2BE70DAC8
B50BD9EDFD78379764929B7C8BBDA5E8C9DC8572E02CBF8265A12AC0DF359384
2E65422C4217A869712ADB0CD69F49A4760EACCDFF07DD5E3B0F8DFFCADADCD3
3ACA7C5B5D679B51E501B78F944BD79E2348DFFDBD81D411D5DEE36FF6E73501
9D769DE92D291DEB3EABE6CF2A163A1E08D35FB2ED5AC7EEB380C2BEC0160C37
2CAE485A28274F6C8083978DF4CDB5E7DFF1B79F5C06311A5C0962BAB12D2476
C4232D84E5C25E8ADF8D28A49892043A64BFFE00CE0EF990473B5A1B7D98FE70
B87EF46C36AA3C6FA8CB832173D3A6AC08EE30A22504FE9F56552FD89EF4D2B4
C29320BA09919EE339E5731F1FBE4574C4DB02F105B8C8C64BF03EBD8610E740
9105E67F1BBCF71EADA686DF87BCB5322DA46C2A755BB73384ECF3922DD3D989
B94E9A243F79F1B886537BAB818AA4D61EF718F7BC99525C8B770108F1687585
019CBAB89C915D7B13AC9EE56D4A1E2CD9BE4BEC52A01EB0F494B5F7C039A4CE
1A449E746B12A1FFAE9F014F1200C5F1321229F3BE2794D0661E5F9D8442BB54
774272839A4469119A8DAAD3E249907E2F38A6C5D40DDF61A1F3A1D7936A7F8E
727C00AD908A4A59BC62DD9ECACD08101DF7A85A22914A55F98B06B4EE825B6D
18AC57AF891842129759E60AE9352BB07E55B42317FF7273B7770548613E4D96
B199D8ABEE6C0348EF05CBF87C48030B977D3224B8C5A9D82842906FA610639F
6FCD94AD4D91662A6356ED6E6F39C7A949B55F8883AEEC5F98B0DECC287A203D
560DB5EEDD3635AC4DC094C1564E2626692FB08D89EAC9A1CADDA28F3E96D226
94C85BF481728207D63DEB6D1AA12BF6F4746A59A369711DBC4B1271E71D06A9
84345EFB4076E52EDE82ECFB9C0005A1729A2C3E2926B83C9556699142B1EE4C
A9DAF40D2D9DCCA14F817CF843919023AB5BAF06EA4A33CA4A66EECA5E6D98AA
5501784100131385CC58FD6B98DE83B0BFAD48E4E05905A703790EA996077102
6F5DFCA01AD1E5958D4751B24F90FC84C91DE2CDE6E249836DECE6465AD08209
CD35919CE72BF57735B81B9F17916C556FBBCD0B2135931A26F6B59A06BF8FFA
CEE64F93C83440A5FBC83EFC9340A068F7B8BF15F8BFDE7B0BD033AD04799EB9
F197551AE3B3BE0D21C707C974512E9DCCCBAC8F6AAFDC84DCDBC434F0D86D4A
0842E9D70A9E0CABB502081544623784A2CB25C55805387929465DE2DDAEB22A
B3A972ECA2E73D8A3DECC18F36266DD6109764F8896794B910CBD3700C0A3948
7DA1F78C4F2AB011FFF578AC387546406292B7E4D52125B7CAC83536748C162B
0D7B9BEFD79E3A8D3DA6688F559C2AC693FF5B6E516D3362BB1C6509DB41A358
C0D58829E5DEA62CBC38ACDAA0A9AC3BE09EB5C9A39F4D72FA5EB8F5186F1C31
E3C6BD8EBB7F05F13957A5C6FC836B17DF5EEAAAA3E4219CBD4457D0EF8C30FE
A26651ACB0F368A8F79A06D5311310F4BF15CC5EEADEEFA90991AC7BCCBB7DCF
1A1CD15F64847BEBD43BC845BD65665AE8BC815542F44EC6986A6C7C049F31B7
7392DD3669E07105AD2F40F99625E07D04DCB0240832
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DFF00179C41CDD34E7015DD7198AD6EBD2BC01221F7E35F8662AEF8B6203C54
59E883141A505B275EE1333E6958254B6D96C9E54D47A12F4D299F67168AF7E6
1F19056BD1DEB7FE32A4F4E62D202CE86DDB34598B8CAED5B6DA81A6C816C747
568DD57D21AC8F8B1CD8B2BE97272017FC8176FB0988076E76EC6E8B4CA921C1
AAFC0EC3E24C38BF6D64E9C259ACF279C3272383D7526CEE1C178B1C6988F963
BB0D7534D41E675EF1BA59AA153AEFA7AA88C44F92801FAC61A4EFA2911B55BD
7DF444571A774CFABE590CD7C75BBE8B58EDC3A2C53FE35CC6B22EDC09857DBE
3019A7C60107821040CB0824EE588C4973D9A0D51FAE6E5FC9F82277403C5DCE
FC2C316D499F60E7C6C04DE9C117345C4E51748D3A5C5167780590DD9E188017
79FBC3307C0BB8A5784518676D62FF024E380036EC605313952366F3C351EFC4
33256002C59C39260DF18DDAB0BA5A40946D550B7831A2EE2670B2FC5DF8A50E
6F0C48860C52FEEFAA70B5953345568F1DA030BEF5C410DCA1D11F770EBC2E64
1196A40F44A2BD2529610091D8A9F09161A41BAC6A15727CE914A1009B2517FA
41ACD230B1E0CE76E289C42EAB07B0F60452B537A69B9EB54A68FDED4456122D
483AE830BE0C173A0D256118B0867DA2ACFA39F9F6EF1D81C607DDC242707D6B
53ED198367C7D54AC750A007498FA31E27B0F86C6D3AA81060727EDD60506506
EDE0AF44190FD947C4B9D41C4A6A03DF807F98C68F883721E6E7E6383207B054
006A409855639AB72C071CA7DBDA97D6000031341B9DF942E732F5332C61623F
AEA9CABAD9EBC22A55727BF40CAB44696D80CF4535A74576AA51C2086D8E71C3
4694CF2C4CD167F58BD2BC3015B5E9E22E47F1B4F33641BF53F82CD8E6D7EAD8
4B4B41F5D612653E3CE63C5F1C17D7739FEE56260D0D7AC778EC22A4FFE4E1A1
56DDF0127E2C87A8AD82DEE1B8090C9F567438C6CC6F9A9024949B47ED2EAF15
2F6F7F6D65B53C5EB5611852AFD27654A467FF3CA388E840184DD63D487C130D
8C59F8E6BC0A3D6A21AA60543F3470B82919E014251C3C2EB411F1DFD619D6F7
2BECD582160DF691CF265A4ED6A5B90EB70E2BB7C7C23B7B83DD252E46ECF60E
FFA06545EFC162942911B3230B8D462CB20900BA1DF90BED14A3164DA8B2883B
0B2CA52A8B48F33FF5153CCD63701C3C4909B75D5369025324B818204AD84401
2346CA7C8EBF4325EC599D755882E751A70A0EA8471040EE4E7B14727B086F27
E43E6E3EA6EF0DE68E1F646A51C66694B87FE408D52ABC831EDE8F5F1DDDA31A
87F742D872AE90EA4AE7BA3359AC2FDFF19FDF6DCFBF5AE04BEE398F16E09681
886CD627610737CB42966EA3FA2B7AB0E97B3290EDAED775EAB0D7D553F222A3
B01D18896F7C0BB5793B266B83FE8D6970C6DF9DB4946FCC6A48F4A7A4DF51BF
0EFB57472C5FCB1195C608C43B811DEBAF2573482AFDDA9F1D252FCF3DCCDCB3
A7254134186256FD8086D05B4D5C88D88BEC3ED1305354BD3093BEFC7C7667A5
8DE4AB7B8519C0DF7B5A381FF8E1C1630957F9540EC304140C4E1569529D4333
36951DE4EE9BAAA0025B2EAAEA5F3111D898979125D2AC348ECA164E3BDB5752
ACF12F16A5BE9A050B0DE704CD8EE4010F3AFF1C1D939E2B603A03E917000E98
03BBF7BBDAAEF0CB19B70861AACADC529A2B37845C5DD5660382C6C0E28E9AB2
3FE483B45C38C36D8EC170B82BC1471F59C8EF9AF423C2B9D07AFBC9394BA931
CCE81E77B0D858FFB2A0ACEC454312EC1DCE08F417F33043900232407BD79E48
47F7E33662A718F59641EED914E347D87F942815288234D8A66AC0A17AFEF783
0896B2536E30A5E1758B293E6B721A13DCA21512CEDA044F32E8B794E5C27EC5
AA845072ADF11FB8B9FCE68B86E1F42DF06C8C3B0209EA4903C10D598937DE19
43C3BF34DAE0370280ED092373C4BB5D5E33BD9913253527B52187FBE2AABD92
72349E4C037061F44EFD734AE04EE640275953E222C1AB7FD8AFB2C629CD2B05
12E1788A849978622CDD235325B07090D8770796F7E1B46654FA39B6E9E00B01
FAD7705D8DC604634225C5915DEF943C83C61E38D8291F5649AA86BBEC109701
5893E2518287ADF862FA731D18CF33BBF61F01565E3C825B0D6146C3B549BF2C
28599EB66F071FFCE3410C547A9B74D21730C5C14796A19EF175214EB32A5FC9
6F88FDB8F030E4F4D64B007D7DEB8854FDFCAF09575BF519FC93753332AC4644
690024FD13CDE6D313A06587E6329F6CC3FF5887EC376737D9648BDE5AF9F5E9
12FE02AA7158BCAD2ED2787595D81BC7EEB571CF559090A230BA564503FFB362
F8485896191BE975E5791869162F1B7D62625512150439080FB47F44979B7713
3B3038B71477715A00DD0FF50F7A508EF9B24E26424B1E91373F67E464D8057C
5EF17F1C3EB72CAEBA74FF65DF0E53D42DAF400AA41C55881CED39A6EAD01854
DC00759544C94107DA1B4A6EE178FE71B207D088EE8EEEE27BEEA5713D78F437
DAE50160FAC28C1C21FCF83DE1B068F4EA110AB03B0C896B05D2E06F3512C764
B686FB513091A8F7BBACAF0CDB9B68E1561371E8F78898E721F2D97CCF14E0EA
440A74DBD51ABBEE7629C98D586F55A099E24B9E47DBDF449974F4BF9DA358EB
CD3125FEECD3AA4E5800D626CC47D247CC610668FF164EFBF2FAB08962CE007D
0933ECF029B26AE0383C3DEF69C787AEAE40C86DC4B5985B84A35ECF5F72BC11
EC5133020BE851291CB10E58A558D6440E61F72C3299698BD64C754711D99A68
E296DD3E74E0DF56E079235A8B3CCD3ACE5E151E7BE06A82A194C7BD042EE90B
6808E242689FE1217FAC6ABF3636ED201011F687AA6A1FA145D82FF25F1E67BC
40979F9B86E0222012DCA626F8A2147CC79F29BB1232A872ED519283A94B4B5C
53088DCDF88951BEE2F5C77A7220FD0E0E33955350C8B54E142451A146811977
304D8551EA5D5B43FD74F3CDA70053F59A816531D1983A33A1CAE23796DF4BFD
E65F0A787FE094AD9DDEF9A9A339D0EDE90B2FC30FF1DCAE9BF86FD2DC770443
807638D11534A2588BE7E2A7D96F6C7CF45FCB17040AAD4A686AD5F5776E32E5
C129BFF10F485B8221483C2AD47B0ACA1BF7DC7C7E2C5EB5F68377A82ECF178C
FC51F75D4815BBF76AE0E639B048A38D0D6B9C0C7CE81C66030F183313C9B8DF
CB2AEC3B072A52D0AD3D4BCED50924B9FD409ACA233C082BC703ED67F8956F3C
757799D61A801701C34CE2B01B4C39C37DE56BA2662E21344E73C74148C1EFC9
2D47B30BF10D01299C451CE6DB3C8E9EED4DDD03EC7F2CB4308976ACBAF5037E
C19191219B28B56B22AB4FABB4CAE2E44AABAAE30F105376C3964BF75AB5BE76
33110DFA2EBAA4303C4F4992D05A21F628B7901829DD8727C72A21E60A61A014
02B7ACCC86DB1731F1F1240F7D6AF39BBEBE2E4AC9E2B9D116034191A1A804EA
935EF447972AC31EE36F887D0CF61A575444B31180850172135F49B08CEE0ECA
2F070C601E09DA0B9690C4E3D619F63DAE2A782AD53550CFF43B4DAC2BD3A84C
1A663BBF1E7DED373D5F1AD84FC79DE23E2BA52D8EE1B1D3F8031887C2FFEC30
19C77E70F4D2F5C6D7F44664C00B6ED737598DC827204956D533E0A0670D60CB
D73D1E1B9865CC77628A339997D35387DBE2CA7CDD580C06A7DCD556D236FED5
8998C2ED6B93CF62F8E991B754899CE46B900EF1DF6700D6A10203D03263B1C2
8B26EADB953ED292A732C09F6E21CCB01746D41D1EC44BE55DF5BBD8D6B0F995
907A3F00E21C72DC6C55F36DB35C15D5A480A1C9B106373503BF86D1B7DDE8B8
CF683227F8217212BEC21B21293A5DB3AC79055A14E1A2AB1902F879F1361AF8
C72DB6C585BD959FF8D0CB69DC465F32137D1B4A8F90B14440FED7E0558C96A7
E0F31A48B1DD6F27D321F6F925E13D7F64103E2A76CFFBC91DEBC2DD56E244F7
1424AC1383F7C36EB303FEBB2C20AB71FBBB922EB64626FAAAA9DB4DBBD3EC59
5A29BF660674457A70F9DE40609B822F2C9362414E03C630CA6F8225F6159C5E
AF6D02B1B53941ADCC6C283EE3E5846EC08A76EA5C201D9F9939BD4822B69A8E
CA52A0C3D37CAB4DB8AF57358071159ABA83504664F9F6AD78153CEFE299EE74
597B731803732D18A9B4687989E55BAAA158678817EEA4D4BC409CC94D3224E7
5B5764B9DFAA97EA454B7FA5E0008109FAF5273613D3368B9DCD15C20059F4AE
94766BE6B3A8DB9C099B73ACAAF2F2106069D58578B215A960603072616F29E7
208C0082C50185450C6BF6C94254D23AA87200828B2E085A16B4BB005B30C161
4AEAA2AEC739ED67EFC7F9128A17CD447047E6DBADB7AE9A7B205FC0B9A71A1D
06D2FA9ED0B02168B32F6CC0FE765F2AFDB1A4BBBF3C3B3194AABFEA61341C59
B612180E4E1C757DF26B0FAE953B015680FADAFADAD02FCE8211CA27869B4F1D
5A66BD297F621C92AA4FF0DBA776F5D2EDEE6444CEBDE8CDCEAF38C0BC9E406A
35F44C6B412ABEC733613BC8EC9D3FFB2658CFA615819B889A7655CA63B822AC
4C0C274A29EE2FC01C25913BC44D69B3AF2FE2CDB6BD6A50BC229E49B5D231FE
5E26BAC879B6A7E1A6BEA792B611D3EFD92B56C3AA4FCE302713F2D03E73FC22
FB1B961B7E2ADA50A6FA842125360BF3DC1144957CE058C7A9773E81099DA63D
302CBCBD80B08416BA3FBA00C42E2915B3AD6B7AC4296BCDC0A486CF3889AF5E
DB31EC2652D6E261876517087F5F9DC47F34D796FA5A2DAEE1C2B993E2DE87AA
82D1518A3B771909F986707330ECBB978C088F44633DD9300AF8199E65F42D70
98AC8A89D3B772221192E4238E710F1452B1FFFE0A6A33736CA5A0A7A75023BD
9BFDD0C941BC0724BE982D6AE5E796ADCE781F1F866CC356BFB3FC71126134C8
2BC2BE6F136D0439FF5B2585A53C7CB0D8FA7E1E4350DCA843AA863071A7B867
15E2BF7BADF84102F52CB217DB07076D4391E99DF321D0D871A37C34F9D0EDE6
7900498C2F9834799128DF2B034852C673ECC2D5531FAC324403D3BCA11817C9
D15012E0BE84E19441FC6EFC90C3B358537D4D860FB53A39AA12B1CFFCCB62FA
5375F0A76E882D111EEAD049F250DB2800B470F6927E9A1F80F97B5B0D1A5537
2FE6709B59AC41BD4E25673E1470B03CEB7FD7ADB4D72671135435609A235501
E1024F08910F452C7FD271C1B9BACA52194DCABDB4284F4BE73AC879E1396404
9E20BC606DE3024A5DBD396F2E9E0C89D3DBE624E72E3AD8F47C1D8468D42374
42FE1AA67FDD6C18C08A283861D5CE115E38AE2884231EBFD303386DEE42A4F1
FDF566CE2D15EB3191C4BAF4825F0DB371066A485F3B1D0C21299E38A93996A0
EB7A3357E891DBACF9D3677B4963D4005838679F44F925F924FC94865ED3571B
8D41E4680A8FCC063278A87F78062708C1E51A1518D2DB628C3C99D0EBAC0F00
17D917875BD4F183D7C20766D3626CD8D71DCD638A3E49FFCA7473C36055A310
1223949B0179CF7DE6B550657C91BF3116EE79D5476CEA7DEA7A0559301281C6
E62388AEADBEBE941D5D6182BAFFE585B2474643F58C3BBB894CA3DA52D54D2F
E83482DBF08A43A5DDBC57E1F272813DF7B7BA6C66C775876F5A6555C04D0A86
619FA46249868CE8429DD1D594C19E66F93DBC8E9CA5E86793FA37889936F823
DB4F28459049C09AD75A27D5D356DEDABEBD4D7006A2634949B9AA26C0FA6F87
42178B15884E33D4CE17497C2394F652B869142FE488F9EA5CFF30111D6400AC
3CDD3865399252B73F1E4CDD4912B3995A7DB9B4C56C828F8EC13A40E6D6832E
5BEB7383E249556A7D03753BA53A79CD8C2519425956BA861357256AE8242141
83D73D794F721E1FE9DDDE60530ACBFD53EE23242B4CC75114C0102FFA584F7D
CAE9619544FE8CBD926AB84D5AAFEF3556399E55431072462370676C2560F4D7
BFDAF2A5151635E99322E3202777329340EC29A507160F290BE4013A39CC9307
DBF004F6D8D8A7CAEC0973D9BCAE62AD64496A84BF17140E56B942C3780BD59A
F904793D9EDE9399E5B127D646FAB0A8612DCA1CC8DA7A3AFF94554D08F54200
A21BEAEE003B83CC929683EA64FF9B34C9A7FC4713C309364EC95DE29F6D6E1F
E8C348E0F99A5F10B4FD088BD3BE37C6200E44974C097DE0CF39199F5AC85C1B
43EB9623DB369D2E0217DE72D65B0B03B8A4445799658F955BF73F38B67E1FDD
63579EE3AA4C2FC0B3B7D78A82D9D6D54932D5495476440B9864E747A1F68EA4
47E70EC4C7F0956A5909692CF258F8A6D0BDF123D9A5930533FFBFA7D3873F8A
CB0692B310ACA0D9C4D46E7494F86F8C3939211D916712A414BB10FACF680815
C8EE61B7BF4ECF255178D2D2C4B7F7857E7F5574B71CD51FD579661F3E2FAA54
D811386573C91A0671863CBF4BF55DA4FFB033321740F4B82C9E1D604056A76C
1250788DB113A3E347B57978DBC344FF1C817A7836AD798F72DE13BF53666948
ED6D06A26DA57159B87DF03876B40AB94318A5836D68D560A7D49F1DE0E1B857
F2A403F69FAF8462DB98C784359F28895ACA2468C31918DEF31421A7C67A2462
C77EC0ED1ED7B6548E29F5307474F9E1D0BB099EFB09CE77805AE66225540A65
8A9CA19D09F8F765FD970E1F82C2659A38F8F63251495D697C3E0DD0D94E943A
CCCD35893686E88F8F127DE4EA963E208022C78D33BACD0F4D7464425A147210
602FC06FF2D9809FBA400A7FE6EE1551AFF52F20E24FAF645634CC61A3954A99
32700C0D7D36755706C2751B3FA5FD95D94EAA2BAB8ABEDEF76AD7F14CB416CC
957E016A4C72A6A3AC12F2ADE6B0BCF0115B22E5DC4AC9B7F548EC241A295E57
49122E8FB0D17159B13C71A7CFF6F63E1B427EA99D26FB175658468CD6ECA301
D7DF996E76C827664C51A6A89C73A170572C5DFCC89C2AC26815E0BCCFFA46D8
51BE2A70B27C106BD04ECF97530EE4658257D71504A1F55AC26F1727A525F170
429ECDA186071464EE07EE97A667E7EAA7A5C7B9BA998A3AF778BC7E1EA555A3
A3ED0CC1695D85DB4B8EB762BDA2CCDA2F5E5ADA62706D4C6872041939F7243D
600CF7EE179BBD3BA15C58FC47365B5D56E1B32CE919AF44BC79A3AA8FDF6118
345B2AE1EAAC832054887EB177D6B8693292B7536D473F9756CC9715A2ECCB35
B69369C888AA39917CDDB8858606089A77732BC018EDE986D00D3F68C0CBC505
21346A87A21B92AF221D3C1A3F922161EFE92BBED696A77FA249F7FA93902B56
E3D30B195E00D83250BCB311128B7FEF549E244B200B2C30952A4DD9221DE09A
77B967058F3864350F0D3B03BB4ACFE6940A2A8ADC1CC2AE21BE2B99735B8D86
3187169DC6ECDB5EB835DF7B000BBAB0B84DC682466EC3FD4E828D323882FB90
B91DE0892143A3166E8A2CA33DB4E4F368D5CD221D0EA7E1022CA012CE976014
704BC1700E8AC2E1EE384B0F6907DA0232BF5153AD67DB41E55576D0F5393DAF
1D8A790FFF331CA9E4C9DEC0781ACD87EF2E5BD3598EC528909B24430C00CEFE
0191DE1C5BBB8ED3011D4E2E1A18B3FA3821FC62C3CBC823148022EBE619598C
6FB61C68169211790027B87A0F057BD2FCE2474FE577198E0892BA1FAD0244E7
A83AE34AEA080323265EB13FC896A9733CBD9F87A2FBC724621FCCAAD7D56467
42761EB700766D975EFEA333972193D9C6764F5744027B50DF95864E0159B477
B94FACFD9D664AD9662CC3F91C829E0F305D2D7437522FDC407FF8B1B3539425
9ADF92A39FAA53198AFEDB046404E51D612AAE57E8936212F232DE54F659A360
EAACBA07E9AE56AC02449FB381D71265DBE5375B06FFCD490B11631704A2CE08
60A87AFE63E91469DC77BFB5CEB75A3D6D2918ECD64F82705468F167630971BC
01DC641766DC254D9E9A49C0FA9AB34BBDD9983E5D441DF74B89E58514FE8D51
01CAEA398F97AE8DC81463B6EB76250CDBE461FEC4C7EEE43B53BA096EE9A53E
FC3D43014A8761F3B973F45C982283BAFEC9A82E30AAA702BE0FBC2D58E357E9
AA1A91C52B19317FDE765000BCE9A1A61A802EE8ECB4D538C66FFD44DF10D144
02EBEDFF0B144B1C9BD22D7379576B114177E51D621C2E0B050FDEB852D3A6F1
748B19BD215D3BA315FF9A90DEC4F7AEDF1C70BCB7143D09AD2CCE49B1B12A15
889917716A54910E71FB6278604A400458DA91D38851474673265AF4532C3360
5A176F950C046AC171B934A2A15779591F6C524E567539F9755A15D4D58DC466
1DE8979672FA7FC96AC8E2461B01BA8671BA4C0014F59D363D13AE5C18DAD1EB
75118D4690A28A1BF1E693F4430AF3A4E3BDA695AC6822C4F42EBED74364A2C0
0504D9C77E08FCF101D33E908A71B94B57A71E9801F3085A1BDB04A65CBB6605
D4D72E11338D87D5B02D266A9F4F58E4908EFA20B7551C67CB65DFB3A6A4F462
BE373CD68D78DB2A5DFBF469C3D02FFFD3B21DFE7CBC6DF72B5E1A22FE803AFB
2171FE5A3E58B2FB78175775D72E55766F3C65AFCA94D0E84C7FC39E73EAE0E4
C1645C9BE18215311431841DE8187A20D6664348C7A8ADBDE73F39AA0DB177C3
7546FF0FFE8288920E35A3B84D80D97DE0E28FE4D056969AB8C04466F6B23238
49E5A8738DDF48A55F4E0503D39165A53031425C5E1F37426ADB7D9616475ADF
2D88CB239FE3373A015B5CA29A7E732FD2B9B631091594C80B02ECADEDC487C4
29496930A2769FE4F6BA80448EB6D0B6A8684436C85634AEBDBA68ADBC024165
43DF2435BBD4C1D7EF7BBDAA841F389C6BDB7CBE17B2B9FA9DBD3AF93F3941CC
55363250F71F3C56E39A33EABF0FDC11E0564EAB95A2EA372DB1166A15B024CF
6A07455FC54C21C91014C9D31B5743A9D4FDDEEB513CDDAB879CD224BD2B3BD4
873BECC873A9C71796A1EDA4DAE4BF534FC07180E277C771BBC84A300794A6EC
7D7CDA8354E5B65B92A6310EB3C3F577F2A16188D24FE6ABFAB83995414E9D39
00926FA8087A61383E01E64A933A96E71C2A75FD1E629A7FAB889C48A47680E8
2D0B86C99A068F7BF8682C988BBB43DCF241423ABBB9FB8D86112A17F6F69DBF
BF14DE59470962F632C45DE55DA03736E9AA44ECB7649E3347035449BCD93632
8FEDB5C2C63C0BF9F0BE9D277B1F1AB4D071D33132E00EEEF6F96B32D3C54813
C07AB4C7AB3FD6364C7DAB892DB301507089B98DDD8A8691F3FE1D7B96C516DA
7DFE48BF6D5A600B21DD48C10C8ABA3F9256FEC0FE2F17E6C5678B814181ED70
F659C90D99E1000D0BFB5359042CD7CD343562C24BD41F2637BCFFD66D79B090
D239BB28B04F50B5926DB03749E5D0562925E48F6A24FEB64C15425B7DFB86CE
574645944506E6C1971441D40B4705A4725AC38C7328E5A944920C2BE36820C3
CB1FC79FEEEE1DB28D40DD0577BE5E51E570BD135E3CD4C130FFD5EBA5C71473
7CDADB36230DF2369ACF7EE964D92D0989D89A115F3E8C95CFF677ECD1AC125C
7750588490111E7FDDEC92AD68505EDAAF9896D6C10980A09DB34E084C8A754E
31B381F009E9D38FA9B51B9C502B708FA3FCB767BEFC65BFC67F85B7714002FA
D60CB843791CFCA02C244650686AB686391E09FE53FAA4CD9E8C779273D47755
CAB6FFF047C9BCF3E10CD76DE2B8BBFB519EE80AEDD9E942433108D4C366C61C
CB3FF1C008B69549CB12C78F883B0F301B2962F17EB8EFB11F3E314557860D22
EA48DC98A3C9054E372D222334F76BDCD12D7454F9B1F2161D0B6036E7F654E1
FC0D9A9A3FBA49EAA38A1B4673172CF5DCFABFB73E4152C23C1D4F3AE318FCF4
DA305332317201DD80D2851C59D58E117B85CC17F7BE4B6E50EF83324E37079E
6B44A586D80CFEB32246F16C0F1E98838B0842DC3A9E96FD7BB5BE41A68148A5
E603B3391E3715DC8998AC0E556F16DB74C13D05E062FF908C0EC09174F5A031
A854336C4DE2FFC6C0F0BBC5F9CBABDEF3E034E2160F15F3A79225FB98E57324
84C6FC1C698A90FF3B1EEBB4D44249C853D35B0F0740A078BD25BD3466E0E00A
028B98F990B4D015153CCC2E1853473BBCC65FED19831A142A95840FC5849DB4
C1990E870E80881383865FBC10316F6EC4806316954E90817A74BFFE3C927E84
825C7F2C49C6B55ECDFCAB2B87D00D84B6D0D270F62159F34F65E8FC94DCBC1C
A521E7D5EE19CE509CC0CFB6B41CAC835A14B1FA3C5919589CC2B5DC722448E0
9A0B6D3A86FB04163ED36491F24D7C3D634B25C2CAB4C728EF59139A10E055CF
9C7B771C905B7439EEE46D7F9C66980ABE0ACCEFBA3D2977040D8E3EB3311872
4041A104C465F93E9719ECCC2067B9FFD03692B957A6C2AEA3E240AED6A5419A
36CDE36ED173A1CDAD47578435E0490C274A29EE2FC01C25913BC44D69B3AF2F
E2CDB0998BC94B032DBA0F9B5D7C90EEC6B06D7DB4B3BE25BCD19165A7222BCA
351A5EC76576A65D53650228C5A195CE30DCED6A289C01AB88876D626C0DDF49
3F875241C2DEC1F15A585958034D9F9D42E0DDB54971C0AE4C07FB9D86A197C0
C36D4D35AF4F7F0875D4A77395A3D68627DADE6EBB6D506361A069166517C74B
64EA8B89AC8F8759E5ADBCBE90A2E23D6B622779FC173C5D78F15156DD95BF83
09A91C143C945594F1E6F6F5E78E43A37D1ADADC9A1E9BE0EE0FF84841C43246
3D020EB99903980FEFC3C1D5D19DC8DEE78A54B8A27A3CF5DB99DB7DACC6466E
3CE528C95DEDB79DD2DAC5D4370462841166AFDE28E80610890493BB52C87B49
79546E7AF1052A65B21BD7E3472DE2F24A1DC59BDC10A6FFA6827B6FBA66A52E
428F31F04DFA7034E082ED6D6FFE63063C481F6B0623E86AE9D85248C2AD38CB
B80B30B6FAFB4DCD6075C2936BD485EFC8DE44D67D06807AF84BFAC099792865
F0414C86C2E441769DCC5CD1D4DAE8D4EA877B08142D653EFD2C1C8D4157305A
78A5674E61279415136D9DD34C36529626D2FE74F72BB0D804765AF42A187295
14BD4EC84AB671D8EE8DF07524070EE1CBA34D1F49569F817C5B171FF3ADD5D1
6839E8BEDEDE68B1E0ABD49B693AB39A8996618D26A6134BCE5A250759CCFF2B
DF06047A209914135E4FC46433EE485BAD077D38E9680D854A9EEDCC65BE5D04
94185DE404B2DFE326F74800F862999D20CD6BBBD29FD2854B4CCF52F32E017E
9EB5725BFAB60D060BBE761C3DA3C5287F875D32E76B164CB2D622864C4DEB53
3E07337AB5332BAF8FAB062CA18898B536ED62B6FACF54B303A4BF5A781B6ABF
537BD0064DB6E55E6F6A70AB53B278202B0DA2C48A3B60D60C197D95A3E18C96
1E23E532A92FA1223E2049B7ECDE2447819573D4CE072A1EC2FDEDF3526BB6F0
48A766BE01606098E00268BB6B13F17449067C8DA63C168D552D4438D8424AAE
8A087A12F4A84915361FDEBA5E8EC9E17F1834BFA8B628CBEE3E86D6C2F7FF2F
C245360AFE315686C0075ED8445394BAE0F6896A96FA91D2C751D122A144ED83
B55DA3F9F8B73670A38597813A5107940F1EA33272645AA926746FAC16F01A30
462367D1E227A55B982F35C528B0CF74B47AF0713980569490A67DBB240D5B27
469FA7A145BF444B4788595A0AC613EBA03926BB2AA3945087961A67D433826A
9301CB78F908AA6C3F8B40635F6E21CC4D3B0892F3E8B83841B302EF8EB869B7
944353A072E3FED37EE121CF002AF12A15F01E915FAD42C32DCA43C933A94C5C
F53A7A1393CC145700E33FD18B1D0033CD3A37F8FE1B94D76B6056E55C2BA2A1
95D1BF005982628C2D61A432936324AFC4F061DB22A24FB7F8EB5BC7AF3C94CF
9588FD88EFFB5E78EE5F7349C70E496CCB6A7C52B6A122B2322ADD4AAED05DEC
A0A0D6987644BE3A9A0952C5706AD73489E477268FF9FCA35D5BBAEC4251B83B
066C1E22B5BAEFEA291595CEB84FE4D0B7E0023FA96EB1B2B81C8E3F5F5BAD5E
49C7D35522C98D52F53FD1AA02BEDF6314D4A63DC85A6BC64BDFEC1127AEFFE2
18709BE36F01767EC4B1C169310617C44B7CF6E1EE3B23E006801D30B1357C34
32CA1F3CCE2486E14C50E8EB519ACE603B0D7C2506A5364C406F12EDACE8B4A2
8F9B3C49AA3F85673011CC5BA078A4F34EF5A175CCAC60FE33C422B98161808F
4376A91564AC6CB1BC7CBB8FA6DCF4861D1C84FF3C13B7FF6F1E4698773FA21A
7584536E9D9562A2646838DAEAC0FF95479AFDC563C957D20D5B59188411F063
A8111C05988FCB024348506158A4D044A2A04B6144C660C811DBA056D05C5DE7
282F16D546C6238B4E1F92BC16E3935C424304BEE4FDCAFE4E203DC7EC6CE32D
227A9532AFB9B633407055A86070985E83121A0806A2FC117F21B3D3B0B4FB71
7EA6FE093E393C8E402D1704E5220EC6C1BC0163207D99D3F7F16599065916C4
E5F70535D5686E589D0371833F25DDD3C2805BCEBD6EF3741ED2F1F95734BA01
4F07C905AEB48CE9F114BE28B91EEF774D889E05B029BF16ECA3A7C32E40353D
3A825C29FE9C663EEEF18D2D724A1CC7652466BBDC10F108D2D0CF72D60BF5BE
D3BA594A32191AA12DAFE78D8A49E490556260FB3C7DAC9E31E3383A5E900CD6
631D13C114E9F84E505FC5FCDA7DCF4DB8AD1CED4B47F547AC4815DA55874A53
E72F961D189718CA0E705F28AC8165068B6E7C7CF2E2432A65BA21DBEB0A83FC
660BECE20FE2328C5153D70756AFD54C0D73F08FB9AF3EC918334FDBDF58B0C8
C87BD56C653CFC590B969BCFAD52970F537900413ED3C48F825CB8528E645D4D
D68B8A086C45877BEE4CA10416028C83731405AC06A27EA8C51F4AA053F384DA
93DD425B46371D68992AAEDE36450BD6910C33C33C874F919752BA680BE6894C
F4146BB40DB30D0955E49A66F3F8F5F8491B730E6F350B5A3B0EFD3AC3E12B66
291A897CD4912BBA1EBAAA812EEEE31824EBD11E8214573A683243FB481C9313
EE55CC5C6105ACBA13AA110EC4112CE132E2B87A7C43978E2161B24072F5BF68
21337D7BA8CC435152EBB0BC0DF17519B69195A73EFBEBB2A8A9AE9AD8C60EEC
16791A29C8BA4C60D421A4E86739A72715356C36A2DDEF6250A6262704C1B71E
2D1B5DDC9E2BFE643CA1EB2B31DAAB33E447B03C1D87FC971478ADD828089EF0
860DAAEC478B6249A125B20253F32B95405D856397C843B2B7FA307EB591FC6D
377CCBCD610F1DB2D3873514092161A9C9F572701A3C865073AC08A9BC2BB778
3E87F35E9752D76D9E7A10EC517DB4D2CB7FA127F49BD2B5ACCF7ED80CEF4FE9
6FEA461B027892630923CD601E96E722DB1BE432987A61FC09106EF74A68D04C
38C598D8626BFED7CB672F132E065D0E72F8BB006B180067B2F9E68C5528E0DD
9A56E20DB0857F48874DFE4B2F5EAF3C9EFCADE12B961CBD96B744745060C7DC
897992D9F89EF815AEA4907D8CE40E25B36AD4A4C40A51E4C5A124DF63A49051
A9885DC947F05E0AB50649F40B8FC7CBF5F2137869DC48706BF7667FDAC3A018
3DA62020751FC1CA9253F149894D963811044B81637E2C4E31A2B30622374512
1BEA6CFD2128594ACD08CD89AA9EA5173DDA3349FA249CE79C902144866E7FC1
61E36F5E3B0DA19ECEFF381314ECDC4BEFBA35D39EE54A33D63B692151705321
F5EB442BF47047FF186B26AE1DCC2AA5081B9158BA392A5AA48B228CF68EE003
2B1968EB88119A375D4B650EA42F77671B303190744202F279F7F5A42B5F5DF7
6AF51EAAC0C01CBAA10C0032E8E7384836BDE8A66BD163063321C1B55EF62046
9675DDAD0999FA8C919F475DFBEDDDD64435D8371CFFA4F5765E1EFAA5CDCF6E
5135E777BF0A5323765A06845619257BF1AC045AEBBB6A770AB6E3144CE5CCF0
F88BA680F8F4C01A6CBFCBA3C3D952B76C93D694E5BB86B8D99F0E00CBD1A854
1D28E981CE7C1078EB2C8D17C29BA946818E0E0326A9D87C65D63C14BB2F49ED
2D369DE7A3DF516D69ABE8B32B8660D2759970340F342E48FC8DA1BA1FB3DAD2
FBB63DE146E1AC092E3FE888245721D1A09931EC73C9CB2090624BB22393DDB9
0DF1D8545651EA776E00491BD1D7AB84C2DDCF5DA974B2068488AE47A9F07F8A
C923536890CDB33FB4366285016E7160A8F3228D70C7DB6679D899B051EF9F20
C796C652C62F5184B6817B206F7523B060D1FF9A7E902EB4348DDBDB8EB2FE37
1F7916178E63ACE9031616DC54A4817745D1A8EE14A7EEC9DDBB9E0CF3A12E63
6E9AA7F351E7BB944D35F5C5A9EFCBDEA48738FF6960BFFE17559540B1803C80
C47CF4E0C5CC8085EB9D19FBE8CDEDE25E96098D510021A8885763B511C82631
D1A13C84DAAD94BF15C2DA92AE6044FA5C990EF446A380A7564B1C75510883D0
472FD56E0989B080BFD0D7026B3F0852FC0F00158E174ADED9EC2756D89E8768
E4C8BD3A99662A917DC14D373B5CFD90AB324E1255573EB52498A8E82409C453
006868B5A37BB67D82FA8C1BC4574E497D37A8329F7FBFB485FFA81B96778758
E6B57C3A17C0F324D70F81E979CDFEB9776B92ABF0AF662CFDA9AC18A33A7B04
C44F0BABC60F72CE2CB794D5D86E1A0419D957998E96709F66FE8B0BADA48B50
E47EC0AED73FA6DCC881D1E5B98BE96684BFB78BD03562DD6EE838D77DDBFB34
FBE47E13C4711484075AAD24C10874C856F4FDA49C612C6FAE4E133DC1A8FCCF
41B71CF582343250BA9534500603D084E7018204A466DFCDD5B2687F865B2AF8
9C08A9A5AEBF9FDCF0D0C98D97E9993761E296DCDA097E816CDB2D83EE0CC8AA
C15778A233397B42D6F3E389C51E54262C7A60AAFA4E615C2367341815394F03
60220C85340E0118C720B6329B63394AFD15347DC7AF1347F5A630FB4CA84EEE
10ED317BB7A7A45CF75B2F7C16F5392CE30BE561EBCE71F8245BE46883FBBF86
FC42D93376498A17B13B088A9324093379917DC337D433376EDD4B43E21E7B7E
E08A4211AD764B9A8D9CAA0D1DE3106460BD42D833CF045FA591A3CCBBE97BD0
95FC374AD159A8EE2C6DD3055D0370200191274DCF31C956F0ECABAF8DCAFF7A
472700683F4720DE64C39E02DFAC6519EB5DC772EC49D8FC6FB100445C8470C0
3E084D149D7F2372737A36870CCB24CCCED4E9F5E03153D9F7ED759091062E63
FFC2BCB9D5DC36EFEBACB59F91426792328F3D02F18735550AD3B80DEEF7A698
F952C843A1A3979CAC8A3429EF33729B3B41CAB9ED84724ABE1F52A8D7489E03
1CA0DD6424EFBD926616E93AF7391BDEF1E44BB5C6F918311F3D99CF5FCE0914
0EA4BC6AA88205B3A0445B6B5E95628A7FCC74ED0D3BE8A2312ED1D217ED437B
23DE309A360FF60CA82A8251BE5676AF542D035FC9EB2E65CBDF1EFB700E2B9C
7AACD635558D2BB1454DEE1D2542F1B3F84EC1099871BDEBBBFA0CD5718D2951
D317AEE1F6AEF01F4F8CD778803F199EA1372C798691378D624D9420A9A38FFE
6053E2ED1D12F9CCDDDED2F47F520ABC704658B6C5FE2DF3AD405E440171B7ED
B7E8320F55B680EA3CF483FFBF44E5C353BDCC2EAF912C213D0F3801128AF3C0
EEAEA822EE34666907930BC14D4D7BD74E603FB91E809E3571DAAC24FA93CA9A
076A84DFE0119F51CBED2DEA8FF8EDA7981D9D445092F4EC47D0975F65A993EC
2FCB5FDB8C98D144C7D72292FCCBACB86BB57D2928B0C360A74A4C60FBE393FD
2D5F09B189776244BCE63CED6AFD5938E79009B98C2564A451C9C2B5E8F20915
A45857A2421A4097A36061CC565074ED5B7B4E0E3D77A5B9F5056F14D3370AAC
E4D42BF755353F893CDD166360C7099DF1F1907585979F150C4869DED4E7AB9C
AB8CE55642A7EA17641FBDC5D26A4CC75D72CB88767FBCD8192228FD198300FB
7FCD55FA4B8FB8251C40DB57910961A6F9D11BDB52C152551CF676EB3BE48B29
AD781F52CBFB06FEC5FC39189595E56D4C26D07919405854A841B11E2B0CD0B0
4FC92BA7360A4841FD06A5A27E6F5EE3F77F4CA8FAEFB1E4CDE434EB44785C7C
E8435E807DE8E1CEDBBA6E1EB6DF1DD36642B5A8BA107BAEA2B7086DC2E4872A
028E3A8D6C39E9D913191CF13B665149EFDCE931CF28F29355FCCEC4905B7C19
5F49CDC5504B3B521959B3DA8F7866851562A7DCE24385DBC4FB8050B8F06DD4
5A2AEB0BEFF967040885525877DB7C18F57888A4DF47CF6173EB83F32363DB19
AD8286C232CF8620D3498D5CB77C497B9EA068C125632BF7F8B05106C3354516
61E9AAE83F17FFC8AFC1D266C3CD4D3C40695BABEF23430F28DB530F7EE522ED
2810C5CB1929641D3AF6281C8F43DCC32331D3BFB30485A355F6A36257969AA5
D770C8E3D2D230ED002476B315DBBEB190E58410A045DCF3EA31DF57C6FC48E0
EE5CFC884FAA3202CFBB7193A057E5F0E7E6E623BB3885776FF6F41183C24C44
A68CC2E0C311EBB31BB7069D9E3D8AFF77E2EDF405B75D4D73D87AF090489443
34F7AC29B88B7080489F9A7EE9A2BC3C6D05240DC552708C5D69C7EDAC9D3793
5F012BF35121F0979DA869C920714782AD1E47971949CD0EA918D9959874CD62
A121C6ECBAEF8C333AC729A8D8C7C5251B43F643B6B833A40D34541446B9CE61
C958091ABD705445715A0BFADB37E89E18EA4D2F721203BB7FA509C75CBD5813
83EECCB8F0380CB52D2CF369907B57932220E71201F321AC044F122F557BA3EA
F86E8B620ED656F328C56476648D73ED4451597C8631CA27D811BAD64EB7E01D
3C30B3D66BB310BF9E5A4B5B3056933A3730D29252DA027E97E534A8CD58026F
39DDBF4C141FCFE9A92CED8AE925DA67A72D2B83F095EBF47580E0241D79B8C5
FBFED592415031CFB3703009E79D4E80731CB66DC4C37DABD3070CB65312AD3F
2986F6365527328AA35084A8D37038E0B9D9C7AF60DA55D602D1FAD4E4561EE9
1ED932EBF29214E8FCF67EEEDDBE29741201F3B326C4058F2438D94C9A0DA68F
1D358F2EAC0F3AF65AE92A9089E8D2B441B62D177D1208D55CC168A5A57EBB5F
48ED918D8AC5E9250101202F50F5356803AEAD969E12E5556F0D56E4C240BE99
AA4D4632892A2A77C649A25520DFA52E2D06AFD458F0DC3F450F747B9371F982
0C6FC3A77F5F55A753AC9315A1B903F0C09457C64C3A3F687C6C03526C29A7E1
ED0F9FB3482B9A9B37C05CC56A612B42A39479CDC59E05F4BA7934CEB0AC5572
2D92C18B4F8D4A12AE02552EE673899135B4B99844FBB6BC7276FAEAED3A9CEC
BE7CDF3FB686B5C523C206B83BB50C33551DC4A3348F9E2972220E36858E6440
3E0894616BBD9691E64833B16F5BD7AA5B6E5D82BB9E05390DEEC769C63967F7
9359D1B295367BFB04FFC130DB27879AF2191145B1E926385E9AA7489E84EF79
ADDF7FC21D7643EC0724B2284CCD6B344672821D1EFC1616B16091EDAC559A22
0F29084DD86CD87173A4F4E2EF2560FB682B01231406DDBAFA43E10BE80DBBB6
AC784F7D01C84B7993D5AB9B63AD37048443CF4085DA4B2D4B0499CF80AA807E
DDEFC0B32100A3F043FFF1D15AB844F0F6CA147BBDEFC982A67DB05DB75BD7C8
0E78D32B46858CF6AD6AD708607954A474FF0C99E0E08AAF21F3E9DBCE7EDF7E
10E18F8A72C42BA53B144FC5404AA9EFE2B2B915DCA5D50A82E973A0100E9520
AE63184AEE8EB1D6FBE78D8F823D5A68568531311D62FD50EA013D2A58BB8C99
BA4757E81192D6665893FEB97269D1B17D07B451BEA37995E9FE34684029A554
FDBC23262A3846A894B8820DB0CAB8CDE865636E5CFA757A2B5DC6D578ACD5BD
3C6A8B1B643D02B349246A34E4715E1359626DC781E85829B690D38E0708621F
F68B61FF57E470D63EC3474CE80E612173880C26D215C8B0832E64452293FB16
7DBB2B80D07A26D24B68582255DC0C6BD3BBA7653DE3344BAA2694D64D1FE676
5657E0276D7F52A3424F1B7995A97253C8F822C11204E3406299D848A55F4E05
03D39165A53031425C5E1F37426ADAB637E03923EDA8E2FBACB8D3C58CCD07BF
CAE08D822F6ABF353BDF73481EAB5035A77F9B6CC859CEA88CCE5A4B9367F235
9B827071B5C40292DA21B4AE43740CE4C7BBB43613EA73BA2AAE3FCA5D2E78AB
F50BCFF5131717001B557BB1203F35A16209EDB6024DA5CF1F78C47032F4207A
1DFE98A369ABF290AE8A785CD8DDFED8FA29EF1BAF8686C54268E19962B62E25
88EB6581FD0F073894604E2E61C5CD126C3761032C19EC723FC47C996EE351DA
D98527B5ED5B7E5005F73C09B2279ECF72E1EC79A495AB140AB9DC46A3E01092
F57C1CE1A5474A92C4CB802416ED27662EDD238036C9A646C280EFC242ECD53B
6175485ADF3882413B67E1B8CB2DF7E7DF68B41BDCE88A6DDEE441E1F68A416E
37E251B808A9C18D539F62B136D068D08DE0F7AFE59C922443FC26FF50A7BE43
0CF34D743264DF2A37E836CD1E17F9E052EF8FCBD13B129F1E8C1C73E73A1974
40942994C48662C0A8E0A51ABF7D689B323FB6673118F12D7665C52DFB2BCF10
3AC9539C289ED4382ABDC14DAEA66002AAC1DDB131A2410F8CED6B1FEA8AEF27
E536BD4963C694A57B12AF3CEE45979BA744153CAF36832BB25487385CE06EEC
0A53E66A78511EA6854A3F5B8AD99FF719D6C5FFC31F458936B9EAC179E22CDD
CFE3E3453BD784988C26AAD63ED22B08D256D619F9189902DE4E2C2F75E5044B
34804128434B4E12DEAE41C8215DE8024FC6BAFCFF0117623D79E463257F5A58
B4D15601E36673E66F90A0256E5791E0F9300B4E540ECB4EBFA0B70AD1CA0577
7BB568027124CA28EED8E78FAF7343A81EF370850F9ECB8F2E788F2C1A848795
C2BC29B689EEFD40F525663D0225B4FC103FA104C1E2CBADC35CC868597733C8
0576D274C172B8AB91911B0FF79B4E98495C38C4F07B7DA90AC229743F74C57E
C62AE5686421929886546B838F220D833DBB081CF9618D5D0EE0B6882919BD07
486F3B6C1666FFE96255838DC12EC5850B264EF984CE0699F01703D69B17A279
9EF97B89EE6D50B3B89AE47BAF81C8F356C7E4B1404C8B5EBEA4ACA7687DC847
955E733E1876786867BF72046BC4ED81F733D4531BBBC2E14737F2230D5C5ECD
B54DA7DBC0AFAE9365148C90850E6C6A01AF6C1A517F86D2C6190AFE9B31BC89
2DBFF6A70BB2D26624227E54D76876DC36BBFF11D172072B65A2A9D936AC26E8
4124A3DCF8C28E4463E0CFCE359A8878E8A4F454633B52B445FEA99105FB0699
485952B2140FDE5E21CFCCAAB385F35027E9F3044CD8B0B262871D5CCE495AE3
EC6EE9C4FADAA72FC2C4A95C05EDBCF1A5E3A451E37F6A8C672B9351DA9385C5
378AC3F839C336AB22827038D5E2DCF97D2AB8EAEEF6071317CC31E57CA2D9A9
8A03177A2A2EC28AD732EC6B65547C0CA3C520729A2C7FD9A30D9E8FFA9D0A9D
090B86A2B91B8600C3D156BF0ADA383485030AEE3A61565EE4FA6C3815760538
B0E6AD08EF671DD340A5E3132B6F05D256B45CEC4FB07038249D13DBD25BCF4D
09EC88847341792561E9FB442EE7B33960D6BCC77D3028C04CC9D8E64E3B16BD
4A9DEAAB1B74EEB7B908245CDDB7A093C1AA307C3A8AFEC9EFB184F8A92781EA
228C2F15AD9AB1DA750467930B6EF07098D4E97FEBA8C650810E23D6351C7E61
D1F0D3B08A4B47513E1F8CDC2763558C93AC71A4C6A24142A1D1277079D25627
DCD5E4FE793372132BEAC38101969CF09B235D1942553C3833AF972A10385125
BB0B2664F729E0C22B2320E760008F8392E257169543702AAFE923C4A9D7AD51
38625724CD4ABD2941B3FCD5A155C783D9CCBACC11268ACE65C6EFADB6678527
39E02647D111A69CAEAD0EA106B9D77727D38B9EE253F31B94C9AF9270C53B5E
A1362B7BC79D272D8074CDD68340D52E137B1DB6FF17B5B356820F71AA5CA1D3
EDF9707A0F2F4D02FECAE58D25710B58CE2B476A1F590B805B340F3D843B2CA1
E8933475B28F06EE2005002320405F8622819EF3AFFAD63BF9079B3A480368E5
ADBDBDE8E80D6F29B33E9AF942AC78C167A0E5CE18889CE0B44A0315084F5C57
B2E0DBCE54A6E6A2F6F710C775974AEE33B14FF2F91B7520B94FE43B3A1E4F7D
4A024217CDB9933A718F0E6D91F87D2659B386F9AE782F6A1AA2842147880097
470678A21774BABF9D6FAC6422C6D0560C56C122AD3085D11D1517EFC46F18A0
53D9C434410B88BA8F0F35C5B1D5CCDA001E4C552034256EEFE521828F2729A2
542C2F3E67AB892F7942F60131BC8969A7E52BFC97C3C1CC59ED40A975E8762A
EE68EC37B45D17E0BB03CE3270506166AF4207E6892B6269DDC0E672F8E744FA
75FED9FF503F17E4988E5652796A018E98797B395A486D4AD48D6DB6413AF3CF
CE6381897896D2B93B13DD7C882C5A629C1613CE0BE34DDCEBE63BF7131C1DEE
5A163AD6B2CAE8FF63DF4B14135D5BB7B28F0D3340465C49BDACE2A6252E257C
0F69D4D0C42D85500A81ADFAF10217178F2C4932F847AB8692EE6554BBB8CD98
DBFE5F354F8C117C09D9F58730B78308F6D785DC4F38942D4FFFB3A4F6097CCF
5827B01CD881C72814945239EC6EC6B59F4710149395D378DDF5E3879446BFA1
B4F06E2C329AE0BA4600123A26AF2CEB9E359BD9E5E92EC8F6A19066B51C2AFD
D4665F0BB9EFD60F9D0ACCDE739B576500ADBDD6E3641401B4F54F6FA4FD574F
36AA90932344AF04E3E772FC7CAFE67F9E1967A8B2997B92AE6D0310BF10389F
C5646EA374B2611927B6D644635D60A19CCE38D01B36A8DB1B364E6474BA2739
61AE00D341E389590D1BB9D82DE2EFC859C79EB2DA01920438CE2B65D773C6BD
C0913538FBF9B35FD7AF170D19BCE2558A74CEFDC5272EEC4C34603383E73E0A
72C49503FC4D5C80D109BACE017184658A4E7A74EE6C22C2737A810763CBE9C6
C5198B5FD89289E99F07DECA5B729F38DBF8A4D7817F197A80FBB4B9D5612192
D75D38AF375DBC655C64064B3EA6496A486815A6150C8063B5D2D0C03EFB23D0
37F3E6727552560FE97B8E99A1D607888176117255E4886ED6B47C612A5C4236
68A278C53D4F82E909F147CEA80D1295C7175929A360F9231671DA0E46468695
A4CA7D1B1BF6D4AC2B193FEF9FE00F35721F03E9A3CD593DFDF01AE0EDCB4A30
72FE23700D92AEDEBE2DE1F7845F42ED223515891F11DE5E9BF74E69B4C86767
7164214D6D6AC52972CAAC14E86E4A65259851385FBEEE9F0B4F127A8D2BB1E6
34AAB58492A3F95A0508D0717C6BF111E66FF4DC17BB10A78891B9C9F2BF094E
8EB21476A72B6124E24D2AFEB2FD437F95078901B9B0A0DF61A899BABDCFBC40
30DEB1309E91A0576CB7FCE827E8B6C453F843B10EC212D258C3CAD123A42607
DAE2B6EC8603B6D89B8AFF8A4EAD2E627D4CDF5687F79E2D99A27ED6066CA17F
5497ABAB38C14A3D1877253690D2634811AB5143E498FC491906217FFC0B3E79
ABB5325CD9EDFD49E8901092FF6B232F3CE2B3250DD3C2B5A8BD9D9858193BC1
069471D0CA4DC7AA32B4877942467B373760BC57A72FAA1CD068777D347A8B61
CC09CD515B7E0B35306BD2180CBA726DB945DA4C34B4CAFF86CCAE015D8CF737
3738EABE88EA81705E843DDCF887B705F6FF3C0AA58320B471EDF13DF610C6F3
1A20D53C5C727AF3FDE43F20A486CC64273E0B7D1E15710DFDAD41D8A285ADE8
BB3A94DA868981A99E244634CA992D43F9EBC6E20CCC7DE4CD1CE4A60C1F7DF8
5D6ACB8A7D68D8AFCAC0EE76EF1FA7B48D7CD44B5243E6F7428C1BCACE864A65
2BA79DA963B64B0B422DF1DF7921D36897029B34E09BAA559E20CDA34AE650C2
3CB519FEBB866F5AD692F5610B75F9E7C6B4A4F614773EC4E218FC4FD29BC0E0
DF1429FDA949FE1F364C2F744079F590EEAAAFC3D114E7F327220DC330236F71
33F753DEF5D0C9EB12C2BEA2C26F768EE4BDC1C612B31C7A4A924E506257DCF5
7D33F234424570C5EE3036B4BA22F5BA356BBF3AB56B80BB86B82342140368F9
FFE51BB3E9FFCBC92EB13275AACD14A2374BC9C5097DAF008A61D4FC7989EE78
FFB2B37BD4CB3EC67FF81E7E60F3CAD796F99D4B3778E50274F69BB81ABA1EEC
1B49E231AFF94600FA3B4C7D0B8794E0886755BE34527B95EDFC504B72BD1A6D
59BE8FBE553D54BB2D2F394C8F7DCDEF9CAAFA040C86C1F29879959ECE82C9A3
6E053894012FDF6BD8EF80CC9C4498EAD3B5AD5BB74BDB7799CB1C1EE83E3E18
100BA6B6E8717500464465863DAF313DC04951578B1E49A6D4B8224C70ED72B3
D595041D0FC126AADC040D9212923F8948E5A8CCEBF94CA25B5CFE5D573FB3C2
BF3D2905CFFAE9EAF0B9156E9C1D20778C9B9E07A0A9B9AFDFA66E765FE6B7FA
5AD4D00F476D6B54F2D50058F7D003FAA3C3F882090C8DF4316BB2BB3BA9493C
94D8E05764EFE7B8C6FFAF9103B293990B04C3257D9AFFE291DA3EB108F38969
67A5C8E79B0EF8B1FE3B4E6396241A0129568DD616C38BA237F44663FFAADF91
6E228A077CB3F8ABE7FCF57A38E2D9BD08318A12C2C09A0F32C2954C689BB04A
12A787BA6E6728C9131A963E18B6332AB35D35E02407B10D04DEDC494826B54B
92B25077BEA592012BB51C493D6F4CEA9BD2DCEDDA9981F02414BDBA77718200
1A573B498AC55C4E784DCA9C4DE27B6819772293AB704AD90BC5FF3CB9D3C40B
C4F6A3CDF009DBD145F441FAB4B93F604A39107E9AB6EFC28D52BAE71F9F66D2
49CBF9C21A481EDCB083111F3E1B499563E06CA1C1102DF0B370A6190039BD94
F2ED03F2CC44C01BFD862FF2160E0ECF763DF0B336BCAFF6362987DCA71BFF2D
FF3581FBBC1DFC047530FF2B2DD4E4EB5D8B7370D2FFAAB5BA1013209625E86F
A8DDE53F7627C5EB24D7FB1AC128604DC225404F3CF7C0741889DAE02563F58C
453F45C231219FC9727D5A23BC2DD33B92A53D58C697C487E3C9F825B5BD086A
6E6A6856FFF84A03D253339BB9DE90A9480C77A1A62B40CDE1CAAA3A6EBB0C27
F6B3D45356DFBEB0F12864B22B964505604D6B61E916B27ACC7B6562FB568CFE
3D6FFB56736E6171529E0E1972EBF20BA99B973D833C01353303266554DC152B
2CD12041A9722DAC7684B9DE9465373CE2ECBA619FA6C38D9D27307FAC14429A
B8FA9A5FA66F0AEBA1C8F911AEDE793A435F04B0A8BFEE7C64ED51B90426F1D3
861E1D799628816A876C6FBAAAF8270E04CBD93BF6990BA00B058A1C5C34638E
09A21350BF64EDA12AD0C8D6B4811AF48F65A36B0399A326E0A57B69583E1831
05021F0B0AD971DDAA362182293B730B9880BDF0FB4330B8E71F816068081D32
5833AEDA96C0DA8C3519EF971CEFA4C610DBBD02FF4F978B68EB6C23A2082DDB
5A9673A58D5AD92CAE65BF5DECCEF7126A96C576CFD2F7554E4DF64925215CC4
DF3B40456A712EB7684A38B5DF32E3C8CB512DBB78B2BE1218068C3AFCE0E7AB
75B1805E3F57AA425F81CB8561C4A01E067DB113812B6EC7533E87C968669430
A2DE4A125D6F0DF7C4807961DCEB0676A861BB5FF8B74EE25981C24E8C36BFA6
7F7465DCAB9AEAA6C3C33ADEBB543EA93D2D21D077C8403DB91FD9DFD15045C3
45839AF0A2A207C56F3D57F8DF7CCD14888A84B1E8D03CFC7223A383E635AAF6
5CC7D6FD51569CB43BB4F5907252F9558E83FCDB06935C51979E722A5677D90F
950DD4D2E09C9F25BA20FBE9F7715EE1E8617FC86C59D9666700C095207E5710
6950D839087BE28F05EBA3761C7732F29E2B36E8CFC932AF2DDA28D631C559B9
50BA064CFEC333BCFD5A093BAB44BA86FEBFCCBFE3793A58DF70C60DF4B6A87B
879E66D5E87D245B9BCB889598B6C62E64A0059FD24E9E54D410482DA1202736
A20976F25B5BA2F0E744ACCF23EAB3C9E0437A2F11AADC452F229C4349538CED
34E669A162644D1B95C796F8189EBE9AE437F536B9688F616FF83CFC69FBCDEA
39CB041208A2D3B62AE0D8B8AD91D3BC29F38745A6DEAD24FFF0042D2AD2B24A
76AB48A5F30BA8F41A4BC3C8794BDDE3F245B8CC39EADC00F42AAD7BDCE1D809
95284AE9279F6ED4E06160A55F02528ABF0FE27452F682584EBA955E7E40BE84
90C1D46D1D5602A94CA7556A2B7114DC06904F0686435996A7EC21172CAA7C07
61772ABD63608A121B7AAA80FCAF507DDFF4885399DB68282CAC77A0D5895184
32DF2ACD3D3B279ED66EB955E260AF1DCB0E8959857A589F4943D9F2881A14C3
1669CA51B6F30B24FBA0A97D3E8465E23E4FF64CEDAC326536CA1F75ED1BC711
3F026620E63A9F1990A0DB13C2E33342D40AFEB24E186AC112AE2847E94188A4
298D6A7ECA57A9254FE680E5344B9032E0E810DA0191D78DC4590C6F4A4A6E85
66252685186A6E455B0BC940D1ADE3C4488AEDC5005E81BF78DA7A79695EC1A3
81DD5C91B731F89EF2AF798497647AE5561580312FC0FC8B3AFB877181D83137
0F90ACB16C11052C21BD8D75D9A93A375C05D84C932E3DF197DBCA9EA7EF270F
C45C5C09ACA1CE60F37C13F666C09ADF8063C7B805C438ADBE8AE3408EBB6E81
2122AC45DB6AC8045322CC1A6BECE84A1BB52CBA4618442B3D26B16434BCB60D
BFF367CB65DFB3A6A4F461F3154D1C493BCFAD6209703B06B52BD4EBB66F78E2
C5C351C87EB126A88A279B73A0615F840608A17BA22DCA79ABA59C33184E620C
8C9F2834ACFCF16F0D1B0CA3FCEC8D676AD1E8CEC630BB53674BE3E292A2FE80
BE91365DFD306BDBC408F67AED016A73BA0D3430D540BE77E249546AEADFCFDE
52F22BEF34F7BB1B1C575AD4C8278F0385DA62ACDF1DE9348FBDC32A12A92A38
55ACF362F5729D7255F7A9BCC676C77924AC079B774A8CC62356886E9B27AFB1
ABFE628A6567768FD3A5AD451015251DD086A8D2A91C2A290F89A668E456DA32
569BC77FE5AF2F8A4F93075F35E31F0F60669F73F908BBE04BEFBBF77C6C32B8
8FF3F1046E4EB2CD942E70747EA900A18E62BA4676860D0F2CBA941C24205C9F
1790C2B7A1A6ABC96302B04163FCE3091F2FF0E1AF77CCD34EA97E8827E0DF68
9791A637409A58A274BBA0351E4EB7EEBF8514C80C79DC71ACB9334B3268C2FB
C093F5FA418BC13710F72DDE3B6EBB800DFB555B9E8EF4ED49A0D462259EC36F
55B9C7706EA87C512731A044FBC14B525B67CC6F3CDD579DAAD12853DCD7BCA4
EEE57DD7DE2478A2B4F845FD42EC3E08AE30842FCF3B0E4E69B1ADA04C0BBCB4
77371CD3FA09466CF2D7B195E84B2DA1F5CC19C951D92A80AC14C297746AD019
DFB4D758FD83A3B8E481D6DDCB20F71385693E6B75BFC0436205231264EAB0C8
3AB69764FDB0D304F9ECE6A91142D95593EF9FD51E984D191D459942B6D22E4C
45DCCB51687CED6E30AC81F9D15BA63CF7CC2822A913F10B226B6B3502746636
481D83CC9DEA7C2765D1983BD77CC4F02023B383E39712D024E9D9E81852FE74
F0D0781CDC5303AE631B7AA2484EABBEAB8932A66D7782371D3D4884B50E1295
C517FC56BCAD99F7731B8B087C0C1D51C663DBA72B2A6879C6F55AB8AAABA212
5F364237560ECA59253BA1D99F3323786B274FF958612A67D2F5A6F86FFB9ACB
4FBEF2BF7C1EF80039192B9718E8A3C6D21DABB02D29E59C5147587FBD71F44A
2A99BDB16E646DB87529167111B5E3091B7578A5ECAF81090B6BA558C661A489
F51BC4669F444AAF97BCA6F89F16DDC49EF239E2A4F63F6E669C97AE549BF090
6F0F478801319E9C4EFFAB2540EA06EDC96F62632235D781043CED8B0B99C806
C4515A6111439A38CF68D7F8870508F89B2BFF0B39F0D623081986BAC7BE309A
DA67E50F9C3E633335336696BA03EFB6E916C87C5C61B1A2CE0A7679A9F255C6
640ABCA9DD7EE1718C632C3971F552867AA386060985CEC6E0C30B23F8B5FCE9
88C624FF44D2ECD2CE5C88EE8FDB5E313E9411AECD6390F8027137D6FCA1F8F1
EFF0232674661796A98B4E23A17008844048B623673100660F383E0206979385
AD8AB3B48C4FFD3D428036E074170F62339DD88D2F192FFB2B5BBAD18B95F031
362CB594A3D6D3F841945B8EDBCDE9CFD2BC34DF6068C72D3FE008DF3217AAC2
9BDA6BCD32FD6801B19943218F5991432122B9D0B75833FAEB94966600A8B720
DC21DE0755EEE6F50ABF32A38D252B6668089F50930339C0DB023D08E568308E
A466DC7DB84DEB6DA73092F21F04F718009DBA58BF40F5F29D23C61FD5E78CBF
E7A6F095480314679B3B19662DC92A3A3F8D082AC5C1C0427AD24E2C9976490B
46B8B2412648506E87CD85E84C54E47C448AB0EECCCBC6EE6C5F3EDCBF582182
FBE2B7C87D5FF063561453FC99AD6F013F777474148DADF08503BFA9A91CA4CD
F27B4328440590B36C9B730F82F080F32BD2B720BB2C5A1C9673DCD9796C8B72
68EFE5EE6B0CC0781AED1350BEEDA283565396A73738758A19661381D5634AC8
4F947C3B26BC7A7366FD445215540AF94546ADDCFBB99FFA480FF4A5D0E40E38
6F32B5BC0788181F511102AB15CDC60F6EF5689362C51134B7EF26D10EE05685
EA4B31E5396C4287550DFE1D95ECFE48911B4F84FF71A7A260E60CC675EA48DC
BBCA49EB4131D9796D5E9A6CCA98D3BAAA326A7D725A4E99E22D9F51DAEDF587
3816653E5215E436CFC6EB4D2258715A1599CD916AE4DA13B77932132FBD3B8F
4A8D95DA6F09568FD192E619591F4674B74BF4CA9EE6F55BB6CA9944962E0954
1FBB7A00956D1ACA7D8C2353C0D75B123B7FBD24DFE37E306818D06A0B4EF2F9
A8AC2B8B7A56ACF76DE55758C98B755BFE0F87095662704EA87224D53256E171
C25804C38411EDE2A30044E0889EC4BC46E258553D6FE715163C9C2D10BC7D0B
5EAB4E24FFFCFBAA164F52F31EC79ECF19CA2D97DBCA5E9E71CAAF5A17D5A9D7
05EEEB68407E0B7D73B504D763D040F716DBCAC9332BAAFF7C1EF564CF6AA384
548E4DFEAB5DA33984D5115933D29B58D6CE52E46192F97E1456B820E7CE69A6
65B6D111B9B064801D47F41D9A13EBBE7789DD82B217D6579A32CCBB0850102A
951DFA1109F5A1633D9DDE1F4C98C8381FC139F16D5FF5D801A5B2FBF2ADC610
56DB25D864C9AAF838731F678A7044D423ECDB5AC3E3BE3A5E240AA619A29D71
035923D6EE9BC66EF49B235BC5F1655DF9847D757EA7565601BEE566EFC53A6C
B6D894DF1F560A9B4F5DC921F0C26A43A29276497A030DBC2D312B443B447D57
5697E3C6637F9A3C1223DC3B9A032E1187A0613C41954E33FCE065305179BA96
D4C42B00DA4D4C15245CDC5BFD9A32377E333993C8BB2F7324E04F4894F6BFED
08A0AA0095E584B787EE07D3FAFCC5552087DCC346D1DF101C14CE59B4AF52F9
C8EE1741CACD76B68BD6B181A2CABA3E7FE6ECDEF3B7A92F30142266E0DEC39F
A286F1AEA0A95879E83C8B6413271BEF86FEFCB829B40EB8F2E65AA300473E2B
45A48625D8AA29C5AFD73A2CD76389CDFA0CAEAF0A927D5CC7FAC4016DD87BF6
95B8DFB8A49EE382FAAD8D5DB44108662E89AAA1EA742323DA53DAAB07AB4CC3
E4892E4756711A6A5632CA371D344CD8729528FBE2DAE85D8EA07DBFB56DCF2C
AAC1B2FA37521C1361BAB3D63770E58DD95BF2903D640F274D8CA79166A35785
89A939A0B9478149F1AB5807BB3E3434C3F4AC56D2E43B534873038FB52A720A
F825ED37B4105AE8552913CC64E7A611F3AF42504D9E2D2B3D9213A2C93FD808
EE7C8E95742E7D6C591A3F711FBFA584B3E5711F384D438218016D75963DCB60
A4402FE7A7CEADA910C5210C5800FA41388F1DEA3022EA0B260F3661B60A44F8
C83BA7B3AE156145CC16B6AF212AE281C93A77466C0648EFD6D5A598F702E498
E2A0DE30B5EFA9FDF28E05C57BB1326CC26C3D6598C946E1062DBCAB14145980
296A73F7536A45C42C20622DDD5646618D65D8EF0999270B83378748230B0590
44CFBFC712A989CAA1E50CC5B6CB8023C8334875D5DCDFE247CC96D6F2DED895
4E5340C2AF25E5EBA344D34F2D0B670D97E58D22D14E08900F2099262E805677
569210EB8C4212CE6DA95C46015CEFAFC5E60A80BB2096C4CC9A5DC5405B7333
DDA2CC6BB5BCFDD312B5CBFC4A91CBEDC8E829E698C5ECB5152A356DCA8C7992
B171D6887E61DB5815A50C1C7E782DA21854B9B11C9D25573856C072C902F9DA
ED4842147D362FC135C77AE6FBD220821293105D38E74A9BCC26933C02E6A632
132984B3C40784CCCA7E1ED0131ACF8102BFD0E48771D4796D89DC240E663F55
779BE57B61581B98D78FC4968C9D99E936C2CD3549E6694A24DA005C18D67F88
4374DE01ABC8C471ED04380EFE11AD7311DE1E29EEED418F1A1EADA279E0D04B
B346591A8A32DE5E0367B7006F75D0B92876456A4AA8BEA9174AE8D0A700FAD4
F7346414EDB40D1165F0DFC6C644930E0052801FC5C8FE68E5467D3E8AFAAF7B
3B2E5DE7D4834B2939343B0605C6EA4868697A7224E399370914AB0CBEB8A8D6
BD4F97156AAA28480868375EA6894B275D9A9FCD36D123749BF012186867A2E9
399EFCB62C59BFDFBCE2D94B18CB27405613AF6AB7F2C1ADEA49BB801FF80E20
4D2C9B146069322CB480ABD371E88ADAAF69FBE9C3DBDAC63748B9ACBF4449A4
E3A85860F195C4BDBA517B3E359ACC65FC43550339B2885451A097B1667971EA
1432DB43347FBA7AE1BE4E50A212E04BC1C88BF1A9550F9D1B6502E55CC10DA0
697CCF6964DB832A3383281FFA1A7A31B13D7B0494AEB0AFC2C3103E2009D863
30DB8310D1A3185A3B4AB18E7B93C19AF284441D913DEFC2F6FE5FD8049674CE
10252F991258B7898DCDA29300AC761FF5C2198E6A6966DE25D75B644A43C5A3
857F7961C4782D9E8E82F7BC7FBF2F8D7358A25DC11755A2A3EABA478FA1AC7C
6C2740C5BFCB50FD5E96F949F7FEED84C857186645C4674986204D3057384CC8
ACA890735B7EE54A402C41D8EAA0A2D1CCE4B498CC627C7A6C1C0AB854F6B150
F34981DB479C04653B9E3DCF2C3E9729021792F082E87E9361E65E5E5759E7EA
412DDD62F0BA45B24888D55D44525B61A947C815EEC05613601BF057D8D686AE
D98323189F3F9FB0F444B6953134E1DF98B5BD40190510310F0B44CB99AC1BC5
436BEA5189EF54E8DAD9839929B3983D7DFAE96AB5278F5E504074173819BABE
5F350C4D2488E65E790009003E036DA12D9CEB101C6F941BBBA29A0C42F85CED
8FF5B05EA759AABD73927DAD4EB55D7805BC28FBE3E0FF266F35E74C00F2A5C1
EE44CC459F51E6C97DCE47F169D450E40F34E7E8E24CE1CD912AF6FC48B2CDA2
B90CB5888650CBC42BD934863DD3B8E5BD7515D3651C6A71A10839543C564656
C371E113A4A1F69773898BA4B7EA5086D8C6FFFF0F7605E28E2770639656FF41
E74E11FDCE966D9B0B40A0828582190FAFF8ED0CF5CDA37F74893F360FD2D602
B340A213B993472AB8004FABB2A8D341DD6E3717B1FFDF60EE1780932F66351D
ABB7512B0C01220903686FDB9FE2655D60D520D1BC4736E5AC694804F3EA401E
C2264128C0E1EF5A7FAF9D63257E9CB70E939D0F143540CA685A9B818933878C
8FCE38DE033A6F9EEEC5D6EA7A804C6C5452E34A39E0E5075F4B883436518440
11C01BE61060719034EA718204057633AA821D882F77E30871B880900063CCC7
FA0BEC71602E0E5B7E9B74FDF5755172AC12F46CC51EA7BC31621F217DF8610F
CE89116326EA522450702487F2020AE94DF31474C43A06740A066FDD72639038
AA32144979F986C532A03FE8C1E8CFC503D8810EB3386D08D1E7341F27704C8A
9F5E26681015577EBF48EE7D6F92CB79D518B4AAD6D53E166FF3ADF95F62B4D4
81E5D42FC229CE2A91FF4F4E5247C430AB6A509C2DF93AD317644F7DEEE7FED7
10DFEBA708196774C6F6ABDBFEACC2B47D038D0A8EA26BB642761B3A566D5382
A9770813DF2B1B539CE617ABA01DCBE21749C578B1B3D21CF39E825874A91F64
51F6CA0AF37580F4D09AE2C241951827CEBE1A8E0F4BEEE17F862CB344FA23A6
544269C3F88EAF5D23CF8DF109CD243A116D741C04376928F45CA196014AACE3
0E79A10A5F3352AC3D7BFC5ADB00FA34E89AA9AEFDA4D4EB38C9368B18F81071
65C6A5171D6A9BA4E09DEE1ABD87F62376C4769F37E50907C859F7FA71038F25
3591EBD56632334B46A5DBCE3446B11467C32847C34887E915F5F31E3E083456
D462DA2A0D34FE5CFB5B8D9E8A3C52F6212047D937A964E1818F6F130877D033
7CDF0A807588683D85B7548606E78C3C1F3EDEBB2C1755DA24C64792E3B82D46
A1CDF34FE0E8E3810C8F9460570BBCFC4F98D42A0B048C8E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 153[288 102[{ enclmec ReEncodeFont }1 885.568
/LMRoman8-Regular rf /Fb 203[993 52[{}1 1328.35 /wasy10
rf /Fc 207[255 33[470 13[732{ enclmmathsy ReEncodeFont }3
885.568 /LMMathSymbols8-Regular rf /Fd 135[530 21[403
500 97[{ enclmmathit ReEncodeFont }3 885.568 /LMMathItalic8-Regular
rf /Fe 152[780 4[867 780 97[{ enclmec ReEncodeFont }3
1594.02 /LMRoman12-Regular rf /Ff 154[966 101[{}1 1328.35
/TeX-feymr10 rf /Fg 185[723 4[830 14[553 3[307 46[{
 enclmec ReEncodeFont }4 1106.96 /LMRoman10-Regular rf
/Fh 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fi 198[470 470 470 470
470 470 470 470 470 470 48[{ enclmrm ReEncodeFont }10
885.568 /LMRoman8-Regular rf /Fj 254[369 1033{
 enclmmathsy ReEncodeFont }2 1328.35 /LMMathSymbols10-Regular
rf /Fk 194[1012 3[650 2[650 650 1[650 650 650 650 4[1012
1[506 506 40[{ enclmrm ReEncodeFont }11 1328.35 /LMRoman12-Regular
rf /Fl 134[634 739 3[470 6[1138 387 676 2[749 623 641
1[676 1[553 683 12[762 2[1030 838 18[650 1[361 59[{
 enclmmathit ReEncodeFont }17 1328.35 /LMMathItalic12-Regular
rf /Fm 3[723 5[650 17[650 105[578 686 686 939 686 723
506 513 506 686 723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 2[1336 975 1[939 723
2[885 2[1192 813 1011 668 469 975 1021 849 885 993 939
921 975 6[361 1[650 1[650 650 650 650 650 650 650 1[361
434 361 2[506 506 6[361 33[{ enclmec ReEncodeFont }63
1328.35 /LMRoman12-Regular rf /Fn 3[1196 23[1046 108[1554
1136 1196 837 849 879 1[1196 1076 1196 1793 598 1136
1[598 1196 1076 1[982 1196 956 1196 1046 9[2223 3[1196
3[1616 1682 2041 3[801 1682 1691 1353 1412 1[1554 1530
1625 10[1076 1076 1076 1076 1076 1076 1076 1076 598 717
45[{ enclmec ReEncodeFont }45 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)717 b(2.2)g(-)h(1)f(Anstieg)f(b)60 b(erec)-60 b(hnen)716
b(-)h(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741
4800 a Fm(1.)p 0 TeXcolorgray 651 w(Der)353 b(Graph)f(einer)h(linearen)
g(F)-108 b(unktion)352 b Fl(f)494 b Fm(mit)353 b(der)g(F)-108
b(unktionsgleic)-36 b(h)g(ung)352 b Fl(f)142 b Fk(\()p
Fl(x)p Fk(\))369 b(=)f Fl(k)175 b Fj(\001)130 b Fl(x)g
Fk(+)g Fl(d)887 6792 y Fm(v)-36 b(erl\344uft)434 b(durc)-36
b(h)433 b(die)g(Punkte)g Fl(P)550 b Fk(=)369 b(\()p Fj(\000)p
Fk(10)p Fl(=)p Fk(20\))435 b Fm(und)d Fl(Q)369 b Fk(=)g(\(20)p
Fl(=)p Fk(5\))p Fm(.)921 9338 y(Berec)-36 b(hne)433 b(den)g(W)-108
b(ert)433 b(v)-36 b(on)434 b Fl(k)45 b Fm(!)p 1 0 0 TeXcolorrgb
921 13875 a Fl(k)414 b Fk(=)369 b Fj(\000)4558 13352
y Fi(1)p 4558 13565 471 45 v 4558 14333 a(2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123 b(A)369 b(2.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
17808 54804 45 v -2331 23110 a Fn(F)-239 b(A)717 b(2.2)g(-)h(2)f
(Gespr\344c)-60 b(hsgeb\374hr)715 b(-)j(O)-60 b(A)718
b(-)f(BIFIE)p 0 TeXcolorgray -741 26417 a Fm(2.)p 0 TeXcolorgray
651 w(In)304 b(der)h(nac)-36 b(hstehenden)302 b(Abbildung)i(ist)h(der)f
(Graph)f(zur)i(Berec)-36 b(hn)g(ung)303 b(eines)i(Handytarifs)921
28409 y(dargestellt.)921 30955 y(Der)537 b(T)-108 b(arif)538
b(sieh)-36 b(t)537 b(eine)g(monatlic)-36 b(he)537 b(Grundgeb\374hr)d(v)
-36 b(or,)538 b(die)f(eine)g(gewisse)h(Anzahl)f(an)921
32946 y(F)-108 b(reimin)-36 b(uten)339 b(\(f\374r)h(diese)g(Anzahl)h
(an)f(Min)-36 b(uten)339 b(ist)i(k)-36 b(eine)341 b(zus\344tzlic)-36
b(he)340 b(Gespr\344c)-36 b(hsgeb\374hr)887 34938 y(v)g(orgesehen\))434
b(b)36 b(einhaltet.)p 0 TeXcolorgray 0 TeXcolorgray 3379
57213 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 361.88202 a add def
/d 0.0 a add neg def /h 179.22278 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3379 57213 a 5770 54926 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 7 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 340.28381 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 158.5638 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.43628
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 340.28381  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 340.28381  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 158.5638  def /dT 1863600 abs 65536 div viceversa
{ neg } if def /DT 100. abs viceversa { neg } if def /subTNo 2 def
subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0
0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 0.28436  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 0.28436
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 158.5638
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 340.28381
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 158.5638  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 158.5638  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 340.28381  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 158.5638
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 340.28381
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4525 55211 a Fi(0)4054
52062 y(10)4054 48912 y(20)4054 45762 y(30)4054 42612
y(40)4054 39462 y(50)5535 56272 y(0)2207 b(100)1738 b(200)g(300)f(400)h
(500)g(600)g(700)g(800)f(900)1503 b(1000)1268 b(1100)5770
54926 y
tx@Dict begin  { 7.72942 153.32336 } PutCoor PutBegin  end
 5770 54926 a 915 x Fm(K)-36 b(osten)434 b(in)f(Euro)5770
54926 y
tx@Dict begin  PutEnd  end
 5770 54926 a 5770 54926 a
tx@Dict begin  { 241.98582 18.12021 } PutCoor PutBegin  end
 5770 54926 a 915 x
Fm(Gespr\344c)-36 b(hsmin)g(uten)5770 54926 y
tx@Dict begin  PutEnd  end
 5770 54926
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.1814 28.45444 0.0 28.45444   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 236.58969 170.09276 142.1814 28.45444
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 43438 57213 a
currentpoint initclip moveto
 43438 57213 a
921 61197 a Fm(Bestimme)529 b(die)g(Gespr\344c)-36 b(hsk)g(osten)529
b(pro)g(Min)-36 b(ute,)528 b(w)-36 b(enn)529 b(die)g(Anzahl)g(der)g(F)
-108 b(reimin)-36 b(uten)921 63189 y(\374b)36 b(ersc)-36
b(hritten)432 b(wird!)p 1 0 0 TeXcolorrgb 856 67727 a(15)i(Cen)-36
b(t)433 b(bzw.)h Ff(e)651 b Fm(0,15)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 26417 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 28409 a Fg(F)-123 b(A)369 b(2.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
71460 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(2.2)g(-)h(3)f(Steigung)e
(einer)i(Geraden)f(-)i(O)-60 b(A)718 b(-)f(BIFIE)p 0
TeXcolorgray -741 4800 a Fm(3.)p 0 TeXcolorgray 651 w(Die)471
b(Gerade)f Fl(g)518 b Fm(ist)471 b(durc)-36 b(h)469 b(ihren)h(Graphen)g
(dargestellt.)h(Zus\344tzlic)-36 b(h)471 b(ist)g(ein)f(Steigungs-)921
6792 y(dreiec)-36 b(k)434 b(eingezeic)-36 b(hnet.)p 0
TeXcolorgray 0 TeXcolorgray 12165 34453 a
 currentpoint currentpoint translate 0.52129 0.52129 scale neg exch
neg exch translate
 12165 34453
a 12165 34453 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 389.71523 a add def
/d 0.0 a add neg def /h 438.4295 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12165 34453 a 49827 15667 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -227.62195 -56.90549 -56.90549 -56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -227.62195 170.71646 -227.62195 -56.90549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -9.53577 -120.06496 -284.28473
246.26714   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 49827 15667 a
tx@Dict begin  { -158.19934 -85.09903 } PutCoor PutBegin  end

49827 15667 a Fe(b)49827 15667 y
tx@Dict begin  PutEnd  end
 49827 15667 a 49827
15667 a
tx@Dict begin  { -253.06425 43.09677 } PutCoor PutBegin  end
 49827 15667 a Fe(a)49827 15667 y
tx@Dict begin  PutEnd  end
 49827 15667
a 49827 15667 a
tx@Dict begin  { -135.12404 81.55547 } PutCoor PutBegin  end
 49827 15667 a 0 0 1 TeXcolorrgb -310
x Fe(g)p 0 TeXcolorgray 49827 15667 a
tx@Dict begin  PutEnd  end
 49827 15667 a 55304
34453 a
currentpoint initclip moveto
 55304 34453 a 12165 34453 a
 currentpoint currentpoint translate 1 0.52129 div 1 0.52129 div scale
neg exch neg exch translate
 12165 34453 a 921
38438 a Fm(Ermittle)470 b(einen)h(A)-36 b(usdruc)g(k)469
b(in)i(Abh\344ngigk)-36 b(eit)471 b(v)-36 b(on)471 b
Fl(a)f Fm(und)f Fl(b)i Fm(zur)f(Berec)-36 b(hn)g(ung)469
b(des)h(An-)921 40429 y(stiegs)434 b Fl(k)45 b Fm(!)921
44967 y Fl(k)414 b Fk(=)p 3392 44967 15749 34 v 1 0 0
TeXcolorrgb 921 49504 a Fl(k)g Fk(=)369 b Fj(\000)4558
48981 y Fd(a)p 4558 49194 500 45 v 4607 49962 a(b)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fg(F)-123
b(A)369 b(2.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 53437 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fn(F)-239 b(A)679 b(2.2)h(-)g(4)f(Erw)-60
b(\344rm)g(ung)680 b(v)-60 b(on)680 b(W)-179 b(asser)678
b(-)i(O)-60 b(A)680 b(-)g(Matura)f(2015/16)-2617 4622
y(-)718 b(Haupttermin)p 0 TeXcolorgray -741 7929 a Fm(4.)p
0 TeXcolorgray 651 w(Bei)325 b(einem)g(V)-108 b(ersuc)-36
b(h)323 b(ist)i(eine)g(b)36 b(estimm)-36 b(te)324 b(W)-108
b(assermenge)325 b(f\374r)f(eine)h(Zeit)g Fl(t)f Fm(auf)h(k)-36
b(onstan)g(ter)921 9921 y(Energiestufe)423 b(in)g(einem)g(Mikro)-36
b(w)g(ellenger\344t)424 b(zu)f(erw)-36 b(\344rmen.)423
b(Die)h(A)-36 b(usgangstemp)36 b(eratur)921 11913 y(des)433
b(W)-108 b(assers)434 b(und)f(die)h(T)-108 b(emp)36 b(eratur)433
b(des)g(W)-108 b(assers)434 b(nac)-36 b(h)434 b(30)g(Sekunden)e(w)-36
b(erden)434 b(gemes-)921 13905 y(sen.)p 0 TeXcolorgray
0 TeXcolorgray 12559 16052 21700 45 v 12559 18044 45
1992 v 0.85 TeXcolorgray 12603 18044 12477 1992 v 0 TeXcolorgray
13267 17447 a(Zeit)g(\(in)f(Sekunden\))p 25079 18044
45 1992 v 1861 w Fl(t)368 b Fk(=)h(0)p 29322 18044 V
1373 w Fl(t)g Fk(=)f(30)p 34214 18044 V 12559 18088 21700
45 v 12559 20080 45 1992 v 0.85 TeXcolorgray 12603 20080
12477 1992 v 0 TeXcolorgray 13267 19483 a Fm(T)-108 b(emp)36
b(eratur)433 b(\(in)22444 19001 y Fc(\016)22970 19483
y Fm(C\))p 25079 20080 45 1992 v 1651 w(35,6)p 29322
20080 V 2257 w(41,3)p 34214 20080 V 12559 20125 21700
45 v 921 25135 a(Erg\344nze)511 b(die)g(Gleic)-36 b(h)g(ung)510
b(der)g(zugeh\366rigen)i(linearen)f(F)-108 b(unktion,)510
b(die)h(die)g(T)-108 b(emp)36 b(eratur)921 27127 y Fl(T)181
b Fk(\()p Fl(t)p Fk(\))433 b Fm(zum)g(Zeitpunkt)g Fl(t)g
Fm(b)36 b(esc)-36 b(hreibt.)921 31664 y Fl(T)181 b Fk(\()p
Fl(t)p Fk(\))368 b(=)p 5095 31664 12599 34 v 13262 w
Fj(\001)296 b Fl(t)e Fk(+)h(35)p Fl(;)p Fk(6)p 1 0 0
TeXcolorrgb 921 36201 a Fl(T)181 b Fk(\()p Fl(t)p Fk(\))368
b(=)h(0)p Fl(;)p Fk(19)296 b Fj(\001)g Fl(t)e Fk(+)h(35)p
Fl(;)p Fk(6)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7929 a Fh(___/1)p 1 0 0 TeXcolorrgb 48228 9921
a Fg(F)-123 b(A)369 b(2.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 40009 54804 45 v 0 TeXcolorgray
24746 81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)616 b(2.2)f(-)h(5)g(Steigung)e
(einer)h(linearen)f(F)-179 b(unktion)613 b(-)j(MC)h(-)f(Matura)-2385
4515 y(2013/14)718 b(Haupttermin)p 0 TeXcolorgray -741
7823 a Fm(5.)p 0 TeXcolorgray 651 w(F)-27 b(\374nf)433
b(lineare)h(F)-108 b(unktionen)432 b(sind)i(in)f(v)-36
b(ersc)g(hiedener)433 b(W)-108 b(eise)434 b(dargestellt.)921
10368 y(Kreuze)476 b(jene)h(b)36 b(eiden)476 b(Darstellungen)h(an,)g(b)
36 b(ei)477 b(denen)f(die)h(Steigung)f(der)g(dargestellten)921
12360 y(linearen)434 b(F)-108 b(unktion)432 b(den)h(W)-108
b(ert)433 b Fl(k)414 b Fk(=)369 b Fj(\000)p Fk(2)434
b Fm(annimm)-36 b(t!)p 11181 15171 24022 45 v 11181 28679
45 13509 v 11890 17875 6418 45 v 11890 19867 45 1992
v 12598 19269 a Fl(x)p 14001 19867 V 1373 w(m)p Fk(\()p
Fl(x)p Fk(\))p 18262 19867 V 11890 19911 6418 45 v 11890
21903 45 1992 v 12642 21305 a Fm(5)p 14001 21903 V 2537
w(3)p 18262 21903 V 11890 21947 6418 45 v 11890 23939
45 1992 v 12642 23342 a(6)p 14001 23939 V 2537 w(1)p
18262 23939 V 11890 23983 6418 45 v 11890 25975 45 1992
v 12642 25378 a(8)p 14001 25975 V 2320 w(-3)p 18262 25975
V 11890 26020 6418 45 v 32793 28679 45 13509 v 1 0 0
TeXcolorrgb 33502 22257 a Fb(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35158 28679 V 11181 28723
24022 45 v 11181 31941 45 3219 v 11890 30665 a Fl(g)48
b Fk(\()p Fl(x)p Fk(\))368 b(=)g Fj(\000)p Fk(2)296 b(+)f(3)p
Fl(x)p 32793 31941 V 35158 31941 V 11181 31986 24022
45 v 11181 45494 45 13509 v 11890 34690 6029 45 v 11890
36681 45 1992 v 12598 36084 a(x)p 14001 36681 V 1373
w(h)p Fk(\()p Fl(x)p Fk(\))p 17873 36681 V 11890 36726
6029 45 v 11890 38718 45 1992 v 12642 38120 a Fm(0)p
14001 38718 V 2126 w(-2)p 17873 38718 V 11890 38762 6029
45 v 11890 40754 45 1992 v 12642 40156 a(1)p 14001 40754
V 2342 w(0)p 17873 40754 V 11890 40798 6029 45 v 11890
42790 45 1992 v 12642 42192 a(2)p 14001 42790 V 2342
w(2)p 17873 42790 V 11890 42834 6029 45 v 32793 45494
45 13509 v 35158 45494 V 11181 45538 24022 45 v 11181
64204 45 18667 v 11890 63259 a
 currentpoint currentpoint translate 0.714 0.714 scale neg exch neg
exch translate
 11890 63259 a 11890 63259
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.07468 a add def
/d 0.0 a add neg def /h 212.25763 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11890 63259 a 25433 54440 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 133.7278 0.0 -122.34688 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 132.58987 0.0 -79.66776   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 133.7278  0 -122.34688  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -122.34688
 133.7278  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.66776  def /maxTickline 132.58987  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.58987
0.0 -79.66776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.7278
0.0 -122.34688 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.58987  0 -79.66776  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -79.66776
 132.58987  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.34688  def /maxTickline 133.7278  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.58987
0.0 -79.66776   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 133.7278
0.0 -122.34688 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24188 51576 a
Fi(1)24187 48426 y(2)24187 45277 y(3)24187 42127 y(4)23456
57829 y Fc(\000)p Fi(1)23456 60979 y Fc(\000)p Fi(2)28347
55786 y(1)2680 b(2)f(3)h(4)-16584 b Fc(\000)p Fi(1)-4352
b Fc(\000)p Fi(2)h Fc(\000)p Fi(3)f Fc(\000)p Fi(4)25433
54440 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 25433 54440 a 25433 54440 a
tx@Dict begin  { 133.7278 132.58987 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 25433 54440 a 25433
54440 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 25433 54440 a 25090 54726 a Fm(x)25433 54440
y
tx@Dict begin  PutEnd  end
 25433 54440 a 25433 54440 a
tx@Dict begin  PutEnd  end
 25433 54440 a 25433 54440
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 25433 54440 a 25433 54440 a
tx@Dict begin  { 0.0 0.0 pop 133.7278 132.58987 exch pop } PutCoor
PutBegin  end
 25433 54440 a 25433 54440
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 25433 54440 a 24385 54772 a Fm(f\(x\))25433 54440 y
tx@Dict begin  PutEnd  end

25433 54440 a 25433 54440 a
tx@Dict begin  PutEnd  end
 25433 54440 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.3 def /x1 4.7 def /dx x1 x sub
49 div def /F@pstplot ((--2.--1.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 25433 54440 a
tx@Dict begin  { -33.00528 42.10992 } PutCoor PutBegin  end
 25433 54440 a
610 x Fa(f)25433 54440 y
tx@Dict begin  PutEnd  end
 25433 54440 a 40236 63259 a
currentpoint initclip moveto

40236 63259 a 11890 63259 a
 currentpoint currentpoint translate 1 0.714 div 1 0.714 div scale
neg exch neg exch translate
 11890 63259 a 32793 64204
45 18667 v 35158 64204 V 11181 64248 24022 45 v 11181
67690 45 3442 v 3028 x Fl(l)29 b Fk(\()p Fl(x)p Fk(\))369
b(=)15939 65764 y Fi(3)p Fc(\000)p Fi(4)p Fd(x)p 15939
65977 2203 45 v 16805 66745 a Fi(2)p 32793 67690 45 3442
v 1 0 0 TeXcolorrgb 33502 66301 a Fb(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 35158 67690 V 11181
67734 24022 45 v 47992 7823 a Fh(___/1)p 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
71762 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)728 b(2.2)f(-)i(6)f(Steigung)e
(des)h(Graphen)g(einer)g(linearen)f(F)-179 b(unktion)726
b(-)-2331 4515 y(O)-60 b(A)718 b(-)g(Matura)f(2013/14)g(1.)g(Neb)60
b(en)-60 b(termin)p 0 TeXcolorgray -741 7823 a Fm(6.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(eine)f(Gleic)-36
b(h)g(ung)433 b(einer)g(Geraden)g Fl(g)481 b Fm(in)433
b(der)g(Eb)36 b(ene:)434 b Fk(3)295 b Fj(\001)g Fl(x)h
Fk(+)f(5)g Fj(\001)g Fl(y)417 b Fk(=)369 b(15)p Fm(.)921
10368 y(Gib)376 b(die)g(Steigung)h(des)f(Graphen)f(der)h(dieser)g
(Gleic)-36 b(h)g(ung)376 b(zugeordneten)f(linearen)i(F)-108
b(unk-)921 12360 y(tion)434 b(an!)p 1 0 0 TeXcolorrgb
921 16897 a(Die)g(Steigung)g(der)f(zugeordneten)f(linearen)i(F)-108
b(unktion)433 b(b)36 b(etr\344gt)433 b Fj(\000)35037
16374 y Fi(3)p 35037 16587 471 45 v 35037 17355 a(5)921
19443 y Fm(Ein)392 b(Punkt)f(f\374r)h(die)f(ric)-36 b(h)g(tige)392
b(L\366sung.)g(Wird)g(die)g(Steigung)g(der)f(linearen)h(F)-108
b(unktion)391 b(z.B.)921 21435 y(mit)444 b Fl(k)488 b
Fm(o)36 b(der)444 b(mit)f Fl(f)10594 20953 y Fc(0)10905
21435 y Fk(\()p Fl(x)p Fk(\))g Fm(b)36 b(ezeic)-36 b(hnet,)443
b(so)h(ist)f(dies)h(als)g(ric)-36 b(h)g(tig)444 b(zu)f(w)-36
b(erten.)443 b(Jede)h(k)-36 b(orrekte)921 23427 y(Sc)g(hreib)g(w)g
(eise)492 b(des)g(Ergebnisses)h(\(als)g(\344quiv)-72
b(alen)-36 b(ter)494 b(Bruc)-36 b(h)491 b(o)36 b(der)493
b(als)g(Dezimalzahl\))h(ist)921 25418 y(als)434 b(ric)-36
b(h)g(tig)434 b(zu)f(w)-36 b(erten.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fh(___/1)p
1 0 0 TeXcolorrgb 48228 9815 a Fg(F)-123 b(A)369 b(2.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
29152 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(5)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

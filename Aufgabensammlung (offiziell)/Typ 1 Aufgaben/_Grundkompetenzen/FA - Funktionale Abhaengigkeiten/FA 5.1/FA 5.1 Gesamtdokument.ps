%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.1/FA 5.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:52:37 2017
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols10-Regular LMRoman10-Regular
%%+ LMMathItalic8-Regular LMMathSymbols8-Regular MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 5.1/FA 5.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0952
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E3353D075A1
E740C054E9AA191CC6A2B8E854AC7E02D6C53ABB1608ADACCABE3D5AC2F894E8
5E234F72A1C099901DE1E49328D413CEE1295B615F37F139B70238D0C3177995
99A49939640D06478EF23B0FA6C4056FC2D15FB7800AF689C6868DB1E0A5D946
81993A3B3C100B5FA02EC334CEE85D1801AAFFC4A9253F6BC832A0E63EDB6F31
07FCC58C94F34096603C9E8E3719950691B4B5D8C0BB08883E09585EB7530664
C79582CCDFDDA4B4E487A57D8207DD18420AF0A75C5534B47DC12F571F827CA7
B93D28D1B195DACC47FE5FDC29EDD6C97DEF92E40FA9F957D6EC2A2902F7C4D6
8E837E7D573068C55D4470801D8E2D6B5972D30B54C54E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CBCE8DD618C282235CEA785C6A78D2363395579F2B2
D33E0A96FDE83A8A5594696CD718ED3BB458C2DA505105E6365BD57F140ECA79
A7DBC5BDC4692FEEA0C69754128BFF3B534AA2ED4E09E32A48A080A0528C027A
06DBB52362404C99C58A664D4ADEDF7B74E13E6D85E03E615A60A780F3788AAC
A2DC8EFBF1825630B15574DC1FEEC3A21CE1DE2CADAEE76E1540527E73B23D9C
B14BB4086687E740D8095E63F70CAAEF65D1CDE3764707A201142248276B7E4F
8924750C8361FDB1FA32821194D299ABF128FE251173268B8CCF777D3CB7717F
11B426808D7D9F477C48D7B6A7C242ADAA8595AA08E39E580442D3C50CD9E8D4
3B56D68065A97B680ABF57E74C65C720927327296C23CB5F312C82783B949195
1A63A8F7B71E650130F8C1FED4966E36E7E879A87DF95D1B75FBEDC03D02F28A
0B8845A0944098C4AA0F3D0894AC4BA9F2B4B8E959E8877C94C6AA9575819DDF
023FF06A5F3B1A51AE4850C6FDD58F3B6999DB5E1A4CB1BF6A6F67F27976C6BC
954572891470D5B7A0906CD92658FEFE5A0ADC08552CA63534B61B3AEDB1755A
0341E20E4D894D2DD8099F6BAE43C01A924BB9615DBB6786DF6522B4AFF4D46E
8B522CC9AB6FC6D10AF305373E1B87A5E462AD7A712809845D79276638214467
316210E275C4AAC7931329F212BB8B5B9215BEAF72F041F17D55B49B81F3D127
9D135C9F7A05F120B9638E9DC9E65F758F0FC4FD7904B0C56ADC1A80619F155C
66DC637B24236DAFE0AF946337B119A917B10B32ED08E7711ABC3095A121B119
34FE858B995425092493D68033973B109C672ACDB5F732AE79AFECC01BA71086
2054F5817029FFC5F7284FFFFEB953A66691941FB3973E9829A8FB1659758482
5C7F2C49C6B55ECDFCAB2B87D00D84B6D0D4D7284A86FC797DCC1F99EE10677B
75E6F729E7E3BDCBF977D12A5C7BE23CB6EDE16C25E0D9EB07239AC5559454E8
F5D1A42D40CCFBC093AFD3E57973A0090A01235C12F607A4139FF20EAAEF2D5C
A5FD46F35AC3BCBF7AF61BEB41C26625394C767E4C0626C13C0D563FA6FC5A86
F9BDF14A59162961B280502F27EF7A6B4FA4B11B77ED898E896641B9F86AE3D7
E87688B2FFA477AA0B2F168310201FDC21D8E7E138DBE9C6E0F4BA355E97E141
B329A5142044F25157048A584DBD875150EB9AD3A9076AF4C138F30F73A8119E
434F7C41F291B85B0EEE2F5CE49F798629B23E9A9771555F0147C4865C0F7602
5073A848B860D328938D7D6FFA38649459D69203E444AA8392F9FE9EEA6051DA
713B5E3DBE4C03FAA6873935CEF2FA317CE83085596E4D0AA9BD1D2B43CF1B81
10FE9D58EA3C1447F5DFB6FDD56050966B99E0B4B9EECA94FCD76BE404F931FF
E43F733C85664D8405A47CB045D621DDD1FADEC18114C8BBC12F1CDD9A60E6A8
FB70936384BB303B281D4310062D52706FC806C501902C2D351AE9257B40F760
86826D99DD330009EF458A4C834706352BFA6C93205F813796C0A5C81204ECA3
3FC953552093DD43FA3C052497E975F92C80BC80A6D0F47D5F4E1CC76E665A77
5011FA4A282CDCAB12B1A8BE368C54802B7130AFE9D940E9A5E280F9C8109112
EAB230B5C17AB3B363FE03616F9B97747AD10DEFA6822D38F8A5FC2EFA40287A
8598287F22D7AA4488C9A1F58B9D2F7962A978D2B344843436A7FF226FDE0548
6840C1EB784D382BEABA4D1A7AF6888BD68880337508E8E481D8F59478C35591
A5A47C1D73E4F0D750B5F9DD089FC1550EDAFFFDC495E16A2E2372659E132A23
072B467B0723D5809038CCCDC8A774584398F5AB2985F9BC63FCF904057FBF25
FABDE30B6C0D87FCF9F762FCF3EBF6FF51D40946516D06E47C783928B6FFCF4F
74DE63E80038E772F3E007266E25D51C89B80C84FCCB755AD080CBA0F484EA85
36654E118521208448D0D69F1EE2CA3BA26D454F9600DAA5A0B77D0E4C3901FF
C7E0B5B89B89A4F201E4EE8F33910F5DF0BE1AD85B87EB5B072A7145DF078797
8DFE910283779628C1F90C7C7F4D6892800AF182C9372C4A17D4CDAE75FD9990
615E2111622A188878F19645D53D64B00BC1927199A758E148249B54DB2E848E
92674EA2DEA90BDCC8445198E6CDCE13DEBC9F9A88952A94935CE818C1425ABD
E9930E67A1F2E6F7CB7E077C2F2C6B4559F35C8682418BE8BA5D78DCE7B057C0
629572901535C44C15EC8D33D2C9198509B170721846713598ADF480B4E01459
A2F1050CFAC6A6BFB7EBD8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C54BA1B0981AFE60C32AE5AEA6F1BA42EEAD2C89312DA8D4EA9E
4728E8FE799616C7F79EFAC5C4F5BCA65317E45DEAF86873DBD525C29DA1F2D3
3041FFA2445CA658CFAAED3C30CECE4F2514A132C95F5CBCA3A139F60B929FB8
72EB89B9E71EA6161CE4DC61D1F0FDB69AC593886BB0459536ED20609422AA71
AB51589A018331D25E5B0F5E48FB91D15C10357563DFE608A3CD20A80D08E270
1A520E35CC383CE5CD307D419B5EB603FC44D6869D4A1731673EB4D084BB1534
7693FC31907FD6094EC7065BED405AEAFCB4783DAEC99BC7A3A82EB333E78317
ACD72DAA3215E2C2823903980506A9F523F673BA8CF49FF629186E5AE8335042
BBEBC8DCF193CA3D40E5337359272C890DE990FA8A632DA2E3BC27F9476CB699
295F324F6901C647D65547A0EC71D4169ECC5A9AF15C361F4CA0CB8ABF336E7D
8DAE03CB25E6664A35015FC9684B7899AB6E46C2AC119FEE2CCBFAE53B96143D
E8C23DBCA777AC4E842F3A5247CD38F0C8DFC61D9996A8FBF914209AE12FA680
17DD0820EFEB02CDE5BF84E5F1E8C8572A5A86D808FF1497362CC036695A3B1B
CCFCEDA9577FB496F376710C86A02109B864FE34566E17B4A1A09F9BA10DED06
0F5AE4AD3C94DEA662B7342EFDC90B3BCAB589A88641B4C53C0D65940F2D3916
FE46C254C25AFF36E0A79983B5D27B079F4B1FE2A89AD72D1D1AD2BF8BC6B31E
4ADFC2A90B9A7B70258F993C87F2C75BD72B5278CF84E2A883DCF21F61FC2EE6
DF51A16B4969B5619E2B15FEDB0F7B5D8690F5323C48054E47E3F61DD358C698
35A31914818EF301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6BAC2210992E
8C115F926BB8BDD04004EDACB8E3A599A56D93AF6603E7BE95D2B9E8B9F50EFE
02A94198A795EA3AA8F36F17AEA7B3CF3B80E235C0C70C895EDF6B031ED3CC1A
7DD250065F3ECA5C4583845A6E0F89C9EDC2F8737A0C119FC35E435A69079A46
C84B3CF54BAAB62AC19D25E46C51D541D23F9D2633D0ADDAF128E4E336E41C0A
F1E31DC3AD15631556A6C760A49679FEF8377A04BD2709C556F99D6D0A7E6D0F
72BA8FBA57162992D855DC8EE82E1FD21984D255DAAB15D2530F5004F063AD76
EE2FA09287295C79AB17E0EF4C7AFB5ECDAA96392891C296D28D5263EE631BE2
0CC1F6D56A03DFB8DF16CC64DC2A4BA25C78CB3BED5E7AD9383F870121370795
8220C6EF8004033A4C316ABB86A95F8FBDEF27B9FC1AD3259CE2A9E4027A59D6
FA0607168B4145A22A5CDCA376CF8F657942D643E7118C6FB8485C3B49DF8D5C
B26E31B287804D9E5DBE8300564D6210CE95546E90A839440D5347EFC3DB1019
7E7C1F9FA4153F56D8354C28DF9541B60056F95693A5DC3207DBCBD73B067552
BD50DC53426FA7629E8518074632F6BB0639E2AA1DBBF34708FDB80ADF685477
F1D1B294824781CD883EABB77A8D8A93CE85F961413148C812BD4323EB029D02
1211373CD1ACCDACF821F97F498371BAEDB7B887A8C6479AECBDAD3753FE1D35
BAD23DA4DC7FC3B4C147A3CA6B939B4B19E81AB223EBCA7E622D460701760E74
95135D6EE1215286E75E64E9F4333B259C51DB04F83FB8A8CFF5EA08B850563A
283BFD9FEAA5AA98B091AECE8681999D7C8CE7081C63CC2F99FBF847E30932EC
89D7AE31C15276590ABC46672EEF02B2AE8F89259944B1272B1259D760D7B237
396F4F3D80745A2E1EE8BB1E2717DDAB52753B36705655AF3B0E97AB1E6E22EE
5A58C7B3B5A46A860FA2AF035F558B5970DE1368D2F20663BC22AEBB8393C4BA
41857657A780F301DB98A91C6F34AA573BDF47829A0BD0C1FF5D6E3E3E23764E
9A5DBE640CA98585DA2A4AF9DE5A50460EE4626641060E55159270B4794F9C09
45FEAC295D142BA5CAD6BD84A5074B5832023E809B80408BB9B61C2AB51D8CEC
6E67F64B36C58C36A88F60969A764BC3650C9F608A3D911E2C01E031D302E806
1FD13C0751886DE01BC4780E971D3952648BE3ACB42BEC6D5B5DA0CAF19F96ED
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC106A2E43A7E81959D74397B05AA
139C11D8E49A593F43BFE84E32554E529BFFDCE98C901A79E3E0354517C3D95C
E9C02C72E8CDDA3C6402606AD16969621B7B86948DED33D8870DE90DBCD8AB39
72CEF5BC502DB98B9C81A16F71982B56E3D30B195E00D83250BCB311128B7FEF
549C4E2A1FB5DA9475D34528238FB664FACB2DF3175DD6744B6F80332CA317C7
C7F1E95469943D8FA54558F298E38B7C47A25EFDB18D279D752527A0A701EBA7
3263002176824B16E5192FE1E7C6EF0989162AA88D31807317CEF7334C32EA38
CBF518502AC8917F8C0C4DDE1AA36C332BB853DF3C8BD16760A91B02D5E8D679
C227DA8E3207E226A8165D453AEE422EFF10547CC2E44F566E8880D7BF75598B
33B68992E7A2F38FC0102D37B14D7743D97690DE073F312A8B3CC3ECC121A487
2C7A2E643F42D81DC81DB094A39F0AC8535F07BA31C71CA5D158A149F9312B73
E4D32170A9DF0ED814B56FA36CDCE4CA26E456B7F80E01E965F2ADFE1F47E8AF
B7E2430FF5C29D2907B641B4829531FB2A32A4C0367F3CDAADB9A370228BDD72
D36A310B38B163A986ED841B89F943386A45621E129B313186B14136429634E4
766722F56E044B37BC6D86BD2B25404BBDE5111A09F2F70FA32542FF1E83E1FA
20A5DA57D8B97288C1771381D3DAF5B148F098CEE2A1576FA4E08BCFDD164C8A
2DDB6E607138E02333C892AC77F693FF450B0BDBA1789FBF48822B33BFC5FAD7
3A5F027F88EDDC45179F7225B6871B570EBE05C9D95D8F947BD0742B90BF5407
FBDD9646E0166601B3481A982BEE3ECAE668C682BA7058FF2B516EE6A1F62AD7
88D7A56D82E27037A9D4634A52602A4A406CEC3E6B836FA313F76E5D3BB8FDB7
30DA86C9CA2049211DFC67FEF43680759C5753F9AF573A9C560C53F4EC10F01B
24BD3061707FE66ECD490C249247B1EC843A51C18F15B98E16EE5DFB6E5EC238
5A2B60667E25B40CE5F8CFB9AF2BCA1DAD558C1F217EF746F550BF0657B5DC66
0728C942A87295109A90C9155DF0BE682193E60B2B5FED8BF8541250B992E39A
E2E7E3C936A06A609F48029307D8249FEAAB72F6E1CC2C7A3875079EFB568ABD
139F70C1EA8869611D9D4D5ADFC1463D664FAF1E15D2819ACC236CE307310AA5
0B8B1F887BF840312068D7236450B39F6F363E3AB6F8FC5A8BDDBA070CA8F456
2F321D000ADC343E2B1931854355DD892B5A163785EC96245A45B4ED6B5BF9F0
750DC175E04BED0223734E5A7F68B96A1184091D122ABB1E3895721160D7C2D3
174873F55307E929B392CE3475109E22CA5A270A188A7649D8D1437039443AA9
46A7630D1877A6697C2FD31E9717FE5EC1A550EF9E2FDEB0F43558C7981EB189
B81F8D1BA098074266404D32CBE9E1B8220BDC4409274CE1CD02D148724B2561
AB1E54A672AC2EF7F6BD91147CE9E15E1B72BD078B9B595DC4936FCC0467525E
BA8965CF383F4F4AE6DA98D1611D05E59ED9BE06C7BA2AC655DCDFC20968F5BD
12B078701E01F539C74A0B5D6AC9CB4E4BC1D7C2248A8F6E5A7695FE9B0A14BE
253B4345768F4A78E26D7BF1AC08BDBB8351C7F5C1C66C9F9BEDFEE780E04042
3DDC5E3B4876FC8A9E07B69FA56A32CEBA6D7B35526797A8C94EA0723B306240
918211E0EEF0934AD0C63700B4526A98631477A19FE5E168BC242740D8C45888
D4A0CF8AE610E7017E11E78CF5E7141AB9009DC1FB985090CA164DF0AAE5DF99
7D62692FFCF574292909EE79FE294598B8493F9991DE93CAFECF7231EA8FB209
39EFAC81F69FEC9D92AEF953CD07A639CB7F9A7CD9CC027EE23F3B3BC61A40EA
57044322C232BE97AA1DCF6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E72267A508
FBD0C338ECAB53C74DC4E883803F2FB7FB3A3A802092EE50089F30F3C4ADE4D3
07305271D998208A83D58F3BC00D46513F0358C43A22C413D9A6BA6B3E100EA8
03E2F0198DA96155E68E8F6CDE3F99D19B44295188865207E8C79FE8C1E98BAC
BDDB68AF7CCF8E9071B691DE0DCDBD7CBBF0BF03BE50426089EC7071143F5177
610D4C2683129C912ACDB47AECE3F9786E47398891C3990700F3123E5BB8ACC1
07D8B722419A9C1F8EBE330D7A360FBCB6540E7EB3B2ED0460F81AB38B9240BA
E845D47A0BD6760B31870D69C4C15EEA09E1831354F7C4A16212A067BDF0ED84
C9A5735368A09CE46A5C17CCAC557BB69FD42494D5D2B9C1ED812F3CCEEC1BC0
79E837DCF4EB4E495547C25D2893E35E24435F55A2D66CE9FDEC1A5F81FA219E
49C2F4D2C8EC80D9E187F9E15825F57826DDB17A35CF2E4C380E50E1797F8558
26EAB926A051DDBBD93F907D31D6709284C86F0542486710BCF518C1B5D1E6CF
23E0D97980F20EFD24A6644AA26EBAF342B36AEFAAAC0AB3727E59F1642789A1
765F02944B8E689BF03404F5426F7148BB8FA709AF1344271173529372AF6DA3
83511770EAC39ED55DADB32778CAE943CE6E928C9521FE45A04F184800733B13
440F514AF796BCDD85974E0AEC9A164C369C237DD28FC4BE2843036E872B2A03
163F0CAD1BCD5F7FBC20299D5C6FC1EDDFCE777B796FAD72EEA5713D78F437DA
E50160FAC28C1C21FCF83DE1B5516CB04C7CABC1D37D26ECC85EC180EB8EED1A
6E85129293842B429B1AFB33D68BC88143F92B5D64DA3F8DBFB0D329C7450A21
E4F97C8FF528ADC2F97F87C592935C07955C1F1B0F125261DA0D2F7312CE5B3F
3A1DF65DD60AA679945BCA6A71E4329DB73E7F29098787D96D89D74796C6908A
EFCAFC2C9DDFDD855116AFD66EA16F96AA4B9F040771F86CE98994E113749F20
47C28A0906100EF57663A483AA7375C850A31668037014979D53F051CBE5D246
FC0CAC7850013FB3F1B075D4754A82A584DF54EDC7C8DB59B77CB7A8592B7CFA
7D097BB4BF8EECC6634A8112ED925C55E4B0DF0E5BEE4B29E5DA8177D46930E3
E90AEA7B324350D5926BF3AAB7CF462B8C46CCC43F2AAB8ABEDEF76AD7F14CB4
16CC957E016A4C72A6A2FC3DA24AF084E7544D8A76154942ACCED03A7785D88F
EE716F2A7D77A990393CA5CBCA996BE2E5186292AE634456B428623FD1E62155
5BBCA26C986ACA69714EE280FFCC692113CC15C94DDD294049748B473FD5F4AE
9C321F8D3A7609539BB1E313BACC161E4DFD3BBD84E1216F1446F95F7E0B679C
0D5FE02E0CF9AA45628844A54275C0E5894655E7B06095437FEF27B81EB14663
E3073EA68F60F1D5B1A01C9D57853580E6F180343DA29EB6D4908FC8959EC547
4049A693CBEBA4E07CB9B5D8DE5E0B1C2257A8DC4E816B78B9EE734118C99128
2B1240D3E464E928369FA93FB926139676774399E370879B537E40FD383EFEF0
2E3CF25222317FA36FFFFDC8DEB8DE95405EC7DE4C780BB7B6AD8195784DE96B
ECF95B625F9BE81E96E51EC9602D4654DEB38E8E94225D8F864E791EA66CE3A7
B80CCCA6788AEF25264822AB4D94FD51449F12FDD58B76CFA594F3223C22C504
5B028700C8710E6F425220C975AF0249835F399A5539D63AF043C136465C5C6E
DD6AC0425D8F374CC51FCB15600FF7A49A4104BC29A0D7D3B555652AD4E14D41
04669F132B4584E73C21F2C83078F5D96EDC72B7B9B4BCC12F4209B1951AF23F
F685C14584FF171362B3551FF7356C84CF0F2434A53A3873E1326AEFC575FAEE
1B5EC42CDDC027C7AAC514A42B45A190590663C03DB348ABE792DB5E7DB73311
A007ACCC65F1BE0CBB445E9DC99DE3BF32B95CA40F19FE0EEEAD46783F79B52E
24284B8FB0941BF71DE5A8C04AC209B2BC1057E1B23131263F844B18EA91B956
02F465D1AD4EB85656E66D39C6D94C1DFC732A196B89AF8000D828F0B96CD1B5
C4C56944521E76439B5DCA7732A29F37A08A140F8C0036E35125E11CFB8F1E39
7508BCB97A2A87578E15D147311B7C07C17737878305488298DEF3FCFB79A08C
1884C223247C65FA99AC139A69ACDE989B3FD5A2D5C0A6D3663AFF2DE36A2249
BFD2DF460161D3EA5C1B998A83F2F595DEA5468CAAC2B78E5A1993F2B6373BD0
E80C86A751E25B22ED67B8950124818EB258558D55DEB25473A60B53D4B46DC4
CE9B9FF1A7480F80EC4A178CF4CE94A7EEF8762859353E43AF38D0D4E667A801
66DE5FBCEE3580C618C1814F112E445F32C0970817BC4050803AAE80CE06895E
ACC815D11C5043C96E89E9C036E84F31BECD3B9F74A6B21D04D33D8D6867E328
F1F84E503F30CC012322BF86C75D542DF2E2EC862783E843F9628CD09328D96F
2191AEB4D4ED70395961900B71104E33D18C699CB21CBF1E702A43C212F7FDBB
168337708E78CDE23E82878404BE7530ED3C037A517E7F4D92C7AB7DB46166D3
F9D51BF73E000254A8671C3523CAB620C1D56647B6CB1AF0CDE7B27ED2707252
504B6C74D1B1215C450ECE4FF7677CEE2603269D5F288AB410ACA8C41E7649B6
6330C265A5B7F41D915514AA0FAF252C2D470BE8E487B5C8A276C074A1F51A8F
AEF46319AB90126937F49345B442931D89A2D64E9CEFFBF0E3792A219D478D91
59272C789B363F4B77BB6F513F2D1CF82BE364B0469874C6EB4C3D782F2BB7EF
F536480AA43F0D960075B6036943E3EC779A517C4D6040629FA35ECF5F72BC11
EC5003D3A2FBEB95AA878584A8ABDF1E8CF78EBE55ABDB3BE9C60DC252CCFB36
274DC69EF2D60CFF2873563D5F829FAAE46F12CC16254F52A26FE47FE41504D3
E851A0670AA04A36A3BD6DFED9BC3104B7D31460E3FA77DE5FE016DB36DE56AE
7E663E81752C1539A5613325DCF159B32F71199029B3C52A85E3A069D5265B78
DF1E8A68FD35569FF3BD8484D4C450FD2CC53E9D5D933D8D348873F7A02DC5A4
062A9DAC0FEC368B11CD07341EAB622A7559CD4601AF33637D19547C8D92E24C
1190A50E8DCED4C7B578B8FA81CC9559856404124F851CDAC202F133D2A0021D
5BA5ABB98A5D4359E63E7B5982A26F1ABC0F7843685481E40BEEAE93DB98DE23
6DEF8BA32A536C00BA8999080930FB24143DD7851B5539E97DAEBC0C57E6CAD2
FA699ACC80B728B77A07EF96201F5BC9187B8716270EB91BC97E629FD0ED9D49
87C1C3F19BB1DF75F985EB18BCA8844B267B7610A6D157EA3ADA7CF63EAE1CDE
BED0C8CF6560508A7BD68F0D6896FA97C1DE35DD2DC448E17A060D578CBBC23C
7B47CFE6CFD6EBAE3E24A85D002445BF81B4BB62B6863A4CFAE37F715EDF3EA5
A33679FEB21AD1156AC74542B942B0A4F70B64F7A89EB8D38652FB57A729387C
6E48EFC3641A1DC59A816C933FF531910AFD36D4E7369C37B8761341D2763A1F
F764ED045DEC3F74111957D7B00FCF5F246C5AFD97D7F7DAEBF8092DFD40519C
D63CE8E38A742078EF5DF4BCEFC85437AD3B3AED02EF14AE8BD323700B083E6F
B9B54FF40B63FFE88BD7FA6074CD669B124A8333FC4173EDC8861F00421BDA29
947272ECDD4FCACAEF0B0D408990758FE70625209BE1245C285B171DAA6BE705
FF575048CC768BB8F138C00B63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB82
1BE08A1B06587ED0BFCD31833B1EECAF947E67DBA7060CF90D715B1B4C7A6B38
6466E51305470160FFA5A9FCD721692FB97A0DD77737F84F944EE4F182641F05
1987B79A1615938B81AFA5C99B02AB37CB7492A3032BC29ED513ABFE8E6F085C
4FA6A856A3B0FAE27B20E1DF3B80BF4B5911464BA2D6CD239CAA9B28146CC516
ACD809E764C8DB3BD7F80C944959B74FFA0CA674B3A52B5E428F6A5529408AEC
4A8149338459F8BEE4E3EB8047907EE0174E9379E76128411F6F62DA21245722
95D7FDF91A1B0837AA7F80FED4EFD79B47D31ACAB7921E974E0F025141E0E37E
FD447C37DB455D2F083DEA179DA4FBC32DCAFF9A18635F0C806A7F79AB1668CB
03AA08FB060A2ADB1D7FC295EACA3E7EA4F5ED92E78990A082ADB3A32F0774CD
B0A4428FFE3F0A1088EA71BD2DB74105301D0957D57EE4D15D0E8C5B0F468202
F91976A5D9C8BDB5514157F1C88F69F5F803FC20B59D8A94F59777FF203C063C
4273C41CC2B831FAC8B35A70EB34886F37C2D18213DA6D79F0231FD18090D6EE
761B5AD3510CB3E47EEF53A23BBC9033481E0B0BF46B0980D70618A821BAD346
F807B68B77266B06B756BACEB5FCD36A0F153536DAD78AFE7ADEC90B959AC3A1
9FA9D0303DAC5BE0058B7AC46EFC13F30FFEA970858E80ADA63052023889668F
4C3E84553C56AE4C8E2478A28257BE4461BF0D5737FEF579DD93DFA22A948E88
B3B323E0DD7E5B229A8753CEACC4610765D2CBF708EDDB1B5DEA54A92603EF47
888C851EEDE853AA9F0EF60D11E54B7BA0471056B021C03FB2A2D2262AFC1467
A7217C1C887F89586F84CE132D460067CEF74BB5AC6ED2CEDE02799D369A0193
3B7A77D835694536563232D2B7C11EF06056690527A4EBD1F1355C3BD6CFC4FF
B40C1CC5E799B3728AF8D6A742D6FB17DCAE007D8E2C41A2EF916B6A2EAFB651
D0E490A79CB8484AE4B453B00318B966EB78912997CA884D714876239501D7F8
9D32735ABD099F2B35842AF2A6CFB7EFD6B57700B114375B3A18CC1B963DFC1D
7F5B9FABC9B989941219026BE888DE73CD3E463B692A4B59BA7A760DD7A81CDD
A23CD0707F8B2CDBA530E9795CBE691C141A143280C65FB2AE0253F1E002F576
583BF8FF1FEE3ED0DB577DA27E45FA577E9D4B958FC9C413E5FDF7E3F203BD2D
3299DCFDAB3D314077FAFF599A6162779C3F18AD0908F75EE8A4B38C1C582F30
C6DF5FA2097A078ADFACAE547DA5926B3D5C9A7A59226CBC34EC86D2CA91E322
14DD857E80C33FB4286BC47DC77742A8C011C9628BED9C7AD8647A15BA064C8D
BC0B9A1993A9B392A4FB76D29C0565E070600C36FA9FEB325D9B4567CE2EFECC
ADDC8A013BEBF580573F64AF5AA364DDE7579E59AB8F63B4E0D1C4D5047F251B
4AE34CA73B1499B395127BF2453FB7F04A266A9662CD00305B894723028E0529
C6B747E58310BBA39C615BD9DD02347E6B3AAE64A949E5C87CCA39AE1F17BCA6
C77E1A59B2C119DE916B29DE7054ED785232C74B7B92C5138A7307297BF2B08A
80874CF0D889281F4761B0DCFE61E56EDDE14DB1462E4F9859384B15882C6B0E
2214137472F7DAB6811B1027FDA86CF66E032F1B0D4946100FCFC2BE23B43458
474D510E94FCE182C53165413E1FC4EC239B58976F94434C1FB78334D81374C3
59FC481521A3784357B8E3E7B676414CF22CD112C8DD5A99D30F55D7EE28DF2F
0F6174BED2CA19D075A462526DD5D645E764B114853CA1BF1C54B28F3591C1B0
5ACF3D46952ED60024BBA20AFF928DAE47397075327EED7195DEE9EDE5DF536E
CA77341301986811B7C76940F64EFF4AFBB062D33A9D22D14C37AA9EACFF7CC8
1EF9860D5DA595CC6778A7F06A3C36A4C792D168DC61B0E00C91D60564524D7B
1F773165050913614F8EF8A85BE29E113D06CC844D519A65F780A78E56CA9D87
4106924BF00029F54AC39F6331A4A81BF6562ECE87586E03C99C4FEC726E5D5C
D4281510E8B82A5E5CE852D1AB080F8E3F97843B172D926DE310DE9062984F69
51B5AA2EBC98536501922111BACF45C80493B3ABABB911186600AC62FEFFF4F7
754935BE18AAC41C860B70833B92CB7228AB2C8F68D03B6326AAE61A8AF0431F
373DF8E1A969C52A99052A4D3A2FE770C9358686071FF45FF489BCA0F4BAA4D5
D965566BCD23CC0A112E0565D1E1920094A0509510A0DBD662C731340D67F8BE
C315412BA9A18E9744CAC5F1C047BDA803928A286C4E76A6B2EAEDFE2FDB17FF
267D0F21C35E0E6977AABA48CD601358BFC654F3C7516FBE690A67828F56C593
686101542A0830ACA6918C86EE5D21DBD34B2EF84D336A889395E771CEC29602
496D2F4CC3005863B6DE09084927E0DA3DB454B1BED8CD3EC75326188E28CF53
4185E66A3A161EED1F99B8496A9FCFAC13492DFBAE8110E9811B2898D889A581
451395C7C58186048384504A909B92A16E8AE2275E83777297529C5ED2573FDC
622D7D4307DFE77A4B16D1848D485679E592C1AB0CB02879C5C4AAA33FCFA22C
0A4AEABE4D4DEE308AC29CABBA411987C715206297C0971364CC5B83001B0789
5F0D8126F67F4A68120DDA56FC6E466A3CA47F0F2383A60025C5D0C64D459276
BF2D8F25F13137C7F1CC459CB3B3E945760E98EAF5063E373A084CD6829DC18D
063618B2C9C5C3C3F9B01526D9D71A74984522CAFBAF6CD275B0F8470DB58184
D56DEFCA7213829FCEAC430A54AAB1C27135F14DBBD172CCE6CD2B6095B0157B
9B295F244E6197FFF3759E08318611701B27F723F3786A03BA85152A3C6A3620
836DA8BB5CE31BAA722DDB36BA5642CE4117AD1D6B9E368CC0191FD3EC665A0F
563B55F2738B16DD43CF81342B8A5B460CF17342B3EC42F3EBB3440E2E602354
F10D0B89AA2077894331ED25BF6955E13DA0B4DE3740C28682534E57DF995F87
B37C537FD5D25484B3B641C95A5D96C622B04FCDDB40B675F081053377364DE9
9FFAFE6D22E975678C98EC8A9069AEC8E237722DBA55BA4214EBF66B06D64001
2D108ECD3329117185F2DCC8334D331FDB4CF16123266B94843C4586F7B0914C
F4136BAF49D0A85D7764EBB31166A29307F6343DCA5AE9814FF8EBFD456F7784
4FC27438F6061CE0C155A07D1064B66DAFAFB39332B22F2C43C3AD99954E96E3
9B52434EB13675C377D3C5C7267BEFE151C52A60427176D702F257ED71B2803A
6BF70C74D8EF4783865CE3532C2BFC6208F2BEDF5E26A4CAEAC397152D34458B
281D8EA05D6583D2796F440720BE08EE3F855A597B65071E7946D81D3FF2F85F
8CC4417D0D02BF2477552010705ED42A0896ABD62805E2042E248A874E814B3D
78F46AF4F001A3885AB7E7C4F285F9BD614A00DE6825572189A19315AD3976AB
880E5F0AFAB2498FE1D79954BD53619CA37601FAEC649E37E9038CEFC41BA172
055892C47614A9035E7CD93575C377D3C5C7267BEFE151C52A60427176D702F2
54590A4A2E016B5FEADE1A79C0AFAD4A873434BA54F6D717AB58F78A4BE43408
C7C2F6D4465B31BDEBFFA59EB012DB2B39A9370330D258EE8515E8CBC0DA34E7
9D8085F8BD147086881CD9C9335856F5F195FCAFBC3813546176EEA6745F62F0
715C865422128A163B6C6AE0D98CA8116AA0AF078126540BD2D435D0AD6CA923
3144A0545BD34F7449237157219D79611E52DE72B51F2BB650628AC5E429F423
F250EB9E8AEB5BA66E6FBB5338F24FE4F9C3EFD3404FB795EC4D0857AA5D6620
C95021DF41F3DCF687067554D464306A44A49AF8095E431F91B8EA9B312FC277
BE315B18312C8BE99537C3E44E721A361BED6541FF9AB02AB229B8D20C7CCA13
1B23CEE3EA3747DDE3939D38A4E5DE096705B4034226D6B5DE97BBDD742027FE
22B2AA7037F55F05E547ADB16F56669A201DA41C1DAA9B4E66C8E5A03D5F1D98
DE47AB51DD77014C2925F4F0125AC8AB538565E06699AE5D68759A52096B7958
42B6283A0129D49E7E9AFCA904B37EDB25A80BF2A04235CD244B0A88652F5A1E
C5546FD4DEAA2A82A209E244948D832C75AC8BD1ECDD9992E9F8CF3DB923D549
EA4E6D98A6FEDF3B2BE1E54BB8EFB775F1BCE8B6B9B0696233F5AF80CD6A7427
3F5204CCD208C109EE75EF233DF172A38D2174B4730947637701EFBB2FBA3063
483F9E82D2336227E1D03B98C42383BF31B68F6A6309C9BC0124812E4286E9DB
31983877FBC16B4E5EC481D8E9EF87B4C4C108E799E71AEE8C115164BD9BF92B
1A79C9C7090465E9A00FBC634995A712AB2E112E3E6AABFC1D6F293F9EE845A2
ED6C77763127B0725900DD92FEAB15171D272BAF7200828B2E085A16B4BB005B
30C1614AEAA2AEC112F30B3AF57D9EAE465FBEF66FE82623DBED8135D5D1E2A2
D9811D78900B7D347046FF9C2A9DA7AEE1F42E36FADCE69D1C31BA552A09B302
16F9A60D1F58E74D0931CE5AB03850ECDAF201BBABA430326604E56F26766AB9
8A5C51659EE74A875CB811177A20A894351D75B4E76BFF75C71D425F9409954D
F168966159B2A302B801CBA292D1C07EB52F3849F14FD66B8A34A64B53A37CF3
00EE316C982A0D58ACB2AB0B6D52C9A745F440BE173AB90CDB8D5A62492E44D2
391EBD6625AEEDB22442CCEB84056435B2419148A456405A6BDEBB44025A835D
94E3FE7ED4898A10D61824D760F2B86372EC36424D8A7581AB38447347DC26F8
B6F0422F3340A01614CCC41D40D27BF1870C1EFB412C14EBB08548C09B8594FA
27E14DDF887194960B9E3222121B24B97DB7866E8CE52B81CF44DA54017243EB
1546BA7FE32409951CADA934F8896AA6037462E2444EA33B01A22F873D195661
CA3A1BBAEA7BCB4D93C90C0E83A3C7BD7646FCB6C28886EC210A1F84DB25137A
35AA5C7691B72AD442BDDAD18F30DB190E4D004740C567EB0F86531E771C74DD
3701419E5B08ED32C290A30B02CF572199F74645C0D9B4DB9DA965633F5DCD87
B03DBADCE87FC499FF9DED0E6C8FD6715B5797EDAC56AD49F59AC389979AC060
DCC4606454904FB9E7BC9FCCAC1D1116278357D8659BCC81753C2906EAC08FC3
FB9AA3D2A83ADAAE5427689ED559EBE5BEE0A331DE6080DA757EC74FFC5E9B1D
2F70A87D381F424FC2F34BF902F401264C69EECF460CF82F033635EB5B3A4F7D
F718E0EB68A4F615AF7AD898C9CCA5105A687B74DAC1CE89B910A9B6D2C887A3
C469F9DC2A96B15D33FE7C565961C2A1C0E5FDAF8955FBC699FC847F077A8104
7021DF46F69AD1EB8532A8962EF0DB618EEEB9F1CACEBF7299500D3C3520DA9E
6E7040E6A0131184185A428C37E133A909D02EA7CC5DA03D0AE482ECB5F7AABF
9749CF4B5BE79087218032FB6D3C67E6A4D8646298E229C517E89E253C6E46CE
01444ACD693258A53F98DB0DF475C8D74928A381F1E74BB27AF07B164374998F
867ABA7A5DFD196AC274D49269CB03F7483407DC1F346E0934D208422226264C
E8AFE6E870382132172F06F105BF2DB51EC3DF2714104F031BF8D85907DFF284
9E4C3C7B62E653903867AB470C9661EC12974B4B88A0AD2FFB4491A03346BB7D
A151B13D4957485E52C2815090CA3B1221A12F749E5C4197196D48244E65F7A5
4E14EA3DEE4621E32EE2D28136724789FF2247D8C7EBBE4E95D9CF6F8D4D204C
C6D61EDC66E28B7CBDA7CB79240357C0AF60E817427A9126A9C32B377627ED3A
D4456E3A67BF5BB49920F6FE6620D699A53E1F1DF8D844BB4719549E214E3759
8BCD577141B8DD30BFF42B4C55ABD3F432E2D3D9A96182E60BC67208F86C7C42
D48B75DF9890529FBB3D24651664E84B70E96397DF3694BD7EC9430C3C2F7970
B696DA577C21452444F02CB398D097D7FC83EAF094FB08A17E360511788C24A8
415B5BF9CC780D7FBF21C20D5E8BD8EDD3011931835A50D4CEE445EBC7F8251E
CD7BB67468D0B7F04516FD1D7DE759C6BC99788940F8ECCB6AF7ACD21613127E
9E4D3E714C90B76219991D21E34C2E2089A27762BAA33B1293BC4C7EE0C09F38
9FF828AA7585F9B7FAFA718A1A97CDBFC25ECADA33E3F6D66E6A404512EA0650
22C9B033A8F72733B7F3B44F48E78519E114A8BDC93D4009C2FDB56199893516
7338ABDBF7E8DDAFFFC3D0003ED3439C567438C6CC6F9A9024949B47ED2EAF15
2F6F7F69115359FFF6B335C54700A78C7C9605BFB0F0379CCDCD04AB6D9BB094
26778C3D750976876ADABFD96E5F3357C75F219EDD29984942CE3E5A6990F99F
FDF77D85D434E47B234D7EE7AF00BC8DA24B5DBA872B606D8DEC5A9707EC0438
83C3FE759DC1E6400EDEE1D79081462E37052BEDC79ED55666FB6BE037AA2EB1
0BA574F4485259691EABEFF092AEB20C9A785CBEBAC7352F57C70ED2E462B4E9
C21D45FC95F4483FED80420E4BCD787F6C1979B70F7E1FBA9D012360110F4C96
901E634981F74FE0DFCDBC13E320FC6896E2F408B840D4FB9786E782B22828C9
05CCC84E7AAA3C6A481246858A42684EBEB008B52B29C6A90BC9C73264E94622
6627968FA8AD8EFA4530AD6F44F7DDB1F7B334E90E1996E4C2B83A5863391C91
A7C0989A5FE68D9DEA3C0DBCF7C332C1413109E975BFFF110EF785C8FD1E8D1B
ED5B24BC6E9028702C35FE1AD1E9021EB5FD773C8B9DD0042C5E51323CB81A8E
DE313FDA5D5D53B2285CB5F6566613FC427B31144927ACE6A31737A4451C9BAC
E4A515379938C91AFD5DA7E08065B0AD6DB135554C9B7F8041AAC5EFE5279BBF
86B6202987505155954F393FC406C0129378B091F6E0E0C2ABC7FECAE4053D8A
001880D27C0F7D73029F171028FDDF8B55093534B853E32D9E7581D407EBE3A4
2FB15333B8666884BDE2736D81497DC8EF0FD5AF6AFF636A37A47100775C5E54
98ED8BE24F858C5E39311E6F14614753089F8686A53448D308EB9EF64D89D5B3
75D6426C7F6AB266B9F07627BE18ACB755DDDCCDAA8680E8103F24F901AD90FB
502AC0AEFFB80624427713EC12DE43B5F289F4C4058F4A02629C8B367774518F
D062DADB5D39353D4B378FB0E472F835AB5CFDE59E1D7C42D5D5C8C5832EEDDC
1546675AE16824DD84B6CA375598B6C439A2E90AFD4DF4A1B5C4BF78895E49CC
6FF69C287D243D1823077D76731EC605C2C85F79D5C6DD740FA2EAE0C2119F4D
770C87CBB418B5B2786E77B69ECA81864B4F28882C72FF1294660CFD380BE8DA
45A7FD3452FC17F10A319F40A9530D41B177BFFBD9B94C2C008FF74A20138BEB
2D08884FBE15A3A7CC5114AB201F66EE1B03ED1FB7B2F4C948C205B5D3394AFC
2E2FC73EC0D8693A9561AD2C3F9C45A11865DFDE675D073F415271514ACFA19D
2B9D2E2AC96435A959D465B74109BA1843085C27C269C751AB2BA3806B1AA19E
70A1D92D48565DB08347E934C223F5AC7AC6DF29B22F885988C306058ED73421
F9D738DBD7BD6FB97DC49648D46F2741B3A91D9032F24ED8F7853E89233BE277
C79BF6BCBA6948FFE6410BC7E74F3FE437C52417492CB8924E2A7A8B42B02C25
CAFE2EB3E9292F3C7665F7FA2E48176AB5869BC64A0C6E9B0626C45A3FAC6596
5B5CA2F739C797029BAA9D1FD7EE9405CB29E408AF7879FEBEBB6D10180E9B5F
6CB91C8ED4E24B5E8CEC7744C7BE92DE482C8FB5537B85222094CC28A53CBD93
1708EBA1C8F911AEDE793A435F04B0A8BFEE7C64ED52697E41935285DFDCA777
CE731DE6B46EE9D1C3D61DB5C544718297254186940D6305C96EE2B9E3E7C9A6
22D69FC020213AEA97259581392B9BC171B1AE1279F582DB4F6DDD82D1A1D297
D1973E6125FF805E17D38C76F5B75B93D3F8B06202FF8DCD698B56544751347E
9AA3520EBAC3107D887716F94563768073B8C4238F51C1E63C2291DE5D3D709E
67CA767DC3D20929B797E1AF1E95D49009EF9F94B5A63D96B1F47E96AE5F10E0
7D9A75E9F4AEA23ED8F3EDCF0B1F51A01691E505DA03AB3799AC275F4152B06A
1720430E0DE1278C559D42176DEA4E100EA4BE160CAB27A95C5FE00D11D39530
3092E064F9EBB05B0F69820935161A714F070388531C5BB9B3676EE853A00FF5
714B61218B4D73F8A9777879C585B192D0F6BFDE2444D8A718026FA6E3BFA81B
903519E95194C31433474907DD9BE9DE529BB4585865A00FB122EF507C2069EE
1E0EA99529639EAC0FB9701025D55BD054E058D3E91840EAAE969B7ABA98EB37
CB2C2A8EA5326178611E1418BFE3237AB288B5E6B4F9091D3510AA88179260F7
A7B77DC3ADA4918075715B97A463CF3E66AF2DD3D0BB8F6FBC4F95B19DFAC99E
611405A28A8E35244CCC8904BD6E26F9E5E0F97FC9B58B6A605314F854A16AC3
011DA8D59DF2203DC0CF7962A86B26F3ABF024EE4AB886ACCDE0D5BBAF141F7E
199B3EAEDC39FCE7F2E6DECC06679D6709FDD826F07FD80AEA7C4AC3EE02903F
5B7B060C6689595069E21E7D342AF58232A83671F46AAD2F828F82856724157E
72588478BF941F1F733A6DDD81CE07ADE6E6B2935B26BD94ADD389BFC649DA7E
FA94B7DA252B4BABEF2C617F5933E0247210E75072857A64630A7BA34D7C6562
27886DB240ED7408441F0DD36F27746C9DC827B1E08975F998B4C43E15A84E7D
EDDC618CBA1EC08E9F58EBD80322680FC4456E2E0FAC9AA767FDF75E42189D55
0A9F9807D58480946C9E0ED103AF606B38272829C49B77DA56D8C3459AEF9356
949ED184DE998BA0614001C00F5D36C5A8CBF1DFC11F715B1D493FF67B93BE90
9C4403FE3258790FF1B3FF67F4C95AAB61BFBC41465667F5491A4A41B10FFEB0
4C92757F97EFB8DEEBE8D06A555B642D686CB0F0DD3CA419BC2D3777B20A0D81
EE204F09E4ADBE5BB5BDE8D8B0F73B4A0F7770F104130515A28DBFE7F9A83A68
54EE28FD1B2F52B4795ED0C0A9F051084E452C075130628DA275FD4F4A71C717
60E7B2BD1AB594E30D797581F5A0E81AB0F7A8BAF7CE9ACC73F75B045E923878
E5F33D28C98CD7E3DCF5F3817712C7BDF4AC84CC380D71C1ED8263707E8ADA88
DB39DD517431692EE1FA1132ED0087D8EF5E30FD815FA55DA2F68346CD40AE6E
3A628D8D1151137A4BED2F10EC351715605A9EE21CF836572E2BFFDD9A56E20D
B3131B9869B878D12E4DA9E19D723986D7A820D03FFBB8803E6583AD867FDE09
2F721A2EE6D3DE9636A134F63AEFFD1DB0E3644BC9E155CC43B0320011EA28A2
E8285E3C1A67DB7096EFB1F419D84A061BF099B8FA36670B130E6AD2A9E4FA7F
BD5CE49A470899F4F83517B5AD2EF25BDBB89B89322146289CF3DD0F870D526F
BD75977C7CE14D9453E9207EE1F683EE4C2E93F10DBB8ABA0C945E7692BFAA22
84F02BD11FDE0E5BA107C68B49F80BC01BADB29A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3AAA03F72C44BB28674A8BFBF0EB1AB5858D30F85D2BDA1FD44C
9571982039742230A411A843F1A39E0E6902753DE7F5E54E2CBE14A20F56A27B
70B9C7DCBE9300AA2F8C6CBA86A8ADE9327E54958A52991F50800BDC90F76293
F88AB6EC4502F736F76AEB861A3516C023DD8E36C4DD3D800A39AC561D5ED025
A2448EDA8A35B55642660550D9179CA649DEDD316A452509D2804B5BE0F6C5C6
EB473638E2040E429B59000BA012AEB09790C43C27E56DD7A8BB02D26465A3B7
C450A0B6C5ECDAD7BAA8CECDD0990E5C3080C3F839C9292D8CA28B507641AACE
2C46EE001F431DAB4869A982293003C83BC5371513272676E09DA0BA59945F0D
1E677AF88B804A02E9BA9C877122736564E007FE240976397D06E1E409013769
EC79E2F708DA1AA8486882520611165AAF3711B005AD3DFBE56FD1010C92424B
3BCF60A5112A8F05E7258AD6BD59ECA9277477643246468572F84A6C7DFD02A5
8EB57540F4BD855CBC028B70E194489B1FD064E515CD8EABBCD4488E8BB1ACB6
2522F3DFCE5D81CAB26B366D771C3ACBD8019C4A342BEC52B478206ED9F8FAF6
B0A70F46877976C12C6BC4233055BAEFD7983E8B82C7DA405015C1A44F3B0336
BB17B03410E59E6C7C4ACBD209E5F18DF65430114DC5130EE0D8EBC305A07052
BD82AF003A0EEBF1D6FF38B0C6F73EE7957AA138B65BF369F7716494BF36A317
D80B2E19A5006A049FD3B35074D85BDA9A615D5C3243063397A70D335D41F593
17F44A60ED73DAB72A2F1AC1DBD34C872DF421458EEDDF98DFDC51AC170E4C75
8D505523E5FF2B32BE0179DEBACAC5A6DFD51F6B5047857685781D6F2347D9DB
0CD7293EADDD2502C915E2823AEAE2114035362B8538FD37ADF93656AC446841
4C1DD16FA4748DA642299C4149A5AE4E4FAC9D0702671BE7D9FC28C01AA73ADB
4AEAA456ACCF3FA9FD5C0D7DE2197E5C92F4958EEF981516AFFBBC84D27BD1AB
D686D1351BD5AECCEBFE302F1626A0D040E4A1CAE32175A0D741E384B4D1C074
EA2B71F11EE71DCB66501BB4E9E340BFB3CA74D8F847F7245D182B5C65AC04D5
E62FAFECFE7C1FD1BA4A9829EB54490428B5A48080A0E95A00D0F166D1AA1FE2
546AC84A719DE7A70642947F38B33B5D36C221BE8911AD865047F3FE90097893
7F5C97252EECA5CA374B61B48F0463541489F56666025C854B28533F3D64DEFA
D26D499A6FF390554547263F60381EED4B36B3D0F2C4A084BA9117411197AA29
4D99144EF52364BBEF00969C98C9E57BE3E3AF28807251F21C1EC7472D56ED0C
13A964E7D60A6D3A73572D79A8CBE198C9F63FFD1470AEB4708A96D534F0FCDB
C0CFA816443196F92EBAED840C4919534501AF33637D19547C8D92E24C1190A5
0E8DCED4C247A4AA4BDFCD19886D6B2B421F7C057DB10F0445DCD34A592305E5
A491A4E8663AFD3492B955E7936A451691F8C126621B61ACD5AF2E7C680A1992
77F14EA2931D0A28725892DA7996380563BF7A3B679EA85FEF772477C49BA21B
D8CDA5E62DFB940A1A24F3D5BE6CD45CCCEDC7D52D05A0FC41A267943125A76D
7886A4E6E5F674F6A9CAD7C3D98B00B67B9CE1D0D743B5B27A58A5F889A5F13B
5A23B661222CF49872856674212EBEFC4A56D4A6280A85CDD2C3C8C4A6A8D661
A6CC8A1F07F8F4CD9BDE33A6A7C53CCCB0EE0D9E3C57823F8D6B050671E1ED55
FDB93BD9D66638FDA8BDD4DE1F10153D551CCD7325032BA6613FC9AA1D2E76F1
29264A99875D3CC1A3F0416B6F5C328DD742A0BD67804B5803FB9DCCC6342F21
C85482B339B493A1170CB474788AA95A9FAD29E710D4161FAF00DBDA73CFA3DE
C72E83650F240B54E88E51C0650398203405B812FC8512AC127BBE2554524D95
8A0024F323655FCD17F1D2D44E015B5FFC2A9FBB35BD31722B422AFF0A86A219
3A1BF363855450A17C8992099875EB2CE350CE0EF4AD2D5D52433741A0018C54
C0761615331EFF4F97911FACB51BDAD45965CB3E4CD451B5A1D6149A658E2BFA
8755702DF94F34D4071E65B1991419335CF5D00FDDAE9BDD7E614BFFE78D6286
46C32C1D95C0DAD9F7AC5E28330B2FEA765B68E59E5DA2FE5DF61D3D56C1B4DE
F1161D0B6036E7F654E1FC0D9A9A3FBA49EAA38A1839358B9D5D8E49B96021DD
868DD75EB6178DDADED3EA072F5414163239CC2D55123ADE1F3C61E0A3F6A9DD
3B77B005ED6236857DDBDA90D1726B85B85B9671F25506C85745A2BAC311AB23
8997A26E8C3183CB8299892D369FA93FB926139676774399E370879B537E40F8
C9C5DF2EDF2C3F52D34947E0964D0E8E89F6043C0D2A3FDED94966CBFB46E982
86E8AB5BBCC5A8C431D8D7BDC3AF110ABB979B0295FBB55CBA2B0D731BA72CAF
5501171071C4795A084EB7CEB7B465FD9380A16EBBC716482EF0DAD029C877E9
7221B1424E32836D6CA28909547F9C9DCADCFDA1CF32A9E980DC7946713AA2B6
7ADE09E7E2602EC78714CB01B1D8CA5599BCAD944BB557C31F555B9FBC9B865F
A98786E84DD5EEFB812AF7063F24522658F36B09BF829D2168CDC27B077C1A3E
64030D40F357AF8395771DFFCF89E918F1702F5867DF3636C4F5C2275BD205E1
ECC35934343FFF768A9C7C69C1DCB4086F18D3395FD237E4F663A9D860D38443
A0264CC224DF908C5EF9963CADC84DA9CE87D81D4F2306F0F4CD8882D55BF7D9
9FCA3CB6695C4BE1E0F6F82FDAAC5F5F221014E54A4D7AC2A59B07C199F94E3D
08301AF343C837324B9F5589C9197C341105B044E7AA81165FA1B97A103553E6
5BEFA493F99CE2D3DFF0982549271B429927D4775BEEE9771E4E3F32A4B1E22F
EFF347BD3FDAC64590A3E6A8F951BCA1A931511C21DB33BD5F7188AB430B481D
5BCEFC56F10EC2A5B36B8A1F0C6CADA9B905F3246AEC0CFE90D885257EB6A2C7
47CF7113878FC1B0947296137880FB578CA6BF14A5D39DE3A7ABDE2A6F2F91C5
C4EAFABC8B3AF3CA55BE5D1F91FFBA4A232B68F8079219AA89F5E7D6E84915A1
45A7BCEFF078B44C21FF3C1151214C28F255F87299638173A4543C6DA77111E9
03F1534FB379980F12D3A1E0810B01C554FDBB8EF9804F5C2EAE78A4BF88EDC7
1AAA864703D23D07B54DC25FC77760FD5A714D5731D8AB5D752D318EA148AAF7
9E7C22E2D14BDE2E51CA883E95575A8B730A57721EE9D678A759A85F77BAEBAE
D1090A3D9314EEBBBF1EA746C7D21AAFA482B4A88D71C66B0FA98EAF74A87B9A
EC2D29AA0087D5166078853F4109D6F3AB7D037E509C5DA4A954235A57F0F59B
494443DB29155D93CDC05BC0FE45B681C73C50BA9A4783DF7682461E0B596099
7AB5022480252D5611A19654543045C985E9FA2045FD193E6EF5F8491B730E6F
3508CDCA04F00AA75074F6D0C73A32E3D18B0D1774E48FAE18203274D8D5208E
0F04BE512F0E4295CAF659F0A1D7531ED2BE7E5CF1C6CDFE4C69D926F9C3A768
E5D8E1847AFED22F04286271B0B047E7337B66EB39E4F675D2EFBD65DCA8D0D1
EA25C291CCED6B43B67052CD04D314D8EF1305BA96AAAFAB4EE639125A66B00F
AE35137D917F5F12D51EE1D8B35EC2E6B2BB0314FD0E2835FB97FF4DA4611EE6
616AEC4DEEAF2899107FD5EFB2533C4974AE8F047F8130CAA0B8EFFF57F7B76C
620AD57C33296B8B2FF962921A8D17FA331966743BB807BC62ECCE310D88E8DD
4AF36B6E54543B4114855461C83881CDF494C2B6924151981FE1313ACA0F2937
1954548294DE90C4CC29E58970819475E9E4A53BA6CD4FEAEDCF8266D724C7E1
CE9D6CD867606E45BC24E1077688C365888921E4560EE3F7A4AADBCBE3205CC3
5CC5254CEB2975B401A1E45E0EEA4BBDF3709EC3E06DA87BC5EA364369A76A04
252382FE62C3DDC13D65906CABB3759C7499D65461B684A661C861DA00FB8EE9
82EF8B90CB80EDDA85A8D52C7F2F3EA9C616CE73F6320E7FBCE9F21123F70792
CF315BAFA88699C94A7162FA00F6E05E273B5DB89549315DD159250B69B7FE6C
C9CF1C0C94CA8B063A6E51A2EBF371263640413FEE760A8C80ABA4CBCA4C2650
9E5A8414F1DC581B2346172F1CAFF7F85E5BE5AB201A23C3C162F1134FCB15FE
185C146C3B2548A3018AAC559F33FC9278A677D97322B6D8D15EBFFC5673FBD1
F0E09303F8F6B662E34E945C60523BC0392B050B9540BDA7E41941A3FCB6C277
EB9554FF0F25A13DAD43232F7EE4D840B4362171360C1B4A49B2CC4717EACDF3
3AD11FEF95ADBBE87B2F6150EEA89E89E303F37ACA22B9666E68465B1504FD37
D1C906A954347B214FB68EC95F368281B3C95CCE251A46B4967EA0E4C588F40F
4683C2295FC0C58D564A2A4C4A7DEAB1E85CC06BC191CF2668634ADC3C6AEEA4
E81474B8DC6922EA5CE7340AC948DAE1C16B7E0F2202AD5DCF681741ABB6BDCA
12EBFFD4384FC57CB4689FC0FF8DC7345C7335F1B602CF8A5D6BB3E21369276C
1B1A19625AFE4330C584BFE5F7EA7494DFCB3128BB928CB1E672FD6C33F17030
AAA7B0A2CEB87A0360124FD1504C60DB82F30F4EE3D8ED6F50AE60AF3E00B6E5
24774D439912032F9B918E8AE8B2EF2E39529212B65E7565AC5AF026E2C8EEFC
C10F47FB671C91A7E12A8BAEE00B6C5F3449D1D291D0CF9CB9086D116D56152B
CE329695FE8A830F50581BB92A1356887584B94B00DABCEC84A5888BA903B9BA
E0A6D72DADFBADBA62C969C40E5AD567F556BF4F1E23701D12DC75C643BD3644
3DC1E1D1AD087B2E4300AE2F90BF5407FBDD9646E0166601B3481A982BEE3ECF
E6683620836DA8BB5CE31BAA722DDB36BA5642CE41141752F8731AEFEA2FDD6E
298D3EF702D657FABE1CB5046735D513E6E1B82614FA1BA15276039A09CE60CD
B0153749EB9657AC7312FAC9897F56ED09E02AA857C6FF514512BD7166DF1E02
BF6E5037037DF1CA63B9333E6FF44C608E26E1676A8CC9AA4B720B9068649C2F
BC1FA4E18E908936D0F0342EE72FEA3514606A3B03A8BE0F776DC926E1067D62
7362649D82A5C3A57DC5041B1A13FD2669B698E7CDA3D88B9B026AB9A677D0A1
3C4AE52D0011F1465ECE48BF9CBE57898D2E641D9DE2223F4CBCDD09AD8FC496
5F27BF8327C9FE55B586D057A5B67F972974B43C459D3ABB1719EFA24171D3E5
08B67D68BAF10B9EA138BDBAC2EE943566F917B7E3C6B26FF7C075A884D32A54
00E4721133F3D8831697F7A4F802E76BE91554C89D116132739A1B860E1085D8
1B74D5EF66741AC5D98872CB14CD5A761766615AD383C46FD9C8BC16246C1253
C213AF8E8F1399304DEFA7B2A404D973D05F42D3E371304227EC703D42B4C106
4DD7F86CD8B83ECCBDEED9E4E5B5370AECA48C587ABB5E85AEC0EF0315D9CB1D
677979EF1B4E96BD0CD5578D06C1A14D5C47C34D835DB493AECF6389494276FD
A49253976684B93E2CF26F6DF07199C03BA5466FA3EFBD7F77EEC0C3BCFD26A7
241379C2955D9BA1921169B16ABD7E418F7AAE15086037107F01113E6543EB9C
F74C27306219D49057CF1B92A145530344BD2C906FED03F633F3FC813623EE4A
BA3633A9BB597D6161CBB2BEDFDF7850C36160771994E0CECE14F76A594D3F32
391C040298C4B930E8E5CCE19FA7B3BA9FA1400F1A17B257DE3F0661DD7573D4
8B9126DDAF9B52DB3F3E766420B22AB9AA33458CD9CDBC417DBBF9D784583F56
2C0537A0625C655CE745786586AE482F58808AA83A8A330F84DEF708A7F73C52
A99646C6C89D2FB896653CB3AF6C9466BF2240E2A7157F5540732FE2BA1F6ADB
2A95D564B19A3035E27F66F381A714D696EF93DD9F32C5BB3CAFFB9ED72DD806
2C57F8BDE22F32BD1B883F76C6FBC44FFAAC5290381463C8DA9BCAB854010A9D
F87C786FAB2366A812B1724431E29844040ED5D4B9E13A466FB2F8ECBC0C5201
9F5526508CE444F9AF47CA876366076CA0FDF190DBC42371036E60D19234451B
B972B559AC50EE733462DC6CDFB7D0DDEA11CF08D885343D6DEF53574FC70B3C
D1D2048FE03525AC42BE0A650D81D9F7079793D6FDBFDDDC1EA9AE9C1F239224
A7554D77CAD3FF8AF4F8CD3B277C289C86436E496FE804591317688C32F948B4
7DA046070E46E4B1DB65F1EB94DB2F0F49AFBC11E92052F10FD3856029C57633
95308C247A99C14559D37FD917AD0A376543753EE095887309E014F82B805C37
AECF05FD413220403E4166E46AFFE3CDE50F7693D5A4D6BF6BA810B780AD3D72
6C843AA1918277F6EE607C917954B87F2738E49E191428E5ADBC27F1D1A6D28C
2DFD8FA0571D0F96B18F1901DF9FE1568A318FE982BCC5350CF122388E09B694
6DFE105543D27ED225F361BC0F8629F97EA3E4A864AC9AF3D5489CEB8ADF3FEE
B11F09918F66D3E5B19628F781BC77F1B6F48BA251E00806A73D03794DE47B27
9943CFA03753D809F9ACE1C8167BFCC77AE8415C0FE2858FBA0498089A7699D3
E78FE524DB3779672B3EC31810C745086682CB84EAA176025BA9473610A41FA2
317A4C2D8A8D16A10AD2733BC68DABD124EF2BBA9219D082CE150C3270A3353D
128AC01DDB12947B1E56023418758E8F661B2F071B4A49B2CC4717EACDF33AD1
1FEF95ADBBE87B2074957817BF9B0F2BE120B0C0F663659BBD109420C68545FF
5673390D853D8277AB6758D68E11567ED38212B83CF8BA1EAD4F8A7B6449A558
A82E8AA3E93ACD7D1F05142C4928C5415701C857A11F142810D4398EBA906D6F
4F84C0C27724A898AF21D7A419AB432AEE4C682D0EA3307546022FEEFFF3B2F9
F642C661ABE34CB900D58A7AA78A488177A8C8F976CF5C51007C262C925046E5
8AFF427BE32B65CD176281C63B7048E670D4FE52AC381E133CDC2090249915E4
2D787630EAE37033C777AB569CA4FC50358922AAB3089D6559E04D153BB28B8E
FD24BABDB96A68A50283E72F6E6E2FDD9F86C45A45B11F7E7B963A82980AF9F4
780799B5B691465D56FECCA5E03F0C11926991DE6E5F90414F6881580C887154
0043AAD5DB704694EAE959754A6A9DB8FDF7CDD1E2D1A0BECED0BC64EFD20FBA
2A8BF4D05886741463E26AD6336ED7F105C821F774D86472BED81CD0F2C0F962
D10E916601B0CD5F6CE5A778425F45D24B2E9F1559E50409741D667096EE2CAC
AC66F2A39D1EA24F5368C5083EDF2DCD440879DDC7D7404313ABF33CA47BD639
C34248A7D71E1174DEED0818D2D1D413B3734622114CC2F699964007FD14F70B
C05CC429352BE0CB3AAE1C93B48AE11662FFD3D8C31B57C57A9EC1450EE717C6
3AF122B3451C0B8052B1B3E4C94830361C81FFA20D9A8167D5A126B74A286218
C374EB0E86A568C43C642F63B8ED29ADCE0A44AA999A5F8178D528E7E6BA952E
20F307651AB10A12BCD15931DF1572B1BA5A02F11CC354059E017B4F420C0AAD
7229F81720ECA900E258A8A76AC7E1ECB7D2ABAA5B54B2CBFA5E816990F66048
F20770835C7A9299ADF0816790E02F2DC86FC2B1BC20758E3BEC5E192ACC1F3F
B58338CE405013D63AFE5A619AEE4D83759A5DD44631E8701664845BA3C9A0A9
09F526462E40482D6932E03B88125CBF57587799524AFC382A9EEE5D7277AF19
3886729C636EE906AB1488AF229C0A1D334B46A3F046201306328161224D378E
3E67B2D966EE1CBC889E40C3D1C0E96BAE5C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A5EE75EDEBFE3900115E9D8289D88F3B6C41AEC7BE4
C3F572B57A54ADE9F21BB47ED0B99E85ED0ECFA9EA51A2753FA7B567DE75BB35
492BFEF0FE520714BEF7C2E9B30A623876F0958B1AA77A29AD9E415C95760099
EC0AA968069E6D1BBB70A0C48BD03F9C410BB87E5F021256F25CCAB303870B59
BF0A26B6467D6A5B77E8328B28DB3C2DB268753A53512954A72D2D2B6E18F664
1945384191F34249D03DAB7B1425A7CCF4ACFEF81A427BC033159DC33427B360
426466AAA76C0D5F6963962B201D99F7446FBF10CC9C2E1D8F52B3BB4754AF3B
4036AF1FF8154BBD50C34F08980BA3331D79BE8689ACF085FDBFD201A6716B70
71D1F4106E8EF3DDD11761CBEA6B7B0F22CCE249A35A10A6185725D7421E468D
0451244C7E1FC5794D8FF0CFA4EA8236B40D79CF847F9670967E13C5C0C1862C
42C8ECA85FE6F165EC83D4C0FB19279F86AE6C59CDDEBB12617E6E5CEF78BBBF
2718755C3B67B24DDF879F449D3EDE29C916A41ADFF714BB17B5CB6C890A2002
F1611D80E6C5A0E0D3C46BA7CDBE3E2865E62ED9752FDBA07705B4E35EA76F38
C2AD24DBE617DB5E9911F839A350F9D2B8EB6DADC7797D7B1788F4F9A0B7EB5D
EE7E02219BC823EE002F0C2EBE927A679D7850172BCB044F567DF3008C7C00ED
83BBED462CB2F9C20B611EAED5DA0A3D764B1E07A3D3E2E7D9819D316052F966
44FAB5A6DB1E2CA0A1DBBBE3D8C821DFE80FFD14E94693BD386693DCB4688262
89862305891A1A307BAF114C5FACBC6F606F93EB88417C3EAEF6591F79FC6981
8F0321C2D1886A0B752444BA456D6FEEBCAFD1DABF32C5F0D95D5F328A6A5B13
A9D96C41811921A9157E02F156690EB9D53ED5D7C964E5C46AA7EE63055F485F
F34D471BF931FF1FBE9F36333C25E11D5E9EE7C0743D6E303CBC917307766C4D
2281C5F3F4D0E9F8457D81BFDB222EE109D426F89FFAABE5F45B05CEF47FEF4E
2F71CD87CAC149E6CB9C04E540D03E3094DD478EA4C38B3909741AA994922E57
E3A410ABE50E27A1DEA93244E69824D6A5F70838963DD442A5888E207D9F3191
C12B1B851B247E5055137F9E078552FAC8E9862B56E6291225B0F3ACCE8648DE
C0E2765580325E5221CB1CBD4AAF032085A92ED609F9101FEA0519F7EC37855D
F14D44D5A1C784B064511854716BD8FB4E783002D7EC61BF69D36ECEC00F0E16
E7CA731025405E79806918092F4473F0333B2DE8BD3B8279D768C85DC605833B
8BC150192772EF74A449E87BE1CA63C0625915E6A15689D0256BC13A0A7C98DA
9EE1A1B47F35DCB27088200587BDF354AF843DE424AF27D798A3AB1FA07E4C54
A2F98624D76E6D81BEE381372B8D25BD8A433C00CE9F17DBBA33C6D7753D32B9
5D6B2BFB447A80F7DF2176521F41D4511EF7195DA95CA4D3C547754BCCB31867
D906425F6B7A1694BF7D6FC08A512E679F7292B7C49618F2BC4413443BD978F3
C86D8A48296E5ADEB0246D9351BF40EA0D4F900E64846F22A84CFB4005072D13
98D29998D16C77EA531F8095E30792
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29650B98ECF391A95DC4C962DF3F79C7E16FA46
3D1F514335FCE76315CA77389A431B2238DB083AAC5E39450EF20451EA02E057
2FA58CEACD61235271A975B0C11E533ACF0668F3288A152CF5343F52865C1827
BBD06810473DD85A580AE391C17BE4638F1B649958338E69CB56B870CDD727F0
B655F71017568EF083865FAFBB85EB69A6E26A45CE2C98622A6A385B447E164D
B7299AD6D1BAADEDE43E477FDB504AC6B808540C553DFF75F3A00495714800B3
06BD5DC235EDBFFDEE3E46DD584F04936B53C3C81CD9E76D9B6CCF78220F28E4
5A84B0FF35C585C18B19C61B51CA3E6C3AE72F666D681A4FA8B2477893175F30
08EEF551C2574B69A17F5C62AD9CA923E685213D53BFACB55EF49BE17964147B
02C4CA4F0806BA52F8A891A88B2F519575FD86F61DD7C7EE5F015B1BAE83E79E
3BB86BC0CFF599A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBC754DE4C1
BE1E185A26488ED6138CF334D63A75CDA61370B656188C88BD1E7273E1A42F36
C0C6E0FB68F94CEBDA1CEB0CDCC489BCA1DBEA94AF6F37027434E22EC932CA5B
E3B470A5800B4FEDC4A99823CAFF87E567B96572BE6D9DA262C5151B948E529F
0C7A21052F1A28CE343530C96B7E92807415CC510ADEC7AFAEE3E54A00B1CF2E
9D4E9F057BA99AE776E482E332FC6F4EBD5E2952106E4600ED59E41847A2C431
ED3DEFC7267AD9DE87E23C236E70E1A6D7602606094B0C91DCA122F0BB3D4FA3
AA0CA96DA71466748187222315252264773FDAD954D114082DB6BC7FDAEB7C85
3A4B7B464A26A459F4A2593310245B1B9E7B8A0B7FF55338A74D2023B34333ED
B0DEE3ACD02BF724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA3C544CFCA0D01
A294276F86BA1443F753A7BC8B7A60E9C5DC48A3DFFABC322A2A3F62BF60D6F2
439E2D50DCB82C026ADAA0169B6A38F6E8D65D483940C97544F888E9316A1381
F8185C146C3B2548A3817DB684926C2123318D4F634AEFAE03E5D4BE6B04697F
F3ED2A83E6E7875D6C2D53D4216E11F852EABDD845959D6C4CBC644B29781604
7EB63717E2C06056A800155E42E6B63290DABB71D4D1B394D7AE82EAE4C82760
C5849F6FC5FB394169622625F2493AD95E1A2BFFD0BB023BB23B95A95C52C138
94C9156315E5AFF47E4041A45DA7B0CABD8DE5F42B0018F834D058A09E910DF1
314D1B5A2E3CA886E10296CE26A4E176415F55FF32E4308FE22F0D0A45B8D17C
B74BDAA4BFF6DAB5380CBF6172F37B84598335AB3A61FB3C873145863BEC1B5E
8CAB530411E7B006480769434E9BF13F872380603A47CE5A30AE40FD497F4586
00B1A87AE31E65B7EFE7B1CB025613E53343001CDEFCD8F5E62795B990DB5F01
7A12825C0D642263A70EAA178D11BE7F34711A204432DA217576D9871A8E8784
028006F3F3248B5454ED6DC729CC5070524D1F1367E7D491B5803E4E32D24FDE
0B7C56732957AC35E56C635F6B316C147E4148F43F68B433E736D2E15CBE3A2C
9D93556A1DF4CEB57A1882F307F0EE099AF080659A1C90D89200DDB63772D73C
36E0280F8ACDDBDE5CD4F70A7A98F5267847CA1EA003CAAC24B337D6B2A8AA99
A53780AEAC7931FBA708E4052579960B3291B0BCB3D6138198E70881E7FA290C
6A3B164722FB8BD5CDC14E7E20CB3586C815A75E1C0585250D9F6F52025D82AD
E11AFF1EFF8F6FA46187E0BED9DB2F1525FF742755D9200C3C1FC2E172E0DCE6
76DAC7827316D2F90B3326C12523D372BEA69688A21D6EAF601ED4810A03B876
02F6FCDFB887A83C42C50F08E66B611F543149B7E31EC9602D4654DEB38E8E94
225D8F864E791EA6689395C19ED992688C38D5AB822DB77434BDC79A29F57E30
98ABC7EE49F007589A2A08E976226EA7F091A006D3E457F0FA404657430F1CEC
53881DF1B3457BD811E6152E7A6DA01FF8F441690E196B19402154F4AD4A1522
5015497AC2A59B07C199F94E3D08301AF343C837324B9EA595BAFFABFA38EAF5
3F517136457774C464F3D84202CD343788CC991B61ACB6AD7863E30EF2DEECFC
D5E0AF64571044339C2037CF6834EB429617C33666A20F94506F7AA03CEDE934
367F083F6561C939669E28B55BC3323D71FC7B4221C1A677B413EC24C29DA1F2
D33041FFA5D3B62F29CD0570748C3BBE64AC88813A2339892CF290B7D9CD73B2
B2A80AB7B924F1BEAB9F601CDA2C40EF93971D344A24F67D9508E4AC3D5068AA
B174E0965F73E7B3A5F532B99D116357AF029CBD77D99A1656CDB76C9282269F
570C0B57ED78FE33164934EAB70ED3852DB084C16B6097540C5C81A8CF53AD64
448E9130C01AB94B0657A5490D7BA7606326881C5A6CCAAC22D5454B2C1EB503
764C5B0691B761FE3254E951B3259B2EEB4FE37392533D3695FA6890A620DD86
3BD5364A28DE4283D9697AF2F4D165B73683B97280E3F8CE4547F56244DC6838
06DF7DE0E28FE4D056969AB8C04466F6B2323849E5A87116F694B78DE928155B
9D611E085902458C96E9107074347E144EBD38FF9C114D75E7B867C216989AFA
4EF66975C7C64CE5EC2AB958361D31BD648E1C0291A57F6AA25FF78D0E59C262
230123C5668C34A7178C9284E340D18BFB0BA4BEFE101D5BEA3B3CC5C384E1FF
F89E502CBB5561E9AF3C9B374D73F52611F17AAA550E93C8B39DEFE59FA506F8
812F8DA2BE72F0827246FCA44E4A772C5FDAAEFC70EA6D36AE941E3291793B66
598F7718C18CF6B0D1B1310C75AC850FB4C642FA3710C2C99051FDAA642A91F1
947AAB4A780D034BC00B16D7C4D77CA697B044812DAAEBBB8006F056F294A4A5
B77983DF1D1B3EBC3640262FBE15DEED450E81E397D0ABD05A9CB3E301CBB6E4
5FDA05D04DE260D94722956833588CADED91C5625989AFE8DD9E0B1844B116CE
5CE8DCF4C788F037BD3783D1E73023BB66A4AE15DC7959BB36A10B51E9638794
BEBDB65521D0010402575DAFFF833C4D59C1941E14E0BAECD4A9FBA8B9100A31
AD1DF7CE7CEDF45D8D75B8008CB234A10836AB34663A141DA69B46D41A04EDBD
E8A440911B183955048D808915D7BA588590785C36322BFE321C6361D12879D7
8AC6396BC3936BD40FF1476FF54922F2FD14A340951A0130FAB6CF0B56BB38CE
81015FEDF0CC3F7275F567D40E28BE131B0E4314D86EF0D6A8F840F462D9B2E8
C1F2B51F6DA60AD71029BDA0BE43A26E6F18EC0E9085AEA66291B62D69D698EE
B767B641BCC569A1EEF8A12E6263CE2C073CA42993FD8CECB8E7948261EFEC90
FFF20B1FE3119DA2CB9F6DAD1D6382F999E9F0692CB34C1344C7B86466716272
82A8947668FDF9CE6C611CD1BE1A3FF133DA6279F25F80B39F4A584B970D6156
292B8DB08399673F0DC75F1BDBE806E51B2946873E90D509B25853AB0F25FCA6
BB860E709684EA675A3C3C4F60A604BEF0EFF30EFE00E05C08AA50EABE80B564
D7AA72D05EAEE83D45EA12B8C2EBA316F10AFE920ABABE1FCB5723D66953BD9D
0A313F39A6A3DAAD30374F96FCEFB063F4E02A5A1B8F12733514B688408CA41A
769DABD9518E4DFEAB5DA339847235425AC5056E7AD9D54E4DD1BD7BEF204EEE
7DE594518B78765EE60502B5D4D8FC36D030FB2B0EFDD9A57200A82974EAF0D3
6C036B66FE05FF7E29BBBA2C52EE0385F33690BDADA2B0D538EA64AC7CB9682C
E60E17947E7E675D19901C7E8272CF0D458A8B0CF51077748D1F0A95AB030712
E24D053E101C9FD35AFEA96E669B1101E8644A4FA79BF0E2BE0D5D63D4C494AC
CCF815B9A464B3C0D47AECF229AA1EBC2E208024F3703B6B0716899B18263C29
2E1E8332654022615883F3B3D95ED3FBB8E563C2CC64E2DA3631AB809AE0FF99
F0DD777666B14EB7C80CEE58DB653AF6DEBC59D3AB82A2891C3C5224977B9464
55E674261A0932ECB029CC6CF4EB93729D362EF1C610E85FBBFC6151D81BE225
7C3E7C876E836A1E6009BE548E105149EB6052FA14D106E242C213CB237B187A
7B54F41B54433526B5BCF13ED43C4C3DD6C02669F517D7458EAA898572455534
CD8DCF13B125739FAB9FBEF8523676B7509EA7AD0D2111E3585BD961ACC52E50
F44E54C91326E481093C909067BED686BA113C18825686F9ED9588F06261AF3E
8D1343D17A35A511312DB573060A7E73001ABA76E395D789B19B969F25140187
92CA5E16B365ED83C24C44A68CC2E0C0821FA6C1C3A5B210E9C2146C0797AE35
5583D824B2BC3C6BBA9B877B857DA39049F5887F6C75EA22E2C1A23B0A23E741
9FD67B5E29F807987F3637173FA779ECF224B222F7278597CF205683610586A8
BEA497E867582A17B16335CEB85520A70B252F935F7CDFB69A1F8A67E1041C48
2B300306CB5E11A1DF57C36C6E9EA13C0560C3C8A14BF98C1530A3598F35E26F
2E8ED5D8A0B0A4EF950112B2A40681ED8E00E63D89CA32AE0687DC232178A07A
BFE12694DEB838C8B360EBFFB8D45798018A310214E9BEB7C62F58C1E729F224
EC05FB4EC009EF48E7E56CA2A9F84FDC460E352F0263ECE4B0148610E480FB16
13536FBB8EB7DE66C5F0C41B72060988FE907F39B32311E32A9B1946D8CACA5F
0DCD4EDF3A72A9A4A949376BC805CA2A372CF172D46B6B94412E7CF8B2C54489
E6D6A897790D5623EB7D6A90860842964426D9E506537B3F8B4366976D3F56E6
CF780B37CE39F605793D904FA4650A8AD23254FB4E9E9E4CE34660A7B6C08496
7A50FB5E53F0EA8ADEC17CF4BD5B6DCC5F7E835C3CE7D4454AAB910F223E3FD4
0709EACEB5AC116266894AFBA1C099D37DCC25C54AF0B2552C97BFBD1C6C0062
488763FDB07939C7885FD686DBF6C8D2BCA099078135FDF722D4C99AB28D06A0
A4080A732B877EA2DED6026CFA1807B087EAB33A3B2BFA56928987EB0BBAF4DC
72DA6B4EBF8B9D022DEDBC3DE44DD04F6367E04C3CBB3400BA3C1943B874CFB1
254F9A99F998AE7D06DE000B4293F4FCF1D78EFDE074FA6A057A6822533E61A4
C1E2E7B3AB456D19D9769EAB62AD01CA1E0C4F2554BD6F1F4C69E46C9C220B8A
6643077B74C1E100F1D9DD0E0ACD8468C5EEAB6B8AE5324CC077A3B24AEF2951
4FE023DB03883EB57564AEC4B94B42E8849A76945AE033F5D1C37EC63530A2EA
90F559625C437D4AB2016C4670C92D7236CD1D199C612555168BCFE359EEEA98
E07DFCAE1DA5FBE871D8035F777CF210384EFC671842C40D188F4E304C4610FA
7CCCF0512FDD24CB36B1F63F732A2D472C414FAC37B3A34E1E9C8CEF668572CF
91AC3CF6986C9F252363A207D88AB66A7C0DA4A116B14F03AB13D7E149FA176E
E68606F0B35312506C02F1A2826BBA36B4A8C4D61A96C406DF4CF3A843159D3B
AA527954C016D28FAA91548361B38A729CF1E6DF63A016E3F17980CE3D505216
E026DEA02B7D154B2882A031A276522741ACE718440F9AC620FFF89CFB7FCB19
55C7DC8933C690E226CCB41B71BF28FE6AA68AEFC449D6F2C5850581D95905FB
83958C19FE475DCA7075938672E207A41ED8B17A35CF2E4C380E50E1797F8558
26EAB926A054616AB45BAA486A85DBC2F45566226D9EA08B48360A2C205DED1E
30409EA873F16CF157EABB93758D7B49B76DB0ABB2C2646D3F2500142328D8D3
B40136F3CF6DB796FC6949F82AFF3FF151EDC1EF95339F55314E30DDEE869CFD
0E6BB75FD52D81EEB6FC227022120BEF4803811BEC75CB029A6DB10FCE7B5992
5A3F5FB7DB35B3D7944B49B6283A0129D49E7E9AFCA904B37EDB25A80BF2A041
0C67EDE128761D164A9843955BBFEC7213307B78378D8CAF1E08E1C53C079B8B
EAA3E0F907086AA23BCD6FAFB826793EBFED8F1CDA2D49D7672E195B09727629
C1A422D0405FB9B60B749DF353AFF70433732530AB1063F98984CC6C46F3E412
CAE11A023ED7D360444EDD72A0CC432E23DF81945A0E9729DF3EE2000E417BCD
E241F0C257CAB8981A6EA85C135F60246D47ECC90571044E7021EA984A40DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5E185E4FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CA51C950537F9643D44B6981772E8546A6D79EFC00389188E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA40374D87CAB4A5DD8C92695818BA435
6E9666091CAEAC8D1832F2AD07EFF1919E9BA90194E24A69649F0DFD0046D39C
47645DD6E78973BF5EB3A43922976B876293A1ADECD08D35588B794EF9FE03CD
D26508432F9ACEEC0C86CA4D7F8BF0DECC07116A05B5D6D42730459DD44EB860
468A7C643142F5804346C1264135E15756B43D90E252FBBC1F618530BACF4716
5362C1E0F6B93CCEBD0545DD362FF49B08C9033A1E95F5F8A1717DBBA7AAA1EA
72855EB4ECF4832F29721F2965759EDA7ACC778D03F409DEB008EB2142A1B4DC
97D164780529938A4FA7BA0BACA855B706CFAD5EFC9D6CA122FB2077E554C9C8
4A1760A73FAC61EF6C050296ECF0188950E744AB53050CE216C0166D14BAC758
B30905B56CCEDE37F37167FBCFA2CC9AF077A23862B4ED64CD18471A49B62240
FEF22F4D82468BE65F424F267E9713229F7B3ABA30559D9E4B6B06AAF0053FF6
A81D815ABB1F31A89E1F1F3F3712315F712F719E2104FC38B591366950DCA065
662CFBC9594DDA8A2D0B424F25A1A8E0DC96E47F52F335D4EF5B45ED1A9CE37E
2A2A6FA2C2D8A082FB786FE87094992733E0E8E7B556BB4DD1B0EFDAF667A918
171169D8669AF155525E2C91A8525079B97D9FA6FE5B7DA4A263813F972B036B
CC08CCB25B2BADFDB659F305315BE273E5D52D4A69DAA10D9AC7B96C817AD352
B5C4397872ED1E0BA765B0309FE98988CAFF8DCCEB5A97352B6F2DC523CFE336
6996B02D210D844B1FA28AAAB93DC7557045787E987A0B316211C89EC7A8EC3A
02D70409252A8D4FA50EF1BEBA5095045ABA7952457E62E4081D591C36369479
139F23EB1F9D299353CDC99BA9CE2DA27F3D413173D9F296B3DD186F8C3F8658
C91B59C58B51B79E9588AFBB6A2D10D335B76934CAEC6AB8785BFB6A876FE189
F7500B393E531E77C5D38E2FA764893C50807D386C31A52984269355B641D8A0
414D327EB4BC88FA87B910008EA8FEC3E81B8D3532498E7875E1593E1DF8C371
9500A4C4A0951F09F5CDA85FDD822B626F0B4DF1B16AC3C8E46642D95E4D5E8D
E9927E16E5582217693A50FD1F5B7569629AF50EBCF7152E3715510FBF60F167
5356A9FECDA71F649EB3C250BFF809D81E427E3BF24E83613E8242308FE26F51
C5F52B538A85716A62F327A107BD87346338B9DB6F83FE557134C14144A554C6
2461266E19E262F020AC43AC01DB8BD67102E1322FD08D6A1AD08B87EDF29D57
6787EF5896E8747BD177565DB814951BE7CFE6591438894018072909D00732D7
1F63668F46B20EDCA647E66B811F82F08DFAE1979E9ADB992C57D4BC9FF7769E
0A6E389AD0B2A5D10CD4C41A40097EF750675B8D8743FC64B26BF9E44921A707
C2CF3EDBA686132F333DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC4B62BB8
8965B8D22AB04A724DED273BA060E797C1BB765049E61C0B63D478DBD9D1F904
EB6959B1D3A39766501356651F2B690A9445963F346D0667986C994880FE8971
FC86F06FAA5E98124881CD477B308B5B7341714EB80B6C57DDB50EC74C20E497
DF8C5D90DF2EB6F0AC1521FBFD1538DDCF25F9748E9C7C49CDC758CA99C4B063
212655C879F6EB96BB55BF5157FD09085730695ADEFF8C47E610779597A25E67
8DB4EE7B616DD99080BF793667DE800E6DEB1FCFA76FEA448A60401A3B11DCA3
E9524EAAFAA83DDCD78D676E71B6C51A64A87FD82AC7FD782D6126DD787FEEBC
4A63D583CE7227EC10365966AF2C08726F27A20D095709F949F404909374B2CC
B0B57BA8F2F422BFF55CE7D534A2E4DC1BF74D5A454BF4485E2B7DC8C9A39E76
8F162336CEB7BE8A5C27AE952F4946D01DD1D65C1D50D6E1D486FB5FDBEE9826
DA01DD8FA5EC384E9B78FA5A7F6720D207815F79EEF626A126E8005FCA77ECB3
172F5199E5C54611D9D515EEBB7192C63D22D02BB2A5A2727BC0458997642898
4A7DFACBD3FE28A8903CB42EB0ECBEECE10F4D9FD0C5B9E9F3A14F9BFBA60CA6
556B0473D5BBC4C67C2D25384D8E7B9EB31D79E2C460742138982CEEB80F3AA6
BF99216652ACBD7F2F5349E857177D94A431C46347867CCB8E4EDFC64B532A24
C570498BBC81C4FBEB957EBC6BE93183DE178479FA333A00B88F0BA650AB274E
35E9F7715EE1E8617FC7BEC56879D91DADEAA25F850083BE6CC26AE7437664A2
7C1C6EC83AFCFCF697DCC8808A931CB62997E29B6877A1BD00BC1A7A9D57AEF1
E1DCCEEBAAE87CF5DEBCE7349981D834A1E8AB45FFE334532FFF6EE351252820
E234CA2EEEB4DBB360CA7518709F74BCB9FEE4077CC0C490F7C2A4855B442011
F240BB7390D79EB357A06CD67E2C5BD39E004F55F754A8E2469082BBCCC3E63B
027A4C3DF0C328E89C5355F29E7EE697BFFECCAE75C27AEA6C7B73B4B4E4A0DE
B874CDB1570739B1A1A213262E4D4AB784EDEA3CC6F0872C28108F7EBBF5BF77
0C0BA6C712287CC741D17C19DF574028247317FB22442B6DAAD517B60D75302E
7A8703A70517C9FE24A6930AC314870AC4D133C60D9CFAB56CE8F8D14472BA88
3831DE798AD51B71C2CEE666A5693C95962D6AC49F31A5D39135CC8D762C5E53
C23CCF67CA8BF1B1274494E363BF0890FF5C1FB5FC75FD528B2FC34AB914C268
C8874E34F01A8F3E17F33925DFE5F0CF45E34F3E676F57892E7B84E9F1842147
0D2F0274738CB7DB4E9A14291AF15CE3BBD6B3B90E59C99B4085E7065FB50E28
631D2A286B9862B0C69172A7B286134925909155C60AD3A77AEC843DC75C97EA
CBC20908E329F5DE8442FF13EBBD0D06D7E62CE534576EC62AE892310FD56056
AB112633DC84FB7743B5F73E9DD0B021F9ACD205A00D5C6228AA1D43F1C6F0E9
EA338B2E8A829D5D4EFFD8613B50B2DF38EEF34AD0B05A9F13D36244225B77A8
8166768942CF7E11D8AC59AE55F0F7DBAA322E1E5D976C33A4C1B9D5384F70AB
C8F9F74EC9689248EE97D7DC3783A048D871AC6F3464517ED20118D09F22813E
9A8F6B24CC94A37ED7FE37D7D03026506C2132A9A68ACF4E48AEA4E44DD23AD5
437110523A774873BFDB9AE479901957507D4B848A373D2FE906518513D56A96
586FFF4CDCB491617876DC12D9D703BBF1E814059F231CACE3B876EACEA2B463
B4F24C1D3D7510A603C11F295FAC3B649D8BEEE2DBF85283D1B3DD65CB510702
758F21F8DB9FABFFCDE8B4D3BF99190383F85FB9B692A0A29241EE13B4F6714D
41A2DE46FC28194AD2063A1D0C54EF86D11A29D25C36591746DD9783CE80D770
7A404B5B7F34AD778608F4CF9EDD7501A2AEE2F85AAF60771CDB854398BA98AF
AEC951690051A2662DBE19109D42CF3575A4130B81E97C2A9BC215A2E2A34BEB
5AC89CE072710DEF408694402960947DA3B6BF54DA82FFE0222F7AB0E97B3290
EDAED775EAB0D7D553F222A3B014EB44EE9624B0C96706BB7AE92041B78426E4
C7EDA2A77A7C129EE67D6D67C2BC96C880A6B435F850206D0AB69B74A7E9FD53
8C4338F8DE787EF2B604061C0118BEA317D3620FD9DDBF75FB63DB4ADBB1652A
3583ABE38CE55C584D2618007F4825DFDAA3116D2B7E450C8F7B16278DE567FB
37E8F702A228AEF49047078B06C8A968F278BA7BCA00EA900B2FCF2FC9ABBC03
23617AFE301047C9646BA848529E3D9DFFBC86682BAC2D53944F47E4D257CB17
98520F27F65D75B2E795E40A62C9EAC215ED0EEB650262CCC5BAD1744FCB6DB4
032EA0C0ECB7BBC044D8B0C662A0B19CE448D189FB99AF0D7FA4DA1316C3C527
9767142D132F62E0029C751A0D375757D95AE364394FC25E6E0D02C6840ECAA5
EB3D39A3B9FDEF15DA1F1505CDD37755796CD5F76FEA4D8AC7A08A586B816A9F
BE78FF96BF1E3CD52791A35F612F1A0E540B3911A7D28491883B928672AF8E70
6194412994A5A0298BEF561152F82FF64CD3298D11287B46482FBEAD4031D9AB
6265FB6BB647FD9FD95E0A2BC79B11AF3FD1E8FE988132C26317BF8119C2B534
65DABEDF733F2C517D970B01BF2FD7C2020471CDA35DFDD2FA7A020E5B8B0F4C
98521838E9ADF7C3C36287440EF39417ACBBED2D94330DDD281BB30948DBD034
3D9ADA66016E6C568B9C0A0C4A73C9437FCF888AA207280ABF9C548DDAE35A68
2EAD10C1D99B2680471B9EDD0A850116E26EA531F41239765F162569F759E2E9
BFBE93365ECD78C43550421105FAA095002A1B6F9E1EDA5968E8AB24C3D6AC15
F0910133FF54970B0B2828D6A49A483F12FB7EEAF84B0653BB219FD46A500D59
DE2D444FA841E3D5FB2C71551ACDC7BFAD39BAA064C76F7DFBFC81BA33216135
4388ADB955B7100B61C9B1CFBE3C570D55C2EB83534A831E763D21AB867EA05D
D684B8C37E970941603137502D8CEFE03BA888433F848BB7AD870BFF14F09E29
FF55CF49601F6CFCD15059F9661473B9CF3667B65D97DC0BB2D2EBEECED1837D
8F9A6060FBCB0459887F5FA0A17BD455B9D3B9F24E5778A398F32B4133E0477B
DB64A80A21E69FCFEB7D03A6D018A45D4A551AED7D8210FE30A07650344DAF45
4400977A70033A06C7F99F4EB76D8E3C834935B11031865F0A1F1E47B3B6FDB1
10BF8735228949D56D37400BAD10DD4CA2A07A3F257CC608F654D2A68FD43D6A
49F7C5D775E497B317E63079EFE8CD8C72FFB0FD5C7CC27570FE4D6E3B15D4DD
0AC7FCD56EFC7A4FBD31673A1B5AB0C935976DF92F0DBB45942A0CCDEF2DE9AF
986A04506C7688C165193C5B37C8DDFCB7894DD565CCF14E63BA539239EE59A1
4154475351D173F5BA4A61CEE351CC3A96D8DD6C6A2C7CBA399743D35021FDF6
14AC6428269496435EB3D073DD7BC4CC0DB2F0465C6D394DDC7892A2D7AC9930
3844F116B0E2F68451E784B02E7DBF8FA4C39099759D90A5F9FF2FF5D1EC2FCD
8DE2395CDBDEBC89F0609235B8A453811C114CC98D80B9624954AE633F774029
6453D1C98602B49E8C4B49AD69FC87B6BF3DA2DCC9EA10FF9704C129FE8E3257
7348B79C6FB2B8487C2466824C88E4E55B0311A72A0422C4FE3C2C988FF1D9B3
0BFE9C434A2389BA09463CAAB60919F86E45945390B365186C6B679920264BF1
58462764ECBF0942EEEB183CC715545FE7E43DCC5A1A5DAF10D47868E5D19E25
DFDDF4C26FAE59E80A5BE0AC79C0AE2CABA30F4E42D74236233A50F869DD889D
5463D7B2E522259DE368DAC70208BD3BA29FB3B01A65985854961562C172EDC5
C63183ED7169A5403FA2504839411E3DE5642F2BD3539BE30269B2F3B22661F0
6A0D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AFD6391E81ACC544000E97C2E4598
BC30968ABFE8C2E76FF1EB04BB78E7BB3975C777E2B2B1896643B51D2D25F3DD
96B454547AA6E39E704842B17E1E8EC5B2286FB19DECBD09D239CBDCECBF8458
FF1AD9E18F9789B2DB9FF2CCC0EEC5007E8D72ACF2D32BBC4DA955E93C086058
929DFFAA13FE99C45BD3E6D13E2003F05703B4ACAB454C6CB74F0D9C95D628A2
62AE0E744AE5D671CDB05E4E8C74D5A790AC0553B856619A14029B25D522EA41
1652D9A54F1D1B22718DFD7CCA5443327F61192D3C6863DF4ACB9C745D059C0C
2180824BAFBDE47BB46F54EDD7D7FBE6BCC41760E7B2BD1AB594E30D797581F5
A0E81AB0F7A6DF463EA4D5F9F6C5D3CD3A1EFE3987BBCDF5458684C134520E0B
2FD3B7606368797241B5BA06E19BE70F4334B48EA578982D5FEB53407BC29192
867A19DBBEAB1696E0E2C1186D0798C1C3A319CBA04421D3BBFF8D46AC997C8E
D678DBBECEC95B1E3EB16DD6D24FD2977DAE76EFB3687808DA0E9B042362B27E
CF0A649BF5B205854F9BF1F07A7DB49C5C9C8318DF97F1C3266753287FAA1AE3
8EB626E9A41CDC6BE62BC7BD4BEE941EBE1E65D96A80F79FDE63FC7D2A4A9E53
638F6962857CE95295B3979711C27FEC43D0CFA62423E3A883D850F4F7E5F3A3
B3D2F64D8C9A780CE75C132DE809E78AF0299948B51235A529766FE954E0D7B8
AC10E08997786BA72E91BA1D2759753E96A327B6CF45A9850AB9E8BE225001F0
CB10F8DD82910F9A54FCDDC09F5B3A390C7084BA4E6E0D78AFDB692AB573384C
326BB19FEE02D4F50615AC4FF3F906E9D890A82B2F85F79FC85E67561B3C73B9
D2DB0F8C6FF6FA86602C9ABFF386E03D9C1C9BA3F119A8D3E1CA21561EF38587
FF5DF5F69DCD8FB92B332FB6509FC3FA395199FAE4F3B71F350D5035BBC540EE
BDFBB6FC9E6DD151D12553E0C94AC457D222E561C04CC539C176DF97ABD94A46
BA2F56B6B9F06ABD24C1843394ED90DB709846CC090E752DCD86BCCF1A5F9FC7
A6BC09A67527FD94136DD63F6089023AD8E73A16D9835B5B34D12F4FEA19F844
F93DDAB2A6D61FD316B5BC7684724C6676F8763036C75F1DC0671FE716CA40AD
BB76E13E2AB3AC73CD8196B982EBDA8E422A9550A2E8816463A3B951E33C7EF5
F1AB73604DFCC2AAE3C9DAB4A1AFD62608D532F4F5933A228601B780BA2B6C5C
5400E5888D2E19124D3640CA3A1CB631AFA51A23677CF068DA63CA1090BA2CDF
850F9E1A5C5856D41D8FB730E04B0C87467990C8FADD97AA854076AD6C685EB8
A77528D9EC0E2F37B10826AA7F8D15F5A74F536B4F63EE567926FD80077CE767
994941E9A5D75A8FBBEDA2F3FDF20CF092A23EA9F973E3F4E5F1A14EBF827DCA
38CBF9A44C755FC8A374550A55B6CB4A316825AD743AF24B4870DF468A24148E
19C3E784E53A157C5162FF14F000FB5CDE7DDEC184C8878A2566E91117779679
3711196E420C86AE6CDFA24B5CC1556D9DEDB9A655EEC89BEEF89D26970B6762
81FE2BD15CD1B64FCA55B593E649A4BCEDA32C10C745DCE5FF4D8E64CE7047AE
1B27ED2B72BE916DA31EB63C05F6435F8DC899F543E8D3E7146C9A0601A2D343
E618E867FDA253BF15122A367AB46C191C464B8E3FAF7100C965DD36E4A3BBEE
16617DCB9BC822B7C531B121120E9D0B34F8CD02FA070656DA891F6B6C2DD195
B99449A0B137708F4F07137879C4C63E8464296E8C6A453560E17D367F53DB87
90493D8E3D0F8C57F699009C8D902ACD8AE978F645BCEB0E58AC65EE130778CD
F02FA48E4E41C68624597766D01BD59A8F5E42C59062139575862EDB989744E0
6EC1D1D83451AB93551D51381A8FE29323DA6268F8E9C1C78FDDFA7906F35946
06C9F70AA43390728A701FB14B6B1700AE32B152F9330AB6BC5E2CECD68B9981
B2BEF1AED8D00A3AE7EC05D9A05AA68412AD77CA3723487975E0459FCAFC480C
3D8ECE59A563B4BE5B7CE1DED13F0047C7A6B6CB3E67311F130DEA693AD05F6F
CAAE4BFC1F60C355698E37C3146B9BB2AC7952170CC7C59B75568062E6BDC00A
DA7B900F53D331A0F830B88E3F6C701E97A57C400F062F86CB02BE39790C5565
72C54BA419064E020112C8BA162783B78C83812C1C7E17AADA221C4D03BAA1C8
948ED7A0E9D6DA42978A983DADBA4F728040D2A098AABB7C6E37DD6D1B9DE5FA
B1CDA68C7673B94ACC38F871B2E9480344BD6190F8D9D5E28BE28F1EA1564F1E
C6F3C18E60239EAADD0D24164AC3F8505DFC7A4862BCB564416C6E3B9E181071
101E184E8C207262119E30EB5529B956F65BD5C77819E5D1E2696EE705195343
43E3827B5CB4317E4F57B8E3E7B676414C724E27F77282D8D666575BD484B353
909D7E57B80AD9F009C766EEDF278F26B5D50F9C8BBD47C518375ADE1CCB5CE3
31B5E01E5BF051784EBBFBF4CB698730F542F14B0140956714F9E17000CA4114
22044C538F6BD473E34EF116BDA16A8764526105E28ED129D09E82012484AF76
49C3FA87A3AE44D93FB7A0D1A5CCD0C31707470E0F5DFC1FCD7A928DF0CD388E
D13FB14AEF5FD1CFD2D1F158122A3CCC53DCDE71AED6B5CB449943390EDCC875
FBB7821928DF50CFB858513602958E2780DBE5D8E384CA3C4F4E14B3C9C75D02
7348A06F7E464AAAD46FF165FE342BBCBF05B837E703278B2023FBA2F0E95E98
8114B4AC5E6DCAAE568B7595A72DABEAA29519F59A963E9F90F4A84685377B43
F208A3F33192926C89AFBA4F271732429D0E7D2F25A4CDA2190A7C4D97D2693F
E5C217E4514A2E5238B760ED6CFB322FABE86BE0F30905CAAAB4FFD115846BF9
8CD6DD8CC10E1234F7D0438AA8FBA3B3C81B70810EB0AE50B5A2CA87320BD686
74F19CAB46BEE6168EAED2B0EC9606F6300D6B12BD5988EC70E89A7B24032854
B34F5FFF1B2283621D7F390FF41CA70C6034C319BEB9D85084AA21B81AF837A2
01B8555BA60C360904A44F1D1EC6A33C1236880DC34F9B9A7F061B9FA20CF2EF
B32200703EF58C425B9A7D27C8622F3DA3BE87F87ACE26A40B708D9F5F4CBD9F
351C409B9FA4E10EA00ABC6139496272CDB27D6B56D0EAA9E8BAEC4DBE7679F7
D60AB6DDC04938A42C948093629F5AE9312D840A34635EA134C5F21711AF3E5B
9F029FE21B08EC85B51D5111091F54823FDAAC9DDFDDFCC6DD161AD22440DA49
5102835E4D08CA22463975114BA484DF99286898FB52E8D60EB8F100DC970A6F
6FF1EC54033B11F9281DEB6EAD9EF3542E06709563C206E7044D53414ECD7045
DDEC6576D746C1AEC54ADE2497021A2B138846D1A7967B2433B6BD77628D7DC9
2221438E1C15460912F08C8FAEF2476515A41387CA09174006C8F2125DB480EB
E67900498C2F9834799128DF2B034852C673ECC07FE64FA0D48C8A3F63ED30CC
E41E5BB788B2873C2580AE1EBCE056A0158E03373577B6D2BF8FDC26D77EA9BF
73B4B2ACF8559569A120F9BAB156215EA752F4C5C7C97FB11DFF4721707ACC1E
45E4D50FA5D878A7BD6CAB5EA125229420CF2450270BB75F181704FC3ADA152A
9B3FF30B21AC770E51AE71C71E6B7796B6B54F27FEB1D9F83D35D7CAFB950DF5
FD1CFDF348B8A1F08379922A63753CC04DF36956718925520070ADF1C1C69664
036AAE212C84902D1438E9C14862F5B9D7E218877590C769C117CD8ACCF943E4
38072C9B0E5A5B285AEDA6373F36A7276793D1AEA02C1033D9793F00C5BD05B7
48D1520493631F0154EA2E91D9940D8CA147C1035893E2D1C6AD444BF3463257
D3347370CEC5641BB4AD4AF497130FB3F60215E2C2E237091723377A30F50EE2
D9C8C41FCF68538CA075204E90FEAFE0A407C7C23BA5F5E684764A0FF31877BB
2077B86E4DD3C751E3FD6A2248FCCB318B5D0C7CFF8E6189652C549D02492F97
C83025DD7225A6DCCCBDEE98513973DF94CC2D379A7307C7C5F0882D0E0E45B3
10AD8C11FEB8AC64FC607364D550859170B4CA391D713F3A00A36877789C911F
F9F693D459C15D45B4A02609393B950AAAF4BB712A1CB59AC7194DC8319FD802
BE7341B5F4E5D10FA2DBB3E036DC6EF898745860CC48E55E625906298C0DC262
F8DBA452AD22FF83BD861FCD07E1302D6A3AC106ACD022753ED58E344E9105D9
412F3498D5813BB11DB6B82EF7278597CF205683610586A8BEA497E867582A10
DDA94849E67B8185BE80DBA33BA7714FD25DDFFB5465077F1CC72721564B8709
C55F98E7C5F18E4857576944761401E1EE4498B7F8AEBF68A600694C245667C4
6D570B6FEB78BCD800EEF2627BAFE016A3D11FC76133074C594FF2988E6A31D0
7C0EFBD835CD0C526CDF34968DE94DF942DBBD8DE5F42B0018F83453BF1654ED
9D2F8AA0EF9C7FCBDBF90937F8230701D89FC6C2D5487DDBDC27DC5658773877
79B1853D20A31C61287748872F2BB2200367B4FB6C70615176F41A8DB91E6273
4C93C81AF1E108AA75CBB741E74C47F8B20547A2A7C3BA79D292E3B0AFD624E6
45E212ADA620A07CA27E1B0FC32020B979EBD844943D7BFF7A328EF957C8FD24
3272AD59B22403C1F1B08901EBE7607A0A86C523C36EE24BD1DE66A27617A277
63AE2285D934934A7719B7C60845535FF8EDF67192A3D927847A48B648FD0B63
636A89DF689F2841845CB62FDF2529766E27585FB125A5FC056FCAF1917DBFAA
66938828D21E0680503D7A796C4A7727DF3A050C1CE35780908FCDB4903DE144
A976F44BAB92664B4078247A165264869A4D5EC5F48DF2CCF8C7B67F2B97B8EB
975E2E4918FCBBD3FBF06F17AEA7B3CF3B801E460A45810C6716655E4750344A
2A061F5D409ECDB9F9D58F87D5145728C12387213B2AA0570A583C2F9E97F779
C06E69FC7987E3727EE06985E1559ADF6B9886BCDABDB7835E97EB66928F45EA
8146164441267E541E071A099FB5F3896887F0DB0C940BD5E10A5FE74E649567
B316890407B39D34B68BB61B00B146D2E8F794C157F8BC7E3B39F2CDE81B5A0F
4E79BA5B0A828281C82375B79742D7B7B612962A9DC4B8DD8DD87504652967C6
7EEEAE844AA5CFACE59EDA94D3BB251F9B1728E12C2259B49ADF8688A69754AC
A70F3D7C5D777D6B1B4021598EA59FC3E9AACB6E1659234A264036C6017B46AF
959F7DA140673DB0BFCDFF1823F3A9A80F1F7E8F7CA7B20F2E9E372A5B982813
23C7EB5A6A1BB84E58E792C362F03A98B3C31FBC84A663DBE4E3FED3696B649C
FCC81026173C1C66B3568EED4311DA1028846B3EF82C41D778B61F354C5523EC
18B9724732043C890248711496B906E3E859E3A4CD41C1092F4FF2D03DEA8AD5
88BCD2CB6D686DBBE0BF96BCFED7027D94228DC0D5151A841680D51033154CDE
F910FD79CCDB0FF95359E700BEDEF01482AB7A569CCD715FE50EADC33660ED58
2246AA9E837F39F16EF31E330E28A99E90BA63A3D95CEE207E28E133938D4CA0
7A22105E08086138435A6DCD864A1AA95C1F47F44669871CA1A5229FC25BD0D1
597D73EF4DBFF505B089786BA0268E0A8B9301F229A930E127B0E64D66A306A4
51C034F4F3B3373C705FDF1CB3AA28EAD98AF1676928C70D0D2491AB13FCB507
AB79FD0421C5C06B9D5930211BEC58EC1F4619F671605FACD5B6AF9A887A21D5
9350EE315963CBC3906971E3B38D6F62D604675511A2F2E158609E52451E8868
944268B357B0DA2BF83CE8D406401825FAFB883DD1E0F026FC3AD1945EDE1F1C
5A2469DC27876F40BF432A8E1124BCE856D9BD84B66CEDDA026A315CDAD06E45
8682797A94EE0653382141E523DE6B41DF0D7D6B0E5387FD15C6A77ACC0E2EC7
FFAD8134E3C94FE80AA656CC3205EABC5DCF39D8E6BB07F7C52EF31D3F1A6BE3
1D8735F75016D3121DE3104AB2CF13F0603A42D090F29462E903CEA643F810BB
4F6AB506A58B14B398414924083DBB827A10EEA2F1D2F4353AAC2C036F337C4C
A37984D103F984035A523CAA40A22C44D26EB1ACC0E90B264F32B774F934692A
E7093DEA179DA4FBC32DCBAC6833F62B4E573019A93A8B1CC4F98EA50B299341
BA8829072C0C6DFBD2AC4CCF96760637BF1042155BE10F09A6CC5F97FCD349F8
418B6A01E5791944B2968689F5DB412B33FCC33D67A75F80431D059BF7D78041
81BAA1096CF652DD43DAC6C32C9548A6F7607A1F49CA66CB16DF9810B7F695DD
49F678A39E12B39B2397D00BB653C4E852FC3164BBF15FDF39AD407E8FA1FA32
3408D17A983508F1BC0414FC98F0F035385A1F49A5C9D9020BF62BA304B2E7A7
C849F280C7BF46E448EC325BFB498F9288D07C58619456F282EF53958976A09D
4D8F15D1416F26DFCD5F0CC42F01AD47430A287D7D0A9BB561FBBF414F0E5FED
1E30409EA873F16CF157EABB93758D7B49B7684F6E91212484F66764A0D815C7
E354B73B808F50AA36B33C367ACCACF67E6300AC1D1506D1AD16258593B23E9E
63374A2272E6511BD0987B6E4A1FBAD528ADB4433BCC8F0217FF657475174496
299457BECACD36404D977FDE7E58601358A043AFAE1A3100D6786FB1A1D005D5
76F57FB3C26371305DCF1687976964235049BD3E3CE70135C70F1EA0E1A5E018
5A71AEA8FE63A64949A7BD674E2E72293C1517E42CCFB6922C2DDD64794680EA
1F694C3CFA364C200E45C894E763FB6EDC0E9CBD5D4E8869D9BF43D8309085AA
D4C782B78A35CE8DBE0A290BAD0885D6F8B4DBD4E05A596025A24F1B49314A2C
4966F09EAE9DD16C5B958CF632FAC74FB900E04B0B13B26BFA8A80D628933F24
272A6677F20E75A8F7FB6C1EC7E50A4654EC273E9647736EF99D7610E03E2A71
698F9D8B968FCFE4260407FAF68C8D9CB9CEB47BC8DC7B5B91416861A6DE761F
FD253D08A28F4F965C8009F2965D6AC9C1B17CA5BC7FF4B48A3A9830ECD85E92
A8FCE76F32E61F3DBA341BCC19B26AE1658A5516E42BFC4A9EFC0F71935DED5D
0548BCDEDE568BCE4B97C14DB45BBBABA2360BD535261AEE31531B8EA85AA74F
B443296734D6B7F9A7E71D1685C7A074E4B55A869C96FCA78117347B9CFA480F
F4A0E81FBE6E6BE90EB3E92152CC727535AFE72D7DAD09D003C39AB3D1B01DEB
5CD178D85E3DC41AE8930680CCBF2F51A2904FD702766B36916DBA8F9C96141B
BF4788F99BE9B1AEAD4F426E594CB35EC3B94CE51B7C634E68611C1C54ACC83E
24179FB78AE75236970181E4E02D408B9C11475524EAFC680BDF496A8D3BC5C0
A6C506796451A79F4041BAF2D3BE43FC7E8CE14C9FF7C48DF52F3E70B7458FC0
9E29911CE7E04BA2E2FADFCEE35D62015BBC57DE78ED93E3891CEA1B5813175A
77A2810999B0CC5EA988A2944C7FC65D53B5A106F63E9DA9516C2643914BF569
EA1F9CA8277788FADE52905B691740D36FCE933DDFB35C8A0EECF012F54842C6
DF08D4598937F7A5F9E1F9BDBBE0539C09DC52E1708DF0A673F646FA4C547A78
2AC97BE36C9693093D4AC24A092585461E0B5960997AB5FE67EFF69065B6769F
717BD287A94CF9CC4B7B2C51B0E53F291A7FD40567D9F6C23DB271BD23FA4E0C
5A4C591584F1896B5F93632E88F1042BBACAB46E5B0A716357A99D6BD16A1CCA
6E1EA5B80C159F191EEE8E5518B94CAB6E2B2A420EC9F149FD6A55F1A51A895E
285885972110BD0A890674CF9CF62D79BB3521128814A1B75DD571F514DFBB79
9E573A54E8C194DB4365A224C9813C036CED2F7CF2786AA78EC0527660082810
DD4D12583633A6CE5A6645F773517B790FFB540FC1AB69BA768310F537D0B4BB
9BE5948D3AE141749B470B52A16BEE3D3FD7ABC1ABF5E9D581B8BF729B4B7467
489F097ACA83D5032E72BA2D09F7C60572E3AD7C57EFD8E4E9D8B2A1FB58162D
FB145AA8902B8D64F1042C856FBCF6235BAD1F0DB8BB8D647ED8E6E56B4B18BE
7425B7A59A362B11C163A54E4CA1005281F055219D12D6AD5984693F8721BE6B
48E82184EDC509992BB1AA1F97C7101BABC80FC6726396B20DFA40ED6AC6C136
A756C26C5E123651EABBA1556BCA7C1BDCA7EE79961089D0236E4C9E98102FCE
87AAE90A404272B8F384934BC9FC64EB110B540C82CE4A83C0A4567FE859EBDF
E7676366F44AB6F5977D1D2471B5642E457D0BE406066F03701F5401AB2ABD3C
25D5C9A2FA8C392A82F8DC836C8BA647500925049188B9D91BF76B2C66F566BF
46C25E8659EDB536C4EE8A4A0158DAAD88F47BF816180CCA3183537AC7425857
27C12F16E867F7B692C959CDB7A45A9DBFC6ED9B9798C718E4EC9439628D5E51
30752A05FA156DAD221687F68326E6C59A9E0A045BB02C811F1ED8DB2FCA04F1
8BBC35AFB2BDE1E5431BEC51670EF8463D3F7D42DEE3BD2B2A21BA498A484C1C
8F298CA1902F491A2D1BD031BDDE4595495A365F434AF6C6F50100F1978414EC
E6AFBFA6625B81A141C3AFD1CA05777BB5680277C2CEDB381F84343DDB171D59
83A2038DCF160C2BB20B1397B04D0FE79DD930033C7C2AC6AC246E5EE2764627
219A3B602EA2729AE218F44B4D9BCCC7507B2C2269B94DD9831F0FBF5E2D086F
3115B185CBF6F362C146A2D0C46AA75BFF1DA4A4B30051CC74AC1BB800B2B30D
034C787D461B9C9B15DE33E67B25744E2FDA2E47AADCB3291B1197722398093C
BD222B559CF79371B1A4373E7162DBD439B975287260E0FAE00E1369F7ABE64B
951812C848BA5B55AB8B57D38DC282390E735CDB7DFD57D62B57EDE771122518
F8DEE14A3BB7EA013687ED3699AC7415E6E4F462FCF7B4C92A8EA9C0E0048953
5D50F3C73B52CF21CBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0F3BACA316
A001EF34B710BB4B0E89898939E1925A0D5B6344912F98E607A891E5DFE6228F
FAE7F13B55C205F63367DA266CFA4CBB077034D588EB0E17804F15C5DB7F231B
FDC50CE5024BC62C59AE5F1EE45E58CE089F9E4BC79B2FC5192AF4B636E6A32D
7201121744C5D0D23F518D05EEABE73E8C72692DC12B53503EF1433CACE72E04
427C510761B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E72D6456299EA698
C1A77EDC8CB025B10C08A5B355BFF5C6C412F86A496E7C77173A0CDA0BCC4668
3C239700CF21B5A298C718416514400EB47B86E2FB3F8777BA26C0DD1067C50D
A54B5B97820B88A18B6F5E9C82246C7F987946F7040FC9F06E92BAD21A9E5813
70CCDBD901157B8EDC93FFB34D445FF8B74EE25981C24E8C36BFA67F71C49E04
9E4438354CC6B692896971F28513592B2818D327DFC1F09F19F8DDC59FE67B0E
B845E2E23E1680B0019D6B77C5A8E8AE21C2C10E9B2AC30C0624C769CACCFF0D
FD5FEF8673DC54EF6509D02C6FEF286C526C0195164C71C0593D9F6B89968B1A
8550A5FD751E70531636F0D12E308CD62EC74FDFC7CA0F91818321B3EE726C66
1A5C16FF0DA887E39D1FFCBA9B1336D70BC262D165E9982ED5ECD38E11AEA8AE
17B02D3D65057422BD311717E089692F697C25D6D88CAE47E6567488A9182615
95698F612ED909F8B129941C49A1B9D9D18DFB3515FCECDBA83D64CE0419183A
FE51105AFEA0872A2552443B0E331896DAAB55B916A3E13042CA78F2DDD02D86
32B42602CCEFFFFF4724A8BBE1392FDD6F261EE615054441DEAF6EE2B9165C38
AA49D69F2E0D329684551C9012158313A82304BDD82E4D6E2C479BC9C761571C
27883C79BE00C0C3D1E209EBC6FA6E3E864C1C34903D7F5C495E6CDA6AA855FA
F929178B7AACAE1D371228606B58787EBCCA91EC9AE0AE4F8A7B6449A558A88D
426B6C046E9A088FA0F214CC7C29E99B5641BF3A81102D49B5ABB051053D4925
011446DB6AC8045322CC1A97A9B09A3109294271793D44C28114C49D630E6E1F
B4DE203C8BF9E638EA9A6C0155F87122E2175AC6DA8E033FF3DF0FDC7F4F675E
E6A34C59FABD2C48903EB29EAC610ADA000A7D6D9CAAC78142EDBC5404E5366F
675032DB812A9694387BC6A7A76391B0F84FBB8EA3200E3F69ADF949853808E1
63160CD1EA766B8E2272B3FEECC7E148D5FDA02F3A6FFD57952F88A53F157BD6
0FAD7449153823E9F7778158B67FD4CB8CEC1D7B1F499BE77587EDD385833F08
A9F3E86149F16F8EF74CB8BF3D5F6B39FCF82B99BA6C9BB490B319CA61758887
D672CBCA219D2B5841538FE1B0FE8490E4C77A24A0067A893DFFFD64DB0BCC97
60C91E86284AA42EA6277B31B054200C90A4B15CCEB79085BE0B5CB46EB052EB
CF9374A4F388507EB1C5911495DC5E665EDC04C89FEC4E818B2F64AA3D78C308
C290FEECB6BFDFFBCC46AA829DF67E37A242C5E0FDF6AFCEBB0621A8ADE75409
767B96D940C773591DF0BF885847AE5E7A34772BB4E3BD1DF296E51991008C03
514B0F8F4C05D9FA435C643361289B083AF3FF0BAF2E5929BB08D42023B94C5E
08A4BC140202A964893A4F7E03021E2F291F270C8B9239876BB6C11EE01EF5EA
9A3595DA8DD910D7770583AE6D6F1A8A9174358613C7DA3A60E91836B09FC74F
9B037F2493192077D7CE0A28D81DCD1E8D94F55FA1F21AD44EA7D10FE747739A
0C92EF6EC74EBA6CB20D0AC3FCCDE659B24123E160E65D2ED3DE1E37473F9BD9
2D3BE4E77E4DBA5E34777FF1CA8846EF23C38EF2AB975F04A6CB59DA55B1FFFE
0A6A33736CA5A0A7A75023BD9BFDD0C941B4F53AC53A51C4843802081696785B
F15D76F5457864A62B9B93C6D340C9839D58A365195647F6BCB28B5B1C176477
AAC8583B1FB0BC61C7A26294870255E4A960F8862FC36FC9583A048A83F68049
C707E5FC1473E7DF94525C7B8236D82B57FF08D62D1AA14CAC2886F8DF4CA3D9
6D4B551044BB5A01FD8F30E96A773B1E19920DF959EC20BCF9BB1AE6F5715FDC
C38757056512214E376794BF71A9AE42D8C2D8E0955D009995333DBC8305E2D7
B37A00D973D05F42D3E371304227EC703D42B4C1064DDCE84DA235A8448523E4
FB61522B51536AD69F860DA406B0A0C495EA195FBA53766189335DECEA4B16D6
EE1A010A2C28A4FBA8DF907229C1CCF681450F0BF41741C5D9298A1C3AC2B15D
B2DC33012FCDDFC8ACF206EF6A6167019188AFC8089C4BC9E39F564B0C6FB7EA
BC7BAE61A2FC3B4347AED468CEDE89A1454A27484A481372B38707145BD0F43F
9A1290E91C463895BD12E8A831DAD661E366F47B1F35B8C1DF5D27D2ED7271F1
6CE4826618615DA29930DFDBE349FB331AE9EA757854481CD1B3B8E5EC8C2B7E
BBD5193878AF0D3EE755BD5958FD3632E670361E624AAC54ACC206DC00F5B58A
70D546BDE99255756899B6C53589750BE5BD6543BEB9C341427D0A4107DD5864
F968D9EB99B3CA1433C12D69528330250F9B6C1E220EB8942225BD45F6FE01CB
6C10015841B66CD6BF4C733660C63F84AE09FF5C7902A238A22607F158FFE415
C8F4CE25AC7585A77E9427925F63070FC1F62B45083BC077488803F18A2569F6
7BF88C6CAA306AF4B343BB10D04C94B4B6C06944439B59CDD0C3D87D2714EED3
B1D98F0660EB376B7D87C01ED5E6E498865054C162DBD34AC593EF6F4849F2ED
D4D3F861FD3BF648047F48DFDF2E1D79D46E449E0B62800559760771873D48F8
13C093D520267559D74E54C9217FB5FA112FB98F3053BA620B540FD89803F6C3
CCBF102AC1A3D7B320B1368BD5DAEBAA9E03FA136B22599A513A5A5F8F39BBA8
D08AEB6465A1FB125899389F8AFB0F2BABD93922C7DB78C54E81C2E4C11086C3
59EA6597036080C9C93BCC120E2E8273EE34C3A4EF0562D752A48A918EF0FEB0
0E6F5C40FF92A66704671E53AE7A2AE2E881E755D62BF45FB7F79DC36C582C27
4D039C6637B6BA413F846A887BD1B3B89EEF73565F3D0D2816C84B0A794D061C
547E8F1798A64F9917FF908D97D43B143FD948C3B94CB7CD358CABBC7761458D
882F528820718846E38E374DE01977C142E0ED10318333382EA7EFD13F498CA2
5084B8F3F8F2614882C88512C17290004B54648C2430924E6AC90BC611F18FA7
D4EAC0F9BBE9386B7D01A19BD70782CA4698C639FE6EC028F530815D8622C8E1
2F61C371D29A74A310287E56CD446FA24B1E9177946FF72DA1DA89CF6F9FBFAC
A3A735ED0119A05B4C26692E464DE4CD3E76C93397F7998AFD5A64D6903A2223
B0AE7E3BA41EB7AD90518763B64B0B422DF1DF7B827A5F85EB5DD9ECC1EB5EA6
12AA0CB1A9B056402EBE240AB3AE2E0B1F5CABE244D8F1F6D29DB3997620BB2B
703414550395F5A21DBE11C89C293AD6CB2415433D3BC970F107191BD84EACA3
B6BB0E0B6F65BE4FFEC8131FCD31E8071E3C83667441D2CC9DA8A7E239B78825
56F829D156CBA40997B3DC348356498766D584654059FA3A47546439FA5A60BC
3719653E525E49FF6F778D8BACE1DE5E27A9F0DC4B7EF5BFDE9EA4A64D445BEC
C73A40BFCD6E2C522BF8E5FB4531330E02C9A8EBCD6C3AD71A18967EE26EDFB9
0DA95B5899C9FE409D491DB422E2CF3D2E6BACC07E8FF81098FF084D9E44B1D0
59C53F7E34FC8423A9092D9F909889BB5F3286E69430D36A5D1279E08A8E5E51
A42920248E4BF77A7876799B1FD856AAB0EF79F18878C811EC38A21692F9B866
C0A59D9D736D429B02883D063383B646672DFB2D453DDEA3635B83466865D389
BBF512462AB6BC2F9FB53EF5CFA49B700AEFE3F8CD4087B0766575358EC8570A
237B5C75F19B8F6AC9B8097F47863AC853E1ECE72587538C88D834A1E8AB45FF
E334532FFF6EE351252820E2380647912CDF2DD21BFD7CC9E5E7B232CD9570DE
D42DA92C95D532709F7A5DC180608370FEA2F20521FBF9165F5E693C3D0E4E3E
15E5CF2FF021CF6AF4596330893FBCD831BFF1F4A94CB02B67C9EFE3A2930C44
4B7792A4619931487E4A6B30A7396CE6843E57FF9B354CCBEAA562F2891F3889
83E560AE31E321A14D78E952EEED8A2026BD290CA7DA81F744079461180436BC
926F08D69F8EC44821E4E4FF707C55BB3148051B2B6F2E8AD884FC8A20B126B1
86FBFD22B68F30AB29E8F16BEB88A6CFF0978CD0DA0A92111ECBF02129EE8DF1
6E063B7BB9D34606831291C55DA515B2D8AC508773330AEB5E669D85B963F7DD
D2E8B5A1C11402138F3DCB54A3624AADFFC21A73750478002E221E3878624A01
5FE75322A710B0E857532D24C602EB5CC07CD313A25F3A0E257751978E5B0B9C
D48E05C1185A71C555012DD01A91B722FAA706F7F21049944053D4CC2C65CA76
AFDBB19363D152800AF844B9D6BFD1FCEDB32E261F8BAE46654CF523D136CCE8
B52E8F7F5D034216407B22A304F0A7E2E08897D14EA190CC4B59A63941A65F73
AED95051BD333C988C2585BBD1019A98A4BBB81DB251E7B3C0453409A73E819F
392E2FB485825558AD6A79490429AB0131CAE9B33CE1FEF25113444994DC7C1C
10EFF2357512CE3C8DD9CE1ADBF154568FD5C1E09B87C86376D2888E670C98FA
6E95402D4CF1E0E67DE556336D9E1EBE5B638ABBD0693F843B734C61D686B3D4
676B0D2FD88DAE9B974246960313DB3D9F3AD5AC5F736EFC853CCD37A9175FB1
9046105D9D8621DA1268707793275F6555EE0C668B0341C6A4FC5AD0CE529C5F
C0D4E6EBE9460F4EB6A5A96785778EDF77B600F6593C69310AC5152259D7DFAD
BBFB1295C7175929A360FB9A7E4E926E779A09F2EE7F6697E406B507D64CFF45
4BADAFABA7DB4B007EC9B5F8E0E2CD5C0F2549FE9FC7386557C7C79A18E0A3A3
188393BA47D915A6C32357A08F0922DE317B62C898DEBDC55463D1C07483350D
22D536549EBD363C53A1B9F153539A9E0CF4B09B21DEF40CE63E48DE5B947489
35A928F592EA9AC0D4726B1F0D3AA01E015AAF4457529AFCD70E3D64B32359A3
AE7AF947366350FDD60352A1CBA0A0A7879F4396BB671A7910C842D9FBC7431C
FF937FF7D5EC5884B3D0E655C35EB16CCF72FB9D0DF35A61CB9310079F211FAA
5227E603AC47579752BCF5C8B0040059CDAF1118CE04D2388269B7C95F025729
24F4BF5B4F34264628E17B9E34E2F048C67E760E5ABB969BE7EEDA5CBDF41F31
07AD370AA4E93CFCDD7F5610D3479BE05AC25519987441E6B3FA080FB792E417
F9C5E528C57D2DD2AEBD2F657404A7321D9AF702ED410BEB84692963332BA317
6DB00256E808D1AFCC967B6C0A0BD0A5DB2DA45BEF9E20F8236448E29D18A82F
856C7F3A9F24874DEBBE1E4DA951A5154669F77276FBC3AFE7318CD34760A2C0
A0092D0868855714C441F9675E3D20C35D1BBC0709E1C5B6052638C3A8D8281E
285A3E41F0A366BA688D6AF88DF1AFC962910A0C0D4F1BB50ED4D6D273993546
A8588190B65F7A3A9AB3292E0B1117FC9351C0A80326227BDEE0F871686AB1B2
2960E5DE8CA3860D4BDFF663C74F6EE5D4EEB9F540A6039A9DBA5EE588EA87F2
BD458E8940B8F0C8D136D265C249B706EEDE4C9DF37B0941A6C8B55DF7B702C7
CB734585C36D9C56113FFB8797AD819C4B7199C447D567BEB16CEF0F14FCA6B5
3667D3561CCB7076C6269E6873D7F8355A10C9A77C986326BD4BA796AA14AAE6
5C40C7B4E7EAB2B9CFA5ECCB5F9D8A68A85C835BF9E9B3E0E3442ACC8F9EFE5E
7B2EA0044FC4E0557335DFF2613D16478CEA99A13F65908944C694FE902B29F3
54FC6CEB056DA1DF271566A13E3E141A82FF083AE7DE09B791C625C11A9CD14B
896384512FE5CC1844E999E5493395636A5EF681514A38557EDBD734FAF83EAE
A9BE657D747F96689DC11E30D909DC6A1D2CC977FB5A88C5C3712E1B942B3B6A
9ACC76E96101FD2854BE4C7ACA9CFC9002520B88F1FEE7AB32638B0AA6E4AAFF
E427C9B29A7F856B2316A830279F00A105DF1CDAF392DAC15DD2BBFA08949ABF
CF006938CE52DC30EF63357364ABA469095D0CEBF4030331385A099B2F3DE1B6
135574CE791A26E1E234889B0FE75B3A670005AFE3DC207C637F63A1F68C6D5A
2C2369388CD6ADDC6E7494F86F8C3939211D916712A414BB10FACF6FD9DDC6DB
6DF9D8090BA7D3F1B16DF47E985D01E85F051EE03F41701BE5866915CA8C2462
B1E0E375421DBCE7A390AD742679395962CF1F43078430CB1666C83E66E523E5
F6CBDB6086F2FC1573FCF582B34656BA6E07F58EBD3BA6A933D4CA0921222F45
53A0E8327D1BAA7D2AAE829BFFF226E6653C1960371DDE880251633D52B2E8D6
9D37ABE59743D74C8FD0444B8E3FAF7100C965D8C7F66DF4B25B62F3A47B378A
341378AB1E9AAA8811278C17DA33EE74DDADDEAB61616CC225C4B8F43907261A
F36A7A0E01CA68FA565911D14F4262445AAABED9D6AF195FA2EFCC3709A4655B
86A4C16327046C2D02A5175FF4C21743D7FDA1980C95018A562EE1E280ABFCA8
235552A667E3A38A1ADF53D8E3A0E2D09E85D1388B6A3927959B1A53C2B0174A
E861775B78C25BD11CEFCF3B93A1DE78CA8A76CF38A8E6CC4B5D7AA729F3698C
73A4BB7E20D9443FB0B9C4B1F90F81ED5960721F7A85EBE0781A58EFDBC6A407
B705360FF4270507D2FC9829207B3F4B954C97868875A526ECF8BEC435EA46EB
31AA4E91E3847747DDBD84AA5FE0494A4BF14767F0310BFAA19C7196EE55648E
642184BDF993C99EF7C10ADE0CD2EA84D61124B2F2CE430F725089FF76B18659
7890EDFE3929EDD92E379F6610DDC66733D0C375B3397B0569EFB8DC1060E19D
7D8B16A1CBCB229953E771F8904452F868BCF43B39143CB438ED6AA2D5F8F5C0
7DC237EAB46513258AB4D3ECD9184635DE0F4E2F231B4B6EC5FA6CA4D3959F61
FC4197C250AFC2749AC8D22D2CD7032E650BC7C9B32938E9AE38ABBB368BF33C
2E35A1B6A70542DEBFE49BE6CC3E3FA44DD49DE94DBE2581B55EAE25E618FC5B
09886863A167FDC7C56BE26008453756BA9CC586289378E98E41D10C2F11842D
78DAF6F5BEE329EA08BFD5DB9513B44D21B2176652F09D82CF84A49DF6058BF9
2C0ED692A457CF1C5E2C1C97B919794AFC8CF6281A12E19F5B61526842823F31
6256DE1655963B6B8A445D904C3B33DD18BF9149BCA78C56E5E630224B3B34AD
81D6E9CE8391FD655288DAAAD45A1525784717BCE6E4D0B669089DF7A269A148
0B694F268CA7C9F788B1C2B92F34A4D4E4E9DE7E2CDA94DF2AC0F9AE7A0DBC66
20917821E3D0E7ED9ECEFADAE921575CF4A518C1E51B921FB8BF6073D7E445CF
B996A9157BED25298001915832D76E579C8A2C7E3E7E85D7746C11A604637307
2BB097D335CB2AF95A1D605D183E9B46A48FE1C2EE7CCD4907EF523EFF023D39
BB84470CA78CA5BAA0FEAF9F5E773CD504D090C74409F8AEFDCB7BE5E7D3AF20
A643889A6D556CF18618DC02C927C14134D71D92D0E691F01310085F37C964F8
4B7AD7CEAB3C2793F09DD993B859335E4FA7C02FB0DC87E4A39927BFE343E66B
D7F5EEFC7C29EDCCA10AB04DB523B2E9D7D2BFFD11C2676610C1806F3C8BB0C4
C8B02C85624881E6535D507D54D62A644848924A1015650C6609D8F8F3CCC6D2
8E4C2CF53A3338EFF148561FFCB338DE515ABFCDB3AD8D2689C8F26FAF18C4E8
EEC4034A16C30655278487245A0E8FECCA6121A1CD5A1173EA5BF7BEDB449830
413110E1BA75677083CFC0795565592EF94F14E5495586098C4FF6676F089181
C7772F4A96D95E3A9B3CEF3898FAF8883D65AA5612CD2F83575B6426A82F101D
0F0DE957502867A05ED238E02A2422A1EC4DE127DB679C63CAE0004CBCF51051
79E32AE75434284156E65F8C1375F6C9543AF1FBF7BE6F8D6BA03BE8E009C66F
889F4A19D8283D895E068E599A6E52C51A84B38977EE84A3DCE149F2E337B17F
253D97FEBC12457015E7AF9DF5799A489CA4A59406B787F081DC61CEAB7476A2
E57B498E120B61C9B1CFBE3C57C6A60222A5C6ADF8C6FD80D5A94E1642B0216F
3FBF9475529E5DB9407FDE0D0B556360C535AE7D1909D5833FAB8DE610E746C7
B6B32B6447C7408747E8C8631FFCCF8F172177A18B14B716BE74A16645DB1192
74E5039B324E17A367DFA9F68153874D3E1E8105C03AD10FD8E0F14F30A95FE4
35E5897BE86FD865A9B100C0BBF3E444243930D9D976789BF9B20AFE65164B01
D95C1A936E2BCF9F8F5C28FDBC420CE226E41EB8D6876BEBA8F69ABB8246314D
3022404C0BCE48ED6FD0E0EE9F829AD4D2B1F245E01C1F36626E3819E7DCBA94
50A2B86E4837BAB90136E2E8C1494640BC007F100039C614A07314F2A96293A5
47DDE7281E89DE413F057961D830842C84BFF891AEE3F840AD833C985423D71B
22A09E6EA1FE313BD21C516BABB7CA97C197BA8E9B8B15B6C4BCBFDCBDC38311
D73BF967AC7263E508E7160EF58F63562114FDECB5F8EB096A19C263B5D3FBAD
820D4194C81590E86D4BFC205BFC24F05AB2FA84A4AC44D204E1A21FFBC5DE24
29EC0989A3F2B6AE4290A005FF2039B61CAA3AED5F15962D7DBEBE3C7F9EC3D7
CE89E1E4D6677CB72A33534AC9026F986158EF1D0BBB218F358661696434C1FC
B1AD5DF919D1676425C5C605504C7D5F0426B31F3B55ACFC7AAE3CD44D37AAD2
0DB8C1FE802F70B630C4BC0CC82506CEF93ED945AE5E7A3B013031F805217B21
93237FD1ACB4F7547969907D103A17FA6DA648A6E95484AF26C75DA35DC781C4
FAFA29D8D29059AB5E706E5EB180413B7597732D2E9E84FA4DD17E8E552273B1
8E5CFC6C86856EAB6F4F99D72D0567ABCF66666534F3265C44AD94C5C36A8115
39EE405DC9A14FEFF011BEF44F0CBF7F67FDEB5BC6A879C41C6024CFEE618FDC
41F5A0A88E887920C7E854863D78412C720E51BF1D4EADCBD54F220EE25C0EAD
A8A54DD0385F373F1E4477569210EB8C4212CEAFBC79B61186AA832CA268A6AD
155659591F21DC0446A249375C2BCCE37694D828D2662FC9CF4D1A5F32B6E6F0
DB26D2A2BEF33383AA828758475B5DD7820B221FE0B71AFFFED4DA9E000B70FE
DEEE6593EA944D8F4093899429E0D3D9B3AA7E4C7F8498BC592577521F39F0CB
774D14D38953BF0D2ACE9934663CE8DC60EB988E1D5A8CEA8C44C889D978BACC
A853CC78962827F0E51D57CE0ADF736C4266822D2859B41BA0313E073B53D00B
EA08D8F0948FEB336E618E4E94782C82378EC65938F315B42D885E026B5748C0
D3497A0B1CA012094938952793C03F6195A204957D175AD4D864820BBAF867A2
9A8186E7CF623A14EF467C870B14E400DCA75B3E5868F716DFD2933DDFF98A53
0721E9BC9290770037850B1EFB6DA25430ABDB11CA09E7CDD3E8B7A5116CADAA
8ECB9F01F66A395E4B7571F2F4A9FA65E7C86D2E5F2D8E36F8F798DC8319C795
884C72DCFB65F3599D72E8D8929A4DCC7470BBCAF7645BFA084C7DF1E42576FF
72B28243D22FF1FEA97784C70F31E6067D22AC910AC15ACFDDDE687C81FB0AF0
A53861A00979E67EAF652BB117E4075C772BC0F3A2DF504BF6CA7E4D0BBB2703
D46796E7A2B6E7029BB2A5D338974BA7DB883F4C28B7A19D858015873C7C6FD2
81205E5BBFD3D2FD8DEE726EFEA8B70178A9D78A9DB386490FF9B61DB4783F08
C33AC26FA11FB785A6B361D7ED3F9424B8B7E98EDD5E42ED6A238157D749EFCA
6B069BCA608B69E38F1B4236E83FF8F485772A0B750A699281A948195D1C1BFD
554AD6CE664C3C1E347EA94D97AC2FC951DBE034FACDA598D07F57AAD8834927
181B3488940F346C15FD19266029E508B9C8097649D1A419CC6D590218F119EE
043C569F9F112E7E9841768C70E4ADE90B2D0498EF1499764052ED9874F878D2
F30C2021137F2B345BFF1F2F00B3178E8147C584351F9DED19B7F08114AE0E56
A3D310D6958AA2348E1D304BB995537151D76B10EAB91C83A0C01E5EA4BB6657
FC3EAE9D476213AEA51A6862E000040304BAE354433C2AA8A0CAD48019BBE3A9
98B59039CA8BBD911320B8E1C4381889CADF62FB4AF7FA323C772855365EE05A
6EC5E074B2D8227E5356A57C90232094AB963F501B2E1FC39FFB51986DDA04BA
7F64393E392FB6E0374A1CE651BE4ACD610F5168D3D2F2DBF8860E31EB5601B8
6C9C1E968A1E1A06128EFEE6422E41DF1519C73467E16BABEEEF7FA4EFCCA30C
35F607F5C12CAB51089E2C6D750C6DDD8BF7D7541264844F6CD63D78DA6F7579
20C00ED42E19FA73646DEBB60231838CE213334D66BF61F96A0C4F63E2FE05FD
8DEBB19659B9929A88B501BC9ABCA6599F3C8AEF3D7D08F1B6866DF01D19F4E9
41CA400576157E23CE113AFEC6FA27B86904477A22C7793815FB4FC683D8B716
2B0D094C355E9F8FEFCE5ABAE2E7450B90F687D7C2993897A989EED2ED03B570
FF7C46CCC13C63F2898B1681476B0C9B7C59FB4034FC9FE5F8DBF74B0008D2FE
8DFB17A940E249960D1D27FAFE23D5E105401908C5CC43393EC577A2675030BC
A75EB531B7BE43CCA8254F3350F4C6708DD5351064F0916BDD424F82B5E00FDC
E505FAC094D133136205974D02A8D6C95F5714B2886D0A38261697EBFA51CF44
1AA916C8F02240634E21A4E79A7C8F9062C2A69FAAD59FF3D815B045C9B64FFB
8DAF846931370FF1C44D8984D36B6D329ABCADAF9CEB29E09A792E33194C43B1
820C2B0A3844C5C96C3FBDFD4730D55851D0844A43E0E95D9A010ADDBDAD28D3
6FCAADE15A574DE45CCD50FDCB7EBE0CEEADB782FFA929E83E3A8E4FF1964DD1
4E668D5BF6FC74B2621802B29CA16DBAD0A2BF9A151AF40A5D43D0F9DAF13088
E1BC59640E0336424602EA4A3479A8126B689964B87ECC23E83F19351612FB0B
1E70DE00D8503A5FB388C20A59AE40E7A75630307A51FA8DC73436DAA7EADC5D
DCBF6F708660D06F688D5B8A3AECE00EC75B4EC7A55EFEE1604F8DBD28CBF052
844F58F3093B831366A5548A6754E62F97B7561EB789F3A44DD3AA31D247B522
90F83AC157DC4BDABE4E03B1070788047C75A4C6D9A47A148229EA6CE284EDCD
95DA7CE63E8E614EF00EAB92CBAC252AC17572FF2CD7A9E984F817E220688F59
9563840E11DD6E191F8C9D4122FA0B35A0C63F23330C4EFBB84455294C985BD3
B1CB84E64EEA93788A171E86EB753B81734B5731043B097E28C8523078A76117
D656C367A4E99F1CAD7A079164273D164E13868447A875197D37876ED3B746B6
673B907A06AA7DB84F1757025BE122049581AC65864C48C85CFC55A73924C6EA
67EE967B9BCD2CD26D374293D56B7704DDEFA82FFACE03DB0F5543CF3AD3C092
AC7CC12B4AC4D9AAABFFCA26E97F70B0B175374068EAE8B51486FCBA906679E8
79C84BCB3B5639B677695E5DB24944EB9BEB5FF854E57F6E5D3A194D84C7B648
7A232F85E82EB2C9D5C2056F4B719328FCB0DD4513C1F1A45F3C57FB71A3F842
788381D63030B57A34144E26386F3E994E8975E38E45F9BF6CB506385C5A0311
3B670612B9D1BD6D5CF5EAD64A84223B92A02DA084A6DB08D9D9EECEE0E62F58
0CEC57E0A4BC01A810BB9537EDB0F8769AD5E50058AFA94041A69E4805ECCE50
6F008FE43CD00F52418373933541E1D4FC806643893A641C49948FBA78BD49D6
A549A6C2EB39D37D74812CB2B3C93921AC7AED4F892904EB4B70EB42B29AC9F6
34E756C94422D6F7AD8051B9C7E9F6F7C6E1557BD6A3D5737DF516B5CF5A0F66
6D0B720029D6474505E92728AD04A66833D3808CAB307AEDC18D7B1B4F810F4E
FBAAF7E6E1698FB29E107C77DBDBFEE4FA9528484AFEF77CB1015153AEEAD34A
80E94B9F75FA7DF15A915ABC9A7947B334B3579D8E7EAA1E6C33DB9F9EC3A388
9D0CE9B29C694DEA16D9812AD3D22B431413052AE4F9DC053643769AF91632C7
315E9F5AC40826C7B8B7B4FA631CCD399201DAD782010EE327B334CE03EA6D6A
3CDE1100529FDB1612F916D7D98F158635436B1C389EF06143F68E076D0503AA
0DE9C012E6E0AD153879BD75E521C1B1B0346C22B1EDFF581E5CFA34F4D4A0A3
DD5603031406A6792E4D4F1BE40FF7CA2BB1779891CDEA064CFF2EF86E116038
3A97D809682414800D85E0DA13FEFAF92E4B954F0B7E173B522240F0D3AB7692
DED7C18DD6A189304A5B5BD93348951B354102F98A81FED86D2945F28F1190BE
3F7D9017B446DC924912DD4DC5AB353F4FF442F40AF64CB7E9E289500AC34BBD
D23C82D9F71B89B8A63A8C89F84566CB65F6E9E9BEB11AA2CFED28804C929B80
66B0F94FEBC82F9740937EB6979363026B6E3FCFFEE0165E3D8527729D1B7F9C
5E3655237E5DE2198A53E115E6B577374C6F891E9EF0DF82EE8D2DC700CB7782
11BAE208394975FCF2411C50BAC99E5EC4E939146A3D4B7047C51BF5F0D5A2BE
D328CFDDE30371924F16228C7089A642DB9E31639D857AEB524812F2BA4018FB
2E3AD3A6484D36593591B7BBB1B738FA19EBD8E60C00312665A8DF26E189C91C
FFB79D7910F03973685DD97F036BD60D4E33C8842DCC46E5D1FF75F727D4D0BA
D12793CC7A3BCF949314C8EE61B7BF4ECF255178D2D2C4B7F7857E7F5572D1D6
06A9F41B8DAA9D3347B158139B54C5D7EC59DA3631C6DB3A56E2584273230485
F18113D43E7261CF360228E1BC549F2A430A703529E5DB46542534F225F840CC
19854FE847CC317216B6F631AD7E023B00542A523407D4D227F0904353AFD9FE
4EBD039A224EC03CF30A825CEAA9D82D25B930562BADBF6680F4AAFF060A8F9B
2C78F3FEE6857AA25D6A664FE03979DA657E1C3FD22A147E3E420C044EAA38B9
D295E1063EC1C20FA21E755327A117DB936EDB4C12261EF24D52DA4B6D96A244
DD74ABF60AE398ECC335EBC612CA22F8A1FECD3A01E9403BF22786F6694746F1
B2A375B93B3C0DA51982D94E1FB8508297F560300476C6557AA20ABC9AFACE5B
A95779D124604AA59F93D6B5A7E688F8C4C154F21631B04F5CC1E0C6E328D7F6
31BCA178508E4D43485B8EC35154B1664E12C201940B0ADC8B7DA89A2B113EF6
167DF80FC3D61DD9269AE5E52161F36AFAF7887F070C4DDB87BD80956DEC4BDD
55B5C912A87E6187FCA76F915289BA717A0FDBB8A0088D65095573CB14C658CB
7CFAD7871888C1AB89C97933EA251CD675EB316B25E08D5C0AD102830914F9C4
61CCEA2B02606837C800CD1CD16688542547AB6D64CFD4438F4B24F08AC88C8C
085F09FBD2D2124AC3B24C9979E38B29DFA308951D1FB2DFB1A8E0EB4C7ADB45
3A2C8C080ABC2F0B24732A91C1D3BCECADA9A531EFBBDEAF8208C20A023A721F
CCF865AC8FDF8DF56A813094170967A99702382701CD61054566CC731777E1E2
57ABB338568DFD10030C5BFD9F618AA682B3BBC914447D751EF08B745F34EC1D
160FB702E4738339D59AE23B4AAEDCE652B60A89558DCA94D7F78FA92917CA5A
73E28ACBAE769A5115F7BFDDCF2F74A78B8CF1F442FF1D29BD05B63562D00471
0A8708BB50D29B17FC27A5506496FC1CC6E6C651681C8A256DC97EEFD06CA3E4
D0D6CC2B904C38F4106AE01E2CF7A7E97EE1AAB9583F2C7BBC396BBE656E4B2D
B8C99A230364A0539A035AE3749991DEA439FBF139A16A55342A963EF3C9512D
50FAA648A9822FEE5B4BB37010E988D85B852CEB52B1DF86A32A0946A3BD1E8E
D4B742EA9056790C234513431B7D81D89117506F0E89A63DFEBB88C8B90FE358
C322B2896A8BB113136337F88C41B0FEEE9886CA83B42B81FAC33DB46457E63C
C65FEE4AFA69C8231CE35DF0155CBBD12A629F99AB128B98CA32F835994E3471
49A912D9F5FC68D351FBB4765864F51261FCCDC140643B99197E20D1705B60A6
278F03FB9168F1AC7C3664143D3A252EC862C66453154A4EC3F714715AD9AB66
B6FB04952890522E3C9E3EE88D6F30BA29B3DC3A070FB0498DFCF4351939AEDE
CA3E47EE02356ADEE4BD2E4A16523198B2E05EC8749D3D46AA18829871985359
956C3289C70D9C08811A878A19C1C03F5B3897902529AFCC3F1A325AA9776B33
CEB0A96B24304327DC634CB7956956787431C5F75462EEDBC507DD0FF626483C
8B820DD0211E2DD31F75D7CA01CB56E4A8051F3F1F48346D2C00518ABADDEA6E
CD7A1713DE7AD5B63997F22CD33C89A49B87C1B241630696D6E8D78666DBF348
6981F34992D4D6813FA537008B1080EBD868959CD3ED5E538406B83AA52EA8BD
02DAA84455B44DD7E7CEA9C88534F4C753A42AFCECA8252A2C6EF06EE99191A7
BE9BBCF50554FD87A780B2EFCE6B541B138F371627AE4BA4F1AE311FF2EE1311
C658F23680C0DA9FF7E6BF4298E548FE405D01D18D8A6C9F59D4BBF338EFAC34
668DCDFD42ADE014DD113626E70641A82F21FB94C2D83DB8D42A9E6C43BF0B5B
58DB2CACEDD981F68F15ACE1C2701F6C12F3FD5543301C7363CCC2B96879AC67
92E812426A33CD78A844120B5B63D1F8C3A70DD76C862830F89D24898E7A9F6E
03B6E677A0FF1F8F42B74A9FBFBDCBCFCFC70858DE4FE8E1FBB8CDF09F8E04E0
3C574F72FF959E068937C261DEC276B38B89C8654CD8A5B8257F06D892F1644D
66B5ACE1FA27CF0023721F505C6BAE09E9DE083E2FB4640D0189CB72C8870B38
C88AE6EFF6DF4C25203D67229C718E1B03F7B6A01CC4C61BCA650772E59F9084
39135B8508121E64D4E907C16654E366687B2D93AF40C3813817E55B0055DEA4
734DD9D3B801F1D8C20804D0BD5A355BD413124FA95DCB0A8E8DFD8D71077571
051F78E2F19FC9A2805325F93273FFB3FA846C8B8B8A7C02A5ED1742EF3CB42E
B0ECB3C4DC4BD7AB3996DAEF61BAB889147EC78B17503038292351A49A734C0B
31F7DD1E035D3008E61C0C9B944E1BCE721CA0D035E654695512A39CA140D203
45FA57D34BFF408CB4EBD8E11EA7311610B2BCE067F9D06DB1786BC14AF433A4
A64042CF94A74E4BB2655173A1B4FDFE7E3EA5A73252996621248D67285AC420
33D55934F684959A1405074446B1B55348E1E2CEB827C74133EF89CC4C0E36C1
BE7CBDCCEB98F747AA92262B57498004BC65D1903C912F973C80026B57E36F18
A53EE470CA63DBFC8346E67A2836A99DAFB4AFAAA3BBB832F304C67F1733E5B9
7D2F5A98ECD87AF0B65EA2B18622F3797128CDF10226B3DFAB55B916A3E13042
CA78F2DDD02D8632B42602CA04218546E5322FECD2F1FF85CF470F1B3B617E06
1109A1D03CEFB082F33CA61BC587A5E303D42FFDCEF984828FA3139A035B4CAB
D07F0662258F8A1951A7BBBC0313D45E89AFC46EEBE8C6433B1CB27F56391327
83449C212731C37A3C2AE39EE021FE09DA8F0F6CFE3C91EDB41A2ADEBC1668DD
7FB2E78EDE450CE79E425499DBBB4E4B8CF1328E9A173DB350E8E63B813365F0
0566D44B6B44B5D561F51386BC75CF6762690ADB808F5702800D20A06924DAC6
A5E98549D0A77B9F0700E5162D46A117FBEC8A5974ACFEC27C0A4D3FF3B1245E
B036F3659E29AEB79352517B3CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BC
A897A3F96517CFF904BA2676748644105038841988ED3765CEB74AAB78797EB9
381948B2E1E9DAB2CE7AF6787861F8A99DE3167E4031624F0ACB218614BE7415
679A1B0A240C9B5E98CA5A520D17707A1D8A2B2EF5319D0B637EB09D5CD6919A
DF2E9932C4295E25982DE1DC5A7CEAB64456186C469B5CAC9DA5727DBC8D5BAC
9F356827E4497E817E23CEF2A923C8DF147D5AD2E86744AF3120710C8B5DFF67
D24F99D24AC9D56C96F1FECFB454821B6A864004A22FFC74CDEF10D26B2A4084
5565260A947F43ED276229BFCABCAC65FB12B91E25BDBAA59CB2AD6DF13DBA44
C5A01A477E2B0394A0EDBAD394C7A7C155763D1C8BEBB691166245A8E1E5DD51
E3FE8E699F74373394784DE630AC6E172DA5B1F95AC971EFDDCBA5E98D355650
7124BDB5E9CD1F08A9839A415C20EA9A646115ADC112167664F3D27C084E493E
DEDABF3BD634425BE1529AAAA00F7F6F72FF154767FEC20D2DBA71485720C7B7
4D7494BEE7293BDCBA8251E1482D7016FEB8322985E1E2EA9643A998F55A82CB
8FC01AA6F24313D6F67918FF43D6A9FEDF0ED81EF808A2D798EE0972F87F0A73
1B21E8DD38E27D05E8014C78DE5FED86DC31B71A1FA9D94465C58F49650D3DFF
FC29B6A0E453F05DAAEFF5EE0D709250110269481B1CB4898E40FB85FD2AE8A7
78DA936D529B8D01DA1DFE6F39368B69255C664D68434FB79C7068B1AD495B31
426096B8CBAFD6CB20AE4159CCFE773D9A5EF6627DBC1F119BA6B0467B77ADAC
9B2B376BD412C94E430BB4BD8A60DDCA51C14FAC7295567ACB540BC043345586
E29E9AB4B221E4205D5D380D2CE4AFAF5056D2E0C0D515D8FC4DABAC6A8F1727
7990DAAFF2916AC16E116A1DD4767A974A0B02E4719642BF3A81A3E28DCEE8BE
2362302F9DEF829C0D206FE332F4121CD849E46FA3255DF73EF9A0183C3F1235
8E6647BA278CE6140FBD21BA4CC1F454D7E1BBDD0499354B02B919323776640C
B41673227D0BB28F6B1703A6B2DFA0CCD382E72A1445074CD06BF61C1BBCC970
48278F2565BEA50791862F1C092367EFD9F771D94EFAB09BEA18BBA922286C98
3C3ED5D9E4763889CA72B8C6F8DE3EEA2F482211F4C3E53D2242BDCF9873DAD7
E7FB92ADFCA562AE5C7901BF13757FB603CE0A75FB3A29CA4A47A985E2E16055
31FE55E92B7762F9E45EDD96CC722AE02F9564E06F01683AEBB1E7A05CF22CE0
A8FE40F401BE961183024AA838AC97F5D79BC73BE4B39410E9924529FC9B2540
8C037633C2480B382AF93C8AE282A78BEAA22F09D654ADFEEA4C355E5291F9E5
6EE8CF72872069A157A0358C5D00E07E3F1F1427F5826F5D8A1C2415E8A5C7EB
AE0077D54AEDAA87D1C060899D64ACD16872A08A1D1DB55CAA6353FFC13C0735
426EB6EFC74E963455CFB22972CD6687EEDDE9B1A7A1071CCC95F1306C180EBA
B7AD3B0F949C13E4052A9D64B50B488945EE7D39347EAA6B23D4458D393812DA
577F2F42423A83972F2F36ABC8703D5AECB974881785FBFC0F2486C3B71F1CDF
F8DDF85EA002416B3AB640511B227609E06DBC414E5A819E04DBC97BC03FC2C2
261AAB7591CD23A1340D10C51A221CAC3DCCD5D84A68A84749073B8A3EEB12EF
B77E7AABC37F57BFA2BDD7C607BB31AB20CD19886D6B2B421F7C057DB10F0445
DCD34069C2982989C29FCE47F94FD8CBCCF94422115A756F2A93CE7F539FB780
27C7FCD0FFAB2AEC01F5A90522F7A4E8D16CAD30ED18B6F832E45704E5A2A51F
C399E81BEE73C9C8A511121F5453DABCA85B696B0522499010B51EB126454429
5F5B62E053C3ECE9F8D7507F2A51FF1DD8BF1912668155A667E830B883238086
B5501D5E08E94D8E9A216F9261D70E7EE6B327DDD645A6BD9562BD225A48FBB4
82E4BF917D9115E86C3C75D57C7226210DEB3E50CEE4F29900624C8877564C77
23E1804B3133AD6452C75FAC645FF1AEFCF0F8BD2D9484327EE29107319D27F5
EC44C644DA4F97056AE238AE68366A59B63E74FC255C67168737E0EC21F7CD59
6D42A88458B89786C2F6D96FC05F11D5325654025CA02D8F78455AF7B25F6022
186488FA8803282004F98A77C0A220B76E47571E35B4557867F0707CB57F0AFD
7EC24B073F5A46360B2F5A5877FD00B1F5E07A8EB324726265816EDBA8EF142D
2940FCF6BAF2C716EDF5CC29C627E5E1802A7A76A7BF92DDB84786A2306E985B
93C85568E76D34AD5DC222FEA95DB42FA97CFAD385F77075799F07F716268D6F
1372C0D9B9657227C8155AB75890519757F0B7D2265205843707A90AB29C9B90
D0E2AE932D2CDF44BE30DB02BB5D8C4B87E6795001F0A63547CAB05714A03776
18EC8BB09AEB2C4204A6AE09A36ABE7780F1EBB14D0DA946BE886327F850FB61
24FFF21852D9261FA0C520862F2CA6E02585061659040A1E996245BF51EB4895
D4358CB69DCD788077D23BCD99B2B0365C6F1C69AA305268A06EF2EE013773A3
F9110C3A2F17BC1A5FCE6AE511CC7F8A52862BE831C29D7566E8EBCB594E52CD
CBB0BF91A428FF0F9F46C771019311BDA7A9189C3FFDC39DA3D3CF308F20F170
9F6CBF8C3ECC3FCC369824089657FC70F8319892942E5C788F6BE145D99F4215
3A89FBB6EE8FC1798D7A3CFE2987ADFCF5EBB603227FA2702D5777E90F3D9582
F7A23284DADDA9B1AFBB80F5A0BD1C7A2F7751278B836D28F8E732D208E548B7
105CC6851546288FE8EDF5F8815A09BB8493062BFCE1A9A2A60AA58EAF218037
90F56D50ED8BF0B9C09DF0E030360A42FF23E08F149D9FCB36872E54D81A144B
6457B085F251305309C6525843EEABCF481EE6E5B15C04D27B50242B76DEB75E
6B95EBA3150F0EF2D904534D0A14602E02827FC1683D296A97B0025EE81663AA
56EABEF7C4CDE32059DC33368DFCD261B69B46B32843B9B33FCFED372ACDA8F3
6071A8E15DE13DD08124DC611E41DD35A31CFA677769BD3E237B310E64A6B9AA
B79786473E2C20F6F8CD380AC7F94604002D6AEBC8E4F8995AA5159E80FF68EA
4C4E87283347D39845856FEAC20106A92FFABAFF66EEE6CC6B0B703FDA39F435
0296ABDD3AF9723FB0CBCD2C2DD8A005F6B6E4A76F0A3ED01796438864644E60
F47D9F89D1C1D46AF5304326F7002E83160DB4F1CC1D312FE2FFD0CF3E5B55F0
A7492A8E73B103DF32CB12B5BE83B18FABD32654B2CECB901989FD377E923DD9
0810E74E2F5C77937234D1AB44836DC8E5672A9EA7BFF86211AF8E0E263F7A22
565299DE8664A146343E91732EF394086084F85A12FD01CB5E99962B8E89B209
FBB379D5C2D949F1CF7C81D9FED79367104EC44FEBC0D0722FFD3218887D32CE
599579BE99EBCC1B00E58DDCC7368B0E9ECE176300D5B23326DB319B1509B69D
6944AA2C6DD59F4CB5511FBAE3C48B1B02C98798499971E1A0098DCDD32D5019
6DB55BC8463033C4521996702C48E94E830C6EE76E1878171F4B7B88EE5C9EE0
C921C1AEB41E375FC549F4D79F4BDED029C38239BA9106D3FC7B505EE56145C2
6FD0753D5683CD959D52AF7911DC4204AF1E049FDED89171B3A6B28090116D3C
6BCD751AC2AD65E979A31E979859ACBC25317F271AE2DFF1D7C22793E76FCC5C
42CADBE15BD012DC48E129F803A242DE01C8F3F2353809B5F2104922CC21BD95
A12E919650F00D4F0240AD2B6D0FF2710FF55BC9FDD462DE10AF4F8B1F757AF2
BCBF9B7C3D39912E288DC392D6A9A231F0FEE5F90D5AA9E862E30E05197AA070
0E58372E92F67C564FB9D11FBBD82D9F4598D93891CD9406A5576396203DD7EE
AA405F5A602CC3613DC60CFBF5C385F836D805AA820AB644AFC52B5A8600837F
96BACA6164963C3AA18EF7AE2BD8E0268E60958389D0BA011D51718A417DAA97
73CBD1DC1C54A7BAD4A99CC64A4D5DDD215780BA71E493103B563BFF48BE11C8
9892CEC318224D07AF1DDC35BF7074ACEA54B605DA2DB689969B4128A52251DB
3EBDFA8F59FFCA5E7FC82E275DCEB47FDFC2557425963BA635204E89F80CAB3A
553366EED162C2AF67684B23B68282D499C36E95B907FF994CA7B68473FB9DBC
1ECE947112CDB791A1CA9D765A894E1BDB15D6C9B18141AA9663BA238228C268
E3045ECC4641D38A9C18114D2952D05A84180BD1D23E7D4743E432E55C0024D9
3ADCEF1102BAEEAE5C1875DBE42C23E2DDE4C2139AB64FFA19B70405813652FB
BE33FBE5BC9241ED7A5C02E77F7769C227883303700039556E7F4D657113B8CC
62A76F17D0BBD51A7158764EF3AAFC37280639BB2333DDEAF566804616918670
2A682DA05C4A749ACFB3F74DEAF14979CA99648AC7971810F57A6B3C9F180BFB
8D66CA8CE71CE3E84D7B77D65D423C5B4E261D55C16F183E9E658A43E8277C58
89BCC337DA3AB0FFE84F6D0689C201847DAF74FBEE5DF58DE5B99AB33723E62D
50C8F642A8B65E71DB1DD9330D884FE8E960984DBB147C7E2FA95AA8128570EE
B8AA372AFBD5A5730884934727FD06FEDE1C2D874B54C6ECD88BD7B6D34C334F
CFB0045CD5C9C8A793C7CBD16F8122A624D8D7147234ECE349F731509FB6B908
9A708E913519318794D6B2DEED0BCD8E84A63A1B39E4F329B4462F9EB3ECC640
5F4D2965454B8D86E980962317F10062C1D021714D304DABE2D447734862517F
6503AD5F7F5C06F28D71D53750ED0F7B30F268BA2559C0B257820DC48002CFC7
C9922DADE3577BE70F3D4D71719C1180F01A5323ED3496F69F64086E77474A10
547C1BB5DC51AA8A927AEBBFBC5B6E30D586A2DD28668DA7A60C446E60C7B2F1
FC45DF5577981AC9E0C69145F6587C9E36F8F48FB8EA48B91095F27C96D32723
384A7A260C00E8CD622B65775116B7402A40CE2626B823953AA248937D5EF56B
CF7CEEB117E7D3C26BEE1B0A7BE5F331821288698D6620AF532118C445ECB66C
EA9A69CD0DCD76253D048BA5686C53617537FB915F26235668A14E11E90772AD
BE89EB220295805EEF5AAA68FFA3E77899B83D27531EE3AA89695477509DAC0F
537C701CD41798C762AB04D5BFB0418A0E4E57B13B956E26191B12F8E56F03F1
2C097AD8633BD1F7D69E3FC3900E19A725568E617A565040732FE2BA1F6ADB2A
95D564B19A3035E27F66FCC5E7D6B1E47FA35DCF80C1E50968C89D083A36293F
B749442BBBBFC0B959A447330A4859E3FAC48E967E6607678FE37869EC0DF2A5
46BE6DD1D5CFBF9D84B0EA7776154EE77943BB86585724C654445C1E0C615A8E
98AC0BD7400770AE1151B6B6AEBC41CCFCACF35D9DECEE6F9E9FCB85FB8175DB
7A2F2DCF94A078C5ECE127ADA570D5CA0AA8B454669F9CA83ED2AA40A2D74F45
1FEACD30A472C38F46224799C0B710586D3E3DDF28A5864D566F5C532101D424
439302113C4B84EABEF6DB592943F362EB36B4CF2809AB2960F8D54E965C4D8F
99DE6CD69EFF58A2B0F7B98740A816C9CC7B59EEB58335FCDB592821C7797DC2
9CA1709E0591879D2EBBF3BF9D7499840F2B1B8D85499F8AFE92AA7EB62E988B
0D3CE71048399787217BCA509ECB62135BF116DD8A23AD2C2B39CE01BDF9463E
1F8E8FDF685F5E2937C95B50D07C6316ABC08495EF319E41BE4A9BFFDFEA5D10
BD495D11D19300D340E76290831416CD9C97BE304EE7D3C40497E829487FC2B6
844308370FD48B2E5654A33560BDEE0EFA73596387C452421EC87045375E182C
07AA0A48FA9399449616273B7D5CFC97222E952B531FCAB29F4C8E7D591AE049
4A4BF14767F032300DD4297E81959D74397B05AAE083DA612A8073B0753FA69E
60BD8C07197DC3B6F5BD90EE19361B6021A09134D81374C359FC4816ED872DCD
C7E2DD3206F64E3C71F4704A0B43013773ED9AE86C9A30BBE3E8D221925B273E
28BC6425C308D02A63C379301967EC4F26F3CEAA224780C65D0357949E0372F5
70579FF5ED9D8632C4BD139FB41B209CBB01712146D21E02A4F192CEBBB7E9EF
B99DD72F1F48260EF3243D323DD4622B00D5557019CD90C608D72FFE5BC0A984
CC9A15294FE7E7561B8D33121AE9075951C650E212300525F960FEF753DE5FA4
247818244DDC28F74A5B9606D8EF5ACD55D67DE3DE1DD94D3A6457369A57F0B9
ECE37C79DEF7342F85A98762CECF57267668A760032C96075B9F4DF31C7EF11D
F6F5A7565F97EB600415F3AE7BB877BC1BD97582F00A5114B1B8DC1405B32390
852C344490E066B665ED510734E0880843F700FC1F6065FA37F248AE52A1FBA9
8169CD48AEA78CAAC84AB583421E291F2796BC2C0D1563A74CC7A8ED82259B12
7A0DFD23B9EF95113B743A44EC9D5ED3D8388574C22F0C3950222FA43EFF75AE
A3FA058494B0BCEE5F2B496B456D189245F75ABB8BF578BD19E9047E99ADA126
AA5C1144C7F8E92600D0BAA927ABC183A538251EE2DCD91DD28BF1664BE26112
77AAE68BC42F8F6B29C7E41D11C9CE175698CF322A862BB4120F6DE9D176466B
3FEEAB981E90FC23F52CCEAF524910307045F88ED96236267EFDB22CD92561BC
7ACF9D3DA73C063B95A6A7487485A275D4FC30C812C88D7BD2F3134C9817F45F
D2EFEBB92545F60343AD5CFBC453A35828852681322F471CD1662724778DE496
269C90FFA27C5A51513DF558A8B499C7B61588B8F7CC4D74549A52F36BDDFA8F
F067549F3C6CA9E8E5CC68C93CBD6E93F7B7FFC1350E762B993469585A683D1D
50D118F5B418877256CDC5A7A08C426A39C954F789AE16F69603B66D13B95453
7738B1A0864F83D3E585AB7E1A6CF0AD620CAA7868BD54816F6121D102A8E3C0
0240895A62966B7A6BA5E64FABE65A37E50D6918118725C3015EBF4434464C47
F8DF4DB69281479EF18DA22379432136996DEB087871070082410933B8B6339B
6106663B8B307367F5F9AC09ACDBCF4AACF533C80A39605C95A671374C15A410
AC5AC35FCB375E20BD3D283BE2AF93DF1F5FCE4783729578878D2C9CC4DECF24
6DFCBBD6E2E007F1EC94DE4F449CB4E40C9A368A1107BC1AA77440691905091A
434A3A19CAC124561650FCC4B0F0FE41F4B0AD8F7C6EE6630A0705520572CEBC
415C11AFDCB68C50894BE2B55B5750909EE5A9636F4B3E2B09D703DBC7B07005
C6F7567414393DBADEF5FA9AB8D8A3B20FB8EA687F8B8D343063014E4B922E30
019D6E645EA2B73CCF0BC0BF2E27A0174B39127584534EFDDE0F7BBB3FAEB89D
737F9FDD69B4EDA8426757A103842D2F74816030BBC50B3E19BD4FDC2760ABFE
1DD5D42497EBF96AFA66916F84118DFEA625B27B62FA23E04E3C78DAB918F957
7AE18EDFF1965A35699E84DAD24945B943D564D83E362996D0EB3E3EAA32E661
3C1F367C59631994118A75969B80351B6CD7F12265F026E25F3508C48A260C41
C5E3E1A657A25CF3DB418463EBF222DCD5915FBEF790281699E31C3C7D1A44A3
46D20286FD9F694015D789D17992074FD60F9EB3B8E4399B7FE59C203D2F8500
5373A4D4593C5356214C5A8B2F900EF1C8E96DF0029E23A2E610E4AF4D94E5C8
28A8F3804D7FC37F02456A1450CD0DE1CA0418BA70121D23524B3BE35B72E214
974B2B275CDC9CAE7B507C0A27E7543AFB8D80C54177E7D853363B246759EC16
209E82ABC42B1BB6C11FCCB9708565DDE5047FF8489BDE53DA7F1FA671D74659
86E17D046965628A9D73EB22073FAEB619816E8E3A4DE8641B588BCDF7831A2C
FA0BCC95E3FEAE09A401CD6C4C99C244A6C28AB0EA41B12557054888F20CDA9D
29950C4DDB33265B74D0902A988D741658BA6AB0F43F3A74D387D8B146BF63C8
CFC8E9F766F02A8FE86C49F8E43BDB79DE1854F72A433FE343EDC8D3D810D491
4B8AF9A5D33893E32D4C0DC2B645CD0FB28734D2A67E795E001243879526008D
CE3FCBD9722FA08C7758111F477AEF90C0AAF406FA0AA0DD461A4C66C31A6EE4
CFA2D0594BB2CF6CEE942B2189F4343B283D1E9906259C74BE3535877F54B621
5B4794A01BE3922F1CB7DE5576AF240E5E90DE41FEBA4648ECCDD9777020AF55
1C7388FC693CA59B24774D879CDC3CC8134939CD28AF21976B42B06A63719C44
432BDF86819EE18DD301AAA69044E56DCC291482EA4A2A2642A2B5B119C6057D
BFC2B0085C818FDDA774EBDBE7A95634002E0A1DC1624923AE6DB899A69CAE97
0755D351E9FBC60A022D053FE6B878052DCD299EEB94295990BD5993F661B75F
403B0327A58E94861527D7189F6E180669FDEFD6DE3A2FD81639F4419B5B5AB5
E51286117FB763DB6CFB417128B281866598EDBDF11FDA7573AA44D201C0EBAE
A3267E8B3F55CF3CEC2B59349C3BA942C39423B2E4A316D4D5A572057601B56A
A011CD12DF0E1EEBE81C15A53648D2E01C97DD7E614BFFE78D6206F7675B7CF0
1AADCD3456E5DF56783B75A1DB76E638D7A057FD8F9F1AAEF6531E5D841C1595
97EC7E504189315DE04F25CA1DEA07B7DDBC48832F869DA2B5593F29CBA8D46E
6BF97F5626FD3EA8E1C72897D21DF8A1D159D9BFEEA22290B3DC8113DBA6A28E
494C25B220AFB878584BABF4FF110FB33CF933E54A826B439C436686CC2CCC92
AE17835456995AB1C6DF982C7D3A883BBDE13DF3AE0512FE2CCFFF78889DE576
0BF678741B99E92AC3F3695C59F881CB11CCCA40193E6368C5D8874A945680A0
9B9413A7239EC47C8DE0D8455F6D274D8B86FBCF7C7C6E86824D67BB362E91E9
31457B98A742D8D4EC9184D101EF4A937825A1FFD9D67752BA92A47732DBEA89
E10E9836D9C8529800DE8847F4FFC7BC4013D702189409366708CBAA4ADB8800
90802EE19E66C62B718DD347DB06B9FD93F2F158419668525E86E041A6DED91C
4FAE79E1527C882720D9DC6C640D35375A914ECE9EE0F7E805AEE8A5683F0555
13585181A1D48D239447E69D121ACFCF893B0D3DA4B73DC3551437C7A891B180
7175AB3448A7D44C2AA073845928EEBFDEAFEF916B6A2EAFB6513973F1674382
80C642F3EE0DF69EED086A88D580B2C3953F8D215F44ECDB2BB62D3C519AC324
734E0DA2BD1A95977EB5D5AC4ABF8BAF364564789490390190D446268C364DC2
D082BC3DDC3E0FC2DDCB5148BF59F098574E72181AC82B737D401FB253EC8189
DF72B3730F87CF83CEF5BFF8318ECED2D080F4F0BF48FA5E267B0078470C66BE
4E014A9BEEBA383F5DDBF41042F4995B790B06A451F1C9410B33C5AA1D084927
E0DA3DB454B11BBFD12D3FB878648787645FE9E5BF64DDB9C7EC7F4EA663B188
A472F368358F595EE29F879E57023819533F5AA49CE9DF5A89C442E6BEFDADB6
6DF9151D2D4A03FCEB2B26C6CC9C167E2265FA3FF8A860BA53184111DA5E9336
300B16CC6A261FE4D03FB11030DE83190C22808CD5CD130A89FC2B428663154C
0B14225AF2D9D93E9A1C5704266DA276068D026785F4A49E804A8F0C3D50151D
C35BA8B2995A7AE038154436FFE15A2D1F18B6C8D659CDCDE93654BB8763B73E
242771058D40F948CCBF4A16F7B18A6905D2ABB48B1ED4E5350C02B3139E216C
436428D3BEE1F4ACC56689464BDFE597CD8C64D1D3A285AEDE4752516C8B71BF
7B1B6F28E8277C68609626BDCF26166DEC2F1B30A0D813D2314C546DB14840E4
6C7695106FEDDD796547B7CB2CF1735B854D5E1D186F28F34A3B9039197C3DB7
C88EAABE7EFC3459DE940B21F63F57E6A7C5FE2404D77480CAB3DBA6A579C59C
F7598A53966D73DEFDF02BA778AB4B7857207A868ECA5DCD2E717659A432245E
5C58035DBA78D3FCD022DCFF1774EB50A937B7EF37D28AD94B69AF9DFA266242
14E2BBD5D01EC1EDC7AF7BCE849A35363D86772A809D3483C0D8A7C9DDC28E77
03CECFF0610B1D39BAC99DC992FEE5CC5256D7E002E126BDA4BE85B84CB83278
2F72D88C1C0776CF601284A8267C3D9A19C2843E1AC509368CCDF7B37B226965
66139841ADBE834FD16B2CB9902F973F60187A4483F264D18C761BC6B699DE59
517A5C3A68F81EDBD35C5894842013EF86BE811290974CC8A7EC2293B61AE3A3
E1172D5DE53CDEF74EFD430970B75B1F184BA7DAD8C6D84EFD9EC148AF428F0B
B40C6E4A20AB5DBDB554285F819B9417663AA023623B69EDA60B24ADF823ADEC
25DCF12B85C88FF550B74502BF78FD8C568FB3DDDC9FAE8780307B561FB0E762
7D99F4C818055CDC82CBF1C424AB508FFF546330253E8941AFEE58AF8E6D32FF
F328CB99DC00C821E3689BA9441E0AF76CC8B1D5652FA919EA2878B8F76029E2
04F7E875F159B126F19C9B2A695E9EF49F5580DE3167BF90B623FDA2B0D34072
805B83054A91CCAD209E8BB50295D7E5B02D6F40BB82A8FE2408C068B99B5A26
594E0F6604A4482101473850A8A22E94F5437EBEA5A0648818755726143F8DC9
063C0593C663D79A2FA6BA41034432B5E332DC936AC48ED1A1BADD10AED4DEE2
FF9FB1A5579E91042D3E4D568DF3C15DB13D437C292322AA4261AFEF1C09B8AC
A2B142DDF10F5ED86B7B77BDC46EBB269F3BA80EBD5347AD2E9851B91966A901
B410B47E6596125EDF16FCB794446615226D34EE09FEC41A5BBAFCFAA9B35F9D
C64C9B408CF9E9EAD04393E13959CEEB9E49D514E123FDBBD49F5C8153955D38
EF5C8373A30856F5DDFF1770696AD2E6C08BE299B33BBD923A5BA10256B57E0E
800C727659D260CD2EDA0EEB3A958AEFB22B0C0CCADB597E64AC83AE8E92D6EE
F4347073165A57DA7D4B325F811A7D91DD9D32CF139FDAEB58F8626560682FEC
E6347F96367B31E9AE1A5C90D37CF894C9DE2173C75D6B705E9B0D0D4B1B769B
D4D9767015356BEB75F128A73B30204B6457784E36A21153C990EF132F2A5953
E222C1AB7FD80F14691ED7EC7685306775760C1FE4AD6C12C85B5AFA18D1071C
FB7FC8593B446AF40975362A455EEA6D12FE6942C3B5B53934F0F41D08C98C3D
B5D7FFA4D0D4CEC175AD863E092ABF06E5A2256318E376694BC0B3C4C5E0ADD6
9FAE17B29A59D2C3C5C523B41F75C738F12A3A5C758D252B466745C9F7DAF78E
BF05E3DC22E0848CFF7400AD0C4C016A8CD8F41C5DEE08D75ABC47C80DE3D1A9
4A301D3ABD60BCA41324F1E0F722B1728CC35BC86E52089C12174C3CC899BE18
AEB7449A4A3A794CC64B9E449DC95E723D50BB31349F3744C72B04ED1E4C28BA
325BA1B68782D9B7F0FF160276DA41D5C0E9183234BEDC6FDFE76689C5B2486D
61BED35C2A06F97ACB884F4B9A551571FE88759F759A5AF7F764596BB20F2062
D6081BC862EF7C73CAB01978BDB50EC17E4E150E4AD7948020DBCAC8650D56C5
BBFF5AFDE327B6CA4C614B57BCF46050D507DE20E9B7550D0AEE7905C9E975F9
302BCB35323951350E04D15EF6CBF39C406051C562F8142DD6C4AD14CC7CA923
C2866945E4698130E0E7C34DE7A6A2481740A661A85D5074FC18BABB53296712
E43F326CF563F4004478D35137EAD829F49E9E55898BCA122DC816B6962EF32B
D2D509C63D2208D163FAAF5634A622CD9BF0D0A0C07E8444303E97A61810635E
163EE2B15E14917E95B38935D08E25E62F7A5453ADB24B353B10AD4E5E041393
28BDC73E408DF460ED6BEB7A4A98069A9DCB5CF50554350F8DDC91872B440CEF
8B0D19F7FFAD7268B472EB8E67D941FCBC40AAE44D5A245A57571D59D2D5605B
BAA514C3B494FACE8C05803BB8C4271C8D859CE00E0AC559CB6628CC7D7C4DEE
F430BF544F41C2F8FEA91E407D104C6F2BBD89445AE4109B0D9BB69988A8974D
AA0D696B7A2C8DB70CAA59A8262F0926BD7CE82E1ACB7B98F95678404A5F32C4
891BF11CC2BD9375838685BC4CAC44AE450CC7ABA01E9D22EFF9239DC979E26A
8189EAF39F0654D590E60135C88104AA47E372CD28A301AE6F16C132F892EC18
B97EFBA73595E5EF148C71BD59C148B70E4E6A8F33A97B99E53E49C48B4323B7
77E80EB9F9CF3A38C3F20961A14C8BF6B06B6D974EC4A2090F9FAC9EA2378CC4
E6957DC56107A9420C97F1930BF26D4575C9AF73C6032D294B7EFB81D1EBDE3F
0C4A8008B3558F0870CB65F734943A20E7E1B622D3D4532F97E49F16E4F1D201
0BDE4953394C784A96BAE797A325A3825B002D4D6F088082D6955A7AD4591600
9F6A4514E3E13075716CB2D640DC97AC781A64753BD6D258D6CF7F5F018021C3
DC9DABFF923C089CED32F8F40BD9C5A8652C95883AFD52FBF3764B8DACB62FAD
5F630CE9235149FACFAEBC2FD78367CA8D70E6DD73015247CB099971F2BBC581
51AF05AE33F51AB949294A46CD64D8E710B217968B7D14D46F6387CEBBEE005A
55B0CA1AC421180C4D71E022D17AB75C12630AF1AD7BE9E2E30BC7ED0C14A422
0F3D999D62AE8D642FD7298DBBE965F082B49210ACCCF14F84D7E0D5B465FA19
CEFD068810FEBA86CA533E30C8D26B7738A001E200C057BAA642D188A67EC691
F1A4CF72D34197A0276A966F0667BF950841C1586DAE95D0335A09E978650CDB
B53C1CF0B022118910054D7563E26CDFA84E1C97AEB9225768A08C568A14A570
447316E2F42FDC0A048D23B9C2505B91F57B4762357DC6D5183E14644D217CFD
03BE5556CA1B25F2291B90E5AC3338D78D37DBFD1BB67BEF7667B1583971E9DA
A6D7FCB0FFE00274DEDB38B2CBFAC49A4346C0E1336279E2CA07BA1E1ADEDDC9
836CC78B108D76BC5150677C72014330BD6C9B37896FDB5985F6B6ED54B9A638
28F23C0326C60D559ECDC35A444A765A4F9A72590FFE1C2B3DCC42F866507BBE
8064D6FE3E08A97D149B470DF8FC565F7C51B7C69F2BC1FA11191A9ED78E78E7
4BE70BD18C75097C0AD90D13C091A0F2707E29C1E8AED1689388C855936EF155
DC308DC226F9708C54433606BBC7C38686861F8133976243C9B98801128CB8CB
B200110F67D09B2B876B237AE882B45CDE148BD9E5E29F17182B991A05A96FB7
970748B6EC8780168A4B06044ECBE015094F6B586B4A8DC28EC00BBEF3264917
30BBC9517E5225C896D57A53FBB46CC4FEDA618C94B9B81D9ACC8359F807F16B
F39E004657D2FFE2BC0CCE223C659BE61CDCC14A1E317130AC94A42056732140
5E17C2E2D6B5BAB1073F75F3244DF4FF6E2C9B0397A81DE682B75E27E0E0080B
7358FF51AF8C06BFFCD04A9B4E48AD607EE6A9C41A8856B325C88FC44CFDB1D7
252E112E663C1EE42794CF9557943934F0814366352D95D1C399727F55BF4DFE
4E107D1AF7A19BFB1BB8BA860006A46DF6C84DCFC4654B7CA8339FEA3740ECEC
B1A1BB9EAF5DFB93A0ECBBBEE3B4CCAFA7D92CF2D37DB082BF5273D5E6AA02F3
7B2F668AFA1405BB720600BA4880D1E28DD7B66CA350A6507512690D2DC7953E
B0F531607A4200E3FD95FDC60D2B5602E2B1B8FA412AB9B2A5D930CD3181586E
2126E2712201A72DD7AC8E5A5049C5A1FC953CB04047580B1C445EBEE5A8E53E
50A1F35738D5E9A0A6483F65086A44BDDD62DFC62FB10B5F9D93FD93B4488C97
E2F0091A422ACC7E3FBE9BC7C8F30DEE510950A3C0B57994D8A70F31EE452431
69D240BBCBD6752C62BDB0C154D6568B35149852AC15BE9601ABD398CEB235D8
0B82E42F3748A879AEA99430BC0466A806550B6925E800301E593D350CD960B0
C4EA2C1FBC8B8B42C28A9129DB391F165C957CE5607D410D59DEE47885ABBBA6
CE124B43D80145BA24F7700D8367102339B4803BEFEFF75790500C579A5F6120
0BDFCE49F289883458BA4C370C1B8A29BF049298778AD7017B59B4ED00D1EACA
74CB7D22EC6C5C5DD45BE24FC917E6250D23F172B0D461895B0CE67EE0394B2B
65BC19865730480CC572511002B8E25C97626AA70DB177C37546FF0F531AD859
E9A03999143632E94183CF901CBB1030B08EFF6411EE129549C594D33B3061B0
DB61FBB5A963400DCE6705311AFD498789AAD53FD13968CB56997A12C27D701E
4E98BC1B5920C437CFE661A914FA6C4605267C40399220C5241C326B94CC356A
24577023304AAED0D1EA25C291CCEDCA9071C0DE30A3F872B21D9DE14125F669
CE3E94DDE23CE7169E02D406B02C3C0260CE9CDEC48FF875F36FF8E3BB998272
DA508C5421A5DDC9DCA801D2052C6D9906302D2C5958F992C7E0DD87AC94A56B
885662B1B969BF52A565CA5F53E8E34B4F83D37159D6B665795052E9B89335C7
F19D0391E0F35A4199AC61F386619DB015E30B60B666C55A16CC91F41A08263B
216191397C2DEB2E99CED92A4C49B3B5E1DC217E8ABD0589D9800DB7596921FF
F7187B16DAC7CFF85E3965495E8A23F2265BE20722632B6CB439333389E4FD01
EF001C0EF439972FF780FCED81FA5512665A86233442526C7B90DCB9F9E2A1E4
0E25DBD6142833FC69A6386B15C104868DB82AF7DE8BB21E48FD7604CAAB602A
6E13C84FBFCCBAE9C189DB7B4E4A4F914B84DADB2EB014C1532DE7B779BA9507
C5651306AB0D666E01990174D20FDFB2B6CC169653ED0438E965C626E0F5B7EF
F9A3FBAF8793F499AB7F3D2E4677984EA04C8739E21958E171F1DB6541F31B8A
4536D36D7C82102303317EE66EE28BC90B71DAD000FFD1E16E04473BF7133133
A656A64B13D1A138DC60AFA6B2BF6E93DD81ED432BF9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC8B64E3DB194682A30A31E9D23ADA7D5C0259E2410A72
D9504CAEF21597965D669100E95B8C450A3845A54352DFA15984693F8721BE6B
C8436111546A70C5B35A2390E5D3C43E8295CF922FF601D611725D0D5D9EB2DE
CAE11F3A66BA22F94DE028A8861FBCE564DCF89B36A5F1C621F0088A5E41311E
9B82067883EDC8BCDDDFCB6A87C2BCF37B79B1F65339265C3BDC27CD99AC7D74
8CF26DF4B25B62F3A47B378A341378AB1E9AAA88112469298B36645A69B98423
DDA04A18DF5410EEECE859A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7686B3F
7425763B76BD8F81F3179E8E957C4CADF335268F3B49F7F2B8860945BD85B521
94BB37A4AE1BF21922B1C3FBC525DC249F7B1EC88665BCF499D0EF6935531C3C
E3D8FC6F462E7329DEBA3D7B7272D0B8DF24E12BA58679BAC21A54BB7058150F
BF2757B6479CBA3F9A3DCA1BF4F05A64C2BF6F3E5A85E5EB98B4EE4951D897FF
6DBB732AC06C381F7B842808B1190E191E921521A4BD6E4A678BD8857D176F4F
F707C73C149C6E4410F8B4B295E93801F07FCCA0A9282C565D63BD51FCAA7D8B
CCFC7792A18449B15629E80A4FF4C18CA819FD21733680B117A7F837544A77A0
62FEF89AEA1F66205AF997F7AC32393CE7C15D35632ADB04B4937A359E76AED8
41B4403859869542628A1D94FA95ABA01B3042CB34B1025509BC87450B4FD9E8
A02BF6EAF481BE83EB86DAF47CA940FB4C71A8D345BA0A1BC16C71DE90CA303F
2838001494E2F26540735B0A0DD741D746CBFDCC7368F00B58010BF18C0F3FEC
C294AEFAE3875512A503C57F02610C71A41ED28DC1039CE608E28199B802215A
178D742C512D07AC2858A578E839308B8BC3196805BB913F7CAB68D62EAEBF20
C3F57F1AA5A6AD3F2ABEAC7A7D0A1C3201D5BCEDEE9495FDFBA62DA3FB0CAF8D
EDC83063AEBDCD0029C38E01E9B7126ABB632AAC6243E8B5D0A0DC72B9744809
2887E69F703593DE14C9C64B61302A21996E2483E9C4F22A8A6D80A2EF8CCAE1
564F2D3FE9ACEC391B579C16BCFF8C3CC199450346ADEBEFECD59D1A435C79BA
92CB148B26FA65CAE08E9B046C3F16B9DE2EE8403487FB509503C9C179E085D8
0F05ACA1F6EF8A0DFF79545D67236ADD27CF0A5A1372C22A0BDD593CD95CD249
7612D381C55D30BF42550ED9739076EB30477D455C7DF2258C2BAE24F3FBBBD9
947BC5A800F9DA6B7BAF861C673ED3DFF5DC38E426811BE86A560B49BA721CD6
3D785258087F117A6F028D2F2BB95F7428AAB77EBC61E0556B2899617E1F4F8A
FE15ECA1A161534A0D8530A69644CD026E91DAEE15E24FB50DE8DA82B7DAF103
F3D4002C648E0E1A1C7666BA33711052CBA6B2046A89887F2C60A24A1694517F
78471CE0B170469C3378D351024653D623663F0C3CE8A597FC8F9F4A0FCEE7B1
1A31731DE6B46EE9D1C3D61DB2A86082C18B53F3E0B67109849AE4394460809C
9809DFE3C9DFE0E1184193505C93DDDB03E4F4AF9CDB6CF31270A2C6DB0066E8
7B7B8A91192D3D897FBFAF0A612A8805014AAF9AF64CC9B6E2B967104EC41B8A
3A65332A288CB9F5182F0290B1C5EC10C2B121966B682920083FF88A10566B56
2F2B77A788509B68FDB94695D45D8582AEDDC58729B049977FE577082B98CDD4
FA7D66B4CF0430E72A374380A12B0E128F4DEF97C168975B5B869538FA9D169E
5DCB573CE1A37B9D6FEC4A4E1B27158F0588C630BEB34B7AD6B7B556FFB98550
774E9899C13F749110BA0E1299C49CD6A804858EBD848D5EDE047ED656EAAE36
24DA6DB42FA04A6B1D3D54E1AF0C688FD94C13E003D101555DD3EBA9F0266708
93CC9FD9CE9EC7EC9128DE1A0D5F4C75D7B9426F419A971C74FBBA762837D13B
40B648E4723FAFA8249076A46C014D5874D6A5948E56E7B2DF52FC5BA090F591
13F2F65556D15EF46C4FA97D75BDF3A934C539603BCBCEFCC9AE6C7BA865138C
D12A81EF7450E40689B2049FBA22A1666A1F63E096CF85FC1DDF7B322D4452B0
A6D61F224BEAD651FE687BB3607843ADE97A635E3A1C7B22EA17020FF2CB6771
36B7CF173FFB66451EBD389320AD663A11AD78732CC00141576AFAEC0032E78F
7BC6578BBC421EB15011E5DCA10F0D8BA9407BA153B47F78162F06BECAD08401
515114EFEA6FE2AA688DF8958E620AE471978432BBD9448FC1B3C8C747C77669
7A6770DE73DC157EE176C9CCE5C4D2F3F4B94E1D28867DF840BD70A61B0511A0
7FD36C2D781758BB9B4CA693F21319FD5E97134103701B1314DAC90E7BC859EB
68D9FB3F45EE7843940C41EC9B857AD5320E8648C2FD078C633753F82C9A5112
5CACAC43FA50F41FD810F708E6BB2ED36AEAEC3198294B3D4B8A3130C5C36BB2
496D63BBCF3A4A1780B7514F2E88EF72D4BC7574288E0339E4C7EF7834F70EEF
05B620DC95BA284A92AC407C1258CFB22F644BF97F1B5D5D11E60F5382CBA84B
9790EAF651831DDA197EE1CA86897E1AA873A4DFB8A1937E23778D1381478418
0E94EC478EA4F4C28F75093E19E31F685B6BBB7919990AD0EA1234AA82983D65
973E86725CF4C0E5F4B56D27C63FE9DA78EBF6F844E2398E7988D622F400C4A8
5A6BDCFBF339C6B408DF23893984454BE2869F964715222B189C01B2E3AD9DE7
FFD86B9D1DB167D0142E32E3975CBB7D575755F39C110C85CF91F3B641E21516
032F1BF4FA752111D245B9F736DD3A65E9E52E95D9B22A69F0B36023D241893D
0EA72BF7AB5C387FEA22011F67A82B6B3C407C5233E7628674E6EAEEA6B1F3E5
20DA951B34984220908937AB4FD810B19064FBF3D748779B55080723C4AF48F1
BEFD7AC2688A2397FE947F53AA7AB8466969340289F86A2C208208FD688C2A6D
FE4F6B1DE46EBE78EC034A493AB7183E154D78ECE5630D08A9FC7A54F13D1FB9
98A28789CE7511AA0BCC03AF155B66B3BC887026CDF1A0AAC8928B9849919A65
1E7B7BDF4945E917EC2BE8C77AEB2DA1AF11E5D2F8BFCAC8568D1D1703590CA4
1177AA3A62D68785283BDA9FEDD7A6C1D19B459685B9DEDB522F29B73321CAD8
31D5D759D9DEE33CB9BFD7484F6B94E796C6D54AAD12BE7689A331E1F4B1A75D
D3D823F5D51FCD0801753FC7B9601C2A95F907CE6AD990453E1BFCC6A451E2C1
493DDCECEA45012F8735332FC66C6F7741A54251AB555920609476FC0E8B7A9B
4A53342561B0C7CDA45AC32283066F6C904790E2AC9D5DD40E7C84A8F82E4C88
F2B0FC0871FC6CFC7B569C52C58669C010CD6511AEE9D969D441D2C5578A333C
7F243F212E8D6C2AD67A39188FCC9092A79FF76ECFE36A3DD637ECA6F154E5E2
152010DC64F902AD77A60DF4181939CBFADEE976CC2CD0B8BFEB27A75F99B536
DCB10CE7B0E921AD3F15F5E57EA54A3B00EEE38FCB9303A1C276F48AE560A18A
114F2BD11A4DBE65C6ADA0FE11F06270B8095361F6AB77D81778767EF588B734
00677DA94DED76276A740FF1657F7301E69C015EA3C5B3938878B5C98E0F96EA
6F831E78AA828FB9ABAC42F7C1B539815157109BD47D5E78A2DFE4FB60F7491E
0DE8E4DFE7A6681077AB8CA654B4E3AAAEB87C13AD08520CB57463F2522F4055
79A886A63B361A1861B4058EC76CAC07FB267F95804F3987EC28ADD2C0AD6DBC
12B3C41AE6CF3188906B825E1DC3A6A164FE759683728F8B2AF01E1620341891
C89CD98FCE2819A6B04A3CDCCC2F9BA8ECAC9A88C21C5EE03CD0B7F53872A094
71EF8E09960A5EEA8B2DBE962AEC6C72888056B2FE00AA02815C39B7D54CC4C4
C6CF3A72D98134B5A1FCA563D7F7C79666A6D9133B42F7443763B6A36FFAB665
9D8B60FA5C000D40E194F97179CDE95B9A2F86A0FF251D7B8FA26ECBCE167909
258A996702081E862E32A17F94AF8CD684E729A08AF539777BA2F7BF042AA71E
5B9A0779073E428222577FA479A0E3E602D1E9FCBD75ACD203AF0536D587D222
406EE3DF39E6824892988EF05E91EB8474807019E29AF44BEAF40E52C7D27B63
84116F985E79D93B79B50408A09F2BC2F17B12E42A86652F50CD00A0304842F0
46F9C51B779184053A1854A772F7241C00F3450DEB451D2EDF5EF1284310DA49
439B1F67EC172FC6704D0F7027F3D0F3EA2823A513E0BE65EBBD391E434B5F58
CA6E1BEFA991B9132D2B83928E7A538B8A1D2B0C6098994B2272E6511BD0987B
C4B0412052878C9768FDD1ABC7E5F4D1E9C429E5F76C1AB7D88E94899B63C76F
31C967CCBC04D7D791BB4F563541A8CEA67A9590E21A9C74F9FC69C1129406AA
972CCCF6C3A3B1BC8ABFD7004C85E956847E1595905C78E949843C51DAD1282D
56D4C295F8CE53465F09B5EDC2BCEB53AD1C9A3826AE457839EC7719DD658299
BCC4DB97E7DF4C4F1A0A35E66BAB57B79EE666BE9C144FBF11FD46D879BDD114
9999D9417CC312E8746A209979D734B960A31F402051DB4074B0D48239318DFA
03D31B9674B19BCD3B8CF75465EE709E3EC47C10191335B984EB85D133AD552B
5984672ADCBE89B946AED4BC787360907D7C65DE3019681D8500AB76DB7DF492
4BF167D95CA438376A584FA11E9FBF70AF557A9A7E7271C4FD482FF92D824069
8CDA40075A08CEC5AE6D6CF3587F5A0B52C194A98993A5E65038566504768E4F
CF825FDE7A823EC8AC4793393B8794125452C7C19DAE24CCA0A2B596F8B2F9DD
4EC704D1A506DC0DC8D232522DA0E588C92ACFE6F5D10C271DEBE74B743C1FD6
362EB905DEFA3A62A847031A57FDBAB0A12AEF077AF3EAC79AEE02CCC78960D4
31FFA7271DFC1887EC0C558A07A6DF6E9D41B7CF6D5B13FC68C77FF91C248080
7590F774F43B783822AC0E1BBE9BEA8E4446449184AB0472A5302409EF0EC33A
5C09
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E77188C18435A2E7FFBA595F0C054E96CC44F56301F6CFD2A7A42C7C
33C1362D901AC2B0FB255262754024729BBB2824C33C2FB07B4AB0E5BC4EF204
E240345C69F37D577CA917AA50C3BC9004C8FC0A5A8E517D39211861EFE9920B
3939DD770974B1929E48E48EB82274BCFE2E9D5D484DC7068B77CD864557E702
E4EB0C301062DB793BF0C98D7468E7D2C9EC10C2B121966B68222EB067A7E3C6
F0549768364D1935345EF4D1D5F8C6AE3C09162E8A4FC6CD4741B38836CB599D
F98A2468DFC2198D16044BBA796678C9ED23D6194A5CE79410133D40E5604C95
80910F6742AC40A7CB3E08E73FA1E15DD6E1179C390BC240DA061C9D539B20F4
FCFB72DD0EF634FB4137D55F76088819802AC0ECDE469085BCC3A24122DFFA52
6840EF5367946F3DF67C10B47377A99EB96C13C332632CDCC750FE6081ABD0F6
4DC19BE13680CC29CF0EF52F885E21F4CDF14F8A5BE651118D4F2436599ACD41
A728EBA6AA858A62BA34015E2E2F851AF557C8CF9586F5A809952F25B26C6557
DD62C2B52388A1B7B84A5BDD57BA0C39ED94DCCA571CD82C6E0BBE3DE5134649
8CD7D6DAC8936854A0E9B5873E0C43A98002905B196F919D54550933FC4B7290
C8C71C097F48AB5C03B5D053459D7E0ED44D117E1C942F56B51E615267D9FFC1
91A694BEB12CBF4EB3DFDA6A81788A92B5AE75375C8E3BABA0D234C04500AA3E
2F28C4863E4C426DE4581143A54D0EAF501057E3A9FF7B3D1A0671ADF319AA50
F054379798BC3C38137A81D75D5BE7E359EA0012AA5588403126BDDF5FC2AF9A
36305E36C2A2DDC690256D2085B1D4CB4BB93B1E736992E995B8A4F38FF8E7B6
0DC1EC1B6C746B6AEEC9D5B0D1C9641E59CE041594E0396A0BE7DFE162363F66
C0DDD904FAF6AB01A82A5E230905B36A862A8E30DE59B50522C8AEFA5451F931
870F2A99727DEA6C228DEDA6C25A88C4897BB9BFCE16CDE9E5F075FE4516E1E9
02D53E24B71DD4F1CC13482C48FD1456BB3B6710C69F0ABD2C8E0CD7C3900863
69D35D3E5A083C3E86374A2EA8847CEAAD3690C5D7BF9EC7DEE3705643B5F064
C6A8ED4630A58A2C74FF212B0A35CAD73632F8EE978BC33C8CB05AC2BCFE82D3
29D3A95F82D98F5E335A3E0F3980CEA094E6903FF9BB24FF67FD9F8598AD4F75
1527050258CB8B3F35F8ECC07BBB7E68F4BCB0B429D4AA25A2EE0287CC9B31D5
DDCA74AEC3B0951BD68B348D9C3656853E002ABC509706C00E045DC552B2E5EA
058D326D17411EDED514F2420EB640B4AF9CB0844D53C5BF81667E78A1837931
98838A2416018B583A55803F83CDACC6647227DB9302337CD98D1FA385DA5005
A64EA3E34E0AE3F5B34DAE23DC67DFE7BFDA027A952ED903E7B54769B3C48544
FAE2FEE14143654B5371B4E2EBF9784F8835D49F4E72B78BB5DFEDDF9BA465BD
FA74F2FF3B6E50CEAD45ED2C0C24E1B13B03CBA0C37EC251BD452805722C04F1
9A3B3C950F5252385EA3E898611BA9C4C8A5E0A6AD4E40D06FDCD6EC46527591
BFB94442A0146D8F93A35D8AA216357D0F96B8C07983FFA8FEC41B589A018331
D25E5B0F594F5C418739003766FB193DD7B97DF0F9A11121F9383E9A4D7A4220
2DCE9AB3649C01936660D3CB62D4FB6261D9D30EB70B6B0E91590635EADD02BC
13F010CFFDA00810855BC4D8EFF39ABAA0D3138F5E51E6484AF6EECE850DFFC5
2F6B458208BEFDD79BD8C4C6E6394AE72B8A73A9D1D8F443AAE0A3F0C050249A
333A1F83E14DFB045589F3D6D1DEF71CD3173441F1C3E12B9F46F91C415D6C8D
7FD5678AE5C1B8ACC9DC66783428D06E458F96BD48CCF7CFA30A7E12255939EA
6CF81055E5330CC27A4CF7A4C462D94D7EE9B48626D5D425D400528D5160C7E9
F656D93EB214E1FA04F01B61B295058E0FB0EB3C625259C36BF9AD2EFB5C64A4
540E4207BFCEA039DFB0F7E2C38F138EE0922FBDD3D7BC6FE12F0550746CA3B2
1B026E261F8D920C2BA8F9DFCCB31B1A824175717E5AD6E1C381A4C882B3C87B
0D1E0807EC239961D451D10743B0521AE48DC71EF5FF7BC09FC5E091BED2FF36
1ECADB0F68B3324E63C2C65B6338056AC11ACDDB5CD7B1CBFAF76EE833E519C3
715CFF2AC385F9BEDDD9296863F46279D85E4AE2BFD687F8117DA1A2235FC498
CC9E2C9F57EF881D478600C807DDC7F0A468EB61D185E06F8741AE6FBB6DDA9C
8EBDE42F5C0EB3D3524DA157F0B3F4ADE8D0DC6B9E205C7C32C27241713021B7
91DB1A56767B0A22F335A7A5AD395D681A059A12585DB05D6BC44417E8CB8E24
72EF2624C23DF65B82AEA0A95347F2DB16D3390FBDEFE059EC4B154FAC3E5668
263E11D3AAE27591284292FB1BF22EA7654C2797659120CEF28087F4E387C70D
495388068F4741728D4C96EFB433E255DAD15F08252EDF5979C14C46A1ACCBBC
666E9BAAB3B2C8FDB9A87D88D52B68DA57097C8EDD95A5F29B98068F254ED1A9
1F7031FA0B828C89F0402B564A9D9409103DE0E095F7129DC64B4012AC9CE863
CE8B7119AED87F3FCEBF2730D812FDDDD016B803C38B89238227FDD612653E3C
E63C5F1C17D7739FEE56260D0D7AC77995554693CD027EB52EA2DC82F92564B8
09A3F2D592898ECB9B4E44FEFEEDCE7B6160978ED7FF4A5199B53C97023C9329
B221ACB437B465EB4CFC51C2F6AF138BFECFB31E0322545CFE3285AFEDD87CF4
6710EA0724F6555891218D3B32A636FB671E4EDD08ACB06E6C5B432D12D54368
14AB3ED796B8189A3F739C72975C388195E802ACDE6BDDDEE4231FA5F99FD382
E78F26D35C407837CC1CEE9FA13A8BE69643BB244C9BB935BC5E655B8B3F2C6F
88B1A5F5559692B7327B67D3691BEFD6FB43CD0C44EBE127FED3E0DAD612EBA1
FE7F38132B7E187B4F875CDC2D0810206BBE5A325FD8FB253E24FF4AA72AD911
7A726322FD0A2F50DA64EF2BAC19C9A5E1CDCD8281564806615E4AAB5EDB62C2
F49106B027A1E5D547A55BE0E8FD19AA6BD9207104404D9D85C6751EB1F9F31B
DD08499CEE7A9B2A3369417B580A83C684F7A17F8ED87A4177E1103949CD1271
5E4C12A4DEBE298B7883E0DA25554FC82FE4E94B900DFAB447F083422F93DB1A
210C6917BB6A04E89C45507BE1B5B82BBC1E2071131FFF47E4533DA66CD99164
0317676F0EDFE1E7BA8E5424C8D0A899F621CB490A6823BF8235C4F5CA76EA74
AD464CD041B7CBB8892F2DBA833118BB45B377CA6B15C104868DB82A285837E6
2986F81259FB7E37A3AE935126E72E876B043B371F75F8E4BC40BA7CF7014A07
3BD9C333C710AAABDD27CD9B2644983B1A5F84F17CA924ED3AD4456E3A67BFDB
4D9096EAB6583EAE32168C76CBC040E6B64CF1B5D624465CA3E544394563D24D
8CF309A212C5233C2A0B17A9F410CD7D061233667B370C93FDAFC11510B4437C
6332293F726D6090B596C9CCDDD789D38C97A0BD58FA59AEE4B633747BD17756
5DB8149016E6CDC41893478EEDACD50FA61FD2BB18812A646476EB57C65182B9
61927DE098C08A66D1E33FF54A29BD63FD92A8962DCCDBA5432CFA52050EF03C
0F93AFF4095F9A6BFAE54A5D3FD3AB69E247AC2F1758689851A9537DFBD4BB79
9E573A54E8C194DB4365A224C9813C036CED2450951FA9C6175486F899AB7865
91690FFEB4B0BE0C5817E8DC0876544B886DE6851A9084E4B8F79E73AB556344
DEE23CD2ECF4E48D9C7B6CC669411D14C90EB2DF3B03529C635EF4F0F627F510
F88B13609014E6BC5060AEB964443EB7D0F6C3883D195661CA3A1BBAEA7BCB4A
04EFF9EEC52118FECA4C326D9D8B30A01DDE65747AF9A60BCF712C0C0CBCCB4E
89492ADA71B9168C6AA9E4248327D48861BDF65F2F5EE2960A41D94C3C235735
1318A6EEA62C6EFB3A650362A7A748A63C6E807E2AE4B46F8EB3B207344F9CA5
2989AD8A876F13387B7CA053A38BDD33CB568EC4546F864B98B8FB2B09B7F5A6
B4E3D61836E7D79DE62BCBF08F883DC5E7C0AE5E2557DFFE8BC6D819708103BB
963F6F0BDA611B948CBEC8CE75848FC0CBAA6606E892B2E41A173AA590B6C92E
23EA935D0A9226ABDCDA689F202F60831F7B4783DBA1C7639DFAA4A7C55BA8AE
A0523C6D6733A719062A770E224D50A4FC0B6CB64557C4E1D8CAE8DF942AB2D6
8B5B75961FDDA498D72C45D8B8EABAA30CEDB329CA121109013769EC79E2F70C
1D13F66105F277E5B6745FF4A5CB0EE90FA42E1529460722D841F078106D54A3
3F97FFD30E36E69B3F43335236BE3F3C8B5968E5E82DE931CA6238DF599991D0
7DCF2F24B073004DC08552B28BB3769FC5A368C75E39517B266D624F6F7CAD42
42AE6C63D047AAC8EF82134EC41E817E49FA6204D5078361834AC6C0217AC498
87C1D629A285290893C0B359EA0DFDAF09E423761E70ACF40ABB2DFDC6D11276
2B8527CBE3381953B0908617A28D2D6DFEA958596D1ED1E381872EFDDF551E2B
35040B728225239C16169714AEA697245BC6BE6C302F0411B5ABF76573579455
69610079DF9E96CDE8D005FC25E59B029C016D4C1C365040B9654679EE7EBCAA
F81EF4540E579EAD11FC6108525A437F4391E79987A4CCDAD31438FDA626C251
ECF6832A4659B60CE2F2BDA759AEBB19B020FF7847EAAAD917FA419662D95A57
9ABE56667A9B1875C81B24313E2FA52F65CB925BDA5C98E98C7BA5E25EE152FE
77C81B3B924460D9FB6C2AC28C5BE853ABEF6FD03DEE66690DF3FC71E71DDFD7
EB126901EF35FB6F71300BBACD762C6BB5DBF0D3698FB728652F3A6571CEFAAA
7EE59DF8FB821CEDEFB4941ACB6488C1A608FA21A2EDC0D3DDAC6D550B6CE019
0281BA4CEBF16ACFA4FD94730CDA24A3CEAB6B77A4F4A47CB6269D49966E24FE
51C7D9588A368F2C21B7CBDECEDA8B484FD4DA121C010A40A2D5B66B04B0285C
7AC913CEC83CF9F300831FD25A9A7CC8B9BCA4D76D2BE36A796C72F84C716C2B
263C3C9F1B5086D11C140E76FBCC6C6AD664E159FE319894B6CBB34434A084E4
FBE6EDDFA3B58A343725C742A8ADB8E2490AC75CEB919C11032728BF872D2B0E
155A92A4F88A8132163D67DDA456E1B85458CBF0DDB3DA821FD33EE749DAFAFA
346EE621E1375BD57EEDA0239884B2F48FD7E2FD16C8272CA2C2EB39D37D7481
2CCC7C746B13C31ABE7A39F3D5D298539F5FF372801684D2C33542156E1B03FC
3F773B665ADFF013A97583D680123FC3A67A517E7F4D92C7AB7C81AA04600F1D
E13371A453BD5E03E0053CD116A828ABDDDFB3667D7887C9BDB503D538F6666A
3ED9C1AECFBC3AD200383477D05545B04A55AC284A49E4A05E2A67BC0B4901E9
BCFB5BDCE3DFEC196E304C6DA654AA4124D577D774A217D4897A2610171727BE
61F886966601C53826AE17074880519DE36B7F9E56B95F59DBDB9785489E1FA9
D96C57DC4B7603038D6D6333A798B6E803A0A99CABA87DA35B532BCA16C510BF
BBFB37CE6941F05ABB349E75AAE8B306CEE64EC490589B682C529DA22A5A9F0A
F66B44344F1DF681219626C8F3AAC1CB25B5CE6CF8F99399960F1808B44418CB
EF1B314FD668F20AC79B6145C924520DC0BDE78AFE39B3C877425EC39AD71A9D
E6DFCA062CCDA135B14F4F03D05C46C8D3DD9EB64CA74A51274134606E73A0D0
A9ADE7860C401C62DB2DDD223779B1E6F7503E0C8A30AA00FC9FC6B9EB9ECEA7
123064ADA03DB2711DB0E843C914E2572B506E890DBB1BD9B8AE10E2D6143D56
3819EB1ADD2251099DA18BA2EAB53160E97AA6FCB3528C974B2109A1815E69ED
C02C1CB17CAF8D1ECCAFDF62AC15B5B4B0C5D6D1D0BDBC1A0A79148DC112BAB4
C34E8AE8162B8FB4D09237C2396A5A7BD8631FB75ED5D7729DBEC548D2C42A9F
225184AAD4E80B65440B36CFA372F46BDF132EFF5804B010173C6EAF9705DB9D
0980BD338B7A205499F8A49EE079048596734F0904DF5280531C93F0F9BDFE65
CD47B50A9B5A647481D38402075B63859D2724FF4E21CFDB94D3869EDD3934C3
38E53FA772562F0C9B1B0E0E0C9F50780932C8A88AB1CAC0C3F2BF7937F8E559
6DD159D558B69CDF906BF67DFAF2B0FBAE9B954327317EC6124527ADA78E407D
0E670E2F2454556BF3881045717A0F98C241E6295881A5A2660D5D253DF6AA99
8ED755447C426CA5597BEAFE42535A8C88F9F1937BFB87FC8AF4E39FF00D0CA4
B0D9C960AB1EF0B82A4941404FB4F2450F881884C223247C65FA99AC139A69AC
DE989B3FD5A2D5CC13AF4DF00F86FCCA06B7DE925085317CCF8666F0742F48C1
0B221A923B06DEF64188BF962845DFF2C1C6C813AFEC6810EB222118B1E2ABED
9BB47F7475D676AE0B5930B447F5378B37F05D535E6759C193D44CE02071FCA0
117747BF9CCB78F9F8A3F5D44459BF81997F9E7A3C710A2B0B8180E5389A54B8
5BC69FF37B8CE078CBF4BD4EC7BDDCF92439A3AEFCF1D503F67E5C1F345C050F
2161C3528793C574A33D7CCDB6F875BBA9E474804EB20DAFA0B54708441DE5A1
A15C14A676EF40F0B1FD936AB37AF2C8D15D47E5854CAB09AA63DB233A29CEF4
525CC0EE3F158978ABC35805453F84CC5EEC991A5CDC8C322B7F73EFB24394FA
5C76CC0DC9DB83B6F549C06ADBF019994FB7B037709082441C1FA1051FD25853
5F8DF45FA4FB81DBE43CD8F459770323F9A29B49C2FF1894F73759B68CA8085F
829B9F9E0B4E360140E2EF8AE58083EA859AE2FB17A3F10D2A23E38AF27353D2
850F28C2C134D00658A9BA49B6BBEB3D840D306FB8997B2A362028333CF62E88
1F5CBA918F299A849F5ED006AA52A23114FD60F4AEAFC0B15FEA65ADA0703D3F
8956FDC4CE39D271113BE2976CA3496814414270F4A67574C6667EB5AE7FD916
F7288C9ED1C9D6B0EA1CC70460A406C10DEEF837590EAE23F42736A00B539A1B
3D810EBDDDDED6C81C8DC7F61BCA667137A76761CBA2FBFFCEAFE3E98D5590DB
37F745B93F5A05EA389DAA2721AC6E6BFF0015EA347F3D692F3DA3BE87F87ACE
26A40B708D9F5F4CBD9F351E2021ACEBB94FF5664A8B29A07AF0C8BA954FF5FA
D57D345659FC3D6D52D2220BE7CFA351EA5D5B43FD74F3CCF72EAF1E82280926
09828A232A2187CA1F9C67869C3ADF02F2C0591B4C878DDA7F1FF47355D41FC4
B41FA9CD1FBD20A18A2606939F993310890EA3D630838F6E0088CC8361D7B532
48D9F280C9CD217D448994D1EC57E3F76CAFDF9DDA78F22714FB9DE80D3833DE
EC7848D7C0BED82924B0727ED9A42949C0DB281F577FEB3FA5D85CB7E266430E
43D16E0D780DA825AC347EE138DC959E22DF0DB2C01CC56F1D1EC252F26F852E
1B9114ABB6758C45EE19459942B6D22E4C45DCCB51687CED6E30AC81F9D59D74
AD6F525F9A017A34A18AABBDEC20E7700686FE89F2A44F19126C17DD16A3913F
27F12C896BDE5C6BFFBB85F3385F3940C3BA0147BAA494802FCA4F1C330C0EA4
9EA4248575B3DD0395FC346BD52490344F0E5C23806A4290D9F4ECD7FC05D118
30F0D9F78EDA9E75A764E02B0B58A728B7F0E9CD9B977E0FD77C2B28FD79C68B
02BFBEBC1D4D4963B96902F3A84599D73EB3303D7B74883B2077103B260C08C5
E2B71AE4EBB377D4C725AFEDFECBDE43FB7194097660500901B25812F7A25307
535F51BC5EF7BC31F75A62F4C02608C28329316045535EB92032EAA641F4BD73
AFCE72BB502606610206D020115CAD3256239F55887CE8299F546BDA7F7AED71
F6B5CD27B12C50E9C43D019F687663ADA3764F11BBB2FEE232D419210B2F74D6
9A79225397FC863789537C701CD41798C766E0635A039EA9BA857C26578C8D36
50A6ED32411F26B22BD793FD7C17D135A9B8DFA02B8B05136C106FE7784A3270
E7BD66A4B803B7B4ED054CD81E02C40475CC3DA63325238F71836827211B879B
0652D79EDC835375ED3872D32B143DE775B9F4EBF84063066BD0B3827028E311
D28E92A9770813DF2B1B539C5AECCF93BCCF128F345F35870618B6B3407A6E65
5105235B3419660D079F71D32A6999BC3B1CC6D379B05809BB83D175B1DA90C2
478B6691E8F754462F21E9A2F3C11C5DE4ADCD17E1B1862A81EB33A95ABD38C5
13CC756CFBD978A0F7B87BAC9C31C2E3E140AFCDA4DEB5D18C998FD49490D271
F08AD482ED5E79E5B1C55D5BF69E81508860E3A54474E96780AE64B502242512
03763DC185708039F299BE6BABA56EB6762124ED65F147D6F231B461AF422355
101AC49658B7EF8945D531472249C8FDCE5D2CF3A342C8C3E0EC7846A2BEF3E7
D363C7296984A2980195E373EAF1B7B910D528C4DB554403EC5566D6D4B270A0
6BA454296EC17A843687FB85D1AAEC205BDEC3427B53C25B1BDE14ACA25C7BCC
4ED59E641B30C4AEB214FDB8FB2B5595BA0B6B4199904A9932700C0D7D367557
06C2751B3FA5FD95D94EABDE5C0A93C2BE6091FF0FC1F756FEE0E51A3A5197A7
514FA10115DEA01BA7890B3A1123170D993F727ACDCEF6DC2CAEA78801DFF16D
0C5CD183D626883D5D0AD260FBB1B7F7435B508C0FB63B6F6E5679D2432045BC
BDFE9A51BDC80F8BE5CD3D12247C36E4258C6BDC84ABC8F5377973BEA16D73BE
A8CD5127E5BF5701F9D4D8E417008B8B3E9B5F81CED307128F7F523149B24460
809E7A40EECDFA85D117825A1595466DD4A1542B74D7A7D21A03D0C991AA2F77
60754D8ECEA334EE267256720D6CE4B109448D6AD047F410CD1709FF4A5AB714
B111D8A8FE86B4140EFAF286E04ABE3DAFC8C628EBF668BD3AE4E60200EDA521
D0AFC488F4420CFEBEC8DBE3831273356F2CC3FB2FB349DCB4C0B71FD9CF4DB2
E33E3A34BAEEBB06ABD04A28C0E938F608AF10E3B31B98C36E5AAA15FF9114B4
1C9B164DCA74007E81C0DB4E0A76BB8581CB84D5A2149BCA3F65DA6B35176237
64136A5FA5E4D9C692932452EBC222CB1270F3A107F54189426BE04FEC257588
86F1AB99E8207FFDABC084BCDFC2A202F15B5E590EE1A8314109D6F3AB7D037E
509C5DA4A954235A57F0F59F8F6F1B07293724911F271963907268939A7077AB
632FEAFED9F3ED021857F33C1ACEFD2CEA6ABA7AC14F3571EE0D7941D39239CF
A195CE54BBFE9F13E4F119193F67F9CFF1FFB8A486483FB09DA826F677BF6ACC
2410A680C3A36E2FB6DA0EA3472267A89135EB528CFD0877E8D1F8255C64C813
191764C9BA8B47371D202C7DBEE6061342259831FE44C13336BBC3B056978432
0814C4FA99AFBF0CD2DD9F52E223FD098660B344B76A7FE3FC83B58E856D72F9
15E90592641FE99B4D86F2CAB2B61F652CCB321B6ECE7630D8562319CE3E1F43
F07D3DDDDE40C2AC62A9EF4483E0694B8D49201A31572A3411D94F83A0C05699
0913F606819A6424208720BA9651272DB7C1C5F7F77FAD3C0A327A90E16092E7
27CB2BAA0128995EB7C8D7CA91DABECFB41C6DB983ED839187D445CA03234AD3
EBBB6FBC6CBB27085F3E9FAAED13D06E7AC97A386E361E93B29523A3E2876BEF
80C096036DD4C95B6B6EF416CB0E0DF4FC740725418AD8CCEA562E4CE72ACC8E
9F3E1515D4201B9A4B4971ADB498B74F8F86EE5D21DBD34B2DC77040E4160DDE
659F85ACB1F058AB549FBEAEF52AA6DA4264C1B79D2B64DD10291FE16F35C17D
22DB84BF276A057830951C7BBC506AAAB6B13F7D2A91DF1E449AFDD9968BA238
3121482B7727ED2FEEF31983E07927FEBB788A9B23C8C0EE5E1CDE0C9307615D
2E9E878FB83146B373A3D4C222B2F41A5B13195B662126CF97B8EB2C5ED4E034
A151E37F6A8C672B93A30BC53DBEC047481C17747BC34B6882245B79FB2A1CF6
C4722596FDBE26D4E14F95B195119EEA940D61091B4EB207FEB5C83453E1C0F6
D52568ADC4161A59C422FF30204F4C46E64896CC6DEA0F7E3AF4C39EE4E68AA3
1889A377FA10DA666664A2DCDF4356ECBF3325A2494B23F4737CBC5B612C1438
1B3FB7E42E841B123CBBBA6C33C080FFE66897373B2BD37B09BD7BE26B975CFB
5F1762444C53CE941D1A05BFFFB607844380156A9D5FE2A945D007DBD5743BA4
14B0811D271B835F0FA0BCC20BC41DBD58486079501B48AFBDD26AF2D989559F
DF570FB390CAFF2DD36C94842B91A9AEBF21A6B5EB84E7D0850954AAFE87F37A
5049538CED34E669A162E422B331A3242DF9092971B6B663D03AB336534CE24C
80F654A39D2C5D50CA5317D70A9804A8F1FA82E223310845A025D7B189A57368
C41566EC0F779EC1A895514DE0885D3BA5976E4D90C5ABD6822007395A5D78C6
98C7366C1C453FD7CC6E94C29F5A0AB5D098057BB2FFC2399D9F67A7A4381C92
831BF6945DABA1CA25FC1490BDE9F5C90E5734ADD96E296D81409694C976E71D
9214BE0875849A350845815873E14DA70E64F2A87F902F283615BA37673DFAF9
E0D2ECB5FF2FD37C97AAAE4FFE52F99077D9F44558D3CC6C0FA4C6CF6C50D336
7E37DA618E9C3EEAB30486971398C48107B320D21DBE1EB344E7ECCD28B98FBB
721C2095CA9E6D75C1BFA5A90471B7D471C3BDB86F519E59A0C711939A03ED29
A192447C159A816D12852E2B90ECBE12C650E7F447F36D9349174E5D0BF463CB
B4A1566118C4E0C1DA59421C2B6EE7B37D178BD49174E5E639B50D8F4EE99DD8
B928D141B5A50A3F5E9A303C99A80E76CF38AA5C77F83FFD0AA111D6B991AB46
827F81542BCA6356A390E1951EA9FD8FD240463F1A7D0DB3CC6395217A084542
33C666F7BBBB6F47F397F59231D0ABD7A2EDE43E477E2BD387DE8A6A3C971A03
327FEC53F1F43913282D7DD47287FD0635C57A4F765901F6DC2E9040E85D2393
45708DB1283FE59201F87E0F4C5C5FD3E132C2CE3508B6A191C738970072F951
0557EAA9071AFAD6A35602ADFF175C1ED1EAADEC439EE105C467F05ADDD5DE13
083516551E7BDF1BFBB7DCA007DBB44F3C4C44006EC29BE22F99A39A8209B0E1
9365C6C3BBD518E58149E5ECBED8BF1D091CCE9776F69AC312637F18CE4FB92C
72D4F0371C96EDEC11B2330ABBB5A7964685AF8581F0C85692DB1534BB338763
3A09B4EFC4B59C3BBD51149463393F477CB6D50EB70E01916599F8FD4A575532
AEDF01983F64CAE1E93C61D34AA87253D3A1247C8C227CF1755C85ED1405A5F2
7B28A16751402AB278A8099E2C399A2762CD95B4BE8C22431014B54551378F52
F29CBA7AD69F65F460EA1E5927D4524FCBFA7625C922AD1FF0D55F9D94C41FD7
DFBA480BACE78DD43DB1BC2E1EBC74196317F29A21BEA925881F93F8A29AAD20
16384F65402F96E761E937B694F26909D2A34BFF70378B1A9116D57ACCBE7E57
DAD79BDC506F66305DED851BC8F616A8DC1635A2E70C857649054FC69F8D4BF6
C5E91C51725CCCD296215DABD50D4814D9DDCCE81EF902E697A2A69C6790C527
45C46E7B37695A8C66140F7F8421138892F486CF23A73DDC800C45740A543AB3
F5D165D628AF8BF48E475D8458FF1D6A46682D801AAE769BE7F49BD6526B9B1A
8CDB95F38C5DB57DE6557A99B5C67ADC3E7CC6F7C5CBF03242AD35C5B3A99045
B99EC805E25F46A0C1D1C3B47106279C91938C746FFB2F9BB1859B9E19B54C00
F4D324A3CD34EC6F25EBEDE4E7172DF87627CBA95D01077831634BB7968281E2
2133A947416DA2238038CC14709F84B578AE7262FC845FCCF787429F4A3995CE
61372E84274ED29CFC03F5FF651B72D3E5B70D2836DFE33E79DCD0EA36D27409
617359037AA954D63423CA65D644597ABC2B6E39E53B59DF689B910BDA0A0D31
894C3C4DB8C7953DEAFEE894D92CFB878BB7253017FBFA27BCB082EE825013D9
40BB68332482AAA178940E62F60222AF9927046B99792E2F3217EBB58DAE9E7F
D4D6928A865E0F84470C7A919E61B6E4872D74B77C5291E43E01510CE2E15DE1
87D719C4C44DC720C188C9637866DCA0EEE470334BD453A802330F7FB76E54E1
A3DD451CE0FD79C4598D628E26BBEBB1E4A46FE13FB348757117ED135F080526
B2966E9F977295D25E7FB0560AC19429B2440A259635215471D4B60B6883067F
4B899D0465B7439C8341E0CD88082F3DDEF6558DE882A40A5AF294A31A569D80
6BFC303E38FBE176E161A2BBCE33B47DC97BF9B4FB114684CC5AEA244AD79346
D7F7D426A795E85AFBFDCC44FAEBFD3832AE54435E293E227F13979902C2DDE1
E45C285FF86C99E33A755E2FA80E7060AA2A50F77FE4730E58283FEB42EECF6A
30529461A5F081F7E9090D56FF4CED4D1D101FE0044FDF772C271836AACEC337
8D546575D62E27792111DBCA7BB03EBF75622993425CCAA33AA2491C9DAB191F
ED4037CA850F466B96EA9E36FFFA2C3875C789CFA650EA7674FFD46C6CE442CD
9F59A3E70196EDB77BB278C7F818597515CFB37AFF6E7F5B1B52B52913AB01BB
DED7F32DA6E7BFD97A8DF95CA839F785F6A45B87DDE86BD50A409FC0B55B9FFB
EAC8C982A0775A8521DB9F325BF14C01E34077B4EBE7C1F20878BFDCB811A205
5E315867ADB727407A3F0FEFEAFCF7807234C6504EDD224857960E4DA3345EDE
3120DA4A76ADE392FD8979D416FAB7B44D8CE9D646DCB9085AD695DC2480BC82
23B359DA5AD05039EDC7280BD9F1606200A42852B154FBCB62F90A0A80A6E5DE
79E700629FFCACC3D12C07952D9ABFFD20E9A12A6AC10F7E468C19C3023FBF9C
79FA4EB24811866C70045015DFE952117E47A61365D30AC6B511AC2283E097AF
EF9ADB621B6E0DC3775044CB177E400882415AC0278F9FD06C252E868089F3C6
AF18F7706FEDF5FCEEF4B1CDC23F16D9D19CCCA51D62B011E5954761F73272C9
1D2BA6FAB2F5A2B5979D6B0638B680EE1E09C08F26B08A3850ED878060C5A89F
C858EFE3FC095CCE0D9202E192FF84B93D76EDF6D0CA24D36D578A8786980F7B
2F5F3F183850F4D99B48E8F29169E04E1631C16076ACF4577270E3BAE8CF73F5
D60BD9C4958040D3EC1CEBE50FBA228855954C332E781289C284BD763ED301C3
A74B9A9897D4B08EE433AFD1BE060CB343627C4B5594F36C451665DE0C68746E
07C21510CFD96A7A7638DA6C53B12BA121980624AE78DFAF4DE28C92ED74D35F
199DF52230FD7F7D245CFA9146CBCF02E49456C02D423ABAE74641D864AC6E56
050F7BA6D89E7DC4F742114B70F782BC9894B11C5C8241ECB2C8E7078E7BBC07
C49E11E4E242BD332A4545646B89E0F40269858FBD7DBD0C05418EE0404819A9
E45425928022AA1FD9D8973FC50FC6E9D8AB8ED1DD8AA47F70896AECC3DFDEA4
E5C43204781FA9581B9A7AD61BEBBEF9510557EAA9071AFADAE538FD5CDA0708
896FE98C08DC323C912C5358431DE04A7FFF62FD990BD3858B8FDF44C501DB5F
252FCC1396AF4F380E36A0CD15231B378B0703DB76F6C5E1934564981440960B
5790EB7BFAD3ECEBCB712106E236B889AD6B3E85C0461BB0B0401AC894105BA6
9CD7173202D40231885BA50DCBC8AF094A0A89234BB1157AA31595D901E97700
B68823A4D7F82549C875667F949FC263FFE89CF48642803D19426A71DFA8CEDB
E3DCE7B39D9966518356EDE7486983FC446DD3FB071E91D7DF40199A915AD701
A2B5AE4A84E19F330ED5E17B402C0A3102044A3420E7034C37B0501458716E02
D3FB2C7B78DBDF45C38F78A5007983A37DBBD346769114A81C44AF2B29861852
3F9524A9A9FB6BEA73D6F2E750D2637F2900F5FF4C7701CC1EB05C04C6AD8679
4C71C649E182769FB0F6D5C4440FAE6528CF2C2D64B7466D7549ED6EFCBB887E
B0D7EF0D0D40D6063A7272A9D341BEC0C11FCE9480B94E88F6EC43320D248676
24620D636BD5D74B42B0388EEA6AA11BE2F6896603072ADBCD36FFF8986EB0A4
0B5885706B869F6C929ADFFC2F1C50DEA895512A4C1F23D5C034D091DC71D5B6
8C6FE65EAC53C1F79EEC8004B2ADEE2D87D3D75A8651F02ECC330BEE9F6D154C
165132B3A93863332A621915BE8D0236F99C6960B3A68F453AE7F9CB5DE9F86C
D6292F7B8828B3B08A00944B2E1349917538B11CCDDA07AFB0D8F74AF3581926
CD936826BF1FB0318062402A228289C0F7534BEC01E9934714FDACD66F22FBB8
28F703D28415BE077393D77C96B6024A57B5AE20CA4C1279C100F79EEE03CF3D
9FA900F836ED755E2513F95683259B9DFEF1751E7E403F5F91F911DDCFCED2D5
582D4538970AD80CDDAC48A9CD70475B474CAA0653098D5E8C895A3F3FCB8DD3
DF0F0E3870B217C5B3D6D9BDC1D41D73D4531BCC07194CE4F8DF354BA69A47F3
7929EB103486B6E7133F29AF7DD819564EDE2011BBFF0B4ED58D635A4E2C2720
F8607EB523F8999E5007221EA1E5494006049A120968EA87EBA47903F84ABE43
F68ED5BBB70D2584D22E58EF45F00583206531FDA2ED1E3B19DB2C678D3605F9
1076A8BC0B75D7EAF74C7DECE90A8272483674850D054DBD9ED91FC3F7CE3576
40B13B0C57532648A5E341E6E376A63E8DE375FE0531799FD9C1D86BA3B9C020
5FC2580EF426EDC6A06B1DA2D5D8FCD132607964E58D19D8317B77DCB095EA71
B2803A6BF70C74D8EF4783865CE3532C2BFC633A8470374EA023C16C7092BB26
77D093B357BE3CE38026108F53B365DAA4B5C19913F01D30DE976C5A46A3446E
E10FBC701B0E31E6B911C6A75FDDC87F31527A9C0ED9BFCC6840B1881169E7D7
6D87F468932F4442440B3CF0FB6282C295CB13F5DB1DB2B4B369FF1E5E88D778
500DC3423290859F5A678B1DE0EEA1F0E2E3C1E93F0E88DC65E5264BC96396BA
0413FC36CEF37F02A3ACA687FBB3F42A7704BBD690823BB0018621B5168B89E9
F85BD1D47602C83B9677F41ADE04A998A55F615DD74CF3E5DAA82DA417E864D5
8667CF9C38FA4A2E61949A5F012FA15EB06BAC2957717DAEF3986D43FD14DD9D
DC306C60835972912D1C8B91E37BFBA6D07473EEB98F856408A1130EF51E1064
AF7DBF565AD42CED74244FA917EAC7ED2E1035650482CF8283B5A7DAE9B3913C
35D35458482CE00B3C4E5F3962539E6CB746EA5179386CDF839028E3792F432E
E7253BE318DF7000E8CEE4DF5051DD02F253AF8C035E258CF73BE98643DBBAB9
1C702C19191DDFDA36317ABB725DF73F86B9958B12A8A5347B631B90613D5814
099F26B4DAF2B0506CB2A016EF151F02BF3BAA09ABE4C1BB62EDA2760087EDD7
AF29E6541F493C035A9BCDA34EE00F77A0253299AE80E85AEADA1D290708A822
4C649D3021CBAB14E58200BE45FBE586BE8BBFE8B5F5379D8FCF35704E98A3DD
729935F62A539E5B69070B528273A685278C5988DB3BC512D6A220A3B1458EA9
0D68B2B13A5D4A79B827C93E137A6AC154766CA4AE15FD414A76064823F31457
241BD58DDB63BC214C3381446188AC97317F8200B3481FED2D3E9DBC845DFB39
9ABF71A64E3B813C5754641F1842E44657AA0A5D4E12910B6241F288BAD520A4
C87A7AA276C2BFA4571191E7CCD22B93B6845FC24E152C7271764B9BC8017B5F
D2B50AA0E440B038D2C1A113BADB07CCCAE59E2BC89CF6A7BD72A8CA1FA1A6A8
4718AEBA6610EE30BF74B00BE0E5D324673C0803E5B6FBC169DB7C35DB964561
7AFE078E03BF9A1BCE4E44B38339EFA71A0DDCE149E75A28461D686F83297FAA
9CCC5BF348BAC7C68077AEF5B994E9FB2262C2F2DD7F57906AD40DE2F092AB48
1058C0C9D22DCC98841B63634515DC297EC29D6050DED89002C2621D572F86A7
01AB1443F86B3E3B63D174F11B8B3663F82CB4E62384A6650476749B75F166C9
206C0E78321C9CB5060C4367329E2AAB888219F6137A5EAD65B433124BA3A880
C16AF74BE92989C382E8FAC254F543E8D3E7146C9A02C45FB8B016EED1AE2A01
23C15585E849BC46825B83A38F2DDBF62D565D9D9C1493F2A929FFF90088D885
4F27DD88B00CBAB341348486DA6B16E66CAEA7E09EFC4D4AFB98CB2A4297DCD0
5CC640508D5A0558CF7CD225A3B5776F81634859EB08A3B5F041D39390439A2F
F8DFFF984F022FE12D3D4489CEAAAF54C46CEA7569C46F793BDA2E69AF24CA94
17663E1C5DBF9FD802A240C7D77EF86000CC280AF38285BA9E33C5B1A375EB04
E3921B31F621E350F477573D75C661C5DCCC7A16F1F5E2CC59CAF7F1F97E0D01
B9A50844FA4861FD6C5FE072F0D0CD985822826D3EF7175B6335DD56506AA6DD
17E90F6C19C7087834268E40B9019522376DD235246C88DA67A92B90A9B4E8BB
7A7729BB91A865A7307F537E9CCA690FA83F7A9EB23119348D2C82A64066B446
9CFC2CA4814A5B31B13418130BD25C2E67B0BD5672D16534609CFF808612F8E6
79D4A949437D43E815A632F5BA935D1133D08831039DEFD7B379E84573D01E13
5139947E09A44B3B223421908E30A618BF6C5B3C0CDF3FEF665AEC2FDA748B78
32488E776A94ADCE7592A9F50D23D526D5D57177F4A1503B3F06414264885349
5DC8363FE5BBDDBB6FABAB6A8B87504F3D4D92615030AB62A6F0FAB8FB99B280
BAA03CB1EF05C687F3D4039E456985B3183C918696090AAE9F61FB36AACDA396
D2303842C303C712C4BBB383AE3F67BBE3ED415EB252DB6A923534E0FA2A0356
A42FA37B9C7303CC4C1A6EF79EB9A4F7BF2058819B5CEE2D7E17943CC1481CD0
18C6686CA5D29176AF3BBDE69E4F9CD7C1199AC88D54E9D1CEF23D16974B9033
8D1A9A68EB95124C12455CB606CF50BA45D1D7D6ED8FE58B01A339D66ECBBD06
9BC21B06A118AAC41C860B70833B92CB7228AB2C8F68D03B62714A7E80FDB79F
B0CA9553B16FA5E8FF48CC39F01876D59A052D8F2271585D7BD902F471D99ED2
16F355139E39717EC3B17051C840D11BF793974F51FC3D15FFB8A48E2290B4D9
2A50522F0754819E1DAEA0645CDB740B3E1FA5A70AE27B1204BA3439492ED11F
FA44D4C849D7CFB65B4B80E614469F86FA567EC100C3C1C7367B7AA99582529D
F62D93497E5891E0C85E8F29C398E48329CF602670E19857C2EBAA31C5741784
0405F961F6E6BED4A1655EDC31C235D20B206326C7E0BB59AB0349BE72C55874
B10A14E35B0A2AA30960801BE0C5FFB8C5CB60609D73D330824353E8EA8827A2
AD4272D3FA2AC1E9C7B4849A8C6EEF5281A95B9CA13845C12A3E322EA590851B
2B12C92B49F3D709298DFE84A1AF23F62F9D96182091477E62FDCB5F12391781
D155DEFA54B227ABD291DA30CD7BC58070BF8D5852BEA9BFC5FA31FEED354F99
FEBD606DDCF1799DB05EDCF7A90449E49E591D2FAB07EE29D8CB18F2124A0910
7747DE503115FDE5E1B83CEDDBC6FBDE23AF6F51CC304C5A1C35ED8D6BB55D3F
5FCA77ECB3172F5309CA9EA91D7676678D879ED994794A3C4D89953E519CC026
CE79A4E310C8538D889596A41B65A1F5F889AE8247E8A8550D2CF6A0B2FB8BDE
D5532DEB03337EF826678525E3222CB8F2BBE2DD06A72C926763ADB95CC26E0E
23EE443C3D6297A902CD209BA82D1E0DEC683B555400627DFBE88804F4BCBB80
DAEF44BD3C3C36FABC9898C442E6EF188A8A74776D9E8691770B993B173A86D1
D7ECA71D7183E316816A1E646CA83964919A27312F2468AD4C6D8010C66DE878
7796A30079D6E2488A2A1780EFA27BD177AB7521CCB58177812AE9342CA7B139
5A06C40DB02183758D1D5AE4904590697E8612476C7782BF11C857A98932A66D
7782371D3D4884B50E1295C517FC56BE005474CA824FB3E45F678E37B71A718C
F3144C25C7F5B6243C07E5DC0DDB1622EBA8B85975756686F693B4D66262CB99
3C4712B6BC2203677E94D7AEA401D0E98DB7733B6EC6DBBC1E2B6D6F2DA9B048
AF8FDCC119B80A5EC38F93C7ACE1298B55340E2A24629A4F539D7EC360A49C1F
09DEF7F85F22F64F6BA145C29263565D09E4424337392719969AF22C31CD5BD7
2AE95D4CEE270BE5FD9C864011107B979495C4F92A51C6919E1F859131048DFC
31525BF2618A981440A1214D5743A2DF8E0BAD163FD16FA0A6439C61D8F80D08
E40BE8937089322284149FBA4C2C3F91912C485C5DAC43C435E2F5527D647D35
20A09DF38B3FC60F78AF509D7B448A0DA42C5E45686409428ED37AF944D326ED
DB80820D550FBC010FB4161DE81A77348532C91F1B312141BA6CC5B99C850C4A
7FDC7D7B3503F6B4CA4588D5430DD9943FA6EE299A4FDB825130E2C48186EF38
F5BF06F73D8D655E9B3CA5189EAEB0440B1994E5493497D51247584F5D07724F
6C375C00D33B593E3E4D398804F6E4B4068DA4E898E8F5F96D30F01C4F8B7744
AA861FA4A699B49696A3F0983FE583C912B49F4CE1F2F5355A945BF7BD69102A
84F4DC6F8AF18F0787B2461F60187E960ABFF629BD83579B2C564F6920F5D71B
6C25737D3DC6DD6535755F2EB8A6B568B3A8319120193741A72274DB48AA07D2
21FC713B06799052AF0BA02C2F0952FD376150D40D46098BCBC6B8B376F7D147
9A76E9148C0698EE9AA0AD8D429F0295919604D655F83392CE8027902A7A8F08
922A1A33659371365F8233AE05DD4475B160E1194D4C7AC9507A98A707117216
E3277D0FA70354EE41F9B83505363DE7C4C8F0EC3FEB21B6E99664248BF42919
384229B5350ECDC42897163FD222B7A2F368DB12AC8C1A07EA5F23EA0AAA44F2
D740007696A7AFACD3ED1DC134763B8CE18FAFA097A536A97D54E9EB5D2927F8
DD71C97EB8FD9C28D5A9AA22E36F01DF05AB58428703B5F8FCF7156859F14E66
0E02CF572199F74645C0D9B4DB9DA965633F5DCD87B799224A8A389D0F351D3C
74500EE5012C07BC08690996365C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3138009AC58AB5536A257514960D0F91B297578C0D126631964A6AF320A298E2
4A387E512EF8751BA554EF5D75700B8438E9AF5FF1C1BC9FC1754260FFC0AD44
5193BEC681D6F516B9DA0C6C6DDE7E4D339CF684683CCFE7F042966591D6EE9F
7A4F770633C836905218353AB4740DF21449FAE73485D4132446263C07C769D0
75CD103F735DD29A5B8D8B310C140545A41AB637BCDCB29D30BD40E1FB099FE2
3A6C4F5CA2C9BBE16D87C5D7466AF5A5083378153907622D73A70D1D819B9A13
61E10900D14EF927A2F0C3A8BE6E4CBC44070FC79D82B36DAE4B8FDD306B66B9
355E59A1D98F1F7053697D4310F9281DEB6EAD9EF3542E06709563C206E7044D
534586BC754E07D88DD634787FE1DF52B38F3EED607789178487C46751A56899
67512AC84C42DFB2D9C47204DC6671FE30C4CC8BC7B4C3737F306BD10EE54362
08F8546282AB282C565D63BD51FCAA7D8BCCFC7792A18449B152D84A52F60F9C
2FB8C376B57267EF3FCBB6E9915297723B16D4214F56DF2F6591BA911706D3AF
ABBF86B72A84F70D694BB35AF8B365EDCEF861445EB8E445EFDE8E0274A25795
DCE6245908215940818C0E1B3883394BA9DB83D32723DF9D30974A40872E176E
C00523370614897DEBC0E666A5693C95962D6AC49F31A5D39135CC8D7621A976
9B3333AD3BC0392B050B9540BDA7E41941A3FCB4602DA9BC62E46DE52CC01A23
2C69DF0505C2771957F2A2B759ADAC4AA72FEA31108CE9599B029C96C520881C
E03639DDBE853B29C19D6877DCB386618D0BC678FC8ED287B91AAA0E3D3BA444
F1B6A11A2B9D9E524DA50EA2A8F3E6D5BBA1E2319C65E68A4ABBFD09EBCE35BC
AE8EF5FA845DCBA084E4EA827ABB5E76B881F790246CC6E5F85E045FE750DA4A
9B403FD293CC436EB60F0DF64D1FF6B3A5D9FD92C770899508B3CC268B8B443A
27B40EBA3D67800EC6A62E0B7586892C0CDA89CE026921CBD8AD9430EAF8FC24
50A24D097DC62EE422CD5535110813C0AAA2012870EE6C67C3F958025C777E77
09BD29032C45F7D776461ED978AD4C9E1AECF38F08EAD800EF05C08C9A1305CB
217F8F0701D1708794A7086FE6D012FC3622BA06DFE425D8E02A29A3EC3B71A0
E67B62460826B6BEAA35BDCD509BC4C22A42A4E9F9365D91CEFA249A039485BF
A31831EED8809DEB8E04A2EA0661B96E1A4172B9D4452D2B4A1C930D55F9C881
23B62748256476032496AFF7EA762D059A771A5F5B55B2F7B559162CD4C17A17
A440688C8D4679ECA8315278B0B4D113A3DE9EC13B449FCBD7D67E28D2B6C648
E57A4CADB9551D5B6876F38487881D713BEB1E9FCDDFA1761BD627D86E69BDF0
8C1356CE76906BBF125505ACFA3D838E3DCA6843B76B9B3F7CC59BB4DFA752FF
07008ABC73E686EEBC2C10645F2CC8E86EFF162EB9ED56F150AD56000D24ECFC
77CD8BBF484BC0F6F64E77902DCEE55E4AFE699A8B18D4A2A876EDBE856D1C71
E988F53B487900CE67B47296B5AEF277024F7A0DD734E1EF31347807DFAEB7D1
FE2901AD5E7B28EA439314D229AF3DD00255BBA271A4EFF74144062EDEFC2EB6
6B1F7128E9210EEAEA82CEE3783F6FE56E3E16433ADCA3B15C255C766D0466CF
AC298407019539411E05D29A8C30F2490362FAF9F1F77B4B92BD48CCF7CFA30A
7E92FA628D056602E7EADDBF394C6DB3A2F97270CF2AA8EC5FB88B3DECAB5AA5
AC086147CD76A7220402A2CB982F4E58B558826C6AFE307EA7B087520A4ECB2E
74FB5E791E296D7444BC791B8EFB84018DB1E6A48DE08B793A259DAD2B970B9D
A222F7B00A29DF946578252D044D41E87D9F04F4FA78553B4C7A0BE6DF82C2EB
F376217225E097D62EBC6744A2553DF0EFE04FEE48D1896D246331AD4E455B69
D9759D4B42F65E8745114DA00C3FAEA70F937E11AE319529B6AF551866925C7C
E0B7C3C4186FB5E4720060CAF1F6FFF09FCBAE6C1BB500C839DC25CB07FD277A
2656EEC461C55F6D7C5ADF691D4C163883BB2994826A94CE7083B013753ED4EA
226F3F70FB5E54E0BB2B6197284881DC4A3570EEF0830611F05828FD17257B77
9FFE6874F03A2C73E37D868E3CF6913CB64A1329228D33A7B728D27C8018BECD
829ACB6C3D9129E976A2427CB51FFE489F63852A12B46114BB6BFD37897D8542
A379ACC82F0C46763A0BE692D47598441E7011C41A69566B2645E53BC96D1085
20D9CE9193DA216221F842FD0F3B883B77ECA99EA55B3781A7A6A992819907C8
F393567972F805FB699B90F80A589C2C8ED04C46B1B1DA2A656E21F72863521C
722BF9CE3A79A98B27E20C97EB21329A03DEA40EB5D1BC206F675001C6EBCFB9
6476A3B4A2511E2546ED5A39DDE6A5B490374097FA222C56A670B0C8336FF152
733B33A292501BB7F730C051C014C847760A115C1E2337A22C1D091DE0EBBD60
3C8E0FC735A9ADA1B9B809371E5CBBEC51EA8BAD695830F3AFA77333C265108D
8BA7DD3634ECF142A05B6905836ABE22F0DBA554B3CF2D99BB85616E790FBF04
97F8CCCE345D7518BED11E0BFF44D56F0B5A5C7213FA4EC1E55F509C2AA04FA0
4D903F6278F49C7BEA993EBF32D3A166077550ABDFCBCB080F7570B36484318C
1F0D03C3EB6974B1641E0ACE812874EDBA50FD9DAD5E45A818F41A007E63A4F4
8BC56E6D63DC99F2728F99C9484517D7C558C8E8610FCF72309950D176CFAA1D
155312586A9ADC136D965ACA9E093B65AA059139E380F71124DE871B3CD1B8A5
F7A204950025F47280B1FF706D58BDDF7166A287356BF9955CBE447EA29F95E3
C75E80210CA5162408726E89E303031E7DEAC10EA049BD0BFDEA439F35FF80E6
15B98D9D601EA4C2A10E6AD32D308E4ED9FD5AC7065959E7193E29998F50C3B8
9567AA9B656264B1C50FD1FAE9FF2351EBAFBE507592BD7A0187E27EBA6DF3D5
6AFE4A25B38B42834D96ACCD034C5B8314ED4A80CA822864E5F9E5AD6C0D954C
57A3F814462089F0093DD85A4A20A0BF087816B00BC949C390EA29CAC45AFF0B
F1F932AA843DFFB2428C629A910811E0353F5A59023905D41817647B7D2C63A8
B8D708B2B900F04C54155BA5F8F57AEA3AE6C833943F4A88DE2D7515B5B2E677
FB0540D68A8B8B619F8EEAC1396B66693591F60E9ADDD22CB0D34B58A0472090
D5CC40A0970365E89C3D22EE06F100044471FD8084D3CF6C6EB4DC65BE1E2214
438309558537B3D17350245AF23778462E0B1CFF4690692DDBE68A92CAFAA72A
6F7D1119DF9BA76734AEC487BBB1F1F75B10DBD6A8E17FB1DC76DC9C096D7553
EC12F745DDC7EAC078541D4D39958A2574496E7A4388FD56B0DD93D69BA58FC9
EE39A71E97771C1687BB8C208C8A4A69B76313CAC04F35C363CF817A5078A751
676B5DDCEEF6B61E61A0008201F5AA75A69C6E7631B822FF44806450BD02A380
06E7ED08A47E231F80A434F30A29E7CA7AE699D0E5085DA46C34A0EBE423B401
40F7AB6FBC84982A912BCBF17E8709DCAC3254E56C56A2CB0297E6C99E604FFF
638C9DB5F9E403B20F8596FCDCD85BDAB9EDEE5A57CEEDF7D8FFC0B2D9E01DD5
403DDCAB8837EB696BAC4B915CC97D8C701791FB5FE2D537102A9309D966B7EF
122B970652DE12556D105C98CB559929FD0D5E8A13520FA7BDB2C711E3B4DEC1
CB15BB5C340A21B4537A9834C0B57F6B040439896039DDC1F1DF5BE243411807
7BFBB59B9B30ED225662BD2DAE08C5FBDDA5589D40C1BEA85480D5174C1ECA2A
8F59A0CF417AE82910D422302799234B4CA0D09DEF75B34CB105A038CCFA767A
039CA33A072E69AD574D5AD803B88B37F34020E00208EE44F33A75C620A66F42
C60A32297467259BADF061BFA39A0F90643AD28A6A4DB166596C93C365034C7D
92950BB203E3471AD6E96417B09FF633A21A0AF02F1D9AC173874320ADD4AC1C
12F31EC4E537FF9D6CEEE5278FF99CF84193B36278E440EFCBA82F74B03FB31A
B682BD691D38C22CAA7DC31830E47843EBC897ED2C6EAF713011776BC1FCD81E
F9A29F8994B74DFC090CCC40AE9DA65E5DA02E7A7E8A840B46536AF5C28ECC3F
08B56E8564F18556B5F1DBCFF100EA20D240581AEDED6F24CFC1AC711FFA1DCB
C15E64F4E32A6876252FE704D57B8210BAE2E15F7F34A95388BBF4A1F3DAD2D0
86BB791C900E377B78459CD3CD3C0135C5B57CB9F1F70EC7EBDCC34DA314F6A3
F0D247171C89D8AB26B7ECBFF4EBCB68A2D325F02C783FE1FC2E8F706B334B6B
B3BFE3BD4EF266744A4A0528810A0AEBA0AA4835F016297AA63003F066DCA62D
23789DE15DF1E23C3517A772B0EAB1340F84D174958D6492C0CB302338B2402A
BBBC5EC181E3F95ABD8AD8D3F71B60250961524D17A4839F70FDF22787FB3F83
D340F8D9C66C6F261F645A2A6D34FB45943651A35DD63DAB617CA8B941DA69A9
28EBE46A46B2BF93A435BADFEE4DF997633E53480A1DD992F8753156C3314325
4925810A365A9D8E21D9FD21944D8BD1E10A52F59B89CB57613FA7FCCCC6146E
7B483AA7CD13A91E54ABB1A9D6F672B517A89E498488371938C573B40D709C80
78A4642A91F1947AAB4A780D034BC00B16D7C4D77CA695DBFCBCEF3494BEF638
403F3559D63183D4AB1457A7F35A66A7210FFE6617ED0227426D5B1352397BC5
4B12EEF36C603FA96532FA00F88FCC7A95AB5E44EB877C6E9B656A96BFF33DCF
1124A4E0DF06126E587E8F5ED4F6280C6469BB9F7F9713F521697F8953E479FE
B850CFD7D17560F98730BB004AC853C1877A37B71CEB153CA1078C8135EBB101
E1FB697AD8FE70F3E79B9BD4C929C8A03801A388315DE6EEBCAC80D678BD165D
B9A392D09E79AF518630C4F063E876A35D66DDFFCE6BFD3D847DA4F518B81FAD
A81814332B622EB0C9778488BDBB7EF226F862C9EC736D4428BE1DD10376540F
80728FF55AA5F596D4FA803A09C281DB0B7A01FF5E7007939680912BE2A45088
1F0C1E9BD75AF56BBDE24109B2B136AD0292B2BA0850FAD0C18B03564EB61A0D
261812A3EDE5BF40223CDF37835B976D5CBAD20AA538A07FCA3E44EE5EF03972
15B54C7DCB8D72862D87AE87F9249B2FCF932EDFDF6BC4AC13D6C57D2B872C05
B9540C3F5D8595958A47E482F535FE14F2CBB58922F0503241CE88F7E280B79C
9C91110A52E231C267046C4EA27240E41504D3E851A06208C42D56555F98CAED
6F9AC20EF569E656F19E724FC1360B95FD2E3EFC4BC51F799C62A8B86A7DB68B
7EDCB741464468BFD7E0747745A81FDC2505E773E0925B683F41CCA13E235F1B
8C2881C0B52D16CB8A3B5D19876C80E8155BD4BA6A59724CA86160D586A9E985
4F50C7D92BF5BF64F538E97FD6B1BB2AB26E23DC03A8E6F3F08804258C3E37CC
6630F796F8CE5ACC4F49566EDF37EE388ECAD896581A70E88BF65ABB396A4A1D
65189A94A649601CEF94BC4C8C0CE36A84A3197D97FB2F10CC9D7A16A402FA58
F9C71DCA9348746900FE665375E9C805A494EB5B2DA787903E034A2D141798D2
1C74A0F0666B13E890EE6076E5C8CE3CBB1DE5A1A15C943A3934E70429568A8A
E04379250B30F65FCF38A8F92AD5419695DCB32CACE8604E3D7B784BE985DC57
7101E8C0B884FF5107FE9E58586DC34AE1D06D51FB674BF0AB80AF539AA945AE
FEE161DDF52FAD0AB9815F70E9FD168C02851FCE51F2A913E3F757E6936FB0AF
C41E8504D553FFC1556A37F0232C6DE2C524B86A3E83C8FCA1FD3D12A4104156
A84CAA4FC1700E8AC2E1EE384B0F6907DA0232BF5153AD6399E2F6BD8EA99423
9C9716711FC9C36549BF33E0A25D5C58B9E54881AC790FE43A8BE0FB84F15133
05446137AB4F58CEE263B0601BD0EE2AE975849408D3A7D043213910A9621A6D
171313F92A306D1A7DD5FCA29CE223138B98E6C086D661A136876F2FB93A5BDD
CDE808C7E66BE894C844A3405CF77CC47974591E7388ABBEF0BA54C583F64761
71C0B30162242B3EF7756A035C0529533E59108C550C106CA75BFF1DA4A4B300
51CC74AC1BB800B2B30D034820C8F9D4EFE4447480B542B2297E3F5C9DD492CA
8E54A124C5473EDE9369FA0D48800D110399CB8EADEC096F40CF34F43878F7D7
6E5B0744A7C12C1F974E42BCB4E240393BDCD349EA093EDF3861D8055DD7605F
9D205F18B1978D9476D0631111033B5A1DCC203D15AE5D01B7D1A37B599DB86D
044E5A7B06FFCDEFA6EDD69100464E01EB462FD71779DF2D2A593B3D3BFAD6ED
FDC5FB8A786B1A04B82BFA2FE0D3B01D5D350745EDF5C6EE6F804E789DDA70E0
4910FB25DA53070C2BBB4411D9608F4FF0B2E1718C78443B70CD3F5A5CEF3848
B76BE67D51ABE9ABDF14ADB38FFDD7E171D89B69CE420CBB74084CECC414A478
035EE49573F33879D310C2E50AD5550235270EA6787A4CB604731B90C4F19A09
99B940D7B30E13B1118FD1A28527FB5781461FFC94C69C62018D6429EAD8B7F8
7627FB88AFE46C593BA22BC17E73DEC03B775C6DB41E9274E14AEED880ED6932
0688672BCCCDE67D011659213F6DFCD02C2278BCD0D42287E7C024DD65985CD0
B96C1EBB15A41929E3B3F62F20BF5C8B3AF4C684C2B9988068260570B288B454
08E04977CF078006257FC6DCC97F6EED748BD85645B1A6585B49FC31A81602E1
26553EBA84AC04C926D1742170C511EE704B4308A3727F64393E392FB6E035EC
A053D3CD1B9522F61655505F37D6A182ACDF7D3B12222FFBFC380B2A925839C8
C34C34540EAAF925B8071606BF079FC7AF215C403266180A841BA1DAF1C1C8B6
51154A08908ED9FE7959EE2EE52949E995E7EF9153005C9B4E72FB99578B8093
58856E4E99B28E138E2DB585CC1D1C0CAADD5CBD6A63F3CB3D55282C1692D810
58A3E7BC074073524329D6607F71F54A2AB5F853D6249B6CEB74D9FB648D3943
C435E2F5527D647FAF95C7AC6FB71C40F8EECDA336259BA0D0151DCB3F2DA9BF
CC5E16E77D307E529304D0A9DA233B0D1292834B2C6ACB75348A88CC361FF06E
984C86AF0EA429DAA586A587610616A417C37827D8AD8802F62C21D16B3B6B25
E1B9721D100516CB839EDAEB4DFE011D1947F0D4874B2E249BC3089D9CC68152
679D99FD6E52BA3B727849512725FD6CA218A1CB03FCB945FC24376A45F2DE0C
2131D3350E59147D08F25BBF3EDD39BE705D8A5AED5F1BF8A1C980A0254541A3
FE4712B1D0739BEA5B0586EDC6E39EBBF23F6BA62413A6D32AE3655EE5359488
4ABCD942D8FAC15409EBDC8373B81B6643420F1ED8619221907D5DC232BE355E
DAC9632EB2FB3B0007243F409731FFD9A1DBB7A01A4328D7327730EA360189BB
BF296AD45413238620DE1DF9E06A430AFF7A9113135E972ED8E7789EF9899B5D
52E616CBD344CE7D714BEAE2710FA343A595982F09FF554F2DE812CF0A27F44E
3AA88DE45F8F70D60AEE956E9A4D98AF0C5B1C80F749FD6237A23144481761D0
C925588D85FE0396EBD46C873AE8550882F546655238EA805F8B4ECB16EAB8E1
69A5F197B2DFA31AF1544E5A4933C57BB9E0C33618F76E5C0AF797744A09169D
3B1D3A7C1D70B03CEB7FD7ADB4D72671135435609A235501E559371B2F1E4A5E
4F1019C1679C5AACA4F9EEB15E139140B85827A262D846549BAEB53987787AC9
AF72F866C16BBB5460A3E4769323AADE88755DA906B3B538C0212200D46EA7DC
05D42B1D6A2AC0C7AE3925BB9317209E351957B50D50816A1C2963708DD3E8D4
767F4A3E61B9191B7E7F8D6E6F248F026AE0362918A9B5942D9C490DB3B3072C
361B67FA5AA1AAA0593E2E803EA719093EB984673353F4620A6E1C7C87B074E0
2030C1CED85B4ED988AB7603C73828F67ADB67488D50AA00548B9592059F76EF
585E15F5BAB3E01BF98A30B01C3277C9E682CF5D2DA062D376736D3377EEE3A2
850F276C0C35BE72BCA2DBCA51BF533F4F66EA2152F1D986F29EBF3868C43355
058737756FC45864BB66A2488823916874A30571F165064B7C315A72039C8206
693ECCC8A65DF7E88BA5AE501AEB4DD6794AB5B770A14C98A43359EB2F01985B
CF3D9493ADCCB3711D7D6290DD4760D8B279A08DD533DC0E8D85F9DAFC5FD842
F417265427E6ACA22C12BC77E3A4F5DBD8BE9505E7F66AEAAE9552A5F0717C5A
6AF81F6238F1912F06CE23D9B929E7E8CC20114A61434F77D062F6AAE9688184
3545920F7F6624B0DB1670B30242AD7D07C2EF599D28170AF9399BCF9021DABF
C31D44C06BCC58D737F7D239EBE3EEE1A4F981B532A926EA62E36D0317556499
5F2A07393255D7C34505F8AF4519A585B0D50E05208B6D2C68F8CAE9E0372896
7A04B608160740F68F4364E12D55C4EF5739C88024163ACD468F5262055B8892
45BB6661679F7EF91967AF19B5B8F40B89B07BD04EC6CCC6D5C4515070E4EB6A
D1236D9B9964844483F0E0C6017580365599DD3021C36FDB219B95A2B515DA86
A293CD507153759C247901EBA8C14BD517CFA1598DEFC33624D698D3FA83EDC6
E2540411BD30DDC29FA93C9B8C01EDEEE39823F14638FBCEC0CECAE192654EC1
583A1FE65A03B087DD197916C6CFD3E0169F14DF8F5DA10E7729AEFF7D3CF49A
DA55F1F20E715521510B8C86390113BF944E37F73F7D3FC7BE1151CA8B16F50E
11F37CCF4F742DF16CAD5F37FF1C0B7B167325E12D984CC099AE441600E6BF37
693F7C1360DD9CD89A3BD5F26E8EBC016257E8F4D3BDBF3850A455A4BF852B21
75CA6D2D249929BA4C2DED2BAA764A41DCB7D0056B3E066689BF00D01E884D9F
04CB52182197311EB2A6C528FD30303273748AF2AFD97E07A9C2A96F4EF8754B
6FD1438AA8FBA3B3C81B70810EB0AE50B5A2CA87320DB885C7CD159DC7C72517
CAE1994A0A790E475C4970EAF886804871314D5D009BEC8C5951422C3492BE91
88635AFC346BB0E37BB222FB8F4E5FEF51F9240CEEE5D95F42B0392D71113C43
E1AAB21148C4E64E81EB2D210E0132C6FB2E0A2A2D075A6B82BE89A76F059E29
B921F72DDEC983B26B315C3FB0AD1FD6F268ED18F63348C137261B368F377342
283FB0D175888C87AAC53FB809496CF89ABDF642292EC99B661C5058EBE9CCE6
64F80835360E5AD1AD898821B44C90F1159492A8835B4D6DF5FD63771F4A76F3
E62E1F9B40CAA02AFC08A04AD7FBF54C063AE222B616038021685C7DA55C5E0B
9F04F8F4D4C2CD4347685181CDCAF3EA99136F1282621B10642FD4E55E68CCD4
B1796BF5BC2F46BFA8F06EB1D43B732622544292CCACC969ECE64605DD51026F
0A19BCC73699AC7444DFE0EEAC4A2BF2ECA2CE7479091F7C6DBABDC86EE288A3
1D9CD3FFE0E0C7EC3EE534AFAED81ACF5AADB51C830D8AB9ED21A346075ECA07
CD1B1C885D4C08B5F150063A162A77305BB771DB26DF3028B225014D9009AAE7
F1DA1EB188FC9C8C00CD14705842EBDAED22BEE039B2FD87A31BFB17E8C2602E
A897786E4764D54C7426B31C6349C417BABD30416E874194A261817A0F878CC8
87BDD34D99A300F0732CDB26BBCA3C3750B6F939CA1913017914AEDE47D9D5E1
365AFC33D33102B60B6F900A999FFA0851032F5FBCFEA0CE4EBEC63E7A4FB38F
789035E74842E2C15ECA68CDDBDEB15A2F5F837B4453897428E81CC9DCE732E3
473F0C657F7655A6CE7AFE6FF41A22F70EBD1B617DDA67CE3CC05CD16092E79B
0A4A66908B3145CC1A1A482536D090A4E2F7579546F39E19C4D69CC236921AEC
7F147BDE16030952F5F4042D4BA30C2DB63E8BE522B435B4D7D91EB1DE27857C
5E6F46DD31327F51D2E880FDE50DD86AB890D14925943432E5C524B86A3E83C8
FC1B95A668CF9322BF1CDB56C5E11FDBA079E33E39E2921FB47D24F8A692DEA9
74DAB0090680F6865051B776CED4EA049399796FECA4BF7CA03D4AB881E80B46
33736329404EC9B833E61733E94F653E1B18C964FA8957CC493C287F3B852DA5
BFAC2B590B9F0FAAD50D687A3EDE400BEFE173F5F90920E3C3C3E114E68B65E4
11DC91A89C0ABE0ACCEFBA3D29BFE8FC4324A2E0973E5344DE075AE2842DC170
182FE346522B15198C122ED4CFA7DE22D9576F3FD3833012BF39B022CEC74F08
FEA024B3EC07EB2BC0F73F16F8B3B2AC25B09AEAF492F363C2F3CD2FE1DC6008
91064F80CFFAC2B94B0F1C7A7943F7606E62D90BB3A777847D9041485C16FE90
05D8C41F6A0B7E720F85088C81AE0FEB08A81D48F17BF5CDBF25F946C312131A
F04DD23A91262CECCDE0F3D65B7FBD8E1EF5ADE60C791B8B4EE5819149EFA3FB
3B75688D86F69122D180271F91287D5E233CE4E8C44EBE14711E06EA02B2ECF0
6391E81ACC544000533259884DC417101CE81E058A4910BFDF0965BD573F623D
215F6C0CF801851F0038D42AC6544252CC902B5504EAE61F19986F13F324B6B5
087524A503D53DC8B5A85857D735D8D6867EF9988A7A6D4249A2FCE693EF3D27
DD71FBE1706968C539FE7212158F454CE1AA6E7C893F7D4EC83FAAA2369E24B4
F6233942F125FF9EF6099BAFD47EBE178356531B1B71C92C16A6D52C69EC8B36
01D383D5EECC3436370F5756F9DCE27891204ED55A4CF394EF680613BB183395
CCDD7DE07E7C2B496D248B7807CF7CFE3E8FD03E34EBABB539501F00406AD72F
26C076741A5504D6F71950513B675CB22F79998ACAC834C70E90C1BB3D58C1A1
A951DFD0E11C5F33336EE6F57FFAFAB0F159EF4F7569556402AFADA255497211
03667E370D46B94CC6C1099F3652D2CF0D3E6D91929E247772D7D67FD60C7A55
18283FF898A6E74B9C9E6B2FB2B86B73DACA1221FBEC14BBA6A908384D2FE688
AFAA115E5EEC05AF4B4DDF63073F278F7D863157EA34FAFBA3FBCC756AAD4C1C
06A05C51319B0BA5D9A0E72488F3776EC9819D84B3663EBD64C31DF175409266
F3EF69C2CE9B5FB6C4D1C6B37F72D49E5DFD895D25994CAF382DC5D5AF84BB68
61C104C4FF3752585854C18C872808F6AA5FB7C2AA3E354AF7AEDC8EA200FA15
9F0D9B6C525F6F3BCC8BDEDFD6ECD070FAA6F6D8A2914C0A09664CCFEBF8EAC8
9E1C02CCB3F652A2EDF2B74C117743E6A616A590FCB6340B818EC0E60F2E86DE
EBED572A5B78D64254BD69E4F66A01189217CC4814138103E35CB0B57FA92120
30EDA63B58577FA58799444F042EB2800A3342BD3D7A1893EB9979A1F07525B6
D496A8FD5A860F5C8A6114F4B81670BB686B161AB1A848E924A4E19A8C02D1BD
76256DEFC522EB0AACA28CABF874EE133F077AAF781C18B8A1F7FEB38C09AAF2
51814F1ACC4A7F7B57EE96B659CE4C0ECAC01F5DA4CC4B74FF4548267C6FFB2E
72E4E04CF8181C4D654D2637B6DFAF4ED82E1BF056129BC11330B492BE06C262
F62387B629896E7B7D9F355B5625A9B9E60768C46358046F2168B6852B84A733
14B12952D75801231AC1519D18D1B4DBF2DF7DB4325FC1560E0B5815DC0751A9
2610FCB3AEF5BD7D25E84DCE6D6A4A7EFE66DFA70A0C8664569977FA7D7C2E62
E89D367D908BE3C91DB2892CEA0949F93985FCF4196BF17EC70BFC309C1C5E01
6CBC6216396DB2385D9B87C3E27B6D94DFBB3388E5AE7AB8B162A5D38D1CBEB0
2D44E31A953049A9C3B059F7AE8ADFBBAFCAE188357BB715E5672CFD7C6A12F0
214FFA9BA341EB331A1119BE6FA1CB2478F15CF7D80AD7B38664B19DECBD09D2
39CBE97FA1E6D24084DE6BCFD62D16F067C0E3A8D552B0C014C4711484075AAD
246A45BECD8533BBC0AEC7271D5F90D557A9C04C3071DE94E7DA89E377404C8E
31E35C395C3BF67AC8DC10774A0BF684DE2572E1FF39FD324A6C82DEE65B5C20
314DD56FFB5EFCC46CFF85A5C3D87A63C156BC4A5C73718F38A4E67EA9205430
9924495AD4DD2A6B8B2EDAEE30FD547F24B704DA1DC584BF8158315C70A70D04
4DDE44CF08EE9760063444809978AC91A7103C1EC790220C92C78430B1A996D9
FF01FD3F279C52F72F03E4919B3D6F95D4D2C7CD087540F1D3083B2422482176
0D9222CEB74F98602EDA4D78ED9BA00A3A2C4455DE57E3D28E515400E9408A5F
F2A082C2AB66F8998197654A8E1F9C41C94BD85867C22D6D8F906EF84CDBAB54
423EB6181D81477617CB57ACB685E5C038F0DB0E444B30988302438E0C064789
D70AAF933497CD8F7AF8845CF78DDD5CCC6C0FD2595877896B9811F54A0CF16C
9754D0263DF1464D494CCEA1C8A4DEF1AEE7BA8A82FC7EAB7A6C31A0610B70FD
BC2211B1E766F3F1A018B5DEB9D49B8478272362D75B5B8A85D6132FEB12EA05
0F98EBEF76F9CBE8E739752A4003519769A6E15154318EA5295E7C819B4DB6BD
80C539B5FB4C30A5CE750565102B84FC4D2C9BEA794280DB1D11C1B2D10ED9DA
3CD2CBD804ADD4E205338ACB1558480277C67AD535956BC4183FE1E74D3B938F
A16F33A2455597F195A0B7F4B2A2A2AE6D3D1DFFADDD5B6D5B4BDBAB10B9A5D7
8D3800B7CFAA1BD8B3D46DE19C8FA3CE9011D5AA41A19EEF3433FE0475472F98
7A09C3EBBC5C34FCBD8F76C533B949377FDC6FBB2F4B19D917F18EF6B67C6638
2910F86B369C8CCAD7EBB9CF07A0376B8D97DC6686703DCED0CB44A6DD2B1951
17CB7656504A844AA35894544F4B6A71B21443348E5717D18C48EBCC2ED23DF9
6FDCBEC9E6E2CC4F143409194F5E56B96A6754C134B962BC56D8EE5B2AF7E158
EF5933663B88017C7D847EB0371546E63527173120B709F502E6B3899553E03D
5662EB1126DF8AEF4B1C571FE4E7D9CCBB4F783156015DF754E669742AD8F19B
950AC3F2A4F653AEC20F15993844A5B36E1A04602F93C69619F88416334DDF58
4E83B3B443B9E153265B5C8296A55D95CFBFCAE2430892531D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 173[959 82[{}1 1328.35 /MSBM10 rf /Fb 254[261
732{ enclmmathsy ReEncodeFont }2 885.568 /LMMathSymbols8-Regular
rf /Fc 135[530 3[340 13[452 1[484 100[{ enclmmathit ReEncodeFont }4
885.568 /LMMathItalic8-Regular rf /Fd 185[723 4[830 11[553
3[553 2[307 46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fe 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Ff 145[664 3[369 2[664
664 51[886 8[1328 39[369 1[{ enclmmathsy ReEncodeFont }7
1328.35 /LMMathSymbols10-Regular rf /Fg 198[470 470 470
470 470 470 470 470 470 470 4[732 43[{ enclmrm ReEncodeFont }11
885.568 /LMRoman8-Regular rf /Fh 162[361 1[361 29[1012
1[361 1[650 650 1[650 650 650 1[650 650 650 6[506 506
40[{ enclmrm ReEncodeFont }14 1328.35 /LMRoman12-Regular
rf /Fi 135[739 3[470 6[1138 6[641 603 676 560 1[683 8[1079
20[931 988 975 5[361 361 58[{ enclmmathit ReEncodeFont }14
1328.35 /LMMathItalic12-Regular rf /Fj 650 2[723 5[650
17[650 13[1012 17[975 73[578 686 686 939 686 723 506
513 506 686 723 650 723 1084 361 686 1[361 723 650 397
578 723 578 723 650 6[795 2[1336 975 1[939 1[957 1[885
1[975 1192 813 1011 2[975 1021 849 885 993 1[921 975
6[361 1[650 1[650 650 650 650 650 650 650 1[361 434 361
2[506 506 2[1084 3[361 14[613 1[613 16[{ enclmec ReEncodeFont }66
1328.35 /LMRoman12-Regular rf /Fk 3[1196 37[1616 93[1136
1[1136 1196 837 849 879 1[1196 1076 1196 1793 598 1136
1[598 1196 1076 658 982 1196 956 1196 1046 6[1315 5[1497
1[1605 2[1616 1682 2041 1[1685 1[801 1682 1[1353 1412
2[1530 1625 9[1076 1076 1076 1076 1076 1076 1076 1076
1076 598 717 45[{ enclmec ReEncodeFont }47 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fk(F)-239
b(A)717 b(5.1)g(-)h(1)f(Radioaktiv)-60 b(es)716 b(Elemen)-60
b(t)717 b(-)h(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray
-741 4800 a Fj(1.)p 0 TeXcolorgray 651 w(Ein)445 b(radioaktiv)-36
b(es)448 b(Elemen)-36 b(t)445 b Fi(X)551 b Fj(zerf\344llt)446
b(mit)g(einer)g(Halb)-36 b(w)g(ertszeit)446 b(v)-36 b(on)446
b(8)g(T)-108 b(agen.)446 b(Zum)921 6792 y(Zeitpunkt)433
b Fi(t)368 b Fh(=)h(0)434 b Fj(sind)f(40)217 b(g)434
b(des)g(radioaktiv)-36 b(en)435 b(Elemen)-36 b(ts)433
b(v)-36 b(orhanden.)921 11330 y(Die)390 b(F)-108 b(unktion)389
b Fi(m)g Fj(b)36 b(esc)-36 b(hreibt)389 b(die)g(zum)g(Zeitpunkt)g
Fi(t)g Fj(no)36 b(c)-36 b(h)389 b(v)-36 b(orhandene)389
b(Menge)h(v)-36 b(on)389 b Fi(X)104 b Fj(.)921 17859
y(Zeic)-36 b(hne)433 b(im)h(gegeb)36 b(enen)433 b(K)-36
b(o)36 b(ordinatensystem)434 b(den)f(Graphen)f(v)-36
b(on)434 b Fi(m)p Fj(.)p 0 TeXcolorgray 0 TeXcolorgray
5933 37897 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 315.73534 a add def
/d 0.0 a add neg def /h 141.69502 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5933 37897 a 7902 36480 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 5 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 297.95241 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45444
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.89053 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.4527
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 297.95241  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 297.95241  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 128.89053  def /dT 1864676 abs 65536 div viceversa
{ neg } if def /DT 4. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 7.11317  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 7.11317  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.89053
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 297.95241
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.89053  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 128.89053  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 297.95241  def /dT 1864790 abs 65536 div viceversa
{ neg } if def /DT 10. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 2.84544  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.89053
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 297.95241
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
6657 36765 a Fg(0)6186 33616 y(10)6186 30466 y(20)6186
27316 y(30)6186 24166 y(40)7667 37826 y(0)2679 b(4)h(8)2444
b(12)2210 b(16)f(20)h(24)g(28)f(32)h(36)f(40)7902 36480
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7902 36480 a 7902 36480 a
tx@Dict begin  { 297.95241 128.89053 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7902 36480 a 7902 36480 a
tx@Dict begin  { 5.0 53.2013 8.26648 2.33331 140.  Uput UUput } PutCoor
PutBegin  end

7902 36480 a 4957 36808 a Fj(t)434 b(in)f(T)-108 b(agen)7902
36480 y
tx@Dict begin  PutEnd  end
 7902 36480 a 7902 36480 a
tx@Dict begin  PutEnd  end
 7902 36480 a 7902 36480
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7902 36480 a 7902 36480 a
tx@Dict begin  { 0.0 0.0 pop 297.95241 128.89053 exch pop } PutCoor
PutBegin  end
 7902 36480 a 7902 36480 a
tx@Dict begin  { 5.0 53.2017 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end

7902 36480 a 4957 36812 a Fj(m\(t\))433 b(in)h(kg)7902
36480 y
tx@Dict begin  PutEnd  end
 7902 36480 a 7902 36480 a
tx@Dict begin  PutEnd  end
 7902 36480 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 24 def /dx
x1 x sub 199 div def /F@pstplot (2.2124242508071686E-5*x^(4.0)-0.0026895678070541075*x^(3.0)+0.13276296672568247*x^(2.0)-3.4012990063181294*x+40.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 7.11317 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 0.0 113.81775
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 56.9054 56.90887
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 113.81079
28.45444   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 170.71619
14.22722   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 40884 37897 a
currentpoint initclip moveto
 40884 37897 a 1 0 0 TeXcolorrgb
921 41882 a Fj(L\366sungssc)-36 b(hl\374ssel:)921 44427
y(Ein)536 b(Punkt)f(wird)g(f\374r)h(einen)f(qualitativ)j(ric)-36
b(h)g(tigen)535 b(Graphen,)g(der)g(durc)-36 b(h)534 b(die)i(Punkte)921
46419 y Fi(A)369 b Fh(=)g(\(0)p Ff(j)p Fh(40\))p Fj(,)434
b Fi(B)i Fh(=)369 b(\(8)p Ff(j)p Fh(20\))434 b Fj(und)e
Fi(C)464 b Fh(=)369 b(\(16)p Ff(j)p Fh(10\))434 b Fj(v)-36
b(erl\344uft,)435 b(v)-36 b(ergeb)36 b(en.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123 b(A)369 b(5.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
50226 54804 45 v 0 TeXcolorgray 24746 81281 a Fj(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(F)-239 b(A)717 b(5.1)g(-)h(2)f(Exp)60
b(onen)-60 b(tieller)715 b(Zusammenhang)h(-)h(O)-60 b(A)718
b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fj(2.)p 0 TeXcolorgray
651 w(Die)401 b(F)-108 b(unktion)399 b Fi(f)542 b Fj(b)36
b(esc)-36 b(hreibt)399 b(eine)h(exp)36 b(onen)-36 b(tielle)401
b(\304nderung)e(und)g(ist)h(durc)-36 b(h)398 b(zw)-36
b(ei)401 b(W)-108 b(er-)921 6792 y(tepaare)434 b(angegeb)36
b(en.)p 0 TeXcolorgray 0 TeXcolorgray 18028 11190 10762
45 v 18028 13182 45 1992 v 0.85 TeXcolorgray 18072 13182
4027 1992 v 0 TeXcolorgray 20049 12584 a(t)p 22098 13182
45 1992 v 2902 w(2)p 25422 13182 V 2674 w(4)p 28745 13182
V 18028 13226 10762 45 v 18028 15218 45 1992 v 0.85 TeXcolorgray
18072 15218 4027 1992 v 0 TeXcolorgray 19170 14621 a
Fi(f)142 b Fh(\()p Fi(t)p Fh(\))p 22098 15218 45 1992
v 1372 w Fj(400)p 25422 15218 V 1373 w(100)p 28745 15218
V 18028 15262 10762 45 v 921 20280 a(Bestimme)434 b(eine)f(F)-108
b(unktionsgleic)-36 b(h)g(ung)433 b(v)-36 b(on)434 b
Fi(f)142 b Fj(.)921 24817 y Fi(f)g Fh(\()p Fi(t)p Fh(\))368
b(=)p 4566 24817 15749 34 v 1 0 0 TeXcolorrgb 921 27363
a Fi(f)142 b Fh(\()p Fi(t)p Fh(\))368 b(=)h(1)221 b(600)297
b Ff(\001)e Fh(0)p Fi(;)p Fh(5)10378 26881 y Fc(t)11208
27363 y Fj(o)36 b(der)433 b Fi(f)142 b Fh(\()p Fi(t)p
Fh(\))368 b(=)h(1)221 b(600)297 b Ff(\001)e Fi(e)22533
26881 y Fb(\000)p Fg(0)261 b(69)p Fb(\001)p Fc(t)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fd(F)-123
b(A)369 b(5.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 31170 54804 45 v -2331 36793 a Fk(F)-239
b(A)972 b(5.1)g(-)h(3)g(A)-60 b(usbreitung)970 b(eines)h(\326lteppic)
-60 b(hs)971 b(-)i(O)-60 b(A)973 b(-)g(Matura)-2385 39816
y(2015/16)718 b(-)f(Haupttermin)p 0 TeXcolorgray -741
43123 a Fj(3.)p 0 TeXcolorgray 651 w(Der)449 b(Fl\344c)-36
b(heninhalt)448 b(eines)g(\326lteppic)-36 b(hs)447 b(b)36
b(etr\344gt)449 b(momen)-36 b(tan)448 b(1,5)217 b(km)35997
42641 y Fg(2)36972 43123 y Fj(und)447 b(w)-36 b(\344c)g(hst)448
b(t\344g-)921 45115 y(lic)-36 b(h)434 b(um)f(5)217 b(\045.)921
49652 y(Gib)433 b(an,)h(nac)-36 b(h)433 b(wie)h(vielen)g(T)-108
b(agen)434 b(der)f(\326lteppic)-36 b(h)433 b(erstmals)h(gr\366\377er)g
(als)g(2)217 b(km)40513 49170 y Fg(2)41473 49652 y Fj(ist.)p
1 0 0 TeXcolorrgb 856 54190 a Fh(1)p Fi(;)p Fh(5)373
b Ff(\001)f Fh(1)p Fi(;)p Fh(05)5942 53708 y Fc(d)7044
54190 y Fh(=)560 b(2)i Ff(\))f Fi(d)g Fh(=)g(5)p Fi(;)p
Fh(896)221 b Fi(:)g(:)g(:)1111 b Ff(\))547 b Fj(Nac)-36
b(h)546 b(6)h(T)-108 b(agen)546 b(ist)h(der)f(\326lteppic)-36
b(h)545 b(erstmals)921 56182 y(gr\366\377er)434 b(als)g(2)217
b(km)9490 55699 y Fg(2)10017 56182 y Fj(.)921 60719 y(L\366sungssc)-36
b(hl\374ssel:)506 b(Ein)g(Punkt)f(f\374r)h(die)g(ric)-36
b(h)g(tige)505 b(L\366sung,)h(w)-36 b(ob)36 b(ei)507
b(die)f(Einheit)f(\022T)-108 b(age\020)921 62711 y(nic)-36
b(h)g(t)325 b(angef\374hrt)g(sein)g(m)-36 b(uss.)326
b(Die)h(A)-36 b(ufgab)36 b(e)325 b(ist)h(auc)-36 b(h)325
b(dann)g(als)h(ric)-36 b(h)g(tig)326 b(gel\366st)g(zu)f(w)-36
b(erten,)874 64703 y(w)g(enn)610 b(b)36 b(ei)611 b(k)-36
b(orrektem)611 b(Ansatz)g(das)g(Ergebnis)f(aufgrund)g(eines)h(Rec)-36
b(henfehlers)610 b(nic)-36 b(h)g(t)921 66695 y(ric)g(h)g(tig)433
b(ist.)i(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435
b Fh([)8 b(5)p Fi(;)p Fh(89;)656 b(6])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 43123 a Fe(___/1)p
1 0 0 TeXcolorrgb 48228 45115 a Fd(F)-123 b(A)369 b(5.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
70502 V 0 TeXcolorgray 24746 81281 a Fj(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fk(F)-239 b(A)881 b(5.1)f(-)i(4)f(Exp)60
b(onen)-60 b(tialfunktion)876 b(-)881 b(O)-60 b(A)882
b(-)f(Matura)g(2014/15)g(-)-2331 4622 y(K)-60 b(omp)60
b(ensationspr\374fung)p 0 TeXcolorgray -741 7929 a Fj(4.)p
0 TeXcolorgray 651 w(Die)596 b(nac)-36 b(hstehende)593
b(Abbildung)h(zeigt)h(den)g(Graphen)e(einer)i(Exp)36
b(onen)-36 b(tialfunktion)595 b Fi(f)921 9921 y Fj(mit)434
b Fi(f)142 b Fh(\()p Fi(x)p Fh(\))368 b(=)h Fi(a)8272
9439 y Fc(x)9290 9921 y Fj(mit)434 b Fi(a)369 b Ff(2)f
Fa(R)14940 9439 y Fg(+)15728 9921 y Ff(n)221 b(f)p Fh(1)p
Ff(g)q Fj(.)p 0 TeXcolorgray 0 TeXcolorgray 7666 44885
a
 currentpoint currentpoint translate 1.1844 1.1844 scale neg exch neg
exch translate
 7666 44885 a 7666 44885 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 240.14122 a add def
/d 0.0 a add neg def /h 248.10794 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7666 44885 a 19383 40791
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 134.29698 0.0 -105.84424 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 211.1193 0.0 -36.98865   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 134.29698  0 -105.84424  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -105.84424
 134.29698  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-36.98865  def /maxTickline 211.1193  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 211.1193
0.0 -36.98865   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 134.29698
0.0 -105.84424 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 211.1193  0 -36.98865  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -36.98865
 211.1193  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.84424  def /maxTickline 134.29698  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 211.1193
0.0 -36.98865   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 134.29698
0.0 -105.84424 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 18138 37926 a Fg(1)18138 34777
y(2)18138 31627 y(3)18138 28478 y(4)18138 25328 y(5)18138
22178 y(6)18138 19029 y(7)17406 44180 y Fb(\000)p Fg(1)22297
42136 y(1)2680 b(2)f(3)h(4)-16584 b Fb(\000)p Fg(1)-4351
b Fb(\000)p Fg(2)f Fb(\000)p Fg(3)19383 40791 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 19383
40791 a 19383 40791 a
tx@Dict begin  { 134.29698 211.1193 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 19383 40791 a 19383 40791 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 19383
40791 a 19040 41077 a Fj(x)19383 40791 y
tx@Dict begin  PutEnd  end
 19383 40791
a 19383 40791 a
tx@Dict begin  PutEnd  end
 19383 40791 a 19383 40791 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 19383 40791
a 19383 40791 a
tx@Dict begin  { 0.0 0.0 pop 134.29698 211.1193 exch pop } PutCoor
PutBegin  end
 19383 40791 a 19383 40791 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 19383 40791
a 19040 40948 a Fj(y)19383 40791 y
tx@Dict begin  PutEnd  end
 19383 40791 a 19383
40791 a
tx@Dict begin  PutEnd  end
 19383 40791 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.72 def /x1 4.720000000000003
def /dx x1 x sub 199 div def /F@pstplot (0.5^(x))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
19383 40791 a
tx@Dict begin  { -67.71767 177.54527 } PutCoor PutBegin  end
 19383 40791 a -172 x Fc(f)19383 40791 y
tx@Dict begin  PutEnd  end

19383 40791 a 34249 44885 a
currentpoint initclip moveto
 34249 44885 a 7666 44885
a
 currentpoint currentpoint translate 1 1.1844 div 1 1.1844 div scale
neg exch neg exch translate
 7666 44885 a 921 48870 a Fj(Bestimme)434 b(den)f(P)-36
b(arameter)433 b Fi(a)p Fj(.)921 53407 y Fi(a)369 b Fh(=)p
3418 53407 15749 34 v 1 0 0 TeXcolorrgb 921 57944 a Fi(a)g
Fh(=)f(0)p Fi(;)p Fh(5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fe(___/1)p 1 0 0 TeXcolorrgb
48228 9921 a Fd(F)-123 b(A)369 b(5.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 61678 54804 45
v 0 TeXcolorgray 24746 81281 a Fj(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fk(F)-239 b(A)652 b(5.1)f(-)i(5)f(Exp)60
b(onen)-60 b(tialfunktion)647 b(-)653 b(O)-60 b(A)652
b(-)g(Matura)g(NT)g(1)g(16/17)p 0 TeXcolorgray -741 4907
a Fj(5.)p 0 TeXcolorgray 651 w(V)-108 b(on)433 b(einer)g(Exp)36
b(onen)-36 b(tialfunktion)435 b Fi(f)575 b Fj(sind)433
b(die)h(folgenden)g(F)-108 b(unktionsw)-36 b(erte)433
b(b)36 b(ekann)-36 b(t:)921 7452 y Fi(f)142 b Fh(\(0\))369
b(=)f(12)435 b Fj(und)d Fi(f)142 b Fh(\(4\))369 b(=)g(192)921
9998 y Fj(Gib)433 b(eine)h(F)-108 b(unktionsgleic)-36
b(h)g(ung)432 b(der)h(Exp)36 b(onen)-36 b(tialfunktion)435
b Fi(f)575 b Fj(an!)921 14535 y Fi(f)142 b Fh(\()p Fi(x)p
Fh(\))369 b(=)p 5269 14535 9449 34 v 1 0 0 TeXcolorrgb
921 17080 a Fi(f)142 b Fh(\()p Fi(x)p Fh(\))369 b(=)f
Fi(c)295 b Ff(\001)g Fi(a)7406 16598 y Fc(x)8360 17080
y Ff(\))369 b Fi(f)142 b Fh(\(0\))369 b(=)g Fi(c)g Fh(=)f(12)921
19626 y Fi(f)142 b Fh(\(4\))369 b(=)f(12)296 b Ff(\001)f
Fi(a)8058 19144 y Fg(4)8953 19626 y Fh(=)369 b(192)h
Ff(\))f Fi(a)g Fh(=)f(2)921 22171 y Fi(f)142 b Fh(\()p
Fi(x)p Fh(\))369 b(=)f(12)296 b Ff(\001)f Fh(2)8114 21689
y Fc(x)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4907 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6899
a Fd(F)-123 b(A)369 b(5.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 25978 54804 45 v 0 TeXcolorgray
24746 81281 a Fj(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

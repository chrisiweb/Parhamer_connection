%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.2/FA 6.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:58:36 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathItalic8-Regular LMRoman8-Regular LMMathSymbols10-Regular
%%+ LMRoman10-Regular LMMathSymbols8-Regular LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 6.2/FA 6.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0958
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A1106511131B431B653CFE8F8B34E3E1AE0C55990E
ECE2D624A0A5EEF705D04543B9227C00B2A126039CDFCC5990A998A720CBA4E2
3C0F133241F0E6E3D34F7B561A25F70102C8091D18161CB9421DE1DD7BC5514E
AE84B30567998B58154582EA2506E7798657A420F4AA92EAC4D3723EED99E362
A2A871DB74BE5191EEEF65F8BE2A2F2E22335F3DFC68DFB13B165AD780E4370A
A99FEDD2330B2881D87A4BBC6A705A9C77B525CA3AA837BF555A0E2E8EA5ECD9
D3FA5353E6703EDD25BDD44BE1EB6F65FBB89E23E9B06A948F465C9358E0CF2D
E67FE22B3327093E1BBFCA3FB515D755943368A9554B60AA09E892F91A4B3291
F217BDDA669AFF1099E3D76D55067C591328E391BA09D5ED615803F7ADC6CEA9
1AB7B45CA7AF8DB57AA513F74A56C76043E1C72403824E78613C8972A98F61A8
E5480CFBD7570E6AB5CC9A07D4E0EFCE364DD002263F70481C50894B3D6961D4
60C98A8F7C911B616DE897CF569C85F742828DBD3A572B5C21DFF08EA7AC1089
3AC143488EB42B699CE80A7F069577F96C329B88C108B4506841CABE171747E2
11861348BFA5BE91BF9F3ADCCF2DAAAD831000E27307D6CB2AA6ECF5F929653C
602D86269470B08D8961C227C63DB2AFF09B42ACBF716407E9F63873237D1523
47D3AA2C575D1C08BDB27DE9E8127325C87E3842D1ED01722E83609867A0981B
A264E7B739C4088A25F551F578189A3285E4CA4E1A158E799D50610BA45F2003
568AF44E2EE4DF2B734FD72535354246F33B2E2F7F4DFCEAC871D46DF7D165C4
D4E6B00BF84FBE6428597412531988959E07A697AF52D0FD3F35390405D6A9D1
6C8682CED47347AB01B45966A9F6C2FDA093CC4A456136B6AD2D6927C2A726CE
25814E308764700D33398DD39A557284FA21FD70B383BE803AE6795B23AF56AC
D69EA28D257E97A14969834F6E51837EB3D497E1CCA4518DD1E541D723ECBF80
FF403565B4A26C6C283C747B980AD33877533510D63350C839F044ED6AF03CA4
415C2A0B4BF9699DF59CCD03CD7819748F082C19E6E344040E889BBCE8993476
59CDD152A758D6237E52C61F0A261708AAF92541E013073FCB815A2B83CF7E2E
382D89E1EC21A9429823F083D8DD40C333ED47C5AA350CDC69EB0AFCE824D627
5ABBA8F5B93733B9276E3605EC5910846946C8345AC821A323AC91474BA2A050
881F0C1E9BD75AF56BBDE24109B2B136AD0292B7A2C9F352DFF83B4D7FCB6B79
C54E4F1776B782CB43B6DA16D96BEDA842C9B8078D60E5FA106E3980191831FD
9E69AC60D04886D1063742D723EB1C06B948E8EFC76E45EF546CAE548825A0BC
A6BF93B0B1373AF3E1F7CC78C953A0B826E47018F8212C5594C697B288FABEDE
DDBA75880CD30B27909CC8C16F3FD2AD2679E81E9FCDDFA1761BD627D86E69BD
F08C1356CE7692CCDAC7BA8D326A49A911B39B929202AA5CBAE5285DE1C82D60
6AB2BCD7AB93A8795AA46773CFDEA403776E84F07033488B1949EE5029CE15CD
E30FA4BFECD54BFAE64D32EC3EB4B6A2A82F34478E7C279D48E87709983E300E
E9A5BF4E928004BD90C2FCDFB6DD8955D2C126F05A3C85F4400A796D49A47AF2
111C9A3A61A03EA906842C86B5147254A6EB06C3E874B88A2E48E01ECB58DF2E
318B41923E8A047553D96C8FA33E8CAD54981D7C999B88588E3BDEA834A3B0F6
4592C48CA7454EF08A25B6B242E36DAAF1DE150D2674F3524586F868EDD3BF6D
DE186C3374415F03766156316B868A7050D043B09368E43CEB4EB4ACAB454C6C
B74F0F7489A75015AF81B45F690AFD82865D0FE2D708B720FF3B89E7705F6DB7
EF310F0B6B8330BA5D30D28DA13B69823F9A3135F0169D61166267A3EFD62BB6
F264877D19B483EA64D88B56E6F9CEAEE190D7EC4C28CAC7D5575EA28302C72D
9D030405FC314AB8A292D5A2A81BF6562ECE8758E4BBF595E20149B25835D197
91F80570C8EFD34FDA3CA9C2B6D2FEC2441EB99B4C0C0FE29E6DD239D2F234D7
1DABD43C463BD0ABDD83226C25C32643FDA7E4F9F5DA3AFE742657095C9B3870
4024072C5FE89BE9DCCE26E345425DD14EE2C844A0E1323D2B6F0AC89ED75A8D
8990BEC28E06EE909DE8C5040FE630E1FAFDB99DFF29348A9B5C65E2A540432B
97CD7F69F767A67AF3BAE02C93A09D7F187558084D9CD408EF7FDCE23F465AFC
AA8EAFCB7108ED99ECCD9E762A76C4BAE4535B1FE482078025ACBFE0C0E5F2D2
42B83CCC05D2B4BC05B37305EFDDA2FA6A9FD41793A8303B6BBCBA18708C378F
40448FBEB9FECFEFFFADBDE676D98DD6204B3EAD5002C6D5EA808A251E388C77
C8B304AA01866255C1E881E934B61AB96148B87232D14B426649F338383587CB
170B7863151331708AF0D806823923CEA6F87A9E3425F1BE0F813F4243646787
89109A668E707C52E55E98E4A7AF1258A15ED5674C3AAAC4CAA8344432F60E73
214C5747F1FC0A88D9E1C5058E00713382AA80998DACF6FE7A3A2BD3882B5E36
0EF28E5C0CDE4E87985E91FAD6A3E7B3FE9D14C666419F860F97BA62BABC6894
FEB63084F15636CBBD065BD7A4D212994D643758B7B210BC4E6CD5B400D9440D
B8DC20E0F188386EC80B61711193776DE26EAC8E77E8B903C4CFD1C479CE5155
6C68D92071044ABD2430C1E030FDFA52A4A0DD9F3ED61F667B7B89A1D5251D27
0D0D2D01BB54631BD38C0D833343743003D9EBF5AF03297DDB123CAC7E399A66
7E12B07C65D79172DF1A3287C670279D1E95EEF85AB528E8CD2DA99E33C7EF0E
E9DF6009694A325DFD34412EFEAF168510323ECA1B860FE5351091FDD988F5D4
C05348B811342DD3A2B352DF149C55124C58E6471FC04A203EBD502D6C566B04
255A8BF135BD8E491D8F710C5F31260C5AD761E6DF3CF6C89AE480296EE177A9
7F5C507FFEA387ABCE01207306D7AD5AC315BC0EC15C46AA5D766B378FE86691
BB1283618D234ECFE8B485C5E930791A3E891A8271EECC4DB35810B23AEF6DB4
38D587D25A5AF03BA09CDFA6EBDEFBCA00A47E7C02DFE0D55DC081E8B58F2F29
E19F7D715AD567F556BF41E97668D569B2BA9FD4066AD925D51BAF05CC288C04
3319013BDBCEFA2098218C07205E981A506B03CA176F95FDF54DE5000FE41975
5DFBFF352909153E0907916879971DC0051A2269832861BD92CEC36AB20C5E6E
64364A9C461FF4BE14B575EF22D9D95BCDD716FB3F438C9530616D0DEEAEDD11
F65FE0F14DA30840B1D86DF4B2EC81023B5B9E354CFE201E2EF62A92899AA25C
2C92C8E401705B8508609A854BD22825312CDCE404591317688C32F9B8529C4F
814BA48B668D770904DAA9D0457C936D03766AD21B459DCC42B0C7BDA6BE7764
CAC582CEADC77DF4CDC435ECAE7B83423198A06BEF117AFA0B65E7DAC732D312
E483011A4F305AB1796BF596B272296259860AAF6F3B69EDA60B24ADF87EE81D
DAF1D41C0BD76D72760121B440843592F2BAAEDBB71DE28DD3EEB9149D553348
2274E270C57B4AD820551087BC152E862DDB4DDF119054CE9A50E7275CA52549
2743920C7ADAF7DE0CE5609F7B98B8D14FB6A253E70949380036EC60531395A4
A137C08089C62EE37BC8DD315CBC30EC5BB8EDDF6CE870E720C0683176F4D1CD
45E138CA96F307F59BC1243B45A3FE34796151C7E7ED6B6D8101E4C2A02D9C67
7A9B55FF7D93709C445B0CE59CFD89084011AED6E918BA1FC040AF07320A99E6
98CB7816B2327C6BBFCDF43ADB4E5D6BC038873B796B8CB995B03EE89D82185B
3B4E77769007C7BA48453861B13CC921709810ED004944D4B18526D4B875E133
211F81404A39FDB273B64ED685BB2F05E6532BBC80581DF7CF480ADF9E9D8BBE
A3ECFA3ED46C2DBA5CB6DFC297D100AF9BC17825D62847A988EAFC7B4DADA774
C587C3B8E6D1DCB67230EFF3F206ECA7D35A79B6D617CE42B9AE2ACFFB374247
724A3901FD546D465B4A49473D1C57114767FEC20D2DBA71C87061EE8BF523D5
911BAEF8644BB6FA6C7B5DB4598D76106609CC1A998112FF0FAAE498FADBF801
CDAB652D689B9FCB7E7A236C3C4CB242AAD7879608163AB9DDFE5A66C0F323F5
1056DD1DA6B2C68F9DDEBDA11AC1679CA6DA215459EFC7892F6C2DAFB51AB738
6DEC1D15D3C2451F797F2A1A7ED95F5B6A74A5E584EEA50F61F4C7048DA734AB
912E238315325F66DDE461BC6B773D779AD17D7DD9AB8A730C0E99E1D5E76ECE
D3A2597A37B05787E55B878800CB1EECA4A9775F8C77E6CB71AD1D4058AC61FB
3F135787095ACA9E34C45BAED9D91FF93DA9079C9F9779BA57A01541463FEF58
020562A57F0E4F5DB21414CCBF5D498496818C244467171449C73BABBAB53F48
9B1A4C389D7D9636805CF8C33334E27B52300EFDB995D5AB49D36116364F6521
EB538AE28E6235227D5C3994BF5242FE6B6B341FE71E4A756B1388139A898B65
1D7DE734CA552AB2211E6DBAD7D7931CE6C467F9CB65F03796FCBB73EB127855
B8849431DA4E0D14DE737964EB1ED2D1F096CFEA5DDAC81A713A916CA810ED3F
E5D258EF6B5CC5A19A5DA11B6C2A35FAC32CECC0BFFEDE9638C09DB8EABA360A
BADCD32C16E9F72E3113602B620286C412BFC78C427E0E6DC88B862819A7C24A
9FB824626E8D726C0C76B875FF4244C04B839577AB8678D40C3B58D8A7F65D9B
A49E0247C276ACE445A0B5C75D5B24CDB8B7144642812FC3C2B9A4ABC9F2ED78
6DC4D0E02F1AEFAA8A7B2B96971E35DE1AEB648E3B6999DB5E1A4CB1BF6A6F67
F27976C6BC9545728F3AA84172836F7EFB4DEE53DA4922C8661BE65734E1DB11
B3A1099A46ADFC9FD09C33F30F499CF5DBE572B6B835BE930D8CC9EC66930E55
33FF3A7328F0675312EF6A87BA10BBECF72DE976D89E57B8BF3BF048E96E8E32
871388884D5B37EDC8DEF2EACD9C3985BA9ACAC69EE5D2B8317ACFCCA3C746EA
F40469E99A48A7862A1246B6D07795F57E55509CD57489F07188ADA174330F95
C106AEC2A3B9AF517D87492DC2BB9C184A5F3F918524D3C90C00B7F86166C6E9
5B3DE3978FD5D3F56F40252C78267CBA7931BA7412D4FE34E8A9E00422545CFE
3285AFED58A706C189700C3978534525117199999513478855D76CD3E8D71EC0
DC503AB5D1B3339108E2D9247B4DC4100981BF33DAB0ACAA5638FA670BD5B45F
45C3630465995F1C87E0C180641E8C2B608D98A273ABF96524385F038727C294
D6FC7B8B746C4B214A485F9CE57642F42A0329F133771B40D48806F82B4B5AA6
5A7A9B6E99FED552E9BE63B20E55FBCA0669FE3E69AA008701D70A2658568969
AD6C74018DA28222985FAED736C8F465913F95551A81FCD76B774DAE57D20990
9FD9AB2095A39C74183F41E46F2C56BCB59CE6AEF7E9165EC3597CAD54D82350
F8D5FE7D4AB6D0AF0BC5CEFAC0C7D54876D3FD2B0A21E719D5677DB0E64C7650
DF6FDF0DDD86F8E6A28A5AA2A6206FBC132F4ABF5BB7758DA3D0B650D84B73B8
B78639682E6E875505C918F3CFDE4A8B71B870C2E63B9A4B595AD05835A542C8
389853B39E329DDD1D3AFC618D378D9885B376EEEF01CD882063EAF645995189
69ED2DC26C28A403BB382BA2C02E9A974713FDC805C5670C1293418EBC442052
6E888C0E9E815A6B3AE059838DB2EEF382D5AD4843D4BEC1CCD81D28BEDE22CD
263C60160BEC9FA8BABB065DBD98809CACF688526394295FC76C248C5EC3CC2F
C1CC894DC95D118F3C68E14311D9358916E9209FB94994F0194F830D02D1662E
B023ECFD1BFF24001929DEE1D2CE4A40EC3C0E5C70EF98246C20BDD70EF02E74
5355563A309B022629167664E7533AEEF54C6A6DEC9D5D6697D339087BF78F14
B0E819D643B659F742EAF18494A25701DD67593CC09B3350E40689A5BA6F5AAB
F3E7053A607FE6FC14F3EFFD282311E889CCFA7519DBB19F459397C866467405
422CB32B2039907F8C5F84E3E7781B5BA3229551B19BAA854EDE7AF289C24BD5
D031C9064826109E42D0FAF6CDE696534896406A8A5234A8AC19BFD534685C8C
E317225BEED285D6C70FB97F26245ACE938625651576117EACDA8787FF9BACD7
8AD9237044496B37B69DCB6CFE89601B616B41EB7272665D7F17B86B4C6E891B
D82B3A36DA8CB5E590F9BBDE89001BB2008E75C6376B7EC8556845CF97062549
BF859A34ECDE8AF4FDE5A511B85B1B6F95770B364CF19DEA920A1DED65833D93
BE483587132E7BF195905404945D7ED18ADD64A0A7AA4FEFC07B7FE9E74C2345
BB233B419D49C3606B11B1FA48EBFFF998B96AB3E3E182E29B819FD861E52B04
E00AA38E91B7DCFD58902B637141C9C3FA28B55B1B5A21BDBE59FED023089B73
198CB56F38BACF5044D989BCAEC86A0353435F46538BA5C30C185DDB06A284AA
5034CA2A83C2FC0636E1560409FD893C6DF3CF208C7CA7B20F2DE590445F1090
7355E926ADFA5757E73CF123CCEE639F27F803A242DE01C8F3F2353809B5F210
4922CC21BD921230787CABD0FB7DA4F518B81FADA81814332B622EB79AA78809
31DA86BBFAFA13291C28312DDCB7FFB35DC549F7B956661666684C07055FE2A3
B6D81785B7918E76E4093FC6A0A62B66FF1976403B8C17B6DB619D0DF87E531E
1D635CECB8442177468B4A69E269481F40D0047EBB22E02DFCB88273A36FA3EB
C622FD1E0B5232FF2FF82D304AE5BF50A969796BF3E807C04A3B0CBDA9FF1FCA
4AFB161F425FC7831B3FF7FF114C014E1DA800226FFB00764778CC4F1BED103F
EFA843D27589F03F5D0F465DF6F9816F083CD0FF0CCEED915E6100F9EBBC5DCF
39D8E6BB0700B3017DCB69BA78C33913BE7DD4FAEE6B6C9F4F00E480335E0F5A
D843442009A73861FA00291890482B8DE3E3117875E5A6C4CA5333D961386F3C
0BEB0B0E360A3343249D4A6D0E961977A50542DEBFE49BE6CC438036AED93D9A
FE101A217D1E42CF50466C0470B236BCB74B3C640C7DE47E890B58304BA8A338
C4F7B3F6AF0D13A64F1E02E9AC1FF7E519181A551912A89D32739DF1D3BF7CD7
DF18EBF95DA0112A1675F9914CE626DA6431204C74CBB662283EA2CB6ECE059A
110CC3AD0D6F2A44A2252140A842EFA89495E73A9F1990A0DB13C2E33342D40A
FEB24E186AC1179916487A929DEFCF0103834714C42B1C0B53164C8FE4959082
927DF994271B1F39BB29575F0D72916AF4B384432878AB3B0BFD0E16918EC392
455628EA68EA1B38C5B4D2895EAC9E9F4FF04AB84C2CA21C7A5FA4262DD95327
F58B3D69370631951C63F5EDAD91D89AD5E9C9A6A5AE154E1F17C2EABF78FAE5
07B995A825FEB23D3ECDCE85D69479BFA4CAEC5CBAAF436A135BAE31A8ED3AF8
897BD192084FAC15BB899892BB6304635E20370B0561BEA735EF7C35FD568C4B
2107E8BDE24BE9215FA7CF327CD80AA9F968A0CE637E8EDBD893B6F0E532C511
018DED92CC65DA00725B74747D0632CAE05390CBEA80544BC06B8736786B0689
5FDEA2277BD88388082E54DEA0654438F36357E82DD0F8301ADCE8052818FF28
0C63B8E6429A8646C167002FBE2E18338B691B62C6CE8209C642C88F642E2741
24FAB713E1B051631DEBE79B3715AD941042EFD4976ACCE231CD7D327BDC7B8D
4D86246B3091906127EA8E50EFCA3430DACF7293E98DCC4745AC6826FD1CC653
E3EE6D197AAF341EA20D44F2E50F091E00982F4FD83A14682E0D743142FDD178
21A60CED6694F025FED299C4C7F8B077C2DACBD27AF24E4C7549D9368741A553
97560E0BA139DA8B2F7BA1E454EF28C6D432330FEE56133F3C323F865B4DBFA0
C00767CE1BC19F391E08E575B2EE78E04C5FEBDB6ACCDC4C0EC8DD28775C5765
A293D8832550A07BD9D1C2DF33C45955EBF49DAC8DDF42FDAC98A43C0D3C8593
F2ABB41DC86E8ACD2DA44D0874FD56D3D5903D85F35CBF76BC8541CA163F1109
8AF3B81D2328BD648CCDA44DB60E8C41E47009E12819445BE9240D8EEFCB10CA
128E8B9F92DF36A224FEF55B06A6036ADD54CDC87F9D25876644DF362D3AF00A
C044A759C633970514118193C5E291E38B2A0D3FE03EE61C774D39E1F2A3D374
AB25B33CD03B4F4FE00DF185FA99BA638F1E44ADCD03F326227FAD7BF9DA2CAF
2834CBF79C38818226FE2A652AC7CAE0A878CFFA8010B75004203E9C274FC1F0
F59D7A86D619FE049F1EF8EDC3A3B494F3809BC20E03E4DA37DA7FABD00C05E0
F90542E9E515490079815C2000B856C14AC12D7507825E52A8B525D25B086A6B
5B8D3FB6D387FB176FE602513D158B30253C166B90C47B6B6ED24B0288F8BAF1
BECC8AA5CA60411CC615B9778A9B58A168969D018429B0F5007CEC5F16F1CEED
FE0241704A66122055DBC4CB00A7D5CEC13C10254E3B107E483D79EF92C34680
5F0DFBCD40404DBD9689044B71F710D0D5A3B77A6480E9769B063BECEDFB1567
439AF718D3B7B02416DF5DECABA7AB1C8AC33B498F8F495661C0069515C10E97
9589DE9C7D24D09FF6795A31930D91424572A24EFC245742B43E9FECA493F99C
E2D3DFF0982549271B429927D4775BEB5A14532F6AB4CF487FC29101739FC070
DCCA88D2BC7DEA6E25390030995DBF48DBC939DB010332BE7D2DB9778C30E113
247D7E76DFCF5AA362A030DDC31B704A2596B7ABEAA0C996C889BB23ACC9A259
D07B46B7DBBB6ED76DBCB40B586B24DF294C5D3EF840B9639C3177236314060A
5FA72E2B963EE9FDB766C58156994546EF67CC08CCB25B2BADFD44E109B59257
E41EABC03561CD9EC4FB8F6A0B379E53B1A29D111EACE33D9328EC9490AD5319
28E5ABD548869F227966EC96004C09C4D8C0BAF1DA74D22380A2C23ABC137FD5
22CEEC5B7CA9EF0C6F0BA768889CB155EBDD1341D52F0F72C30814752536B8DD
F2DC4B8D59F781ED48E700F5B35BA0CEC0EE50D579764CCF53973F324BAD8D64
3A7067F8E9D019B06C0C4E9BF6B5FA6D56A8B182BA094D5712E7D033481A5282
EE3AC238288C127BBEA082DE33FA87A83DAB9E23355376876ED88EC52D2695B9
5E8EFC1512ACF21BD0C3009748707212177616E6342427FAA29D9E9E1F896403
9D50573E082B155D45427E2A28377D1336FBD8CE3FC5906D4C198542B093900F
05F22DD65388E04D1B5B2FA350FD45DAFCD55BBDBEEC2355065FAFFEE86C8BA7
2ED4E314959E1D924CD89FF87DFBC5B77ED158C0EF082D34ECD9A61F9C139DC7
15445893B54729A788C762262751C1BCF167E4972D6BC1206AE144FDA6C03120
F6891A4FFAB01D890C67186CCA0576C1BC1A6D881BB06CD0E30160BF5BE257FD
4D5D2122AF19FB65F1E49241CA0D3B9F13001FDC0C2D9D95F7E82180B767328B
FC532CCF2606894B1DB45566C1D73A8143C8A24C4A470432BD989259DD7C624F
888EB2B5E2F8CD8F21B4A6E6FCABA356F58CAE86A8521C469BC954433942F700
3150A9821273E36330CD1B2298E015F6E5DD084E68FAE757E5EEE77811171634
F3DBCF314E86EEAC33E4D2C1D1824EF8B65209F7072556258DEBEFA61BA82047
BD2C432A5BA403904CA67C81E39292986A66BD545CCECC92324DC9B2B6C25A3B
EF830C50FA1DB1CAB70F0E305D7EDE7EF63F825A8C956EC890745D7159FCDBB1
0B6459273EFD03520F2483A9E6CB88CAA1BF17BBFA4E9D98849E6AB20FAEFA93
C3F0A53F6FBD653E7D055B889245BB6661679F7EF91967AF1CD513EBBF5AC757
1B0778C0E9D25358DA06B20DDF35F2A3A70B6575ECD3E4BB1C50447C558FD565
E8C78B0395D65376D14803D2E085E8303E9224C0D69CB394A8CA7559428D533D
B0EDA642A7BCB14E5F48EEE15DFFDA25034EB3C187404949A5E8404AC5DEA3C6
C51A1185D758C54FD23C5E53B07C2AD411091E49BEE1C0BE45EEF98E4F5CEB28
766C0B807B8FF7984CAA443B734D02A5817427BA627CF503E3905AED7ED59060
159FBFF46B3FAD1F3C41698192EDAEA808C1FCEEB0A101C52F7A0C74ECD9FB64
89B257D34D4ABC4F0690497FB68AAA09D69C0A5C836D34EF4DEC34F23A4282E1
448187B3AA4BB85F21CC74B2620156612EB4B29F4EE156ABEEC43401B8749FDB
7016505A8DF7F307E7A7E8E64841163AB3E15E57DA6C3F579DAA7490C29C5399
BDB16EEA2A7AA8206F1D35179922D2AAAB4C6AD5613E10A96FF8E3C4E2908771
E9512B667AC78A09A780813B1FF02AA967B12AAFAA0D0C8E8E2B3D65611110CF
0C3FA0AEF50E284BCE7CD5B04CF4A623C63A895FE66E14641959655F235BD056
D70D673B0AB1442AFF5FA6C191F7A83C324AF0629A269967FCF2E125D61FB011
C8BF9A79F4DF0F83D532C9C58C9FD6B238019816463C0206918EE55F76AB2428
202F6F0283147D8580979FE5FCB204DC95F10D6E5571D4EF13C72BEE059687FE
5220B6547F10E5C09F9E499346B2E18160F93032B68AEE779AE3F1257DF466F5
91816455778845CEA03BAB6258E19FA15B2BF1F6366EBA112970A09374918082
AD45111EE91BAEBEDD15FB65955F91EC0F7F3CD2B3900A8A6A0B93FD79ED6511
0B0037C9B5E514E1796A7397A871DD11FA1D78E5F78DF4E9B0FAFA718CFAB15A
AFA8A423ED3D482352EE710D6E40DFFD4601D33B8FB983726F9ECA5C9BABFA49
E8217131544D9B05B011A4B7E520FD5EBEEF83D696C0FA27B86904477A22C143
E33AC9ADA2547CBDB6BCC20BBBB289486F6C7E238E8688360D69D0102F4ACA89
7F0502C545F92404F6B14D7B8CBBDBE878E238A3AD7D54A0F8D49FFBBEEA2A08
DC847219AAC361613A028572D68AB9D20F3ED4130D20D9FB207AE07866B1F040
B42849BB161F8C5058DA20F5A8916E10220FC1CEA674D56637B407679812A089
0AB08B8109CE1979941291722A40DC3E30BC962B5BE5C7E73160E3B4D8EB78C1
E449853FA9B6279286CBAE43102EFDC0047C07E76889E53BCA17839A5CCED84E
6A9B242B04ACEBD27260F059F014BB18B7E22EB13132018A82A296397CD60BC2
308C96B3EA6E6312DBD85CA66FEEB463995EF7066EF0AFB220FE1DE3D68D19BF
27F59CB0616C73AC6D0D113E9D9180496E17E6BF815D1915037B194077E47659
BD7E30F41CE95DDA4520DF80DB1BF5E73B33A29B7B447820B08DFDE19F6C79EA
1D7CE4898094BCA694C00877E6BC65EC82F51AD91DC2AF85CBA7D0FCFEE888CC
7FFDEFCBD5737257127CD61F45D03D5D37D781421DC5CCBC42782E8F4F5E0A7B
8AEA94605EF6283222A4FE45E411657A64143555666A2208E321283534F91CFE
4A015CD40CE908BE2CE1A8AB288547D95025D9B717498EFC65F8B5D38042D86D
3A13364AE7040D28E2027A98BF9148F4B1118179748A738D936A5E8888BFE284
66DAF11DCE29A6443914C795735A1051D41BEA93204E6AD3AADA6F2415A8BCD5
C987B48772A7267C0C4BBA87AA3EC7166170B80B7355E80259DCEA92931996E6
DEFAD9D535B58A149AA49FE620EF68B2828877C03C1100D8EBF3CECA4AADE5DC
BB3F0CFEA33B47B8070D31E6FC60F8C7961BA96362CA771E3DB9D9CC569787E2
7C22515F25EEDE33457201AD3F671582D81027849DA765FFDCAAD86026AE6BF3
12CDF423D6EDA94304529FDB1612F916D7D98F158635436B1C389EF06779C47B
B81FAE3E5EE64C8D835CDEA64084E2039F6F6899353F01330D556456193A0D75
817DCB44F89EC0FF5E47E290147C5AB8EBC973CD8D3946E50D5357E57CD8F55E
BB48416F609C27A9147FA843862574D48B8B64014BF2E07BB169CBFADDC4BB1B
1552A81FBFBCDB24C77A8070FEE81393DA14560C1643CDFA74C575BAA216CEE3
C740AF7A9E51EAD2D9A4C9C6B49ECBA54DD1C476AEB59C263FCD9B4E9B7F733F
BBAE7E723C2668B7E3840DA5AD2D14B7347FF6E9BE216CB5DE5D367EE01C8086
04D05EFB47D7496882273FB569F8254D556F1DB811384DE04F270786A2193A1B
F363855450A17C8992099875EB2CE7AFCDBF56D49CE921742A12D11F083A6DF8
ED299BAB6D6C6C66A3B79E7942082A69DFA7F1756D39C28D5D0740F24FD10F3A
4FCE7A438E9129F4DB2867A9FC6F3B6DA454FA2E881F5CBA918F299A849F5ED0
06AA52A23114FD64CC97D47608E12E15E4A069800228BAE3E6D4040A1DDF8236
EC3DC87A4D3FB3D3EA12EE51A708C6EA3EE345D56115A54F2879BB03C350A0B6
C5ECDAD7BAA8CECDD5828099CBCFDB6C84A32807C0BC46CFA13B270AB88AB0C0
CAAF101CDED67042D64FF3624B53DB291BB2F6754DB8740045CCE64066306B98
AED8E8A2C89898F7DFE1270002CCC2256A7CECA22D415F21FA095C1BDD305F55
78C6CE6A05C0467D1430C53F2889ED97298432B5A73B570C132016D6CA98017C
7C118D8C67F71A4BC3C8794BD9AEA4B576738EB12DA190F7B750529BEE076434
721453B1D09E03086E183FB95F360FED53F1A1E6E7CE34EEA78A805E836B7C7D
1B6B6FE2F8CE38A96655B073C606EEAFF3AEAE7FD7AF2F2D88EDF90670519FC2
E69ED8A26C4F5E82D0B4A6833BACE8D08AE01E5697A89A6045A9733F052F90D3
82DA5AB07F54D85456C05632743157DFEF503A6556A189F6D7F922B8596693FD
D519864792B6483D0FF570A4249E88B67A19036F9CA8F73D54F2F5ECFBF0A9DD
E4BECA5D5ADBA455ED9DA3119948D4B63E570AAD474E824F8D506A27BEB27957
72DE4E899B0F39A7F5DA3741DF300A7B3E985855FE521816004F7653175F8AEF
4CDD29B3B4B551C48CF2F739CB2EC7AC3F669435FC21E9360AB4E5ECB4966369
BA85B6E7733A5C7123CD2458E4AE93A553152A94A0A0DABC97B4B2A944138C54
13BC58AFC66BCF6F7023FD439B1BA5F0B2ED99160E3E703B12824870A8538449
34D84309AABCA1A51F760827A54148CC6BFED98F0D54D93AB3AE38D3F24C63EF
D772D2A2EB88636AF0A06511DF6B55284A8CEB6B6648EFA4D998D3466AF5A508
3378153907622D73A70D1D819B9A15CBBBCE712D285882C14E68234B605493EF
2D2F1DA1B476DB58E164D88B56E6F9CEAE61FBB850C398377A8B3928067ABBD9
E82CCD3229B5836092A7444313C171B4C8A24E323AA0A83115E8AED878484FAD
3448F4BBFCD65BB6D5FDC0057DB44F8D19FFC86749D98797B1FAF915635D2C24
B429285A06EBEA61BB134055B25332C4F2AFCFE7E9079E42B7F676EBD85E5F21
FA095C1BDD305F5578C9505F320357DB771BD7A674D75FB486A911840172E78F
59D045FA7B95DE5A47A7CAEF9406DA16A1BD6B4FCCC8FC10D16B133A11F9E4BB
05C5BAE54E80438FFB1C6E2B8C05F645DF1A4A5582FE6AFB6816FB7B2DAA62C6
7C4ECF995CCFF49B3E7509D2D26DB780F725B6914E2C564672E8C5260BEAD0CD
51DC60F28B475E87C219B4C2FEE727075F55E9E9D5120CC8C8F981E145ADFA91
0C9F0621C7F9D662FC2E59673DEF563AECCABF724C09CEEB58C7D40DC8451E14
281069DEFC52198F984DB16C7147B59CB3B5D9C27C58AA432F300714BED0094A
83839F08E09EE4A883D850F4F7E5F3A3B3D2F64D8C9A780CE75C1ECD592B6D36
34A820A6E376B9FE4D21FE10DE7B57D146722F7176C9524D7CA2AB7B9C639CD9
CC802AEDFADED50FE3F9EEC52118FECA4C326D9D8B30A01DDE65747AFF5C086E
992C7DACD8026D7F4C5AC1E5D796C0E5A79C676B4B990A4F3425EC73D566E48A
1FBB6F45F6DA631D79D9C859CC14E18E553B4297FB8FEF43EC9F59F293550722
992150081CA418774AB4938EE4BB45C8C12B5802AB99AD5FF3756A44F596F7FD
B278CFE05F885E3AC77CDF51FB9044CCE1EB5FC3CB80149DE54B2FE9459AF2DD
2C4D0D4869F16F458083B608409F1BC136BE8BE912F59CFB986EE6CA0251C4D9
0C0B022CCF3A2E4C3054A2471523B26B280866A0E6E912344837868A257173ED
0D30EDC11F314BA787EC6CB0DF0957587158729F6B5245C3571CB507A23245F4
0EB62410686BAD6E6AD0598415CC62AA0205D937E15529BFC43EA631B1A410AE
FEEB515FA9A7C820277639390ACBCB6F9C5C70E555DFA1D8EF22E2B28D8B0AE5
00E89D1C1CB5ED9EA6FEED8611EE83825A2A9991EF96425FFD14913CF80C1C63
381CAE11715FD3D761EE09569655370A0BFF65D2BDBE1C8FB45642B3C44576BC
EB864D481F345ECF4FD64EA16D630FDE1803414DE9BE77149F7CDDEFDF6AD4BC
9BF80F3188A55927B45F29D909F8B129941C49A1B9D9D18DFB3515FCECDBAF9F
ACE24367EB14A7D28DAC9A22E2DF55C42D244D9DB91D6E6B88DB03CE499BED38
F0342867411C63FCBD0D77370A4BCE2FCAD37FC498AD7D881491C1D06444915B
1304253442FA852F66E1E2044AEE7A98C72AA0DF2D07B1BBC36AB67C7BB26093
7BC426C835D610D7A203D903D4E4325B1E6A133B6C9AC1E9461009C0A0788620
17B2A2A08B3B3A0DFD699A8218937CFC81E2FEDC87AB035DEBB99AEB25E3E987
34A0CA4A814D824EE4CA5383C6EB8A8DFBCD74B1477B93807D36B8C8B29B24B3
EDEBB7657C02275F76DC10DC0AF2EE31FB1205CA35E62925CC12F4C202CBEDCF
76159FC0311D52E6B44E5A78F827CB355F5B87128A0A15C6653CB85BF452ABBF
5E8E9D8CCF2FEF41557E9CCA690FA83F7A9EB23119348D2C82A64066B577F8F6
D7E6A9E866BAE054F5EE51C829C26F9B88AC10973B45C2101451A5903126FD80
BD493627782C24ED15049D5675B9DF64FDA4CED248E08BFD87A911D192320466
3C3F046ABD2F6E793C31EBF5C89965E329D5452E0E657E416C79757E89F4438F
542FFE4A3B59F2D2EA0E7BF7A02607DAE2B6EC8603B6D89B8AFF8A4EAD2E627D
4EBC5624AA024A24C791748AA7E65CB03DD1D1202394306BB9A57BCCAD899A31
07F56611D41953D3FFBD1A8EF976FD7CA0BBDB2797107FE76CCC335F6DDBADAA
9B42AB21C752AB036715EC18FD6FAC7D1476A879CE94608E6D0BB1E228828293
76BEC979A67E1B0B621CD8572B3C632679BDC1198838FAC38B735B4584A802F5
98762196BE613D29CB969639BF2C227E8BFB63807FC36AB88C6563434C79E8F1
47BDDB1DC607885E12FBFA7343990A15C15C99325A11DF1406AF1D0AE60BC293
9C038A308187A05325F8B5FCE988C624FF44D2ECD2CE5C88EE8FDB5E32E37CB9
0D4C37C4E6C970F7D4EA4D8333C5B27CAEB1C72DA686874739CF1FEE0F4E6D22
A4E99CF1D3366F83DE9901EBD10B9AF08E23DA4E74DFCE510F5077EF740D37A0
443AEFF3BBAE3404AF40A536242228AFA61AF0CD1E4CEDD4CC7DED2405EE4902
94E01303458F742E5D683C452A7AE3313B8D619B84DDD8CD3878A4B306950873
DF85B2785A6C7D106AB4A2CC33E43346938178BFB8E2B151536D652AD737D670
C54B521EED1D06828DCE13D4FA4FB3A57E0206D42D82D2022D0213D8AA16275D
53AA35E6A8FB9144E9162A946DFAAD95EE0B346EBBB899F1F5DFD26B75173C5D
37047E511DC980EBD803E01C355049385CC5CF9AD095E0BD9530D515129F59FC
510A6ED783279B6E43EB001FA13E44683DC6CCED04122D1FFF56BDFBEE506B23
D781375EB5AA3EEA89CEA29065AA87E8BE999E9807118332CDDC0D88E7CC1CA9
CD67F3BF4F3FC520E5B01FF5642C36D1F3B5AA4B353F54F6AFB0691A9E1679DA
8CBEC2E6CF74853B93B427A89089E953E1E2F1E2F0E67644190D8CF1B2A6E1B9
07827B56A62319E861FE32CE5C9001F9E7A0149021BE5A65DB754E14D890F42F
4F808AD7C69616952258C0FE93CD557B6E7ACB7D30AB8C41117D733A0D3E8802
20549437755CAA6C23D8D69B1FD424D2D1E8ED86030B6F0F045A27CDFAEFA66D
28BA1BC726EC1E2ACD0EB3E40BBEFD56F4A2EB659F0F1BAF0ACBBF11C6D4E691
AA899C9E6F9ABE2E2757402F92E51ECE4ABFBFA159B07ED5C93D976CCAD20691
B072DD44D135FA5C64B046AA8835817140B76DC22B5453AE890CB05C2A504B01
4DCE8D922CA473ADFBFF85285CFE4E96A8AC848788B84B2F90CD6EE7454F4458
D3738EA8234A1AC50B04A6F211107A589D0482F55826FF8BFA258DEB155D8367
0C2ED2B0CA2E1A287BED8E4C77A4F372CA460F99E254F7B6EBEE687699E1E4C2
5F9E9815805AF829D5869F2C70B0233569EF120DFC5F5FBCBB02272B60FFDF4B
8A791B5B54E5E9D98BD5B3A86E9F87CCFF71287C18CC525EC8D73AF17F67AE52
BC83112F812F4BF69B1C7A53E2783D1DFF32E3C4E6EFA07A8F5881ADEDEB2110
9414C1615E41C6952F8ADF3C605E13DE7DD72384082A6ABBC6F62F9D368D0F93
C4E2551F186869FFC3FC67719A505F093E0BE8952AA32CA53FD08E10E725B024
01C79FF0F48D1832E838472A8F1A94A91FFBFA9650E2366C1ED10FF2C16F57EE
901070A024D69DD1CE22ADF76891CF36EE5A6C9F0FE755DDA7EECB0F140E4105
609AA46E89996BF4EBB7842B8F58CDB75221EB582E80AB15FA42F2F264CE7FEE
D86A019485EF31E400E8AE68BF76B742AFC3A23E150839A9654E8B6B79FB46B5
E91169316CD9FEE8F22111CC5C1BDD1347412F127B16C5DAC0FDCDECABE30FE2
A2A9956CCC05F24BF94F4BC94AB36C480DCD7DE406D3A4C99EB089F9E064B2CA
76FA3E2412CE4D62FDA00BCF5B6712462AB6BC2F9FB53FA032C364269A0A1824
B829CD76E3AC5D069E9CED19515891BC35FDAF30EA27983A25D956F3F545D5FC
78AE839694FA0C776B5F6027EA3FD56E6B640D8A3743852744802EBDA2ACE6A6
AD26BCB0A0AB1A26A0049604CCC83A5A5C2AEB53ADE69B38794E048CE0C6DC07
949849C1E9E99EE91E40D571A0BDCF87581D59EF8B0F11669B511006CFBDE94E
7B47ECE15B865346D956FA91D2C2028FD143489CD426AF9CD9C35372E0A6B90A
6A848CEE1E28304302F961F6E6BED4A1655EDC31C235D20B206326C7E0BEE889
F497760138814249051AAADBDEE4C99F4FF669AC78CF95085911926F07D965CA
C05C5F5C13676E097AC92C3A5247CD38F0C8DFC61D9996A8FBF914209AE12B6B
8C7BF88EBC67BFD892E35E6940E94893E1CDFD279481CEFE588718EB6A3E1BF7
6F90C67FEA9477EC6BF8A93F68DFA327E34407616C2C41C30F9B7541C1661638
A2BD808C934A1B9F74470788F36169EA8DE53ACD733E71F19D1CA78EEE157D5A
0DE5A382E28EA02B0E9A74D78EE3E65789AE56D1CE8688B06958AE42959508D3
964B28625E2E016C84519A99CE6249086BF0D05198511F0973D0434D98BD1A04
089AD4970E0A07BE54A5E4B05868E4C233E1F2FD5D8AA1C04A5791BB6BDD9272
05AC6F653C62AF261EF4A7EA2C35DF553EFC250E8A85AE4AD7FBFE8BD6F7A838
C9D73E1D603EA4C05DD800E7BBA4205A0AA4EC699EBEE147D4F691A1AF27BAE3
D16CFA4D5E4A384094A1D84A98A21BD69CF349E8EFA062A7B7477E51D901EE47
4FC853D848A2D0B08FDF4CBA037734487E460AEC38B6DB8E5ECD39B041B779F3
67828E708A2BD166624AD73F69F3F5F6C2812CF0E7435FB6B4E5EF5BB1497D94
BB49A9C1F21654FE00E2C7A3F5B59887D16863B83114FE35C478412CC5FA5FB0
C77A36B017488852EF469C84F748A9EFE0ED190CEE2CB41FFA73FA7961F09286
F9807B3D2BE4FBCF5ED06FB972CFE275C8A56075D0FC06EFC8355757AD774C74
E18986F877031B32534CC056B012F92C03E370E662130DB03E7476CD96BC9895
F11260A5FC00BC5B713D9D03F12F9C1188D623E83EC18C1D71113A7924E56DE4
D18CDC352314CAEBF065F610B00B54701104434961BF1742DEDF34244D43CB96
CBDDBE208411EAB1C2B245CD622A4B9456FC899830D6050CC3237FFEBCFEAE07
A0CDFC782280B8436B909CB12D82ADEEF693F02438CCC1953B78E7D9D431A1B5
A04A73AF4A83C7E51F1E425A81A99B057CAEF9BC507A5A478C881FE42DCC2650
37C9484F2DA2C862E76CA9B05B08E505CE68508A81F7004CD007346B1137D827
B8ED54055A47CF82AD76C8CBBE7EFE039C4A09A99A94CD2E053E13F733367529
4A2D8B4286405448978C8CCC9C82E47EAC49C2A1B3A16EB8C8C284BC57D5D8CC
AD59FF0F8875E1216EDD93EEE19CFEF51C7D1B50DE72F8F3F77D0C967D71EE18
87971A931A8061F0FF2E05F6F670713347A56F01444FC06E9A174D07968A3715
AE13B1A66033FB688FF4C0EC3D4CF4D734347F11DCA2502FBCBF32161D54A462
A9BEBCE021F787310E4C81D9D739DF8846BC06C74B654BFE051B64063463250A
F33CF8BE6C1401E6DCA859DF2A9DD030FF6E7BB8A18398362708B216FE31541F
890984CFE06F15A66F309160510A697ADCD7DEC4051E32E218E2F936E8F0D393
BFEA3EC43BB2F7D546E743428E0E1BF2D5BC4E92438FF3E7C3316D757FCA1552
7DD8E4B2AEDD41AD60AD3EC1CF6171A7B816D26066E42EE1FE5CD11424ED4A8A
C97B3EB2FF024BFD60C0AD7FDEDB23C805F4D221C5D74FA1FBFB1C177AED502F
9F054D68CB91DE62BE28E4E4FF707C55BB3148051B2B6F2E8AD884FC8A216607
B2B0A8CDA0B452409C8C765E4F4CC0F2544D7E70647612A19A316267E1B0C145
2F196D8B206ED266C2A41B3263FAFC82D1B9423D48BACAE809E3CA5CF0DF52B1
60C2AA9575819DDF023FF06A5F3B1A51AE4850C6FDD1B611314A73CB5954C6D6
39CEB6F8A0A1F4D9414F1CA61231C364998F74B32F2DC2604346B36438B94D02
F565EECD4F7CC1656BE602CAAF7D89959658835F6DD1A7BC38E3EB110DEBD28B
CCD7B42E245579D29D18D7BCEC04B0F2738103535100A33E0287C97F11395F6A
3645115EBA407C46279202ADA22E553AE845A642E68EA07F57366ADAA0D15B93
F98AC45F88F2B6BC9EE296BC2A997FD00228C5F2BD5DAE445BDEEAA29EDD521E
E7CB773099965E3A46364F1FF39738B7989ADBB52C85213C47B58E81FABF4A64
5A32EE600398C75A2002D0745E3DF1AA95E6360D2FDCC96B7EE4C45A6B15321A
1CE74E8AD362477D48E5D1B1CA9524457069D854689ADC65E63FDAF77B1EB40C
8A664FE68BFEDB98E14E3073ABF39EF1EDE502E2F1348B2F930C2F482F17D107
B1AA4C38913353EE24F9D80CBAAB090E28DB9EEF737BEFC12B124C4C2A3BD24A
F20469F00D07C1F9D7EAF5240D4819A790B5E44E85362688B2E94778ABE6AA5F
CEE836815E3CE8DBE85737CE7ECD67C7585B48E7BE5BA28E0800FDDD34CD5483
40A2C52691DBB1DCD46CE023ECB2EC59BC46FC2DC56C7CED5D95AA3D731B3F8F
99E356DEFD795817B6A8C776A23DFF284A9FCB3E8B92F3A278C78F89BC0440F5
934ABBD4AE34AC857443E951A1453A91554D08F54200A21BEAEE003B83CC9296
83EA64F9EDB37B8AADD3CBB1CE596A0A4D093163E531B3D50F2385CCFBFC1F39
30B708E9E73D9E9F69FC7147D6F8064813D0727804DB7396934E724F616B672B
D092DCC56A26D96EFFCDA7ADBF086EA835F99AE0AE421D0B583CE26971EAC0A8
C926EBE5C0826541C257638711E28C333FDA2B5F6A9E36799C7822398C82C22A
635BAB5D9FB38175CE9EBBA7E661295C0543E196D6D9D86C8123494D46E10DEE
858F939864271F8A4AA5F52CE012C4C1A4FAF3FF351D8072A8F43379700C9BD7
B0D3D9FAD8EEBE2FACCD61CECF0BA1B040060683D31D470A2BDB2BD1DB0A9294
8B44FF0152F0908FF72CAD0A1F0F7CDAAAD606EAAE2D09D6226E1E0A19297DE4
1CDE8EB6DDF2C224AC861CF386131DF989D48DC30502ADEAB1F81C845BFDC493
E74DD9ACE86BE4FE3F10309BFC2FE0899D0345493FEF05707FD5EEB5EC9C052A
335FF052FF97437720F494B458EDA416E35C2DB9D38984B0FD5BFE5E7C3C484C
8BF1DDC29F8910F37ADF0AF427578EF9810CB3D5EF9F79858D0F2B353C392C7D
7402ED32B853E32D9E7581D407EBE3A42FB15333B8666884BF45CF673CF8BF91
B12440D8F2AD05DC5B65B3AF6284BB8B164996CD000671173E48D4A90A7DB543
7D587ED894CDC4232622FAE7826559F9F46816869F143B00CBBEBDC80CF54DEA
F9A49511CF9C420EFB87892896A9F0F86C1F5B268B5A457337B398BF8FB77835
4A318BFED40576795E386DE7641D749D414A075CDF9721E5D4F6BAE8A4509577
9A9395FC202C800D06288F653BD895C2A091469329DEEF91EEB3C51C3B43EBDD
8AF83AE2F256EB21595E795B727FD7B5FED0B59CCD16F6BD2B87F56AFBC998A8
BFF455DBD4F8C7D91BE31A9B0EDEF076697EB452E0EAC3A4FD3C81DA1D6A5738
64DE894D351DC9D01826DADD42190E3888A4028A10AC20FFCFBF769E7F818AE1
D15D179C6878C6140A9752D961D1C1DAFAA58902B37CC42A21075CF135115B26
5D29E175BE9CF7808CABC7FEA76781F808EA32F31C594043D13A9377EBEFC620
6D372675CF43235722B50C788AEAC19F99F67B642948FE960344AAAC1F7663DD
34540F086AF71E0D3A0A32CFC097B05F9D1A31335AB08AA7B6990CBBFC82B01D
FBAD61CA085F20D6B94A635D98DA5988CA64C7B23ECA9D8D0CC53B87480BE0B4
AC889BF3E435F00586B99411A3A722843F1A44A23EFE0B0D3DD7AFC2C98C77A2
300BA60BCACC5047787F91CC3655B6DA15445268C2466B955B7BD95958BCF316
0C571071AF1A376808EED272D50566ABF7F1A94171E466E55C00DA09E33D4874
B43A3D1C2B921BEDB0EF200E16BA13E4A36F92147E38CD271718777E398AFB6A
FEB5DF1C3829DB22E031FDD6972E4DA17B1262F5B0BF43D388303594D86D0E22
F471D25E9BA24A781104F865E4E5BB34943E6DF76635A1B659F0A3E1CA50CF8E
295B01081F4D57A96ACC106F28739E58DD1A60223E13D1C991365CA70A0D1962
CCB2B76DE66D9EB4D7E73A947D70C281BE0FEA97CD73D6B46F26A6F902E15045
5C2BF562F4E7189E5EA4330CD4CA8DAA5B4C60B84F2A3355CA6B6DDDFF3E2CA9
81E3997BBFB6AB9F323ABE9EC0E9A7E0F3CC73CA87BDB0B6A42C1EE8660F4B7F
8D213AA8781687C3ADB937A1204C7C8EEB056168763D6FA3B48D9DA9E00C46AF
CC5862BB022412385A712D3C3C39D9F3F80C4BBABC80FD0D336708DE65310344
4DADA7708D2F142D78CD96C11B52FE223AC12C65643F2111724CC514B73AB04C
62D7D9A776FA5F33663FD018453552F72D24B691BFB11FD8825508898C76B18D
905F46B1A9B88D268E0304C711E4234E64772DE4898B673E369DCC237D1F65B0
229EDF724FD421459468D0C638A7492E83A083DA3A2E4922C8661BE65734E51E
15E043F4F21C48216AEEE4D3129A11C35712E83FC96009CDCB3EA42BD085E420
7CEE2433DDA7997EFD027924F56050DA7A771704E7ABF549F9C94CAC84E69B5F
AE360666E84CA65742251A68AA056073E7F648EF4A6CAFA57689CF761B35C892
1BBD7105F16A19B2B056EE4A35B98646241A544FEC1CC944A6C6B36367518B62
12F051E87F00F43A273D7BD0EC942B864BDA2C386289EBD7CCB6319582D7B0F7
571F47A664A36F4D007BAA339BD77415169C63ECACF47FEB8ADC1D5A61292F0D
0805FE95653F0CDB7F14E2BB020E97F45700A1CC2DD0A8B7216F71B74689EB18
6742A76CD75A7B77E50467CC6991ECD1873495FA55B7F557FC45A135F15EBF29
1E8DC47906914B626265F32927BFC1EC7BBD8BF5F362AF968166F682F647469F
201AD8FA93118B0890528BA37B0071EC9611B0706592FB8E4ED24B21D8054DAF
E3DE85FBE876D8C50485E42864673014ED96902B67BCDC6AFEA2CDA4C5333235
9B83307FDA894861B8C01544C76C128632A537E9C871617FBF10527A7F3FDF0C
07D30FB6436D58753F6AE969F7261C1740E18DA71059DF2032E0E90CA3B41483
33D58CB90A3079A74811016479F5F626B957B2C3EB64249B729999021CF501D9
49616EA404E394EEDC23C359B1871BFAE35E69B8E8907D42512B36FB6BAE1F0D
FA65825FD819F9A35656E2DE2110E7129EC32B1D1632368D09ADB290C83F8AB3
24726265816EDB281A51FA7769A844237DE65FA5AB19FFFF218A30088E4D6C04
60017AF2194DDE2AD1674DFD80B01AEB01072C01E6C2086816D7D5B9B60134AA
F587EB2C33A4915F79A6CE02C0350F3C3908A0E207A098C7CA76DCF7AAE610F4
D7E477E158973A5287601239C3BADD2EE20443E015CFC5A97634E4948BA21372
30B008A73B07518B9EA8A3028D7DA9987B6DEB35528047255634DF0E134FBF59
212F1F589806F5A9586A7784F0D3B0D787379E79F168B55CBECA8C6249F07399
2189BCBEF6FFDFE5809F5CAF0198D289CC682D1857126F0DECEC19FD9E395EFF
24D00CF3A5D1CE79A6DF7C7ACA394002D50916A9D594172F0DFB72F655BB212D
B302D0F70FB5491F8D3F914401EEC50496ACEAC9698F755FF6DED3E1F1E0F91C
CE62B8FF34647199204558D5DAB65808A9585AD95B37C171146BAFEA8EB3E060
4276B7038C38D3F9E9A7377283A969228921A08CFCF61A7DB68EFF2752E76B15
CDF6F61663BBCD08482CFFAF66440EB36C86A62C941289581A9E290373205E4F
C8A04EB208E4A72120BC7D8CFF236E555C7EE78F50811647C789C19B892C26CB
81E231E7BDC0D3AE3616B670F709947E40893C2CF5209810E034D8B1CFEA855D
9B38704024072C5F68067921C9EA7FFBA1933188084FE0EE57486067470256FA
6C532B207CCF434312D5C14B6CE0DD7ED1509CDA965322A9C8186D2556B0AA00
9A80D7F08B82E42A1DF2C025E8303BEB2062D8B67B4A16533FA25FFA4F3241FE
1FD5E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4FFBA4FBC3FEE825B1DB
CE083E5DD35010B87C93AEFD7DD82547EBCDD317817EDCC17260B67A0AADD692
97E50DF64DB758F55B40E5044288AC240A0F3429366D85AD99E11ED25AF2C4EF
430D0FE08A80EF5D7844BCCF1820188253C073DDE16FF3B3FE9229687EEF317B
69DBC55E6DD283F7F8CC6ED95AE5AA6BFDA1A41707F0FE74F0A08276F6A8B35B
B11C3D30681A1387AD17551FFABB11F5F0538FFB152CE4B7759C944FF72ECE86
9A601FD898304C6EAEF48948F8C40DFB3072C19559C5264F0DA691A912C5C0DF
D009D7277C0D6FC28B5434D6FF1A1EEE3D5E439D7D226A0F26567FA183793198
838A246B0B1241F826AFB4EB72AA2529AD246F5B0F38584F0DC332272E1B4C15
DD4126C69EBDAFFDFAFF71918202A381C11A6B980EA13A63CBF32057709B6EDB
C2A3295139DD7FC4B9502E6F76C54332F4DDAF50016B0EF62DED9DB782FE943B
54FEC5B3FE170BCE1EE6302C0AC1C7CA421B81B6DDFEA56902F01A12B11D2D25
F3DD96B454547AA6E39E704842B17E1E8FF194903BFF8C8003F82A76F84AEC67
03D866CF9D143E354E326A308657D62DC3F52A76832779BDFDFB3E4885997183
AB13762B780529E8CDD832D3F608BE8FB158E7037A9CF8F0CC740618BA5DCDAD
4693F4E17363864CCF72A8D3143473218B6E51F82EBEF76BE7CC8B80947EB5D6
390FBF6E3F04EEF4DDAEF048BA3AE91E22D2F5A3F133B0F408D1293ACE84852A
F383D764C80B2B951CCD295D22EEE4AB04EE89A019EB6E90DD5E9973BAC93A9F
59AD162A17F6F69DBFBF14DE59470962F632C45DE55DA290C88BC92D0D26A7DE
DA6FE09F7DC39F9F2DE66A661CAEF24E17D7E788181EEDD08D432C97B7CF7BAF
9833CC815A558DB6348134BF9806C1EAEA5B4D34B72ECF1163B5B2424BBB2D32
079DD408226AEAA0C4DCB8DF16CC632865105A8D48D7DCB55736A34367346D29
6FCC736367B25F97A692036C4202EC88521D6E62E83DC08BAF1A3918C84A8497
13CB5B06AC030880FB09634014B15DEE92033B9DF9EDAB730AB0C48FBA7CEA51
619D84375B709B571AF122DA22C4CD306406B316B1705EB7C713DAF706A9D62D
BDCA5EB57C81832D2CC5364AB5A96EFAF642D81012B8FC3708B3E83D87F3A394
FC38E69967833C0F1DA32C12BC77E3A4F5DBD8BE9505E7F66AEAAE9552A4C5CC
B0BAA5F85DA68AAFC85A7FA1C19E2004530E8F74116B3C6D5085D8843F74732B
2B10DD809BBE098474196DB2B38CFB1D603AA8E1C41CE554F5DF4B3D207D0F73
5275BAFD82793406ADF40E556FD37186B2043C4609399F54E083D9B90DE640F2
20726A1036FD21AFD0E9DDAF783EBC83564C6215A12571A01D77C07385C9C279
80E709E4D642D169A454361708D679FE6C78EA43F8CBB8763319637257BFB4DD
B023FCD85CBC56C283CBC6B66733AFA4FE8480F8CC8AEBECDB6077A009A078C7
ECB146F7D048955B1E11897F38182A46C5045A537C3675044E5D07B6220F4A84
B86C577B8FE7ADDEE2A72866497FBBF49B8FDA5FF5956B763638EF74AC6C3DEF
AE7CD74C7C03634341123E5CA48A88EFC43D4ED87516E6663D35073AE07442D2
4BFDFDB7F0861867A3578589A939A0B9E63F74BBA9A961D56699A0F4E9D4902C
2219481F2E2E4718FCA2A1DAA2649DEB3C6FC578767BBE4F591737316A4F657D
BDF2BDCB627DDA562E789A1B31DEC7E8D9D51D81B8C07066303958931D2539A8
88B8FC65FD9DEFC68C0C2B37B06923F120D112FA6015408E16E0C392019E33F2
68CC072F36EF12310EEF733B4D4C76A47A1335CA1AD3C2B451361DC744F17FCF
77B4A2AED3A09112BC3006CAFC79DA3081477860FE63EAB46B72FFD337D62DEA
0EECDAC0ACC8C1B258E62C2A3CA886E10296CE26A4E176415F55FF32E4308FE2
2B3345C985E9FA2045FD193E6EF5F8491B730E6F3509F25B10F624B40537B708
1C1E40B3C8575496A6D367CED49BF5771315D874A1FE403E1350DB0D0080EDE2
E9D6FC5878BA9549D7FED9DA6DDF5C04C3BA5A7607F7FDB41707B035520A5E89
B6ABBB29858F65E937CDE31D67C847719779DE0B31BBF84FDC460E352F0263EC
E4B0148610E480FB16135362275F77498E75BBF597DB49E3BFE58972B9610646
26408FB040E45FBCAF055844FA94753018F93191DFA1BD9D550C218F9D26C916
5826EE6A780EE3206965DFFDCC9A06088B42CC4397B985A5FCC35A8891C300CC
F87A6C602AE0AA7A2CE2EEEB418C6A9318D430B2342B6DAB319A8CF2AA5D1D73
83A5B1EC4D9DDEBE62B7C45725E4B434B0330863D98AED36B5C144EF0ACF7D76
54C93F95B4638D0482BF77FE2206EF2D984CC099AE441600E6BF37693F7C1360
DD9CD94E6519C830E0BF310C364C44C6C465F7AB7CFEDCEDA086BB18DA478C11
A86C1A517F86084715C61EDD51EEADDB58B2FC946C1FBA359A4D7570D44B7CB6
5CAF3E9D8F4CE122A1C6DD482667A245CF32AAA2C69653118BB467DEDED13A24
A0465B258048D63837F887A41EA0D1CF255793E8AB02E382BEA8AC0BAF795333
376EB4C186DD1A8504330449B41CF58C6C51F6431DE0F8FEB6C3091AFBCAEEC0
FB3F3E985A31AC55337127C6068B9C7924D464CA4A6B705608B07BEB0CE65A89
104F629D11F98732CB32C848B0DDE7CA310C126BA6C03120F6891A4FFEF45812
C20120B99667816FAFDD247E06D9789127D2DAE0BC29EC434966DA6D4D3C67A1
5C301775E083856AA0E5AED4675E23C6FE4AE3F3011EC66FFF95A2119FDE3563
519A769A3E2A9A0D38B5F36B8E258BBF95B3342044FBBE15423F9820CA59DDA6
D011F79F1CE933E9DF2D994B8EAC8139F7191C3F7EA7313C47DE3080C266E835
FE997BE45364178D9517F2EDA55BCDDB2DEB0DFF894AEC6A7E6AD841703B97E3
2A2B401C36C3D5871A99EE615767510AADA4364CC2035DB3CD08B107110DB251
6B5C50B6B6FC28EF779D415AE74D7ACE96E533B7E6F53E9E95C7949061F1368E
719E3A3D5C8CFAE64A32D28A8A1D866A83A5A7F11376C17F2D291EBE20C9AF3F
A216E2C2823903980506A9F523F673BA8CF49FF6291F377F3A4365034819F2B5
B36DE7C6B08E009BCA45E51E065295023AA722FE1023EE08F21F24F5F997EE3E
175058467FBE2A9136235E96D3BB3D354DE81FAAA893F6281F1192BFFEDBE544
A95183E9A00F23BF96E10A7BFFD11D7F08293CDEB56133514674CADA2F448FDC
8220328B69FDE97E4B9CDA8522B7225D3D794D13838F983E59CD3653590432B7
153FA1CDA5E14FEDA66F65082F8130733C5BB74352D824B69B2DCE0A86AD85B5
8F01E468C6101A90C235679195FB197996371F4CF2448E3DCCC54E890380CEA0
B0E0CD8A82DA2BA32CF7B87A38CA7A34B040A99FBA99942BD86CE4B46FF5C69B
ABCA7D44858235ACD6743E692C1E52E5FE51543C5E421C4499AF9C579DF99FC9
71F94007E7CC0F419FF367918CC59138A33BBEAA22040759E497CB8B614EB65B
BD446AAF7EFC978789D8CC8DAA5D38CA22400068E300ACF7D12907699F1D48D0
DAC8936854A0E9B5076ABC0D50D347213A224E22DB02C8D5F132FD92FEAF44BC
055CD62F6AE648CFA8EFCF7DCBDCEC9A4F89FBE2E3EEFC89D35E1BB8081CC7E1
EB73071EF8A3F471A0ACB273AB07771ED625E7ED1583593C0495E4317AA697E1
1C79357227F98F2EFEAA3E541280D6954E154DD58C65985BB11DBE0E749BBCAD
61107F6273E90DDA883A59F6C23F93B7DBC13E8E66984826F1301300FE37C74C
E40E67ABF31BA9169EB8426EDEFFB5554DEABB048EB8F3B9167BC058BC13013E
94942CDCF8E20DEC5CD4696759C8FEA9FBCEADA2194F7BCF7AAE569CEF156BEC
782E446570D13F4A900FE2081725F4AE20FF5356642D5BEFFB60D6958A286C4E
76A6B2EAEDFE2FDB17FF267D0F21C35CA7BB65EE479C6E657A4D88741DE590A6
70456AE85075EAEEF24B393985E8DA7768801D9A6515ED7BFAD3CABAFC6E4460
08A1130EF51E10642FA39210F0AEDEFB064A110153435F46538BA5C30C185DDB
06A284AA5034CA2D1E6ECBBAD8CFF61BB6F90617233EFBCECF61496F87910676
D665B3A7A743AFE1C00BB78188932A427A048A88816863AD649C32D00F99B504
DD1602FBCC202CC8046ED5039C4071105DFA58305BFB1B037F292A6462B17388
00D22F1E448AB79C6076606E7AEF2C066A84763C1C1DF7D48BBC51F48EDDBD56
20A24B553A27E1A9A23DF75D081EA69D0A80893F1EC158061307192A3AE53513
BB38EFA28DE86728F7959E81800355E907D237ACC2F38F995B344FDF33B43765
12D85F65AD30E430DCA7A2500174737903DE67E775663B85B3BEDF0AD31AD80E
660FA142797E0F0C40C15909BA02E8127B1D6467EEB75ED0F736708280E7BC03
A0FAFA64A7C5FED819BEB1AE11A99A3A3BEE760A8C80ABA4CB3A9D747ADE4A4F
284D44B152086F0572F5698F7181BF21218B041D9AE3BDEB71B521464A33F2C6
639264D1C6D285DBC57316578102AF0CB7E1F7C797A173F2027D99026A67EF8E
29FC3BF0D50903676D8E1BD7A0AE8DB070F2A5A010E2C83C9F984B292FE79EBA
374D182906892912A95F53EF54EFE72CD0D2BDB735D18B4103C1DBDCD8EACF5F
D9DD09F60C7E4966B4FAEB0406B72F8FF605BD06D035F47FDDAC9BB599A95E1F
1CFD654ADAF5DE725EBF118390DEDFCE3088529A5C2BFE6B271EFE69C67B6E0B
E4A88F49AE8CF599C651E27AF40D2CD8C640558938D5D49C9BB877A5B3EE0EBA
E8E5652378AA6CA84F0A02D1BD73080326A9D87C65D63C14BB2F49ED2D369DE7
A3DF53C98BCCFF71287C18CC525EC8D73AF17F67AE52BC8312D46E5F69142021
278E0FB68CB989156C629B35E02484932515AF6FA998C3B62EBE5757BC929450
BC2E73BADF75492CDD78107D316D6209C94F92C71EC1813C5802AB247E9FD612
C7762E866A6E4C83D0AD28B310F919FEC839F4D48736977F5B21F6961C8A9ACF
420A2198B63A84F9AFE1C032512E819FCC17EB00217E53265849B08CEE0ECA2F
070C601E09DA0B9690C4E3D619F391BD3640262FBE15DEED450E81E397D0ABD0
5A9CB3E2578BBEA51FA99398860E1C252C17EE576B7ED658ABFBECB5D564334A
F337B596E4F1204D41B660B370DFB93BDFF98E0E5BCE6581A2C28C351126B799
284434C917AE33E9AF45982A1EEA2073428015DDA641A03E80C230AEAC3EF501
8DA05556BFF71ECC844B2B718598F0825CDC9A5B8CA090E60C409D96FCFA4637
EE0055EB8288CCBF7908B9070C1A92470E3AD7F1CD944E91ADBD1EFF5559D842
8CC4ECC5936B87BF165B4CFF27B5C906F97AE33B637EB67C666E254938BF6A44
706AFC1CC092741BA7FE246E679A412BBBC86A1FE55F5369B12A058513319618
80A4C6134BF0DEF1E84FC08DEC39D507B7E8BD7F2A2E23B9E0A69C66FE8B0BAD
A48B501792B55E8CC09A5A11C905E144E1BE431BE1F8FFAB4D96EA6FA1191AAC
FDB4289F25716199280BDA8EA09720FC9CA0A2B4436176D22D3C35C0E140672C
64457592D39C7A8107FD5480473311DEFBA4B0D7F83316C44D1E16D9BCDDB5A5
F1568AFB0BAC8CBFD7693BB1BDB187E14BE585605DD868C8F663872B230E9214
94B129F80EA04EDD7D035AAC02B40590A2A6EE2542B885DDD5652727A4F60653
F01FE9A9C0B99A0C829B31A39E96DB3FB64509BC3602ADAE6AFBD7842578CC7D
5D745F0DE62C03875BCE62301671BD88D6C5CD551068CF445C5F8015B05CBAA1
A30C5F04DDB4B27952C3745B76EE5B168F047E5934BCAF347F0642DDA30F1997
653E0DDA51C90CB9815BE7A58BDC8946A9CDA9A7F497246EA4C44A12EF33A54D
2509CA0A317BB545FCF1D4CC29C8332F46F00388F75E64B201A2D13141E35806
D8F53E8F34D70DF5C324DEB5673D6CB3662821D78213984E0E178274FE7A79F9
B0504AF0257BA1BC6B9873CA3DB9470D0BA1CD8FC4B9BD1F06D97B7EA1CEDEEE
B5C5AF1850B13B12B2C93802BDE85EADD4486E9CF37BFFDF8A7934B8D57EB014
149114134BFB10D19CBEEB2C0198C2E5C4CC49AFC7B0C70952998ED497236870
0B3427548F4819096BEC31842985938ECD8B13983EBC20098C6212DFAE7196FD
027E1B0B5AC9076C21D22C18A1C53D4AEA7E5DAB328DBB9E22D50FAE58151D8A
FB0CF8CCF782D8C0BA511D7AD58318549DE1D49870665C70C5999096EB83F8A5
1F6E631BD6F97256B9BE051650E1E4574EC45C348078B14B671A77F708D49AA4
7248AC691CB094A39F0AC8535F07BA31C71CA5D158A149F937DCA88F72831C12
A52AAE64EB28B620A5EB34CC8E51496E7B4DEE382685556E5FC2A8BE210B248F
50EC72891126D9780E69A3574A9C02A9899C6028A670C70DD552255EC0CAB59A
DF83FBDCCAC7F1A0139D53F0D8541B4326BD640C03734A9E46C0D94B3911FFA4
35B4560DB12A7687A9A08F17D35E25BE199A9AB7892E680A23603F2267173C7A
C4623C7F03BCBCD562759C12B4BFEB798B4578ED8BC5CDD9EDB93D121B912F50
AB9ED5D4D7857FA703F287D4622AD681A42B64A8416AF31F516695CC2F5DA0FE
309C445221B68BFBF3F265B1D1A1146A91079B753C8F065C2AC369DA41DAB886
1155A0B48DB7048568AD276735866B719A2D1B7F5A905DDE997F3513AF3FCC9B
A70E3C949E543FFA059F2DBA1E5502CE2E76C38CA97A8F710C59A5EADA862B5F
DAB718C82A641F16AE17384099CF4881F2C3A5243B86FA28DD6A9FEE6F31C472
32FEDCB86170A59B0E9F4759F0C711956DA192F5A2C8F333939E6EA0183F8F91
E616AB868D010465A66482DC5DEAF638C0B24077D48312E0AA5F2A286950000E
B6FBFB97C19D32B2AB8F156B9389808AC0ADB175C4E5A961D1B8F3377ACBB0EF
69EEE350BB6AD4AE8343DA1C74EFA65E282B019B0E714C76571C12AF0A6796EB
5ACFD9AD1E3C6EB84EB2BC2D37CC885DBD8FCD82704F64753BB3CF6FC33FEC5D
AC77C9B5A9DBCD821321A1DDDC6B39335D49CB41EA95F667F313A617C4A1AE30
BAF8A6F0F131C6BE4553D32A63DAC1B073442BE726641E31D59AB183D844B8D6
EC300C16E0C8D0AE5F71EF4FB9E7BC9FCE0C6F67CA83661FE8E8FD33169BAD40
D0A599D118553D0B29BB25924706B0BC0F896A006470C97F9C400CA7E0309B56
75B9DF64FDA4CED248E08BFD87A911D192320788745F607EB0FA3DBD17AABFB9
93B6F16D1280A97B56BF8ACCF7CE0312B2308A759EEC300B70B63AFB8C4821B1
6E3D48880242AE015219D93CD0DF5C4238F1AB7CBAD5433FC02DE3BC899DF7D6
54DED315C5A5F45FEB5A50D3A2D734F85A871407CD4F2943CD900AC231610AB9
7CE84C875E3A7F03DC50F41C4657934151303A0733B9096644225B77A8816676
8942CF7E11D8AC59AE55F0F7D4C3C2B6113E9D68288A8A324AADAE80AAD15DD2
581B16FBF0125AC8AB538565E06699AE5D68759A52096B795BD1907A9CCDDC83
DC092E21BC6326AC2815B518D59BEE7028B1566B3BC263484034C1A9DF71C853
8B03CF18864872D75C7D6C23158B0D6A1B0568B966B0989355759EED5E0950AC
F6844AA44B2CEF792935B7A8034EDF79DDF23E19D35D09615E225407058E642B
3F3829CF75DF10623E28D33F7DB0985F0A3C2E9D379189360FED33DD9C550F90
762D297CCA604ED82233D226855EDF9248E9686ECE13AC47E2372B4552D66D52
4DB3B2A8D3BB4E949A7E34ECC523548E1BED287E8F47E7FE27ACC12DD93E9355
45A5C44777DDAEFA56B27091598B2DFB77BC1215DB379D2D7C52E02D7BA9CF50
549D78F86E725A9FB02147EA0D6820204B83A1EB775861645239EC6EC6B59F47
11CCAB675C523A5943DBAEE793729AF8302FB8B5DCFC2B425A22F0557CD84770
4791EB1068D0C523DBB843CAF6F89A84BFE9774C857619F0BD15B6667B8825B7
74B16E3FDBDCFE59CAF06FFB28C4872B301E0BA418DEB2EB2B182F6F39A57282
3382D6DBF390F03121A932BFA4FA7E74C937564EACCE768714D7430BE1825C90
D88DF40E735D43CEDCADB1E695F8A9643BF3C90F7319A5A6BBE2010293AA1DCF
6B0E4DCB2DE2BDBF0495BD0ED7DD0EA7E230A5E5217C0F69D4D0C42D85063F79
EE76B68F6328A5CEC2671AF05C752E2CD594D05B15173D5A85A7C58E045FAA89
302188343B56FC7A0D0093691EC0C33662266CF412C1E53844B2C7A227322C78
3EBDDCD10868090BCE31FACADA7CA565352D8CA24A715AD961790D552E9D7423
0909300879A114B70CB4073D6CE990C326331F40C5E995641004773886A04ADA
F6F101831BBC5693961949A26EEBAEED6EAC75FD753B150D76FAA4EB347390DD
04FEFD122FB0C75888011D844407E0410E9CCAE5F3D4BC39235C913DA5728233
82D6DBF36CB3F616C1BA4A733A1CF001E5CA99DED69C4AEDBDB4B53D6100E60B
615B9585EF842C71D2083934A40B91854656AFA604C3EA86261A7E9E44BF18D9
0E25AAD936AC26E84124A32FECA8780D5BE32246674D75298D3852A5BD01ADA8
596636DA27AB6AA16C68F33A4A4BDCAD32202C7F74C30A4646D8726DD73FFCCF
1521ED5270A2E632D36C86B97D084A83A5A0AA4B9C1ED79C2B21E65976588BA3
E06BE510E51FB6118C98378E3CF561E85A09301C445C3D82FD3B3916108E22E9
6B1037509E3E9FE6B541F50EC43B1EC3D5192B7356EA857377B3D7B08797CEB7
31BBC4B3B42213F643CE0B6A1BFD9F73D03BB92F68AF95AE5C97D39E01B5B135
1A73900B3BB317EA0748F857B32920AD49C74C492AA73BB5FAE7D15B05234DCE
CB7EB8E969E04C6ADF8BECC714D6B0A0FEE97A9602FB13B73FC759AC64F3CB8E
BF2CF91C3171D560F458D01AEC63D56E5B4A746ED483EFA8BB08918B940AAA40
8666E47542441899995DADD36C35F7BD089186F1FF628CA45558EEAAB08B10DC
15E662E4E766AE5F6AD0EDD34C970F562016121CF4F0EAA6DB6960BB3954800E
8D8B08A608A82DF18BBF5A5DBBFDDA61925C5D9B559C0599CAE7CA46C4AD9CD2
83C15A47C770E62C69C19154BAC9565A6F3FFF53DA0D621EFA2BF5BAE03C011F
1E08423D9BDA91822CB62920F47E613614306871E98DC86C588519E826B41714
EE357495BED9FF90B53243E2110E483CAB7EEE91DE0C1C53601C71E2428CAFD2
B60BCCFD7483AE5C59AD434F40ADEA24A92D1DF3C15F76876FC2E264D3718092
A80B169FF26E4ADE271453D091A144CA758059FA0277EA78B067E06E2460E901
8EA7C3F081F5A258A6C41B6250DD77B44844983D5FCE0C9013DAD8E90216B044
810A668F1D6928EDE9A6ADE133E2A1C17F6B89FAC0D0D8829B994386AF75787C
AD2B826ED390CE1B27492514C9727830A7C9339131CD95F0BE89FEB4B84CC0A3
F6BE1B968E6F1750A23794769FBBD47048FA041670EB4449713CF2EF210D0BF5
C5B1BC88A44B23A3F56EBCD82E0702C4A95FEE93D8A538C3F4996C3B6EBA31DD
3D93D53092B551E8B90414D804E305A8B0FBCED45414AD2285ABCE7D352FBDE6
EB1E0567518331F31E58AF3A560C46F0F9A0A0E9FA210EE2546E138F295C1CE0
B5E19A665BEA628E5C361F4CA0CB83DB537606AE4A6A86F7EECC222CA705C035
DC49777BDCB819BDC450EAD335A76FA16620BEDDCC866983248CB44C2A726BDE
D2B572EAF23F87D1B4E33DCD967D167E90C387ED774DDED4EE9AAA436D4C0912
11A8E1E7918E8BDD2F16BA01B598893203E4F6785CECEA846B5E158A5B6F9FD2
5120B0F2CD2815C6A4C22518A5D3953256B496C399EE82193B7E999C1166890D
DA4F038D2FFD274B156F0403AD453E8F2ECBAFDF2B1BBDC28F68D7EFFE80960F
E6C0814EAE725C7A145264FD0161DC0A8A36A48259DC08D6ECE0EF01BCD9EEC8
71AFD57FD3D52969A2A8E591C7AA3445D0F86AF773B960B1F5B7604942811221
0A5917CE236D356F1181E9D49336567AD434893E62251D029F7F2F3CAFC7DD73
6BB0C4879624730F604824C0AAF32BA00DCE31316E0BB0F62E4DA76D734FF6ED
D52609F10EAA7620CC6B87B5719981AF8EE6A59E83C9992DC1754A51C9E754A7
516E6BB43756CE0D57A1C69FF4C694C124E3C0345394D2ACA81933F3C9923BFB
F5BB5CF97E1E7BB6D8AFFDC6C6617184E0D81548587ECFFA5D34E22ACD62CD44
2E1A7B2A17E1A8397ADF199DD612E80A1EA4A6CB25527C3F19E049CEC6A9C8CE
7F95C5CC7BCA6E17C6908CAEE9EBAE83C8BCC428200B885502DA3DEC224FE358
188D5A7D07E0BA15DFBD8927716B9336AA66DF17FDD6FEB36E824D52128225F3
F0E667877FDDED97FD7C1EDA1C9BBEA743E6123D8E9654C4BD8C1C9171930459
E91854F2EB1677F2F0ECADC68A0E7A0DA8464989ECDDC123513339AD7F5B1913
67762C9AC11BED25FAA304C27F240463683D545AF4F350478DFD4D3AA7B4ABCF
77BBE6EB8C2AC0EE99D2B455C1D450690276340EC7B521A186EF4C3BE632EA20
8F7FA178D960E9E33FDBABDD3B6BE28940FF69B61DD4BE991B1ACE4CA8AEAB49
7B8F9C65D73F3FFCE7FEBAB2DEC7DDAEAF304C3B870F5318E6D29465D77E40D4
06B9BF3D12A818C82156F6AB82FEE5B75B28C28CC68D4E9D860B9E7A8BBCD5DD
4500F3AC9421A46A3FA3F642914B7B1B7B957DAB29FE40D3B386D4849695CE05
785139191ABC5296B946EB0B2C233E4952E6F77BDE9C58BE402E4EF51DC977E1
B0AEF16BA1CDD442655377D5D10BD9B115B9E25205FCFAA08B16B373CC56491C
6653BB43CD3F05AB2779CA49A2F7A214891B6AB8787A32F1BDFBB6BEA97E1C3C
CF983E10846A3504AD26B223E36E496B79786299011B8D97C63F10091E3DE7CE
0F478CFDFFA47EDA7629F591BEF65AB7C669E77DF9D53F1F8F77C8F92813EDDA
0AEE454E97D55BA3C2E93E324FF5545DCBA9900A6B7DB7E708F4AC5AB8E2BFAF
69022F0946870085A139D8E2C03BD4A9211D0E3DFFDD03CF83789A96FFE0ADE4
04858724F456C7C8D5B9028F0B4169D4B31ACF80E88BA573A3EEA5967FECEA18
9D10071266AD1DD542D24176531E493268E1D83986260B5FE6BD34358BC36481
229891A689138EAF2AA5798031098F31FFDCB3871C0AE8AA9CCF91301896620C
14E67BB969C07E70F4D2F57512F9A80EEC97C0D0CF3C868D8B99D098A3C59EB7
1026C1A23186427188F75841A7DC8A5B4C17351545AF67027DBE224BC7F3D1E3
70B133BFCE223E2B09828F9D06E86F9C9A281293C567F2F7E9677B8CE8A7BDD2
4FD09F3C3663B08FF80B64B30242AD7D07C2EF595CA7A9C6D6C6535F8B05DB53
11AB99C8CD779AF72DFE20D537A11AD0CBD56AC26DE3C37E35A3E12A0D2B1317
BFD1A3B56A48165C1548740C594B75C372DFC830CF269B2EDD20CF507B0E97FA
99A00B922DB5902D694C60E4B550CABBCA69BBD0A266D8D2597EA71C47292345
D8CA01B45A4D4735864B57AD35B81E72F25778A636D2440DAD7FEDC25674804B
0D0152486BAFE6FB49D18E6F983EB006896E661607A1E2E15E339BD45D1282CA
D9B372C2C58A59F6D32AF7060F79658E333B0A790DFBF9460ACBD932A4C517BA
7CC3308D39423587D6B8AC794EDDCEB45AB6F7D3EE55D0B80CF95FCB1A0AA4E3
B1A2892CC6123CA60D7A4605471604DFDF36C490D817379760C8E099B1E142FA
623F2AEB3EAF5DF22CA8F501D48F5F0C597490D562C58F2714174537EB8EB52C
F171B38D2554D7D036453C094191C3358ED7797BF31C32C94BA98B664DB2B3BD
4B1D61F9CEF524274E3A13237A95345BA5347E7F531BA4391CF835860CF42B3F
E39A158F615CD628C493A9C8C7C2D3DD7A9566A39B5CC68A0B19F7C25D6F1B66
7A6E45E7BEC2F485D4943847E2F1A37D01EA67AB27F3BB3428723489A947CEB8
9735647EE1598D1E5A31CE4EDF33202F1CA658C4C4D93EC53300769D4A0BC84D
7E92CB265DD617BC4BB08C431ED194316EAFF2DAC6130F0FA13B5874731B1F41
E7849CD535371AECC901435DEB7B13CB3C8AADE53E78073D5B75B147C1110C4E
93C5BDA9C91B6A99A39C74183F41E46FD001F18F335A16FDC59EA77F30FA7D56
593452F97F5BBA3BC8D29F93EEC94DF7E837943C20F856914E4454534C7E7239
C8828F4E28DC88C9DE8684493834D07358DFEF1CC00EA234510B0BF7483E7D9C
F0CE150448FD767097D6888AC7C4F384CDE70320CD2FC08FEF6DEECA5A1D95AF
484348731439DF85297A42F2E4B9763F801E1CC88046DD387F2AD6F218CA6312
E8CC35F66C29573CD2517B703277A314C52267FB443E016666FCBB6AE19FE0C5
66F33BC101CDAB911CD055AD0BBBFC6841B05349C1C41E1D8CECF878EF5B6F65
CC0B915893BC1D32360ECFB378E52AE8D95C3599FE10CBBC43508D7F3EACA745
12AADC8B44AD5A540401F3DCF16B1D80C372E07AEAB1F2D0C9BF193C2D9DA6A0
856B7E9182B528BE3B469FB9E8E857BBC975E32ABFAA7BBAF7B1A864EFF7AC94
B47A5FFB0B8D870C273A1E28FE6A5C31065B6AB902195BF98AC03A1EDB10DBBF
C3645B9D2C8F15106D4E12F2C1E203DE9A10FE359557D47DB686761C0D6BE010
02BBEA874809F90DE5E9A0C0B7EBB8DD6AB99C78625024A3FB22FDDBC0B96FB3
494E5C9707A847D929B6DF2DE2EFAFF4B7EDFEFC71C373D4576FD843A6292900
C43DFEFE1C83C6B71ECCD5D660DBCAE968FF940B02A1BCB942833443AE9D8EC3
A191DD612F67B1326DAACB3400180BC5214B9AA3DB91552B4F2B9552C806E17D
DE47817B0CE53B01B2E0273C858A259FCBB15A5367029A935166FC0077F56BC2
5B513C6805EC51AA2954E39CFB79707C114C9D3959C448DF54426A6522076293
01FB39D589612C93B39C6B008467AA712E0EBBB41150A20750FEF052F54CB558
E90432CB09DCCF5C28A5784B27BB2B714890E7015E87B6939505760C5C006A35
7F8835A2B2317D231DF0E98C299C09755191BD105DD6B6FC3019DD8903D55405
0DA6E6BC87125C062D5EE203294CCF893876EEB0E1C3F1A5DED86FD1C4825448
07F61A3CA17F087BB078131E6D1CED5309782997E7C338685A571B6EF1661A4D
A77BAA8262C7359E91F1DCF081AFFCABA93F3B54AA852053D2D223FF9A05D570
F0B42737C02FEE59DD8613BFE4360576E57BDA0E693624B8A681AE6612ABBA72
5FBB2FB44C1D6B1BDF514A2602E9847556E83A966C67E01F99014A172C7E4C06
02D13D5688169BC1F50C2CDA4FB9FCFBCAE97BB8D4A4745041FF61DECB1C4B4E
EE54748D721919159B7C9BA72E204517F9EDBFBFA7464A01EDE00597C3511390
2012E27D4B2B92539D21A34057D24D04F51483B49C0146FEC7311DB749AE5308
D9245FF55DFC5482F927FF99745A4D262C5BAAB57980BEA3513060A1BCDEB2FB
6FDEE878E238A3AD7D546132D68C388E8722486224F2895600C6CA0F31849F7F
77A297FC93346DDF2F38CE41EADF0B8AA0B26A36FDE90C5E3B4B43499A4FFBE6
5090E798207C7CAADB8EF7CF7158E474636E2C4D01997DC7CD244FB186B4E2D3
9F9B21E38EE42F6811977DEFFB4A885B4BB00C5A25CCB882B87548F956289764
96C4EA21D46A4F9A4FFF339023F858884F62FAD1725D9DE3BC922DF5EE987F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE51213AA578A8B93C301A831AE89
3172B7D2FF24745F8972DF419022F6B4D7310D075029554F2E31FD6843FB2454
1DC60BB39BB060ED6495AE98F6798010F76FBF63E31324B0F048C2F099F9085F
C2395C8F5A89348809EE005D206688D0DC863AE9D671BBAA034E8C32025F984E
69BF65497EDD146516938637D1DDF0F7255864D2C4C8834BE9EC41F48EE50AF6
797489236880A9CBC9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3137F136AE6
76E52680371D036D1801406A3A5009F8AB7638A1926BCA7B7C3F049E3E5B235D
984FA314E9F4555AA5F99198A39BE62AF7CFBAB277B8A66C8413AF546739AB46
30018BE647C048D9204778226D706C55505A06D4EF01D9FECD5C795DAA94A1AC
AB3F519B354DC0198F2957A103CB2F0D1F55AA122628853277D0FA20345C143E
B8F2A289EA703C24663DD7C2033892919E4E65630EE03681A62471A1C035932B
6545FA5D6F2A04D26899399FF91F4FB98EF6E228ADD22D093FF7C07247CE5236
EB13B7F1E8A15AB9B0819C35691AAC73AACADC529A2B37845CADC5D1C00E2592
7E8523A776A608FC51751104BB96EAF8314E2322C457EC61961583124324CC49
1AA909ADDCD2D038C3174BB48F0E846DF3CEFCE0977B68BBEF34E03365FDF696
30AF010FCC79FE5120FF3149465E612A7AEEC2446ACE741C2D86A04B426E4778
6802DE7FE88E84A77CD3AE846ECF2693940F20F5176D8D1B6DB30D6740156644
17F53C060AEC69C2987EB7A9DAB2125D445153AFD3F9CA5169205C09A3ABA72E
EED76A0453B2D8B3EF3EA7CD9E665C4CB2B3CDA28A0E667685A662BF38551B50
DF4F12EE6C72352170B4FAB1037FB0997B367483D2C8C0D44E6111CEE2EF4370
AC4CD5D68004F8B2012B1A0C9C20040175C45A00D690BD3B098CCE53DF66B332
030F66A40C5371D8A6507D35F092FA58B287777FEDAAE750B107CCC7C39AE7C2
72FB9E9857356C4ECEDFCAAE74590B3DD208A9754D04BE163B9E964F6762BDF2
BD0ACE10B99E156A67CAD0A3DEBA0D947D0AA1F03FCAAAFB247078719DB68E22
8E6AC9E51AF57A7B2F22749A53E22583C0AE5B3E7506A8D328199ECE23C1F65F
EB3C45554F66C8FBFC1F3930B708E9E73D9E9F69FC7147D6F806458851F3D994
762E9918C422D1763BE8FDED2C51369E0DEA4E821067927EC46753645F880BD1
38BCBADAAA94EF14407ACFF4FF975E04E30045D6FBA477667651D8C7368B0E9E
CE176300D5B23326DB319B1509B693779181F685FFAC786ABEAB809427D3C924
672E418A8F273187F24F9D209D78E0A2FD3FA71C28EDFC1577DA8EC167B3ABEA
718BF706ED33155383EF6400CDE98179A9C3D3166C39DCB64337D7A141529B10
FDAF9ECC35E387DF38E4B5DC807AD09ADAD44A2DBB0299AAB0CC3944DEB241F1
FD9A5FBEE5B1F2620B814FA2A9F442DAF6C658893DFBF0DB8BEA767880B7064D
05AE383EF05A00A57078A6C9289FBFAB908E868942C117CFA7CBFE350C693B23
476C3C77F0D21406751D2DE44887FC5DF0B7AB1BC8DCE622DC3FABD85B0F740A
5A8CCC2B509E9D70AA5F53D932C71EA76AC75EE6B68937852005B46123D78C29
6F0A156E288433A91BF564EF22B8245F102B7DFCE33759312AB0A03416D0DF55
1593B3392E75FD9BEA16B3FD22EBFB9D13E7D7EB59D752001FC8B8E3B1270C1B
EB1C4042BBA0D34125774CAC70D8FE9B08C9033A1E95F5F8A1717DBBA7AAA1EA
7285589A7279F88F053DF725F2FA768CD4958CD594AFF8C59F9CD25752F93232
509E529407836CC3924FBFBBD4E1840734A905BA1C18590A9C8CA124D1175381
EDFE59BD0E925B6C047D2DFF37B269FAFD98CB727609ABC99E6E71CC653620D0
AE2009A796D322E5D0E429760DB81F141C4A04D69475D7C8CEE1255CCB36DDAC
9B974D3E6419A08312787E2EC3CD4C3CD3A40DEB1D00F3908FEC9886FA4A595C
2D52F322CC455711C0147CB76F4723BB02264F53B538C9FB9AA802F3002A29CE
268FE9D75A7FC59B051C1E3CC2370D8619DB10C162B96E490193208D7CE9CF07
FB21F94E9C9CC7BD30C73E7F151C5C6505DECBAAD271193FADB03DB2896A8BB1
13136337F88C41B0FEEE9CDA294EA156D467EE3C32114DA6F3F143C053205C11
12B13FCB4FF9EB8BF565CFC6665360F71EF764906D8CFD014548F0B46C30A3AA
503426744E5DAB6A37F59EFE3DC5CB054BFFF87BC43B7676E7928DFFDB5EC610
6C4A16750AF5A4EB59A67192BCA9ED8B4D70ACD4EFFD55C4155D982C04D14C4C
65A43095F7F0BF8E2E5795683F27D76B524B55C3949FF9CB12318E20B680A50E
700B9A05B54469B3619B40515553DB3F71F0EA2621939E55E20F3BB6BE64443E
B7D0F6C3883D195661CA3A1BBAEA7BCB495AAC552BF394D17A439067508563C8
54365205930E9C220DE636E9F3805AD71A5A170D54DEDA2F6264B06F63B85DAE
DD018E78872329E0EEEC1189F5A43D6413657F892218927A24A122ADD6648E66
832FF08A61191F1C11943BB76D8067392C83790FA2AB3BBA5C4BD760F4CCC302
8052B8104183F60E95590CFBD7570E6AB5CC9A8C5FB1A7DCD7325C911804E9F3
3AC5E0DF808A05E048FB7194097660500901B25812F7A25307535F51BE342A53
8EBBBC8D37EFD7DDCB0F249FF96E2C1310B081DF4307E85352CB995B47A47124
22DFEF01EA631F6E5651D3E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE28BC
9BC00AF48A56ABD34136479D929405FE67FE24FDF2F058B67B666B84BC164518
713BBBD20E129189FB1A1759AAD40887F9AD1CDFD668BCF9D9CA52DB6FEE5398
9E24C52331D6B04D84EC272A85F97D2358B1DC13AE97ED8364B15A2B0A06DB37
A8BE36083562CA8E19101904A1EFA36A8A1388C4604675EA7384F3398E49404A
FCE19D3DF5B1AFB1D8DCB2B603A43666989974543B3403BE45A1F0F7ABD4D966
424FADB66F4669192BE430DE2E62E8CC3B57281C8D4157305A78A5E7DF61F9DC
5015F89B10FAE836087D8EE5CBB80AB303F36D640C1DEC81363028DD8D0E318B
B9E71EA6161CE4DC9F8CD54F808DA6ACB6A4AEE9A30FF6A358CFDF673FF3FE84
582EE5136518F8303B4D9438C2D541657DC358F6305450C4A820C873273A5F71
61E4834077E659B690A784535F5279BBEE58F4C8C48A4186630DA766AE8A57D6
50A226E068F16140D25A157FFCA9F2D5BFD0073C9671F7F951F199375ED665BD
B747BC6C90A3CD9FB434F4D12484E03E14C9CDD86089832B845586E3E2EC973F
74E00D5AD68EEE1DCC321413D420CDFB43CD103ED7A1B9C2E885C88F882E29F7
57EB94BED0241E39A771747F79A79D9BFE1996455987BDDE60E2A8E037290EAC
AB5FC3D90C30A01449D0F3EFD8492161A8DCE38246532ACA149B0F4009A17BF5
74811A9434CA6A267733EEE15CDA5D0507DB02D763673DBB31417A8AFA280C85
38B7329C429D736F499E15088B9DFB5A53434AAB6C697AD5845D58DD23738845
700CF1BF95BA94FE7DF8B80D0BAC232AC8FCAF631A6603687707711F0411822D
61C461E26D2E83645828EB112AE678F69C824110FCC770E127C526F1BC74B829
4CC06FD8B59384C6190CE90C9891FA22B9DA61393CB3323FE1C8C0D91D792C3B
72529D338E22402A30C823DD655DAC47235EF783134925909155C60AD3A77AEC
843DC75C97EACBCB4A266B613FD0F261BAB212A11253343F2D5E0A17E8274A0B
977F080FB51D581331F360760DEB07D93B8C0D596E109B60EE89406B0E67B8FE
790851B1EE0EA4E0CBFF592F5560B08618404D407FD28224B8704FD6E37F0ED2
FD18B021DBB26C6F90C3EA5DDAC81A713A91EC4033F88EBEA6F5C4A247AA829D
F67E37A242C5E0FDF6AFCEBB0621A8ADE756ED7B42F53DC0838C1917ABDE57FE
1D34CA143066E103929D0242177CA5CAEA90D1B9CC6D71FF2EED18FB984EFC5F
ED1801D2E1E0890E1A6EC8766C28863DA14FEBA3ABB585DA61A20205E725588F
3CBF187360F7F1D3AC6E430ED2D1AF397F0E3B5C98F740F969E30382B8E87C05
8BF22E881F5CBA918F299A849F5ED006AA52A23114FFD8887363A5684BC68E84
77E5CC1E500A3F795462BE605471812EFB9F870174F4D1BFD11019237C11E486
C3C7F1069F2BBDFC3708B3E83D87F323F84EEF876C34DEAA894A5628ABE7388F
C2983315F8958911C199B689CB3E3E820C3CBF690DDA050ABF08CB3EA1D5408B
1553CBACEFE5F92448D42014DF2B20F5C761DA00FB8EE982EF8B90CB80EDDA85
A8D52C7F29040127E82A5A72E24259E976E6FB3381FBEF9762C4293E74A41132
C9B8909578414D8DA21FA3AEB4AFA2DE78EB7FC5C0F3F1C293BBF681F43E8C47
90E17923AC043A9D41F5647C4B7D10A12937EA59229885DE2FF1F9AAE227F9D1
35748915856FE50D442BEB8A77F9298A753B46FAF946627EADDC9F2827BAC12E
0E45B310AD8C11FEB8AC6F9BF5B205854F9BF1F07A7DB49C5C9C8318DF97F8A7
9F899AA25C2C92C8E401705B8508609A854BD2282539A541F6F4AE1AC91793F0
254037EAC872D5998FCA80E724C78D33BACD0F4D7464425A147210602FC06FF2
DB6BC35083CF3D5E1221BA2D0ABEFD2BCEBB3ED6E586340443AE07EEDA4D1042
BE0DB0311AAD05E48B2C312C503C7EE7B1E925556DC91B71027A8CD0E6DCF56E
6B16AE5547779264257FFA0AFA05C2842C534A411593D10A73461BAFB22E52F8
C57F195F6E652413F527B2581AA05F529C442F81E5170851A9FB0B65567A4B7A
9DD49EB4DEEB00C02772E22C605E9F3240A1971AB1F757694CB3ADE3CAA82284
0BC8FA3E02D9B520F7E8785DFEF225DBB0EC5F8EF854921223C8CF29FD813EDD
931A53CB338FE33FFCCE99C8E610006C5A8AAE834A0587D990024BBE84BA533E
0ED910DDB31E7B4B4B6529CF2EFACEC94B27EB79CB1DA249BA44E0D0D3F67245
61ACB8D1BB8CC8938AF776B78472DF419022F6B4D7B1E210382DB0321D08C9D9
FCF0AA33B2561867A9E967A54ADA3F4EC9DBEC4060C598B35F62D185F051EC5E
A7FE37F49D7B9A7192A22C5FA5C4DBC2B2F72F6D19FA0C4EFE4E73FE9669F35A
A8D35914047555BDBE590514A8AE02B0A9DB3AD7B7D5386B9A4CA4DB6E0CC769
39E99373CEBD7DF217D01146BA5BCD2B1EEC07707515C98EBDC2768107C74AB5
03E5520890838AD55D44525B61A9471C73F6DC14A50AD3B029489B2B2158B7FF
166C507B49AAF6FA4A71C74683F2BB65AEA4BEB17C11463A393EF2F9C04C700F
BB29DF2FB24E87A9F3213E4AAE753E34A7C120CEE6144744E50AD17E2596F801
5D26518F63510488252D55642E3F3B8CED08FC1300CB89C57B1EBA597184F5E0
582C2DB209479E586A3C6CCF19C49E038F56DB0698B5AD852CBD82C786DDE084
DAD4004F875E8048DD691A98B1DE92D88DD77D6367F8D9DF3E4AFB32361ACAB1
3BACD3E465D094B64841131EF7CEACF4063F1B86C7D5C49C840257BC6918172F
83FB987B713930C957C632FC8F5816F21F6926B6C59C7993D9BAB1BB97CFD909
531C68EEFE20CD2B55EFCBED239928889665258B1F0DEEE59A79BBF8A64D1C43
A6E2F248EE3B46B2150DE67F616FBA22F823AFAC1A9A7CFAE10455E8F5A76C4D
6EAB6157DFFF0128C29E7F9F5726735562998B379B066DCF4051E3A4CE8DF047
68CC0CB39E03EADAB83A4D8C332E2221AF8F6F4A4954501CBD19A9C947D12171
4D304DABE2D4B4ADBA3A2A61E6321F06189FE81641832D1FD9E3419840C2E6E1
EF0FCFB0208C7A0645DC66CD18EE7A2876FC78896C3B6ED29920B9005DFB92A3
D4E10D331EF5F14D801972EB6C8B045A9CA99C30AD6D43E6148CD5D1A1F94728
E44D6271121286EF517780172D12AE96F24ABFA0463236B5BA83B2B00D405B8A
4371916BC846795111B1385023A014B87059314CC9332BAAFF7C1EF561BFAD0C
239243C2A0366D689A885F2B7D7F4E7742FD3F1FD72CD8AEFDD97BD87B20D735
CE102C0F60A9D44BFBC181D584E4E06BCFF708B6DC29E0E0E03461C073EA88AC
955CE6DC91D4F8B7800A05DECB300CD7A8C38D774FBCFDD53CDA1FAE1447375F
693D07ED4187C7F90629FDB9612EC4CE43B13C27519FD67699D69DB12CA97F43
13F7E60E6E2A18762F7C3094CCD09557CBA6BCF0CF78C7A1E9C9DEEB063EBCA5
A9E6FA0D8EB2C075E1AEC17907788ECFD84AC599CF9C38E918B17E14F8751715
0D5362D450F5CEF063234FDCF00C43F6C605BFBC0394B96F3D215F6C0CF80185
A1DA5B2DB352AAC8D92EDFC372CD702255BE42C0D46909A3D892F83A2264C4FB
292F28C5E0E314F947ABE611D0116A4040CD614F18EAAF74BA624C499BC62FE7
B4734070F8C123A633E5159C6375DFA16D99DABBD711F6443FBD0701D748A28C
44505B639F1D74939BEA9630D094A868075AE662FEE879AFD9523A5B47463EC3
AA91AA60CE1A2303411C4471A861F64C9FB4E235084327EC024E40A9EEF763AA
93807490AE8F1F598B619C5ED0F36B9D30ECB1BAF9A7CEDA2DE760A98868ACB4
5CCC8CC2370FE267830FB1E790F80599286293CA59BCA5728615CC410AB3F3A1
C8D0AA76870828E5A3401A97F5DF6CE47CF745E42FF493747EC61AA529E09D26
2A841CC9C1CF25413ADC7FED17454DC5B3D7BDE64177D18907706E2EC4109E8F
CBFFB2FB8BABC1AE4CB0FD382E26BE0A83169B6C371950D7E9BA13F95EEF8F1D
23575A3C84CD3760AAE7D688541034D04B0343D48E428C5E1888B32E0B820A95
DE4DC41FE5041446DB6AC8045322CC1A97A9B09A3109294271780828397DBE40
4BA26E352CBF1D23E685CA897AC54A3B924CBE146FEBB9F0EE5CA712DF33FBA3
7D0E99953A6A3249984247FFAABFA9652CE7AF178B421B0DC4AC696E14DDBC8F
1293105D38E74A9B760397A1AC78A54A649B22429D7A0A2979BBD6460F393365
098CA717F915EC218B96BD2F7FFE6009ED344479A8615C2F353A540FEE60F4BC
C474B75AFEA18EA3B3E1CCAE874D2C37B6AD9F909E970C42B6FF44225684B50F
C56691BB3A1D226C2E0035C1861D89D94E697F79D6C85FD95E498FA4F44A0E1E
F8A9319E78839E3C2111A05DF18DDEC2EA771A3852812A7E4B622D86519A9A42
FB03DD17290E01444DE0216C3363F57E174B90F05D39F5763EA4D257BB4ECA67
74D187ED6A492EF0633D73C071CEA58830A18AE1C56554E8953DA15FC937EDC9
0FC7F5D9C04BB5B655DBAE33483ABA277B75B26324CFE84BB798632C9BCF9295
F87BFEF6A062CCCE14E388A7FBE9450BDC4365D2E660A69845C6017E8732A709
957CE23D39B600EC0B3691FDA05AF2A4ABDCC37DB0FA6883858124FE6C2AA051
8EF8DE086457DD174D1C493BCFAD6209703B06B52BD4EBB66F78E2C0DE1D3386
7F174A2F92998B18CE727BDCAA70CBE12D1C47A6B88B6C522E02B5A90E3B75C7
A15FBA43971645F63598EC800EFCD6E4A2B8C5D06436848E389F67A7A4381C92
831D55395960861ADEA52E64DE6413A2388BC1229ABC16EDB201189B354E21F5
E64468846E826CCFF9C0ED695C2A56BADFC3499FB5D13A5E991B85D644B30D7A
3FDC11F99AAFC2907180C659E171B0BF9D7916CAB6D2645F8EA27F25C4422B24
3192B9041EEB8BCC54E4389A1FDB3F30FFDF2121376CD97019E10B7D5AFEC6D3
49AC9E5CF2A8148DDD9C526736B990180F68921927B51CE018B956D4E0945310
61EA1994E911990A806B4A70959639CC4EC34BA4EA5FBDFEFA6CC7540BB0BA3D
205AF784DA0937C74083746CA9A8557DFC573A23B1C9ADD8939BE7366D1E3226
749B9E23E4C2AE4B9E9856BB49BF2C28599EB66F071FFCE3410C547A9B74D217
3A3E2D393A58CB456F1E32792C3F6C3B01AECC58B5FB3F8E6BD52AEBA54FE4AC
07567FF1D1D5B0A1D35D40B4C7958015A28BF09B926DFDE5F394A54086EC1AB2
7CA456FF8BAE37BEB1482EAB2DA6DFAEF53253549A5BD51955CF5747C69296B7
999229531B651E4C98B0BD07C1AA8F33DA95F37929EE55B032A5FBFE5991BAC2
556AE99AB8E4073542FBC6462D45076E249A857FC13D34B4A0D3F1F49BEA09B3
7359A4EF5EA889861CD9A7048BE25A717D496753DCA4A6667BB22C841A91A8AC
118812C9BB0FB37CA2DFCEB976C9151056EACA8A7BB3282C78259EB41F40AABA
1B604C266E6C254486C8FDAD35CA3EA60BE1E28418837CFC7209F4A4A26689A2
16475D75EEB838186C788942057588B3DBCC46104535F0FDFF080176C321F774
78E1EA7C8D88CB5FAFCB45785D28DE4EAD3AF23E8EB270FF2FC011EB0C24FE5A
30B447F5378B37F05D535E6759C193D44CE02071FD5395487C7FF69DAB764D52
1EA0D98F68FCDB34504DA56C3A14590FA2407BAB1E8BB563A9C89C0F79AAA61F
217366BE037BAFBC79F33E07B315ADF614ACAED323DC32E4BBC21EE24B40DE0C
0645C6C35E92178941EE9B18D07C660E7D79B7329A7F6AB723AEED60BF2E1158
F053556C1A2F1E372A88C843252610FF37D6B41BD233860D0323C368594B7B90
E07CC72DC667B7655B5AF313C6250563BA3735D4459905072804AFA49FD2723E
90E176A1E2FDB40C1CC5E799B3728AF8D6A742D6FB17DCAE007D874137BD2EAD
945FC6ABCF3ECD8410335AE6CAAA4F7536ADD0FA36C05D5E9751479206E5AB75
2E679F729DE3F9EF2CBB0F5EE165832AB3CCBB2ED93304D80108A5DCEBDF1B50
C64747E1C99FB6B98A20C530C9BD04C4512B1B47A294F94CBB55FCA7617F2744
370D43F5E2B9EE5918496062D88DDEAEF972E7B7FD99889CB9DCCD3FC714B793
D4DD9D9A70F1C9C415EFD77F4AC251E82C6F8DAA73722AE3DC264C9B58E9057C
7C31ECCF837941C0D95CF4F88D16C3588BBD6EFBE783A69AEC785315E5B7C888
C00A8B5D346E148C9FC7BEC56914ADF730F9DA026FB38B97F4C28FE80BD706FE
0D5CD002D0612B6AE5D6AAEA9DCC7EBCD51C597C1AF6102197A1C8714E87DEE3
F0D2F3C1CD901ECEF7777382B77264E93192E37A07A6CA7D9A90F4C28FE80BD7
06FE0D5CD002D0612B6AE5D6AAEA9DC9D3712A88590E36B304030ADA0D2ACD2B
57ABD9E231AED262C1B358E0D52FFB821C17B58701F3DC34532C5295E60C6C73
6077F129F899D9D42D0C2EA7C77884CE872B0A3871B713A4C153A32389F0345D
E59440BEA479FE1AA9A15DC7802A111D96E639679CA6DA215459EFC52D883838
D7F8D11482A0DFA99F57C171FBC47998037D5421BE31F7E98BA78C2B52607F5A
D63067BF47432AFE43BA45E5D0C0F7D8416730AF4BE4FC931E965594E034ED54
B085054144022BE6620E3BE3BCFF07C029D465A7D9CE16DC8850DE6284BF1940
F241A22A09F10267CD680EABE7CF22C48D74DD85E83A3C976FE83802D4CCD929
C846814FE0653D003F4AF77ACD1B3110DFE711E988091A32B49D0C265EC25112
11833F8C475D7BDC3959C33527A663980C768540A8BB14D390F350DA0CEBF792
7D5AD4C3877051CB669FAED7B154E2F75F2F871443DD52E1CED19BA26352397C
3DC55A0FCD95276517788B57C334A7D0968BA2383121482B7727ED2FEEF31983
E07927F9B606A975858A4445ED454DF0B009FEC9F8CA76F86848C73A5BBD0F42
D0CBEE87AE6D68A4C0336BE904ECD310414A53EEE73AD08E20791CDD3CF827BA
903093EB24996C13BB8B5B9215BEAF72F041F17D55B49B81F3D1279FFCA5AAB5
337B999E290BB4078ED610795231E3FE9BE3FD97ED727A6719ACE7D439CCE123
247E845A80DD99630FE178D00E351A980FD7926DB858B91872F91CEBFCF19DBC
D57891E7F42C3CF6E78046CA0B3AAE98A934A36889BBB8BF4B90B0CA430CF1DB
39BEC56D42DBF175D18FEB98F772992C5637092710177BA2E331993DF752B5FE
C0F908582418F93AE4F1EF661692E37443B69E00A74BD0D0441D1DF4B16DC229
5F06ABE7ACED96009E826E0D44459394178F13030AE0D5E7B3CB7D36842E7515
68F4CB7C90AE341ECD71D05287741F6A99089C9BA6489E9F9B83E37DFA970823
69335AAA53A4D891DD3CA40653D1FB037226BBE3D97ABC50991617DC85CA1FCF
FEAE493098F902FB88A89D4370F728D86F5DDA983EE440207E62A20FE403F799
1165DCCAB03D5ACE06172EDD2479BDBAF38548E705290566CC292B070FBADED5
A15A8FE4216FBE7460ADB2A13755A5048E47B03087A55E15E6BB75DB7578C02E
68FC5C48B58141C7E8628F25C313F891CC4D8B425B935961125F4E43D88E7B92
DCDCB3F560C53918645B3F364A4DD82BA880A7A5CD59F8F6000E1978A9EC8034
90B464964479A2AA279225ECC22FBD3944D1627081097551011244A3E174B7F5
3497819667C967AED16B47DA7EE4E0FF266F35E74C0043F6C8C98511EC1E2A0E
BF67A44AA2AF44371CA8B9A4450DA76EDC0167B40150C0A5F1CE0E233DB1C488
8FE46B96E78A9D5B7FC4BFC870E1DE7FEEC2446ACE741C2D06CF989858C45A91
5B46CA2EBB6B37625FC01908C10242731B79A1A82CFCE9E49CCE43F23B5BE883
7EA00B30C0BC7FF11AE673803E8C8B73EF9B49A0E3E2DF4FEAC551B910E8AB17
977A1A7D47DC463A65E24FEA77CBD29922E290A8B8D528BEC859D4114AB3FCE5
4B2EC4E0F6D4EBCE888A5ACBE4C407C8F9918263BB49B5A0E536FA063D6D8C53
508A79C1DE763C9242D3B38B85B5BA97376AF632DEE1A8C2B197CD7A29AA7671
0B6ADA6BC835A0095FAC132843FCD3BDC6D53E6482E8CAAEF1F93926CA457899
A06AC3DD5F5124014A04B2B36057E00EEBBCF206EF6A7B729380BEF8AAE74D25
96F8F409DFF33F62508230EAE1281A7B864214419DA3715ABFC0A841256CB0CF
6C3BB7835B7879610B1A5978127746837223316D9B95988E20E1E71BCC60DCB3
CAE9C54611D9D515EEBB7192C63D22D02BB2A5A272702AE9F15718DEA609CF8E
E797BF0B781D00CDDD6F559194FF6B0FFBD6BC7ECCEDE0ABCB830AB79EE73051
2BBDF53DC3679F9D4C0F28A95A2F084A8B71B870C2E63B98D98DB578AE7262FC
845FCCF787429F4A3995CE6137298AD945C6C9B90489846E96852878792D64A7
BEA283E744E895C0E12E861EB284C7F9FE20F25EC9A1269BFE3DE580EFFCC010
D53C07AE90526031B40619B4D27AEA54028060536DCC4F9E890C18E8E4AA4B40
4CB08B7DB3B82FE47967191E780063ED30CCE41E5BB788B2873C25820F1E0EE5
10C1CD4BD3F70BD38D7374A987FEE102681715E90675F1D60FCFB1B6D26AA243
77760FEA6FEE94FCCE9A91ED5F64E18887CD987999B6ED8D82D9CFF377612F2A
EB04A439D43635254CFF36C827155FC7F5C670365A38AA78C33E121DA9D4AB82
7E616E7357557C23BD61842CC4F11DD771EFB1ED519E2252A8110547FD775356
7649FC38A821AEBAF5D0C7E846542A358E0B8F82D7979756D0F1C98A2EFCA1A1
17133DD39BC60F687306A100566896DCEE3CBFD5DB2D469ECBDD4D11C29B962A
65FDEC0F7CF7864A73195645D5071137F882C019B8B8539C98495F25D896AC09
9E3A80CF0CDB10896E3EF92C743497E1AB3069ED10EB8C4212CEAFBC79B61186
AA832CA3163A1E8F2E42D4D0358B380BAE915A183A8FBFC7A5688A860A72ED24
B70A451B58DB04A1F2B707077BC18F65F697A23A6BF1BBDD51D96BA4A5207AF1
044E917186B2FB766825CB278DBE285E67328F96BE577CC30B6CE0F11586B013
D4409759831BE693C4C5DB5105D2463C9E31EB706B8652D02E450911B9742ACB
F7875898BC2950BDE159FA4F5EA4FF63763A313D33638C065EF056061AFBCF06
5EBA0B028ABD6FDFB38BE88C6F5D704FB871BC46FA5933E488ABEE172D57263E
165270A9347B262FC98D6EE2772C1D183F91D837DAC94609659451F83DAA6329
78D60675A49597413D95EA0463B1C428579113EAE374D363F74BE92989C382E8
FAC254F543E8D3E7146C9A03F4854C0E2F008129872A0333D548B045656A2C87
60B6822021B0743143F2F1002AD7D2F05EE659058620D20AA0CD1F4E3E164F6A
9AC0955C00BE042DC2D87E2C0ED5ADB9B027AAF56C7B8A44EBE67BB34BECEDFC
F123E6F2DD27B6B9102574E2461D2FAE65B7321C0093A2A34990285CE5808EB4
EF66BBC42389F67D87EFC1E935772C978024A732F12A2661AB1FC21CBE13E07D
84E81C83C06CD7169ADD20EA5D10BD495D1151F4BB20BEFF60640B1310DD998B
A0614001C00F5D36C5A8CBF1DFC11F715B1F2A78B378B00586F8A890443897F4
79F5C27BAC92012E872E92F6C98BC185514EE68967025779E5CDD456756F3235
ECDA85428419DC74E5342FB54C048336BD21D9782739662858C31CBBDDEA0FCC
20FDD7CC82352A5F5D41C76DE3E5417D1B42DD280C1FF9A88656A37EC8F5AC93
13D2A94F975BC8E57910FE940125A576E4B9BBD385726FC6CE255799769EED04
E800D468F47B080716ED92AC7205136D5AD497D5781A73D9ED02DD23382FDC5D
31180C0DC1EEB328E08ADF89735A59A4A4B48ABF4B835D32B9229B900D8DED34
B8A702E96ECDCF28BAE94FE49CAE164950A744332069F3CFF233A6A2082CA456
4D9A9C6B2922798C2F7EC4992C1B5044C152197BEB399437F35ED53E7BA6F80A
3B750DB063E962E26A130BB340B62D6667E9F3DFAC28B2289C26FEFDA73C49DE
611929FDC289983B40E75879BE4EF03B9AEBBEB3B51AA797687145C8E3DF0453
B564B8FD5D5C6FC917E2A4CFA8FEEAD0D315A1CE04F646FB7704DFDF783B55A6
821F7861B12877C48E1CA0372E799AF99DEB62F1FB386855F555961A47656B7A
F1D736B9E40BBBCA4E10612142E1C154CC374F20FE024AD7651D44FE76DBF369
706318E0C38215CE324FED860E36E6AC08E1506441E64A09CE495A0D1979852C
33EA9B0C813CAC93DCFD9043706B83ABFD905E60E74376ACD7EAC66D120A3911
D284DCAE2018F883AA804CC9DBDB2CDF6BA2E11F15D300A9E7DB8EA194DA5864
148EA67B59F4864B176AE297116D9396DCD91341308ED6D2C3B81897E7F8734C
7573B0B3286806EC59743E296828E82192271F818BFDFC8AF8099CBCDDCDFFE1
5EE19FBDD0BE2154C076B263342E8A6977987E6EFB3DD2AF1E6EE9323334A847
9BCAEB272DDD92972ED8E7789EF98998CB7325364396F37130C0E488CEC4339C
9309BBA8B4AC098E9FC57905F16D765BD449CAB4455252955542B51CB5CB7DF1
491BE959F1418F547082D1750223115919DD4272371F8B5C888DC44FBA560743
5A619684F502CF675FB83922F86224D004E35AB8A8F503F391632AB92FE1F7B6
0318C6045977231D86C8BEB851B96CD7BF88F9A040FAA22309F3094A2950EE02
99930BFB1D34B257F66799C4107F0C02C44EA6960180786F9261D70E7EE6B325
67B03BAB7FD13E263C2549247D8DF74C6863D43B026014B279BD59294184EF54
172447AC57A8B69B4DAAC8F3F689B108A61F2B9B09CDFE5866948199CA27C183
8AD126A026D6841809D5F0B52D59E6AF662CFDA9AC18A33B2FB6F25D592ADB01
BF6DD128E980A062580B9FA11ECA9E54716E15A3F345F395F32CED2CB15B8790
2E04E190B8C2315B93F0F0DCAF80757EE1EA8A78049B8A9E99881A56E5309941
76F942821D2B314893F2B9317FCF4A5CBA0903206D85A3D447A4D946BD503062
DED9A4E6F5827796857358F58A400549BAA570F95B97AE0BC57BB244AD0A4B9F
6D550FE6080A7F4735504B58E07898EB92D3C3D91A7389DD82B217D6579AE5F2
A2A74AA109ED4D67A53829C8DE0FF82A43D64F468C73A24EA2637C80EF0C68E0
1DA53DD38776B3E05B8A1455911AACF57CB21C5EC9056E62753E97CE1C0B152D
66E148E1C5883A9EA15454DF1DD28BF1664BE2611277AAE68BC42F8F6B29C7E7
A15463C510185BC34AAC67226177133AA7CD431BB67BABB0BFDEDC9E199CCB17
0BB7DC5A3B3CE69F746B0E41138FBC63BFD8062A3915AA5CB574BC60C16FEA1B
452CA2DEDF58736D607CA8EB562EDC8ABB5D6C02C561986156FDD3B08A4B4751
3E1F8CDC2763558C93AC71A4C6A0EC1FD39D700E23CD325C78530B4647F4462F
88BEE48CA885E0C3057C9007EE185EEC0DE8940EDE7A1DD87E2057FD9D218F20
C4027148117CD4073D0C3B04A19E77E75D7A0EEC06C030DC43B2245F9D24D31A
31F06EBC65712470EF35BF4133E260320CB39E191970C0F0E81DBEF156D1161A
563418A13D5FEFE84F45AD559E5FB1691BF176AF7BFDBA7D2F9B0C79E4635A10
CFB39EE250AD0FE1FC3DA60E372E7D7204C19A9B5936CE906E36608A566C2FF5
7335C1BFE3B1270C1BEB1C40CCDE9F12313FB6B8D6D7680BA1885A2875055EE8
AE2C9476718E30C456B935AE6E2F1163F03B29C59B2411E04A52C5CC9C901412
C0F210AB0494C0AF639D7B5CF848869EB92F1BE28E59B8ACAD777AF720B396BE
6BA420470328C28E4D8FC40A3497378FC4F2EBF33B1A22950182B51E6A2159B6
CD7B73AC90F3F4E72B6EDD9A132B69E39457A84BD68DC45897C73C4970D4ECA4
E5D37057027B97E4E004BD802FF7CC2CA964FFC8816FA5C1D06D64E913338AE3
524551C4B6B47D216105243EDF44B4052A94B9A7043AEFBC3C263A0DE6080975
E31FD7764794CA1A07456A6196A4C14468B701EE115A6B6EB3F8891EBAD73762
64BA6DFFE14FD70E7F5E489CFB413608E4B01B9CBC9912CE42C703C8D77E4F68
AD8E2AF1A6B1F23B5874177AEFB79C4A8669A99B1DB97D49168881B9AE56BB0C
6879809B78643FC1D9412E2FB01F096407273090BB842227C389765223AE5B0B
2046F81806AA3F8E8892031DBD9C3EA17E5C4AADE5DCBB3F0CFEA4E460CDF61B
F838E85B8E1227FBD02C2E501212498BB36DD1EFA196D12DD70598BDD04F32BD
F1365E4A31DD8ACABF3DD5E7121D8591A16374C8891C4502B6B93A27F9F25EEB
6495C2C786FA2B3617B9F04244C9998E2A64818EF0B10DE1E9EC531198B17238
A02AADDFEEE67895C7A48E1C8BB82F3CE10CF12DA7162CDE703342D7A6380846
E29E227ABE3500B463931EAC65B36D607BBEC48D51C674C81EF3589E68332769
DD43B3A7B5995984F847014BB62677A66CB158F34E426E865DC8BAA0362B0DFA
26DF487B9D5E31B0B820176667500E58782156ED77373459669915BB371CBD54
F6F3BA326F6EAEF1B707BD8E2730C5584654A35F2ADDC57463E1D9D374179BB2
0F989D0A1BBDBBB46FB7C7A171AB35B0C645EF555CF8994CE18EF15C0E5D9F6B
80A8D48AADEB289B48F4ADAFDA8FA692A8972023C9445CE711ACF5B84C413E5B
3873D07EA284348B1EC0CB76F95A64CE4CB6ADAAECAFB2B7FA27A32DB9FA060F
E2E78CED42E4440B88D3EE7B72004521E177C74BDACE7163B700A47C0021B9D2
9C89BD121E69EDDEC575B281609AB853043A449C6652666AADBC2F5FA54F47F8
B20547A2A07E87D2278C7302A34A4F508E05E8C908C46B93419B9EA3B4ABBB29
858F65E937CDE31D67C847719779DE0B326E66A0539A035AE3749991DEA439FB
F139A16A55342A900A66B4076AAA04763FB71D6C28247BE7CE7E7206C3C783D8
35221447A44807B5D89D0FE464663AF7A14D549C5A615DD74CF3E5DAA82DA417
E864D58667CF9C38FA4A2919BAE1F9E731B65CE2E464DC4A73AE8610F898B542
EA7807E04F51013AA2E2215C03ADCA175FED418549B387BB75DFB6302F00E8C5
7A6D4881E11AB9F1CC61D4ED26F39C3836A94AD89F1C51FBD589F3CFD097B2F8
5F9D7EF4B790085D9F011420EFDB33F682C3FF18E73E7FE305C8BC5AC4B184E1
3F3ABA4A18487B10878E9D800EE017106932087FF4370D1C25711478FD4AC8E0
3BE4A6C47D234C9F70CBD7F84D47F95E5C414984829FDDAA08D8EBE2C78F8858
0F20659A413E243FB76F1836DB4F41A0D9FBFFBA4553719F53F05F15FCD979D6
BD9E9B87240CA66B99002D9FB25F33E4776C648C105BA8FD64B06EF6AB0CB454
89CD55D4A4D176FAC43379BC369516BB3613F825819D85202027260425B59D6A
590084EF91EFCABD536477BEFD2E5DB20947B84A0D64CB893FD9E2B4A087723F
6ED414CBB3052B95631EDAD28E37387705DFB32DB77E1DA2E2F92EB1890FE6BB
060A0F1F950FB6A1BAFB1B6E4F4BBED8DDA2B596018CCB25ADB0EDFB402883F1
ACBCA8789AE0B8896B8B3A774DE18558D52FCCFE2FEB8DC3AB2D124146E08DA5
32B277C8A73DAED0570EBA4315CA9820CDE8798BCF4B7FDC6D666CD1F055382D
8FDD855B94E52711EC27C88BAC6C68007CD2B3823854190E9D909671965AC884
9B3B885B7DAA70ADD881729907C3E14616874AD27FE89777BBAE47CD1B4DA51C
027ABE5C9E7302EBE72B7927487B8A16E97D364914705E589218281992458933
10CC59DB9E341B2505A12CC384ADFE9276BDC59456CCF229BBF2CB2A6EAC7700
41D6E51667EDD426834EB41B024FA9E99D731F3742E8918A59C1528DEF13DB0A
4810E9D2885503C9427E81C38605E4A9A6AB3FD9AC4ACC803C1C4257740A7CDC
C5B425EC8BA4590DD3555C2E4BB60197FBB2324CB5E48647D8B480F14B9D9A5B
20898C25C34DD931F1B1451B683E65E160F7AECF21139577B58B735C1F44C5DC
D3789F169500C081553E21436132D85ABA5270B45C6F5421381DE936191B87C4
2A9DD7B1B91B3C0B3295B4715DBCD1A7407E6D8F12ED3B35066267FD289647DD
821A59D44752A7255FE0B0105A7B7FF0D44A92550612ADE2F3B45CF3C4E82ABB
2BCA59791AC9FB4E2199F5F63C87E2F91861A8F92E9618303D9E3B45D1932D90
39C75AC6ACA57A471C6BC951BC2615CE964725FBFF895A8D3CE93C4B207D615D
B606D4E44DCF471DE57E8C2BDE49AFFAADCF3D7722B524EDE83CBC180FE9BD29
C10BE0269609D7412C5D481863C40935FF2F7563A7798539421940535AFE828E
2C2CA02CAE79C9743C2E13EFAB4A7F11D85D5CC3DCDB5BB432A407FC3B726B76
B16C6815E977CA50513DA81445E93555250A42D70B4AEFE29B222C6861BDBCCB
F5C59AD59503DD904825F10861C943A3E1E186FC9B35278606BF080E85E93C90
7E097A9B59C7F7E7ACE9125B4D1A18FC08930DB5D1A22142E5AEC633846388F0
58558A6FF3AF172F7AB1B558440029E6CA726EEF39976B5F4ED63C01F7A305B9
CDB328E915B922F5C74CECA9ED647382998B6E9336EF7ACEBB1F806296BBF942
428F47017AB9E1FE029A8B85F8063CEC788CAAD9657127290C144568BE386A4D
C43CFEF39B65672F9CD4FDFA838C1C04FF71915A858725501E38FC7E760B5202
739AD91802E8BAE2DC26FF4CFFB4C707B8CCEF0694F57A327C459CC526611795
F807B89A0FDB65A794A20569BBC5DE7617D1272DD876BA2829A4D55D365AFCFB
EEB35AD055FD9524FFECA21DCB62FEC5AE724457675158C32FB85A8A9EDB3D11
6792FF82C0F5690D75BF0EA3A7E2AAFC3024F557C58389EF025DA8B9EB36005B
C60862872E73BED22C5086C3646C244F8DBE3B7E2345F11DDBA7A605F1F8D8E9
43DB587B2279460C28B0D6F8D4EDDAC12F519F2655A472C35769C21A42C19DA5
2953010D578CBBC23C7B47CFE6CFD6EBAE3E24A85D0022E06533213AC3AD299A
EF4A850A7F2F3F25F048DFA3C75BE0AECE6E9F4A46E357C24C963E165B9B1B39
6C092C04431893256FCAFB28E9B725884FC2DEA506DA24082B5B89BB78DFD9C7
5C9D5AAC12A20316B114AC64DCA1184ECCA49857A84F8C40EADFCD14E65B2068
CC4034CD194E3767B38ED95246213E3E15CA5E03A5C421CB025E4426433CCB9A
C86514D84DF7206CD5177AB179CC5E0A38F5A95DB38BC28C36645266EF9F331F
79A5C551A05320F9DF7E9579BE99EBCC1B00E6BE3529CA1598EF607BE11D603F
92B2607D41C3029035DCA387E9A79CC858785F2D7FA03AE7BA360E2B5AFFED40
90764CBE0300FC81825DA8C5B13AE695F52D6CB306C819BCAB738767458F0721
30EE62F511CE6D84CD4B4433CD3901AF45AD1EE23DD9ED462434EAEE3FC6BE97
5E808D145C8A7EAD0C5215EF9730857C6032426D3A136AF3AF4FBF57856A8C34
BC6B1DFB35082858F3AF7DEE885BD7DB677C7A72E4E52C16BA60C126F473B649
817F9371EE1BD8B0D311C032F5F321C592807A06B47A5C0F1EEC3C443AAD5A1B
F73B120C9DB6F26F9A59A24C096693247EA38865BF67CD151A11365232972F01
09C80E340B6486869907FDF4E0E1636F2B755BC7032BB581A515D06E1C5B95D7
D459009FB8F600B942B0E157DB0345EBCDD634D1E98F1C3458654776F4FE2295
3A7743F87828B0683FC235888D9E3D24C7DC65F407F99A68AD7AAE80DBE3F905
42E9E515490079815C2000B856C14AC12D72F2562BCDE1C7AD5A8F0F05210C59
775FBB51D9B0EEAF7036EFA281C1BD6E27666815DCC5394524CE6C2E1C4A1C88
B3D5A35D3E732C506A8C32379607B95A82B8CFD50DFF1CE3B926DD3EAC0301F1
C16C32C4CE6EF964BA42A97634C721A08C6D34BDE286AF7846397C07B3AFCBD8
6B6E37CC6F84C7F3677BBA28925A98D9E46DD6836F857ADE2A5F1E6E91B7ABD9
A7351FA9E0D8AFCCB75FA65F067B691B8755B292EF9CC631B29F332F94A73981
50F82EED646BB1729EB03D08364D09B598AC9F5233254F2CA6FB9F1286ED9664
D4D6ABEC466F56A4614EDF587E12715788AE98B33E45E047DA7B5DD9D12ECA7A
512BDE1CFA0E0F8ADA806335BBD9CFC2B7A4659EF349BA149EC47C7C4C9C8FA6
2A078F4F1683F37E5F7B8FBF26870DD366B9CBC118E355CDC5E86364FF13B34B
86F065D793445B5926A7AA84A5E96521F3A544426A80EB4067D1049F26DB8E41
713DE784371B9FB6FBB4ACADF8250A2CEE0DC8AE18053DE1FDA381DC3470B7F1
66591998B80CE2BB6F4A00E14ACE15238C855FDB81FD5D5F494753D6F87B5209
46B45ACE3E2796DF2B8212C88345CEF5127F12FFFD90D2021C2DB6DFCFBB0DB9
8D62FD50910E4E655F06483D263D298D8F557C47FDC817988D12CB00AF22FB0F
FD17A2DEBF8CDAAF3BBE27A706D93FC0A92AFD4064A9851C64160128599814DF
AD5B256F2C3CAF550ED277CE1BA768C832EBF7B966B0ACD23C52BCC59343E6DE
1E4E642C465D1C13F689FEBEA14D761CE30C9E31EFEDE8A4D341210E77F5A4AD
01355868F716DFD2933DD12B648BCD4BD052797D8D7F77C603238D840EBA4B8B
ADA09E8D0193C054CA021489BD478A54F4F72B36C253B4D09D0E34B02F0258FF
BC94F4231F74BB0F654D05CC6C73386232C4BAB2EDD5D7C20A4D8F00A311093A
151BBA519A28156BE81507A056772FFB7615A3D0A5659D2DAF9A0DD8587BA20E
0CCADFC9489CF6BF32D2A17BCFF842EF5F146D57D0287D62D1A34793E173D032
F1675BF235BDDD5F24949CEB89A93916C86B2A9DE768BF601038B976C4056DFB
27F053921193C59DB289A4188EE8074946298381C2DA705BB5069F19A5807553
18BB1D7C2A07591955B78C0CD5DECDD2FAF1925C3BE1C67CD9E0165A40541913
83E77E963DAC466447028F139D9C69A2B49FEAFAFA01CFE20B5876AAE7AF8BB5
042264B6ECC1A2B7E520FD5EBEEF83D696C0FA27B86904477A22C77FE5736958
AD16073794C893B9CE977F7FBF95D2C479EFC87293E98DCC4745AC6826FD1CC6
53E3EE6D197AA8566EFD44DF10D14402EBEDFF0B144B1C9BD22D737956BB3DC0
9BE3CBACE7032FA494C240ACBD6FAAB7F7E185DE8A082494CBC866E41065DEBF
0051EE2C4BEB23ED172DA1A1AE22778230E2D5EB6497E5FFC3F42F921D984E7E
E55055C07755A6FCCD5F7F6FBCEA3E89A36BD5D281B7FD5755AE7E1DC42399BE
9FAF8DE843C8C20FA440244BADF7DF1C9C512BF46E5E8F8DE7D91802CB02A1E2
07A8EF152087A89E5F2534B32D3AAC58C2BC29E4E3E882DBA5E520FB83F50F64
7650E90E3AB137912FB38808F8A6B9583ABF3D16D31BF812A6D83A5A4810EE5F
B2D28FCE3D5BEC1DDDBC2AD2B526C6CD55B427B524171AAFC1A8591DF4C97A55
174CE26087BCA16DA5C250762E982A154A5241DB6573D0A1958374CFE21C11D4
C3E93796EB9684B5CFD22B7733708CCBE758EF219FD72CE49301522D0A2EBCC0
DAF5E74341B83BE025EE14F3FD8F77D0AAF0E5FF15CFDE8CACD53D969020B1B9
0028C373D344890E6799EF4332B8606F8473AABE20673348F59F48E71D675038
7D0C03309EBD39951A392125DC6B4010022F3D34BC855A2B18D16A8DD42485E3
E9391BC198DAD49411B74F405AE1744DD7C7234CCA590BF425B6F41B2235C4BD
78E4593572BB84244DC355CB6E148C01F5FA54A04EB649B111666DC80E8BC8DE
0DFD0A5AE49C1E1B820585FE5848136C8CA56B0473C4CDC4D085A4F63F8F05DA
F00BBFC663B318E5AA640B0CDB462FC9FE7CD198607B2545B9FB989674111A60
3524E38280D93E247F05FB893CBE5D859076B5AAE8969009EFFDAD04F0767BE9
60612179D325BE5FBB515128DA2CDD88351AF3E38D7D0FCCB303A6AD3DDFF2F5
7C70480541F535BB052A6CF39E315C95B7240F7804FB33719067B136432C3D97
BFA325CE8096FD87B5398776E6126FC6FACC4C007DB73015E52332A3685589F3
ADE54C2F32130BAB13D7E149FA176EE68606F0B35312506C02F1A3B1E3D304C8
D933CDDB280F05DD157E37A6EB7BB45145D8EF8AEEA67912F19EB02D56869F7E
BC6A93EEBAC7663683969B4128A52251DB3EBDFA8F59FFCA5E7FC82E2755BF89
995F7051F016B7B2742F085788D59758523EF998D55B400620E9AF4EE88CE2F7
9FFC9789586711C653BCBD5180C92F0640CE6A8AF3AE7EB181C2E4C11086C1FE
868F64D74606B0E9201EF0CA8F67CCB7CC009C8F39A03BD0978C073A1C110CCB
0106DBF37D3D6257B109EAF24E53D4CC2C65CA76AFDBB19363D152800AF844B9
D4DDD59566FE8DA498537127B74727FCB164F21405F98BADC198AA9CC6516DC7
A0660CC2B0B3C78EA9652D6787984509F17B7ED3B19BBC746DE44065D4297B39
8A16DF507C81F072CA0B626D0A5CB1B8254A4EF588149C84C1E1DD84730B650D
73C9ECAFD53217BDC48F8E503BD8B7F8A4000C135F1EE19256CC5053F221D5E0
B8C199D2D9663D2E509655C449F61F5A369008CA267CF42264125016A3F06981
97464CCCF73789601E45AA1AD9662B1F04204D895014DD676B0A17EACCECA256
F6E83A4EA7061EF3E318B983E576680ED552A5C76833DEC9F84F6D8B1793D8DF
C48E82757F7826944AEA8C61DC8101E263C1A70FEF47DE1D954392B61E683BB1
437FDCD5350BDDD79382F68E3993AD0B93A7C03D1020B9FE9F780AF8F3189BA6
9836D76D228AB453597E80B7D3FD49E1D181A5213988609728B4DAB8CAC56B43
F35B6B028D9398B5EAEC6F57DFC36D945752D7D30C394020F3DB1E482D7A5CE9
FB037B66995CF222C0DBAA929919D80F4878CD5DF89D90FE46EC6260A048C94A
AC767543E176F4DFB9CDE87A1F8EFFEEE05E5F667B8D668D2B7566B56884E748
24B249AB3D94DA868981A99E24463318B6D779FF00A34BE6385E640BE3CDF7AC
503886D83B4BFAB0CF0C068ABE8311584D42DC94734B633C9824B1A3981E2644
AE0718BBDC6A43328284068B2AB05CECB8D37C7E2C5EB5F68377A82ECF178CFC
51F75D4815BFCF44CF87A1F6518873BB51A83E52C3780BB51DAE9593AFE895CF
9DB813D1453D986E240B80C523FBF7EEC3B06AC1E378AEBB319DB24036F3A978
3F0633A11995615A2A19553D9CAED382E69400BC02D8DEA3A5A9F00EC0BCDB65
EACFBAE64C0606318B09C15D29F784CF5CCF2CC1BB99201E8057E8A61343E540
3003C28CF53047A07DC8A48FD12C2F3E617DE623B3B8E9274798F32EB5455A60
8A969848587DC4F54B4B689DCAAC170408185E91647F364BDDD7DC5403780260
E2DA6C021B36D7AFDFC2F48EEDD7B3F4D462406620E8399A4FF437C089BD1310
780AADE3F8F26A3C08A8D07EAD975D4C14CBDBA38D708298C154CA1CBC5A2347
AC28E960123A04365ACA0C7CF7C49D751F3FBA44B3AB17DCDAF52D116AFDF9C6
CC5E20BCA2931EB10F61DD41C3BD467AE1E6E77AE7BC34777A54268FB9BD6837
5832ECCE672D5A6EC11510B0833C145D2A12BAB7F5AED1AC7BDE74DBE7654F35
82BCBEFBF1EB66E2E910614F0C02936959E2CDFCCBA8D10969E0916E6B555B31
670C7044FACECC830BF9FC5E9262DBB7350D5408C621CDED6AC22293A666201A
11E8595DFBA16353A2CD596FF217E9DC7CF6ED25978A39A2F9082EDCB1CDD560
A14E93017099D24663633B06BBE4FD539737ED09A882AF74475DB676698CFD94
96C05FE4F75992B2E24B4FC8353951C0A335B53F68A8F8286A97E70593016544
12E6D469B1819D69ADAFB7ADA60888B3C99E385193A438B4357D0866EF072750
4C48C199E97FF470335EC81AFDF3F629F7967B89B09EFC1C0822DCDDABD05D69
72550A55B6CB4A31684EC254B52ABA03E973E2DB36B6DD60819605C43F8672C6
5005DD5D903292296AFF00D80D3B958B4FD66C9E72B038A82F59FDD05D005B6D
99DF6877CA974BE5F4EAB403C3A9EB09C94372E0BADDC72847D255DEA7370C76
1A63AC861E5E7ABDFF6EBD23D4351666F90CC1B231EADE122BB58A757FC322EE
1CD49CF837F7A3BB0EC566F30F4B2266475E811BE83358D11EB759735ADA50E8
B83CEDDBC6FBDE23ACC5C213DD58D02216A81D710442253365225052ECAC8727
722DFF270E096FDD8292CA3859740F191992BADF5FF6FC72708C6208F2EE5D26
22243719E8F8D647A01DD5A044B8B652223DFFBD5EB57BCB9524341D8C57CC3F
2FDF9DD01BAE3BB56977F0E8D21158CD18F6523CF7B6316BD3B5694C4DCE8025
39446CCC1BCE2634426AD2B88D1185BD211AD7DAEAEA73FFABE6F64FE70D5D00
C2F204EB2B9AB14A77F83C584457B1565FE02939102013534861328A5E4673A4
B180A8AE1BEA971948B55017E7340B4E1A110BF7ED2BBBB9AD9B8AB909430846
CDA49BBEB1B913570A51B2F96D302EF8913C6BB60C0D01C5D928C567A69429EA
3D1E8F7384A8FAB5E55C7AC9281F2BC60425EE791F4C2E67392FD83A27998626
4141244F3CB985DCF116DDA6FD06E5438464845B950140ADD971D94571113689
C17518C008523C518F8C81E0D820457519442355204FB97C73F21C69E0DEAB2A
FA3ABE1482A0E8E52E58E3A0A038FE7D8AC55B7155B85EDE07CFAC982102B9CC
9B91EFE130606415A78771D1404671122F21CC9CD151557CD0E21717A56CA0AD
4CACBEB2E1DD7F47029E1579A62B5E34FAA3E64AF46A23750F8B09959CF714F3
6997CDAE9CEE295E673BD94BB607BAB73B0B10D6049C11BCB7A16C178CC3E58A
E9EB227FFEC63AFAB6C4C03FA6A71FC346A14CA88291BDCF0E009CC38FCBE921
D7D2D3D877B0447942F6A29D375C190BFAB12DE3FFEFB293782B459B181B86D8
B3217F9204936BB0B6E1F9241A31A123D786072871F8A51FD9B21BC2CFB46A86
B8925B359103B190E2F324EC58B047D5703E9176D3473941F278EEE00BD6616E
A0A4161B9030CF28D8B9C63B57657EE5C8B37D2B233E6CE581D09253F6D6ADFF
676568DF1FB90527374B958332C2B802956D31CEF526C6645DC1EB8F9E9A8005
1C2B81EDF5B55B5DC317C5EB332F25898051C4FDE207F01FC2EC95929653513B
C23A2AEBEAE056BB36132D39A44214BF291D372242340BA0449DE1343A610605
FF377C5B0688013F420403409EFA81F6B5E80114385D6B52E2CF8F33B77DE648
AF6035431A4605A7B3BAC62156DE1580FF6D5B64C90F206C9482B87517AC36F5
3EAFF0911FF40DAA914B445B822AEFB5E3B6C185648120398E67E380712FEF7E
A87CECE176E0CA070806D551B4CED96A6E945D01B51D6E1E03944ABE063BAAC3
26291B5DC30DE8561B15D4564C28040B982EBF82D0914F7C33F549D3055F11EF
0F116D6062165B9EE0BA0C870AB44BB1683934B32095E0AFD080DA0CD80D8DF7
EBC89DBD03C02B591D93497E108A5969895654C00A5F30A5F801DB459733371C
78D511805C7D225023470E66EB4BD8E9C213A951CE15B8948E0D58191070F485
D25B61D216B6DB3697247465D48C55FB4E2D527FBF80D86BDC60DB268EAE4450
B764052278975DA35A724B445CADB06E4F5A7BDEF178B160EC3A7A4E04BBBB46
76534794CEAB380B1E461C5432AD518D7693E6DE5304D99F1DD333991B18E0ED
DA172581E85B66DD0EC79C14FF5AFD4DEA63C93E67D3028D891EEA00E4E4C69E
570E59D9BC7F6BAFE3AACC1AB637788D5620D7561D55C9E03EBB587B340A358A
65ADDBE9ED56DC21E77428737BE681B48CD2B5373E2BAE652F5EC685B59EF077
EF22D373A323A5A71768EDB3C6F00EF26DB5019074F56DBFC2992CBBF2D3BE43
FC7E8CE14C9FF3FB967062736726F73DE91FEAFD7808499995ABA05769249947
8821EDA9FDE18036D39D5F49FE4333CA08BD3F93F9E769D481F38DD868CD2B4E
085BC075BD7242ACD520F6887B80F89660C0D86A22BE594113A00F62F7A57D36
32AE3D8A6FD8E32F1B23DAE7CA267896578F46BE8FA64B8A5F6C606372AB44A1
0872CBD16F8122A624D8D66F323F0722046046DC94B5017D456E865FB2E416C4
EAC2BBAD4418C925FADD7DF27A7AAEAE52FCE3DA1801C755E27369E505C79C9D
23A90FB17FF1C9476D3540344A5ADBEC083B92313C397F0A208E4D20386FD56D
F3227F514E6AA4D266FD5AFF8BE28083C04AC3D262EFF1902FE3F609047DB5AB
1D11EF4A587E569A48CB4193904A78345D549BEFC3F6666785B281C06087C730
8074735831734944A48A0E6B71B28F0F55B5D198986A78438468979FD2515572
24389B666D10556A89EE2E92D49570C4707537A34FF2F33B061DB954129B92FC
A4828FC83BAAC642E71B72794192D1193BD94E99C0CCF702D9EC100066E1490E
464D54CE9CEB8E517F95A53659AA649A966ACF3A2EA59431A513697AC661337A
35059E033BF9F86DB88FC6C1DF437B51F09D2625AAAAF2A089D94C253CDCE592
272FA50EF9356B15C104868DB82A285837E62986F81259FE8B61CE1A2ED96EFA
D0CCE878AF9550D6F769068B96F1F40734EFF7F7B0C53F8780D83CFB474FC0F1
CD987D52D82BA90D318A8A0384439B38D63B94757252062EA448D7B4A7B638AD
6B9A54234FE345E1F0CE798DC546A501FF9227CF4F1BED103FEFA84322FC61A5
2D6F66BE3CE4DD8C7CACEBEB622B2E1CA5CF16CF357CBAA6B894DAADF61963D6
7FBE4BF01A7ACD72330ABC9E413D1DC2AC8C8B575E9209B8206D97E4C59DD694
664F2047063B906413A7F61316D056BF3F966F9AC5A6306C89D289A05C029377
C5700C01A3F0B7FA898E8BB044B83549541DE2264D465910C5DF7394EE947676
675F885E28EDCE3031B1F8E37EE3E19462485F52DAA94DB946C846C5E9E94755
28730872EFFCE44FC5224F35829B3986C68827F3A7E6F3CF03915F269B7B231F
5D9B1F61DF7CB03421C5F4654A6705670BC7B94A33650BA6D2C2D5C7681ABEC6
49A86B994B4D5C21C8C2ADBE3B028C2F41247DF4FBD194FA8CC758D54A38291C
B7AC5C950A0974C74AC62F92DAACA3C690ECDEA5EBC9DE866B035FFEEBA5AA77
C19171B488E7CB8CAF5B6C5EF38D62BDD9CF7072F2714E97474F5B518F0D577D
F22473C89EDB9F444EA9DA277A0ABCDC9D3CE7F21BAC8C2985E23E6FBFCB7BE1
255583782E1082D35806638D44322502D578F815327B4D933326D9CCC68A1586
488177A8C8F976CFDCECEBB8152B9043D3634FC76316335707709A91A70B7401
ED336615E9F77B8AC71D62FA4A930017297841A20A7AF48A0DE3ED061B92ABEE
6184676761594EA8A763B81976FD0D08E8929D70140980820900F41101A7F4A2
80ABE1C7F736EE916ACFE714A6B8802817F889315EE92C675CC9143DE91EF778
79A07CE2AD30EB4F11749324C15349A500674AA342E00623EC98F5164D9AF89D
BBE3B49616C51E8265379ED8DE9A5CBD17434EF11317DC8D95979C461AA69DDB
99797D1DA8C2961F3DB5413AF1E242AB56A36266E2E755FF986BC673B7207602
F4AB2DA5543DEFDC3618004C2526B70DA393F764EE4749A7E86F7E4D048E65CE
4F49F4F52DE53EE6B004AC2C84245C7A402067E25A87955F189F5EC662A9D7AA
709960E30F055ADBDCC7FDF641920A9FA279A8C951323C21D8208CF7F2854D68
1BBF176A08D3C975EC1034DF13534861328A5E4673A4B180A8AE1BEA9719497B
0A26437A89DCEE471A182A206261772BEE3DEAF879D09B2677FB4823D2B21F9D
A186C195BE2750502A4194A89B0BE1A6F2DD9ED4DA61B82C1986E948333EED45
6BD1502C899E9B3A2D378EC6E6C48C0A97DD4BDB10613A860B15C54D1983F780
84D649289E4600583C59E3B12AC24F01CC96287E14FBDAF75D88421DBE9E91F2
68CEEBC5CE6923ADB72394AFDC901932FCB2407ADBDBD37F1B2DF044153FCC52
8DE280D29E62804EACD2BAC03C23894E2D5B6D980A6F1295C15C74D8A53F8C40
A487ED95860B98050A8C53A75BB461D32E3109BA19681D34DA7D5C1EC21BD233
FCDC655E808CD603C9F9A7D897D7E9C788459B39B30321C6ECAE276B63BEBD8E
055A1D93F6CFAF2AA7EA2DF419AF8DD2D9B46E1D2DA14426D57006CDADE0409B
1A248B52378E7ECCE82D12F7A22C80CE90879E1206F6D82500B4E4476AE7277A
9ED4405ADA3E1BF030E67C7B8BCD803B4C9ED2CA50CF9332A8F1EB48AC809BE0
50BAD39813DCF287E7B822B158F4B4B8DD91CB69558534CCE31AE7E157D0B060
877C0C47B03984A9B36906B7EE0A734C90647664B563B827AB8BAEC434427B24
FADC2B172D329D0064066026BA374CFF73864DF886BE2C21FF7BB347D45455A0
628C7EEEE360F6821F0D3764780499D4A5816CC1FD41FA211A5E52A4EFF1C66B
148E036AFB7FF007F18AAB4CAA2CEDB52F8C52188E0DB5CA45552F8867037B21
80897707BFBA71B667209418ECE7B6C3D02F92CE75A5DBCA388B710A80F50F2E
9AEAA496770AD108201D487D0CE3186C129C5F69F695706A047A2CA116C0EF46
D1E6DFCB130E3C89329DD7BFAFF83C13AF40E46F7154198D7BC2C6F10583D836
0396B1B72268C40F772CFA937C3139378FBD9346EF54495659161B03649FB4A3
E3A1E6E048CC39F018747359059D40E2810C6AB44DFD60B2BD572D01AF735E4B
8DE79F66AA416492AE025B1C8AFC1072F7FB0206DFC59A38D0960B0EF0C116A9
6A4D934D0D15FA88CD2ECD42B5EB43270A5F80A39279C5FADD1F62ADAA1745AE
D618270D57187ECFC0EDF5C1A83578340AE2AC05CDA9853154FAA863B3F62A42
66E23A13459056C077EAE6F2F7D510D90E2210AE5ADE0322DDBA57C4B946D6F1
67A57E10FE8B0A72A0EB1FBE7B70C8CE0AE57426572795B08269111AEC679572
9C8D6F0483F604EE345E522AFD19F8C1A9BF023B8982C1D8E1F97E4787BB31E0
D5EBA5C71470E5896A40425F4332877AAC80327A855005B32054DA46B26DA481
3921AFB95C015C39A1E731C7ED558D93876779A6BC2E84AC595B4E3A2CB97108
A32F47C8EC13E0CB4A7EF88EC5378CB5FB441F69584B93903C2B675FCEE20F43
A5502FD9020C9C6D8A7F57BFA655638A5A5725E20047A0F985CA16E3DC2492D8
3D9C4F1661B1E9046C5C572780DB2C86787C42758397C311E01866BE41F12BAA
078DC8AAB0014682C711CCF302D1DE1F28760C9BEDCFC423FFB73441C4183FFC
A38891BF008B5FF4A61CC08A41EB9A9BA8C2AEF609B828DB71D1FB83D2105795
DD8A1ED33DC19001BAD7126B734979FD46FA53FD173D2203F2B5849D24731612
386A617700F737A93751BC46076FB897A42C8E44AB7664767E49799704FEAD33
0940723E0B966383AA9F7CE593D664E9138A33BB198DB60E7389E4FCFFAF2CA7
C2A7066D5EAF3ECFCE5FFCE11000D9D00C7B8A74A64668F7CD08C5CAF1E66FD9
3462DFCA0067C363B7E0C454C8C5773503A13A0850E21742BAACF844A50A8B77
2F1367BC40979F9B86E0987CD5467C6335EC32998B3ED315BE959CAEB806F912
79759DFE8ECED2C1EE36C4D400FAC3275DE7A16A66D41DF06F31ECBEBCA1DCCF
BC772B0D13263A48C53AF6D9D97D7223BAC582AD3F7DD4F4969855413FB3E32F
0BE293E7E34EA76CD7A6914D68F21F2CBC1241EEADFA66C3D370FC11E8E422B4
4C3756EAF32D67336FE4C7F690617DF8488F3DCA27F8B09FD098CAEA440C76F2
0EBFBB6D3DD8D4EA44C19A5841B50695DBCC40E3126A8FF4D010CE126E4E5478
A122B83C4CF28E456BCF6B9CD0727A3205513EB81E64215D3788833381F20F7E
3166D30A71947930FD09ADA8AD681A0383CFFA52FA4F4BECFDEE826FC6425A36
A357E148845767622A77AD9C74170E26745BD803D593D9A2929BCDF68BCA6079
6E88ED14B0E2890EEF497FCCD66A04B3190365FE7EAA1F1F4BC1AE83C8A17798
B511BEAC2677E6A99D03F851BF811A32507A8FD8EC8DDCD3379B0006915BF924
402F2ADE388F8E158453145828E4F51F1B4028F16836682229A1237A2A3B90C0
1A9F9963EB377C7ACD2C2C7FCC64EBD9E47389C0910E1A68BDDA54C5E79E9352
CC17B5D440A1C02E5A80212BCE8D10C24B01115C479DF0723A622CFD9A844410
32E30D8EE57CBBFCA0C370A6DE1A20D3F15F99FD19BE881FDABA2E97B1B3116F
6B641F00B102A439ED7C62073BCA8EA124BD54077C2D5ACAF6481B653843A05D
CE23E96A70C354620694358E6B6695FEE9C7697A52BDD36F5A59E5530E88CDB4
5C0778BCA0D41444A0A3107018971881957FFBDDD19A8EE66E9ABD7576DB6A71
FA3CDF674AB08060A4CDBA3E8A20ED7B1D85EEE4582CE9F315C2EC722BA78942
210CEFCDCD40CE7AC497156696D4AD8866A1F52852007821090EC8074DF9F0E8
0D36FF1FFB71FED4A603B3CFD68AD25993B6E1BAD8B4EB5DFFC4C38FEF42D4F4
CEF0F6FBFBDCBED1A09F68895770EC42B4C8442D9E496B03C1FBD8F92F0E2801
E6FC93A25A359F0F94B0BBBDC8F916B78447251AB882928A1CC8621B8BBF08B8
50237FFA76CD99ABD936AC26E84124A308F436A5A1E1AFEC96E66AB8909A879C
E7D2124E0BC80016303106E4AF774A3D4C5A1C35ED8D6BB5F82F5EA27E909854
75D2D2576C3BE7856E2624C22EFE6F68955CE966A6E7CF8B8657560C08868F0F
2608B0B1BB5E7533A0AE757D95A596FD3E98B4D8109132295FC052BDC6A2EBC5
6A2E3358CC1F5D77FC19A8FD560B1BD76F3DD46CC219ED87AA55CE5D8B5E3562
D7A3B0B344AB19732F730356CFE94F6ED926BA4DE6E00312B78172BD08E242A0
5D015A9A99EA221370F9DF85F4396EAB7F0290CA6830FA66D04B90DEE54FCBB2
CA4074893F360FD2D6614994389A3CED8E923BE23006B959E68F465ABA19EED0
051D631CC7E06A8A5C529CF134A86C04740EDBB93EE75803882556D49D699EDD
3EC9953E14B3875D28A0342817428EE72199FCAEFE1B7B1E10D8946CC9D0D84F
8E6E4F8278C1E30583AAF47EFC2E48512997B6667308DF2D15984B0DD90FFAD7
7B1F9D5F193888F6D9128F622DAA294AE8F034AB58C5C983FA370E2EC5579A7F
E657E147A2AD2439C38DC9379D8A3CEAF0C8BCF54228161ADC5318B0DC9E0FD9
9D51335DA4A279C309F7BF61A441F3DF641BB0A36DFE6CC684A05106D123E731
0EDD14F27B3D0EC2C5476BFE38852E1958B2ABCFC002373FF15E611CDAECE210
0AC3500DDF11C4BEF55A8C0B91BC23D23EF8383670A992072153E224011849B5
1E20A8AFD89F079EFD3541D1632201942433AF83F1A58177936B5A92883EABEC
28E918F905236172DC4D512C963A9C7AF84F82
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC76B5FD875ABAE3E6DAD7
9EE2B71FBAA76C2CF157574A30CF7D71980C9059C3D6B6A3204F03427D0C1ED0
63F935C93FEC0118A7769C3492300AC5C68153E7DC46AC75E4031836536A9FF8
F9855C80511A27D667AE834A96925698006601802F57A614BA454AEBAD5381A9
33E9E2EC6A78543582AED8FADA73537FF0C6D7FB2EAF256CEAEC65106F666E66
BF183E0F0E4775D00C05AE65EAF85FB57223FA553494EDAC82855AB977A49791
5342A184DA5589E192F08B7149CBB9903A5809202C698AB39B218ECC7BB9128F
40DFF15856E79E10EA85E741412DF41F4C59FEB8AEF11EC7D1484B17EDFD7F39
0EE3B12312F51B3512559F1D609D0ED4BAD7B1C1C003F982B905BD7D67725C83
EF7119C2C4ABACC0DFF903C17E5B0BC25F89AE84006216080ECAF450D8FF2A1C
A4BD4256B7E56091E388284DBD11F5425FEB05566B96D20438400E0E78630FD5
05A174BEB44068BDD70570D038B3D9F60F63119EC9FA765E6E318CA3DBEB209B
ACED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EEAF1FBD745CE175B921697F
9D9FF0803559FEA21109882857594189F167F40EED0DF7150DB40D2B141DCC1B
60EDED42C0DB0FF95359E700BE2DC30F248D1BEFA38DFC784CE855754BC80098
5A57640B2B6105B2D2C996F6D44657DAF5DF5891AF008F869D7AF5E4EF1989FD
377E9723C5A85CFE645109B1AA5FEDE99BBB3800D471BB00C657884722CE9678
6CC228DD6BDA9B4F88DC224D329F47D8E9A61F56E5B463649E058E104A8537D3
D81053D9DFBC564791CA6CAFD44529A22B1E1E1B4FEB64AB0950733055DCCC2B
78551535EE5DA52B7AF5030F8AE1482312B61697C4574658A3E865BBEDEF8E1B
CD305A5ACF3C44E769368D0593ED7C9E2AB4B0184BC89A05CD2D29851EA57424
D61EB6B784F740B8E0B3E03FF9D907051555C00416A0EA6EAB6AA9A9C2805F46
DD33536E310CA9D69717A52C2A3DABA7DE4291A28B64252FE32F1E825F6C50AE
8C0BE20370BAF7C1B52A067A884BEC6465A5814897382C0B7360A9FBF7B5252C
0274C581A2005CB515170BEC2EE66FF8AF8CFA76772D207D8683066FD5D51EDE
B31496012FB2F9CF2B71058CCD97763B6A3F95EA470066F36A09F1CB3BBC4F26
EE89E4F31CCC0872C502A1C8B0CDD787936E41B4251518F5F104AE5CD4A2FDD0
DDF0A49EBF5AE2F2B48CF2FFECC694D26D54D22CC042E184BCC24B3A24A2EE02
87CC9B31D5DDCA74AEC3B0951BD68B348F775EFF7AFE7DC3807891D039AECEAC
3F500A09579E6107764550DB8E763943AC6B7E96B5AD46DB008CFEFC57FEA529
B1A39A6D5A637A28A1A9236744BC166B91015A118DCCFF71287C18CC525EC8D7
3AF17F67AE52BC83162C7E24A3FF370EEFBCD54039208ED7DA3A6C181536F001
3360EA2059B5F7BFD55E90340B4244BADD57DA59039042FA132CF54473AF0AE8
0410C4FBC3A45FBE3BA441881DC9CD13CA0FDAA9BFEDB9CEF1998EB975A32C3F
C4563D333529F06FDFCA1636023C3B45D99837E560B85394784304941D884646
C328C7B77E1C3FD22A147E3E44E556C981C23D2B9D8D0304DB1745BE10587DAB
F1A68427E641E85E4574BF359F918F2B9D3FDF5CF9C116B9C191B49753E7688C
E5356D6BD2F73A46212368CC9012404153D4E5526B66BC38B0CC9669D8D3BCEA
EC9258D51FEE724830B54665ED029C213CF3BB4A518522A5EE6D6E2C63E40AED
9BEF61978D1C0B4418FC109D76990019363F72B37F6DC5B93BDA314C4167C256
03722DF8F19F1D293DE97870BB576EE3FEB641B33A39173CC1AFCDF3D79CE4E0
6C5CEEBACAA228078E63369F52E246723C7D0B2789C9FBBC3165C34863C9ED6C
46D85A5EAD76FEA954B700C381C6793D5574AF08AE5A4FC89880D4A8DB59D1FE
15462CC74BFB60D38C2AA5F2CDB2BD662749FDFF8BFD6B7B6B8B82733F531FF6
61381DC983DE2858E791FD4E36E69AA853466C71E506B0E121ABB2931309A431
84D390D40F3798E2D544C5E1B1EC8AD43FF8FD3EAF384259D911831536E2F66A
2B9F9683381C56776D27F95AA5C1EFA52406037E2B86C88F3E83C98EC71CB862
7476F2964ACC6BFED98F0D54D93AB3AE38D3F24C63EFD772D2AEB2CF3B6D89B5
E598CEFE581529073A5E8853C554843C06DEFCD3D6459B5D9116FA780FFE181A
696FB51777C88B95C5DA1613D52F0B05412BEDB2B9F46B82A1C854C6D6ECDFFE
5C9FD3CEB862C7A09D086929626217F6F3C92AC03E542912B987A9BFB8FFCFCA
F350197789934689A185DED842C2A0642F862E14B66919AFD491F98D85CF9C5C
E4E5D6AA1C6F813D68C3D0E18DEC5682F6460808F64E14D191A136FAD0C22A17
71AF31FA95258B6F35D713005FE7B9CE6A7410E32401A3DFC709FEB708BBE2A4
2CC369DA41DAB8861155A0B48DB7048568AD2767314C134DE34AECE622C40AD2
D349F0A99EE75CEDF13EC0C28A147FFD44C20F4FEF9B7C06072E0398F740D8BB
D104EBD00B423765C2FF3AE200C83D5ED0A48664445010A8937F061B9FA20CF2
EFB32200703EF58C425B9A7D255608613C40802E0D32EF0DF8FE6F2D4E2880EB
4A142CC5CC5A245A39A7FD55D42E3FFFE439D20EF38EA4183AFEDB56999D5E9F
D505CB2D368D0F4BCC5D71D81727DDB728C97B2C590A835A6D3C651F84067FFE
F9E72F8364804DE89B9A39149E124C564C5251F613393060892D5129DF9C9877
3585EA5E4D316AEAC8CB4182A887EF4B294EBBE495E6C242EA7B5C525587613D
335148791C6FB743076DD9E879857B6B39E7DC1FA69943D9D567ABBE772B7BC7
43DA9F3E4CC07736067986E397D9FDE103446E41BB5DDDB1F2F0DD388E0CED06
7B792A1170A1A5CF4030E9D16CFA4D5E4A384094A1D84A98A21BD69CF349EE82
607495686545D11C0E99DB92988762E6585B31D75FCA88B7070E2DEDD1593FB0
DCDB5087484584C2F7356FD6B5A93E9118B3322A5C34894BEB40BEE8B5C55D9F
59B7CC0FEE7DE8CDEF76B79746DF911F556899F819A7F99FE11DA4CAB62EA76C
BCD8DBDA1CC34AC36703682998B1C19239790F6B0B3DD6FACF052D2E1C0EB346
72AA7F0D076216347353760B35CDE282F10F4AB8020F184070568B13E980B20C
E24ED96E7EE72A3AD5AC654B29BE5E3F74EEA1B900DCA5B54A71495EBECDFD03
53655C34FE244B430BFFA26066C7CD27258773D747DED2B68D22743E456E2110
AC585882832B7312BEEE75B0C6F18FECC008E1573B012EA2371452E23091C65D
76AAB3B0B477436443089CFDD51972D8DBD2ABC7D011C6D2D65F03B4F6F3BB08
CACC6436E5713A61ADBA63A38EB777CF374ECB550D86A751E25B22ED67B89501
24818EB258558D55DEBAEE736958AD16073794C893B9CE977F7FBF95D2C47F97
9C10077D2CDBEF60569742932E06AEC82A22C9AE93500AAB1256EBEB0D9B5DAB
1C7D96028198DFD7488D92D5377E0D9010C431E2D5BD26ED30F5D86AB32DC91F
6D787B92147BCD955869B80587746A2C55B63866E552FAEBB22F58DCF6C885FF
A8B3E42F7CBEC366E60C18416C4C2F689BC105CDDCBAF905C19B77D2A4807506
8836C50084C16070C4D6DC4777ED7A723EA37BCF5808E562AB9E9D4CD41E0B29
0F4767CC576F85D2ED391BA053E403544F370D68355C2007E89333537459BED7
9B9B3EACA8B357D1EC4A3D0035E2A57BEBDC39E7AB9B8A6C79FE20717BD75EC2
5A96919B0623C4B487F73D78D9C5A40096DF7BA69F270BE9F4B41D0555E6B3D9
69E12C4E871B24F07E41630F1CC9B82B395BDCE1885A1D5F3441B03AC6B3495F
24579852564EF01DC4AD98F15D522BD15FB9074ADF929B90EEFB3B1EF3AACA3F
CEE17C7835239CD824655E26E5ECB3811D95422BE5D90F0E736BB7657CF2A5AB
C7090F06E79A8BE6B9EC347BED7AC15B9A3B0CAF7AFA5D20A5428CD87225C7FF
28FDCD4FB898A052A0B1A3CC17B24EC39E1164A06C9A13B541EB4AD89289FA3E
D9860D1E2BA4404CBAFAF99040CF04CE4DB5A8C71723B45F3F89E3FAA8AD725C
FCC84AA3BB820A654E2172ADD82805CCC3A752A37735B9C1F81610054A54D769
65628B653812E20CD44F485912FF174540468AB1C1C5BB7A38244F516D156D28
2BB7BDFC55B4522C394B3A5441598C496AE56C594ED6F276069D11ED9BEBDE43
C59E2F387F40A791E4A62D5AF6B69ABD9CFCCAE361770F7112D3525944F284E2
2E30D2B418CAE285AA38F9FB436D3937129C9868D4AAC414F307488A9B054FB5
B4D0A2B019B3C9630894990B5B4CCDEFBA8FA1D34686001ADF08CCB3417AB559
1E6BF8490DA0C23DA2F68B499386161B4BD1FEB17C994AB0353B91D6BC325ACA
18621F9F14916D8DDCE627E3839477F4ABB1565BF009732AFFDD2FF708C1A3F6
1EC50C2372E576B0B39D5736EB891101032D9E0E209E64E92230E836BCE00754
38EB5C1DC0E7194022C2794174A36C2D80E7E32A732ECF3856D43066A459E432
2DC29B9807118332CDDC0D88E7CC1CA9CD67F3BF4F3FC525EABDEC8554E1B61C
81BE88E2E32828FC6527AB2B1106FC6EECFC2FD37984B6B44AD59BE051C0B91D
4BB0C966A52E99BF1C1D6CC83623D20DE450B1367CCC4E89D6D604E5946429B3
50770BA66D6FD926D4D51FB2F9D57ADBDB79981672F5D7278419D03E92B51E62
CE40C25D780A08D5BD796ABA334160229587F4DC11F6EC986B036931B2291933
374888A6584744692F87A67A218BFBCC8E4A144C3ED9B1676110F9C89AB74DC4
418F77DB1E421DE938CF01941C2768D80733E456821FF981702745D81E16C76A
B405E68746B94535F38840BEC013B783E6A8729788509C64277A9AFD2339BDAC
1F73578793DBC5674711E6744E56631FEB5BEDACD00C64C344DC67A6461972EF
B5549D56C3E372F126A22A872220273191166ED09DDFFCEACA5A433EAA684798
E24F49EE478851762DBCD2B1DF63FDB1CE3CF726D64933BE3E7B9289E87FBBEF
B0C2AA8932A66D7782371D3D4884B50E1295C517FC56BF309E10EB06135D9789
ED82968EE23E725CABF73E2B96A365F93032B68AEE779AE3F1257DF466F59181
645570273E3EF05A00A57078A6C9289FBFAB908E868942C11A50DA1A7208C46A
EE9AE963718BAECBCD412C2BC6BC6E3463E0B13BCC0C763CDD3627A3737DD414
77A8BCF7CF9FF9FF11188360AFC84BB2DCD919A160C7AD5BB562C37EA88044B1
746FF6148CE49015828E2C2CA02CAE79C84DC4D6D3328DB47A624C0296A8ACD7
D8A62118514F9A43B023DD3A0469D988EA01221F330746FB913FA421FD461C6D
D528D0DF17F15FF78FCEB2CA616D526C530E1689FD1E7BF1B2E2DF13C4B64C9B
FD510200C2E03FA0533228F6C30F8FEE5DFC7A7593A18047327A70393F396D38
50CB0EC9013F7EA391C8922ED288DA4ED0C8166676C54A225B2A6F846CE65D58
69318FE640DE6C8C6BA0910BA248F9AC90ED7B624CD4E5EB652F778F79421651
7B1B84F0D0869FF15ABAD0083FF4BC53CB4E6A826FAB2BDD171908E46A3BBF2B
8B22DAE7BC3650E52286E6F70EA5546D79D5B248F2812B349367EBF83D7E1F33
5DD114FD105C9F8815EE6D17F25A1C8B7DA42FD174A42C50B313CA3FB2B04635
D43B682FEF799CC1DB95DE914558AE8C2496F8015D26518F63510488252D5564
2E3F3B8CEBAA0B3BB333776508F468843263A1D577859C49042A0D0EF87FD638
70B38E4100D67ACF9EB4C072D3196F99F99769FC61F47D6C101972BC861F80C3
6AAD3511F899A80ED9503DD3A3DC42C9107CA0BAC50A027BB01514BD9BC50571
7FC200F6039D043FB5759B9FDFCCEF0A928C3B4A2801E3735C1238FB68520A56
BBDED554E575018D9AD3652C529DA22A5A9F0AF66B44344F1DF681219626CE94
996BE214AC88BF14CB44C210BF44141C72291EBB107B1FA81DD123F8434BE971
D9EC8149468CC0F2C45ACCD1178437E175131C8CC487F7EF853BD1E0232AF3C4
A10960AEFAD538B644942B6B97E778000DE2F2AC2B228D509B0ECC3CBAADD93D
E6987111C9C304CB555D6628A47709AD9CDC3302D01D7138DA8832FCDD816A2A
B41854657FC103FCBDD935769AE28F1BB1EA4029C7C87BD07B625A477A93B93B
A8E0E0B086C29AA069A41EEED25AAA351E18B4EBAF5DB938AECA1124060D8D13
8F01FB4732B7E12EF2773DAF259E6D1B252E4E34BB5437F75671944B1BAD97AA
7AA98DC6CB5052261D715735810768798F2D9BBD22DCB24CA9CFECAB9938F99A
2394F2B5338FB07851B45925E649AC3F7C555829C9CAF71C5318B590F2A0AD9F
D325C398E049FC951F28A391F664BCE4148D37843E7BA13D63A2DF6044F4707F
3F4239774EC5D2A530382DB6BD15030D7B40622753C9A7F0B1C126314700F7BC
CD3396B200AEC477909C2A7CFACF4E2DDFA16383B91013A9D01E04A412631402
BCB7953E285FD626E103E3A60D9765F9059895E4915405709607F4B3FEDC85A3
A7325BEC212BB664805A6ABBD010D85C3565B2ED2E163EA673DE40DDE9C57743
3F1C3461DA816138BBC8B837790C625E702EC701B68DB40148C9FE39D955FE41
A89345805ACD15B985BB2D00197AEE3C0F83A50E05A8E6A0FB2038E2C4F614E5
9B395D1D9823D7D5F126D93214B50C987BA805BB3BD8F7FABDDB15C7568C36C9
EC5AFA0F3B6DA5E16965289FE28186AFEEC45CF8F5AB034EDF79DEAAA1FC2146
237C1D110D4A10112D496250647F37A36DE5FD87D4DB565A8C6E527BF76C2EE4
2E59C6C6A042AC156C12A8DD4CF75D5B36BFE119AC55130DF559F1BD80C5B936
FCDC451C50C76BBEAB3E02336A4618FF7036976633033648C936C547CD0C796B
110C4FDCCA3F1B81FE358E963FB3DE11F7DFF7D47C96C4722899060FC8F912BC
2CEE059687FE5220B6547F10E5C09F9E499346B2E7B7B2D63FDF71131FFF47E4
533DA66CD9916403176768AA491C365040B9654679EE7EBCAAF81EF4540E579E
AA88C5D8F52122B8BBB73BDC31C477A7F1FC73B49906DB7E1228A8BB64EF2EA4
3D7C1FA208EF44EB316981B1CA39BEA010B3C6F6AE2F5DB222525CCDA88656F6
4C44A83EC6AB38547FFF70A5B6DFBF7DF68BBFEE25456BADC1A12FEC7F9E54E9
2E75E48291ABB565C1F8644CD5D9F6349E5907563769751AF1D8076E19266EBA
AAAF50F33052EAC512CA317372060AACB1AA7D7D6159E8D91210F2680C21AC77
0E51AE71C71E6B7796B6B54F27FEB1D9FC75A1E77B7716388AA987B266D62BA5
841AF5ACDCB7E2CFD3750A6E07486D39DD38FEC1C6FA2682FB89B797E70A937A
6D0BC305BD5820C99145AA7E7B25CD2E2CD662EE77CD892A017557914059220B
58617297C43DFA17B32B2DA549EB52152BB04BF5A3E95CECEA846B5E158A5662
1C6910F350B8EF85203E4DAB28B15D18FE1EA497486BE613A4D07728245BAE9E
AAEDC600B0EF658DD1A4DC8FF231881D85C822D90730ABBDDC0F2CF53AC189CA
3718CB1767179A1B63E40EAE3829BF4CE47841CC9958B70FFE475AD631D13A80
2CB7B6D960A86183FAAAA64996642E3082DD7583FE4BC0A3A30649486C002BFB
9868ABF2124867B579F69E34040E2AFF508CE7AF4B0D544E76DD095956B0333D
16019A6A972910DAAFFEEFAA0C2F8BC52483BAB18CEA58D596BDED31A69CE0AE
0177D2B99B9AFE5FEE057A8A193850B5C51C5B6B1416CD777C55A39BECCA7E62
2D460701760E7495135D6EE1215286E75A2B401AF8D80A714FA9764D1F94A025
EF53C533AF3B273D004C22CB71BA294550D4E89C73DFD6CCBAF383B70A5F55DE
4E919ACD596A9D502B2FCBF9DC15B995D2B71FE253DFAC85CB745676F87833CC
5803627C6DD6BE703B8FA58E1B03E56F779FBEC972E383758D612268B74D800A
3B6AB946BB2EA31EA37F257398CE1E359B28940FB1DB960F501A93455644ECF8
414F66199ABA373DB1AEAE6C06CE483ADA65B6260F0EDFAE9F825D09A330FC50
AD97E76719EEDE81E652B0347C8D04A059F61FB93A4880BAF9FCE4C848E41EFD
CB5AA1EE1DB0E3AC051E6654EFC9BD00ECEA5BA15FF061F873DA9220FF3CA685
CCE2EF23F6B3FA846C8B8B8A7C02A5ED1742EF3CB42EB0ECB3C9C5C3C3F9B015
26D9D71A74984522CAFBAF6CD275B1AE546397527506CA0C9A886441FF55ECF8
069E82BBCE141540E21EA8F9253E6CB7433656B87E1B0A17BA09BCD3A2A87CC9
FD874959462454B5D439C456BB55FB81B4DC46C236DBEBC18195D4BA3F2D9C1B
A99FCFC7C1AA02AC2D0BE25E49A815619A4F69E6142B447900FDB1DA07A85508
A9F2405A282E1B51C5C8A6EC490F540287D85B9F7C1800BA18A9437C91EF10F1
9C2DCDEE1EDDB0B6F3988E1DEE273B2E7D2DF24878CAA34EAD81BDC76197D97E
CDF3C410189522F61655505F37D6A182ACDF7D3B1046DCB89904A846BEB90626
9EF691B4B66A9FBF2F42F869C1DE35DE090F1E6616D745D03C080D30E00F6F43
4922CB64084FE7BC4F5B60542FBA3BABBAC93B61A938F68FD787DC530F7383E3
B9EE0B0A882F18427AE27053815DF539E3774A65EB9D4782B0B8251CFDF3D178
017821BA6915C5F45D0E78BF2EC3E236B95EF9D81C6294337F123C8606767394
157BBFF48C1CB6341FA6E33C3E6D72B7E8EEF44A34F5404C7F799FC22BD8197B
11E1B0AAD54245A32F7803B9200043E29A62AA6361AE5A39C14B12F5587F209C
939D8516182CA5F0966CCBF971FEDE25E7328428143F6B180067B2F9E68C5528
E0DD9A56E20DB0839D442E4D291FC422B5D269C60A513AFBDEDFC1AE7597143D
514298FA7C892D566AC886D9C2D17F9C23C68E21D6B8CBCB49FD9FFD260F56CD
6070B916527529102FE9F8CA979043CC0A9796E0080E45D33C5A4B75DA3161D5
AB80476A0E2F3CA21869CC19CF9CD0F897F0E26E2FA0FC5033DBEA582F8B4013
81B9B86AB1E1B7E0C048E100F1CC4208FA18CCB93DDF3784D054AAF95DC58EE4
FFDBE2D64BED64FFDDC683B50F16A3AACED2042AFB7CBCC1F139B6B9F8600A76
C34590309D8A9CBE69D2B6F604D5DAC09EDA896ECFFB9944EB7EEADEC7BD012E
823A370B138DAD33602D146F2F5391729B51CD703B8FE781EA15E51C4099C380
7A01337FA4063B87047466804D6AAF417595F6B9368142FCB34668AF303A6455
B248FB866D74CE7D8F752C4550397AE68035EFBF876380FBD672278B9EF441DE
94739A4F0036A5B8EBB5BC7EA32B1F3BC57C74409D536BCF3181C91EF4D0E75F
1BD0977B2A69F53CC706659FB606FCCAAD3CFC3B3AE91F01D400C95E13435448
D6FED37E6448AA04323974DC97E9ABCD0FE2FEBC58C945B3E69E5931F5E101CD
5755CC5539A627C3F2FF35921B11EE89EC4EBB1384878378F1C62EC04E23BE99
C97D290292DA35B180B5A4F17FEAB6088871D203AB2DBCD015EC7380AAEA0E34
2F54E13C3F4887CEB8981A6EA85C135F60246D47ECC90571044E7021E8399BCA
B9D51FA9412407E10C4A4FAF36CD27DA3CB90D5B442854AE79405374E0CD5FA2
9B8ED4A8217BDC85C66DE8242C58C6BC26430662D2EA4F4ABD625E32FDAAE59B
1E1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD43375A2C5CB23494F45B1A3
78C2334376FB34610D1A480AEC604CC50026FD0FA59A0D93F91021E7A2A4339C
E19669A636A9B0CDA1509D95CA8A85A9EAA164A4716C5788045EA5A9E1CAA5E9
4B0856CE64E50BDF59815F4195CAA4F01A7623989D0E44CFE448D332EFBED44A
2D79E2A881282A6239609D959B3A288AA3F5E6D1AB7F466605087C78863DBAAC
FDE460906281D5BA5ACCD188EDB29681706DADD0814370DD82648DCC7C5D049D
0E9A984A2D21957B430996030C42BCB6B3794F51D6F7DBCCB9A3045345A71C51
C1B1D3F58F626B0C4F0382A7A3F51A65116EAD737A7AB1D63393DB4A3AADCA38
9CE1ACBF20AE2B72979A8B5F2E4DF2F0E9273EC494E37324F68F2914E3959180
15A28BF09B926DFDE5F394A54086EC1AB27CA3985E4B3EDAAC1F28BC96B2CA44
854FD16417A7461A576E3B3D9C5E5AF62AB7BC7DB94F56A0800FAE7F4A952D09
6093ACAEB8F43BA217E6E3C8F19577F6E400F8E6B2F779B5E4A06D7C0D022BEF
43BC1E37A8D5922C9E5A8377FA22BCA2FBAFE2290E8AA03A28847AFE8A99CC31
99B44A920715DF097FAC7F5A986D92776BF790ACBDD58F6981FF58BD0E3ACAC9
3C4FFBEBC6007D613F23E810E32411D90C2E6ADCEB16B34EE0E57E0CD0B4B588
26FFCE9262907F25AD9111BC334B0C16F2965D6AC9C1B17CA161B706FB78D45A
A402B5EE099644E30CE5DDE591CB23C99D6C95BA4BE3078D332E75E6FCD6D197
74116C99F85D7C108A0C2CCBC094031C7139367941CA39AA6DDE22D9E20A6583
A90194B818C87D1D52DD6B78C9B469AA63C8C15CACA1C98CC87E8404F41256B3
DF22C3C0E1650DA02EDFB42C4810D2FE7BF278B215DB9A61885A88D88D64E7C8
27B01A52FC3FF1E48BC9629785FB31EB547C41394CF8A276B1C849B8802C322E
DF465E72523731A096919A46B0354E6F4184A66F97100BC2D099309EF28A6B73
A46BF0AFF136F1D2B16D83BA9B18F004B313837C7400CFE50F7F3534CE92A3BE
7E59B3F685C31D350E42FA13152A58E4DF1E3545C17D95FC6E9D36A82FD5B3E3
D2201CB19819C28263893057FEFFABA2CF401E5946086ADF99ECFCC4461B595C
70BC08D30416E6BA194E0B86209C59631C5811D0CC79DCC5C2D73915AB87E8E1
BC964FB2784C9E13F0795427324E80C175BC99140176928C082619C089CC36ED
066250AA99949CA91F15452AB13A459F59576D9C446DD56ECE6A6B5438E4FF77
5A864FC7FE969EA834972ACB6C9FB17B01833D63E59E3E080EF41990F514859E
DAFF646FC9901512369941B40653F65C7E4D20FDFDC09FA7737D4AA4D6D86B4D
448843DB665451D7D95B2D0C57BC179F1E4EA1981FA75DC53DC7E39ED5DF5D5B
049F09A5729642023458DC41654D497571FDE8A4E2F85DA1A213F84A9EA913F6
6734602C39047FD0BAFA91D2389F1C2E3B262CF637670FFE852DE1E90FFE9325
EB3E9F8552091831DCBD55387DBF7F59869CC9A2D5E699820F4CF92C09C7BFD4
2089B469CE5593207C521F9CD08ADE0BC6985291656DD4DD0D60BDFBFD81FFA8
A87C22520207570D513B06AEBC356EE5059463613DD36491F24D7C3D634B25C2
C8D4B8E4CAECA175260290D8B0FBA6DE7DDD436420D72364D0E9AD38050D7784
B535AE6D73BE63663BEB15062186C975C2F574036E13FC1CA59DB02E731D1809
F3CABE4EBCFEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9D9CE8E123C3FEBF
42BD06F669C0CA2187337E87C6ED741BDB45C491103B6C2D4C14393B95D12FC9
F4D36F563DE42686EB73EEDFD49DE426BAE93C7065B09977A242A133713AFCDA
C01BA256DE73FC8BE63397C8EA891CD418E06ED4E789466852BDABAADD6B9E6E
1B71655C46DE2A52C8067FC63D525C0F838155215ED01289E67F05821B550384
2E118BAD386E3C17AB22A0097CD90D1EBE972FEA449E7A83B1927ACF9DDAA971
74B4BE1E37C5F768ECFC3AE01131AC227E63DDC1F8B0F70199530690C14683A0
22C39E546B0D7DA7ECD1C8C6310E4713FABABD7CD290525DB68F9F2E168FFB0C
8BB5E7D0A50B33234AF28E55765856F9C24445B72D59E2898450699BE5ACA02D
B1536D99057E320BA867298C9FF511E8DE1A26089D383BDBBF27066BF4D3A1E2
465D8DFA46EAE6ABE863D7AFBDB909A0B9A947C05660C9D279613FFAA3D65FFD
AAB3B89F357F7F55A33A67D05224C9DBA79A84DC57C2EBDA8E422A9550A2EF62
BDDDF16634BA0704A37BE9179EDA653BCA0422BFECC59F2AC29D7605F00B0BFC
2C39A98B88135FEFC62A92726E5197A556E05CC460DA5FF8BAA066043F44D1AF
3635C93FB02BFD3C100E7A65751929D0797D1C23EE03039A8FAC5CAFA7A2B028
395D9345A98973E2BCC93E5C27D1D7015D613B637F19614B32D3113FEDDB8BD4
32AFA686B93EA8851808FA65D21C48CB36FDF606B81E306AAFE89BFA0DF9538D
50441B5B1405BB15DA7FF83A5661C83EE698716C9F052D6C66D3FAEE0166ADE5
F16BE5F1CD6A362C9611CE4C3F21137710209806D7C3E7739FF062CD336D48AB
C3F5E23ED8FC35BA33F568888E01A8006425AAE9B724F03F06318611075D77F4
D74F7A9052961D0C2CD09DBF020D89506CD1270C0B3EA235BDEFE3E240EEF1FE
69DDE14DB1462E4F9859384B15882C6B0E2216F5874EF368BB22272D3602677A
195ED7B734278171E845B6FAB1037FB0997B367483D2C8C0D44E6111CEE2EE92
5D915B631D0B097082E73509B70F0C64694B73BFF296F181DA63277A28B6891D
DC5350D347DB0724353AFF2D0576FAC83B213333DAE658B403207D2824F6E97E
8E38125F653A26842C9832772C15EB82E86734FF9C269FA511CBE5E5D74E6D3B
251A6567FBEA785D838A9506C671C109D9357C3D53CFF50F60D97926F71A1A70
4B01EB06D2C51682D23ABEC2E24FA835DF271E3C376B5ACCAEAD099498D76BBC
666584D25A8599717F9EF91A6AFFBF0ED590F986977994BDC068A61B0DD5FF9C
A582782EEFED21BB54E07D94B187D72A93518C1C686CAD65DDE0CF3149ABA513
9548EA09718566B9DE86D04C3628DA170B484511DF91C6F3D21FBBAAD00FDDDA
BFD9997F399B511E334347AED468CEDE89A1454A27484A481372B38705B0CE6A
EA8C43CE8FFC9D1AEB97BAF55DA23B2FB4A86F1F4DB33C06F6E50CD5E02F0313
BEEF1080B8E63CC10013AB1D1645E399B20090DBB60D0B3F5EA1A13FB288ABA2
C2054A7EE25762D02DFA0029231EE1E3133136F8B9E7DB037CE9EB308D4EB08F
41F3C2AB7B1D4EE45BF11A1645CBADEE0BAA08C4A5A3C3F3998CD3328F0DC964
B5E8FBCFF0488D22883A4EFFF3493935C05BD6232B0B747A512E7ED6AE24C151
11AEE8B0120DD8E29CC460BCF8508A4506CA93A854676CAE3BDAED8DA7D7C801
6D0FB9A3F1D869255EB21B016AFD3655F66750D3FAD238103B812806CA1BEFEA
E26D641D49B7A3490F09BF16B8D17B54D21B30140CE83AF772E98E8CB3158C0C
324C6C762EB6B75C28196C45BF03932E9270A38A5D5FF22CBC9322E983871D88
3DBB1CC9F5BE250F123027EEAC691DE5848A4959E5DBF801CDAB652D681BC673
C26D3C73FE1AE133DD3457D17C81740DAFE000798A2787814333C50AAC6D552E
789A1B31DEC7E8D9D51D81B8C07066303958931659EE7211854D497B84048CC3
6954802FE8D642F2BD26591A1AF37A647E9983184BB1D4262A7990F83A59D950
6BF691ECB496D36B6D575CB14DE008AEE4AB3E2A63DDF6CFB6631064FCF84433
ECDC982117E4051337D7AD3D3487FFA46B54D3305A460F868CD85D2AA9D5C885
E8E74D5F231B37C3224D6E9A5A869916EA55D68ABD60567F307D6EC471F99B03
CC7B5E8140DC0013337D5966A35557DAF14A4FAE61403855815D8F79840B5C17
FB9397AC08625C202E9BB2A81577A0BA6A227BFE8D590992254C9ACFDA5D5D5A
18E5ADCD42EF2EC8A8089EE151CFFBFDD570C4C889FF6E06E89C0A4DD6352528
D66FC839C05297F8AB66A0093B23CD49DC998B0E47B9727C5BEBF6692FB8A31F
5ABE35A198ADB0555C4F6C3BD429A9EE05742C16C60A4341B505BB4602DDC56B
198B4CB36ECD96CEB82DB4F150E0826E153180D394B568C4056F4621F4C29048
731516E16076F3482F71DC669DCDA55F2D504F45CAA0E02507034F043B65E123
8AC2BDD7FB48E940EC0639BEB7F11F2E56EA59E9C2459EEA55DE47B5A7376D23
1490C68369D7AA11958CB98BCAC7C25E2B0B10EE7934C215451BC9D441EF8278
B9D00EA809C564E6FD488F2C81DDBB1ED0D13FD4BAF26C1556CA219AB468B588
B6BB4916556446A786B66DC30FBB57A488640C3D88BBBFA3DD28BAFAEF400F21
A35667DC620502EE76A5D7DEF679902FF59E3B86054DF5B3FDF8385658570C2C
367ED572BC910D908F7DC81EA719C8F7EAE852880AC99060EE05DFF3E8A2D06F
EF8A8810791D8613AE632F369D2455765BFFD8239D0EB37A83045EA6862149BE
54B789665470ADBFED8C929ED08CC0B325BA32CFC361695B67819159F7D3AA41
23426FD4AB3FCF34FB778533D72FBBC0D754AD58FBF92629DC8866A0698E72EB
E1C0C1DFF94FBB5CF83F65A6F1952EB4096C1B91B6657E2A194C8F01E5693BCB
A645B07E11D8AC59AE55F0F7D4C5B89BE54606BD96D7A485AF1114173E61A360
05E1944A339F3331285EB0855B7469989DBD397E1A500DB4133BE1B4A2FF37B9
2CE6C953A91853B38E12AADEF8F3E2116E82BB40FA5F2CEBF23C4F738E9FB4CF
446EEE451FEB9988A093555A7D35BD9676F71B57619324C5DCA1C3E237852F2D
4A4D45BAA85754EDDF9EC01F28EC7B1CB31D98CC4489F682CAE39E3FE7543C53
92CDD26DBB0B3ADC27B6ECD62DAD0950121002350D0A3DF2848607637DA9D9FE
3819B1998273EA5EF8EE032E0638F6DCE41980235DC626ED3A0752A698D4275D
81725E961D50F182C68E261510E8B82A5E5CE852D1AB080F8E3F97843B172E40
E7CAAA3A6EBB0C27F6B3D45356DFBEB0F12864B22AD2066DD9E879857B6B39E7
DC1FA69943D9D567ABBE73D0D41E364FFBA48BB844B5623950E6053B0068BC64
EBA4A65C4DF64925215CC4DF3BC0DA1077DE75F932A39D5873CB0D1472445EDC
8B761635A25AB894750A1AB42F24F193526894BF4A34FCD2A8674D1C9B1655E8
3CAD32A474C9CB925A84ABECFC00B4212CDF4E88876C2DD4E53F0763EADDD822
C4806C9910021263EC419BCE1D833695D9CF48393E530139BE17DB6A1EDE4361
3759B68D1321D04028A12064034A7290750EBC897F11987CE12AC76F1A61998E
D4A65B374EE14ABD4D9064245FD0D20797E135508B46A864D8C10A0389EAC459
20631FEF52CBB6AD221098F3DB66448653E536A3D89386E1431C515236A26FCE
EB4DEDF80BA158F65C546E9ABE7B6415B64E284336426DF9562D021B182BA292
4AA1DD4DAFE4CA472F83F56BBD3DD789619909A6BE5CB9117199FBD2373594C0
296B7A8C8FC175DC6FD9A0DD7BD39016B7D3FA7B591B301CE2AB57F8B4CE5CEE
B7482302CB5D72BD92E6CCD1E2343DA01E1383BA6D010A596CBDCF5A96FA3215
DF2074630E8CD6A2E4D13A42A534EC7EC672D7560AD5C4F969AA8ABFF5C4C36C
97C23029D2599CCD06FC306E63DAE7ED90A76B6805FF4FA0E81426E7F2AE6DC3
1CAB00CFF72A6A42485387E9168CD6120B8A1B03ACA50578F362B14433BDD91B
A70E84115929BB08D42023B94C5E0CF89B15331E5E45AF34161186E06076068B
A5EA2291529A54BA6EBB99DCDE2D95074091ABC9CC2542CD6C109BC4FFC9B323
648D1111EBFF81835631AD6C6FB88D8E7A06D56ED69EB52BC90411BD034E11E6
B81735AB30E65A0455528EBC5B96912E91FA3FB99C6D35123233B7F0C765D3CB
265CF381F02FBF83D19176AC10FC91325361378CACF7DE9B1068A4AC9924F5FB
36EFEA483004AE42C32C51A1BF355FFE11B5C1EED745EC9843DE6274B66B0B09
7A38A7CEBFE998249291D97CD034935C3A0DF3CC3B3775CD8E5870230E9DA69A
BC80788F2F72CEE5F5594A0A4F034A401FF8DCAAA5BAF8E40F0C3E68A9DC74A9
D6D63A25A641920E62DD5F8A91B4277A1F49C67E25F2CFF05124AAF53671ED0D
84110670483EFE13BCB89E89FA22ECF2B4D90FFB8BE2F427D339D1EEBAAD58B0
946C6AD04D85D1E6ABEBBA650C441DC395590E4999A373A0ABD2D148A1E83BEB
468EAA8FAF6CA4C24899968C61F1458BFC021948AC9FB8410A3DE22E0A01E367
C524702A8A1AF1085B9D03597AC3B18B05B7D271BEF9B8173A6C4B9CD697035A
82372EE5B315A29C309EBBDEC6FE4167AB1185F91CA4EF832E7D6DF3E9E03BCC
EAD202AABA714D39B314B33C39847F28CA33067D35107E25C31677E08CF07330
29CD583F6405828CA8C05E7325F9077349C963F9284536F31F7CF7D9EABCB996
0BD4C526766BCE7971F449F34200628C46B6E5904BB714391E98F34461B133FE
0AEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF1D120FE44DFA7F5C260FC9C
1536A6CEDB493976B105164278E0E00A028B98F990B4D015153CCC2E1853473B
BF6C9D19F0A24AC76F9D709E512323E167B6081364D2B67B6D20B2AC0BC79B34
B48930980213FA0E2C36D1BC781CD2F480148893C418531769CB5A194EB62D17
20D7836D3B90B0D801A80168699AC317A0E331EB7AB0AF62C9E0FCE365A47081
89A7BDEAB2D32A6E464AAEB3505AF0B04FCD4C3FFCF1E23BABF322E115CB7965
7D91D6706ADC0E03261C60884073554BD0771EAE6A1500B64835A3A6FB3E3C8B
0A5A5124AC92D53113C9773D6E27F87E6A07A4BBBEC8AC451239E34711ADD347
782194D0FA7B8B1F356AE807F9874C8D167AEDA5D3F96AB60F049863F0F0DB61
75AB87E1A511A61643A607CDD14F0BF896E4F6623D94DBF0F028FF400BBFD75E
4B8650BD529514561F0CA6DA05386BEACC3228335BB67811370645D5A389244D
B49CB9C38B939602D8F7A3F70B39F1723B8E668822F97158CD969A7D3CB2390A
AEAD3C15E072DE0A84250C6DC1A52D3F6D51F6E9B7E84A5DBBAB93DD3CF19713
0908085C3080C3F839C9292D8CA28B507641AACE2C46EF3ABD23DD3A0469D988
EA01221F330746FB913FA421FE7822A90EE8A7E00080300F0A05D265549982D5
66148FFEBB0B67F9079A1B18B0768FA4C03A720CDB13A9FFE78E0927EC543971
5BFD8F854843EA1D080677F64889D167CDE75A39906AC28A3DA273EFEECF9175
8E02FE252C66BACE712D285882C14E68234B605493EF2D2F1DA1BF1DF103DCBC
3BDF0F7A571AAE00F596EE01EB476BAD9E826F881AD3F6D51D65318915D4C9BB
9730C4539A8F3771BC9FB9B4D2669757817C75CB265F8F86136A2CA718D6A0A6
24056475519E20504721F673673592085CC2A21A4E59E7A06C58C5F01079E5CA
265FC20C5927E8126158CD7B0E9545795A6E62188B643BE9FFFFF69BF0E7CC4B
AF1AB621533F6A1938E812BA39E0756E167FB5AF5F6E442E9D77EACBBE3D271C
3DD27C28F754521E715BE52A286472A747A459E1A0206B706274CFB2E5004AA4
209406FD8D4619BE05CF8B91285D727F6A3F7C7EBE4EF402B191424BE5016B74
116233186382B5EEF1B534EA1E727F9A7D0D3FCF1DD66A83FDA1094245139346
C89EEA6553F718A0AD08E1E3019BFD5218EBE79578A072462F5A6C01A5443002
CFE126DF21A740D9791D4FD8CFD7ACEA771D6A52EE169C6D6044F0629A5F9805
93A1A0EBFE7A97F2F7F3C15296DDB13A3D8F34A84DD42541141BE64D4C827690
BF7B6E45B4F8674A6FA270F14B4944F27A9F28C440631902B92C516F671CBD98
E454F752CE74190E4128512A8C9D7D1960C869B02BBC47434C1FA9AFF8ADD7AE
9A5B364AC04F853C9612C58189EBF33343368B88A76CA65C28DFAA3D32E3EF9E
A5DA268E7331A54E43632B7BC5A6641770F5E9F75C572675AE6E69E7AE376FF1
5FA8D65B74900DE1EA95B981FBBCE8D846DAE64D9C454A2884F0B424AA60711B
28D31C755C6C03BEDD76747F2EE96F0FAC59B411CA72663A044A853EB94D553D
5D6FC325D941674FCE08A60064CB42F4B5DD688729F3FB9457F718A0AD08E1E3
019BFD5218EBE79578A072462F59A73AD5D9D20562309C8864FC6ED851CB0F55
2D82054407B9BB459F0DA464320B7DA9522E3C9E3EE88D6F3D3A80BBDAB5EE42
0B6D136FDC941CE819C6D2BD022A02C792745CF02D7378466CDB231C7A899431
DA79EF537CF1F658F8460726FADC19D1339CAE67C84563320D69D394212A225C
03F528601788EEBDAD19B56392AA3BFD2E48D71AAEBA4E0C1139E3F29A74CCF7
D97749A925E0BC74E96567C1B6F9DA250BE4C9917F3B35D43FA75D5409FA5272
40E389590D1BB9D82D6C8D5A1ABF35B558630C6A6D4134BEA5C8986EF4AB4C97
092A1D17169AE6FAB6FAEF043B7BC1D982E7CAA79328DE04F0F7A33D4CD50024
41844F9F61FB670F5521FE1FEFC260F3E926AE8AE2BF4852233B804496666ADA
A0D84BBC6A705A9C77B52BF56582BAFFE585B2474643F58C3BBB894CA3DA52D5
464C364109D6F3AB7D037E509C5DA4A954235A57F0F594EC86638DA625E36CB1
C3D5EC97B9D19604F4CA460E1676D465CB53E7B1896BF003AA15D377F7F4332F
BA5C0161A080F32B4934A768F89217A3DC055A807F57BCD3BAE66BF71A25AA45
16F5233C789C3E74BBFBF64851305E2FDAA6B0093FC96F298AD1B5807C33A89A
B14673D37A50CEE6642084F107EA5399188AFEAC444757444D27B3ECC5A2E2D4
AE26385ABF6CC82A01F18E577035FF3499574CEB67966E9B6F104FDDFF62E82B
16CBE3D401AAF3E53F3C0AB0A894F08D7774102350E15460EB209E5D31C5F139
E3855A521224E6698290BC0D0742A314497D14FAE19AE5947E4F61E7EC67CF78
1E780A34EB34F468460B008F1C02CCB3F652A2EDF25D95A9456C7098D09D594B
7BAB4BDED1134230650AD2AE42517997FF7ED694F2223A5D8D988200B32D7368
EC952AF449294534E34615C9C990FFFFE47A620C61C8E99A6680B0010A419D66
E1C96D8D570E5CBAA0F3181945AC95C016F789A467F4B8C232DD8AA8D22AF601
4F10FB75B5E2EDC3910A75AC1B4B5C843D46ECE2BFAB537FBE610E15D03487A3
4D84EFE74AFFFCBF4181A86F0AEB6DB0D4FA6874B32D25B2A63D47FBF730B352
702F7E48B9315500C0DC0FD6145ED8A014E95ABAF7186226785206EDE20DD513
5C64E710EBE36C8257EFD978BF6DC1761812EE6FFF3E68C4D0652D9ACADFC17B
FC98AFEAAF3B9EDDDDE49EBDB158AA031B43B56AEE72A4448E82197667EC3267
F61B4C9EE109701CEA038C3C8DC33B98C5431456A37E49908E7DBC9DD891F6D2
7442F6E8957945A8BE6A4378D94CDBF84F58E338C9654098096922FE9E78C97C
EC57EF59082413742AA68D4F0FED4E00ADFB7B3C9C7BC4D6333A0BBB030E9770
AAEB74DFF533E81F387717EB6A6961BC58263E7BAED20814E5D688746CD026AE
EBD65B24E3E49A7B62A62F4705DAB5133E5A5D0B5019F9294CA4A8B0A5C0909E
574AEA223FDA99320416CBEFF4824C242C0D84EF17606A490E3081B92C190DF0
4DA2BEA84A128AFBF3C245B7107206827315BADCA931CB27C2EA9DDC4EB68BBB
49F29231D98D968A8045606BE9A25E02AAA45FE342C59B3F16F74C56269C5F98
1C0977B1F4D825543301D02373DA10FEEA95BD6EE6689D6D81FD6F535FD40624
89E91714E5285126F19008E83F0FA487B723BDD572BA2E80E3A2BCEF8929F087
81F83FF7D661B347139CAE00ED77AC0B6A53BF011E924A8A95CD8F3B1C3481A8
E8A018D297122B66E67991DCC0EC187464195F79A79F90C1C81BE8D0F67A7D6C
98281785A0849E2A173C3632BB6ADAFCE150208998F9EF4EB466233CF0BD264A
87D1551A08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91D87663136EA17BB18715AA052BED594CE20910697A4DCD82C
553CBF42550ED97390766B1DF694CCC628695E1E6F0720F705FB727B15C6CAEE
EAC922B8F093E59FD1B1902FE450DAFAD952EA0A98B0686F3039CAF83588CC3C
30ECDDE05B7DA9A9E75D8DE747CFEE2E831CE2124CBC71B927051F7FB892BC42
936A1C53B8DB13075402BD4080216A226636DF2CAB859F67430D8CCE60A1EF18
205ED93EF4EB608B037B88D3CC7FFDC5252F691BF753FC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A746147F456517EDB169157DAD9D8AE5D7
EF2661E266C5C812B03E2569E0F138C2D58E38EC9F0B780C298874616D09E399
6CBC81BF2A98EC7A9A573A79CCDB6327D0DD0F821F886FB4496ECCA78FD1A2BB
CBF0CA1255799DF587CE66F042F7A5179B55075FC89BDC3302D01D7138DA0828
4C8C35A8E26752CC2EA8F3AC2AC68E70946C3E8F46B9C2DF790F79269566BF9C
9A6E54EC87BAB7D34EF99AD642B738312FC6F300093EBC7669C934250A5CE240
A1171441D03FD75811F371B3895AA29DDC6A984C0E944711C77542A66680C933
9C7F2D5A30471C6693CEA46EF483D1046E1A9FE6EFFA27CA8C9ACE821AB92B0F
5D9DC9D0A91B93ED65003BD0C4D6608A6236426C7859229DB42614A54EBFB4DC
8097C0D9B0FB95A5A87CC9FD874959462454B5D439C456BB55FB81B09E3FC5B3
26D850A5DED9EC17E11FCFDC544B2885995B5EA543CD7E8E17FCB8B4ED57D7C6
1B0C70972F86F67336647589FB0EA874920BAFB89889071729076D755021533F
B886A9483867A5E3CB8A961CEB372CDE1EA852052312ED4484491532ECA79ABC
3EE60C00312665A8DF22AACCF0CBD84EFD9EC148AF4245BFE780E23BB321DA56
DBB416890407B39D34B68BB61B00B146D2E8F794C1546CEA6E037D7CD767AE50
843AA610583CC318C66E25ACE786FE7B406E5F1F232517AA77DD3875AF98FB1F
E6FDDB6323E23AA93628A6B5887CA2263BF3F5A696EE86831C603B0AB1442AFF
5FA6C191F7A83C324AF0629A269BC5E6602B15D0B8881E6F37D510D53C60AF3F
6159041212131F18BF75E71B5B6E7022B99AA55C94130C7A4AFC72E016B43A65
AA522E7EF3FC6134D5F715878D99130DE16A3ED40825C75260C7BA8A5A084766
1FEE0F6B8798F96EB458F2E1ECB61B6A2C9887A5D0541AC711EC68B79C2CA3C6
175D4A90F08ACA408540796646E0DAC8220792B3FEB61999671C1DFDFA0919F6
35FC2CB139762BA4D20490AAAB168B00EAE492D1EF564F9D4A077B526322E8A4
4E42451F694443F3C4E2FC9541C8344D3575996B2C50A6E3D62384F9ECC1679B
6514C107D7B3A613F7287269594865E9453E9B6EF227867D9CF9549B3B5E2A6A
F748308BAE99AE06106D90DE65FFC15685F8CF6DED13F50F406270CF873290E9
9A3BD506A8578376F788CFB65E372FC69FE9FD47150A0CC019FB7BF22A3B979B
EC26787BAB2D5F893EE00D41CB48E35CE9C08D0BDC30768CCB856C1CD7DE9E9C
0848692C38D1E3016BF4B4E37EE291081DE21AF12C1240C57540E73362D1F9A0
904081FD330AB6BC5E2CECD68B9981B2BEF1AED8D00A3AE7ED338B9E18F72045
7A4AB35C68C07865063A2AFC57C5F2062F908641625F5C1C0C6A364E3100A357
D10632538A2A0CDB6AD680DC773ACEE840A11C866CC356BFB3FEED65526A133B
8800E5D9734B24E017A2E354045A20128E1705A76CC4A6F6FABD063ACE8A01DC
45383306CED62F67716BDE9F3379CE9878306CD4905832A6D7971824A12374A0
CECCAC565C16B53C7C5E1A202F5363892C77B74A200C9DC2E2179D79AED00A2D
FDA9B22773F34FFE430F51DEC9D81F1FFDCCDD178A0CFDE0E7E46CF99B117B55
B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADF880821AF7D1CA940090DB589
20B9219284D91DA3BD4A61CB3BFD0D14217EB9F2CB21F0FF6087C7308074735E
E35C87F51AB5DDF2041BCC6827E45A0370F0F2D6FDB8A1FC5066E1BC3F1D7B12
B234F60899F20EFFA823A8ED6489E6A04A0110DE316A16B9A8A6E831396813D3
F551F18C2D70B0FBD115BE7EBCE816AB40D2ECDB17E15F2AD8D3BAD0B94BB1E9
E4397ED46382B7F8A62CF533D4295155716F96B850D6FF61144F6A9E51CC1B8A
86A35082D9ABEB8D2DA4B491536CEF9D1E9F4FD8C0003E6F23293B82B65EE0DC
F0830C02BEA2CAE21DFAAFB537D8D9F0A74B63C9D0A6A9BFAA49F87C4FC0A724
1808AB8A4938BFDD1B8644456D6323286CEB879B3BDB928141D3E5403F1CB5FD
773C8B9DD0042C5E51323CB81A8EDE313FDE90D905B45223A6504CA4D48826FA
E6756223F2FF5B5167ADA7EEF2D2CBFFA77D88827236660260C19CA8BAE9DBBC
7A911F54C201E4F627816CFED662D19C21824CCDB8F71DD18800B7E40E164074
33FC9A216DC7AFCE1C5C7F7EBB14725E4813E05782683C877C7EC4C86D6FD378
06CD3E28E86F10868948EE507B47172D7B52B09828010DB7975266138B7C5168
19F07C1F01EE32CDCE87348E9A967B430996030C42BCB6B3794F51D6F7DBCCB9
A30006C7D60C7E1AA2761AF25BD01C501409DC094980FE3A0D2A24B429285A06
EBEA61BB134055B25332C4F2AFCD776ED2ABDCE78D2BDC07CED874A173236473
98EE737ED7C6090E857AB029E6C75123998FC42D3E0C3F20960FE90B3CC6EFBA
5BE1F043F38C1E3B3CB2173152213DF78D7C0934B29652E763300876BB073367
A61A91B741B3CC4B68E496316C1FCC57968F790C5E7948B72C4AEBA496FEA882
575B6426A82F101D8FEB1CBF633184CB857E6D5AB42F92904B4D0DA750DFF2A8
3A30B03BC1DB36EF6FAC16F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED1E80B
82B3BB7F5B0B954E7078DE3E31D8AE65F9EA55FD147FA2DB2E8385C7B35F69B7
D06F576D7570D2B23AC1D7040992123A276F3483AB90D7EB79A87E6467D40C46
F878C63E035056CDBBB9F4DB89659D42B100853BCBD4D0A15071AAF8079B7768
5637DDE51E631007A29FAC4FC89EC53A42AA58F08999C1DDDC1F129EF7813073
EF9409838CD519B1F9384DAB415A394588881EF3502D2588589B5ADD4C1F23B1
6A9440ADF2974910C58F6BB26C4F58D573E5546629028DCA3154FD567040DCD5
C54B9234618410808685806BDBC524F3914FB3F945E0A8B3D0BA3DB62D680AE9
DF1C22D1E205B546D86FFB6D567AEF67B112126E2ACF3642047B54B09D3B31DF
2790637E4375815EA4ABE99BE732D6518A5B8365DB72AEC255D01E5F51974F8B
80E5501D8F33616769788FE84E1E85CFE56E137BA47C2A14D106F554978FC07A
154765411925D03D58A22DCD2AEF5406DF46611E216F8B9161510B36B230EF3E
93590FA686661BC2390E19CD3DEE77F3538ABB1119F13CDF297EBD29C3DD1888
F0FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0132E033BED6E64D0BD1E9C51
FE0264A18B16E899EAB7FB6A5D283005D97035874D2B9AFD4D3F29B4B1E6EDE3
0FB077310016F5279CC754F3D13AD666CBA8F8C56E27E4466907B099BEC7CD38
699015DDFA5E32143ACCD729EE43B417EFAC4D403595265F0306D9CB3B26CB5F
05EC5FBA7C19AAC361613A028572D68AB9D20F3ED4130D20DB5FB364F7BD728B
86D3BBE1E37BC2104E797474023611FAD7AC43A659829BCD60A999E9F3E78F64
80C3C8B6297958A634242E698BAEE3C5CAC2DDB333270F9AEB92A892D0578C34
519695EAD030B18D2B1B928D2CB8CAF6B4484B03FB878D974AD04A770977FBB2
C31C4F8FF8BB1E7DF55CBD0EA7805A438AAB424675C45984BC321B8331096342
44037384B36372980DE4F1819DC2B4F825D7F6AF5BA3889A9481A39115215105
5D2B2B9DAAA7D85A7F1D36345F3BC5A90CCE79572D44A07DB50823C01E2F535D
FC2C0655A9A103406D8CCCF97174ABCF4EBF022831694B2773BA052B475D09EB
09469D2BB86F7BC232B842C924ADC1B1AC7AAE6732DAC6E6E6F989D279899F03
7BCBD7DF2830E4F2AC7BC9A0512C5598CD6A8558B8C483AAE9A856CB690E4D9D
6B4452C138A84B53712BD7B639625938CDB360066803092C41828FDFFC40EC76
529B3017997B118F9C0019B318CD3A83CB0A1E8891BE5F6A0C940C93A5B74FF6
4283F15EAA51DF4C74CBB662283EA2CABC19388DDF3C5B474F5374D80D469AED
90BA08D8A72E3547B40BF4ADAD86EF5BEE825C3F850B6EE405BD38D761485512
1FEEDC70965D0185F5E174F0758420612108EA4A58025B1F47E53E0B124A48CB
687FEC13BC7E48802CC39BE1302FEBB6C5A7E2509195211FF1A494D7743D2BCD
9E84D94956A1404882E6A29731FFADE7B187078C481987BA74CE27B2C4557D4B
04E7F771105122A7F30165F29EBD4570C70F7860B7D7E3F1E81AEFECB5313C2C
C1E66069D56F6579693CB65053BF56062972DE5B56E950AD3B58BA187935BBC3
7DCC97D12D866DDBB2E9D6B02D4ED0A53C6BA6B301D3F42EEDB6BED24CEA54F2
A86A1887361F7897A2D28A562A935226FF823955C3AEC37426299AD32E960DE2
CF2E3C9CA94D43E219F06892F0F79B02434ACE821D263606A374B64A01E25C9C
7B71D4347CD5D07A9411B6E88C18CFD9B234CF2F2D603D0260B53225714419B8
C988456CCC24B81FAD59AD71A3EA68BA6A9A900EA9398CFF7BF2CB6AB91D17C5
793A8F9EDC7858C953AA3EA5788239D1FD4176B9C310D775443680BD38AACCAE
08206EABF5E61E8EB6B71AA4B19F8037836D8D8AE278B7171B945C5AEDEBD3D0
8153CA578EAF17D2B2A7B7B9AA763F56FFFFE98E8B960C5B942238491264EA29
AB731DEEDBE78843300158908F77C0AC759565A2314109D6F3AB7D037E509C5D
A4A954235A57F0F59EDB31F78C17CB202849141A1F5FC0C086DF025BD411A9D6
5745FCE585256923F98A70DE5036BD9C54DEDA6D88F609B0AA79104E10420C3F
67E491EA298A68097564A90A2DA6A2A2574BF892347DEE8E7A09633AF7B2E1BF
75521FD6C2925E38CBE6CCA897724AE8F908EF485539C45C6CF62652F79150A2
D35BD4580DAC8DFCB09C9B2F0F3258476531B36AC6458551956CA08156AF9C33
D3F197E87AB3C26371305DCF1687976964235049BD3E3CE70137A7B7FA82E8E1
5F366CE98A40838258D452E731374A7FA2B08ABBB932D5E6A03F957B7C64E89B
B59C4ADF07B4FA90460372E170BB98B788972C8F37277FC53686C2D27FFEB476
65EED274860C3BF880DC2F6C80CEC4A92BF9FA09EF0F76FAF0533551DD2C8C2B
DDCB8A5F93239B9DB45E600F1C9F40AFDFDFE2E7C19B6D1E0F9382BEA9878AEF
1CF8DB5AA29D60B224C9B8872CD9E55B2E3AE3BD97E3D9D52215AA05E690FAA7
3EC216783CC4F106FDA563F8DBA452AD22FF83BD861FCD07E1302D6A3AC105F2
8EE6A2CFEAFA21AE6C39FDE40B9D08EF1ED2E41BDDA53210944053DAAB56B107
5A0C3832220752D104FA14EE869F741128948A218EDA86F30574CAEBB8230076
EF42FBA55397E2CC27E11DCFA24B47253A03A99363DD7EDDB8CF9B4CC3BF7B29
5FB8E3918CD673DC3B1859B9B68AC9C092EA151A6F3762571629775247A6AC65
DEFBCDBB07BE8D8CFF4DC312E6A454DCCDF83FF2BBC7B17EFC05DAD545F7DA47
1CC77A08633A53B62B760DF589FB2A1C0D78314EDF4F4361872DFA2C65EB44D5
CB662BE0B2839CEAC16D813DDFFF35ABD92E13ADF85FA7B62AFD4348B8790328
14BBABA742ECE84EC3C70C8281FEEDE824560FC686802E49EDA9528B7D8F8724
EADAB1EA2DE9F76DD4113C25175B14083CDDB3ABFE914A9AEED19BD22F6E09C4
198C7AE63EE63D34A6E5E6483031F98EF3E460553709C60CDF17E6D6E4E78CB9
D61F3FD30E78D7EE3049E2E505776D90A2D1A68B51C0B83856E9927C936DF456
4199A66A432D5FA8044190358D9A42B02D8D79081A54EF4F7251DCA4D16C84E0
3F2249F606EE1D4DCF4F15301A634A43CD2AA417331E4921194F6F9B939EE166
3FD02D1E1D74F22C4DA4143A4D5C2AD9BC331525A4BBB12EA7EC525CE0D7F6D7
02247E93CC25E56B176A0786B3CE890314191082273187F24F9D209D78E0A2FD
3FA71C28EDFC157CC5F6750F1A32DD6B38F76BBFAA9AB9E3FDBE3B65729C39A7
D5C90614F22E02626ABD343F3AC0A9698AE84CBA2D8F5378FA26179EA32176F2
464A2652C19C8D31C9300E613650121894B9D280C4F16906654393ECB9D74206
B1466753DCA4A6667BB22C841A91A8AC118812C9BB0FB24D2166D5DDD4EAE075
395D7BE3CB0DFED4D966B2FD281DDA37184E620C8C9F2834C6AC70503BFBF3F5
EDD60A8269CE7950969557336AC8DB3B61E01D64D56E8C4CBB401937D3114220
AD0792429566BFF55537F41DC5950A76B816F8896C4BB18C575AADC6F5886763
3981828EC2EEBBC3928390F72AB65858B8AA6F0EDD3A3763F5A8F68A0B93B9AD
CD647D79A3E56C4B5AB275FD52B825F9C86582DEA06C1FBCEDF42069D00CFE14
02347AA07C49D2672C513510C5F90752F7DD417E32DD6EDD1689FD3081EF84E7
86D3F04F8724EC003F8E8C117DCC0D93D513E04AFD9BECE706135D9789ED8296
F3959B3D87FE3E4E2B176AF68025E0C72F52165A0DF06D6A2ECBFB29FE4D5CC6
EE8458FEA2FE94385B2AF841D9A755FBACF6167862A987D153AEFF6650578358
B43FB420AC4CFF68E997B6F7BEF0C52DB9469CFC0E9E9A6D7958D9C8465C0AD1
28085AE31D620480D82B5151EABE7353E18FF6B1523DB565BBC3A1EE19170598
C4E94B5A82490F5F3EDCCDA8B1329836CC6136E0B2DC8292E36DC444F34DBF0A
476985495B8E94E473052F20C5E417A6AFF317746B50613961F9E542A99E1E9E
AB27BEF2BCF74FB29855ABBE60E7A2F5DC169BF13C56D9D08860763C7F8F92DE
AB54453E6A4C7B7F667C14A284047744C14EDA3CFE3DC73BCCC0F2F81D7ACBBA
A1B71056D018CA5CDFEA1929E0FD99044E1B7AFA7834A95FE1307D53A8436600
3FBA0A0255ABDEB555EE5EA7AD4D7782A8387E49B8F03ADA7C7CA74633545ACC
6E1B0078A6D40CF7C7D8E436EE1C70047BA88646BAA9D6F0E16636DA27AB6AA1
6C638A6B48382CCDFFEDE240D483420C8089E81DFB3BE958C865B2B9A0705095
755901A327881880298D9DB49E020D5A7E6290AB1C4B10165DE8C3E9109949A8
FC60CB1B458121246F0C2147B13D704C0067DE90B53D9163DE8672BB96AF649E
3CC9D18701E91F5A47FF6E933E21F0F0F9F31D06A6F3355819580C478B6E2A50
9CED4243271F069DF61D27D3FE8CBB25636F48E6A41F205D04A802E45FD0239F
0F41E86F2D4EEB998520A57985CEEF4463EC7CD398769ACE9F56B1616DF4B6EC
47260A1A82EDC3B258C45EE70F2575FE3A0DEF48E5C9008EEA4F990890CFA24E
B5BA14B6722F4521E7C552BCB2882C53BDE88CC55844F1A036864BE76727743F
9266BFA212BD428B67BDB8FA30947DAF090BF54FD4E7B01311521458871B0C8B
D1AAA6452B05A9E0A4D4AC85DCAD1DCD36CB4D6288560DD839B975287260E0FA
E00E1369F7ABE64B951812C84BC29D13B78FA281C6953833F378FA3D5B296449
28DA32EAD64629BDED7F973655A8047BAA8166A39AD81188A0BCDB316CE04AB4
08327D5BED24A373E6CD0A8650EDD6F01D290275630A7BA34D7C65622708FB34
3B1EFDD4C09FFC7E49DB8929F2E3891248D81727E4DDB392685584B5BDC9308F
35A246EFDDB2CDEB75F63F693DCA492BCBB376A278F2D4AE601E817965E370A6
CE358A3A3368746A027350A9FBF947BB7C46F0C949D8A718026FA6E3BFA81B90
3519E95194C314334242A37FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D
555A07564A9D3C2275458700FD01CB5E99962B8E8CC2D6A52E0210B9848E6FB9
1C81497FC1AA96D6B4817323D6A88E851D672F598789D1EE0B99F19132698163
478C02F72EBB0DDC10C55C02FB02663AA47E2BDC5A51A03F48BD32FA0B0816A0
C7C6B4E3C8CF98D1B82FD0AA19633433CAC268C6BB20D3A288E01E2B9173557B
D09FD610F8281F6F34EE241674A3EE2645DA90652D589681C60C4FCC6A8AE100
116920383B0A69281E3DD8A266D484D28CC30F9DC21D974400A8C2642147D4B6
52A8F1A7E0B77D82D6A36B6B588ED0ED38C61CDD2A8431D15BFD53F1FA3B8DF5
3EE8E41302E597B15C2F640CA86F2917456CF5D301929BE09F85FBEE99D21B51
2779E121066B46DF8C2DC29BBFD9378D8E898275EEB2B9BB17486D50FF253FF6
7EC9FCE378C4940303BBD456FD31D028BBB565B96FD4E4D1FF377A5AD37C15A6
173CCBB15CFD2FD66605EB29C5526F99362C7693B01E7ECF132C62BDF74FFEA4
B0CF559A079F2FF1C3615FD8AF94F0747C51AF4683EDF97728F3068203896C93
1C86081B9870A584F81C6C24126DD123FAB23AA37B36092D3F6CE83BE0B858CE
E312A4C003B01CB922571B8E5E7DDA3913705D4DE85889C1086133C916B97604
9158408EFBBC55FA1B1F3F3E031B7169E8089525CECD505DC35CB17B6D8F433F
9402B197152704622AA4BA96347B69E844752017BD9301866119490253B6CDC9
7E1CC04D2640E97679ACEA830AB447B3B980521CA52FDCB634318CACBF994B41
4731F0AA40D28BE3700953D590A62AD8AF0F977CD9FC6A5B91EA844AA2981BA2
64E7B739C4088A25F551F578189A3285E5F32C9C8A8FA9E7F90D27E38DA7BAE3
3901AF57C7DB9106933246B30E960A439F315C4093F4AA8854274B18E9808EF2
FE36B36F9968B5CF9FDBFA11DCA0E08D087C4D099838554A169249B307AD318F
9745E6A9DB8D45F1EBAD4CAC35152F1EE78072533F8900CC3A1869BE48305CFA
07531605C233BD19F3DDC54F3DA89A38A4C935C8D023CEA0AA6B857291BCDA9B
6705F0B062A78EFC65E27CF5C83361C2AC17638689E052523D7558A09FE3BDAB
6A282D97A07C671850972D3CD9AA74EE5B605950611393C08541403FE386DFAC
2247BE094A885352C70B1CECF2F9DCA91DD007AC7D759CE74D6A9F75B373FC70
31B45B179B10EA85E741412DF41F4C59FEB8AEF11EC7D1484A695673D7CEE75B
91B36DB3081871CDB3987169479C468004344921545DD99DB567D5486DF8C298
64621BB2A03883BC623D906EC7632CB075B9D013C9266B223C04E45A07BFFBF0
CCA7BF4BADB8D4AE414A1410886EFF8D56DB118E81068DBF528C83F702F2EDF4
E45D0FEB7FD43B1BCCBF20560D772C14FED32A6D10966242774A0E978AD35C01
AAFB04FBDC7B4B8770D3E62C7EEA9759D337AA2628F08079CB5D0CE2CEAF2D85
E987DD9FBA00895D87DC834505C606643E0ED45C2BCCA0E3448730FC94AF580D
C139ADC11FA69DDC5020CC3C14EACE61BCE6EC7A9E3B71DA8E024D71908160B1
EE7C648F246AA8FB60C78AC2398C16112776678BB400C75DE3A3E70D68714FFD
8BFD9E00BA27005CD6FDE60CC49B767DD3BF6BA86CC368E9D29C6BEDD2A467C5
8639DC0E0728CAFFE3C5B6A3B3FFACED0E119E5ACD18F96868A8BCC914FA5EB8
2DFB0B03138E86C15426E4FA49EB9622E45801FF0A29945D6FC7A2D65314D2BB
69D35F3F089F755BA04D5D03A83FE10DC51DA0C4BD0F9DFA45413DB1BCC3DA8F
5A3D194C1BA4490251325AA04438BC14D47CD354A980A539A617ACB9C702EADB
545806ED3373D16487801F7A6CFE211D8F914B49D4602BB869D5A85CE51EDC81
601C6FCD650275C9828C9B2131051DBED189118B9279A11243BF04609FBE1E06
9C0B0ABC6B5C2A2B08E8F5AE4C1E037041529A9E53CF6211D6F89B3F9D78E0A2
FD3FA71C28EDFC157DF84D2F45B211A00225A607A5E867D601C60088FAF1AE5D
D970FD1BAFA2CFDE8A20546520EF3367BEBCD43247960877DEC27C2DA43A8176
62FDF1896DB204DCF51404875DA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA
31DA19DA81D0885196DDE3331E23EDE760BBEA210077CADB81C773C3EC8920EF
E16FE5C7A72657A80F1CFB288E5E944D65E08722DCE6A5762EDB87EA4AD820C3
5920172BC16F63F51819C4206CB45D52E88EB1C042E28A6DFC1C6D16681FB947
7E2A1243CB87523D2492EBC0F85F5DF63C333529F06FDFCA1636023C3B45D998
37E560B854446966D0F4316983578CC350251B4474B677CEB6C248127A35AA5C
7691B72AD442BDDAD18F30DB190E4D0046924EAC9BDEC7AD1230772D7B98333D
5398A82465238D57CC64D9EE4D3417DD8BA249945228E14A389F089207FFBD60
3600E77410A768936DBB1162F16ABBA50F261D5685560A2465A0565E91E89D13
35338DDC277E410104CC34ECC71B411C533A5CC6E235B63CEF024C8BA29293B6
34CCD345102C54FE2208132979EF8740F922F120AD44F28BA8080801F9BC7611
DCF9D6AA4A8651177CB856C986119738E420E03ED77D9824DAA20B84FAA9A2DD
D4158E9AF332256FCB3EA78A9EB74B4B091BB5B674B00964CC2272497284B49F
D0B1A273C1EDA6B778AF995CC45FDBC6DE448491EE057D1A0892D6FC840E3AC7
988F2569B887412982ED98260DB84337892A232A3A1E688B8068D1DB3717525B
37D33DC7D4DCE62BC5140AB590C15346B95A72B52D8380C5112F4CBCCB78C3DF
9F8D82D9EF2CD2E03261159C7F50054928B9493CFB72DA0F5B5B75A7E3C6A182
18DF587BD534F0297E3615F4E68DB6BD2AE92B0B1D5F1E1C12B0E61751FE10EF
24A0AD0FF9FED81C2B83BB3238BC779091D87E5D195DBD7CFB9AD96E1004F968
AF583ECCBE6FE0329A031820D4D1DA9D11F02ADA84BC6E6DA0AA29EA8B96B98E
9CAC0F97387B731F438F86AA00411D4359B3AC5E1A129D34E4E1DB2ADED17246
920EC84462A1C4A7008885277DF6688E3873FBC7A10EF4BD172958717963AFA5
FCC1C753E473E21EB8BE0C7C96BC7BD5C0274440824A95B61CA0427E6CFCBC31
3ED9F5F9B0D028528F61F0B77F668BC7CD4399F08141D19BC64AF0B2552C97BF
BD1C6C0062488763FDB07939C47EB3D323D3C90009A4366F34513C6FDB2A0232
D1BAFFEA22CD6D7EAC386165819C19C75470FB635CB7271D8C8FE3DECE61CE27
31FDDF7FCF2AEF7CC2B1EE7095F485BCE6F793CC26242D918F052AA2F06CF217
8D997C4BAE6D8646785C0C82A208F4F8F34A3DA698A69BA804B9A8B27DF80902
AAFD2B6018DD0680B43A5AE7900B43027FE37891837B822BC091A27912F60DE0
2E09F6EDD7742C73BE07D03DAA4EE95D353CDED25EAEF73162A697698F8925BE
31F7E98BA78C2B52607F5AD63067BF47432AF95BE8E7504AA1542D7B23D36C6B
AA8338AC2D98DE543DC31B759E557505A1366EEAC1142E6E43E7C50DD0AF354C
ACDD111DFAF08A68119DC69C2A9360CA05073141CE21883E3595088CEABFB137
634D2AE8694C53BEEBDD14126B4825CF63C13B40CE21656E37A0FCB6836AAAC0
7BCE893A76FC1FA1CABA526EE65F6439F9FA6F27F763634C662A001B2D429D90
F2A70FB18CAF8575273D16EBC3E54475416262747ACFFD9C16129FB088DDCB10
080AEA9DA70289ECDB306F226579871CC67279A95F558EB0BA035576072FF7F7
722EB48E8F701C11FFD1B7F263ACEA49BAB119C6057DBFC2B0085C818FDDA774
EBDBE7A95500883E675C5C28DB99242A8330E9DDAED388DB7A0B4FA03C84CA36
F6027A26FF421BFCE5DAB2D853767FE8A7418038277FAD0E908C48A1B8FD98E4
EA36D07A87F9D6C0E5D31A2BB9B1494A567EB5016EA36C45F006BF7BECD97F89
0B6847370B5BC9EA4EA774B0595D87C2F5FEDBB500ED2A188680E41CEE552DF5
5A235EA7E738E9BFC10DD4C2B6ABDF8794929B68C055789F3E9C32180B57AE8E
CA4C6DA654AA4124D577D774A217D4897A261017117D7C5C55AAEF32B582FE54
F0B93A85F0DFC1C267798F5718CE4ABFBFA159B07ED5C93D976CCAD20691B072
DD49D3965FD79D8348CE3C1F8B633847DE60058E645058E425653878A1F10CC1
C84D2B69E1136A43B9372388E591DDE333E185F4E23E0A66DDD15BDED1FAC380
B91F8DE0F875032BC8A1930CA75318F382399E28AB06FCF0065DE36F91B4DBF1
2F6C352FA5F0492B73CCD90086FDAA14AE0CFC2742A66EF2BBB6B29D16487C3C
FA6F892AF5C05879B5224D3BB7D31681D75354427E16368E1BF924A8A0748B40
5513A645769B48F4B3C4262F57BB6A235DE12B38D5DABBD8DD0F6F9FD27FDA3B
150A099993B56B83709540C46BDA6AAC09689487F5E0EB021CADA860F83B7338
75079EFB568ABD139F70C1EA8869611D9D4D5CBCD692988A989C16915E134A47
A4A117A55B66ADF5E53F82A191848F9C630F52EB497E89B5F145D01D56694106
9B76780164C5A1F030379CC9E763CF518CF9E2DD473EF2D166BA507A1EDB1316
16EFCF91246FC75DE3D8AFCB7CA1B7CA84EEF0FAEB46F0B4B88192BB6AB1758B
6F406C357F05A6BFEAAEAC4737AB470623102FD547652082269DEB7CCFC1C840
AB18CB9C2773ABC9DD5B1A5F83AF6A90C0313FC09C2F4991EDD9FDFDB76A9F08
5962FE7F1251D652C1E371D57B511B52A4DB8F69D76C3BBB447074D1103036B6
95EDB12D5762D8075F69A145829864608FB4D78854124B117B2F35A1E2F724B9
928D3272F528B238359944962E09541FBB7A00956D1ACA7D8C2350B454C620B1
E6D5B8288CA707E7FA2C69204A46083988A52547BF7B3C89184B4B6AA619D660
B1402EE393F12610C83BFF918FC60843D1751DD0FB67FF10DD87E3187B485D84
58FF1D6A46682D801AAE769BE7F49BD6526B9B1584A4711E28698C37F1DF9A09
03B2FE9462811FB9AB1961065826D34C38C598D8626BFED7CB672F132E065C48
463D49DBB6803FD753A9E426992ED6BC8BEFEEAD4ADA8477F6552EEE7B621ADF
DE8A66A223AD7465B8FE6E531D9770EC0ED49AA31FA3F91F3F32707774DB00EB
977C5EFF7AFE7DC3807891D039AECEAC3F500A09579E6604D10675F1D60FCFB1
B6D26AA24377760FEA6FEE94FB119E8EB366AA299FC67178BBC57EB673F38730
E2C28D89F1B4B8DD91CB69558534CCE31AE7E157D0B060877F9FFCC4844A5984
1C7C7682105E23A374BCA91885E744912DF3620A245C8A5B229AD308A71FA00E
007F6BFBF96C927E23E338A655247C509A950BD2C3ACCFCBCF71FAD299F22A14
34E7D661083C7F8D02F91CCD580EA19FC26EB49BE412452247B0D8CDAD32D698
2637028A7DB25BE15F0AB1195D2F25778C99A04E82B1BE8D3870F6E3002F6E79
164A87AB4CED4A848913531321E4CCF342930683CE8B995EEB19420CEE8E6B3A
012AF00EF8A7E879A61719EA286FE90C2E836AC107BC883A33507560FEC3ED72
D91546DA4EFC75CB69B897C9EA83852D31F31DB5D0DAA584E4FBE6EDDFA3B58A
343725C742A8ADB8E2490D6B3B48CCFAFD2392C817B8F7FA666FBE36129A3641
9CD98EC0DD45A62C8B6CD6D07686293565232BE739AF0B70E5046A4A17B5C3E9
DAF063B335EECF830F146463EE85354BAF0C4AFBAE8CFD73A596F7C7AF437B8A
D4F2F5AB3DA5462EA74965A151E84283C2FFC9FBA8B7F9D8DA8836A078A4716A
24CDF975CC7EA03D80D1B3F78C5A27B19C016CCCF8AE794B156F8A765F5298B1
2F090260981F6C38AC8D43CDB3A383FE182EE89A49C28C2D635A298D6451C6B3
D02964A9D8352191AFBB572C2D61BFCA954964BD918A9DB9077118A042EB52EB
7800276E7502DEE57228948FA48884514D67EDFE7911E4EEE0C0AD432443B8B6
36C43D2B50F1EFE12D2352A8DFDBEB066F94C0F37AACAE40009D0682CAF5DB88
E408B799859A65C143CF499E5E03218E29844B569E2EBD6271DBA6A5B619FDD5
8DB3FD8695CC7E4D624573A635B65951DC366F76FC5B4C11DFDE03CCC5709F6D
806CFFFDB6FDF9361520D4422239A888B8FC65FD9DEFC68C0C2B37B06923F120
D2DD250D693391DEA7CB26D4A418E48A2989167B7DCE22F1803545AED50CDFCF
7246DBA338D269EDA4D6177AD9173235023D5E0F563059F9959F021413C8DC61
3D035BF22544BC8487EAEB01B65023A6FD20406E7E21859EBAA5AC022E22AD61
2B2F013E31B97F10172423BF5A5407F54179190726592F5D4BCE6738CC357F0E
B6F73D82D736703874D4991EFD61104D18E85A53B73A1FA96E48942DB6A0146A
B08A3DFE98951927F9C3A83202250796C59F8E61D57DE5ACECFAE9F3CD33E155
543275D8C75FFBFE827E47FEB12D4C3841165CE7E2B5F9CD05544030F7BD81F4
954E3E9F458653B6CA43CE1F9164BB0FE39FBDAB233679C8C3675A673E6E6554
D774D715491E2407ED9F8154824B719C8B575FD784DA7688FA287F7069D4808C
D9D7C18DD6A189304A5B5BD93348951B354102F98A86E317AAC4CEB41D8964D4
FCB5E4DD511B6A9D5A0C7973AE8E183D32A58D3C67AD87A413F6D9746B6BCFE2
EDBF4A89C4EE9C0C48A72985276AE70079BAA0ABCC95DAAFA46637704C683E6C
590BF2EF885BE65A9F57662C7908E0A47D4C92EC61C5342099C27D93A79D9C9F
278146FCE5B34B8CBD7B6D29896E8D1807150C2282F119071A2E23A9B9F38145
F1DACAB2F44A3C82D04E639C8A3488DA9CA87BC9F910524EEE46F14F2E5DDB7C
197D9B33CDA2861D1EFC1616B16091EDAC559A220F29084DD86CD873EA8E7DF0
9B18829BE2523F89F383D270C1312811B1D3A29D3668F7FBE41F4EF6A81C0F9E
BF9A4CF024C1D10194D7EF3EE7745D6460F94622AC516E9D777D6C65386C7E60
7E26481C02A184638BF92CBA44AD89CFE59081E3EB0AAAA7D87D8EAC69E3C8B7
7D780EF389B8367EC78E45BBE693904A72A20A1F7C70C68627A5356470BDE95B
95F19198D5EE9A7DB22D584FC7B6F9C35C47D639FA4FE1D6B6C4C7A6F71524A3
FC7E01BA3CCCB302F2F1DA611EED5AE7BA60B9974A0A2C7449C76238BAD444D1
29DD1673129711D3BA7C52C08E87AF023C833F2E36C296B4AF16F3A921AD5E65
45C414346FBDCCF69F29187B325AB3AC6F537AA03AB6FD0D5BF4C9BC3213A5BA
19D27374316C27000C17941474D1D90B1B2F2A74D00F0E54CD8D56C87234D559
4796765CBDDE8E2C7662221E2CBE5FDB8E63580BC6F3F69F041C7D00EE39ABE1
F010512D099E6991007574B51F1790EA75B813598D80DF5253EA093841444545
D7177A3F0A1E7CEBBF7EFA1DE6F11F14A2DAF8FD6991020450E767F2BAE509BE
09CD82AC7E689BA197B396CD462AFEF719B98A3B71E2A4EE7E20EF246C6E0A3C
23DF8013D65769CAF3BDB6BAA50BABE2CB47D7E251C0724CB34C69B407CEEF63
0162F27380860A97C486B629AA0476D37F812FED3DDD7CAA05A8DD97A96471E4
C723CBB45F0FADA7995818043B761F41DA28411430C42A3D1366F57F0124EE7C
8370B7A96738A152186EF35D59BB974980F8D0478935C577AACE253B118E0F3F
CD26977D99755C786C272911BE7935015193246FBFDAB3ED718CC8AFFDE2BAAB
56D5937DAAC2D54DD4EDC963927D1BA8B8233AC009EC59392B7E3FD59E27B303
7FD1752DF6AF33E5A6722A26ABF5A82FFC70D5688069D3A61089A2911C7D6C56
6DF75C3281ACDC131428CBE0BE100FC2D83D762E93668C0619E6C0CB4C42F5F1
0BEDDA8DE50A06B0937C0610026DFD8ADD7A7102DAFDD18952F92018C388553C
4C1DC0A7037B5A91A910B6AC680A894F4CD10296D1AB863C95186206F7453C17
4D514A9C4125B5A1A79E3CE4232E4A1335F1966DE7C21DF3510978F78875D415
94E6DDDE2D44C7385CC38494DCD832CC94C08F0492155ADDA8E704EC5CFDF86D
3B00CA7934C296F9D359945ACDCC8DA70D5339C919D9954FE91E079DCBA8B8FA
04C041A0E29BAC5703A83039CA96985A76B61AAE665224EDE522641BB0C9DC62
EE166334B9919AD6EF2876532B64A356B32A047802C9BDEE75029E991753E678
D013B8AEDF306CCF2727CAC4A13B4ACA339E375F376B7BA9CEE602E9075C5E50
9FBABC9016E62D7D5AC2A95EE29650B98ECF391A95DC4C962DF3F79C7E16FA46
3D1F514335FCE76315CA77389A431B2238DB083AAC5E39450EF20451EA02E057
2FA58CEACD61235271A975B0C11E533ACF0668F3288A152CF5343F52865C1827
BBD06810473DD85A580AE391C17BE4638F1B649958338E69CB56B870CDD727F0
B655F71017568EF083865FAFBB85EB69A6E26A45CE2C98622A6A385B447E164D
B7299AD6D1BAADEDE43E477FDB504AC6B808540C553DFF75F3A00495714800B3
06BD5DC235EDBFFDEE3E46DD584F04936B53C3C81CD9E76D9B6CCF78220F28E4
5A84B0FF35C585C18B19C61B51CA3E6C3AE72F666D681A4FA8B2477893175F30
08EEF551C2574B69A17F5C62AD9CA923E685213D53BFACB55EF49BE17964147B
02C4CA4F0806BA52F8A891A88B2F519575FD86F61DD7C7EE5F015B1BAE83E79E
3BB86BC0CFF599A80F5C4AA381B8581DF3F82578AC6FFC9216A06EBC754DE4C1
BE1E185A26488ED6138CF334D63A75CDA61370B656188C88BD1E7273E1A42F36
C0C6E0FB68F94CEBDA1CEB0CDCC489BCA1DBEA94AF6F37027434E22EC932CA5B
E3B470A5800B4FEDC4A99823CAFF87E567B96572BE6D9DA262C5151B948E529F
0C7A21052F1A28CE343530C96B7E92807415CC510ADEC7AFAEE3E54A00B1CF2E
9D4E9F057BA99AE776E482E332FC6F4EBD5E2952106E4600ED59E41847A2C431
ED3DEFC7267AD9DE87E23C236E70E1A6D7602606094B0C91DCA122F0BB3D4FA3
AA0CA96DA71466748187222315252264773FDAD954D114082DB6BC7FDAEB7C85
3A4B7B464A26A459F4A2593310245B1B9E7B8A0B7FF55338A74D2023B34333ED
B0DEE3ACD02BF724CCC2FCF1A0B58CB89C444F4564C1ECBC4CA3C544CFCA0D01
A294276F86BA1443F753A7BC8B7A60E9C5DC48A3DFFABC322A2A3F62BF60D6F2
439E2D50DCB82C026ADAA0169B6A38F6E8D65D483940C97544F888E9316A1381
F8185C146C3B2548A3817DB684926C2123318D4F634AEFAE03E5D4BE6B04697F
F3ED2A83E6E7875D6C2D53D4216E11F852EABDD845959D6C4CBC644B29781604
7EB63717E2C06056A800155E42E6B63290DABB71D4D1B394D7AE82EAE4C82760
C5849F6FC5FB394169622625F2493AD95E1A2BFFD0BB023BB23B95A95C52C138
94C9156315E5AFF47E4041A45DA7B0CABD8DE5F42B0018F834D058A09E910DF1
314D1B5A2E3CA886E10296CE26A4E176415F55FF32E4308FE22F0D0A45B8D17C
B74BDAA4BFF6DAB5380CBF6172F37B84598335AB3A61FB3C873145863BEC1B5E
8CAB530411E7B006480769434E9BF13F872380603A47CE5A30AE40FD497F4586
00B1A87AE31E65B7EFE7B1CB025613E53343001CDEFCD8F5E62795B990DB5F01
7A12825C0D642263A70EAA178D11BE7F34711A204432DA217576D9871A8E8784
028006F3F3248B5454ED6DC729CC5070524D1F1367E7D491B5803E4E32D24FDE
0B7C56732957AC35E56C635F6B316C147E4148F43F68B433E736D2E15CBE3A2C
9D93556A1DF4CEB57A1882F307F0EE099AF080659A1C90D89200DDB63772D73C
36E0280F8ACDDBDE5CD4F70A7A98F5267847CA1EA003CAAC24B337D6B2A8AA99
A53780AEAC7931FBA708E4052579960B3291B0BCB3D6138198E70881E7FA290C
6A3B164722FB8BD5CDC14E7E20CB3586C815A75E1C0585250D9F6F52025D82AD
E11AFF1EFF8F6FA46187E0BED9DB2F1525FF742755D9200C3C1FC2E172E0DCE6
76DAC7827316D2F90B3326C12523D372BEA69688A21D6EAF601ED4810A03B876
02F6FCDFB887A83C42C50F08E66B611F543149B7E31EC9602D4654DEB38E8E94
225D8F864E791EA6689395C19ED992688C38D5AB822DB77434BDC79A29F57E30
98ABC7EE49F007589A2A08E976226EA7F091A006D3E457F0FA404657430F1CEC
53881DF1B3457BD811E6152E7A6DA01FF8F441690E196B19402154F4AD4A1522
5015497AC2A59B07C199F94E3D08301AF343C837324B9EA595BAFFABFA38EAF5
3F517136457774C464F3D84202CD343788CC991B61ACB6AD7863E30EF2DEECFC
D5E0AF64571044339C2037CF6834EB429617C33666A20F94506F7AA03CEDE934
367F083F6561C939669E28B55BC3323D71FC7B4221C1A677B413EC24C29DA1F2
D33041FFA5D3B62F29CD0570748C3BBE64AC88813A2339892CF290B7D9CD73B2
B2A80AB7B924F1BEAB9F601CDA2C40EF93971D344A24F67D9508E4AC3D5068AA
B174E0965F73E7B3A5F532B99D116357AF029CBD77D99A1656CDB76C9282269F
570C0B57ED78FE33164934EAB70ED3852DB084C16B6097540C5C81A8CF53AD64
448E9130C01AB94B0657A5490D7BA7606326881C5A6CCAAC22D5454B2C1EB503
764C5B0691B761FE3254E951B3259B2EEB4FE37392533D3695FA6890A620DD86
3BD5364A28DE4283D9697AF2F4D165B73683B97280E3F8CE4547F56244DC6838
06DF7DE0E28FE4D056969AB8C04466F6B2323849E5A87116F694B78DE928155B
9D611E085902458C96E9107074347E144EBD38FF9C114D75E7B867C216989AFA
4EF66975C7C64CE5EC2AB958361D31BD648E1C0291A57F6AA25FF78D0E59C262
230123C5668C34A7178C9284E340D18BFB0BA4BEFE101D5BEA3B3CC5C384E1FF
F89E502CBB5561E9AF3C9B374D73F52611F17AAA550E93C8B39DEFE59FA506F8
812F8DA2BE72F0827246FCA44E4A772C5FDAAEFC70EA6D36AE941E3291793B66
598F7718C18CF6B0D1B1310C75AC850FB4C642FA3710C2C99051FDAA642A91F1
947AAB4A780D034BC00B16D7C4D77CA697B044812DAAEBBB8006F056F294A4A5
B77983DF1D1B3EBC3640262FBE15DEED450E81E397D0ABD05A9CB3E301CBB6E4
5FDA05D04DE260D94722956833588CADED91C5625989AFE8DD9E0B1844B116CE
5CE8DCF4C788F037BD3783D1E73023BB66A4AE15DC7959BB36A10B51E9638794
BEBDB65521D0010402575DAFFF833C4D59C1941E14E0BAECD4A9FBA8B9100A31
AD1DF7CE7CEDF45D8D75B8008CB234A10836AB34663A141DA69B46D41A04EDBD
E8A440911B183955048D808915D7BA588590785C36322BFE321C6361D12879D7
8AC6396BC3936BD40FF1476FF54922F2FD14A340951A0130FAB6CF0B56BB38CE
81015FEDF0CC3F7275F567D40E28BE131B0E4314D86EF0D6A8F840F462D9B2E8
C1F2B51F6DA60AD71029BDA0BE43A26E6F18EC0E9085AEA66291B62D69D698EE
B767B641BCC569A1EEF8A12E6263CE2C073CA42993FD8CECB8E7948261EFEC90
FFF20B1FE3119DA2CB9F6DAD1D6382F999E9F0692CB34C1344C7B86466716272
82A8947668FDF9CE6C611CD1BE1A3FF133DA6279F25F80B39F4A584B970D6156
292B8DB08399673F0DC75F1BDBE806E51B2946873E90D509B25853AB0F25FCA6
BB860E709684EA675A3C3C4F60A604BEF0EFF30EFE00E05C08AA50EABE80B564
D7AA72D05EAEE83D45EA12B8C2EBA316F10AFE920ABABE1FCB5723D66953BD9D
0A313F39A6A3DAAD30374F96FCEFB063F4E02A5A1B8F12733514B688408CA41A
769DABD9518E4DFEAB5DA339847235425AC5056E7AD9D54E4DD1BD7BEF204EEE
7DE594518B78765EE60502B5D4D8FC36D030FB2B0EFDD9A57200A82974EAF0D3
6C036B66FE05FF7E29BBBA2C52EE0385F33690BDADA2B0D538EA64AC7CB9682C
E60E17947E7E675D19901C7E8272CF0D458A8B0CF51077748D1F0A95AB030712
E24D053E101C9FD35AFEA96E669B1101E8644A4FA79BF0E2BE0D5D63D4C494AC
CCF815B9A464B3C0D47AECF229AA1EBC2E208024F3703B6B0716899B18263C29
2E1E8332654022615883F3B3D95ED3FBB8E563C2CC64E2DA3631AB809AE0FF99
F0DD777666B14EB7C80CEE58DB653AF6DEBC59D3AB82A2891C3C5224977B9464
55E674261A0932ECB029CC6CF4EB93729D362EF1C610E85FBBFC6151D81BE225
7C3E7C876E836A1E6009BE548E105149EB6052FA14D106E242C213CB237B187A
7B54F41B54433526B5BCF13ED43C4C3DD6C02669F517D7458EAA898572455534
CD8DCF13B125739FAB9FBEF8523676B7509EA7AD0D2111E3585BD961ACC52E50
F44E54C91326E481093C909067BED686BA113C18825686F9ED9588F06261AF3E
8D1343D17A35A511312DB573060A7E73001ABA76E395D789B19B969F25140187
92CA5E16B365ED83C24C44A68CC2E0C0821FA6C1C3A5B210E9C2146C0797AE35
5583D824B2BC3C6BBA9B877B857DA39049F5887F6C75EA22E2C1A23B0A23E741
9FD67B5E29F807987F3637173FA779ECF224B222F7278597CF205683610586A8
BEA497E867582A17B16335CEB85520A70B252F935F7CDFB69A1F8A67E1041C48
2B300306CB5E11A1DF57C36C6E9EA13C0560C3C8A14BF98C1530A3598F35E26F
2E8ED5D8A0B0A4EF950112B2A40681ED8E00E63D89CA32AE0687DC232178A07A
BFE12694DEB838C8B360EBFFB8D45798018A310214E9BEB7C62F58C1E729F224
EC05FB4EC009EF48E7E56CA2A9F84FDC460E352F0263ECE4B0148610E480FB16
13536FBB8EB7DE66C5F0C41B72060988FE907F39B32311E32A9B1946D8CACA5F
0DCD4EDF3A72A9A4A949376BC805CA2A372CF172D46B6B94412E7CF8B2C54489
E6D6A897790D5623EB7D6A90860842964426D9E506537B3F8B4366976D3F56E6
CF780B37CE39F605793D904FA4650A8AD23254FB4E9E9E4CE34660A7B6C08496
7A50FB5E53F0EA8ADEC17CF4BD5B6DCC5F7E835C3CE7D4454AAB910F223E3FD4
0709EACEB5AC116266894AFBA1C099D37DCC25C54AF0B2552C97BFBD1C6C0062
488763FDB07939C7885FD686DBF6C8D2BCA099078135FDF722D4C99AB28D06A0
A4080A732B877EA2DED6026CFA1807B087EAB33A3B2BFA56928987EB0BBAF4DC
72DA6B4EBF8B9D022DEDBC3DE44DD04F6367E04C3CBB3400BA3C1943B874CFB1
254F9A99F998AE7D06DE000B4293F4FCF1D78EFDE074FA6A057A6822533E61A4
C1E2E7B3AB456D19D9769EAB62AD01CA1E0C4F2554BD6F1F4C69E46C9C220B8A
6643077B74C1E100F1D9DD0E0ACD8468C5EEAB6B8AE5324CC077A3B24AEF2951
4FE023DB03883EB57564AEC4B94B42E8849A76945AE033F5D1C37EC63530A2EA
90F559625C437D4AB2016C4670C92D7236CD1D199C612555168BCFE359EEEA98
E07DFCAE1DA5FBE871D8035F777CF210384EFC671842C40D188F4E304C4610FA
7CCCF0512FDD24CB36B1F63F732A2D472C414FAC37B3A34E1E9C8CEF668572CF
91AC3CF6986C9F252363A207D88AB66A7C0DA4A116B14F03AB13D7E149FA176E
E68606F0B35312506C02F1A2826BBA36B4A8C4D61A96C406DF4CF3A843159D3B
AA527954C016D28FAA91548361B38A729CF1E6DF63A016E3F17980CE3D505216
E026DEA02B7D154B2882A031A276522741ACE718440F9AC620FFF89CFB7FCB19
55C7DC8933C690E226CCB41B71BF28FE6AA68AEFC449D6F2C5850581D95905FB
83958C19FE475DCA7075938672E207A41ED8B17A35CF2E4C380E50E1797F8558
26EAB926A054616AB45BAA486A85DBC2F45566226D9EA08B48360A2C205DED1E
30409EA873F16CF157EABB93758D7B49B76DB0ABB2C2646D3F2500142328D8D3
B40136F3CF6DB796FC6949F82AFF3FF151EDC1EF95339F55314E30DDEE869CFD
0E6BB75FD52D81EEB6FC227022120BEF4803811BEC75CB029A6DB10FCE7B5992
5A3F5FB7DB35B3D7944B49B6283A0129D49E7E9AFCA904B37EDB25A80BF2A041
0C67EDE128761D164A9843955BBFEC7213307B78378D8CAF1E08E1C53C079B8B
EAA3E0F907086AA23BCD6FAFB826793EBFED8F1CDA2D49D7672E195B09727629
C1A422D0405FB9B60B749DF353AFF70433732530AB1063F98984CC6C46F3E412
CAE11A023ED7D360444EDD72A0CC432E23DF81945A0E9729DF3EE2000E417BCD
E241F0C257CAB8981A6EA85C135F60246D47ECC90571044E7021EA984A40DAF7
FDF2FDF4017F94D9D89F1B6F249BCAAC5E185E4FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CA51C950537F9643D44B6981772E8546A6D79EFC00389188E5C8
2D606AB2BCD7AB93A8795AA46773CFDEA40374D87CAB4A5DD8C92695818BA435
6E9666091CAEAC8D1832F2AD07EFF1919E9BA90194E24A69649F0DFD0046D39C
47645DD6E78973BF5EB3A43922976B876293A1ADECD08D35588B794EF9FE03CD
D26508432F9ACEEC0C86CA4D7F8BF0DECC07116A05B5D6D42730459DD44EB860
468A7C643142F5804346C1264135E15756B43D90E252FBBC1F618530BACF4716
5362C1E0F6B93CCEBD0545DD362FF49B08C9033A1E95F5F8A1717DBBA7AAA1EA
72855EB4ECF4832F29721F2965759EDA7ACC778D03F409DEB008EB2142A1B4DC
97D164780529938A4FA7BA0BACA855B706CFAD5EFC9D6CA122FB2077E554C9C8
4A1760A73FAC61EF6C050296ECF0188950E744AB53050CE216C0166D14BAC758
B30905B56CCEDE37F37167FBCFA2CC9AF077A23862B4ED64CD18471A49B62240
FEF22F4D82468BE65F424F267E9713229F7B3ABA30559D9E4B6B06AAF0053FF6
A81D815ABB1F31A89E1F1F3F3712315F712F719E2104FC38B591366950DCA065
662CFBC9594DDA8A2D0B424F25A1A8E0DC96E47F52F335D4EF5B45ED1A9CE37E
2A2A6FA2C2D8A082FB786FE87094992733E0E8E7B556BB4DD1B0EFDAF667A918
171169D8669AF155525E2C91A8525079B97D9FA6FE5B7DA4A263813F972B036B
CC08CCB25B2BADFDB659F305315BE273E5D52D4A69DAA10D9AC7B96C817AD352
B5C4397872ED1E0BA765B0309FE98988CAFF8DCCEB5A97352B6F2DC523CFE336
6996B02D210D844B1FA28AAAB93DC7557045787E987A0B316211C89EC7A8EC3A
02D70409252A8D4FA50EF1BEBA5095045ABA7952457E62E4081D591C36369479
139F23EB1F9D299353CDC99BA9CE2DA27F3D413173D9F296B3DD186F8C3F8658
C91B59C58B51B79E9588AFBB6A2D10D335B76934CAEC6AB8785BFB6A876FE189
F7500B393E531E77C5D38E2FA764893C50807D386C31A52984269355B641D8A0
414D327EB4BC88FA87B910008EA8FEC3E81B8D3532498E7875E1593E1DF8C371
9500A4C4A0951F09F5CDA85FDD822B626F0B4DF1B16AC3C8E46642D95E4D5E8D
E9927E16E5582217693A50FD1F5B7569629AF50EBCF7152E3715510FBF60F167
5356A9FECDA71F649EB3C250BFF809D81E427E3BF24E83613E8242308FE26F51
C5F52B538A85716A62F327A107BD87346338B9DB6F83FE557134C14144A554C6
2461266E19E262F020AC43AC01DB8BD67102E1322FD08D6A1AD08B87EDF29D57
6787EF5896E8747BD177565DB814951BE7CFE6591438894018072909D00732D7
1F63668F46B20EDCA647E66B811F82F08DFAE1979E9ADB992C57D4BC9FF7769E
0A6E389AD0B2A5D10CD4C41A40097EF750675B8D8743FC64B26BF9E44921A707
C2CF3EDBA686132F333DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC4B62BB8
8965B8D22AB04A724DED273BA060E797C1BB765049E61C0B63D478DBD9D1F904
EB6959B1D3A39766501356651F2B690A9445963F346D0667986C994880FE8971
FC86F06FAA5E98124881CD477B308B5B7341714EB80B6C57DDB50EC74C20E497
DF8C5D90DF2EB6F0AC1521FBFD1538DDCF25F9748E9C7C49CDC758CA99C4B063
212655C879F6EB96BB55BF5157FD09085730695ADEFF8C47E610779597A25E67
8DB4EE7B616DD99080BF793667DE800E6DEB1FCFA76FEA448A60401A3B11DCA3
E9524EAAFAA83DDCD78D676E71B6C51A64A87FD82AC7FD782D6126DD787FEEBC
4A63D583CE7227EC10365966AF2C08726F27A20D095709F949F404909374B2CC
B0B57BA8F2F422BFF55CE7D534A2E4DC1BF74D5A454BF4485E2B7DC8C9A39E76
8F162336CEB7BE8A5C27AE952F4946D01DD1D65C1D50D6E1D486FB5FDBEE9826
DA01DD8FA5EC384E9B78FA5A7F6720D207815F79EEF626A126E8005FCA77ECB3
172F5199E5C54611D9D515EEBB7192C63D22D02BB2A5A2727BC0458997642898
4A7DFACBD3FE28A8903CB42EB0ECBEECE10F4D9FD0C5B9E9F3A14F9BFBA60CA6
556B0473D5BBC4C67C2D25384D8E7B9EB31D79E2C460742138982CEEB80F3AA6
BF99216652ACBD7F2F5349E857177D94A431C46347867CCB8E4EDFC64B532A24
C570498BBC81C4FBEB957EBC6BE93183DE178479FA333A00B88F0BA650AB274E
35E9F7715EE1E8617FC7BEC56879D91DADEAA25F850083BE6CC26AE7437664A2
7C1C6EC83AFCFCF697DCC8808A931CB62997E29B6877A1BD00BC1A7A9D57AEF1
E1DCCEEBAAE87CF5DEBCE7349981D834A1E8AB45FFE334532FFF6EE351252820
E234CA2EEEB4DBB360CA7518709F74BCB9FEE4077CC0C490F7C2A4855B442011
F240BB7390D79EB357A06CD67E2C5BD39E004F55F754A8E2469082BBCCC3E63B
027A4C3DF0C328E89C5355F29E7EE697BFFECCAE75C27AEA6C7B73B4B4E4A0DE
B874CDB1570739B1A1A213262E4D4AB784EDEA3CC6F0872C28108F7EBBF5BF77
0C0BA6C712287CC741D17C19DF574028247317FB22442B6DAAD517B60D75302E
7A8703A70517C9FE24A6930AC314870AC4D133C60D9CFAB56CE8F8D14472BA88
3831DE798AD51B71C2CEE666A5693C95962D6AC49F31A5D39135CC8D762C5E53
C23CCF67CA8BF1B1274494E363BF0890FF5C1FB5FC75FD528B2FC34AB914C268
C8874E34F01A8F3E17F33925DFE5F0CF45E34F3E676F57892E7B84E9F1842147
0D2F0274738CB7DB4E9A14291AF15CE3BBD6B3B90E59C99B4085E7065FB50E28
631D2A286B9862B0C69172A7B286134925909155C60AD3A77AEC843DC75C97EA
CBC20908E329F5DE8442FF13EBBD0D06D7E62CE534576EC62AE892310FD56056
AB112633DC84FB7743B5F73E9DD0B021F9ACD205A00D5C6228AA1D43F1C6F0E9
EA338B2E8A829D5D4EFFD8613B50B2DF38EEF34AD0B05A9F13D36244225B77A8
8166768942CF7E11D8AC59AE55F0F7DBAA322E1E5D976C33A4C1B9D5384F70AB
C8F9F74EC9689248EE97D7DC3783A048D871AC6F3464517ED20118D09F22813E
9A8F6B24CC94A37ED7FE37D7D03026506C2132A9A68ACF4E48AEA4E44DD23AD5
437110523A774873BFDB9AE479901957507D4B848A373D2FE906518513D56A96
586FFF4CDCB491617876DC12D9D703BBF1E814059F231CACE3B876EACEA2B463
B4F24C1D3D7510A603C11F295FAC3B649D8BEEE2DBF85283D1B3DD65CB510702
758F21F8DB9FABFFCDE8B4D3BF99190383F85FB9B692A0A29241EE13B4F6714D
41A2DE46FC28194AD2063A1D0C54EF86D11A29D25C36591746DD9783CE80D770
7A404B5B7F34AD778608F4CF9EDD7501A2AEE2F85AAF60771CDB854398BA98AF
AEC951690051A2662DBE19109D42CF3575A4130B81E97C2A9BC215A2E2A34BEB
5AC89CE072710DEF408694402960947DA3B6BF54DA82FFE0222F7AB0E97B3290
EDAED775EAB0D7D553F222A3B014EB44EE9624B0C96706BB7AE92041B78426E4
C7EDA2A77A7C129EE67D6D67C2BC96C880A6B435F850206D0AB69B74A7E9FD53
8C4338F8DE787EF2B604061C0118BEA317D3620FD9DDBF75FB63DB4ADBB1652A
3583ABE38CE55C584D2618007F4825DFDAA3116D2B7E450C8F7B16278DE567FB
37E8F702A228AEF49047078B06C8A968F278BA7BCA00EA900B2FCF2FC9ABBC03
23617AFE301047C9646BA848529E3D9DFFBC86682BAC2D53944F47E4D257CB17
98520F27F65D75B2E795E40A62C9EAC215ED0EEB650262CCC5BAD1744FCB6DB4
032EA0C0ECB7BBC044D8B0C662A0B19CE448D189FB99AF0D7FA4DA1316C3C527
9767142D132F62E0029C751A0D375757D95AE364394FC25E6E0D02C6840ECAA5
EB3D39A3B9FDEF15DA1F1505CDD37755796CD5F76FEA4D8AC7A08A586B816A9F
BE78FF96BF1E3CD52791A35F612F1A0E540B3911A7D28491883B928672AF8E70
6194412994A5A0298BEF561152F82FF64CD3298D11287B46482FBEAD4031D9AB
6265FB6BB647FD9FD95E0A2BC79B11AF3FD1E8FE988132C26317BF8119C2B534
65DABEDF733F2C517D970B01BF2FD7C2020471CDA35DFDD2FA7A020E5B8B0F4C
98521838E9ADF7C3C36287440EF39417ACBBED2D94330DDD281BB30948DBD034
3D9ADA66016E6C568B9C0A0C4A73C9437FCF888AA207280ABF9C548DDAE35A68
2EAD10C1DAA94393A66FD95AB6A2D50A250A419C088A5C5BD673997CFF6D5945
3F0E5D6CE8450BA1EEAF7D7C3B6E355805140A2AF25AB7CAB1AB1294CC34A4E8
E375F4819B5D5BAB08023365C6CA5F6CF88C1ADAECFD2F6924A20511364B00C8
08BF6BE47C4B4E4883C2AB94F028FC392D5640C2E2D75914785C1E4BFD2F9B95
CC367594FB2E0413071727F3BA34DD5344505F8A106132DB61FFF7E53DFF8484
9ABCABB785C4750138BCF44F6580ABCA6F9F85908BB347934BF05C4372D2F2EB
AE7A00EC62F51FE36E59F32EB5FF5F685FF9DA9B01089744351A1BD4BCB8982D
6AE5E796ADCEC43A85122841320950D78CAE1810959FB8D4B5120DC96614A973
196AD2DA4D364F328BFCEB747C734B4712ADD20899D0C5D4DE513E0D6D14A398
E0EB8FE23F24120E566AABF41F029DAF6B084EC863B1E81AAF92AFCD60F29551
F39AFEF242881863574EEAAF3E8CEAD9E2EAE9100724E22B70C2130502A39030
F10073DC120969CAAF54CDE3A47C1CB8FCE97486061BA69512EB7A36908C4447
14FF24C22C90E9B1829AECCB3D14EF447D7E09A12C41EF74CFF3FE0FA22F231D
769E8F0EB6225C7E0A9D5A5F3B8C6B5AAF67F3E2F2C12413F757EB1ECC66A70B
EA00BBDD491FE613402B177E1391FD90243A28EEB9D354ECCAA48FA831272ACB
55BBC403803D09B9E94DCF2543557EFBC166E9384CF3AE0F9E15FC4288FBA0A3
DCF2B9AA2680A692AF390F3467DBFAA0B2DB6199ECD01315E4225B23ED998AED
214BBE2CDB5A74BE21DB729838FE3BF252C6894A939DB7411BB2037B7C03061B
9E7D8D87FFA7C85B7701941DA62E7AAFA6ABFC9C4439815B40F60DA613291E2C
020F6638C8964DA68A5FE05749E9CCC94D660A039C83ED414F9868142F4CA9C2
D2F705DD34C471C23E92F49E0BF0A662C7FA055A29EC31C380BC0884761B756E
DB71A24D7FC4886CCDF9C9A48F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6A6325FBC87D9D0E635AC2EE5069D7F11D65E7B61E
CADC94CCCE89FB906FFA6E784E7D58D0F717817F3007FD7A87F53AB40E03103A
5A994EF4A4B82A4CD3AF4410331B1A4F64E4BC682C4552ABBB7A7AF1BA2BE1DA
62D42F448933911C81895DAD7D74B8182DB648FC01DE11C0F21F65DBB6B481D0
5C69088A0E19A14AAA9644CD1D850C6AA826B223E36E496B79B2C7384BD18B38
17C4B95C493F0DF9044517835C5A18B6EDACA49FE842BCAD47D03CBAF47C14B4
B93BAD310343816BDAE9E45A690A776E288BEED7010ADB1076B23257F9484960
9B14C8D1F96356661F43F7ECB1CF1480CDFA710290A6BCA196798F6C6054F05F
09CA349F60F4C7D65FA9CBAF21DC1BFC18242EEBA6A5AE45421B52AA33B201CD
60D01E56D959600E3DDBB1E00F77A025329DE55458EE17551D5F34BBF7FBE754
C780FB8F73146ECB5A245A39A7FD55D42E3FFFE439D20EF38EA4183819335015
CF65817532EE73D71316F0AC637F85D3A9743AFF92AB12E18F4E797053166FB0
DB325F71E119426B403551C0BFFAFCE6B05E537144CA3F6E7E9586FC9CCCBE1B
FF77D3834607E33F7301AC5B13C3896CCC8C2EA7E6A19A68B64EAF236A3468C0
F9453189A1D67CC8572030668FC456B3334F76E5910578DCD4A83C7689FA12A1
1F62529180060272B7EDC9492C1FDE14151A57D02371497BA21EA208A185D6B8
2C973F1C438C704EABA8A055F8A2E33E28344A7A9EC8F2CD1BF58C6C51F6431D
E0F8FEB6C3091AFBCAEEC0FB3F3A46C68A322971F6A0B8C2FA887BFD5F3B2C23
FCEA72934FB0F37723C0C4BFA4DFE3FD4AE99F5A8595EA8735A065390AAFDBA1
37D3B30AE2D428B27933780412D792988A989C16915E134A47A4A117A55B66AD
F5E352EF520AF90041D351B8449401B5333312F37DA8BE2B7352B7BEA2628D87
4BA2A9924DD9A403B1F7B8C03F8834825060097F70B3B928E4EAACF4C2CF4E3B
389616752FD84BAD4064ADE75274C88704558DFC61E6AD7FDFBD78C86CBA102A
8D930FB688BADBB0DADF133520A0F469BAC9340BF37F24E599F69315FFDA3BEB
D6D9D9737432C92131988F628B3D338A61BD36BEBFA59B437886087C181DF896
A91221D05DEBEA3F57AFE410F31B6585DA2F331711637E00C9DDDB1F512C1897
A0C5649DA270A85BDF25A495B6327CDC75C2C2D92AA5F61B20F0CEC37D00CDD2
85C2A73059E0943574E97595571623BB8F2CE7B5CB831C6419C1AE3CA5EEDFF0
0FD6E600120AEA8AC03FC0489B556EB136818854F3F8AD7D6478796016A218AF
894B558561839D9341CF3124E061AAA94ABBCA327466A0A3BCF5F067895C4949
73A0EB48EF9B333A1FD421981CBF86080E6DE019FCB674F0F744530251276F85
95FC6E2DC9B311CE3FB73AF749D0B1E65F7D6D82D75C153F1F3A1807D69476D3
A5E818B1C68EB41D2E0C253E6C1FEB33D8A437C90B961F7CB7EBD7AE5FEE4C0E
397CF0D757ED18EB76A7AF9DC3D11DB04B102EC623E3C686009F78D52CDDE732
034756A2414ABF6E159D01156AF9E023C9147E5840EEF5EC8605C94DFBDBC308
B0083A268CD61A7E73677071A78C30297C7297F8FCD38A51FF50E856DF449482
AE61639A11EA164AE2836C868AF15A974E65435752A626C1C065114CDD7CAA17
1A8DB1A9E3513DC4E08ECBD84DF30718C30A268A2002B0377BDDA50442166809
EE35C7EBAED3AF20C2BF7B0A6467A201AE4F7058ADCE6525C45597F16A22B1BF
CB3C0B97873B1F3B61DFE3EB3F0C871F9DA6BFB9DD9D131FA9D49361B00CB7E3
2E99117AA87EE320C545
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BAFA7892567BEA46F08D78E105FB1
0252DC8E0EA149DF9D95D5D24C4B6B2795D94BDEB015C731EDFF85EC1CFA93D5
D6087892FEE1D0B7EECA805A8ECC002A4D483ED01D7F56D4B0ECD46EF72E02F9
E238A7C7FEF6E38762888F2912920CD0C00F393D1D07D7CB3A30733FCEBF2730
D812FDA06934F16F183052D3D1BEE1F6F9E8DD2B04A1858D9B4BD21DC1E32FCB
7610BEAD29527E98C6ED10893E4B2C5725588E1C4490068ACC9773393CE62FEA
ED981D7EC957174A99C23140EDEB93B2B8615EF1D6868BFE9F953BF90D731B90
C4F19A0999B940D7B30E13B1118FD1A28A2CEE1A78FBCD55AFD5FB30944EE4F1
82641F05198CB96E1262F95B05E91CF259187F0E4A5BDF42FF18E08E64973275
A1BF22D5714E8851D93331FF300A266B618126D10754D562A97C214E88DCF08F
2838A5BEB990584A9351DC689D69CB7FFBED316BC6EEB5CDB0636DF51B3F92F4
E3681F40F1FE8680698250F9C06BCFCEC5781A692410F18B35935AA9D15EB6A4
59ABA0B05A7962C3723BF6E61E3C3E10DE25AE1908F86A47261CB849B07F5777
B063247CD0F1D75102D7BEBA6BFAE4C9D1BB679CBABE4996D7829CA57157A0C2
1189663DB06992292E4EE841E84D80C291C9516038BAB4939EC62C6113BBCF86
D7A1C356032136221AC34BDD22D9433F0FC61DD06BF1493BFD06A184A94E7ECE
046B6C6E0E2C5C0822AD4ACC38A6480F55E66193090204B5D4D40F80BCE763C2
7BB9B68F8E8367991AA1DFA2F966331B52ACA50DB8C6437C945D1D7CCAB290C9
D734A287BC52FA90B551817128AC48A4BC9A1CF74EA3598B2B5C7AC6112CF380
D176DD6BC6658BB55129FC08BFD08FA0800DCC0592D879092830CE4255CD0A8D
89898025EA873936EB69BC17539AFB4E5E6E11F7F61952CDBAC94E549E58EA59
667F4D102106103DD9698497462FA7C43F18027FC8C43613F0CA0B415712166D
DA1A28EB351551583A0E4944DD3B550ABDC69E42A69D64B62FFD6B8E9C8EAC72
E5937241C4221C5A2FCA8A6A12CD2A46F5111DA9A514426C023815CBDA825A8D
B0065420EF575D7F4E1A56A3CC07A5C1512F82122653ED2E01FF4C3FF4BDE479
7E2A822D90D126E8F5F1F030DFD162B67A8E6EE0DB0CBFF18E0AE3487EDE0A14
8F2D79715A87199138664F32C97869ECFF4F8876134E5B5D5D1D811F297520B6
30C35BFF64186EA9C5E4B14BF26A5DC40551FDC72EDDF85146A8B44886FDE2CE
E84A3422285D1F143B6DFD8FE991B8E90E3C26FCE96B24DED8A0DA83D58D8413
A45EB18DE0C9D076E6389B8F7471FC666CB194CF4D162729D744B8F7CE9ACC73
F75B045E923878E5F33D28C98CD7E3DBC673F411F9A7083494C09998FB17B13D
8773D1003F338394CB9C4E4BD0B8F9C6B3C6FB075F188A9FF4DACA0B00220E4A
62F02115A7D25AE63F97CFC917A596A9D729DF7592C4221A370CA1391B3F4A1A
A24930E7085F7B9D4C73A4C61AC3B0B2A85823E7169D04E3BE2B3B93E6DC31F1
2099D0273CCB1E607207B072E31EF32324EF695DE71AA287D7677F4E5CF6BDD0
93D85452C96D4741F321D5CF7D11A76E2455C325A2589E5DF9D6FAD8CAC5C9A2
8336603006289544091C3074E04673F0EF887E8A89689BED966ADC9AC306D01B
6E24DBB2CFFBEF2677D14EED3455C90F1D36E21D52A210FECA5F50626F215263
400C0D43F4A0999B39D1D5F9EDAB9FCEE3756BC65150359CF1068CEE7B5E2928
E43D4A764EF76A128CD8DAC7FB2EB988DB6254CFD706847009D7C00112940844
A800011A3E283257FA60C5AFAD3B71CF6D6772E5E77D6B4A4DAE890620BF249A
218DE01B8B920F09E9FA8EE07CE49292986A66BD545CCECC92324DC9B2B6C25A
3BEC7DAFABAD7E396F1FCBC05A0C6DC542FB532DA36B397BAE7ACEEDCDBFE925
0FC166EF726FC65FDA29EDFB3AD2F0ECF54472863A43FD9895C72B839A36171E
129FD3D863A9213E0A0CBBC22A3CDE0856BD8640D2B9B1844E03A2906967B122
74346D1DE154C9A6EC3722200E422954F14F7DA45D05FA1A04F498C68DBA383B
4FF50244A607452BEF699E8E45D98C323F8701213707958220C1FDC6D091C559
E259D2282B968CDDA8ED63036596FC68B3EECA58DE0BB7A26FD1D6ABF8A2A38E
96EBE70EAFC1644244F63F8367906C7C4648EF33244ECEF4405FC89A189B9885
F7A063D99B451BFD666E82909A1D825725B3CB69F0FD12D2A1FA3458D37F8CD2
E851947683E053C1AD6788DD87665BF143F03485E11FFE1F67FB6D16AF93FDA1
CC5A80E67E0CB7B9F640E24491E6CA5FF9092C04A0D02A59A1F2AE4E41457830
F8D1673EF8E107CC14BCD05332184324213782BCC789C0465004AEE928681EF6
27A2A877E3183F4BBB5E7D38EA83166314C1E79FE90A905504778081D36D25AC
400CEDBA37A55CF4BD0B7750116063CC06979549C7FCEE1F220DEF7CD6F56354
DFE69300CFCEC0B0D78AD8AACAB446B96DC3801FA8715FC91FFA1B81A8A7EBFA
F845E184CC0594180D3676DEAD9E3237DE5B48BA2E1FCD1F94D4321DFC4A7883
083D7F28ED96659D3AE8D749527468A9A8F373D160DD28034D6CB673308F9796
66FD919D83DF85BA4F4B14D6A77044767539C2A326D09C3DDB7FC6A25976EC69
FFF9B117C01C390C32EF2E36CFEB7A1DC6A7028A0ADDC43FA3076B2674E5A546
5AA41CE071D9F7F959365E6642C9D6103231E07E3A2075D994731C0513A20ED7
9233548C37269B71E48E01F23E99F43228885B0DCBFB9C8A95985A0571E67A52
C620D880BC33856ED29B9AB43194009FFF5D0BEF08CA1B68D590FE412DFDB2B9
E42CCDC718968FC48745D92844D180442351D5CBAD32CCCAF251A9F2C4CF3C02
2BC1A00931CA6A8CB8F15F9144E36E456648D754560459B7CEC77DF4B60F3312
FFE826D8ACAF741FB1F4063CEC6277A4714A0E31DB990EA9E24711FEBDC47257
1A69778557929968020D41EAA7F6C1A9B682B344B7DC94AAEDADFD1DA09BFA28
7A8C9946FD16E663D804A178F70AFFEE9D5AEC3609B14BBF10E66264FD1E6EAE
175987CC0DE53C5D2C46280FDDDFC1EE81028E13027F26BABF3AE38AF303B8D3
FC68C8E444AD667F9BD757CC7D708592EDA8C52DE6ADB9F11C2D1B9D7B657602
9D6C19FCC634E08E4E5DD22BE55B48962C844CABB7BED489A190D1E8539850BA
08F74CE8E2D1C3C40F2D73104612FA58833A4EFA28EDB21ED30C7DDABE98B213
EA5CA9F0C24AC1F2C37FBFD478F2AA31FB2A32A4C0367F3CDAADB9A370228BDD
72DCA6C0EAFC795EE82FEC8FEA7C675B171F8128ACF24EE5A25DD63DAB617CA8
B941DA69A928EBE46A46B2BF9457BB522B655EEBD4881A62392CAC3E45E73771
2ADC7D2C4866AED77FD6FFA5346A760EBBE54E36B118D2481BB1E1736BDD36A2
2E617F623FECC043475A0FD680DDA601ED83B77229E55CC6DB71752DD0DEACAE
196EB3927A7EFFE48E354CF9989F9C09C97000C4AB872867CC5737D431073B79
5C41F68E5F98F90921CCE377260EF06A34FD89D0B39126E6179FF4C5DD40AC27
4F3072B651C69A8B04341CD443E0F90CC36D65565B2A317094CFE27D918C284E
DF4D385A5E94F122147F1F00F23B1ECA5D3BEA202AA1F72C6B470701C381E335
C2364CFCEBACDD20CA3F4B86CBB53775A35F4C4F79078BE326D09EF99C25BC8D
587374441FFECBA1924D32D059448FD4B669BC65C955094D0739019E61F6A967
21D6E8D87B447AE6C7E5FB8B9526A57EEF268AA1B135ACE909BC9E937ADE20F8
DF860C72207FAF08E24C5D0A20A385910CF5CC9590B7D41AB8EEC8388545D122
67B7308052D3C9D85E969C11CBF357B679D7522BB37C8F7C4C194AE8D5D20A70
FFD5ED665B928A193AC2863B41286894AD3A0D0C672C375E81298CB839DFA0CC
55A9CA2E2B7D736DB0F32541B8D32B5C20AEBCF903955FE86320D7836FE74278
5B93336E939EB40A8E211ADFB05DBC8C1F90FF30BDC97107DD0F2BE9148FD403
D24958BCA5AE6FD2F0CFD1F8470F0DE9599E8F9F8AE660FE5C485C0819C85E12
381B4DF22BCA0CD3745599B7A3E5BA13F95EEF8F1D23575A3C84CD3760AAE7D6
885413557B5EA1F11B8FE226AE94AEDA6C5911D9A0E6336E34FE912CB497E519
444446F0E2F2A2CFF9963C615AAD610554CAE65CB5F398F0236CE827CB5650C6
2A761566723D274C865573C3D6A9EF2F678184865BC49CDF6F54B67894863BA0
A83115E8AED878484FAD3448F4BBFCD659CB98FEC0044612E8EB5CA65ED931CC
5E0FE1F28D6564C7ED4964AFBE6549ABEEAD5264A033FB29E70F1D17FDADA6E5
217C0F69D4D0C42D85063F79EE76B68F6328A0DEE6E6ABC85888DC059DBE81F4
0B65934AD2E4DF3C2E62453897306CDAD972101182A41616016A7C6A48F5A0EE
8753A849B60063FDCE90E2ACA2D45B649DD78499592F2BED26E5A2583C8C7A4D
020A8EEC2D80FC67A306D161ADF5535FEB1867A1526B2BD122E7A2BA60639A27
F4C8F3C60BD4B999DE15BB9EC58D6A33FD49D794D1141DEC06352BC474DB408B
5BE524EFAD438A22F57F90AAC1630E4EC92A953711D45B1234DDDEBF0B8B9D50
6E1C35A172004F2F9358A1D89C4B9EBAADEB9AF7DE859650A03B90F3D929D1CB
D7B76743E4FE1EA3AF6EBBE3E5F0B8799780451C6503AA0C6670967F6C3CAA12
A976CA79090576A6D637A543047CB2A4B9DC9AF06BDBDFC5AAAE4AA17743328A
F10D3B6A7A5C6D1553F94317D02D74E2C69927E8BA630090AFD344BB225F08F4
7868D6C4D857C8A758C95173C09068553725ABA9423F4B268C5807224025E47A
8EB324726265816EDBA8EF142D2940FCF6BAF61C9BFAD1A68A0C3496BCA768F4
AF8016D7A65BBA3AAC4A62A0561E63D83817806E2DF65E941631878B1817E05E
C9CB2ED4351666F90CC1B2CD008B5941734D4046458F779E8398B3FD21D1FE47
D715C304B749B5A65638BF4B17FBEC40920F7EB24EC8037A8BCC6C38EF3B8F2C
C7EF384BDECD14B341F14A9EA4D83B33DC6B94C76B462DE05619626AF346FBD5
F50796B79DD498E95E04A726AC114DEBCA5A91FDDCAC2042AD0EA58773ED0DE9
FC13FB013100364A805204DA8496B59464F66007194CF1DBA630F568D9EB99B3
CA1433C12D69528330250F9B6C1E24E9788A6F0B10BCD386D19E8EEB424D3152
712B846F6A2785C492E890228316162A20AF3D8CA197EB10B290F5AC5F27DBB7
103C432EDAEC18CAD42166EDA7834BE593F052F924CB26E9AD37F597241DFAEA
7979DF9E1754DD7CB0CDE2E2B35C58847F36B887EED1D629B477018D5203AA47
574A11C430C62ADD6CC6FB7D092E77F9848F8E648FB879E1A1C18C8CF9E95991
FD555A215C21DC2E81C8ADC0A70F58A3967DE26F93EB7C1019B8A18D4135AAF5
C90D6301C4C4F6D85252A14F0370B44FF5EF5CBA6285BC3DE6AB078CED5FB3D4
EC94C08179DF1D96F5D2CC48EFD604C6018E7285C9712F76BFD82B5151EABE73
53EBFBD4A862142B7A895F9DB67F41582D0C817460440E9CA8E0AC5AEE17551D
5F34BBF7085F919991EC1D1A189B059F32E1104CE528460DD0284CA57CD2178A
F167A7725902F9B0EB4EAC290A74DAE19CBEB1C97D888B379587E81C3147DFC0
DC2804610E4F730DAF2F2D5AB767C320C62543E266E11B73E1FE5770ADECFE05
C4FB0862A406960705C7BE798114AF3F36DF5FD7E3659796103F5B013D89DC6B
B00C7ACA2D1E3414E21C20B8AA569E68C1FFBEE8A6DECB0F5220046666AD30B6
5C11C377B8756144A925E5C17D7D98AE768587E98FB123C1C8AA90068953CD05
54E041F090AD4F48955FE377C69B0037461BD360D2D3A2CF441DD3A7C6BD6348
B96E2B9A86644C798549129F0F2E61ACE7BC549F2A430A703529E5DB46542534
F225F840CB69A62F473672BFFE79BB6D99AD5AC62145C7A4FE583CDAFD6A1763
D775A7AD326589828310346614F45671DFA9F8DE7AC339F7B421983E61D048B1
2EC062206BD45515F514C48065871D95F479057A8A29DC524D9781A604DF9C1E
7CF1B65135F07EAF54D944AAB77B61B0A7EB4642CE74E9751049301D6D600224
EDE9B574517228E3E7F8EC49617809FB8B2F24322AB310F16A60F884A5889B00
2D2AF308222559DABF07BD914ABC6B9F012D4C70BC2EB4407F1E7BB6D8AFFDC6
C6849C9019819639E9CD007859A5768AA9E2269D0AF9511B662551A7BD6FC76D
57A2F5929F48743EC18678FA414D2F33B16A28C4A677F9A2D57A4051F9985A4C
77BD0AEBAC90BB3BF0C993A466516669B2851293F533161005D90CA384045DC2
39D4F58C1866E61C25984CB5511FBAE3C48B1B02C98798499DB7823131733D7F
FFE2E60835E8E570EE206034708F553530FB450EF47B6661102BB2F9F31F0F4F
F3BAD7CD3EE1F69B71091E8AF02AEAC6092DFA061D9C3DF3C8DE35F38152D963
31C25A10BAE939C2E533478ECE6CEB9EB61447E7F2E653010BF94890633FEC0D
13586AD5E371AF164E193357D218276A5D0FA4EADB3616CBBE98428D5D806834
1A95605F8A120A04A3E08D6749F21CE313BD5A81FC10C1B72D6702AE620AF391
022A8ECABC9E50D69CC6CFF06936ED5F15962D7DBEBEBC3D2667ABFED58E96F6
D1273E11D3AAE27591284292FB1BF22EA7654C279766406D46ED465309FBCD5D
50D1585C981C7430956CB430F62491C35CC98FA817B5B18FE2517839D51030B6
95AE26FE3F135787095ACA9E34C45BAED9D91FF93DA9079F2F2B4C3A61A645A6
81C23966AB83B4D93D4FC5D149A6F8334C32EA38CBF518502AC8917F8C0C4DDE
1AA36C309006002328111B4DF5E4EBC8057FBBA562518988C9DA919D0075F512
AC73798C9668E38E4B93D0746AFB81B32D8436B344E43F5EE5683E3A7F18BD16
4E2E92CBD9297F03105656270A536E5DC0236DA24612993121152E7E7B729853
59956C3289C70D9C08811A878A19C1C03F5CE6BA39FD0EFD694DC5204A247B08
1D9AF5108E51851308DA2FBE443764E6A62177C66ACAAA20500A09579E605F91
22E137F808DCFF33D406320583193B6201E1F9F0117BE623B3B8E9274798F32E
B5455A608A969848587985A5D65314D2BB69D35F3F089F755BA04D5D03A83FE0
5F4D937FDBEB2DCCD7C4B742DCBC9741FDB235A75BE4657C79BDD72F8786DA7C
61388B92A6E8971FD39DBD4BE29E699D9E44B7A6E99ACE99DB144558B39384BA
3C6856AD92A1D0D9DE723F0560B6DE964A49725260F4476B1FB2B787C3067060
CAB18398026DBF58DA9B6D0B1883104B5258E1D799C1260629F782929FBC645D
9C5AAF17B17F5FA6408347BC1C6DBBAAAAB55FA3FADCA45EF6DF93D57CE57C17
59F44CDD39DE075AAB0F3F214029548ECB03F2BD47F248469DC1BB98816531D1
983A33A1BE7394B42FD72BF46E42D81BE9311848F1B064872B758999AF2F2437
05101C7B3A335BEFD663C5F21C125165A6507983B4F3E713B1F8007A809C75D2
2373802023DD465F60E5E5492F176158EEAE64FB30F298EFCF03915CB1C64141
049219FC028D039D72EEA18654E1695F8958AEBE0880899DFF84906C7C3DE133
38F52F2F28A807A17C647A6DFCBE5BF89E5C56D299A58F1BFA1E31E524FC8375
17D46350DB7BA8D2BE949439027BA84718EEB6FE7AED268986B789FF758D29DA
2A03176C992FCFA6C774B5830C469036ACDDBA116204959F428EB911057E8816
13A81A1763E4217B4FC14BD6FF18B37A143D63060AF4FDDD9069BEA6501105C9
AB89E142758EF9A36F745408A1249F3175E659640825731A12F98C3C20EA192C
0BE3DF46B4494D36D844F53727F4B65D85450356565AE1C30441451E00D5A30B
240DD1FB8177DF56958CDC540269959F55E4C6C1C1C3851FECAF5B1A04314225
20EC72773C1DD91907A984DE4C96138BE3BDA2BE4026A20F54A50A66A7F0E606
D1ED7577FF45529994A6962157442881BA76C9C7F25AEBFB7CCBED053E6098E2
3F85F4A78BBA1FFC28AA0B2660C443D24320003930CD829E420B4BC9748F5423
ADD67C1631E60F3E687ED7D9A4A593823496FEA6D64E1FC582E77F6E21A71D0C
319A466887E5245E1F1A6B012114F6CC526A2939FAFB6C30A398CF4B5B3387CC
896ADF7ABA61FC71A4841BC9EA8A8E7C899C8C36CE391BF12B2EF5C248D81D3B
166AE6DAD65EF8B211A29E4F5378B00283F43C55605847ECC0FD7782CDCEE055
87419C70AA92193462DE726263DBFD9635B3CA14DA345FB5F045225C94BB5642
ACBB24B738DEB7E6AF00BDDBE793C16F9C0CFA569344FE06F0B093B14CD82424
FC0F2E650741BC21A839C49703BC1322D1F2C581CCF0AF83863CDCACA331175F
46778C3202D3D4F36FE98F11C81A7F567B7814B47E09C2B12838DF827ECE6D20
FA20ACE8B379456632E7FD1AA490E97EF1BD458DF083C783E54B4F73CF066C2B
9C5DF63FDC0ABB95E0C51F5300FF4EFA1E1EA8D93C4F30EA097BC050F20460D4
0910B1D8CF18F74C45C985E6F9113472083B7B4E700546D34142C5311F7BB5FC
964939329982758E8D65F2566D028DDAE20B70DF4239E2A7CEBBDAD3B6049A2C
B2B6AC20B1776A7324B7C95A560BD01C155439EB43D1A040652B25C703C2E565
6DD9F88D7E5B9F1E6134534A315CF630493E83A30CAB750E41B77997BBA49024
1F9E9ED3510E429ABF355D691E098D1FB67FD695C550016D504DDD4A952944A2
F6CE7DC133ACE8E34064CE01220662CB6FC9D8585FE53E837723E7EC88D96732
E1E2418FFF1B4429A564AB857F1E23337C75E72BDE396B96BED7E150B0ABC194
57CC6C0C6036B1526E7C7BF591D6FF2E3E78D108E4C7C8175C8237BCF5B4CDA7
47BE4763FE8FD1640C2660176DFA9253689BB1D919F128838C9E180AE76CE04F
72FD23A3C236080ACC735BEE3BBD101CDB4D94A4EBC6ED848E3EDAF5E6DDE769
0BE5A8DEED343F64C6CAC65D8218E75ECDA7292A0F2FBB488E9C0D0ABE379AB6
DB9E9BDD1736D940CD1B21B70D742F05CA8A2F7A801C7AFACD58F93FCD83DCF3
EF58FE4EA15972169D6BA9283C269D2EBBBDB48B707EDED071F9AFDFA0726454
C7D49477C1BD064D8CE9D646DCB9085D6DE75CD2460FC8F8BA2C70E744D0C9EC
B5CDFA5812BD0684EE55710FC66FCB65E3182CB065B2BE003453658F639B246D
471693F2DF2608C28329316045535EB92032EB583626FFDC2E306F95939384F0
997DFB2891C651258C943B60E1F257C77A72CD8C5D0C8A1AE705A62A18A26545
5F561E2CAC2E32267C08D88992A3D6F73A5B46F48357479400C1A59CEF4C8770
D3E62C7EEA9759D337AA244C833BA22D2A9012287D8BA8C4CB4307A1188ACC0A
206345F5EE5880A5A96C3AE145E3B8A7E61BCC2DA3573FF8B925204E23A07F6C
0E1387DD54F5C8BD071C4E9893BD58256AD59910E1B9D0959793EC2AE0FDEB52
BB3E90C3A49BBEB1B913570A51B2F96D302EF8913C6BB609E5B64A91BA9BDFBF
E3B71B65667AE5E27D9AC6340012BE87C6BF1466CBE78E88CF731D3304A8C76D
1382E665A9FDF30A095709F949F40490F6751FB0E9271CAAD9E1B477DD6E9C7B
5D8E16EB4F5B81DD222C6BF19D8EF0CEFE717A0D9295A2108EEA1D138B90B1C8
957CF8003560414BAA4C9145042A3AAC758995A7355F79D06964067CD2E468A0
B023DEE119BF95755142A91F7303A2EF448D6E2F63BF87271B5DC4615D281B73
F4DA92823A4FD661C2C6155AB8D6C978DC702A7278890312F6E32B536B9C9870
270DCD43B21860B734DC01663B0D93C5C6A15E5FE48F2A9612E5908DDE75628C
E253F50B77A9DAA1A0BFCA1C4959844CB66C168D3636E4E4CF454DC4F17115F9
A235917B6DC7F6AEE22D1892CF2D5337581A05B27B4837469BF2B1CFD04E1F92
DCBA540C6A44B3025DA828E62C7F295E1CF51BAD0124C1C996F03578FF6E93F2
70C4415813210AEC71AED98317186244404D4812EB1E27AFC3BEE3D06A8573ED
0BBCF641FDA888EB1B9654C0CD0F33675587761AC21F5ED179AC834CCDCD9058
1DDD1537EA9F0F210C11818D3575FB13A916E3197083C64A1E28D3A765BC8048
C20DCB99FD2BAE6853877991059EA433DD3B91A97827D2AF45C8379364325DD8
DC1AE11DD1E8FCE078D18F336B09B980DCA7D6BDA06483F8DD04F891472CF7F1
B3230E5A39C9141E775C84F5F08DF1178336118B5DCFCA5042672B00A179A125
15F69D54DF5BF990721EF38563E9D926F0DA88423DC2849432C1F9581420F840
D5701AECD409DBEBF0C9E95509BDD99A537F5C90E14146D530AB8C79E320B141
657D0327D9E02ED93D08494CD71E5344F2DCAE69E08F1BFE2F05C317E60CD876
371246F9AEABB44123F0FAC85927E3BA0ED1CC6D6B33146A5DE09FA698B4855D
CBF33DD70D9AAE0959BE049C7157A5770C07E17F21A608FB0E51CDCAF05AB723
A1B3F1D4C9095D7288271EFE70A060DE73CBF059D2A80F15186E788F35395582
36857EFCE58DA619324AFA8E7B041B400F60395AD659378024307FF959945AC0
B31D21CBA60FA8B0FBCED45414AD2285ABCE7D352FBDE6EB1E0EAE253E1052AD
E7F788203C7618A7B8D8174BD1099200E4D1F21972E5CE1A373AA27126199F3A
D1DC69B5C9EB98E28A19CE9CBA64FCEB47C4D9C7891741E0A123FBBF49C5E660
69D56F6579693CB65053BF56062972DE5B579393D1AF944DF27CFCAF8E8C104B
7A3F2B185D5F5015E23B2802E09FF8F579B59309F9142F9CEB88DC7864AA1C71
BCEF8BAAC89772FBFE65D33E336D9595FD349D087D1219DB87C73771A6CED071
5EFF43475A0FD680DDA3FAE32CD43B910C9CC062DE49266623AF9AB4BB367E91
BAF23603BEEAB3FE7CE7A9122E39AED7A194BE43CCCC53CDE80D5FF538EB10A6
199B33F3C1173535E17C8882EFB6603DB4A5A4E1627BAA96D856F2D9710B38FE
8279372F5B06D42215F7C2717D782B4A8F898E5CBDE7B1BF3A1F93B3630A4587
FF778F661590642D1B53CB86D767559E1617188042156923BD16CC0CB64264C3
A44FEED1465E1A46D72EC70202899C79E9AAE60D511A68A3F2E61644CD4C3FFC
F1E23BABF322E115CB79657D91D6706924740A29D43472147FD04D8B9B9E40C1
E604CDAAE142485DA66AAB8B2568DA5051F0BDA8CE6C8BDDB68BEA38A2E4BD4C
2ABA9816226EB744128F41014C24426A003F81FA604582C530D8F47B26EA0303
E6DCC989B57712ECB8D17AF3D0B4525D7DEEE210A4239DA49D23EC2BB5EC9BA6
CEAAEACBD2D5E9001579738029B0E7F635C6C4907243F29B46CD6BB7BE5CB0BD
793CF3B35B13170730E909AA6994482B242AF0DC5F16C8510E8CF5E5FAB46932
F9D00D7C5500A05DBAA0C671065C069B7A80127C68319CC1E9C7A986CF2EEE20
EE2DCF174188380EA574CD7A0932CA856CC9FDB88C51B009070AFAB115C5FCDD
1862CC7FBEF5FAA263C6B723AE4E5B34B405A0A13E318FE7E8F4B7EBD718248A
A3FA53B85D3EE6DF698FAC50F415ECAA25F2D713FD0563BE0EB2B36DD94D1FAB
63AB6E00658DFF2FEA91C4C9ACFA21C3CA9EB3F9CC21013C0AFE0DD28AB23412
E7634D9B961E4D5E2928FCD08612B8EDF6AC159E9E240E0ADCD0DF9EA71FD357
BA6B94419F2E7443A38F0A186733A8523992CBBF6DFDED8BDE4E6DD8C8FB2B29
1DA84FC40DFB85321175A3684F32D311455817147EA832947F829801EAD65B11
D30DF7380AF3BB1B24FC10D626A9235C76FC3010895BE4AFF551597F0B1E0625
4280AD8713091D65D3F902B4024C9F04375B9CFFBD2122AA0366719B4BA72DA3
2AFA04692BDF509BEBF8ED92DC86890FB34B80E5A62A8232106093EA39091D59
EE868594FB07D42C6626F4AEDE9AAD2C8716CE9AB3E2321A48C983641D635534
EC6A529CBF4FCB46D727A6616E2CA781E14282982C1AD13479B6178D281CAA54
1FD4A2BABD2715859B5C81A2C07F42C53E8733A85F5D1756B9BFFA07B9B61249
6DA5FEC38023C30C33C7B24A6AA9B46C1BB7A2FFB0FFC63B7D9F12B2F4A61E66
537C09C0C4A9B1BF9D0592E3EDD486DB3E31405AC422487A8E9EDE3C3EF05A00
A57078A6C9289FBFAB908E868942C11A50DCF785603AFB76B55C10426C6B620B
F1890A7406C0C6E3F79EBA25BBCAA1C4F19C3E5DEB83811355CB98A5A068430D
7FE36AA71D4111CB414AF4C3A1FF1DA06BDC872A5E034FEB45E9425DBEF58388
7879AD93C362A37F0B469E8D9049B9D26877A39D29FF6AACDD72D4849AB2177B
1088D410AEA9CAC3C1C46158F508D7AB7F99ADD7722F947972BDAA74BA5E2BAB
267ADCB9500D6AE01BBFAABFC0BCE0124F9AE3E5A1EA6810ABF4A8AC31825FCC
EAABEB14243FF94B73ACF1F7D72760B2B9A0705095755901A327881880298D9D
B49E059CBBAC62E25A8AA3F115026ADA9C53020673B9AD4CC518E7BC6B364751
54CACD25A07C74FEAA2928802611B101D6BEC5D0C7C8B6147928A0CCDB842F2F
84219987AD8465E4BAB3301CA9B795626F48588DD09D1AAF7BD6761DE0687020
79C5036C5C41344CC7081E8B778B0AAFA8E04015C23F84FD75CB36F23C0BEA5C
55AD278CA8D5501ABE13F95EEF8F1D23575A3C84CD3760AAE7D6885416E2E9D3
078192F37463DF15E7FD87D172622D47714FCC0F2C238CB8CE62255BAF014569
2EE3B52643A0DE3E6044F75F1CE391966857000AEC1C53E0C94AC457D222E07F
2F498892CE6941B16BB0012D51524E0228494AE5964D42D41EE2F48F13943C8B
81DBFA5C3092E0E82F217A71563A4A93AF550285DA91183C4F754C307CCE056D
CE8B661E11898952F1317E3BC8F70579EACA82C64B7ABFCB74CC94D621F31DCB
3E021998A5D6EE94CA4BE214D57B27F2BB04A721B6B0C7DBE1AA6B43B5975500
02B275DADC56C9DF95B90D45EA22620C2FA7D7521D7D4B3FC7AD88CFF5811060
7A91F8615190DCE9A8F87B4EE44DC752F4013A09A11232BB05764C514F783B1C
AC58B04CDF3F89FCF2663644C985191135F0156722F0BF1DFACDE2420769B68A
357DDA4E9A4396479FD092AA676650FF0C8D47A63965E04C561233C3E5964AEE
466D4B7F29FC62BD50E614938B3324E67788D1EF8C9E48A54998D814D893689E
55882E29B65E5BED61359E90187A6854C768B98338F75D081EA69D0A80893F1E
C158061307192A3AE79E3426822489719C5B27C4DBBE2D59A2F391FB5C98CACE
29BB3EF1E3EE49F2D1BF4265BD2F3E2D5B4AC267F4107AA014FB42DCE57A1300
795ADAF285D169E8E5515CDE5738772DCAD5C4D703B61EDE2E7C016BEBF45212
6522387296E3CE8B46328230F6C6C984C585E3A0CB5958C3A2040419FCF9316C
1912BE0AE7C350DD7FB62DC449BEE57F66C20A29876498B169256D2D4A5149D7
4A9B415F1F8F01B54006F4C9F52D0F7232BB34798921C577ADDB821B06F7A8FC
D7996B31003FAA7225B8F9B424A4CB05C39505E88F8C248EEDB6E3E0C73D943D
6AFE94039C38FC12D3BDAF7171A4DB3CB8B619173680DF520758EBAB72372493
BB1DC1B8D7CB1F472398C4CEDCE740EA6E3E9CB71DE86BF9E5023DA409928A38
B1DD482CF45B2EB7375A9EE23D65537948736F90531F3C87C1D1D8D92B026D82
603952C9E92C536AF3B8F45283F646EC2AA6AD8FE9D3A5C10399C3D8F6C8B868
E55818A738AA56AD06FF962ABB6AF370DC3CE0131E847E013565AEDFFC3C11CE
CEFE0DFD91ADD92A44F226262CC170AACFABBFA7DC2EB816E38120885A06FCC5
42604BC95587CA86D42CA48DF69F547D5A17C5E80CFC5CDA9D8164A8B6F106FC
EE3006E05681BFA0B94427855EA4049F4B1FE2A89AD72D80394295E7B2EE0E93
69F5070680DF29077E9D3D71C590BD6DC1085E5D429930134B9B59BA3CD908F7
A06830C9BED2064118E9E46119096FBF2671CDD7F019FE3C6042F181BFD42A56
DDF5683D3420FADD012ED01A8AD943E89D51D0A3A8831C77E9CC19F476DE9688
52B1926AC61ED63896A0007A7515719520E52C06CD9F0545D9C42C4D40A710A8
014975485DF6631265964DD19D70D814150315027192B7942855F7994EFEAC89
47505A0FDC1E7696A67CC36010B062B3DA9DD8D4F6AFE53F03EC45DE69B3911B
59F7191D09A98AF806357C6C56099EA374BBF2CE56AF1D2574D05E250335E05C
DD95E3BEFC41E38347AED4C3B956525B600F03410B4C7EE09941790EFB78F6B8
AED4453E99339609F136AC4C7BC161E8438AD1D051FF96239567804AC25452F3
8666DC9B8E3D2841F44BF8487986641FB80AA989CDC83486D80C54ADC44996A9
AC7E52067AD99EDDD8B7DEE7728685975863D427A0888A338ACC7CD1644FCD9B
0DCE49CEF298A2F7EAF924E651F318696735CCDE0C0F2F6269B617EB6D5FBAD9
6B899AB7CE7A5ED45752E7DE52288086AE6CF11B71453FF9EA2F566393FFE8AB
2146DE9BB80E7B9B8E500343CF75A0CC37016A8C4B1921191B35834B5CEA13AF
CB9D360D4F33FCAFD042EC32F3DF19DFC7939B4392A7B7139D121909EA357CFB
76C2B974B563D51B73BC012D1CA33BDA75F45AE4A4C78F2A8FEDD6137CD0B3EA
B0FD8C98A4784F1BA30E8AD11B3F8401FA73BF320F1A341436EF8D0A589EC73B
3B83E5CFC6069F388A79946163DFB31BB7B3B29EDD1CAF6EBF7EDB575807130F
ABB9F83E8BF460C73639C0ED4FCA487286B7D5A533FBC1C3EF9525DBECFE5A99
4CFB0017247D9A803AB26BFC62208105C791CD5CB09CCFCA8C832BEDF8F96019
FB2822AE4DE298218A80B27F6AD589F0A31EF537D1337A839939AB2EF7EC3ACB
516B149A918E60EC81ABE9F899DC67D622B78CF83978B9EBC115F89C9CF7DF91
496EEC4C3EEA1F5A6E3D8F1877B78ED043BBBD9C959E5BD7D8539139D0038D09
331CB81D1CD93A3E5642792E8C80FAA01C9DE25E542375C15904A737FC3427FC
BECC5A1275F1ECAC62ABCAD8E0C6FED1E993C6B39FF441A287AE5718C5A31DE7
FA7CADB78D41F5FA4B2CDBDF231EDC803A999D10DD464214112F22423378AE62
AEF9F79CBD0B04AD3DAE54AE89DE0763D57C1CAA5CFD9004575AA9F1AB91191B
962D6276E49296C37691E7273975069C90F17795AEDEDEF9C11056BE44268B54
0D488261B64D29FE2EC035205EA89A0B797D1FD2D42AC51DAE126CFAC400AF83
70839159DD3A492AF6CC96F5BC1641C5CE64F11926212196BAAB8B2B444CA355
3E3BE48B758F894AD22AF7709C861EF2994452A5518E055936436AC9AE784C00
BC445C8D26A5D3F4A10FB79296329B1EBC55089A05E5E81E074797D00FD32FA1
999CB88EDB85E28A38378355AB68E06ECBD54D0C8BD6575F44CCE0F3637DE8E5
3DA780E902653954FCF11099DD59E254F13F69F2A3130010ED2E5E3556B72F07
53218E3E54694FEA2293DCE9B20426F388E8F4937D7A537A06A87A34C0651B33
8AB3A1C023A385294E3CF61F6912E345582E091D46AEC491C3DD4694883259C0
9BF1A5F56FEDB4E344AE4B385433F203404E859EE163CC9084ECCD57B6A07EC1
5E1936140F21600166E063832CE329E0CF13B54F35AD3A5788C3B5485151F4DE
AB7461609D18419798068F254ED1A91F7031FA0B828C89F0402B564F9503B905
D58856A99BEAE260A8CF01A6F2D73F6A5AFE3EAA712B6F709F21B3552E00BF22
2E8F8A4AF6E706015B190B4CD3B6BC72F92790D76670BDDACFAE0EB69656D752
88747C8DE8F62D415391F2629E0ED326CD370DE5C23A75524C1F45C84BA4E40B
03F9C36A8B036EDEB7B8FE65D4662B44EBED4AC87446CE17EABD0C43D1FD9772
8433D3CFA626ED771278750791788F726D33A6471943CC3A5C33BF81D5AC01BA
327FA48880AB2191A07687C4CB4307A1188ACC0DB9B700B92453683899ECE7EC
3DDFF5B0B8CCBF3D9CF9A76F47C554306992058FC36C23CC0EB1C9C3A42ED85D
7FD71ACB021D942BDB635ADB95ABA647549026D32D682567D65226D723268BCA
097CA0C9B380B84F5BEC4236D2A7E7990EC7552FFFE59BBA179BF00E06C5A2C5
C3E84AA016DDBCC5E528780EC9EBD0C82612A9CB64515652C170D44C25CCE563
4155DCDDE01A614AB23AB493943E6DEB00C1FC41C0BC94DC2A70591A5AB5B114
CA693BEB196781C04C0A6EE75D274A356BC29ED8F6CA090AB1E40AD29DA80A7C
096C415EA482905B5B34CF6383C6EBBFB2B61F60ADE4A276BD99FC7706027B71
EED2117721A09BBD1D4929A5270A73233F237109A2F4FC0FCFCBFEB4FD4E19E6
BFE6FCB2116F2E03BCF9AFA1A2C7B1078A6AB2E748555FDD1D0649B8164A9D59
7C0FFACFAB42A40D15C0A30B88A08577A190139BBC494DAFBB5B3137E251A092
FB76D459A8BF2236EA1C42CEBFF85CD6733BB23DF0B85080EEB65C262E0AE668
5047D8BE010261C0F3E4585CAE02092F991F62E3F6573133B8CC1D66D8A0D93A
8AAF5FA034769A116EDA210319588AD9E9FD54BEB6557F805C1C9680A25A3D07
2ECDB881D1CFE46C7C8DFB7D73064FE22941D32128F96DF7F7A9642D1984B2AF
5E4EC7584133942002358E08B69B9C60A692543309308E41F0AA0FDD647B573F
69DA3E3323A9F48409EA8FA054E367736C7A3E178BB5F85FD92FE2D8F4715D16
49CB66D0CD5F507A3C8ACBD7FE39F28C63093EAEE6A4764B47C15B0CEA5E5726
B81B7983D4CE416A9B211826E53799824AD73CDE7968CA314179346253B36D24
11278E307F4DFFE9C45E0EC6AFA5E539C0AEB7AC31053EBEA827E3440A86C2CF
70510403AA20874C3C506959AB99AC9EA28BB34144522C9E83DD0C69B4CA3D9E
BD80D311F0A177AA5FCE13D15C5021AF3CB336FF79DAE36AEA2AD190B6171302
9E09B3C97F9285A0B2F313EA4AC68690529B5BCF07AC8B45C2A83664140E70CA
62DCB3153B86D96BDA5FDF5C92005ADF6BDB1CC337171D3E59114422F88DE172
104A59134C57CD5CD0305BBF875D7087C560E985820F22180DD6936424E44D37
5A97F3A954AD94B5D91A7CF33A7B5905412A63F288F85645B0DE47D1F8A184D1
C3166B2121ED6639F9981B91DCDA1170FE1A11C933C73BCCC0F2F81D7ACBBAA1
B71056D018CA5CDFECF6BA5160A44D125456BA17D8B91011010407B5F2CAE375
B257C0260490AC60C0AC71C775FF45AFC56539492A55AA55283977BE47AD79B8
8BD1B6E63779B2D8ED23FF71CA0333704045A5A03E4A30A37A773E6FD0CE674A
9F1FF3E189EA0F07C9F83026BFB77541E63E4EA0E382B74A20D5DB935C8AA19E
F9BE45CCCD88AB039A0FB2A41DC504C5624A8684E0D01C1DCF8CA1FC546DCC05
DD8CC852932BF3FC3BDD16A69CE127645C90B5C54CB526882927FADEFEBDEF20
242891EE6137AE187CC3895F497005F5E5DB51C677232CC8B3F16631095EE3D3
3E60F102F49C82FD2EF578AF45E3BD1F0B6047AF1E4745E536CAC7C61FBA79F7
437839836F9AE538E835F7EEB09B39DD40D034F311F6B249CCBAF69CD8F7DDB2
B0277491CF43804DBDB59CC6BAFF913C7A41C143D61D2A96DF446C56CC07D83C
174D19A0FF3E60A51ED520B548189D085A7DE57338532671C602DFF008BD50F3
A7176453B4B7F685759A03922847A48771D1404671122FAC81BA351D244EEB8D
6709DA3B0077C55ED7A7CEF6F1A9B226EE8AAEA6DA30E20C08FD546257B2E2FF
B2E2D7B8BDA690229D43F5220923F7AB820145F4B8B045B8C42D0CFAAB731C9E
6C701B9CC8F696AB028488A94AF00CF30FC40289272142B151195B24725CFC0C
E6369C638E6D954ED02ED194C16B0DDD9A95990FB45E3B2D0748BC071AC25332
5868F716DFD2933D5F0B14A0BB45AB5F764449C709DB6C5BF98E83DA93D05D9A
F0A0DBD5145F0FA9B086C5296873D42A8B3B018601ED25B248A901CABADBA278
BA44761B6A32B9A0DEECB4200D50BC0E37E46838E990A71376D319C8E52AF22B
012C70B9EAE0DCF9D8C69BDAF4331EF1DF3FEAF4DB300FDA404ABCCCC21B868D
5497BE7980004562538A6C91C95824E00E0D4EF563F2924E49D59702A6B3E394
C790FB4FB698F2DE01219EF77D1332AF890CD48D6E4B5EFB9187BF9D6A2AF010
F8F3BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B
41CE8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399
B4969F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C2
7F44B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE6312
0324CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F2
8B82F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE668
5047D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E6B7
08277DAFB8BC1543CC942CA1F2E8EC9833EB23270153D4AC74F36EABAC3B2046
EEF57D0DFC933AD6440AA6F1A204D62BC9C5D8DACB1E3F41DDF218D9CE964BE8
6A480F6E57AD6864EB51BC26208FBC75D7840E7F5BF4073B4027A1FBD7911B50
E8B77A65486EF5E13791EF1EF878A6304538ABBB26B25B523D819638D90BBCB4
9DE285E7CCA8EAAB4B36B8292C90C403E6D476C8D76047D532CE99A6380F3CEB
394B968A67CF5E6AA204BCE58CD2CFC719A45E7022BAB55F5B3CDC559AD01583
D4FAE9DC8106B648BD784973E1A57B8EE3515A0A849069534B48519BA8AAD70F
FB5F277BE837B55086E8EDBB84E6D65A7E220F28E45A84B0FFBFD3ED258323A2
331CC90BAA76C3CECE73C3BDB6B2FE55F044B9135A4BDE953BC6F63DD3DAFEC1
8FF8366826F4251435D553348030C8D0CE6A0D9EF247E6C55F43AFCAD353A50B
FDC4DD3D5D1E692261E39B730C6A024FFE0AC81A9C9277129849D51C0BBD7F20
6F3A5527C610F044F21E58E6CCBC63AC0B5F9288C410487290808B88F9421D50
6386AC95C1C631C736A48780968331DEEC1AC1413B0DBA768DFD8AB5DD870D1B
55299DF7FD6DA994F09B29470CFDEA8197E8DC935BBE2BCC835B286A23800559
E54EF37A0D5FD7118CC46DDC76171F95404987F92C13EBFF93298347FA75D82B
0C9B800B8365F09F8ADD96228948DD3AE550B3D8CBD6A090B9572E2881A8D9E6
16196E9979BE24A6A444D0F78102FA63A5508EC4D6F93C37D6DC59ED7811962A
D08A13FD22FB1944A04CE1077CCB63532038FA33A9357725B848BAF8ACB1A3C1
57F7FF82C18CD840CD6FE0A0AE7006166520EB03C6D8FCED7376E53AE3F64740
C9AD0DA6106F44C0CACD5EAD9522F32DFF60756A089E11BD8BEC9573828610A9
A3943D196A412094119F6C7B842348893BB5489670D4FFFFCC75FE1811BD7012
68DC8003945DB804C5130D93292BF97F20D648DC51130E14131845393AE00DE5
2B23D104FDB10D6DFE99EE1DBBFFD725AD6D1CEE7D5A285B9D3AB846241D465B
EF54A526701F428F63DC7BA473A1C0A826B4D968C5109FF036FCC8C66DE73E5A
06C67184BBCF69B32C4F358A707613C15F8350730CF5C0E809C17938DF401030
B201001FD5D0E739FA29BAE0F77C28942E941E9414087C168CE10BF700B4D7A8
1B9C0E1674424D7C5C698265BF559D9CDFD007C98D9A39B56EB8D9320CA2DAC1
C48689833F68830FBCE234D3F3EE38540F57899B311D547BE1B3F9CE0F253FB6
800D5D6BB753CFB933FB9303AB6ECD3A98E8EC57BE41DB5B87B432B0CED5E681
E7D26D39B43C850766D330813BE00F18DD7E57F6B079F92B8D876501B274FCC8
3FD5A1233A05432B5106932CFB4303577B993197919757A7141A636B0BAE56EE
941A91F8C2C412D2321DCEA295FA31A04787DCCB03AC427E3707AD2F1C5133F8
0FF702E2225C7D16114E138683924734B06C6A176F6C48EB95C6509FA4902780
36F6CA627B2CED6FB82C9451A16DD2BA94E9C868C36CC24CE3270EF39561E28E
9C05BF537B30F983F5676A2C176A60AE6B3D3F8F41498EAD1CC9049CB9843EC4
F03D01AE3256BE804353407EB43DD46D01E050A39893CF571D31B97ADF9F1996
0B8AA81E1A6DA768E99D0E06CE4BF209AD55F2D683CE217DF2D10EFCFF762800
0F27B9ED09B49109257898F180D2EF55235972753695B91358DB4166E6EA59A4
BD30F90835BB5715353EBF1CF3EEE1465EA9D63C064A8F5957283CD9698B571A
023F54BD899E1A8F4CF9FF67EE19B4FCB61AA4463C5F063C6CD141BFF6F3C0E9
B2EECAA01E592BD1FBCAFCA5DBC2F22648A71C33CD726C2F8873091F1D8BB8A3
BFAFC68922F824E4EEB6014A1759D860F49E00F802CCEB79203276D9C1B45600
906C6B85F746C8400B4A96A086E1299D3062AFE7F07ADA34303AC60DFCD6917D
7B059F59EB3FA42428CF911FBA487FB93F5201BC8322BFE13A3FF6652527C32A
352BACFBFEC6C153B0411A7A23BC1BC6EFA4F861337EB897544D1D1B6C797968
18CC4B99493D312C76192223657E34B040A99FBA99942BD86CE4B46FF5C69BAB
CA7E775BE47DF9FBEA97DA04FB772797921FC7E416D29B1D35576B51A240F4EE
508D19B02F576D769C12FB92498CDFE35A8B91F9A22BC2E569B3A6181DC45A1F
2C69E070803507F8EA81F1F4004246E8D2EE49617AF6181735645B937C62D968
5061F6989D31201D78D75FFB31C796BD83C61D190CFEC7B07A150D7156EB02E2
672949369F968009CF30275E26F19746CB319A9583F070F486122EE08A487045
6161458B6C93A1602B00AA8D20F308C43A95299545F27EA902F484D7EF76DA1D
C75B4B9B965124AF855AF2CF72390C180BEB9977A42B4C629F12EC38FB48D5BF
E45ABE96646AD193E7BAEEDC56B9A37746999CF1467E0F585DCC1A26ECB1BE50
9DDF476197F30B005D7007252643FAB39DE2D2A4C48E0D8C4E450024909E5601
B03C25C75DA35DC781C4FAFA29D8D29059AB5E706E5EB1867A90A979C3E5F3CD
8A5CEA478627890536251C4C1289C9931104741A6C9845338F0D171803EC04C9
534EA753F23A95AA78AFBB5DC8948D0468E70A0DFECA93149CBE26075B9DCC92
0A5FC0D6206DF1B2B7701C20E811C51256C4D44A4F160CEEE87C7D50FB4DDC3D
4E3242D9A04C920E9FB252D7C7806F1AA59FE77425FE62C24ACF73A78DED7177
C5EDD9D1F90F10D54EBF59A7E33DA067187BEC32B19DC6ED535A8E130B46D3BD
9F56DC895FCA445838724F27180CFDBFF59E9C6D8AAEE21679CB7FBE714F83CF
EDF74106A28E92749541395D0E19C097D16E31BEF932A7FBB3147759AA94E5FC
50313614FEA3CD6779F7B220A5CDF146896D0E9094834F01495EDE0CE8D490C1
AA1B0580ED7AAF5F4FC227188F0D4092E6B82EFD33741743178CF16F2D4E2880
EB4A142A6115005DAF108ED84B38AE432E26D07AEA271F903D7DABEBAADC4D38
2F584A2DCBCBAB1022DC5EC53C2689DE9FB89B2B8C2CF1919579C0EABEB30684
3F230D5D210B8A0EF699FFEE5B7FB9F34A31386F07D66ABC40B5D165A0EE668B
24430916ED58EF36404E3B912BF4BFE16F02EC592830521A7BE2EF1D993F7561
9EAC1B3A7A43761402168372D8D1ECA5A32CDF25E34A95065640E188384FDACE
923B7D52E49CFEA53498B454906EEB15947A8BCE55C7E22DD3D207B573029BBC
E1F5C972DB768AC04A1CAAAE66C66BFA7A938DA57DBC8C03F44953B0E4790FC7
D13163FDD0727FC2EF289027A7F4B9524BF0E4675CE28A8BDE0AE37AE6B1B9B9
A8D62608D532F4F5933A228601B780BA2B6C5C540436CCC7552C4A4D9277A0BD
4EB1600727DF268593657AC6F8273A02C5DFAF14A6E9660AA8253D564A36E960
2485E133C53F89D5DD6407BB98B211697941A927BC72A148E700961DD0EDCEE6
CE7F6AD035A435017F8EDC6CAB484A577F67F6E02B76C71D6809A3ADEC380069
3DF0F0895BD5A0261AF95892D0B01D387EC7901F2440F59328B5CCF0BA501E1D
41E23A7C831D9EB9F8DF7F67CC53CD7AA6636A4D608E2E8D0F963DA3B193D55D
49B680CF8BADF437300660A2DE342E973DC3A087507A1BED234C2B96E99334BC
A79774B2C65713413A71BE9819352828C1F573C610A596EFB72DE25CF3EE8448
4B2E930FC42DBA3858090420445386FC8B9D2A29FD79F68361679C2DE7EB1F6C
9C27498892CE6941B16BB0012D51524E0228494AE597712B7C6A09E9D28B9FC6
3F2975CD9BB71FA698571B17DEAF046587EA1350C84F0ADDDB4FE35701CDDDA2
CE6FAD2961601FC56D1365DA81125A7552F49B94526E6A36B77108146934508C
1B6D4377F4CB62CAD082E17321C812446DB1D4945A7F6460304BA22342E50FD7
AED054EEEB8EA8BFC1CB3D5932FDE0FE6CC0C876B0D072EABAB7EE43E38B793A
259DAD2B970B9DA222F7B00A29DF94657B46BC30B111CA08D0AC4BFA35BD39E3
1382EB2FA5E5B73EB49A6202ACFBA635A73EC67F26C4A36894C4120C6C73D403
A98DE84B4399D4C62D850DDBDDB10EB3A1A84A54EB687CA2C4B70174026D8A3F
C416760A3FBA6E559B71DCF2F191A43CA934B70261A08E59737AB911CE40B614
26CE2E5F6539B49B3B5D83295A5A6B41BE612088E667AB10B0466985961886FA
DE465E5D59689F092D35CFF5BEFC821BF1E02C91C149EBC163C14366CDBF3C81
F2EFB28A20E1519C921C6614D5DFEAC667583A4FE6F32BB2EC81EC8D635B7A38
5E0E4B2AA442A1B6DE8EC096BCBD4D286E77FD5C5C8288E8B48B957C0861C66A
AF8E1F056476FC098BE1B8A9E0DB5B83CAAAC0C03C3F55166FC377E829EB5FF1
63FD4EF832CB9A03FC5A2F9039BCA626C56FF24ED15E0762C54EF5E2EA5ADFA7
0138A2905321B9D60CE8F96DF1D41F0C77A99CC4F4E9A7738530BEA60E0842D1
F6B978659B5723DC7F3565AA6064C8DDA0974920C222DFBFEE21F856681561CD
C8C66D40D84535447DAE1A0A23941B8257A2A5EC3F63FD62DD09890F4DF33DCB
B5FD1661523AE5AF8DDD8B198AC29BD3B8DD91D49E5B551023438259A1AFAA42
7959EE4927606F08F425598998D4ACDAD318A82BC7FBEC9EA7853CBA4A7DA5DF
23348B9101671F4637AE61246DF5E024406C0132D296329EDBC9A578996AAF95
7B963C159EDAD2B14BBA9894031E5A918A719C5B27C4DBBE2DD951ABFE4DE5DF
820F1B9EA312693071218A7309D4A9FF6AC39477FA40778E9A7B2A0BE0C0D984
4213E41BC82DA3473472A6FAF8CF1B49DC1C9B3144C10EF4044529A2C2FBE9BF
E2B0AC835454BFE5625E7D9A8DCA0CE15620C89B19BE4AEE3330AD520B1614CC
C41D40D27BF2B7BBAA15581085459FE250BBBC4D930258426AE5F0E982590310
8F807B2461AB5288778EEF4E27099D237C57325AD3A880C6C158E3BBC98EE6C2
C36C9CA9DB89A502C3F27811AC8E6E0C8D2B6BDA810363E72B01D9A0F5DB2E7C
F29215EB1C8302FD0F5B244B34A9AA99C1D29804D2F3134C9817F45FD2EFEBB9
2545F737CE1C1C78A8800AE691524E1C6FB25F41A15D8BBECD613F078AECD4A3
FE4EA0EEF3F387D58915979287566CCF807446DE8A3045682DCE85BE2776C854
E9B465EFAB76BAB8BA02E5A69C6BF3D0C666A345C69DDD96199061209FA1EAEB
A9D4F82D439111797E6612FFA57DDBFC68B40ABD9EEB9CB52208F36757AB95D2
32B0CED5E681E7D26EED06BC1BE9E1BF3011EE34B526EA480EE2879F3C84512C
855845A4598ADA081CCD1400161ECAA6FE1A164F8E75B39F4719D00F5705A587
A10DD18B408D6BC15A89BE2D6753D6950376FA1C405A42060AEFDC8D48452E3E
F9FDB2E51037E40028AA8F3DD3F0BFEF083C97F9E45C90044E36AA59F2E0754E
4F39FF9EFD45216A3FDBCD259EA8A3F8C82AA19BAA6C2C425F505C0AFAF616C1
813CD7E32C08CDAF2D86068C1A82E42ECF050CD258E120C3C1B5385C9C25E278
CFCD460AA15777BFBE815955AEB9C37A06952F7024DD3968CB56997A12C2DACB
CF2913AE174DEA4E5F4570A85D4B5F3926CD47F8CDDE456545CDACA449566A39
5F356A56DF31DAB0863FF86AC123C0BC851A3D2F3F3010585A6D7B1448A13C2D
5E44022CCB56DDF9FCC4842D2348E3069139B41471E2691B85E4AE1569036487
675C24839578AB9A3B320CCAB39E7FC583A359DBD636C28A54ABBC6582C41E4F
8909E2F724B9928D3272F79EEB94BF041792494691B655CB9C88996A27E4435B
D895E8A13036448DF2CF7FED61BC3F0FB4DA6F571973E118AA3CE3226E11EE1E
D5A2271E9F38824E7CAA0D5DC6D924E06521902371198D469B43DF46DBBA6059
47565E79997CFDEBAC31E26DAB725237AAF48793640557E4D4CDFFD54B90CF07
68E577C0CB33BE59FE620068B16FC3F3561B1CA13FDB336BD4F041E9FE46C75B
A7391FD473829512761986351742BDE067A69959FCFE317912AF68B307BAD182
590898564C10C3ECB18967E8E6D4CC5E57C51F4C969C464C1CB1712283C42A77
AE7874BE787E3710E3419AF0E9E6D69BE9A59FD156E213BEB562BBD558E34A34
C49210534455970E798E81F3CE1BA3035EF07F489ADD3E74A206F7C727BC4294
B2BC5FE607B9A4A6D0B49B7A9F1C35436604A128CFE346AB3F19D2AC7F441A44
0D021B9AFFDB32CBB387AEFC24A562C6AF4BF5E2E6B787D5762BE6696C33C148
5C21E15F14A29EF5317C36E9C746516E6E491329F816EFCA2BAB9276D9130B57
D3B47F8A2541949A82B26746B12F7F4DFCEAC871D469B9BE866F5AD692F5610B
75F9E7C6B4A4F614773EC4E21E9E62C614569978F12A7A34A912BC2CE3D2B8F6
230015241BF65F0371FAF14E7D7542429A37CFDF48E212B450A12758B3606AC7
98F9F7717AFAA81D6806D78D4EE5CFE660A5FBD6FAD63FA6576AC8D746CE8FE0
405D523BD8020438118955D3C26BDF7A0FF8FFA29F8046C929210BD50F3B1067
A9AA939ADE975C80C4626D6BFE9FDA9462984E7D5862B3BDE1A2038CCC141F81
38C796DF3D0D1B7029E72ED8E2DA5D5E2C82C2A4C670232AA58F2C36EC56B4A8
12CDE86CD7DC033AAD4FD95B32DFCDB6C461D10701D834EF1EF11F3D2EE51F9C
B52534433B02CAB57B9DC5BF98CFB1E4E36CB03D456FA84595AD96E06AD26D94
1E3822A4B6F9610B442CB1E4A7CA5B516B6E48DDFF19B554401626F63B2576DE
2F0850D4EC408D5FDF4E38ECABB60C89FD2B50EFD6580BE5028569816D280879
D226CDB7B8DF640A796F4BE9F6CD21B97A947420A2FF93AD6808891F07BF067E
15203C8C8235EB40726CE93A31C4216C40DD20976C2FC2D3BC369FFA584880EF
C41B863696FEEF72E35112E7BADE4F046BA21622FD0636EA28FCDFFC002E337F
0805ABEC524ECCDF2A81B8BFAD881223220B4F4042723C95CCA984DDE9EBF91B
A5DA79D7AB6BB91A0A6D6FB96ED1A9AC8C2574C7A5FC5B4DEECAFD111614267B
7A44683D07E37FE14460231CA83C96D8B886441B1BE131604AC007558EA5F60F
F48D22698EFD9E48D29B52ECED850885D25BE1B5ED2362FC41CF4EF556B23B58
3FD7848E409A086B51ACE37A02D111D73126A23FE77410A768936D538B8C3813
FBECD35A625F59ECC4C0A62DB4DFA90918A543E57362C915C9F9E2A3FE4FA048
CD97A4E968727C7A434CE18673A6B93FD2A0AF17B08759FB45133291C5B945CB
12B02597600E8C2B451E0044B5A38537EA95B6721D865AD288E23972DE8FFF74
1F6FE4B73F60F491F5E50B99F06F7A866EE54956EA64959319C74C3F859B9D4C
3B2AD1F1BBC9C69DBA334DC3F9D142055B258BAA0A36D71F6F53C45F6938DD79
0499273F9156796AFCB7C581BF7EDC1163888583CDC85D176CC7E875916E5F41
53892FF2CF61AE5DBFD9CA52DB6FEE5398993A9B1BCDDAA06C54247BD18B7A12
4F020F8BC59461A4D3C9B178B121D38CE79E3AD729E30028E43296A054889EAB
7B2925CD49A174049A2B5B3951927354864FA39ADE427B87DF1BE1810AE5AD86
46B736441A323DF9B799611D708AF7C739A2BE4946E1F592329903BE55F4AD63
25CC3795A447A9B53D5DEE59EAEA4A33B0EECF502D61E0E00A028B98F990B4D0
15153CCC2E1853473BBEBB8CCDD33756619AF59ACB9D17A3ABEAA6C652186D66
EE18C5095FF6279E1E986AE902D0BA0A157E9EFBC0B13181C854F77FCADE8149
571FEFBC840BD375490CA2C9A44EC3F996348D63D35B66CF799F616CB0CF6283
39AECBA81C827FD9B5DDF4CB8F20C84638A585FEE65D2706A79D352509A07F96
23ACC0C022965EFEFCA56FDEA8346635B8575A607D19E71AF5CD302837BA49E5
8F8E0BF9308AB0431632AD04A6AFCE6D4D96E57440D0CC6DB88B07C98F8D7420
49016DBF2EBE83E22175FD33DE7F7284006EDD5646D48CFD2E30464DDBD18FFD
CE2100BBBEDF06EB29C5526F99362C7693B01E7ECF132C62BDF74FFB13FB1D00
6ABF646D25C4A9B937FAD5CC305A0836C5C309F6007C4C4283C233C8744FD568
05A93458732C8F9A181C7E3F8ABB19240FA07F8CE6795B16896CEDA39580CDDA
0F7968F5A307126E0FF3D8FCAD479452CD45FC323019A45BCA3DE39C3E7618C6
322D2642CC29E9625E1034CCA473A6A7414F9062FDD08665FFBA527EF1041305
15A28DBFE7F9A83A6854EE28FD1B2F52B037FD6CA218A1CB03FCB945FC24376A
45F2DE0C213026D0B53BF882D33E5A43EF201EC0B415DC701E8FE4FF981EC5D8
096F80B49CA3444CF1294FBFAB57DFACC9D7EA8AA539669C3098666CDFB1E317
462647319E38C8A257ACD317ED913A28706B538D197B7D62B6143DB7A1CDAF4B
606E08F30998D4C5AABC95068BE7A9DAA9F9DF7D4609DCA6942344B4EC4FDE36
ED952B6A49F239036A6D802192269E14A11BA6A5BC7DECE20029034C88696770
A35075207D2AA2476912EE771037F8D51B8031B5BA48D714DE24370AE24068B5
86C6799961A7D9B667E5686F67A3A5D66B17A20B7BA149D7B9A2C05E08B8F185
AE093EE854AC1AE814BCEBE00CE4F99647DD36B8C12386782D4F27D8F303AC89
8483205A841CC9BBD9FEC6B0BB982F75ACF33109F8AE7ADE4954D0B1E18022FC
4BA710C7B8088785EDD9C1DACF16C1CF5422115F8FC2C08CD566433E82A15286
30CF8172E6F031C517C4D8CC2112DB19D661CB3C5B62BD224163344132C6D602
4677A39CBEF701D77D05FCB64F261AD82C49B1000D577766D9ADA69808268073
CFDCF7B107FE7803B7A902512E8FDDA8C2FB54F9D86C614A1C9CAC3220C46A16
05A935F2792308CDFE2779CA684DAED232BF936527C3F6251DE11B8B5F815032
AEDFF4F13FCCD4447BE0C2D6DE59B1BD629F4799247575487A473E265531BD24
1735EFDC419077B3882F31F29C281B73B7B05335F5E9BDD8C3A4A82C2E598302
E5493842F20D7BAA510FF811AFF97366C6142BCE4473932308A1D0151C0E1684
E311B03130ACA9884819FDF67D5A04E9BD32377EAD399DCAEC34C778A8DC70F7
B04BD3919C5018EE93A692856297A49CF27AA99EA519674D305523D33CAFB11B
77C2DD11F7C39B765BB963F1CE890FFC16B3EF005E4A1F0D635AD7AE88681A6C
415759EBB3DF7052237E01ED5F827DCA38CBF9A44C73E259AC9204D19CEBA6DA
E2E0F771BA38EA47BA567B8848E307C9B6BE4911E01AE0DE4E36F26E52150D13
8CAB931B81EA6502A412CE1437906A0FFAC7846E4F1AC6540FBCB40BCF850123
B30E54DFFE770165D1759D82A5542CFC4A772D8999914D65E08722DCE6A5762E
DB87EA4AD820C3592013E8C713A9DCD8303C39AC1A889DFBD83911C5ADDEE4C7
FF1C06C63BFB5C1E7B66C2A1C237F5A65AB541061598C8467839AACD2FB45F5A
DA40B0A35C687AEBD47B97E25434A2EAB1C02DE323917F5A206046CDABD9D54E
A413DE4A221EC050523972C46E136C83CD119EF1E740B263D9A6FF96414F7457
EB664B2262987249C560A78F87D3790852C7D21CAC6764484364FBCE6D701FB3
89257B8BC3921F808F67901B52715557491B4DED0A19A1E6464D99B2B8111F1A
03E44B2FE08BCBE67CB618261D2629A0BF3519D015F0A4CFADC0E9D88F83AF8B
6CA0AF8A510C59E7D4D36DFD1D671C08E1E75F7795C33E885EDDC5A75366E9E1
21FD054E895299785FF6190EF689DDCB6281B49760574072AE76A679EA447B94
DB5CB272D0E55C2C138FF9E4FCFA9D92F96615A5922333D102DDB3F48F2ABD34
C426AE56BA0FDFF1E76B74CEF2C452CA230A1EB00792A892C527BC9F8D6DA3B1
37B76B7DD0C6AFD35BE2AB095999ED56EB6EA9BFE1292A754EE06FC3E9A07125
6151DA62C4B3104D9E34323FA1832FCE5FD51ACC15E1FB85E9C3D8ADBD8E904B
BB589CA901E79BBDB311C102F70F1D2BAF7A1E40987A445AD31BD84B91179CCB
D40DD4CAE2ECC00D6B866FF6319AC534D257989D16CE28FCC1F3C097243B191C
693363A46F7D8177626C7540E16D96117211BAC3DBAB76EC3D8BF4622AD37893
BFB424316E1AA4B38746A4ACA9B0683F0896BA63300FD44C35250329D5BAA315
9E63FB30583AF42FCCE14F562D8778CAD47E9A3C6781ABFCBD46714EEBCBB0D3
2C4A7B17865D9B7D0FC9DAFFF25889365D6074C0385A2B60667E25B40CE5F8CF
B9AF2BCA1DAD558C1A3B01AB40A16786F6245A907E7370EAF4260A698AF739C6
86A25B573BB870A6B0A27C3F1C5C3502F8F988C23A0D0E291F2FC0AE31F814D6
DE6534F24AD194A9E901376393C22142E7DF664039447C0B2F77304015926F10
6B9C3907F541869E3AE9CC7B6087C9F370E2431E28C32FD36F4DD5E91B580131
25B46EEBBC21D5BA8EEAC286707729019D134971D8D19B0C48A7F610A51105A2
D4B6037E1003933BF5AE3B4986570B6F13B70B356BD4A31C85F7B17599C123CC
4A7E84B46119AD70E23350C13A50F6D110323B8E205F346AEBC01FA7F87E6028
A85529924502FB565176F01220BB9A0546118C9BB6E9CA78AFB3C7D87A1C043E
A0FB8E581602A206FD79BAEAB05CCF5B81D99CD34D142A8FCB463B9AF715F820
B4BBFDD5350FF622D0AAA8CC11365817BE13CE8938BCBA071EC6D2A9572BBEAF
282A69007BF67AA458DC724C92B1743E575FF979918B6C94ED90D38FC2562F51
01FA3EEDB73500B7AB35DD7F93E4DF60BA32109A6CD14A6F8F240AC53D33A332
B7C38BA63C1AC13F5AC03E3A3F46401469C834216DF6E346AA93E42035387339
1418FA11E2F7907B9626CA16609BFEE67DB56CFE2876B8BD269418B1FAEF1486
15D78265BF0E0150053C699410B7373759BE4A62F1370FEDE056CEE265838696
FE4210A159D900FF96495BB9B54ED7A963CA7625C148E3B2EAA130BDDEF0D200
2008116120BE3E47C31D0B5A0D6417327257D9BEB1BC43CE626586FD77921C79
F575FBE4CB52DAC431CC1EF45E7241D4FAF394D14F4872A43C50B794F344716E
2AC29402824FF967E18EE39082BF80D6BF98487988764781797E2E36F85B97FB
489A5D5A14B10FA143FBA1C9F662A35F3BEB5A529B512E85E0C64168CAB19862
BC10FECE4321EAB5005525342C7441E262DD19D67019F0CEC21CEAC83639A0AB
EC3BE6CEE22FFF2ABD9C08BB468B69A205720F297FDD7F060686ECEAAC04455B
9BB2362A3AD1F83A14BAE57A9BE8295EE5E8B49AC38C964244DD2A904D1E08CA
E7D2CE1CD6D11CD380ABB5CCA048A1AEA30BCECAD13AEA4AD9599669F4EACA96
CB516D417B869F6B048091B1E0C419DB3E99A2E08D6749F21CE313BD5A8400FD
927F24C43F5B4638C111C8E177C74BDACE7163B5A55ED684566DCF0B43A0B0F9
75DEAE2F7601EB63C39912726F12AD8BD8E49C55BC1B68342F230A148BC2DDAD
93A81766B54B2796342AB6528CE4364DB1D5F448AFFB74D7518DB73CBCE27204
8EA77A05F8B383CE9C7022356C564B3B46FB135862A92072A394703D2AB4FB9B
366B109921E400F4859EEE23ACFF1EE35982165E37668769846255A2B49B3054
F34EA87E44CCF2240E4DB8285F55C9CB2855D5D04A83CB1E6C45FC0CAC785001
3FB353A5BCF7A9F1094ECF5DD0737722D7D498C7F7B4A638013E1666DCE85044
D3C109FA2F3BD0B05D15650412FDB99EEE57397E9BE446A275A5D5E737B0583E
F1AD017455210C8B14FE52622BAC9C61E1A4AA6C03AB56400180B75A10B31E33
0BE539AC761BE6B07E1C5BB164A3361765B4356C4E2C8E6EDE7B86D7A1DC0430
AC5DA38AEEBAA87DC3DC4E514981597C4C59E568C7465E6DCD933AFC7C4F3790
4B6F5DFC756577BF1A66D0126713294E13C1A4571B8A9E6D98EE599CD2E147DF
A6D249F9A5AC91B1ED3896F2C6874D6C28F57EE6FC14F3EFFD282311E889CCFA
7519DBB19F45950A4A3AB2B3E7EF15157FB4518E5F5ABA29943100DC94DC6806
5C9DF33A73898D0891D1AB821CD8636B2F07B46F1D34FBDE196D72A97C06E0FB
54801097C1DE55B85CE3B33197426A1A86E9150D3A1EC4F892A2F092A3E45F5C
282B019B0E714C76571C12AF0A6796EB5ACFD9AD1E3ECD47118D1ABAAA7CE8CA
A45A77DA46D1515F657AA227E0E236359E2BDD9B6BB762F709851E7307A57951
506660B9F813D2680C85443D2CC67F508AD397B372DE36A14244E4E1384D22DB
6ED776BC27649CCF4FF75DDA760B31870D69C4C1DEC6010C67E450A585A0CF07
A4267398267508558163A8D13AB85731AB8904CB8A57967C43F84D3C0DFAAD91
E9C3A32FD1E4B93F025B6F5D05A677C5CC27A3E9B787D3785D1E9AF896D9ED68
8A033D6CF8A557C4FAA82C3D0E7C1C96881C95C05D86546C08BA087270CBB997
4EDEFDDCFD2C756F89FC418BE83E65C682D93583D553E6AE5080E2AA53D3B772
D3247A3A3929F06E59388C05DEFBAC33AF8F09A13228282321E32776161E8845
E9EC1E639E6A8C855D6DBFC8E866EA690327E8701080148879CE1C1BBB279B93
BCD678F5D1E7F1AFB6DB96F81C81EF20611C96E1024B9B7DC35A16FB56B05EFE
E71AFCA93D01096D8B3911980FE488F8D49D3AEE33836C19D2873CEB55AAAA5D
C2B18150E5B142080781EA0A0FC294B0AFA1728870010928EAA3FB243114AB2B
5D440C6076473CB07046B4826C39DEDAFAC32D5B0CC430A077A59428404E538D
1E1A1D1E9245527242747A143F29B052F9BB6303D7C7E858FBAFA807B93C7CC2
0B40AF22EEC210950775674E75564D1370DD12DEE8DF70DE1C505B873C5C8BD4
C1C46BF0EF3C39D3E962852E0B33EC688D5480FC92298F5AD0BB311A2C7A979D
57CE8EC187A5EFB4BA936E2B61C7D3DF3C25207598730F2D983BE0E981E64A0F
0D0A31E59D5004813EAF27D51349DEBF29BC4C5CD8215B3DC59DA4B6AE720421
56AF4F0FDFD392E3B0AFD624E6454091DF64EE671CACA2D1C20F58D75796FFC0
32EE49B0500B57D8F998D056FCA4A086E514A8CE865960C5593D369CF82D2691
BBBE8DE4220817AB2EF4141D887D3FA0623FCDF5CD3123FF06AFAA48BADED6A6
E88A1F47F464626BEBF9362E25521C1F05BF1AA837EDE283F03EED57D4138419
4A59B055F13BC958AA7B6BC9E8E565E73392D783D9556AB880317FF78D906699
CB9CE164862CBC6CA7DE29C2A2014EAF0CF7E5A8AAD47FFAF1601A30C8867000
32034610FC972EF763BE67939144DF47725F6DB79C37176FFBCBE1C6CBB213EE
0E296C57F4E215780803E91623CA7E9EB78A89012B4D7FE858FDE5D4B78C5EF9
CC81F30783E222CEE733D6FFFE1FC36156D697F9A9D6BBADF58955109C158EC1
8B5BCCB1AEF22A177551497E706DA18CCFB6D6B01A3FB432D886A12EF68C2C3A
734FDB94819FA661CCB8675A912F4D29C4D8CF6E970A04BA7A30683C4A7A5A7F
25D4CD873724E3BC46126E5282E40460B630EABC1F4E75E81C8383A0137D49A4
8096E224AF40FAEC3A3A0E3F68350B1764122C3D64B996FE43E7FF56D2A710AC
5AC35FCB9673688614FCF8B7A617D40D647752B199518B0E0C52A08705011CC5
E799B3728AF861542CAE111C57D57672D557DE0A5B5522F8578BB9BF4CBEAD93
B44F03E670A351EC7173929ECEE4C6F408A7A3BB25A84F7A87005944A334B72D
B2A89E4E17893543BC2F0AC962EF9263404AD6765D1482A0BA9124A9E47F4F5A
8ADF99139C5A31CAFAE89EDF482461FABF604FD19B9C8B2D8C4D4CD7BEBA74BE
7899187C69EB16774B828D6F2B61809066613E8854CF001471AD59A7BF8ECB70
A62BDAADBEE029FA2A0A2F5CAD5FA10FC0E6B5F3CE64DD529780E64CBF645699
2C08804047B164C1D6C224875ADF1E762AFC6E077DC85C01A5721D13E99B7887
DFF08ECB56E22D31D092D7D8511E29460D29AAAF0817C727B8947424A75C1520
89BFC7C548B23B50E195EEEA095D93EE512C27FE6F61D800FF51A43918BD0998
F00FAA2901D5BE63AED38BAFFD435DA2243D9B299D3B06A5700A7FA1CBC5D05E
71ED9E227727301A96F49E2366BC33AD1FBE45ACBE7B50430E3800912501370B
3BA80C48FD0F0D32466A64E02BDDF1757B9ABDD9226EB2B96427794F11751620
0A88FD884BE8DFD306CE4CF35BE466DCD23AD48CAB9201981258406FE78955A1
CB8A9A0D5E142C584EEDD7F3B676F52345CD0BDCC6287DAABE15CE3348C57AF3
969FA806EB2F90AB0BE4E5ED0C90EE3DC0476FE73943C796E1204F6A801DE7D7
D3A53837CF42F98ECCEAF86ADDD20D81F24B58AFB3456992108408CD781F8D45
C55F5DD37049D7EDF4B3FA6CEBB2592405607D44D42DD04D5CCFBF0A7BD0EB80
E376FE6EB0B3A2CF8C11D1838FE16B3F37E3A9728FA23FDDA0133B4C68DD7E80
CAB5C7D0D9AF69A8337E02BF933634BC730BB90D143C39C19BAA7BE1E21042EE
193155EC92A8547EE98E2DB107E444172551671D433EA40193ACF013F7A0463C
0EE80A366BF399024A8B8353499B40D74E4E57D6628278BF0ECAE0DEBC365B3F
00644D679B9F171936902EA51764BCEC4660C79CF51BE75A81F12301D9FD1C47
CF25D5399699AB243ACEE6C78CF61C142372C29717CE8026094170F883752C4B
5C2089774AAF7188A02390A644C98FE9CD98DF4111D3B48A7582B5C0386F7EB5
F567D1D10CC7182DB596DB44365DD364DEAC7723D39BD10A231C6D99E51BC1A7
3C2BD64E6E57D1ABD3A7EF9D13006B8419EA6CDF710155C5D0C5946923B9E386
65959D23189C96CFBB0EB7443C11899A1768C2953D7C53D77DCE60596FB8930D
D81BD3CF411E2FA6F3266AD090A30079E618EE66670BFC866A3881AFF208392F
6BDF4F3A294AE493F2D8B2E29B8739CAA06F595F6FBDAC53E1E3308234FAEDDE
98139DC715445893B5AE653607073CB3895ACF563394EA06F5DE7DA6C5B2E53C
CD658F3CD03F1F85C895CE26D36DC82ECC2F4CAD75E061EAAEABECE67A586ED9
8E7B35FD710F406674E3759AC275CD1308052C995E9EACDEA9A67EE406973BF7
62D453ED402496C39A00C5520328CA17D7B779DBB3EC55E1F756FD9896E6D1A9
2D82BDB89FE63BB4B69C9E4CF20D7040E6BDD31A6AB05A25DF673EB5469F94B7
44616C55CD4AD77574BB1A7558084D9CD408EFD36E9EFEE6E0B36566C636027E
6F5F12F9C7BA4F20AAB23093FA543CE64CF5A1CAC7AAFA69D2D12AA43CD45B03
B68B6BE3C984620A4F1854F16C255C8665D517C8AB22126379A165479BE78711
53DB6075660EA6D7893A44B95D67C871427FCA3512A7AC251023DA806EA5BE86
9CEB87DE10062D80F342338B2EAE4EB4EC2305885B7F924A8A079FBD86B1D35E
E484FDEB94D0DF36B284AAEFC272D665BEA0AD15E555321756196F2CFE1FCCF8
10DCE811D46F8B883D3357B0BFB3CE2F22606545EC552F78B52D3E7748E7BC0B
8F75B6218B3312BB5FA81DC71A0DDFF36900F081D2A206AAABA5A6768E5E013A
642D2B1EF2B2A2371E8C4672ECCA3AE512C9CEE0C1C602276305A4BC1B9096DC
7ED1F509C9E7F8245D559478BD55DA4F07BC9BBCAE8D901BB47DE5D3C06B4367
6CAD1FCA5BB589C4EDF46F3BB222B81FAC3CD9A004F3AD62C7FF00F193872ECC
8C18B6F26F4BE56E54E982EB033072338935DBEE82E0E2B58A4D3B63D33D19BE
AF7699F3DBCB64E88EB8E277DB8102CCA01CEBEC3BA4C8B52AF4CDC1531F50BE
73EC073140AC444FA2077C234ED121DB78C40DD52906E2E53E57E08C0346D785
BD705EBA4D93FC9FF7FF2CEFDB28463B11601045F2E3B5E373B83E887884B179
A27EEF268AA1B135AC7E49237E23399432BB5EEC03153151A95256769DE68B5A
43098092D17A97ED8A64558A4E1CA3B60BF89A573BFB1F627305EC033C9F923D
BBAAC97FAA67EA451D99C4A2DD842F1E91C5AB084940A0D4FE11A20CB0C64575
C98017C809468A64C7BC28036013BDD86E853C61CEC3DAA133292ED82C4895CD
1F3D2466E361F87A096C4C12B7AF167957D5775579A034D93519B48DEA270FBC
F85C12F0A92AFA57EE7CF17FB53EF36D72928F737C8B120516653243B71087F0
5883A1BE8410BFE2CF17CFA0E06A0026F4392F6D22046F49EFDAB27630FB4387
360C2E4A95DBF947980A265BE0A0F958BA1DCE338B29124342A4AABB907E17FC
445E2415DC65BD0504DF1D89D8D5A9610B6E5919630B9B43474CD45AE7876880
C4118254A107FED9D155C54A581CEC81DE3CCA7C858D35AB424832772F5CF6F9
1DE951ED47585C4A6906C3154E1DE8798F0AAD0C78789CEACF0D7805470CF8FD
96034354C1C671CA4026F7845E11E55FAC55075074C26CCA2631D1F538028370
50A6C14D1C3F15C98F5F42290815F4A8DA30F0F65D63E428820254FBC65D5C5F
FA73F52585825D65DECC03880751FAE4BD66F6A681FC7C947B1669877EC2E790
D0E66E3F35057DB20D71501D621FB285748E8492D51F0B5A993512E618CC9E3D
2493FD1CDAC6047974AFE7E7E3AE152D3552B8814E14D7242F1B18278EAD3158
4B5D729AC62F79D49E6EAE1AA610B1908CB3F17433C3059BA90853242C0F30D8
84991A247F252BF4C1CC5D3F434DC1CEB10F419B94338BC8126131061A4342AB
48F63902B58E698FD5656B405172EB0BDF622E5B31C28CE06BCB1AFFD0A1B5C3
7C5E3B5A4E4BBB8D1E9AE46EC3EA726E04FB26F07EB09E0170A89BB2812E3CFD
6DE9871D471C05911954F446F8E29D65588B0363EA06AA51011C78D9D1C1E54E
CFEE34B5040425
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADB1A2C8B962924F38EBE33CB1F16324087EAA3272C163
41E5EBAB778735C9E716FE3E69CF08AC86548A8FD6D46574ADE5BED2698E34B2
39BE8B2CFC423086707AD2510CDFC90563DEC9250C603439C7AACAD3734C2E20
89A27762BAA58BE9EB710C0C4158958CD6707E3DE6C99E7B22C57E18750541D0
B1B75533C5A9A08B17CCEC0D2F881EC7256EE3FB416D8D4D75C7DB51C8299B14
00E1242CE5BE6A645C2653FE55D062B786BC3C6651B099DFA54C7F37D97D22AF
A04E1FB8508297F5603D8DA70065D910943A34F7D5F2090FB4AA42ED70C4FFB6
FAD3E1E05C7DDA076F4DEB286987618DE993F0A25F7BC65E7ACA7CBD3EDB03F6
EEA1CE5F1FB7FB9A59B2257839F4FDA719F819F1E0739931A7A11BE39F4468EC
D9C647F414409CDF28AB555846CB54F15A1BD09BFEEDF4840B73CF61F53C3232
37433A900EB4613C178C668558824D8C668D17B5DE1B8D5A413287D9E221BF67
68D98EB985C215CE71B98086E3722B28571052662AE666F725C3A16AAE28B0F0
40E7EE32051306E1823F29FB7E3F66730D24D8518117AD200014839545B1078F
38D72BD2D7CDB0C0D4E78DA460FB06216530AA86C1A0346B3890EAEB73B9CEAB
98A5E5B24B1B627B7A8FAEC8F491D561FCF5AAD0873312846B070B77C6D79C45
080C9B6A8C93E809536E9087CCA809106A42A594173597ADC28CB5AF48F8947D
9BFAF2F57F0F6C4AD7C698D3B7FC839CCE9E2DBB0220DC5D37D70AA6564CC6C8
538A28FA00F718CEF0E2EA461EF974D242BF0ADACC43E884DF0DA98FD84AD418
0E993172DCFF4F82A8D7AE4F8BE1802D61128023A737F14760FC23ACF398BA01
966964F95B05E91CF25918FFECA131479940083861710D5A18BB4FA9CDA30DB6
F1AEF8AE8448BBC999C837CBF94483C1D7C5CED7572391776C13384D3DA97BFB
52BA5BD337115369B5CFD21A473217848DDE7B54E856C37844B82195BD17FAF8
2703894487D3419D53E1BF281AF246066534AE9F7D5EFD6F90EFEB8754498E1B
9CC787090B14A732D8E2A64BA8273A36DE6521337A093C820D3A8AABB7B01DB0
D72FC741D72BA63E738ECA67BA60B4F3C0ADFD96E7C722A2E12BEA0264AF0194
4BA2D55BC0065604903A6D4578FB56E6C8028478370B7B78748418763733265C
EEB7C48C8ECCA20668509B31437C92C0BEE63C86DA61EEED2542495E2A218F7D
F60952EC6041962A810C5F4E92BC8D9A472477E75D7ACFDBD1B782DFAC352626
E529B54DF684858FAF1D4C9BE220B1DF932A4D221FDC5C395465B5522D4CE7F5
60E11232A3E46B1A461E37D3EAFB995FD5A6B1D46D2ECC35704732D5E3E9248B
42115D423AF7DD4D244D8A12A788CF5AB296DF77650F20CE62EE35DB769BB250
1C7D27644F49C2B07CEF62376AEB0746BD5F39F98CC310FA67BDDD0048351C0E
547853313A034297F6869BC51CC28A48881662874BEBB34B5F190746E586B04C
7A50F19392EAC47992AA695A7B748DE006D6FAAFD177B5F7B1315DE385D408D0
814D7223BC28C448AD8FBFE9E75CE56E9A6E1545B63C5C4F15CA03802EBF828D
511CAFC75EB3F28DB449E3E80F75AA02F676F34D529A0CDF159224F55BE8E686
FCC406960827DB167353D7B4164C5CBD3E75C411B1617CDE57C14FFA0D5B697D
7BAB1DAC25C493D227B18988D3E2E982ABAF98DFFDFE25BFE516EB13DE83441B
97333133D30BF0094DF56D5A38DB562AC0415DF92D66C86C7DB62ECB4EDDC0C6
5BE2E2E269DEC2EDCC66EAFFB59DB4C33CB69B3E7D2518AC6690720545EED4E4
87B4CEFC4321150AFFFC853D4D976944B9A08DE9E1411D0AFD2B305FA733B344
02A609FFE6E518E0640BE3CDD4A830D4E5CC8046F1718F1FA04BF47EC7ED3BFD
A97583AD643C51579B401A71EEFD2595DED17316239554CAD0C668479E24B6FB
7F3EC47A60C727FCBA4BEC65172BD009D6BFAE3750226865972176925F9566B7
FC6B717A9061730B94776DC62358622C05CDFC9D439537CC9108D636B9E40BBB
CA4E10CB09902062919A7B6815E4D360948406DF6F82228BB74C76F32150219D
19C5AFA1643B3CA9E9194441E1747FF303F0ABCB30C045DE96E629BEEAE46FDD
9959CFB5C7DD2504153889F3A0FC55677995E05A679227144AF079C36B55D838
DE980D8465208EB2571B96201190B0E2CADFB49374BBCB6567F40A7073DC3ECE
16138199D3F9AD0D49F6E8435204C8CA7DAA2F6A77C84DF83CF0D02E1423C0B9
8B9F7EF335D806C61FCB68B5FB0212D091EAAC000013A779B98F7DC84B5CF061
065348C6F686A76C39459BADB280DDD192B150CE3024A5C9009432BE7ECDBC46
0D46268F6C82147995CD22B92BEFBF2FA320CA9A16E8EFA5A3769AEC17A43342
7ABBE9274775BC9288133CF52C02A478F617A207E9FFCACECB14ED262421D557
C496E123C3B672C551D4AE4492E5876762DAC5D9EAE477BA98BC649FC1D4D31B
94C0A2812683501FCCA3EDD40B4B91ACF0E378856F512960F5FDFA0C863104D6
0216C660B46B752352250D6A1B112F08485240708E542BAAAC393193355888E5
F443CDE7AFBEE544B22DCC34C41FDEF1CB75A2C47242C48EB41284B735078CEE
5C58ACA8CBD3F0A6DA28E2476DDA94FD9D2AA5A44922D115E2999D12A295EEFE
9F27B7479013FD5ED9B3FA5B9CB2D5756430CFEBA0BCCA6F7536B7014FAECE82
641FC05589
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 3[449 129[363 4[449 320 324 320 1[449 406
449 664 234 427 1[234 449 406 255 363 449 363 1[406 9[811
2[578 449 1[621 3[724 7[544 2[565 595 6[234 406 3[406
2[406 406 2[234 1[234 2[320 320 10[467 29[{ enclmec ReEncodeFont }38
664.176 /LMRoman6-Regular rf /Fb 255[732{ enclmmathsy ReEncodeFont }1
885.568 /LMMathSymbols8-Regular rf /Fc 137[1136 1196
837 4[1076 1196 1793 598 5[658 982 21[1616 2[1293 2[801
2[1353 1412 2[1530 1625 10[1076 3[1076 3[598 717 45[{
 enclmec ReEncodeFont }20 1912.83 /LMRoman12-Bold rf
/Fd 185[723 4[830 10[553 3[553 3[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fe 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Ff 255[1033{ enclmmathsy ReEncodeFont }1 1328.35
/LMMathSymbols10-Regular rf /Fg 198[470 470 470 470 470
470 470 470 470 470 48[{ enclmrm ReEncodeFont }10 885.568
/LMRoman8-Regular rf /Fh 153[452 43[261 32[540 25[{
 enclmmathit ReEncodeFont }3 885.568 /LMMathItalic8-Regular
rf /Fi 140[513 4[723 4[361 43[1012 4[650 2[650 2[650
1[650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }11
1328.35 /LMRoman12-Regular rf /Fj 135[739 3[470 13[641
31[842 10[361 33[738 25[{ enclmmathit ReEncodeFont }6
1328.35 /LMMathItalic12-Regular rf /Fk 3[723 23[650 105[578
686 686 939 686 723 506 513 506 1[723 650 723 1084 361
686 1[361 723 650 397 578 723 578 723 650 6[795 2[1336
3[723 957 1[885 1[975 1[813 1011 3[1021 849 885 993 1[921
975 5[361 2[650 2[650 2[650 650 650 1[361 434 361 2[506
506 6[361 11[650 21[{ enclmec ReEncodeFont }53 1328.35
/LMRoman12-Regular rf /Fl 138[996 697 707 732 2[897 996
1494 498 946 1[498 996 897 1[818 1[797 1[872 12[1247
4[1347 5[668 2[1127 1177 2[1275 1354 10[897 3[897 897
2[498 598 45[{ enclmec ReEncodeFont }27 1594.02 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fl(F)-199
b(A)598 b(6.2)f(-)h(1)f(T)-149 b(rigonometrisc)-50 b(he)600
b(F)-149 b(unktion)599 b(skalieren)h(-)d(O)-50 b(A)598
b(-)g(BIFIE)p 0 TeXcolorgray -741 4343 a Fk(1.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(der)h(F)-108
b(unktion)433 b Fj(f)142 b Fi(\()p Fj(x)p Fi(\))369 b(=)f(sin)6
b(\()p Fj(x)296 b Fi(+)31002 3820 y Fh(\031)p 31002 4033
573 45 v 31053 4801 a Fg(2)31707 4343 y Fi(\))p Fk(.)921
6888 y(Erg\344nze)567 b(in)f(der)g(nac)-36 b(hstehenden)565
b(Zeic)-36 b(hn)g(ung)565 b(die)i(Skalierung)g(in)f(den)g(v)-36
b(orgegeb)36 b(enen)921 8880 y(f\374nf)434 b(K\344stc)-36
b(hen!)p 0 TeXcolorgray 0 TeXcolorgray 3169 29305 a
 currentpoint currentpoint translate 1.36441 1.36441 scale neg exch
neg exch translate
 3169
29305 a 3603 29305 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 264.09204 a add def
/d 0.0 a add neg def /h 108.12006 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3603 29305 a 11577 23321 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 426.79123 0.0 -426.79123 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35825 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 28.45274 0.0 -28.45274   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 42.67912 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 192.05605  0 -72.036  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -72.036
 192.05605  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-54.06003  def /maxTickline 54.06003  def /dT 2797019 abs 65536 div
viceversa { neg } if def /DT 1 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-5.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 42.67912  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 42.67912
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 54.06003
0.0 -54.06003   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.05605
0.0 -72.036 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 54.06003  0 -54.06003  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -54.06003
 54.06003  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.036  def /maxTickline 192.05605  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-5.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 54.06003
0.0 -54.06003   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.05605
0.0 -72.036 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11577 23321 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 11577 23321 a 11577 23321 a
tx@Dict begin  { 192.05605 54.06003 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11577 23321
a 11577 23321 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11577 23321 a 11234 23607 a Fk(x)11577
23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 11577 23321 a
tx@Dict begin  PutEnd  end
 11577 23321 a 11577
23321 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11577 23321 a 11577 23321 a
tx@Dict begin  { 0.0 0.0 pop 192.05605 54.06003 exch pop } PutCoor
PutBegin  end
 11577 23321 a 11577
23321 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 11577 23321 a 10529 23653 a Fk(f\(x\))11577 23321
y
tx@Dict begin  PutEnd  end
 11577 23321 a 11577 23321 a
tx@Dict begin  PutEnd  end
 11577 23321 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -10 def /x1 6.28318 def /dx x1 x
sub 199 div def /F@pstplot (sin(x+3.14159/2))  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 27.17026 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -53.34889 -49.7923 -32.00934 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -53.34889 -28.45274 -32.00934 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -32.00934 -28.45274 -32.00934 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -53.34889 -28.45274 -53.34889 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -42.67912 -14.22636 -42.67912 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1 0 0 TeXcolorrgb
11577 23321 a
tx@Dict begin  { -51.21481 -45.52455 } PutCoor PutBegin  end
 11577 23321 a -458 x Ff(\000)12743 22340
y Fh(\031)p 12743 22553 573 45 v 12794 23321 a Fg(2)11577
23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 32.00934 -49.7923 53.34889 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 32.00934 -28.45274 53.34889 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 53.34889 -28.45274 53.34889 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 32.00934 -28.45274 32.00934 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.67912 -14.22636 42.67912 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1 0 0 TeXcolorrgb 11577 23321 a
tx@Dict begin  { 38.41095 -45.52455 } PutCoor PutBegin  end
 11577 23321 a 11710 22340
a Fh(\031)p 11710 22553 573 45 v 11761 23321 a Fg(2)11577
23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 74.68846 49.7923 96.02802 49.7923 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 74.68846 28.45274 96.02802 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.02802 28.45274 96.02802 49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 74.68846 28.45274 74.68846 49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35825 14.22636 85.35825 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1 0 0 TeXcolorrgb 11577 23321 a
tx@Dict begin  { 81.09007 36.98865 } PutCoor PutBegin  end
 11577 23321 a Fj(\031)11577
23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.36758 -49.7923 138.70714 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.36758 -28.45274 138.70714 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 138.70714 -28.45274 138.70714 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.36758 -28.45274 117.36758 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 128.03737 -14.22636 128.03737 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
1 0 0 TeXcolorrgb 11577 23321 a
tx@Dict begin  { 121.63576 -45.52455 } PutCoor PutBegin  end
 11577 23321 a 11710 22340
a Fg(3)p Fh(\031)p 11710 22553 1043 45 v 11996 23321
a Fg(2)11577 23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 0 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.0467 -49.7923 181.38626 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.0467 -28.45274 181.38626 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 181.38626 -28.45274 181.38626 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.0467 -28.45274 160.0467 -49.7923
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71649 -14.22636 170.71649 -28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1 0 0 TeXcolorrgb 11577 23321
a
tx@Dict begin  { 164.31488 -42.67911 } PutCoor PutBegin  end
 11577 23321 a Fi(2)p Fj(\031)11577 23321 y
tx@Dict begin  PutEnd  end
 11577 23321
a 0 0 0 TeXcolorrgb 11577 23321 a
tx@Dict begin  { -67.78474 -36.70168 } PutCoor PutBegin  end
 11577 23321 a -172
x Fh(f)11577 23321 y
tx@Dict begin  PutEnd  end
 11577 23321 a 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 32837
29305 a
currentpoint initclip moveto
 32837 29305 a 3169 29305 a
 currentpoint currentpoint translate 1 1.36441 div 1 1.36441 div scale
neg exch neg exch translate
 3169 29305 a 1 0 0
TeXcolorrgb 873 33290 a Fk(Alle)477 b(f\374nf)f(W)-108
b(erte)475 b(m)-36 b(\374ssen)475 b(k)-36 b(orrekt)477
b(angegeb)36 b(en)476 b(sein.)h(A)-36 b(uc)g(h)475 b(die)h(Angab)36
b(e)476 b(als)h(Dezimal-)921 35282 y(zahl)d(ist)g(ric)-36
b(h)g(tig)474 b(zu)f(w)-36 b(erten)474 b(\025)g(v)-36
b(orausgesetzt,)475 b(es)e(ist)h(mindestens)f(eine)h(Nac)-36
b(hk)g(ommas-)921 37274 y(telle)434 b(angegeb)36 b(en.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
4343 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6335 a Fd(F)-123
b(A)369 b(6.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 41007 54804 45 v 0 TeXcolorgray 24746
81281 a Fk(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fc(F)-239 b(A)717 b(6.2)g(-)h(2)f(Luftv)-60
b(olumen)715 b(-)j(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray
-741 4800 a Fk(2.)p 0 TeXcolorgray 651 w(Der)512 b(Luftstrom)e(b)36
b(eim)512 b(Ein-)f(und)f(A)-36 b(usatmen)511 b(einer)g(P)-36
b(erson)511 b(im)g(R)-36 b(uhezustand)510 b(\344ndert)921
6792 y(sic)-36 b(h)450 b(in)f(Abh\344ngigk)-36 b(eit)451
b(v)-36 b(on)450 b(der)f(Zeit)h(nac)-36 b(h)450 b(einer)f(F)-108
b(unktion)449 b Fj(f)142 b Fk(.)451 b(Zum)e(Zeitpunkt)g
Fj(t)396 b Fi(=)h(0)921 8784 y Fk(b)36 b(eginn)-36 b(t)433
b(ein)g(A)-36 b(temzyklus.)921 11330 y Fj(f)142 b Fi(\()p
Fj(t)p Fi(\))524 b Fk(ist)i(die)f(b)36 b(ew)-36 b(egte)525
b(Luftmenge)g(in)g(Litern)g(pro)g(Sekunde)f(zum)h(Zeitpunkt)f
Fj(t)h Fk(in)g(Se-)921 13322 y(kunden.)921 15867 y Fj(F)181
b Fi(\()p Fj(t)p Fi(\))606 b Fk(b)36 b(esc)-36 b(hreibt)607
b(das)g(zum)g(Zeitpunkt)g Fj(t)g Fk(in)g(der)g(Lunge)g(v)-36
b(orhandene)607 b(Luftv)-36 b(olumen,)921 17859 y(abgesehen)433
b(v)-36 b(om)434 b(Restv)-36 b(olumen.)921 45860 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 339.4332 a add def
/d 0.0 a add neg def /h 226.62434 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921
45860 a 4071 35374 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 312.98018 -142.26378 0.0 -142.26378   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45232 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 131.9005 0.0 -85.35913   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 310.98045  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 310.98045  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-92.47058  def /maxTickline 131.9005  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.9005
0.0 -92.47058   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 310.98045
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 131.9005  0 -92.47058  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -92.47058
 131.9005  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 310.98045  def /dT 1864651 abs 65536 div viceversa
{ neg } if def /DT 0.2 abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 142.26378  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 142.26378  mul cntTick add def x abs MinValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto }{ exit }
ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW
subTColor subLSstroke grestore } if showOrigin { gsave cntTick tickstart
exch moveto cntTick tickend exch lineto Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.9005
0.0 -92.47058   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 310.98045
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2826 35659 a Fg(0)2093
32510 y(0)p Fh(:)p Fg(2)2093 29360 y(0)p Fh(:)p Fg(4)2093
26211 y(0)p Fh(:)p Fg(6)2093 23061 y(0)p Fh(:)p Fg(8)1362
38763 y Fb(\000)p Fg(0)p Fh(:)p Fg(2)1362 41912 y Fb(\000)p
Fg(0)p Fh(:)p Fg(4)1362 45062 y Fb(\000)p Fg(0)p Fh(:)p
Fg(6)6985 36720 y(1)2680 b(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444
b(10)4071 35374 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4071 35374 a 4071 35374 a
tx@Dict begin  { 310.98045 131.9005 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4071 35374
a 4071 35374 a
tx@Dict begin  { 5.0 4.56934 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 4071 35374 a 3818 35792 a Fk(t)4071 35374
y
tx@Dict begin  PutEnd  end
 4071 35374 a 4071 35374 a
tx@Dict begin  PutEnd  end
 4071 35374 a 4071 35374 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

4071 35374 a 4071 35374 a
tx@Dict begin  { 0.0 0.0 pop 310.98045 131.9005 exch pop } PutCoor
PutBegin  end
 4071 35374 a 4071 35374 a
tx@Dict begin  { 5.0 45.85486 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4071
35374 a 1533 35706 a Fk(f\(t\);)433 b(F\(t\))4071 35374
y
tx@Dict begin  PutEnd  end
 4071 35374 a 4071 35374 a
tx@Dict begin  PutEnd  end
 4071 35374 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 10.929713083858253
def /dx x1 x sub 199 div def /F@pstplot (SIN(1.256637*x)/2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 142.26378
mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def
xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2
SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0.39215 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x 0 def /x1 10.929713083858253
def /dx x1 x sub 199 div def /F@pstplot ((-COS(1.25664*x))/(2.0*1.25664)+0.4)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
142.26378 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } {
dup -1.e30 142.26378 mul lt { moveto } { L } ifelse } ifelse  } if
 gsave 1.2 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  1.0  1.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
4071 35374 a
tx@Dict begin  { 88.98038 111.97714 } PutCoor PutBegin  end
 4071 35374 a 908 x Fj(F)4071 35374 y
tx@Dict begin  PutEnd  end
 4071
35374 a 4071 35374 a
tx@Dict begin  { 70.8362 -34.59778 } PutCoor PutBegin  end
 4071 35374 a 923 x Fj(f)4071 35374
y
tx@Dict begin  PutEnd  end
 4071 35374 a 38495 45860 a
currentpoint initclip moveto
 38495 45860 a 825 48405
a Fa(\(Quelle:)275 b(Timsc)-22 b(hl,)277 b(W.)f(\(1995\).)f
(Biomathematik:)h(Eine)g(Einf\374hrung)f(f\374r)i(Biologen)f(und)g
(Mediziner.)g(2.)g(A)-22 b(u\035age.)277 b(Wien)f(u.A.:)g(Springer.\))
921 52942 y Fk(Bestimme)434 b Fj(F)181 b Fi(\(2)p Fj(;)p
Fi(5\))434 b Fk(und)e(in)-36 b(terpretiere)432 b(den)h(W)-108
b(ert.)p 1 0 0 TeXcolorrgb 921 57480 a Fj(F)181 b Fi(\(2)p
Fj(;)p Fi(5\))369 b(=)g(0)p Fj(;)p Fi(8)921 60025 y Fk(Das)434
b(insgesam)-36 b(t)434 b(eingeatmete)g(Luftv)-36 b(olumen)433
b(b)36 b(etr\344gt)434 b(nac)-36 b(h)433 b(2,5)h(Sekunden)f(0,8)h
(Liter.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fe(___/1)p 1 0 0 TeXcolorrgb 48228 6792
a Fd(F)-123 b(A)369 b(6.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 63759 54804 45 v 0 TeXcolorgray
24746 81281 a Fk(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.1/FA 4.1 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:49:13 2017
%%Pages: 4
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular LMMathSymbols10-Regular MSBM10 LMRoman10-Regular
%%+ wasy10 LMMathItalic8-Regular LMMathSymbols8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 4.1/FA 4.1 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0948
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE3B67D0FF6359D1B6C1C6DA4220428777EA791A503CDE266
386B24E0D7FC0C19F54D39D2B9223D466810564615CF6EBF5A75BEC8F6DDDF38
26F6A75F7C9A433ABB0C95B150D21DBB43878E3EF527976A3A2433047A05623D
54F22D062F633C08A3EBDF22FEFA476B92D1B05B8667CF563F5CFD60228D5707
0FA2674ECBFB8D84E1693A523A1AD864430BEAB8A5D4290194F13FC1EEB80C20
05998C0126EA9C079DF7B66876309A386303EAA76BE62BA4A4F0C9F0CABE413B
EA11031CCD13A75F60ADD7C8BCCD30CF8DEA6E857925758842B07A39AFC12383
4DCAFECC6BEFBFDF30F125AB1AADDA411E5D5C3E3D685254D75D9E90C6360869
E9B889ED7743124BA048383FE0160B6713DEC58045B2FE2FF2D13C2F3E7677A8
57159D49D5136AE578BF69E2789F3B6AF032B4CF90630999C92E8C09F4BDA7F1
822508B12B49400B4D9A8BEA50FE71AF307AAC316729E57356916AB07BE7DA90
738FFEFA846F20BC9F7B0517D37D7C72A5CB88B70D5FB6D2BEB758DF8B24F45C
0B76C360CF8CB5EE0A7DB546376060BE860984BDB42030F108C2BC79F0BE6CEE
D49DC2A7E9A3ACF715D1C7DE0BE6DF87ADFE36DCC77E1A4E4F039B99FE8CF361
51D150D79D8A860B5769EE9D2EF19A3AA0BD6AFE9DCDDDA764F6AB6878359111
F7C03CAE1FFAC9BEDD9FE0AAD8C771B8A8291965F984FB73ACF9424C6DD5F8EA
3E19321B2C5613A64F427D40D6CC9DF27BA29688ECD88E45CC1F7D2DD14B15A1
AB6C491542B8918E5F752EA332C077315730D94D6B4FD99C92C3B4BC6F860D11
82209E9DBD0FDEA1ECDB8AF9F18AA6B4591B7B709C777F38C44FF17F85AF4A1F
E61056E5E310DEC452C4FAF5EF5BE49ED230F5EB5E2F7C7D369249EC90911034
3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B74DFC090CCC
40AE9DA65E5DA02E7A7E8A840B45B752AF11A279BA06F821525DD0F477831176
84C80B29D318260FBC314986223F9EC4DB5B0EF2EF5D424C6DA581B49C709E1E
98149FEAAB15DFE7F94977CD2041DEBCB1FC8F4F3B288515CE43713570027C3A
C603C44D8AEA1F9821E0124F9AE3E5A1EA6D1C6304DD03CD20842B335D7FA068
735311F96609901AE3F757E6936FB0AFC41E8504D553FFC1556A37F78DE79AA7
B72000C7B2DAFF6236CD773386E362EC7CBB1284132F1FC2EA71CC5D2E2A146A
92B5ED12F71C8EC58BB4C207F5E12E9A87FF6ED8E4AE72E7FB4BF0253679DDA0
C7850A553C7C1F7CF3A69D7ED78AEE7A900DC7AB539750B476A9D5A1CDD4AE46
261FD41D059BEE4664BABF616718A6D39CC6F3B254793991A8B7E9FC23E36D55
9E4FAEEB77F3C3256EB11057091DF6015793701DA3A8867BE168CFB9B5D52529
CD81FFC45E2E99E588BEDDC15FE6965ED77A15A1811149056B35E0072A94447B
2B96971E35DE1AEB670A4FB421D079F3741B296A58F0D5B4E47DECF583B40EC7
8AB75D63C8632FEC264785E63C14B5AF665CCC741B8F28EE7DB9F2761DD12FB6
0ADA0247C9FB6C62C1D1A24E7B41EBAD57574D43E06E13690F831AC50BFC95EE
0653382141E52322B25F345E5A426C787DF084A117617CEF422F7E209C19161F
FCFAD9CBA9F50A4178A03A3D1129C1204E95D0F19C0E9A42DF896D9FCF24D571
EF958527CC1DF6AB5C1ABD2BB2058BEBB50861CCA95504DD63423BF603B14459
B7C691BF6EAE3ABBAC55FD47082DBE00ECB6C5C0F3CB6F2433FB0784544DB1A8
0833D0831D0F1B5FF1501A1E6B6B33416D9F69AD04218758F11DAAB9D763A34A
791B13260BB0ABFA6979C0AEA235474A2581C01C4AAF34A4F7C14969F073BEE1
699F55E90CB69B74A7E9FD538C48255D891F5D5EE25C7E2E642E6FEE5FD39DCB
F8FF3A61C80C2F509E9D70AA5F53D9B25887FF2C514EB58BEC9ED315FCFC90F2
7B64DCD3C7F53BF8015C7AB23DD76927E955326F853328E714351F6675401EAF
E76B3AA0D26116D429FFB0F1ABD9AA81126A2C1EA2611FD34747573BD6FDE640
B37C333E2CF7CB11FC10D78C69AAF08F7429201194DA3D8B16DEED5918DFB99C
A7E44B6EEA454C10136EAE11134D407DDCE198405E2B154149EA3406CA139109
0759AAFFFFD2A27700D23D7F253A0B2649D90580806366B96D82D52AFB7C25A7
D470014D7CDD2B9A19E52A6406DA566CAE9FF270CE94C0FD807372B3BFA4C7F7
D00D9CA0BA5B54BC20ED3F9090575E6B2FEDFFE29C5CD5A1C665E298FCD95200
466ACFFA79CC3070F1F1B5CF46E5B35FF32F24E8411FA786A1EE7FF0BBBD62DD
CCE874013E843B92EC03763269851DCAD00DF5FEB0E76001134D48F2588469EF
9A30A874551A91D931CE1D4E3974DB0CED0AE67E8B95282812202F3FDC78B37E
6DEEBE9F1EBA0D35192E0DC7560CCA3275924FF61C9378D7100674CAED9525FC
DD5E7CFB80E4D8EF32D94768D1D56D5165E3E03DA0CCB8F5EE16AFE9D200DC84
754D426AC38168121BDDEED200EA1CDF391596B3C8FE018B33993C2968D05B34
440BF6AABF2AE73BBF5E39AF77305F7AED5F45879A7B4EA73AEBEF22A27A3308
9AD40F9EF433A3F751A1E67EAE9286CA89E9B180550C95BFDD1AD28877C59E1F
80F8BC396BC66EB81966582E47D80A617076F0CFDE7430465C0ABE0B253C44D4
01A479EC0B6C30D505CD8F93EFC6F62768B6E3AEC9A6B37CCB055FAFD10D156B
AFB7DF0A15715144592B8DC6819E2A9C262FF95353C04DF31113DDAE6BB5FB45
88F7226462AA3A8068D519A977566D201C11F3E080889A1D0F729BDC963A600A
53DD8A67D68E03519771A81B4CB0A4AAD07745DB8FF806A2B35FF91E6A448E0B
78519F62EA4E017A26AB32FBBB450905AF929A7C772A11F9BEAB7BDB88A677D3
4092B86863D7BA3EDF87D445367DCA1EA2D1525ECAB268962D4F23EB64A32EDC
A3F76C3C2B8F0B8B03F0405FAFCE09EAE3A7EB1E0F70CA5208C79BEB1AAA4C6B
37FEF23A47B51C8E107B715B83F19DD62D2E996D62E44231A400E95D8E73EC9C
90BED1B79007538DAF3E9CA7A95BC56EAFD4A1D49FB532A205982FB2CCF48131
727309C30DEED6160C654BE2663E3EC8DA510AC7654ACD496CCDCE40FB14407F
B4E4FA419EA63CF8E551341C8F1980738969D01000E50039061B507F1432E885
50D0D7FAD828477AA7DB94857FD1244EDF955327100476C03BA6DA5F545C7790
BAE2563072B8CE073870645050786EDECD10F16B8C458B598EFA764A66CEE055
12947EF6E4537BCB528D9E3023B4A8611A8D7287EF6400CE641318FF2271E103
5EF29E7BF84A0FE9301DBC21FA5C0AF8E5959E7425E4C1406A3E75B51138677E
590268C83AF3DB2EA29375BE3F425A9134E8794652EF3B1316CC364324F41B6A
80DC3D29B646889CAB6DBFB25C922E61E96D0ECC913C9D30CA819B3E33B51C1F
3839F6E5B91E0D5CE58F37D68E037B78856A5809839CB78545A1AA4E33EF9284
1EAA0CA6C34BB1554AC5C3ECAC798EF404C4D91A4812B788A5D8492B637FF9E1
DA7A293B43CA7617A2FBC285DC7CA0CBD264B532B5BB64EA82FB4017380A259F
C9AB5CE06BD966209D3B8120A61D1E10ADC4BACD8DD470FF43B59F592396BA30
634F98AD162B16F14B36B4EC13648620D108550DBAB22893B9CF5B690D2503D9
694F9496D22A8F4ADC583A22E0947B8D4048E9F20107BE74B527BE95283043A1
57CB5FD32B37F6A114BB4015E4E60165BCF05B7005F413765741499F7EEDED30
BC78D90AEF611AD99383B8FB5829429F15FA1BF376E015F3353049191C29B387
3DFBFC9BDB384E0C8E51C2E0A7D5F726B9834CC011D55B7F26424F5F3C37A71D
BDFE92DE4F34899AC7EB6A9241295EB030123E60C5B0BAE2DD375F344633A5C6
07093D4A84CE9F803CEA29E5165F3FCBE243701F88E93A8F534C3D2574524A1A
DFD892DCB3E1A9EBF0EB76344E91530605926FE65F292AC9C4C3433B628B5630
0CC119A3FEC1F765B4EF95694CF7412643360A5DEC26AFC39AFFD6EE93DDAB94
5DF39C36F34F5BCF60C39EB50DFC2420108558CF9EB31F57CAD4FBB0F0B5EC01
78B29FA6DE86B7FBEFC580B98D60AE1DC4DA2B12856E7AED7F4FA91B74C6305B
B46551451F76414CC3EAD2F90216DD84FD3C537E54B41E24DEDC251A3CDEE02D
DF9C94E9C79E017B8D1421F800AEC2A45F356E45ADF848EDA03C79A5F2A5E1B7
5FDDC24D9C52238704D5174B75B2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3ACE7772980137BBF6A5C4C136C45CE680D23B992D7F
7544FC9F70CEB83E2B66980ADA7E13488B61554D8CB264FA76074355F7FF6C55
FBF130009A03EEABEEFB1ABC2BF844196D67F7A6D7B5F71162E03FFD780CDCE6
720DA5752962EF6FFEDFCD9C2CEA3A186DFAC113892B6E7F1EC8B28E99D09742
86959C4335F1C11135880D99DE366FD7A9FF7917C89D789205E574FA14895D60
74559B3CBFEB1985C97933EA251CD6756B1C77F32C734B1495D1174C16F42233
087E98A8C640830F99A340C28D01CA17209B6EF7EBA2A478B76510ADA9315AEC
00C04070AED075DCB14A4BE6DDA0EED31325AA64933B27D7759F510099DD96A1
2C9187B9075AC4CF49DB7BEE4E290CDC6062294B2F08C4219ACCD45F284D3FE9
6014292FE64840EBAF5C9AAA2E76123051A367BD7F458F47C5BDA2EF2CE8A67D
3E28A312BA51A1EEF34EF96842892AEF3F798F978B67497EA783668439092226
761782F3692C511FB77BF5FBABF1DC613CC2C87154C3851CFEFABA60CEFD3C89
4A200AB4028D08EAF6BB227595C0D9C95D611C3A37F993D13900EFC14CE73AE6
BD25A3BD598D711333ABE368549F6662B11D412C2E05E97B01B0E5AAA3EC774A
348623902664B82B572522A5BAAD33B0C1E11E706E54AEC81C53DBBD2C8BE649
80CAC969989132B4C2C91E82
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC726979DE858914A95826
CB2A8F0F17773C8DC86EDDB610CA36C8A6051774DAD79E4E3DD10CA06A919430
0B6FF769550AD34A047DDF4DCAD48C79C13C76BDB9A98E254804C9126F6A007A
D697659D0F4B9B7BE0BE1E74DE179CA649DEDD316A452509D2804B5BE0F6C5C6
EF94B0FC821BF1E02C91C149EBC163C14366CDBF3C81F57A352355320AB4F3E3
A84E4B60EC6CF57A1A00F90F224190D7BFAFF83C13AF40E46F7154198D7BC2C6
F10586634E82705468F167630971BC01DC641766DC254D9E9B06BD62DEAA105F
CD48375C11A3207B5A381FF8E1C163001513CC382BDC172026981E9CD05FD8DD
83503D108FA0BF72ECFAAADAFEE78E1D8D2B9E94AF57AE0A20570A74D0C84155
353C360C86120BE8A6A2B0C9D6550784FB8929369CA329F6A6D89A7066E845EA
FE223A6D26B84EE6B6ADF0D9950A195F64FD3209C6D47B46B7708F855E501D4F
6F9B939EE1663FD02D1E1D74F22C4DA4143A4D523E32A0A371A51F64CDC4E06F
544F2055F67F0ACD4E9D99C47877168E8977CDA919CA86D82794F04E7E98644D
98246CC6E5F85E045FE750DA4A9B403FD293CC436888B75949007FB2D0557A88
D362014EDFD3445233A03A005D3F670E67B8FE790851B16E71241433FEA5650A
3908D0B0BD195F64242395E6C807B7D00E12CC9CA711980842040899809A443C
00042C681FE3F9BBDDA09127551CC4780E971D3952648BE3ACB42BEC6D5B5DA0
CAF19D34A8BD8E904BBB589CA901E79BBDB311C102F70F1D2FE7EB3609B14BBF
10E66264FD1E6EAE175987CC0DE53E3799F86A71F96165AA3EFB39B7B13C5FCC
011F38E349AF6FB76AC51841B39F02662AF720242D74012508F26C7003A39A3D
65A8CE04E1583229836D0DD8CA390CFD14E80FC0455F34F89764223F7DC55BA6
69B8793F48CA8E9FA4C89E877948CA4CF92F1BB9E3825B748C865593BAFE4D25
F58B6C3937F7A3D8165EDF4C74CBB662283EA3FB964084B345CC06DBE98FE9E5
2BDF3CF8FEC118F0FE83A621685EA394047116ED7629C74E8171EE39B9968596
DAD2FB69E0425E6B527C4E25D28CDE453EF7A4E0988B62CE07D14F620B90A67F
273B311061BF2D3CE3DC3A689EF85714824E939267229AAFDE9C8C387F15F064
F68627E32241CA1AE9D54F1E3710F18FFA2F912FD822B05DDC146FDE82B9FABC
A9A986683FF9CB2E1937937AFBCCFCFB821CEDEFB4941ACB6488C1A608FA21A2
EDC0D22ED3D5F6735067D8C0F31C456BB35D31B98E4DA0CCE45277DB109D6A95
87CD6B0C5BF54A30D4E3072F05FEA72A3C39AA0DB177C37546FF0FFE8288920E
35A3B84D87A21F5043A04BE41F18B2CD19AAC871DF4CCABC332ED75E1657E2B5
531B227A3879412434F68276BACEC7094E9C4779051CB9421DE1DD7BC5D109B5
2B7093D785F43FD6DAE693B16645D354E54ED6C97ED4F591623645C99097F1BF
66F347EE1D6DB95461595C9938581921663D3A3DB29723187596489A8894E037
3BF6D0E1D56EA24BEE873E68313353CCEF779B6200A1047B20647CBC2F42292B
825608A05FCC5A87AD774203738D9D144919E98326CE01E4BE6B9E623761D24C
0B7CB02DD90DC8A2CBBEBDCC9B7EF3CDC194DF7541D34D08480F1A1CA16F2E2F
8A6A4A00EBEB709BB571CBD6D51C00B349268DE077F06EC59482927DF994271B
1F39BB29575F0D72916AF4B385735E3409FF6CC8F3C38638084F8F4F7DA8B4AE
EED926F2DEE9A34E92E3925484E3FA45344C7FD3D4D3A68B7A80D27AF606694C
DDFE9C6DD15D99ED151912F966FCDFE7AF5AC66080F745228EAC9B0EC2C3F650
1F4BA0C82814EE1605F5CA9D62127553EE375832C57F9ECCF6D8C3FCCDDFF2DA
B3612678BF24A2450F6E99DE896F7F3E4563B59A33344959BAE4CB57E6FF0CAB
1468DC84FE0F3F92EC4E129E00BA3BD9CC0870FB6060AAF40EB540CD50D3198A
9127F8B594F29CCFDAEA3CA1276BFC8969DA9B9A00344F1D4D782CA0ABA98754
1FFD5934A377B4E670B933462098578BCD5050EB47A9F4313EDADA4845CD6C72
77041939F7243D600CF7EE179BBD3BA15C58FC4736583A4EBB71EFF383DC58FC
1C6DAA3105C475E5D473CD591B11F1282E9A80CFE218A4B5FF0264F1EC9818FC
81ABBFC92DD26021738105BCED3E94CECEB2E6E552D1F135733C7ABB72957138
4824567D6D1B2BE5142DEBA285AC0DF74D696E55B08B672A1118DAA72C369DAA
397883491E11171B2040FB6637140BE927369F803A4FF311D52A74289065C1D0
E2663FA57A88150633F3F937E9606D75A53BC9AC8678874FC3486B5EC7D278A0
D5DABB7B1BC64C3BC771C29C5837FFFBAD42F40083C2E412EE5E6E050E99E1DD
8C3FC2A00E05F0D6076A34A4B833ECB05F190B1444E379817760012E1331E9DA
B047409E478B58C1E5D8811E1799E40445E29A10318D320D2C81AA5DCE6620B1
3159F6F0DA988C6FF06B7DEF84FD26D3794264CB02B2E1B8F18CC386797D2A9A
40DD7EFA8609D2E30899DAC9B8553DB4FC96FC35ECDC38C3E3223F9E340C6745
0386D3DC4FC1E20A83DFAE731EAD0363A7BBEC37D8A9CAECC16CEAA06FED505E
C60F7460026CB419574319DAD73DCF5A465E9F002FA79AD452E2CCE8D95B6A53
88F29F07A9F37C84D143DEDCFB27AD763C746E1814DAF2D759976B3D2246EBC6
9353B083453AA83AB1657ABADB9A30C6C52A33B45F9C7B9361F7C7F4EBB939F4
6ACCC32B19C5A5886DAD4EC3D83D0BF1564C00C405693F2832BA5827DBB7103C
432EDAEC18CAD42166EDA7834BE592C3B7C87AAB2CBBB8A87C093937215405A4
E4D84599E4674B52F65CD9EDBBF10DF518D2436969674D4C79B5F77B8D6FA2E2
26B8B932A195CC0EEFA8E39744C2315DFC0050BB4DAD4B0FF3779D39D39D1205
9B64E8C6097B5281C359CE4BDF4907ADA234C6DE77DC4957B683947D54583D09
C01DC47D2CA3D7E500C9BE47338665F1538F2F645757A6FECBE5A1590A6EA831
635F1E7946F9ED34797866D7479F81B25C8B73BE5EDF2461F63CAC91E253D461
23B796965124AF855AF2CFF8EE38436E7C68C48BA02E9F78B4EF39EC5CC133D1
4C2E464C13F5C41C3C5F8114A5650C07838E0D553E7E840AF3EA2B0E8D47E025
299E048097B778D17B0AA1C672E2020C946F0F8E03A35E76E81DBB60E01D4CDD
FC2E9BE4709956583F3B9EEF0A37F30434C3077A2428BEB3FA5E46ED9C413EF1
95DB3159AFA04AF25F0A82F1114AC09880F80827DBBE528FFC7FE26EB04AA53A
EAF4DBDBF6F0800EBEF9EA787C014E395791F73DC3A126EBEE67B036D93D18AB
91F771A43F256843EFCDCCACE4627CFE80E82179579BFE305B9AA04A6E9528D7
57CE24139474F15CA1082CF6930F992BFC83A4D983558086958FF839797DB451
68A9F3FEF6B8BEBD37ADA98518DD604EFE6715F50897F075509F64E99F3543B1
13D3A4716D2FC8CAF0DAFB63A8C28130E1591BC17273EBAD6AFB646F54CEC76A
C98678B54E6E3A103F615CA05A901D8B991528CC1ED3B30CDE23A07FFBB7128E
66FC9D66FF7CD9538565425DCD900AC231610AB9789DA62AC41EE688184BFE66
41C0D34DC5F77FEB37954682979666FD919D83DF85BA4F4B14D6A77044767539
C0C38F4EF65E5D900353EFC3A7D5BA1EB1F51ADF85A244CF55CE0EC7494D4247
243DFA8385DBC5760B397F0EFEDF9EF7769E0A6E389AD0B2A5D10CD4C41A4009
7EF753FAF0128954373F9718877DA7599DE0AFF6ABB520C27B9B698116A5787F
E211379BBC3E33DF49A031282BFAE588877B2A9A6426F6010B1050C5F50CA931
A8AED0902642383EF313DA6EFC55D3AF10B647078CA66EB88EEA899385122089
2D97DA2F0E5BB1BDD5ABD40D988B018FD18F5ECE08D9A100CC4229A4E33FA93A
0FDB1AE200E2F6C6B899AD9D53871027450BAA1FC67517CD5B69EA896122FDB9
20E721E0DB58AE8034D8C75D758E668485BD05C356D3255479B96DDEE53455F4
1AB052F11C588936C1837380CBC611ED14FB2F017FD1CB7E1E23C1459E378627
F323C6E6F04912979B3850CAACDA744B25D6FDDD4207C80A3636F3B7AC37F415
FD2F8EA734FA949289DAC5813D5C91D4689F7553DE7432E5B553BD7AFC2D8E6F
3071A191FA8947D12382B17FDCEBBC82F61E5EF76E8793195B9D6474F0070FE5
7D16CD12153DE8F377028125088457135DBB27457FB4CAE16197347611DFE63D
A3C7C9266F7ECB5B7E091D1B11EFF73F0B5E7A5748C8AFB555D1E26CCBF43EE9
C02CB6F255587300FD433C3B4D9FF1E96935A959D465B74109BA1843085C27C2
69C751AB2AFE4B15C13C6A0664475C3A9C192169487905DC47D2022934989F37
1A8F30B1B39DA9B1F203A2814A200FFD11E14CC70C954BEAA33A81A5EE27B922
0C89DF8C7471DED4067D1AFB8A49609DCCF844AC7E03278F56A07C3423C5B2B1
4B8D584BA7468DFECCF5BE1B12A00F107E3B1014C01FF888A9B1E40D31C73F5B
4E253538C5E0D0672F042A01EC5CB1BE74CE9522C06896B9E641673A87B47BA7
D4A91ED4903EE143F0FF84E3670B8D1D046FFC2E8400E63C1B8315BF63C3BA9B
849EDD5F620C7E451943A157C7CFE362567ED47BF94B63D67A9113921AAC23AB
1B8F7DDBE6F6DCF9A3C3CED6842C356858594C63EDBA2EEC06B6756F2281E040
0F776034AA7370C867BDF8F8CD40540C3C28B45B30772EE9FFBB8D00718C3430
10FAFA41B507DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CB98136839AAAA92
BE85FE2786437E6FA70BA428073349AF15F2DCF43283BCA59F109E9740BCDE6B
C5813EA8EBDB20FC0C7682845F3E4266B7D327312EFB770916FBAC97E6584C84
9A9BF389B403CD6FF5F8366F9D36FB76A217CD9C3F62414281BCB53CA46A8161
D536C2D0011A2B12B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28A9266
CA8402BD985CAB49BB651D6FDE79EA92A7A00FDD42D5701AECD409DBEBF0C9E9
5509BDD99A537F5C974ADEB4C564C26AF25696553753718AE0425FD9EB6664B9
516671F04ADD10C478B7F8D9A562487A9FAD8D2C70C21A4F3ED7F9F55C21A04F
1A6DF8168FA2286D8C7EB897EC741C41A0BDB45D751F6641FDAD6065A36614A6
86D6A7B3543205DFF5A31866735EB1A931953CB0EDF319AB319EA996076E3AD1
F6363E18CEF8715CB464AA160792A95431549FB6A4ED42741F9996D7BB1EC714
A2F30863F354F78FF9D34A41EA24E7A2ACB665959298984C7B4B72564646B091
0BA9E173FD2222DDED8C4BB4813D97384DFAB387977946314C2FD50B1EFABC3D
291F4FDD99EB7C0EB047051BE634D62F6F164085EB045535E44A67A143EB6391
3019CCB8D949E25D7DB43EF32CE21205C9B33BEA2D1B94DAEE18FD20F24BBFB3
A2C968EF269DA1ECC28C2F9B079ED3CF9C315BA95779D124604AA59F92201234
15DE40C492F1036351910FE6B93342626EF81FBFA9AED252C2CAF15D3A748549
B6F6A61F79CC9DA248CA8A674045257BF43591473F853FE3A2A43B7CC317DEEA
02FFC7B4CDCBB6A5CE017AA860B96CA41C168548C5076500FD0985C57E723DE5
5A2ABED9B40D7BE674118BCF391F130DEA693AD05F6FCAAE4BFC1F60C355698E
32DED416EBF582A3D80351CADC60B733E50FA695EA1AB682A056B226DB767392
0A2C426EEF8DA67E650EB7B1DE643531FEA419BBA8067C6D0E964143A0906762
197B8DEA764ECFAE0BC6723E560B0FDAFB34E8AD48A2E4BA5979A58CCC637332
22D0687E1BA843C2E0831CC5C994179AF2BA4B7AA7617E2C8E789C621BD307B6
477A05334A8EFDF778DA38E54F972D6A17B932EFECCDDE3DE2B354F3681BB1B3
E49E42E7B668D99299AAFC1A4965F05C14791FA73964C470E1FA471436D8C6E4
4AC4C5010157D94FC1250822504BFA173CEED4E2DE5B7DA75EC58D886E9D64EA
069C9432AF8F2B50A91B0C7C55571DCD924B0C089E2515829D461CC7AC00155E
932FA3F5B34063E5095402C6368C2AEBE26D3157EE874CCED4EDBDA26B381A13
DEF3C35E4DEC459759D7D3575F6FFCC6B27F94965BBAD1D2156928CFC8EE865A
632AB4A611CAD82809B7204C28F45A55EA03A132AAA54B5AC1B745CA3E8A11FA
F9612B74D2950015F2EACCA793E7888C26EE723E78F3C894D26D13AAE036CEFA
B476721A2E3A65C2C5B0C7A8C8B2206E76CB6598DFD42AA22CFB939A914FB803
C324871E0BCF73B19653C3BCCAFA1AA748409D3C1E1A165DB626D7429709776F
04C4D5E4D04DAEBF5C475C7C3EB2EF7410CA53A9034999638C65F45B0F57D760
0215E8FC2552DB72CE2772DB7D5B3A765D09AEE0F0178E20124CFC1D434822CE
24ED6438F2103F4EEAECD38BB01B2C6F42C4C1B222707A748CC97785174C6E81
A614B95868CFEAD3BDB4FB04FDC4FE2F15947DE72BDE539DC79E2EDC7DDE5151
78FBC21A3BFC4E230375D47F4691E0E9E35436DAAB48FAB07CE7C933BD984EB7
13405D2B3F481244379A40283186D67327CD487B978FD50D9BCA2508355C508E
8C22EEDC232CA6A04E928004BD90C2FCDFB6DD8955D2D3B6FCF5943BF5BEEFF1
F9BF99301CB61CB5FD95EAD945BBE7141CCE4BD29366A97A5D740CCA11DF380F
90656717F2270C0F1D1D5A0C48774E2E3E1308F919F597CB24D48FD50D1EE2A9
FEF854CD6238126A0B323E6E84D554F59DB81033F4F4AEA1BF99F8070976D754
85DC4DC5F3C3D020E853171B0D1612A3DFA5264D6B64371271FCB4A74B2157AD
DE421D5F51D813B577B8741B68891BF8FF9BBB484DDA6371DFFA6222F88F0886
C7F8848E958C6F74CBEFC62A27FAAB38B52465EEE09E12C4482926B22743E5D1
A94A301D3ABD6010E43C4EC19A0D63112FEF67D69CEC2F78116EC8583ABEEB71
D9592AFE1D648C347BD72FF30455B7E6447D19E2611C39EC0DE9AA9AF9629976
79755C4CBD2D05F9A170FC269B792E8CF7A0462248EE95527AA116CF31B971CA
F5DBF65ECCD01FF04E6148A80BB2611AD6460F73243DB763DEDBF476F3516136
578D66103E6455B244B9BF9C400BC802A021411BFB80B334C4BD614EA7496D58
CE8BF62247CB10F893048F37A2FD1E4BCD68D656301406C1FD474D98B7555DAB
FC469D633FE91FC8103AC6DFEA6F007AF4A42C0A08C4DFD62E596AC1DDC11E23
572F8A2F5CAB5CA87E7A6693182B9561E329A3E67F23EFA6DE495C7C9D966924
F124603446F01CF73CEC5B7877077E421392293506C391705D62EEE3CF25BB0C
4EE70CAB7C5DA7C9BCDCFB67F1B66DD991E2E4C0A29284FD2C9A8740851EDC44
2490FAE83FAE3DCCD4447BE0C2D6DE59B1BD629F479924757548799EA068E215
35FA1B41FCC74614129FECD357C3BE8A07B61BA51F5781CAA9A414AEEA78ABC1
7DDD10E2B4D776449896677E02D47DB24D4967158F415484BF9D6A2AF010F8F3
BACF583EFBE1FF3856DF768AFD7C810A269760DFA831CF3CB5D0A73CCC6B41CE
8296FF0C92CA794AFBF04F8BB3B65AFFBD62E1EBC63C182EFEB487A03399B496
9F863BA0A83115E8AED878484FAD3448F4BBFCD65D1EBFCB6494575BE7C27F44
B99EBB6713BB8306E5B5A0947A00F952DBBB63C0DA21C717E348E0BE63120324
CF402F90BED39B54D866320877A767FE000D8A3386EB1E20F1194FD049F28B82
F4C2D73E41CC73C1C9F668931E64C8D467ECE84CF7A8C288F9B22E0AE6685047
D8BE005ED260ED9488E270BAB33AEC2A3A055F6BA3C3700A868E92B4E26D499F
BE545C804154DD343D0FCCA88D299600B0C26ADE2DD3774D903024A13EDE0D58
B50937201CDA9C1EA23BF95C4A3A8932F7D47100FF8A7D4BDE1BC37CE16625CD
FF321ADFD514B2BA1B66E7CFDB8FC93B6A8EE952D196EEFFF2D9E6B8CE8CF9F3
2866ADCA85FACAE68E9C7954B512463A86B1623BD5433F6551DE2AA71475089B
3D2BD411FB9BA4C621F23724D73B1079F7FA07AAFC9BBEBE2E4AC9E2B9D11603
4191A1A804EA935EF390C90783F6DA40C59AE09ED22AE971884911F452C33F94
F3A9165CAEAD2464D8D80FF6C61F4410BE7699FF1E5E942546C8A4CE88818DBD
E72D030D8E884D315F56536F6A8756826B7786F35D21E3098DC9CF8BBE54D707
A866B52B55E06213C9491954D1A8509555EDD6F3AFA7710F49EB3706A4BC08DD
6698AB78D7681FECCBB4BABA1BFF3FCB4D8216D136C4B20B96065574316F2EE8
2417F28EF33242AD35C5B3A99045B99EC805E25F46A0C1D1C281BA23D096EE2A
4B193612337A6D180D9FA91E94F858DAD0662FC9CF4D1A5F32B6E6F0DB26D2A2
BEF33383AA86D27BEBA7169F949B08254A985398CF9DE6AF7875967EE3CA79A7
97C3A4F27AA9924D6616FC860CCAA34024F5669DA02ABCD1BE3963D734D64B01
82A6CFCF064906AF5C9ACA3FD626CC47D247CC610668FF164EFBF2FAB76ABC57
935C81CF7CC61260CF2B227DED699ADDE69F0C644DB1B12A15889917716A5491
0E71FB6278604A400502100D8CDBF2947CE3218574CDAB399479F824738B690E
8189691C1EA942403339023DBC4A50793CC443112BECFDD6E018E867FDA253BF
15E1ADBB05F04614DDA701D1CCCA3404EDE621A85F81C42418F86A00F9E86AD2
055F1A4587DBA063C52E8210D6F5B3C5C23A608558756F8622A8FA6643FCD7F5
5E72948D2DC55AFC5016FB2C4CE14861F1909488B3C1295FB381FFE037D9126B
AEBC8B4C6A7EC8556845CF97062549BF859A34ECDE8AF4FDE1550774A9C670A2
833CC6DCE45D2E4898BBD96830A113AE69DA214B1AD5EB1B5B430AF25A20A0B6
36FFEE11D9F45BCA484AAE98AF60C2AEF608A1119AA13FB6FA40C2B7FFA305CB
793241192FD9C1B01AF5CD5388A0802D80FE1FB499545814BC2B3B2ED508A554
7C4B8B182CBE28D8B46C0FFA3AA93A437BD5C68850DC71A816B0D510076BC298
CB824BE6E3FEDA248248457A91624203BC9932A5AB72BC6AE0FCA66760484CFF
4BA51454712FDB8102D968755E73DF40B4E922D522E2CAF63FA0A8D22AF65683
9B0DBBC50EDC121CA1ABABDCA567BB9D28CB3E5AEC098EFA7599D096FC928471
D2FE294C8173E82B508A73108E3E857C6FC2C1E3CB2BB26E7000AC331BA4ABC5
12DD810F40E9426C8DE97C2E08CC0185E1B5040F60956E929033853C3BCD247C
17947407B92E406D62814013DC8B7D07EA8BCF6B09E1993EEFAA3FCCF263FE48
D2F58612E2E0943E125B1209029AE09E251D74FE3748704DEB2E2B9758FD1D18
BC412B0D1B1410EA26EEB7EEE691453DBCEAACC6A77540CF459337A4767D25AE
29D2578676B7D52AFDD05A75ED3B76613CDBBF70DD34936C6953124D7433EEB4
4C724ED69C8697D06A5246DF0D089BBA43C39DF8A664335F67B9DDE36DBA793E
C77E5A7FC825D34DEB46C4AD0D21BFC3A9A11405B0873D4E92793CCD7B29380E
EC1C415FE398C7CEFD524F132A4B84C65FC4E875136FFD709A15AB5222CF808E
EF614A4179397FBCB81937127A6FF5F873691FC0CFAED955407B4A4A29E7F1DE
E97F58B29635395093DC0FE475ED0F753578F30E9371DD9CA0CDC20C91ADA66F
BF34ECD143EE0A05C25A8B88A7D5631C8137A4429E4ABBBD40C3F3B7513C1CB4
AA3659056F519B328AAFD7EB7C61AB5B5E99A0AA08A5999B899A7A8B565A404C
E6F153EEC4FDC93D0FEEC724C9AFC18168AE7D0CA1334C87FF168A700D04A730
3BBC67E6A2F4D86D0A690E637F0954645CE99CB2DC823134BB06D2AF45F42DE4
DB1437C45AF1C4FCA0277DA2CD4148CC8195477C862FDDFDDD8B976210456F13
FCD152FF9102718D0FC57EC5B6B14A6A3D61AB9D446CF0D54C7E7AEC55224601
E8C869921EE29D1FE4523E35F76D248774FB0F3625D327174D55594839AE3421
349C49878E3945DE280110D3161CCDC1452D0C48095FD5C0F11B0EA6601D83CF
A2183777A39D99BBA1F76ED06C85C5B8042D50FD4A7194CCAAE06FBB4378266A
6A1133D8151A000D95E13EEBAD4F215629875A951E28C90B605565901359632E
5C132EF0798C4181D98F3A8C7100DDBAFA847E6CC4A1E70CC7CD343C785A5CFE
027D7FF581F639942945245D8F3401965C9467947B70DD11EA6E1A14EBB1BBB0
62CE726E106E133718029EA62939188C01706215B1223128DFF2F1BECFDC5EA8
010AF57E4ECF56C9B895C2B0CC01A76BDBF90C69D9F21BD06D7C952B12E66466
62A651EE4185C5725607F0118BE73099943D762D20ABC42DFCCF4ED0E151DCDC
69D9DD0E215A49782F144DD9F51611FADFCBC48EF1AC9C7A7EC712C9A80195D4
C3A837404D1729BF073E5071C7F434AFE676E22268D7F0CDA4C121A77AF3F5F7
9161A2016A8A31A1E5D8CD203F49EAE52A38D32ADDD4F13836B7D53379CBB77C
99C5099E69C8798D2CDD59871A3049B5B17E55A6E677F0AE7D565B973C2CA3BB
7BBAFD7E3A80CF8C2DA31500445B3ECF6C6035F883EFC0DF2AA759A0112A1675
F9914CE626DA6431204C74CBB662283EA60520AF1B3FC5D973408F12F02CB8ED
DF6CE870E720C7CD89FF8FBC05291063120165B4379B1A4DC9D967DBF300ACBD
89D50D48DAEEF9CBD343B8D23017AF0E768DE8D3B7AEEB6A7BD9A6606F445444
542B9E1FDD366E1A6F6E83E5FB15EB0718985144596D3F26675EB99BE87FE544
11EE19827EF69EC670F9AB7C93E25949E228C80181E60F8CB130D5640E351CBD
65394E3E0D962690F98D5F810E0CC0CE93ADB4E2FEB60E28FF6D4AF0010D422A
F8D62F0BEEED200BBBC5CA508A4DF406BB9A8CF5A98E7DA172BD604D6734A992
F90C8202F59731DEFB79D6113EEF0375A55B2AD26E1B9891010B29A54AEF93DF
B375A54A9FFAA8BE2E92C3A83537485B3D7C83EB1EDE11C13A6E1AF3EC5C9D4F
03D038DAFC289873AD62E2E8ECB211C93EA990B3B3C43B7AF86F4EA27469108F
44975B7A94588215878E6866C71C6FE5F3B6CB97B0F3DD668BDF76A5F474B850
CE6400C544CDB707D38318331C87CB83A65571AB482E2DE257D768E49691D5D7
8224FE93C933C34C64E6009ACDE37643E89D5BE4215E15ADC71206D284543B6B
22F3D56B15719B27BFBFFE79C742585727C12F16E867F7B692C959CDB7A45A98
B420011EF6036096398D8D10ADD46B3FCFC12980C2E8962B76FF010D2AD94168
B2D6D475471A0373B8D9B96BF9A5F58D99A90B43CB8C1547939EF2F31348D48E
48DD5CF903737388C01B84BAC1F8C5D2AA3A3E6BCD63BDDE242EA731ED5E7253
65F007E60CC535D0775736E6BF7503DB53C96EBB269F3BA80EBDEC280D759C8B
9134111A762EBDA1A81A0D8E75880EF3D7798AFB3431A9C936BEEE888C6AD163
C0DF5E0BBE039E05E2833378762504B315D7309CF4A677AA4C9C1866F183AF78
CDEC59A46998463FE2976CA3496814414270F4A67574C6667EB5AE7AD0DD904C
436C52D290B24490304F7781337A4EE5A955FC0596B2E0C6564EF9A8E2D3ACFD
8C67C2C4DC81E7F68DFDCFF2BF0797C5693895A96343E8AB987ADAE9E0D823ED
AAD2E26E78E543F2B250A4B6BCCBE8D90EDACEC0FFDE601DF73CB1AE4D50A2A0
557B3F4FE24C8FFA00BF96CD67D4ABE060F8CAFB79B69C93BBEA5FABF6BD5E8A
396315A54F2879BB03C350A0B6C5ECDAD7BAA8CECDD0985CE7DC0912EAC8754A
E29EAE5AC87616C0C26855C290AC218EF1FCDAE565AA6B7DFF792E33459D996A
2876AF24BA7034DA37877C27AB769D8181EC2D288635D5040065BCB298D3B571
CEC6E771B02211A1768768D62E324451087BE7632AC6D2E920AA7A5C51B37937
F9DF00D9A925C506E32204ECBD388285D68264836889EB98763FE219CA24662F
F0B6783E357BF2DB29034B3007E7EE6C47436EF12DF26E116198F86D5F3AA560
1708FC9D02197BFBA2521772F4FBEE308CEFA450C89764BF440ABF0805B23BAA
0BF98438AB83FB5D3F976ECD26A4B5D7980EC6B901932612BE59E8C4EA4B47A3
9D9D73EA96FEF283F6AB3AB8F380A19F5FDCDCFB687120DD2BE5305363019A35
25A0055EBD6EFC0CDF2843A07895295A53B9711B5189F19910B28EF6F1D077D4
1491DC8978EFCE821DAE56732C68FC0637C661E3ECCBB47543C20271E2233F7C
2CD7C48F6D4440488AE7C9B57B85DE61CE78FD29960EC6E2F6B9CA67D6AD3083
ACE6EA3047B0C39C8F087A70C14E1626B5EC47DDE14A666942B10E15F853CC86
DAC218BF3B65DA3AE06F801E6C37B04B18441D4497E178FC83F8738781B40AD0
AB672FEE9DA35CCDDAB44EBBC0C2106DBFB3CAD4DA410E69C542CAC64B65F6B8
29C08A4C34C635E9C897B23FC7B2DAFF6236CD773386E362EC7B8F2E5EB1DD44
7832B4E1DBA7870A949E48C9DA6B47BE9259DBBCA637CCD068A86773A3FB74D0
1A7D06D5972B54D3B3ECD980DC8CB9A9D9491DF42A8678BEB35D3729E6634130
C75C7F9C638FE616B4FE7EF39F517A6D2F7B13D85E113605DCA21404B9128559
9E58D1F25BC54EF2A486E6A04A0110DE316A16B9A8A6E831396813D3F556FBF1
96832AF6AC529FB8BA5F68FED42DD602A9644C876BB72790D8A7479D926E7CF5
389915DF462574F4AEE9702651B3F78D75DBDCE36109147088AC6F4ED2BCE9A7
BCAD347C4D891ECB9EA86E362683301207BC5711AF71E667DF082622BD4E3E50
B189223DD7593D3674AEB6FDBC6896DD709A239A40BEBAF05CA22C94624084DA
4810EF7F492BC58C366F903F717C1A9A37719070DB1E340FB651979A0C701477
53E076B73687915D05705F38761ACF0CD788150D82EEA9530D185C5A012B4AF8
FA0D43D8A9974B43A4D5ADA81C5EC47F92F95E3333FA6D05522252E888CC6626
651ED6388A1C711D875943A84DBBC24EFB03821DD89F3FA8506F268809EDFDDC
647A3C41FD38EC91140BED98C953283F17A3CBD6BA59A1AC2BACF1550EA14A66
339B839947E1E27B03814F81700A47C3C770407E4009D7EE630434645AD290F4
7482AB1E4868B8F694F963F539844E412A15C778F71AB3705F8B0DC79FD91465
7497EC9C0DA348063390B5A90713629B06EE0911EC6DABE93581FEE0B3C455B0
D5B1F30EC46FE8971B83AC47247DB315DBE2328B3A70167B928CD4B189F8BBE8
B1D7EF0D0D40D6063A7272A9D341BEC0C11FCE9480BB2C45E770072ED0262364
25D096E84DD009F55A48C44B1F78D399B8A04327DC057B08DB8F80AD718FE0C9
DB969829BE342D42D52C383193734662065DD5653C091F926DF0733659F7942B
D75F3D839477B4EFD118CAAF668C69225BB2957D602180678D9CEE6397F787B0
6C71940B9F5FC95173C09068553725ABA9423F4B268C58072244776C2003B45B
60BB1B6D62DA735DA6689C2C03F196ADCDDEAC4E15F520450DD45CD8A347BBF3
D26BE7AD8EA12149C628286CB4EB6CA0D55AD7C5A20198F18CEEDEDAB8D5BDB6
024070CAD0710EC3BC37660144B50A8E9476ECC74DF72001C1F094DECCDD9F43
AAB88640D0E9347A6392582FD9DE63E6754CB8D0650938D7D1D90A82EEFAF7C3
71E803F077572234B5E42D053482045F9AF9790F60C5B1CEE17957997FFB4B64
B2B3B6619FDC7541557D9B9842D0FAF6CDE696534896406A8A5234A8AC19BFD3
5756BCA07575CE998B37E6594CC0A406B20C54AE6DFDE8040FAECEC86FBE4964
497DF28C3C460D540308A4B177CDADC5B677EF946A2D806D67A95E1E790BEAFC
C3112D4A37D26635220FB98495B2E4CD4729AAF9B80ECC69719C36053E2BD028
7A3C313E1F43F07D3DDDDE40C2AF8D234891C970A04C42CF7216E5DB8CBE124D
00B4AF820C1796EF9322A1BEE0095949F22E99CBD1AC1A0CB1E5DAE3E204F749
EA148A281CEB94B4879CBB09A3BF5B2CBD73731EC605C2C85F79D5C6DD740FA2
EAE0C2119F4FECF209E9D38FA9B51B9C502B708FA3FCB767BEFC65BCB6A37034
64B9F74DBA7B6B88A28E3C976E64C24E8B2D2EBC1B76FFBE7180B2E3DFE45A76
D10B7C0888F4FED85332C973B5D265BB1DE94641169A9986E587936D8C48A7B8
B63745A9CE85E0DAF7A5BC39E277E0B7E31914482C49E2F7588231F2BE202697
4A1D6451FE598D2D1EB5D2AB47819E87F107EA5399188AFEAC444757444D27BC
285034BA7CD57325B5A34CC3F984018DC965364978622B8FFDA711101DCE3F5B
17D645EDBC0B373BF97CDA7C326F04D1CE34CCCF4CFC655DB5818840D39D041B
26E75B19BB8E91D060E6A3F499A8D73E633335336696BA03E8DD236D480D9250
A1EEDEC54A0D75E0C853808E0E47D71CC2A8C80A9ED14A027B59CB9A0F4115D7
DABAD25FF9098D655A8ADAFA9928106AEE7655662B6F1658F14B00E75D64C777
FBCB70707F4F0F088114534F6D36E4D32B78B204E643D52B1C06099A4518FD0B
C54C4AF90192D8BE0E7615BAB550A8E0F36D01E48058D763BFCEB4A74EFC2203
B2803D2029D2403889525888EA18CE93A463CF101A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC5E5A2B357EBAB1A189F424831F6578541FB21A36E4C6ADA8E
420A8C664C6F732F6D1E62401C3DAB3E3D1F7E622607D034F31C23B04EE90FCB
4484AB2053E8DD69A2EAE2C8D21F6538FE84F63B96AFC78001B0EE826F6408B1
129C5CB69A5A2AA3AE147AEBDDBAEC2278DEF6B3A250A8E07F742EB7A8071724
75F15F1AAE6DCADA9751CA51098671FA1975956C403D1DB5BDD2DC150F2066AA
14CB02C1CE8AE0062A6E77F33EB4896D04E61B913B6C4170C46F422FCFC22D86
B42FF91FCE7E06435BB294023285AC70B37931B13D7B0494AEB0115D14E7826F
40A532E525395D3A6E168B7BC85A1F6D3F7CDA424750AF8261D8025859430D9F
CE659D9C0B80D44EBEBD0539801393C0699406E15D1DFB6E3E5386A1D7506898
6D021414BCA312E322D6869CA086DDBE5411008C57FEA9755B9041BD3BF1A83F
13A0A38DCA8F99A217EA2C8E331E185FF9960D5FC71A40D7AED32A610FE04957
15743C9519AD6A1D2A65EB7C738A7D573E2345E735B39F7B0139829838288714
C05640C1DE5509B5BCC20BBBB289486F6C7E238A4BF117A651FDD348DC958934
E5B3A8A74EE58C36E01EF9E32CA1757A9B630AAAD6F1CD463AA8E928FDC81555
3FFC00C6ECC79D637BE3D0D90BCE5FD94A219942A695C71613CCEB7B316717EE
859D7C2DA83F003A14195497AE8D68B947574C1DB2834483C460A5B2429AD49B
D462CCB5FF6E97000B07382B048A26F9C28D387E31A3179718F7DAD029C877E9
7221B1424E32836D6CA28909547F9BD6665ED8B8C46ED1B4A763CC46684C252A
A2E7CD03663D2684F24F3418F9B6CC9AB5C8DFE79E40267EE1B203530346CD9F
59A3E70196ED37E6BE3262D1AFBA823DA8A9383C8F466C09EBB9BCC48F12EACF
8DF7FF7989E4F65843D6E82DCD40E8CD287ABE7FF1C9476D3540344A5CB2D237
AB3A9CE8C36492E99AED33256A1A6F3303F6FAFCDF53C16F183E9E658A4368AE
C49715FEBDC8CF5AD4BE96CE0731E2045B788212270B5786AD55546EA51A92CF
6EDE15204C2A7A3D0551485714586B7E235C103047F825E0B4CB920DE053CA8B
70AB72E6BE676B128D32789F4085E7065FB50E28631D2A286B9862B0C69172A8
78B0721F48AD00693D9EFD2E0110B640E38CB4A7EDCF216AA746E0DB51CED438
8D550AC45A5A7762FE22786AA6DFD0A3F2316A9E5D93ED5B658E65CA3291C6E7
195F03FB130D6EF52F14202317FC40F6C9E49FEBC2B0D197F4C0C82827878BAE
E83AB15AF7823AE436DC4ACE2F1ED5DC6C3D1F7420ACB51B0096666727E6C21E
D7BD158DF34C01AC2D6DFF8A36587311BC70C65EBE1D5BC146679844CDFA3844
078AEB61E010A7298BAF0F4D6E3B6C4C1C9BAF6B99D5EDBE2499BF00ECB6C5C0
F3CB6F2433FEAC481BD1D7AB84C2DDCF5DA974B2068488AE47A9F07D28FB9F79
532CB300479063EDF342183754AE0BA15035218ACB367BB50ACF8FBB2C8A2EDB
17FF267D0F21C35D5534118DA0770C575CB1327FA37DCE1CE70E558D9211E665
A1227809163EAD8B11C97049821975DA03DEDBC241DFBAD4BEA1951EEE0ECF5E
0BE575C26270EB3CAD80EE538E5B64EAC7FEE09C6B193C4E6E66142EF709DD5B
4AC09C3EE1D5137F787D92AE8801D352D3F80509D10F4778172CA75144E70BEA
368A35947E11D1311B45DE5D4C19C1B5A95933E7854EAD8F2C531DC518453ADF
92C5DC58C7EB9F062ABB34EB073598F17484D20A23816F6D22F1C6022BCB476A
CDDDC00930BE769752504D9980BD444A6E5152EBF506F0D50391833BBC2230B8
BEAA3ACE959E95D080DF8A78969FF3C08562DE4012BAEF33DC753055B1490992
CF23F617D40D2309AB16ED7A01EA4CB10768985A4F973A9A4A0FC3386F7AB0E8
775B76CC3B6A1BE4F3D97094ED2C21EC501C3F055320126651F8DFC95454EAB8
9E23E9B06A948F46D6E175C5B6F56199CC1BCF9503065FF859EF5BF011F10BF7
E0E9DB95ECE7123AA5A7E5227FA99FBA99942BD86CE4B46FF5C69BABCA7C9C39
115F01BDFFB5EB6CF214440E4DCFF294E01915ADF62FF5BA8160DABC41DA079D
A4A751DF9A6109796D1CA32A8210680952D8626EC38ED66F5BA40968213B2BC6
E34C64536B4B9BC7B808FC7D29B548CD78AA6A6FCF07F42D7BDAFA02FDA142C5
2EDB1CEFC22E44808A44368AAECB465C0AD128085AE31D620480D82B5151EABE
73599E66E9503BC8C9410138B76CD997DBF24629B486D4388DD8FDC63493D8B9
EF33711947B65B0C07BB7FE129ED8F3971AD80915AD23EC75C7511B956691BA9
E1F3857AABE95055C07755A6FCCD5F7F6FBCEA3E89A36BD5D28C5E9AB0FD8762
0B527100738DD02FB92820F84DC9A92E3365F93DE35FB61FDFA5A4C78E426D6F
68DFE42F76BB3F6AAC7FBF7EF0A2AE13FBDCC2812207A6503EB0043EF3CFA3A7
9D573BB077085030671EA04152296A8AF5EF0454F63A305EE5DDDF11135A13A4
4D4682188CE782C3C1ED4E1C481FF3F7E0CB583C8605FB1DEE02FF87238CF892
773F02B5D41FBDED8FEB58A06037A79C3424E5640BCF39A64DF410E3356C17E8
E7AF67C80855E052CE1A0A894E471951730F598331430372E9EC7FC8D62B62E2
8DDFA3D3B50E94D207123A5B05FCAB7FD90E2A9A4EBDAC99767FB1901DE7CE1A
8A0168690A2244E27C670035B6582F2611484398B81A9F304CCAD7AAC7DF2A8E
DD79C5389DE411FC4B41FA37916D6925540323301C44136C460BDFB2F944CC07
F6E33B9528DDAFCCA9D3BB807F719563365C4228D7404756AFF88FF10A172C60
310C10F72AFDDE79FFCBAA6606E892B2E41A173AA590B6C92E2987594E99E22D
9F51DAEDF5873816653E5215E436CFC90D7F035B2D8E9D8C05B11778948FA949
28834BEE3A0590E5D911AD061A8C29E5E5B61343F51EA4B67E162F8C15706B51
555E8577D0239698FA963D8E4C13C2C8674916F76CC0D133DFA2A68A8D2F4056
A28280387733ED426BA41D128DC642E7DAA9AC41ADC2B0DC8D5E8B5C9AAA078B
507FB9BE894073228575A9E4DEB8CD7FAB42099F9FC82509A49BD69E7E6736A1
BD7072A987295B3F424A74B47CEE9E6B7DC7DF1BA50119F71AB4967291D8F4CC
EBCE7EBCD51C597C1AF6102197A1C8714E87DEE3F0D955F449CFB1A8C60E5623
4CFD61340010CE1C184163D9D02A52945E0960424D64188CFFDE44E5823DA285
C3CE8BE63E3DFF624A3ED426EA82B9B746C9BF7D75231D82A047CC87EF9BED29
CEAD50C3030B6E9C2D912D00754C1266E4A5D20F55666D0C1357B0953D8E9950
803E1A535DF340836605EDAD3970BFDD1E7200FE6F7730D33F293C532CF67DE3
6BD013A05DB41B01540963159E3EFBB70193B5941387A78C1E733A92C8B97FF2
7348B1CDE90D7DC27BB9E0C33618F76E5C0AF797744A09169D3B1D35749C95A1
B189491EAA6BB8999EBFAAF4EC4224F95B8A44ACD2327257F5D1E734F6C9F5BF
F0B949E663B43E93E23AD43932C02CA9125AA09D290C96D22C17CD43FFA94BCE
3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB946F1E15E01BCDB6D4CD8D1F8
188BBAA1A71A96F1A32E60F2AB99E8207FFDABC084BCDFC2A202F15B5E590EEA
E776074BFF0EAD54D62A75A2E230F9A250F75CC78935395FA5A15F4BAA4D77BC
A32DE67243C4871F75B38BD7B095FF898EC6FDCA86CBC4FF03E5A602F79AFDD1
254C6C8268A46889B0D2DAC7CE9E40D84F17B6ACCD874320DA41814E1FF110E5
BA8697379A27707AB74F4D4C6C181D1327E6A1F41BAE3D82F7011607F67B09A8
696D9923304DE61D7F5B5320DB4E6C7F70B76CB486438D247D0B71434CE7027A
94C38151126508246F801EF93C280EDC1E52E227F9DBF801CDAB652D68B83D3C
71ECDA1A379AB87A9763A27BCEDE2FDA6BD303F3CE058A17C29006D84214D747
6C4274E874272EDBDCE9C5F3C5C311C11B6AF1691837E92DD0AB240AD925D9EB
CD4FBD89C6C4FAE526E0E880C30EE66110F35069AC8A7D1DD4ABA481FDF91473
A30FD61E80F89DE7D2905DC9CAFC826D461BC7B78F07B6DD2A8E1EA75B4C1FC3
80628DFCC534B2C953481EF804DCA47AC5247A5B626E1BAA25C288812E52B888
790028CFD863F8BCA50FFAEBE1B502A18A91995826184B47F895BA7E8B1CDF91
9182E894459CE06BBF37291298D417A76DA34CB7FA6F164A966A5ED168A3F09F
ED3ED2A4C9D1B5000C612CD219E8F7ECE0FBB489E650376B2AFAA7986C68F5FA
BE7C94EDB0AA8EEF6C5C1909752C7D4AD209B10DDF82119E5857BE983FAA6763
CD28007FB25E8FF831DE5EC5C319CF04F2D91A969EB0A3A469A78FDC06810D5E
BECB0117C095C336A5B927E9782AD89433C33609C86F7421CAB90597FBF7ECEA
4E13CFDC1A188FE10A825C38F1052EA5FFF098139E2FF0E8703FC99472D930C8
2D1AC0C29497C92E0173AFB8C5A5274120D3A55C07E68E00FF0B211027E7B0ED
4BBD2F28B053260CEA7E53BB9E2A3B2E2B2063C184813EADB652C36B943D73EF
DF4D2B0F60302657F3B8E1D9239E011C17F0515DD554D5B0E914CF62C5A5E094
CA79A6739509233D099CF9F1A92B02236F4920146711B12632DBBA55ABCA3B51
451DD6082ACF7BA27356E759FBE5101921CF4BCAC80CA2E9253C0411FFAE84A6
B3BDB608AECB650041A9F7A394331FF25D54AC92332CDAB1F569176BE201D5FE

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75FB8D5B00DB7BA78FBFC5B95E167C6
CFB9A2275128DDCE62E56BBF35D257EAE99D627535F8E5ACB4A4D3E1E6D9D24F
9CDD9F80028D37C9CB4067A28D41E879AF98739929DDADA413EE35894A6A5B14
CBB136548C4B00E47FA77732DBEA89E10E98CAED50DEC8AB2536A447F7D46D4C
63A99114EFD23133E2FB8243221A2E8AB1CB892DE716CA34CE544502ABC9526D
F48B0762B57F8AAF2E120D5DCD70D140B498BA43863C45D94E6642DD04CBDC31
0087B2FC75CAD18883113AAADF162B023352069DD1BDEF229E16DE8D008A4CCC
BC317B47BE42354627EC77B91564A034FF2F3B60508154B08981B62A2E9974E0
E9A46A3AAC7F87B1FD8620A5A695852F2FF71CD16FA34635B526265F1A635254
75398013F04B49F67164F03610FAAC41229306EA37B9DF6E8DEB1C6C2BDEC9E6
EADDEF6E99BC482289181D89CF74F9995B40E5C55FBC81DC7686AE740022F764
C49FE9B49A108931E3CB077A9C53C764DBB47C789C795E97A537F013BC2BC786
BDA32DCD5A856714ACD5D2BB98B011650B2A5D8B881D6854DA373B002BA279C6
0649618BE2D9B1E10DECA9090F66F089E4D7C6D8087016FCB998B95F194BC9B6
E95BA14850E251A4EFF1C66B148E036AFB7FF007F18AAB4CAA2CEDB34F65F327
D58731A241E11468BBA16BA3494A4E80FF16410385FF17A1444B2D1596343B25
64124D648B1E0955CDCCE027BC9F127F79622FEB3A6781181EAD3F02101364EC
FB540C0B2473F20BF05A8315BBC31178398C4DF5CA482F899FBE7654F08D93E0
29994A566CDDC866CD6A1CF5DA076F94B31AE4EDE8237218A12D5E9DEEB9EB26
7CE99EEF40ED1A5A247FA60A89A2EF6AB95CAE1FB119500650FAD0C18B03564E
B61A0D261812A3EDE5BF402542BD215541E3A478F0933EB129EAE44484E084BD
DE7D2CEEF5E54E2CBE14A20F56A27B70B9C7DCBE9300AA2826EF2D6E38C9EE32
60EAFD1C1B7E9CAE9EE810B4C7934D08C44E8A3EDCADDF8FCD6E289C19A7056D
A716700F391FBA6480099E8276173D443884AC0600329C607B7521B1C1C0F575
F4A979FF04F1B3C17864FBC8B92B77DFD068E53CC9111E290624DC39FB79FEFA
C07D2DA7DEC9642694ACAD9C980FC6F26BBC4B98AA0F9624D8678DDD10596E3F
55CAF2F4419B78FF39B929627428C3A6736D8777332C017A9411BF924DE0E40A
24B0E1B797094DDD8EA17A7A281D007F1F6EE3CB17E0FDB167D05506A96F7296
047E208835176F3154E8757A1C21857556EE412F4434E8062A9F9101ADD125A3
2195B8CB98C9B19235FE35E0DB6F1FBF31ABF448C9261B75BF1EB61260DEF86E
BD69F26D77A20B25BE10094D4C196E26034F2577471EF7CDEFD087BAFFC6C93A
F8FE338E70387B4F1BA2119F24E0AC14D6C89D60DBE2E17850FEEDA72C8A882C
F268AA853D036C7633EF1DA737CF40C5F170EDDCB3B5518E28C971EBFB43D842
99D336736B15B05591122AE51D1486E1F2FA31E9C9379F2B3440AEB83539438B
B83563DD61FA39B66B4DDCE39F3E590823590CD7C75BBE8B58EDC2F2ECB1E684
00C6706D29DF0BCA1B5C649CF209DAFA7619F27D165264869A4D5EC574FFF640
76FD6BE210178957E86D8B7303BF3EBF660879783E563E5FD42AFA2E2C523957
8183B066D5A65BAE4AB038087E40257C1FE6F484941D7387A2F92A69CAD3FFA9
AE559D3043D7128482D9ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A60FC
7025B92E55DD5D5897F13EDBB3356F9E2B9DE1FE09288B3217E226202117CFBE
3DE2C6DBFB0BB25BB13A128CECEF9D4D51001EF6E00C9CBA158724AC4352EBBD
4085CC2897C588A09FDB14647F570BBEE55DC7F2AED102A1134FD48A8C8480D9
137F359E6287C5369650A06422FB0B3B29ACF32F3DDCB4DF8B5AC385B0E99329
08C1050CB6DB39BB10C1F4D149305E6D442E7D8B58020A01C8A417B670A41F2E
B01A30F2AE8C73D83360E849EC83AABD17E084BFD0A3606D42EFBDAD44BB98A7
440207EC9597D409FBD1E6B2429DCC30846293BF3060E9CAE54A81D21AAF3BFA
BAFE773F095BA4D5A0F9607E25DC3137296CE1D8E2B8FB0DF6B5FB6D5C415495
635BDFF798B08041C566CF1D783EC7B15B4330A37FC9C1BF23CE45EF19471FC7
2472E528053EC041E396333C90480C82F2B80E740D5ACBCB0882F35AE8A3E3B1
FE3903A941EA20902C10B0C3E73DF25106052700653849C02805E1C56026FA71
302E87A45A22ED99B04853D66E5A22B56F79FEF73918B7CBCC65CA7DB3E410DB
1AB7AAF9B483A4DB3B333B158517971542915D70737B3F22C6A831A9821624AD
61DC8A0DE77A1F4BA087E7E54F4602592AEB49D4AEA40B81B7B653D90E146B6A
AA318E165C8353C9CC1F0927D73E21ECE52D9C3EA6DE3CE70352D2ABEC8E3DD4
CCF226A6829DF67E37A242C5E0FDF6AFCEBB0621A8ADE7553CCA3725FB707ED9
526ED054C471B82AA52B6C090D4C6C776B5610954A6E5471F8D8344C07DB8E45
BE34098668A5FB9DB4D49F3FC041809ACDA455C62A76B51D730D8B124BC6B76D
049B17736CD9E28DA73506142B6AA54FDFAC9050332212CD062A6B96FB18552E
DB51B991870A6E579DC68B52DF7F950CE1BDB15548CAD879752198F3A2141F1B
77DCD2B7DC83E662C19DDE6A5207ACEA1E0C78CBAA7A47C5F3D0C745262B88DD
F05E7E3C1682E8E90674B781EF298DBA6CB1758D22EE8A7680B01DAC100D3748
CA1BC047117E5E9AFBA7839CAE44964C974F08DB4C947F074F5B3644BB3F93D7
F96770C73499AC0AFC3E20F0BBDFA01502C9A1C30E9DF357529D99BD156464C5
D64ED5C7BE1C1DB9852E09F62BB22A3A51BEC8BB98DE63D6763E8225E9ACAEE7
9D813C62B96A7CD2247A269F53AC59E3E886BC531628CD9FDA87188135B3D6CE
0F2CC637A8F2EEEA4C05990EB23142620576551DC347BCB2302D5D5FCBBB04D7
7DC4955E84168F9AC6EA2E25C8C38B8A36B337C6925E0CB5BD963CB791E28CB5
4B37655D9DC3BCF1F660E8262CD10AA45C67562303483314B5B71B07C7F8C598
D226227FA8C178C10D90A2F26A639CF016B843ACE6B352A0B859AAEB15A52403
FBD562D284EFBCAF3553CC5A757FA50D53E6AF18AF09A1B9C4792EEAB445547F
698E0DC00CC722B65CBD277C5DF3B4B1275090B71A4D4B3B7961171D67F8F6B2
6EBA8AB37B5C35DB16D8B776255132DE99F3F4B7530A72C49503FC4D5C84291E
0740415B51E89FC1E4887D1912C7FFB218D23A08172BC11116C8028E77D0FE5A
DDEF0931C9EFBA2B76B78F6A90C0E44F8236F55938C3CE5A9EEAA8379EE7D879
D13C3E2D204512584029A7E941946AB7D45710ED4396C6C9816137832A56C48F
C89066B9FF63B80A84B36F75AD6D455B580A4BBE440839A54B385C9E4571C466
AF1C084F04AF31AB83EAEDA618C70F735DF746994341A37D17E8AE636315CE9D
47B1A020296D23FD0A59D6AD28E34849187D767EDE855B520ADFA07DACBEC45B
BF0C25F00DD94C798C8CF098F26C8AF48B458803BB26487C1391BD9A5B51F33D
505FE3ED168109F1F39AC5C3357E48CB38906275AAE8D8CBE9ACD7740ECA4A47
A985E2E16051FA4178F6557DFC8FEF287CB787EFF59E86B4A72A199F16F2C24D
D5A6AD833A4BA6F96FE67FE603F3DE0BC536C9A2A04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F44E679E8518074632F6BB0639E2AA1DBBF34708FDB8092FE9
343274DA68CD751A72052D4FD983EB8C149E081333B2F0E0A54134F91D7B4ACA
E954658CFEB3FF04F3F9F42C57124BF3FC0BA485E050DF883E4B2767E236BE21
9FEC94EF94D9F2096E76F1C558F40812444C6F0F4DA995C8C03162375AEF5BBD
6BC3B250625E4B5C2B2BF9879F853460339AEFAF4FCC58EA396431BD4F95BD5F
6DA31DDC13D860842BAEC5EB5C217FC685C06C5AE447C991137584534EFDDE0F
7BBB3FAEB89D737F9FDD69B4EDADB476A1E588A8C8499A8917CAB23F00BC124F
D93096D1B365B754E3D03ABC8B3DA3F4F6C2DB54682F72DFB7E665EF36DBD3B8
9455CA9BFE2FE8ED26203A2B353C3C9C7AFCAA09793C8A74DA25396CBC1484DB
565607911498AE56FF61F2AAB48F1B954211AF0A38D6CAB3BCD6697C7E56C29D
62A325714D3FE8C3DC019CC01E8738CCA2596AB05857E4B8F9D6695EF332BD3B
AA9EE551A4B142DDC13600318F45CBE1BB1A6E0CCF1CD79182D3B235B457CA9F
B713822F634A96C5D1923710DB4B98B063FA07A5FFE26234C70FF6EF6CA2A853
FE0F76AB1ED5B97A1060D13911F4AC44FA5358837F7CC6ED863F0FCCE5F79065
D7AF0839F444CFE8AC2F2FF46DB2B95247BD8261F39BA12AD5E50433EF517BD0
FD04C73FBF1058A8907ED43B4C144BDAA3C4E6BE9637FC8BD3E94D6257BE1B7B
FB179A4479EBA92EF2EE4E7B73DD295274E1D416F7AD7338FB3116A3CFEB9E33
8EF0D7B0FA721D7D11990750232AB90B60DEF84924B838AE79C6689275697225
1698C73A825EAF77F8C38CA8468E616771E6C9093D7E3479B0DF3F3160EA2059
B5F7BFD55E90340B4244BADD57DA5902E2C08D00E814009234E2A36EFBD854F8
68BC9301D33D0203F8D1F59EBCE526B06B610DB1B028D29F838A52AEC3BAA982
56BFC6A306ACDD86AEFA6F4F2AFCE55BF27AFC96D93AE476AB15324149043E71
3261671835DDF163EA8D3DA7CB1F0514DEECC225301813E4ECE6D689B0A04229
04F28E6DD3CAF0134F9E19DF8F5ABD86CB0F8CDD3A059F2F3421FF99BCAC2D54
03D67B0DD5ADFC6174D559534155A42F6626A6E7CFC849FBFFBB17679ABA8C34
B1296EAACD7DA7010ADED0D6A83F04F396CE83F0549B1168EB7DA7468011420D
BE034D5AB67817DA21F12130B85DF957C636987F2ED81971E9FC729AFC1E778A
3C062A85C2282BC39C571BD45057FD09085730695ADEFF892B4307BB163A248F
9A2052CB8980119F3F2EFECCCF2C04B55F44FC0D155C1E04055D6F81AE5E20A9
E98ADD7649142C6CC2FCBD09F82ECF0716F5378A8C51C139D72816DA8B61E413
EDA36A71E7B6110CAFAC612E3E67F979E774BA9C7A580D605929D6D790A34084
7DD751CF51F14D89B269A940060FB0B603D3A2A6839C1C36A3CB55707A0663E4
D7346CE1DD000B51AB4A815FECF291D3E8F573EEBB83E6F9DECA82BEB3F58558
67B2B884E4A9A334BC95558E4C1A9D0B93E9A8C0D83CB8354B69357920BEE4A0
4E464B774D6CB4588DE10B3DAF9F7E546F6AFE62D85E8D25FC1A0039346F9156
82672DE85AE82551277388BDC62DE6FD1A3DB14805DB66731CE5CE34765A6E35
825C99CB7AFE5A873340B50AEE34371B1D7C90AFB517178C9DFE59CE8B036E3B
067B364E0F77D36DC299ABF128FE2511732602A5885A6CD283AD3C1C87F360F7
BFF771183B302FF55667390AF2E314BC8E0EF10504B5612395461652E3B2D6B3
BCCE3F5D699B3E2227DEF786D7BBDAA2A35EB13FD17790793B2B4A9E06AFC15B
8B1E7C3534BF816D19A02789F1E1BE623EDD5DAF54733EB1AD965E8A5A3ECEEB
F44790D57FFB857764A8EC459BFF61D9A893DA0177CAB77BB183F54581052B66
D6CB569F8C51F03E409DCE0717779DEA582740E49F088BEAD6E482EB87350926
910860A95DE4100D2A9BA91424DAD1802F2EC862FB85A143D7B299223ED85252
02C31B687F2C19136157C6D83B33313266F1BA8B9E065A0E64509902D75FF0EB
AF919567B7A1CDA5E14FEDA66F60059ACA0ECA3D597FBAD8C7EC31F3C1C46E5A
E79F74B3589EA1C34BC2A4827253F72CEBA7495FFD2989718F2A54E5D0EA1719
ACDE43012A2AAA1F71550220B035B6AE978341404C817414D0579308612AD113
219204CA43994CAA4671A6A97BD8C6807C21360D0C3F7742F47CBC2D74EF214C
0B15C50A9B5A26205F096D63762A9B14F267CE0337485EF58E37EEF30EAB487B
6E7AB230EBC988C382F594B4D4D4B92E6AEC4A9F07841FF93433615B89BA1272
6F5B01CD5715C6432452ECEC048DCD14814E47DC1226F723CE25814E30876470
F16C5E8F87F74CFB89CA99219C25478E0A63F78F3460EDD4F64B4D2A5B3E660A
B83C0CD1BB032CF0DDA97FD7C35218928C48545178CCAA9646C6C89D2FB89665
3CB3AF6C9466BF2240E2A71EBEA84FE2BA8B2BAD7C2F670BD9087F7531490409
D02F3D87BE05852F9C004219582D45949B8C3A7907A725B1DBB3F1A92E0A0456
D103AD819382A9EB1E201AD6F522AF0386A30A2693B607A67E0AEAA7E969E420
86DC576CE06532479E48E7E905FB5E8F9FC3DC5F258FE3C18E7464AFBB0B0757
2E4E438A2F1A4E37E0909724BDD52F4D4B98C4AD8E1A1528BD444DD1B0EFDA76
FCA43DA6DFF11E72D5BAA35CCDDAB44EBBC0C71C3FD43F21DBC6904AEE4B01DF
4F1005122C3B92BB93F4E9CA79A797C3A4F27AA9924D6616FC860CCAA3402216
64068B6E7C7CF2E2432A65BA21DBEB0A83FC660BEB3F1A3357D218276A5D0FA4
EADB3616CBBE98428D5D811FF6FE99AD7ADAD0922C1BEAAAD9B337968A02FCA0
1148C302E8E3AAD1DD61DADD7A1FD82F0C2E744CC3B65AAC7C04E9646515EB8F
EF55DBF964A5C2AA9623B8674C8259A681E27E2C4AE26093689327A256571CE9
457E795AB6B63D78163F227F1385113B9D2A2F0C56DB55B7317231C2B2F371B1
559D8BEB245FFAA7955250F08E8F5B149E8F97D25635B98E9B51FE570826C75E
64296714597A74010F59376FB1AEB72D08E929E1630A7750DE134C6BC13E5AAF
A36ED9F7A8E5D9BECFBE4384E04B0D6FECCB0244DB29A8B801321969CD052FD6
1493FDA211564478C68C592E158DACD4D9005B983760C79C08C12658303A3F51
1EBE5F047EE68288BF3DE1225D981C287FA9BE1B690BA0F8059823BD2AB80BC9
DC78BD724DEDA7987A6DD44876D3FD2B0A21E719D5677DB0E64C7650DF6FDDAF
6038DA9D24DC1978AFD87934AF5BFEAC00EDE5DBDE3D585DB595D29361F8253C
26C37E09B4F87056EDD8C90917EEEB978E51957475B5717AC1BB4AEDD87AD40D
D35C3449819CCC9366AFE79A48A3BCA95DB66E5D14FE0A8C3FFFD51B5492DB49
BF8810AF0BDC54BB1D08740818CF45A63A694C8F8DC44FBA5607435A619684F5
02CF60F00AB8418D0C93AC7EAA9DF793A62FC3E0C50F55A84F67D932B8062860
39E75042D590F24D8FE9F50D35EC6FF30384385CF7C56DB4A483D83D7CDB2BA2
48A366D5E0651560A4BA2299074E853FEFDCE9480F0E55E126E1DE7E700FC3D2
2EC26F9B2761469B0EDEE8BA22F029985C6F5C6E52567706CB28468A9A6AD9F9
B873F1845718FCF81B2A15BF986954219C2577014CE55CEE9E4D5B2FC43C7447
A9605D5D86CC06E8029D4F57A392D2738F846305E8F3AE5B5E2BBC2F802F00B3
A75DE53FEBE1B7B9272A951A047119B40830A39909494E86AEE21694223DF5E4
A7198F31E2B8282BED7392C7BE2B61691EA52F310E0367BD918A9DB9077118A0
42EB52EB7800276E7502D8CB8A68A46889B0D2DAC7CE9E40D84F17B6ACCD8743
2BF87A6B87D3297452BA7EA1CA9EACEC454312EC1DCE09A40896B78BD1D5A73E
157AECB9F3F59C0D736946734C6DF70888665716037A35F574BB08A82641F363
6C82E2BB16E686C92C60EA329075C30D3F97A3214A478933678E9C5B2267C747
BAFD5934D95FBD2640BFF7E94C4C260BFD0FFF9D966F224AA72C22207BCA2267
52B21D21999E31A3DA1E51A3282038BBA7F7FC70987A57EC73E5A6B9508B48DD
49577EF2E015E8D9C0F64025C76E0550BC5D75F5C40F7C7768A67B861D5FC288
7F1635AACF2782022D039A8D49085ACB83B160C466909F562BD4C26A26BEE741
ECC847467858898AD528633F477B739EAAF07A516D86CC678FF6D5A199877F04
81B1BFA806A353E3270334E0880843F700FC1F6065FA37F248AE52A1FBA985A3
1F28AC72D636AE969256DC91944150153C99FBFF35539B5E3CEE76DF3204AEC1
961F654E12385D1EC21D1831C177FAC71FD55A5490C89142F2844CB7E6352B01
A07303DE29B299AF582319835E23408E414CE2299CD46784E6A7AE912C213D0F
380112FEBD737CFF6C1483C4520BA4A4B904A4031C519E155A116C14F576AEF6
6E86BF55B83AB07C8875DE7D96261C02AF3B27E36352F8DC981EF838587C80FD
855F1733F50F636A4C7426584812DA63B5F0B1E400E9F96CC34E7E2C3CCF88A5
17FE6F9C5FB51F8737E0EC21F7CD596D42A88458B89786C2F6D96AD2D415402B
06C2CBB2CB91B45D00DF27E5A47692A30A7D13527A7F3FDF0C07D30FB6436D58
753F6AE969F7207578FA40B7457C36BF9A0846A0C5007E8D72ACF2D32F854BE1
642416405BCCE8D41818D663AFDC9CD1C81B91D658B398D4C89F58C854451014
68001F40721E8DADDCBFCD8BC92D0D26A7DEDA6FE09F7DC39F9F2DE66A66190C
689A73A26C5E0137C208DCF1A7143359F8EE27AB1F3639B4C997B3FE3D863BD1
FE2D56BD513E5BE907EDBB61A117B7F1BDB61AE87F1906CFADE3EFCF095AA187
EE498BC5455C976C40C6E24D239FCFE9CAA763CD150D404C418B12590B6EEA0E
1A19CD139622317F5DFD2EFBD95A7589BAAD70364C33665F90E24D35581DA77D
776D1EEB96F837A3A2F5C501AF422A313B47DCEC7A019705E05AC514331F7A91
B4F74898E2FAD14576F81B1D688DD8F61B1E4450C0C994D2FA8F4EA0B31BC626
75775A139B54949665078867B4A024FC24B16AB6474F370F7F61C7A430AB2303
FC215B5B353C8B1D386CED0321AA1103F5F4CC57F15121A5265A4B316901E61D
0B6A13CBC0EB3B038B56DEB99AC4C60BB469AC2C2CDC1E415746055916E409D0
85688DEBC02A6E020EF5101E41C289C854F7452F28FFBCEDB0E2DEF7ACE89539
7DFAF366B982B1E79ADC6523109832853C664B53C4ECDF81B0004DBE82B86F5B
A36A3B2DE83040B16BFFBBEB73850E2199B8D101C85CBAF179EC5881CEBF7EBC
3B30AC8AEB18B09AC7183771066ECCF26590A7894CA6F91AC2CF4A1420693935
9518C6B25D2C97192E8E1F0AE8D3882052CD47181C522E1F417F28A12064034A
7290750EBC897F11987CE12AC4C09643CB0B9D921B4A6980F6B22FE3C7B7CF63
57CCAE079ED34837B5A08E55E6319BE14383542B9F6500CD29B4760D5B4C77D2
5AE31C4A75BD8C7EB02722DA8D894241446F05FD5DB3815F144E1EFB2D400AD0
25F1AD7295D531787D2C5D4E00A09F155BFDF971B5A4D0AC102C2CE8A28E1A82
794BABD4D8814B53865E03C0C0D6DE7B16FE54A2CD42AEA5FAB6694A64B334CB
750BB6A4D0230ADC13EBBF5AC7571B0778C0E9D25358DA06B20DDF35F409AF15
997127DFFA9ABFF8C858A51C83CCCC572024A6243D6BC209B8D579F6A057A27A
EF243C4B389CCF9382BA5143D6359D3BA2ED407299B5C9E361C08AA256350ECD
82F3B38BD30286E0A8B3E42F7CBEC366E60C18416B956C6377E02A43FDBC78E4
627ED79B16862D939F3A3000659AC050E7001000B2C6848457D632AF0F1DCFFB
6E5F5F586F3A72BC1E72A5F984E7235607EC39E49ECCE85A8E75B8B18D8D9B9D
2227C7649133EC6A81002AE7A4E697857358F58A400549BAA570F95B97AE0BC5
7BB244A80105AEAF034D50D17F2A2913B639720FF4675597704DB7721A0FB87B
BE7530ED3C037A517E7F4D92C7AB7A2B373039EBD068D131C7F302A2F9FB65EC
CCAD4616927004178B7B2CE55A8F36653841CD79FD3514557D69140D6E7E9813
2DE2FD992965837E604A8B2C51E4FA23D38F0387351BEFEAE26D641D49B7A349
0F09BF16B8D179FC176D0735CAD73632F8EE970DC0EBA43D2C700A1D58F29F7E
F1487F54EB23A1CE0AB8CB768EDF04DBF511A3BEB1869F9D5F0086E13F8C3349
8D55FB08ED70950200C50B7E71F8C21BA46E833E6C0DCF6556C1CC6A1C88ED2C
49C1700E8AC2E1EE384B0F6907DA0232BF5153AD600D17DE2777D5CC84335A77
6EC13A25F0B85F0EA2FB526C4A6975188599D789CE1B95719560247100F68FEC
756F7AA110B22AE36B9518755C2FAC2135E89AF71192E8CC3776F553A88FD966
801A249712B98F8F6684D7361A1286AF3E4083CC9E64F40A500F045A27CDFAEF
A66D28B966E7D491B5803E4E32D24FDE0B7C56732957AC35E7CEA2C1AA00C6C7
57576EA0E4C8F0F14614231A275836A622235EADEE4F56A388398B1E3B8EF7D9
F110CEE189C26CAAF7990882F149552ACBF1101C0CC34540AFE14778BB219B59
B3BB99066BCDDBD6A90DADFDC11833C934EC4E446C77F005D897D944251600E7
A6B304DD76E088EF97077EDE26FD1456F4EA599CF4C4B22F65104F6D0D96CEB9
463A89A504AB57C377BB062C02225DCA03E6485C035C6247166107D6C1A4FAF9
AE46BCF6A6475B4197423EF9DE9959CC5CDE05CA9B914F8749608248E964F913
5155384A2C0EF7347C378B111AD792A90E38E1552BA4D6E36C5AD7B56F4A5D0C
F8FE219670A817942121C56A6E64555EBD682B2A587F38458944A0E355F989A6
D77EA1E24367EB14A7D28DAC9A22E2DF55C42D244D9DB91ADAB25927B9001E6A
DAAB86BA6B2B4E28F3C65566E2DF0AB84140F348449C01E851C4736321D6DFCE
20133ADC7C1C76B14667721A220ED3DAAF96F20E29D2F08BB07743827690BF7B
6E45B4F8674A6FA270F14B4944F276428753AFF93D541651CD027D5B23BE4FC8
6005E73CF2508994E2244B800EA15AF8C16B9B8329E91644DB1EACF0C0C781C4
F4C411F79B1D23A87ADA31D3A48C7190B618659D7D0B64A40FC4773482AF8C73
85F80E163B9463C38F611AF4987F7203DDCE93170428CB54EFDA16BCA724284A
ECC3A2904C546D6F2ED297BD3D3A359F69CD6D9D92F5265392E03264AE22D81E
75A04AE68344A9F152859C697E93BC968A3F78C8604FB03A0AF394E19A0E50D8
A50838734E691BC16C50353B2441985488F0E70612603E3F0722046046DC94B5
017D456E865FB2E416C4E91494CB6FB74220158EBAAD27211EB43A348E7E1F83
87334F443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA068799547812B285C06
A7820642245A91B895E018395581C536C3CA5680F622117252D1D72A6D9D057A
413F73C7FEA1993B5020F8574CE0C8B6FCE43E382AA3BBE0CAF9620ED0ECBE98
14BD19184B2C0F3B04B2D3ADE2358EEB27274D7B30DD69E1B2C3CA70F2F79FA2
9543F526BE2A04C6309DD3E47CF1FA44EFBAA756B02E839A6105021CA9B728D2
7C8018BECD829ACB6C3D9129E976A2427E1611066E0025917D1BDB7E9E37AD93
5833B94133FD5C6E5F76EBABE1C94999A54BC260661FD4DCE55956FA246836DD
DB17F52681C14DE689A8C6F2576DB779DA5064C8743100C8DA1A4DF6C8B7B019
CC31279CD27DDA52E1DA4CB052C16E049D2E6645239263D0B6E6419174661478
75F99B35930AAA74A477AFE29B1DAD0E6BD33735C477FB9BBFF2EB908D91B245
11AC525E15EA2EB389640906449D7A0A2979BBD6460F393365098CA717F915EC
27ACD59D2F35DDD0320956D2148DC7C2D7EFE859F41ED2661FFEFE5493FBEA5F
B1D26743416B6D20BA817AB49C66552CF7FEF8C99C29BD310590E1B613AAB89F
20B39C67B801932612BE59E8C4EA4B47A39D9D73EA96FEF2811F36BB337D4E9D
38D33E46E3F79F2BC92D811CC6DAB392EA379D23BED8DCA6132D76C53B78A28B
C434AF4C963E047E7CA794F2C7E845FC08034E600A9A20EDAEE67F65EBA7C2C6
1AFE1C7FD58404CCF6E173D56F8D3D3CCEC06A27BB12FF9B399DB1AF4BA9A570
5502F55E4CCF7160C54F7BC202236296A9052306639F4672E90E3B9DDE5FB364
F7BD728B86D3BBE1E37BC2104E79747402361416DDB4C1AD10889CB7851699BF
FD28D02FF638853114464CF170F3EAFC1572D2E56F2F0F692831903D20979257
C35CA8E92DCD33C7DD73FBAFAD2A3EC3AD445193BEC19A3ADD031C747FA67225
34BA34991AF3F1BF309ADE33C2780E971D3952648BE3ACB42BEC6D5B5DA0CAF1
9B5792A3F832853CB465BB8B66C50948800458912B40D3D1C93BFF447255A99C
CE4EC0E8B418284452650AC9F595D065353A0D84229C2226465DBD27291A7AAD
14E946490AEED2FF28FF48234265B4759B50D24BD711DAC55620DCFDC63493D8
B9EF33711947B65B0C07BB7FE129E074482B62CA26EA8970DCA4F35C139CBABD
4FFCF1E22865F11E640D484E5F57C00B1336A8F61DE8919B9F5A5D3533D903B8
948753E873822FF2E1C8DE9834854FF2955EDC15456438FED1B333FC882FEA17
CE5ECA50FE1EA7907A9A79564DBFFF9566BEA8DFAD1CD13FE4F4BD5FE272043A
59FBC65D5C5FFA73F59AE22BC7A9DE94C8D7D03ADE5D6DC0252CA2E3EFEDE150
916661FEF85C14B05424C0C51BC3E784E53A157C5192135A7055198A66789574
CA9DE18D9CD69BDDB4707F7B2C827516C1A6B49353FB7457EE57EF5908241374
2A4CD1BB78156D5809A689085E5EABA02F60389E94F86AAAF2B7E9E315B157F8
BE66C4AE3F0F649948253EC51D98A20B1C4150AECE1B644EF4F9B15154D3FF75
4428AE15D0D7F8837386F411D0FB2C1CEA22C286B7F058E8F48EBFC36AAD3511
F899A93419E74B4EEADDE0FE0B5D86C9538B9E3260EB814969E2E48645E1F5AC
047A8204F464CF29A60BA4DEAE3FFB984843DAA8E9420BDA882054B68A169C3E
54FF994669E0E0A4CD33F1B71EA3C7C787E612AFFBFDBB75E53941B46165FF34
0CEC0051A4EEF6A495823192E78065FD6060A0F7D8ECB4EBAE515878A31F197F
D069F443133F6271A817B670A41F2EB01A30F2AE8C73D83360E849EC87FE9711
CE71D9034EE8704CED9534746FB31E330BE53B043CBB36B38CE86196A8838829
AA72E7DAB35155314A35C56475A9CC8CC6267A6C8B55512546ACE6437740E677
EE22A40C38BB1F69F691122BFE48E6FE4003BED0D4270A59532C46091584E9CF
7759EF3E2FBBC0EE740CD2622E599A513A5A5F8F39BBA8D08AEB6465A1FB1258
980913106DE9470F037FDD15E6113A181DCB5104577F6303D8AFFF0D1623C49F
3A52C4EDA18B7B6BE5C494D3BE6EED741DC2B9D578DAF502D940AEA08876BE07
1C01DBADD0EBFBC4FF52507C34739FC6E798467FB71DAC5EFFE0D7BBC8114201
E03961015596BFDCD08FBB40B1153AB6626767FF1A48838221A3FAB6E8027A10
873C04482CAC5129F1D102860A54D8E656ECEA88768396EFEC282DC3DA70208D
6884BBFA2D4ADA174645BF47E448B703ADBAAB9F0DF2A0805C9B140D8CEB4474
0442AC4891051195B0B6624F3DB00520FF4657F7D127A24EB69B4ADCA04C25DD
A90364C4462F8DF7B588398EA6C9D82EC5A2888F03FD399BAAA3890E4F95DAA8
3D88BC9BF79C0F2F5A0752A8DC4E816B78B9EE734118C991282B1240D3E46337
C1FB2DB53C79D16B085D8400FFC9324014BE2A1D5CF3A0CC22E480CD066D1019
6C05A0EFD97EE57F50C5A59D1EC020C2C04DFC9F36C8253C4346DBC11A9D851D
A3A8E0D478DFDC64095D442198D9D530581F1C40D357CB03A7FBC28AB07B83B1
800E41C9104A62A074B44B977A4E4A9974A30FD61E80F89DE77282D37856765A
2E3980461481535061B2CC994D41EF6AC07B567DA70D25CD23C25C7D0B103312
B17D16087D670D7F854D5740F601C12493300841AF0F3A67E1E6093BE6DCB400
BDF8C5B29940B3CD12C56C7856D4B0ECD4E415CC9290C79FE24F1ED92BA45398
9EB7CE1FEC9D31E66BB00C09B952A829C5F56AE313967A0B57292667588D0A60
A045AE5775EFA566735F30BF915A60F7C027C153000E975E7513D0156C73F7F1
6C034A24BA4FA16E84B73917E43FF456B5C435C17071907E4739469EFE5675C0
FE6A19FEC026975039D81B532DE5BF0DA704808D7B0878A09BF1DCA721854AB3
AD69C48B50DDF960297D39DF2B708BEF605075EE12D775483CE4272074EBD88C
9DCBDD1E51AC1353F7C1C7A428B07047B80849C0A77BEDA560ECAE3FCD7FF41B
A151F41490796CF35B02E38BFB36CBF2E6D0D7304344C50598DEDE4D3B78F8F3
1A5A92ADECF6E7F3706A4B080C17A5BD89D50D48DAEEF9CBD343B8D23017AF0E
768DEB79F37D84B51D8C3E4B86EFCFF1C0E19F4369AD260BA77F5715A910D79D
C805755E7349D3325CD8FEC4EF92A2D38BE6AD3BF8B879A425CED34F30D932AF
DC2EC726D2DCF41EAAB2F0BAC298957E4172F101A12BC5F2734A2A5384D629C4
9699BE537834825AE7B8A44677488AADC422EC3E8050A97238F88827E75E2F51
339FAD5776CBFCAD859A2F4556AA437BAD036E1931583807EE0A93E84ADB1F8E
9A5F8178D528E7E6BA5DEF6EF5B452A9C57BE4F5BCD80AFC1D747E8A46ED6B31
8E71813F2C217744E987B45DD2384D9223EEFED42EF90D1C0E0A124711CAE6F1
82330FEF033234F6BD0B4AED7624A3A6043E519AD2ECDF2EE4D976BA9A90F152
D68E756C29A24A789A87AD5C58ABB0F94ABDD9C681FE691EF3090EA8853E8A16
02EBA8D23DEBD7FC535C46F77718A6955F9C81401F7217C8071D319558F8B12E
C74AD23D8D3D60FB98D39D0817B607A1FE2265A1FF6BB0F2511C6947BCA4D4E4
C32BF41ED5AB8509D015C37A6F48916CA33E376CBF428BDA96EF1354B62C9927
502590AC4935026215EC675BF3F3132933877B819434E200FFF0DD0E06040215
08FD510804CFA426D5808F63FA1F4464E1DB4923E44B129933E3FE54680F784F
42F625DFE333507C3CF7B820037A908AB9B06BA8BFE3B7659B13AEA47ADA41BB
A4474B7611AA885146779C1C30A634A48F72899426CF9EC7C334FDFB7C979505
52E683E39F8464076AD8A441BFF7B95FF8DB779F5C69A6EC77FD3EEFDC15E662
E4E766AE5F6AD0EDDE655B5E79997CFDEBAC31E26DAB725237AAF4879364060D
FA6C617365E9F141CC3CD485C3858F2EFEB078DDDBD3AECAD5B9383AB4333598
62DCB30BA53A413B5E9943A3E5F157A6E1D45DF424BE6DCFEBD915BEE2AE4770
EBE59975E66A9995FA5B117AE91425C30A0B85C98BEFD525AB5C1D66866465AD
9DFD2D25D7026D8483CADDD894DED3B55882890C62B75E5C6F1B83D4EC3D7789
525377AA53331DCFD0D2F96F251DEE4F0568ADD23CDC8631D139577FDBEF9681
38D2ED1E658A4864D672B5B698A36D26147D9C5BE7F10A47D95FD1156E71F27F
061B2D5701421C8BEA9941E06B32D9D199924E40CF66BB4C006E141302BBCAE7
65F2778C34894E187B72399A6E816F7DDFA1EC3DEC0FDA50ADF09D8FCC00FFBC
F7EAC2D6E2FAF9287268BF1C0FB911F7C941789145A5FC51887E252E8CA46334
0490CA6634BFA6F5B7440193E6B9AFFA3E9950914CB0781D5442DC61E235A209
A3839BB788B1188AA5757A22154C03831CFC91F03AB3F7E02D99809C71C946EB
77ED556CD01675A5D45FC8BAF576CAF35123A7ACDC2F480480B6E53E3B08E110
CFCECCED384662B1CEBCE890D038C519BBC0C2707BEB48FC21BB7E3AB8469630
4079D28D41F52248D706E117DE4CF66C67859F13BE58CC190AE494135DA16F1B
90356C49737097C94BDEB5DD87563AEA655AECECCCFAEE257464E01D77EBAACA
85FB49F5589A34F8599566F61D53D7823C6BB458F2E1ECB61B6A2C9887A5D054
1AC711EC68B03874B816F8896C4BB18C575AADC6F58867633981828AF16FBA84
717637F4F62A76A595F3530B95CDACC4AEC65502486F2DD64D12C7D9BB51DE06
150C7C7A825D08B9A899CB9C4E4BD0B8F9C6B3C6FB075F188A9FF4DACA0C3233
68909178D9A544430CFF9BCFB9246472A47BDB51D3F19D511E2F429E8CEC0122
CABCCDFE781195A1B1A120A62C133DE3866CB703A5B760715238B61A4A3DA509
A09DB7E0E7EB32C428F531FF5E355D691E098D1FB67AEFFF63F4C53E435F8619
E256E1F3191DCA7DDED14C03F5419FB1498EBB9CA680A624C20CE95AA5B5D4FA
8B062C9EEE81FC98ADD44640348F5C7C91A449496A33F2A8E88F26AF2C70DDAF
438047D9DA1E8AF5F4C16E56A0353919F8E90B351B015320794A89E84C34F32B
465E2017EF50D681604A5C1836D42AE44E136202623EFF3B3876C5ACC0D752C1
B0F86BDE60D7C04D7C218132B4D3680276FA7996DB1B6A97E165EADC6CE23BD6
CB9700745AF6C6C4959B419528B283E03EA02F39AFF37556536D462BA88D3889
4C69341DD02AA491637E24F116AA297732D500DA0A6D3A73572D79A8CBE198C9
F63FFD1470AEB4708158A9CA2E2B7D736DB0F32541B8D32B5C20AEBCF90448DC
7E4A3C59ED5565F2096BC24D7F12FC905E2D6DC7F58B627F19006CC52D9E451D
C21450FD3DBB18715AF4C13DB605D70D4F243943EDBC2199FC48F27F9AA276C8
51FA2D948C0424762597BA429ADD5A422D7570CAC22BF7B69C0B81390C67B61C
835FBA29F185C0181148D2DEB9A05796201DD36642B5A8BA107BAEA2B7086DC2
E484876D77AB3C26FB93A62D5DFEA07A0C80C0A828A47BB14A01BDAA236D4BB6
CCE198C17646D4023E62507492813EF0F4CEFE3B4245E981074B8637A89EE47E
AF9B93FD70BF866CE2EB3DD88426FB22EA87B5F38C119934FFA994A42AC59FFF
274B4E1CA95D4E35208026AB554031E8838BBAE715381BF247D955C5D6C8C269
359114E9D718E545D6386240D95D5216E6AF65B62E820DA2AF55D8F8EEA6A566
ECEB61CF2BF6035B98EA90F559625C437D4B64D72CD92F6E1087A57378BC5CB9
E34C0EA2AE82D3DEB97505CDD011119EA28A3A8F58803E3D52DB586338B7B554
A936A7F9A2098050930339C0DB023D08E568308F544B13475DB2A5F3876C929B
0A05304A6430A70EC98B71C80117C0EA512125DC02C19B85C24B38B1B40D53EB
C3E88F873407D8ECC2D0DB427E8E9D7FCC7FE4A040223EB22229B014C1532DE7
B7795242AB54725732E2B44AC0344A2A44CA18B10CDD9DED32A96DF332C5E427
0C9BBB86360D69D0102F4ACA897F0502C545F92404F6B14877477E87C6A6C346
A08DBE65B140D02A0FC24705D3E1EEA80B382A387FBDBA65D5CAED55E4355A53
15D0371D4C79A60F822B231A51A453477B1F6033ADE243F14D497C086D8DB56F
2F56A18218C345C32D38934E4037285179E8ABB9E3A838DF0A05417C570880C2
E5A57DA1211148844F9F61FB670F5521FE1FEFC260F3E926AE8AECAAB856EFD9
800F98038B815C5D1EA498A138CD5AED476B544FFF0AF7FF5CCE31B93E4048CF
BFCDADF56B75CB057F0AFEAC9181A6C434512F6A544CCFF36F8AE899722C4A93
C81AF1E108AA75CBB741E74C47F8B20547A2A38F01FC97731F1B39A4924822B5
265773A5E86A17A41A3D46DD8BBD767AD3EFBE479ECA5B7529BAE86B985D6C9A
BD2AA631AC2163E04A69A2DFFE85B298AC23152C22A5D640FE6D22505EC7C1DE
B88CA5BE13F85373A8733835C5B3B7D78A82D9D6D54932D5495476440B9864E7
42BAD5D7CC7C04DCA33030F187E88F3A42403FD4606190675A15AF4C6B62C52F
E635D7DBE1DEBA4603B10AF174EF63D2C4C8834BE9EC41F48EE50AF679748923
6880AAFB0C40074EBF904E6C116D035CF8FDBA0A9D56E5EDBA3C2794AD2E091D
D7659A4DE4DE812FC920354999BE977CBAC7A04E9387E3E188F2F5C21CDB9599
4F56D69D6B48B7721A0FB87BBE7530ED3C037A517E7F4D92C7AB784AE20CB117
8A77A4792F69C2C8A7450783352A92D61AE32FCA8EE7AD235AF1F50DA985D21F
EF5897DCC7EF4FBE278D0C64F81BABC9E046AEE8866049379032547DE261C761
AAB16B9DF176051ABB7C78512D6F34A84B9DB9F2568445E2423C73FBF82E9961
A7926D1A05FDB24361A99F6D8C91D104F883777AD1B0FFD5C8C14C34C3638E6D
2FB2F981BFA79544B1A2F756D81ACAE235A58C64D8DF6B0ED524949A252036B9
21751FB3806B69940F415EF2C9D9B107BBF43CDEF5D2A41B5CDED1A9D574718B
9C76A1871510FB3661D8B5F4D9120A155D32DB5C681FB70AB788B876C71B13A7
37A00B245A1571E9CBB63FB2ECAB3EFB4137D55F76088819802AC0ECDE469085
BCC3A5E78F9AF07A42EC29CEE0176DE0853DD365E9B853E9315425011EF60360
96398D8D10ADD46B3FCFC12980C2E89DF11770D3FF36D19AB569AD0865E26C9F
0048B1100E27AF8F72767FF2268BED8317FAFDB532191FA35C29805C89A3E1CF
261967A11FA5B073A62AEFA198FF5739C37442B80455AF129EA1A66E87168EBF
926C2A91C528165662F652DD43DAC6C32C9548A6F7607A1F49CA66CB12882786
D794D5E8EB01E9169E93845117CBE2F0B5980B6F11A12B81E74C08CC2DE33E2A
24247D78344F561751682EB1877C6951F86EBEAFE1C5725C894669FF44C8BFA8
9445E2CE5BDDA7CB599B4DCBE5BAA80366BDF9D404B2FDED79EEDD6FD3B6613D
855D5E17D6020D27DC30DCED3EE33E4F0549473B1E0C6CFE144177013B090E06
286D0DEDFFBB18E470BE77630EE925BDD46EF192F5D04DDC73C0287AD45948B2
225F0183BD481A526F5680F6A3D38E39EFA71A0DDCE149E75A28461D686F8329
7FAA9EABCD71BEA209917709BAF693D668F7AC02F3DEB82BFB87DFCCEA1AB910
FF57513810E439B5705D8987D32CB5E37809317C50945E7DEF65F98080F155EB
CFBCE24CBB5B913C140BD64AB6CDC615EF85C7747CFD61EFD84E2D8142BC0BBD
19FECDF86A5980B9B83F8BFEBC6C8FDD760D1CFBEF39C25DECEB2C64030E4873
3BCEBEF9452315BDDD77E669FD770003EDEFB74B9BCAC40C589C79ED8C432598
31FE44C13336BBC3B0569784320814C4FA99AC15611CAB3534A86E51C473E3F9
CE236C2399BAA8B34BF5923162B9C583897864E59CE6F46F213B0EA52186ACFA
F9C21D45FC95F4483FED80420E4BCD787F6C1979B5ADB7294E30885DC5F1A7C0
10EC1B86BFE8B4E0C2804ADF7265152F19C026C89FE4A47F9DE9DA86D75A9D8F
39727CDE4D8E251CB3B3A5B0A91C0FCD7FBBEAD7A812F1DD240A3EADCB9E7DAB
19B7A27F2BE09900B60B0E04DF5EE2475851AFE225349BD9936E274ED7A5CFCC
0057D9F73C9862046476ADED15087DA8D19A2C3B7260FB620EF714F054A18E11
BFC8F0677F7473BBC8F898D0459DD711DEA6B241473F8252E34FA911185BBB34
A6EBF5F640B382E82871A1FE5717DCE2CA2B7311E8AA33409D7E07E7AD8BBE63
06D6B1CCDE4251E736E6B1CBD09075410A2017BC4240CDC4A30790A98F2ED8F6
48FE2285E3198F45BDDDFCD4F291E0BB1A9D79E829E1B64DE91C306B8393519A
7A59226CBC34EC86D2CA91E32214DD857E80C70CFB59AD713BC6DA67172869F9
E4359B75F27C0256E5D7CCA469A9F64B95A6FBA4BC89DBC93765E3AE4723163E
492525A147759BBB495C5D5B99EA24A21A41A2E09B412DC20AA5B1B19BFEBA52
AAB0BDBBE0539C09DC52E4804470A8956B7B47FEFF3A2D6E11BFCACD6149A201
88B3B18E174328A4B90D93FA215065DF8C19C153EA76C5428C92ABAF509BFE73
7B0E77F4156977CDED3DF176000A1AAD3493874D67FB56FED2C58DD18152F75E
9E3A65D12036996DEB087871070082410933B8B6339B6106663D6147C391A369
F897DD1CFD7A456FA223553311D5DC175CD41B1FDED43967E0676CA53A9CC5E1
6C770DFF9C69B91DFDC228FEDF1E2C50A9D6BCCBA9AC188BE84D94820262F3C7
01390274F4A233B7C21EABC56271E0D26A4622107B077BAC69AA8DC1EC35AF2C
3E12674A53B3A3F2EAA7711B75C6AFECFF846191F4C6B573815A3AA97D3076F2
AB65B7BDC9F704E15D8F7E4DE009307129C0401A7E58935BE5A9105C3164B472
23A893DC58A24D65F44AD8D2FB69E0425E6B527C4E25D28CDE453EF7A4E09CC7
275EB64B46FA556FF6AD04D46529E9BC9A1876241B347A7C5A6AF81F6238F191
2F06CE23D9B929E7E8CC201278D36BFA9D85C9CB0414FA7B15EC02E8C08C8A4F
7E4B77201F827CF41845BE0BF8AFAE8348F559D6AD28E6D36CDEB5AE7DFBB73F
D1A0039F86E8489003F84951D9237767C38D64411A41FB44D0687B24A0069127
404ED92DDB1E36014C5E4B546CEC445793129113559E917EE5E91A226D4929EE
7C9DC63EA8F9780763E889B13FB2BAA993B4E3A10523D0D3A10238FAF971633F
0FE9A9BEA490FE3B8F7A361CA77F3E807FF945B24970EC6078E5A5BE03C72E63
84292A2E1CD06130A091F8AFB70C0D2C2A6D49C56D91469EA758F72040FB7177
9C25E2709855D4B337F9088002BF1D547E407DA41D28A1207045CB33D09A3887
A80BFF75CBCD814C6B5C42785DD8FDE082F7994FE2FDDE97D4CBAD7F8FE89B4A
CE18BCCCD4EF93EFBA6E8F902C817A5606152631CFB73F8DBD8A99AE723192B8
FD7EDCADCD1BA23C0423B872CFF49E3E575228C9722F92EB9D139A1EB5434EAA
E6541A3DB6A076296B35E8D6A897962EBECEDD21DEF42A0ACB73580BABFD25EC
E3A9EA5EA803DEF478A1DDC7BF0C57938319EDB9EECCD83F382E45211576133D
BBDA5CC4582CC3224BDD0CEAD4A5479C77743044EC0600CAE66913D3A893D91E
D6A220A3B1458EA90D68B2B13A5D4A79B827C93CB3274537274E5102564EE586
F97C1FDE8E7BCE01645DA72B35BBFC367448EB7FE9D1349E90AB58CBFAA79D59
67987422B53CCE01B56A7B0FC859F6A13415FF25D97E34027AEA2735E8E862CC
F28496AEC62C6D2A9117340ACC6C836239546551F5E6BEC12C895C1F84907B95
A2F89A79461AA87AABC56F78F0F213D963AD955334B2DC5EC0719AAEE0BF09A3
19FAEBDEE27D69DAB92802C091E1DD96672E47DA7CB4ABD9B410BEF6473FB412
6192FE56F0FAEBF2192874E00E4682CF0AE4507F9B9ACF4C51DBFCB9258BB81E
248987CE1A14766F76AF88BBF04AFE131578AC0B627131B95E5DEEB834030924
89A7A0FD2DA44A673046B42AE20F058CD38EDB16D55F238EC69B6EB8445E1A15
910769678FC5D929DEC57025F82CEEAFFFFB6D41D5701AECD409DBEBF0C9E955
09BDD99A537F5C942A7CAB4BDED1134230650AD2AE42517997FF7ED694FDCE57
1992AD7941AE16EF07E5231112BA37850D2AE40ADDC52B48008D082AC5C1C042
7AD24E2C9976490B46B8BD64C235D83B848E819175C4E9E5718AC24980220875
52373CD1D23D5C8E17CF1B43A482C44FE52E57AF48D0498C699E371532480797
E5C6302D1F29B003E56B90BE60FBC2FE513C93C7EB2528CC8B0472B5A579EC88
E8BE5890BD5993F661B75F403B0327A58E94861527D7189F6FC62EF9EB9AD584
935A58676976DDD2B6E118FD1D409904D12E824D1F9E7004CAED6DBA20F6A900
EC119A96BBE9ED9C4910218E0E1F254137D816B21F76617F02A0FC94D6F4EEEE
809BCD936FF4B76DDB821EFFF0BF941A8F045AE1633C8085ECF572713053E922
2838472960926A3C99F7383E534EF6C936DF6ED77EFB07C3DA6F036CBC424F41
DCF28BEDEDA81A4DF29ED7C8C7FD903BACAAF8ABDF9F1234B69484C237E2D1E2
E64C0D48329329AB52F8A3B64826CD95F02199EFFCF454A40AC29D2907BF8933
0D363438EDB94D25B85B2FFA06BEE4B4866CCD6F9DBDE0A453BAE8CD9BC976A1
491093B30D44F25A298FFB963241F8F05D06EF7BE0D60FD996223903C9A02FBA
E90130F57792DAF2D43D99E9EB6392846DA0B01BEB9E101D4E7377B61B4A077F
ADD338120AAC858A501D8D6030329402C5EBFA28642B10E65ABAC46863D26460
2718214D9A6E751E278EAD6004782A066CD7406F2C075B87AEF6FE35C55601F9
99B512A80F5266108EC36BDB46E5704EA4E95BC91194E2A4F97459504B95B658
3129FB837AFE9E5EA65226535F722426FF14D074B1BB7C4564FB54FC6C71558E
4C1A9D0B93E9A2123B044448355F808ADBE045E6CE6D9398755417A2CC20884E
40E9494038C8C4146D9E400A2CF70467645A23A9974BFD62F54A6A98F74CB852
D6510B5AB1B30E1EBDBA650E077EC8EE339C4804180FAB47078057D55EA08960
8F21F58EC322B1D86E58CE46F9982113791C051AE8C88922EEDC232CA6A04E92
8004BD90C2FCDFB6DD8959142324E13613FAA8BA742F3165989453BA3A994ADD
C6324DB33FFFB35AD715BB0DCDBB2D35B51730CB8CC9DD1B574184656D3ECACB
B7E5701BB1EA4029C7C87BD0772AE30671ED2BC4F1E12B16DA8FA645F56CF2C1
1B51C7AA9A80146F398B9FE829119A4ACEED02EBA65E3D0C39ABB9DA13E34086
4F2D181B83DCAEF214F5FB004EAD632015EE1E2FA54E38977031156C876E1291
8275E17D994EBE5F2BD0FBFCF937DD3BE4A5B31D1B869CF99D01FE229B9966FB
DE2B55A8B0031DE455BEB83DF8971CCC3C4CCD9239790F6B0B3DD6FACF052D2E
1C0EB34672AA746EE7E73D4934F65C216EB6C3A6207CF39EA825E6DD1B32CF54
14CD559F65B1728DFED9A13E39976C99B380EF4615293F2CF30358B76F04C6C0
E80D3AAF01749ADCF5E38544F6F225FAB6045756E1D6148F9BE2064A37646CB6
6F645723D143A8D4D74D8FE6C0F77B08D4232C6789A0F5DDB7337A300CA3A1E9
B53585E431E90DEB617EDC0F95E180DD7550442AE3E0F8C1178EFEEB5152EB51
288864523AD01F7A76DD5424B746A66BA0A805CF2EBE2454308EC81D16316F21
015487644B55DDA2E1146AA3C0D5541EB45ABB32D64FFBE3475AC402B3DEC385
C593322AE2043AFA55C6AB9E1895E036BA65DE15BF69090B7FC8B3E303F8B56D
1161CAF14DC202B636DB484CCA840C48ABC86C0D95192C772C129F71427E98CC
2ECABE77252816C99DD11820D375EB9335D7CB6267EF13E1CFCF241DB485DAD4
57C8351CA765BA358247310D2D65F7AA1A2FB3FF6CA041375A2F358180A3A207
B2B331CD0C7DAFAE8E14C0C9BB060ECAB69004D3628756A3A9B624BC018ABEBD
269418B1FAEF148615D78265BF0E0150053C6601FD711F4949A68C1F57865095
CBA6E700A1CE8C1854EC73A7204D9E9FA8728D4BCAA70FB527B440C0CAEDCBF5
AA4A878BC760F2F70D4299A4F76115EE6135F0ADFEEA0C82E30B395FBEA1DC6D
7DFC80DE646F8D21E6DAE8B8285CCB13156B025DF2E5182DE426255FD062D11B
74A0CB238281C41D9387A29171C53E99A6C68B84EB905A08E3AE9629B0275AF4
22EB5476C2F259E6E8AFC57CD429081D817B4DB795BFBCC80F4EFBE3D7E37769
48F8DDE5F879C79EC2E13B44602369AB74EF77341BF520553987E90CB1CADA54
1EA9D47C168251145C17626EE61BD5B758B069148683375E02AE84420BFCC53F
E88134ACD7B507526E18C29421DB4FEFD57CD2B0B7721EAF2B21A67AF5E43B18
2BD85FD6FF960420E3B5F8A1C120887EE499B94F4E0FE6344878D0FFDBE4C314
85F2D4DF74A8FED485A7D1E170C47AE4059FE85CABBB066949A02C4E3A5869B4
2350F1BB7DF1C66513FBED11FE196B9FA247CED368590B63277B0E09F0A0280A
6BEE5F7C91AF235D94843C7065B09977A242AF7FC410C64CDE855B47289C449B
CA773B5F7DC8862B9CF8625EDCA40365201A1C4E155C86BC059C1091A8B687AD
33471E4792694CFCBA4CB368300E9BC196094C6216E7B5C34539D5848179585A
AB57BC814B1B5DE90D0136152E4190CEA510AB3E173171D5641A24016B351694
CF9614C645E64D34B5A2C6FEA57D50495B458B436ED0C74AD75ECCFF2F7C4304
A1FA6260C5C645145D54A2A7CDAD63A0DB6DECBD8879915086FD3569427C0288
473329A8B217601A96B9F3015EBBE56E141A3E8F64D987CA17A7D512629011A8
3B73973BA97418380A98469D8ACE4FF8DE150FB6F88F2BCD55EF0329C2C23065
6084ADFE1BDCA1CE911BB7D50284860A8999BE323AF4E7796EBD1ADD78D7530C
932C400838BB49DC71E5BC588C87A99F441ABAB5955595BFE5E53D4C11563B03
B94D44633FA74712E287445390A63470B89FD735B02D8C932405A9C8277AEBE5
67762CDF9DE85BBBEAD7A81DE32825848FCF97B7D1CB5D8F121EC7175CCC937A
0F9E49F8B27EEF8E1087FF370606241EC1977967D9988DE1196E1195BEC8A5E1
724C1F8C43F22DF8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BA22C873A42C13AFF73AACC425448
8A571F1CF7A9B7009077815F2D3488996A754F0D89465BD9F32B061E78C54C77
BC1DF51167138A612BAFE409CBEF302E61421FC31A29D22A5C46B2E75557BFA0
C123C0DBC44BC7BA77E553FA3B4CE88FE87326511247518E629A2B70B0577881
BA6D9347F9A8303DAD8BDEEE87084A06B962B7E28A73BE0B2713DFD32DEABA29
3EEA5ABD85A37B1F3D63ECFC9C885D638355D76EA0130CCE173653E1733940CD
BEC9B476678A7BCD0C6AACB39F1863ECE4DDE11AA3604E2022AFC909284A4D43
B90779468E29838365121EAD77DB71CBA6FAE1532A4AB7095F9B0A6F329CF352
2C813AFD3714B9A4A8A22C26D9970DF9F48A4C3A801E35A650279607C8CCD738
1713A93E5F02E55EF58E729E06BA415230C0578017DC87B4B835C7DE472E783C
F2984139C440B1826E3D41A3E8AADCDB4D18753287AF757E77D486D15908302B
0425976C12C80E4D9A88629DE47E52E3669AB62A75EB16BCD26BD752DE5BB21D
C9C7FCBF815D3F994BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3FD13EEEB24
95BE6DDF7C7106C66F3EF6A89F9D6EE68EEE45A1E9807DE85363DF1E37946025
9D44CE016453B2D233667BE25173D9C0204E159D8118F38CC7E8D94F702D9143
ED9E898E52F2294018E293B4D500F009C2ED820B75D4FACAEFA4489F2CEDCDAA
EBE72E55AB10A4980F44CC84F8DD351882D0FCBBAD99AAAD749454CDC40CBD7F
0339D4128C54EB3CC09A62F2A89E84964B2B68602D92E9EFF00404D754001050
958C69140F1F2C1AA25026527B2EF907DFBA5529A6BE858036376C4FA580E848
A60972C5B158A400A02489B68AD753AFE0EDF8A1D4870FFFA81BEED1AAF3AE9D
FC53C7151C2833C292874D862ECA061ACE401105AAF98F5204D0DC5D0A48DEAA
A63DC187868A36BE4D0A300EED51D6DDFE67B17371ED611BE4D7B64DFD240A52
7264178991EBBB9338766F05519A71891554814D1846C82E64B2AD350340A400
301BD2C6DE95B265532EE83FAE343882AD0796D5CCBAA6F264F2D2851945D479
677B8D2445E811ECA41B67B543BFCC152C563E091E4820C12FE47E3154789E02
FE363C31913AEBBDA623061C6A4784D911FB585269B20E630978C45D37E54630
B71E25E517C60BC448891030BAE0D3B1DF388ACF51B7AF1B248BDF58FDD0FE2A
25155E5E9AFA5540C642776222EEC2281E4DA5F7981C060E5E26BE8A2FD7379F
DD1E4F08E9A6DB793C1B1F3B8F937AE7E4D06991530DC2C3FAAC13F915F25CD3
7A9CC3103B3D14CA282CC662071283CA52467F731C2C1AEF95781283E70978F3
5E668A3218998113988006CA5FD98D09AC897D19DF7695598EF988AE0EDF8066
0A26B4A346117DE5CEE30B306905AA6D9075D3947828C6A967ABB0AB56EE4F80
553CAD62F0236F86C616056885BE7D54D8F89DCA5B1802B7288FEB2EF69DAA85
E7535243002BC00F33E976B990183B7EDEFBFC599453E4AA142675153E603AF1
E5D0E44416A9D51D5E8D34EB46F04E8A4CAE50BC9ECA4B1E0E29E932D7C05D15
A0E803FD454B0717C5CC75BDCFF08BD9CC8E67B2697EB1E957F3C6B5CD79D72A
07B7C86E1D8DAA61F415A48B0F77F4A231F76CF009FC101B48920A742028FB42
2DF59EE85D2CCF2D8DBB400361F96B6AD662FFAA0A6AE5778B2A1B72D012C9B0
525B958DB7BD645B55EAD0550D79E5E4655E10AE13C40486C06771A35DA2F683
46CD40AE6E3A628D8D1151137A4BED284C378A758825ED631CC7897D81D8DB5E
1BDC5FA5472E92FBF0AB674FDA64DA4E9A6A6573D011AD64547D6835A85EA8D3
65ADD468CCF773F3D5F482480A69070C62EF5E1002D8C5D2ADFB60F74420E115
9DE70A8E253DC0FDC0AE43C39324A87BCE67B45AF313BFC954E906513EE1A9FB
6DF6E9B62353C3A97B9BC866CFBD491B08704C697F1A9134463796F7BA5EB4A7
A715A034AAF603EA3ECA3F78A7F37032B4A0537D0FF9969EF7263D44ED08CB77
FE1E8B8D3DF8D1E152C8508D33C8FACD450F0E453A4F30912799A8DBFF1AD08E
429CAC1A913AEBF5578AFCD47B989162975370A4EE24C12429C8A21A0EE94A5A
D177131619AD3A45F6089A425F30DEEF5E1A8ABDD1A5216A020B897874871354
ED9AEBB6A04871200746A3FF4E4CE7F52144B2D4AA133851EC30082831A28816
092109E8C7AAA21B870398665A53B912EA2C1B0D9C8DE6BC0421AC842CFEDCAB
3CF67B65D8B53A376CBC741F182E730621C453E4936F42086790BC491119D78C
4837E0C464DE72487233D0D851BB55A87A58A6D758B2B63AD62139733DB76FB9
C93133F3861E569D2BC777CA24F82C9C16873EDE4A3F553934AE1CDEF29DE336
B98C4ADD7F99BFF30C1F992ACC48BC4377CC1BC095304CD782CFA3FC10643EFE
0BC1E8779413EDC2D0ACD61E84091D122ABB1E3896259E9E1C5EB09A9F44D249
300D83C7A0C96976DCDAEA2181D707E5E6CDDBA5161B65206C317B06608BD47B
911383F2EFEB23818177AC9AE98BC766A2D241AD2F9E6F3181F185B2FD093493
DCCD90A97F22BB0B70B8DA22B0E574057371F1EA9B963122A15B66B12B72C8D4
54F0537975295E1CF51BAD0124C1C996F03578FF6E93F270C626E28AE939DD00
EB511CA34A70D944561F1DEB1CA295E8ACF833EB86ED4836767BA4F806B84974
204A324D1CDEB1DBD75886A78D3A1E0FA45D5BF75C4A7A9C74D6A5B1351DC5A1
0DD5F4FBD3184047F8F52B0787EB4B70BFE665DBB5B03576BE188F8A87EDCC0E
550DB1D88A78ABACB17125B8324EC8C93B7A9900A0BE176BE30B16AC95BC24F6
7F4A68120DDA56FC6E466A3CA47F0F2383A6052BEEEEF34B2C0D9BA404F1298C
27D6C69CDD6E0F3F6F1DB8EA0BDDFC44213AD960278AA498A967D890C29572E5
0215BDE6D5431809F175C7567728FBC797A6FE0A044D576BF2331624DB3C5132
50CE68293B2DB724600C74B7D1FD73174F07790D00E851167F0440BAD8771642
F8EC6277C6AC750D662C968935C1ECB100DADDAC7F92243F5B168059DCDD7D5F
FECB83EA16BFC72CAFAED1EB8269E38408C02326B40E27E034DC75E7E797B53D
EB549ECD9E936ABF6580C629A7592A909A4F89FBE2E3EEFC8EDA265C664D6843
4FB79C7068B1AD495B31426096B8CC5AC7EA6AD5BE04886842418EA1872BC169
F92A89067877145875B876CA70B1C7D8A94FF1FF6FEF4143E5FABF6FEF2CA4AB
B8F6729C0EB1FBE8C013A0A5AD5CB45782ACE25E2D516A4350D296BC197E9B6C
1B2706DC46F7FABBEB436AF77CFA0F0E79E2AC06E9EFF2FD56279C687F802D44
D27D37602FEB4122EC78AA68D237A7CF0FDCCEF3D0E67DF812A28813BA8D3D99
207F91BDACC98378DD5796B02C699996D6947840CC115F91F9CBC391AC7A2B8C
08BC0586B4B91100B29BD22F26D11674C1813C2348C7EF509B6512F0FA82155A
E1D55E91A79F9E1AFDCEC1488593397942ED0508663E38B7FF05556CDD7FAF7F
DE252667D3F96891818B8D08E4964BF5ABE0DA3110FBD87FE48251186F64352E
F047748037794178FC7C017AA8A51286033F16F94BC18DC911270C7B4E1ACEB5
EC9B1DBB9D81DCE423ED67D8077EC4429E9F6FE39D6CC4DB92A4C506AC2ACCAA
6366E6F24A603AC3E2B599C47DE9CC456A07E069320688672BCCCD7EA068860F
1C5275ECDEE682F0D37FCFC704863F7BCBE3A853130C1166EE98E9CB5888EC70
E89A7B24032854B34F5FFF1B2283621D7F3404D12B4C0FCCAFE83B30690ED44E
2A51E74C0DBF0DA63B18F541F7DAF2599EF2718CB102BC0D197201684A05E66D
CB3D3763266AF335FCDB592821C7797B6E80E9B7B55F3DD8F33E7DD74DABD125
1047358F796E152CAB23F594259D7849EED914E347D87F942815288234D8A66A
C0A17AFEF47F11F8BFF8F9BE679F191571EAB250818AE5C3E71700201CF99601
FFC163B6191FC0B3D436935CC8EA8ADB3DC343A4E2D29711B655EFC1D043C7BB
99785482A577FA8AE0B891DA7F0794B9AF93AB2AA8FB3DCB5CF1401035A824CE
4388D715C1F56885B36AB435E9C8813CB052EFF2F39A46F0792B732E027546FD
A56BA1B42B00074903DB4614EF29763FAA13FC126ACC8EA85765E278918242DC
20174589A5CB29A88C8843A60DC1D52A27EFD8545A7E516998ACEFDD2F51575A
FD978844C404A5C014AC8042E92C12B26A2295E90030463EBA7381B3D406D762
4D36BEF5BE3C641A9C801F72839A9A7276C249E31F9D1716D17B27917D3DBFF4
EE7F0620F69FEF9D270035F96FA9C8CC081BEB7063357DB8393E9F86CE048F4C
870A446EB3E06BFDEF95D17AECADB052978660340A37C59759C5D51273FB635C
B7271D8A2F071725B1560B30D6CB37427427EF4079D701BBBF37CA5A9E3F608E
DFD858AD4C773175799B685B89D4019E3004D84E95D6D79E0FDB6BA53C1C5240
97F7E10700026F28137E896DDFEC3016130BE8F3E7C2E2C0DD5267722B7BEF9F
001245BEE77B40CEE6E191449727385DBF150A289619BA020984777DC32533D1
B154381BA3ACDDBE67F3E12F33586A69339B06C285601749955A3AC5F7C071EC
DDE87DEACF756B352E24F6F16B58AA7B006877B1CF2AE63645BAE47F67EBB465
50329F0A59B55DBFA326267FA03B2CCF128C4B0ECE19BF7317AC222D65C59222
6C7E8988C82BFA5DE7B955BC4735C9ED3F75A15B531DD6C244D36FB6F2A10673
088AA9391CAD3D4BAC7004B3DF65614142CE79AD029AF5DEF7B359A6DD573EFE
4A537852020BF0C27F175DE9AFC917F2D783A0838DB70253D1EACAA924C19ED5
885F082B33616605D8BDB4DEDAEF06A76B29E132634A1E34B04D9557145C8244
96B6F56348574975A677652AFBD27526C8FB89E7E8106F14679491ECDEFB2672
6886A75650C3919962B0139409A29605F8D6639843D08FBCAFE02A4FABFE9E13
B8BC0F4989C361DB74D2F14281A9EEA64E716FC9B7CED8E8D341B4692642104D
9BB6DABACC4AA136286FC74158421FBB106A21AA040297C80939840A8C9C7E6B
5A7AE4F0748156A987E57B85D56DA207C999CAEC4C445BB1B0B552E98D2B891E
8AF681EEAAB72E5F3A5976316C481FA61C44721B764710224AAB02BA29CF3FCB
4190ED2C487856308E5D76D595F18A4289312E74FA9C289A53647EB6D770365B
4E9E5DCC2E4B1C631F005C08F4251173001AC87B0F2934F3F4FE164145DB5902
1EB5125A9D357C79A3D909D847FF5C6B8AB3C0920302DECDF87278C13FCFF6B1
EBB2785BEEA5DAFF02758FB7059BD3600C7881088CC1C83DDACB2D0D51ADE839
CEE8954584CC933FC342E5C696F03AC53A51C4843802081696785BF15D76F545
78655F5D56E1B32CE919AF44BC79A3AA8FDF6118345B2AE03C841220892D97DA
2F0E5BB1BDD5ABD40D988B018FD7A5F10796CADE8F0C39DF8F351E153B539BF8
237387DF6C70845E3CE0E1F146F40795CAEEC95753D8F90EA0F50DDE1F5E497C
7F21762238B86EA8FDEB5F505D435095A079A2270E0133FEC808630E4893283A
8B1862384D0B6BCA5C771EC4A2C4470DED57921839A6F1ED8BED940B3ED7CFA7
3F120D67990882336504E06A82A1943BF81C11EFFEE4B0BE481E357DAE46B261
6A5380A1FF27AFA7FF189A7DD00386A4BAEA10C3DA37A73F990F3D919BB0EC6B
FB3832A8D86A461A3467288C9B7E56A46B87152FF7B7AA1B16C926D616D11FD3
CC4802E8D0690787DF01663308AB0FC3A0737660C94ACDBD349CBD65764E22B1
E42E557A62A90A8F9751C8FCC8CFD9339A039ACDDC83DC092E21BC9FEB470D48
DB8DD58392AAE110DCA268598250F2EDA8FD8E3EE8BFB0B49A2AC41080DB9F3D
8ED49CDE3EF3CEFFD7558991E2863E3559AB0B98251F9119B0EA2888F61C3849
543D3C75088DD2EA623324F8A44CC57EA88044B1746FF6148CE49015828E2C2C
A02CAE79CE7B8A7C0E94AEEC901DDEB541604DEC0FE90FA0685AFE953769584C
743C7D8A12A49AD70A5D13AD9A644A43B19F3889E182E472DBD90378CF2F2CDC
50FCEC4B5D63D162B47125B8324EC8C93B7A9900A0BE176BE30B16AC96622B4F
34DBE9C6E0F4BA355E17CF325E5CA01FC85E56B95D0C8224317BE91DD624D25C
17C01C6EB24F8BD762123233CAC268C6BB20D3A288E01E2B9173557BD09FD7C4
BFC0BD21E3F9CB72B99D5B72F5453E5E8E61DB1897CEFAADEB6A24588446552C
30CAB001D5F9DA84FA530B8DEDE78345B17B829686C23D94EBEA9D6C9E65CEDD
B5734B7CFB456B33079CF0BD3F7C5C53B5F23CF31A615AB927333DA13567389F
F89C666BAF1696FEE4BDC1B3258C0E2DFEF409AC79B9EFF2FD4A5C7FCDDEEF5C
791A335A936E43EB001FA13E44683DC6CCED04122D1FFF56BB195F77CFA52B22
A941B3A6E2A2FC1BFF764DE0045F247195279B6E3077678C6BF2D6300AA63F66
215954501F18092CDDA0D12B4DD22A629540775FF11FCD5EC238F96E60F3ADD4
D4FADEA06F18A44A7E7BF02FCD2F52D4A3F9CE7F3FA905E88E03863FA67D3BD8
E03F418C44A895C47E8E2457B6F0EA299D0CFAA81A8BE845F00CF9C96E4D1B40
D8A0E83AD725089C8E78B68456B61D69BD455268F1980F5252385EA3E898611B
A9C4C8A5E0A6AD4E40D3F31317514AA621B7ACC0840ECB11519B06EB4413026E
8AC2F7540FA825DE6E0B910F0CAF88E6309CB00AA35B57FF6FC77F1AA11A8AFA
6B6EBA8FCA6750CB48A95CA77307BDA8EC83116100D776044F91CB01CA73C63C
B786E054B9C70B20180D686B2FD1CE008D5BDBDDFE4BD693E3701759B4988BC3
54F399A7EA0FADA7995818043B7117CF57F48767637093A0A313BDF17ADEC6B5
D27A5D3D308D91B7DCFD58902B637141C9C3FA28B55B1B5A21BE639EFB362092
9FFD88F15A1BAE76C6EEFC79C130434DB2F30124260E0A4B165539944EDBECC4
B4B8D44609656D2C995BD023F95E71A2A3C258F7D7BE6DAFE1F3D2CDAF1940E3
E00F45773DC20480C8D6BB75756FFD8F5C7A6CB0B7F48A86059AFBDA2659DA38
C1E1A9A6055C1751F71A8070E2FF25C6754963E1DDCD4A445A08ECB175BB1402
2AFBBF507E6262226CE73BEB52C2B8F5123551AB6C7CAD325FC4E08FE4C04256
0C3A4FAC284BD50D9DC88949FF9E679553C2535B4FDD75927036E62840318516
F78CF6B4485A6E66BAE16BA776CD7B8E31F0D8A1B666DB7B6E977EB5478FF4AC
0D4C8A2199EFA0C1F76BF39282D0236E0983786DEAF6699160F88388B1042567
9B4F672C37CDED2C6018D5D8CEF470C4B24F3D250BFE64BCB92388536E5B9601
FD94988B3667BD1742DC48F82AE9D7C8534C2D0766FC706C4DF71BA325BB76A4
F1D2E991E7A981F856B0AC32D4768EE4DB87D9B90975BD6C17D07B316260DAE1
B686E1B285A5CD814C0CF46BDAA1C4AB6AD47FC4915ECA234EBBC1C4FA538D03
872375F0733AAA9F00AA3A998A0B418D9106941CF41BE5A03E1471FD9F140099
BEE013F54CDF48A796A43EA25E34BA76F1681A3282F7FC211E17F45270C5FA1D
755AC45ED908F91532280A19FB3855615015D8E5027B7D1E0C22A83AA19F30AB
25F328B582681CEC34885EE1A4617EFF11145D31E1FADF4496A8E43029FCE2CF
0251EE1FFF04E1A901776CFD06CC2C60C87CFEF1354F7A9E260CE6F658D88D55
F4B2A93EB0A5C97B6B8F4763D21E005D89FAEBBD7D8B06F3FAC489A4C7012428
ECD18DDA85175E3CE67FD4A6528AC4075CBA8965CF383F4F4AE6DA98D1611D05
E59ED9BE07F44356E7A1F53FF5ED7B2E617D6273562E2837A23DAC4A8987B237
C1C5D37A94279D5EA776EE24A4CBB9A0A25A08A8B0094D7548BD0A4FEBCD4ED0
1809E0CFB48BDD3E8D58440D82194CDB01A2CFC41133C69AD75946DBFA689431
92098773EF4313CD8AD96FF7FA7D349FBD703CE8ACFB93BCAD415AAFD831E404
573C5860E877242A066E88A0E356F6F36D757708B42A5E259053C58C8DE2A02F
F6CF420622EB34B4E3DD2D6BD77D42D4F1646CD21D1B4AACC929F6ADAEEF5E7B
AD6D744227137D55E6CBCEE1A9AEDE8292F21814EA7DFF4768721C5A1D2E8D12
1F7D48776D0EB6C3A88D10A1DEF8E194E095090958F9C0BC683BDBCF293B2A87
2B82D007FB89B9FA1CBA7297A39ACCD767EAD0681E616D4350FA55A7F6C79275
EFE82700519B5816E18C1E414BCD11258772EDC99ABEFFC568EC8DBC3CF3A912
9FDD04F9A09482ABEE624C540143A302F3D165B73683B97280E3F8CE4547F562
44DC683803B15D5DB64C62D7D9A776FA5FB33BDD959EAAA11CB03DF72BA481E3
1A42902243B83DA90CB0F503589D4D806301BA64443EB7D0F6C3883D195661CA
3A1BBAEA7BCB4B37A47FE3E0F8CC792879EBA47B6EF16E2C6DA9D1EB555D5052
8E6E2C07E9AD472351050F942D4323A5ED11DE251C2F920A6C1CF559C515EF85
C7747CFD61EFD84E294593E91E40D571A0BDCF87581D59EF8B0F11669B51163C
1C66B3568EED4311DA1028846B3EF82C41D778B61E0A02BDABA46A56DB059C3F
E58F0EA76E839F5BF88B01827ECAFF8081B614157E35B519BCF359E1537EF69F
EDCA24FBF9287B75346C3864B99A0C16F468BE1E3146E1624C52F257E3733A7C
AB1F0C21D28BF894334254229F2BD612171A05BA383886B0E1CF667E91B25258
FDA34698645C39B92C18AAD0147814BF27C8FA6DCA0BBA0FFA540E8DAEAEA50A
28342A2B709350807046D7938DE05BB987E6403D4AC83113CD86283124992A0C
BC0E82213C70F8FAB28C4E998ABFC56EB2B5B6ECFE3ACCB88E5E52DDE2D9118A
1747917E6A9F23FB071E5BE69F2FB9FFD46BF3CCC4319A1EC5A83FBA37CEEE37
9D23BED8DCA6132D76C53B78A28BC434AF4C91CC842BF406DBAC4C5F555EC96E
760C8245A1AD9F508AFAD597B01A25989972496566E492F10EC7B88872E9AC87
6A453AB36E6E325AEDAC9D82657F8ED07C3F4BAB15A0BE01979D3234D19B9935
952C99FA46782346BEA556E1B40CF5301148D3FF60C0D208A8233A0200CF7F8E
69662F5C35FA0CAEAF0A927D5C7DDCE03DCCB229C4467E67E81ADB8628B94304
67A2B760BE974AEB670A7EF503F31CAFE3F1E75D12229EF8516D9F749879287F
2FEF841A3767BF8487245D966C780A51FC22430F50B55270E78277CF77DB7551
ED76B595C1196354909804319F1E307F2E5D5E97FFF1E35756C47A6A8FD44E25
28D5460A40F136C1FD4FBE2F70FE56B13AA90E78AF892C68B6248C808BDD1F83
C537708BD4A40ED4D275A34754E7E3E8591831048AEDBD06FD79BAEAB05CCF5B
81D99CD34D142EC37B15A3D0873CB6BC134147CDBB2844782CB641271D00DCE5
BF5E03EB7DB612716F5C328F337B4B1CBF8F3A77632E74DA5ED29F290C37D03C
0EFFE15D0917BB65CABD62E56E90A48FDBEA688E80FA438D78057EA80AF98AAD
8832496F7EA8624C034C349973AC1227D16964F9A9173CD6A5222834D8F7A813
8941F7BE5AC33FBD8E3A9EAA695885F0B53FB07AB5935CB1B851B96CD7BF88F9
A72E460BC3D452F04DB9174688EA12CD8F00B8CF4ACD3C83F4BA19B313A27AD6
323009DC44DA90B76A05860EF146787AD291C4F0BECF14318F0C968433143A19
DAC00D9264EEDA77819CC32E81AE692C5AE0C53DB380ABB86267C3AAC437310F
1A7D586CC05048684AF27EF3C09F72A202080ACE7A8462EA4D0A2E3CE3EDA1EC
59EE43FA5EF2A756B226DB7673920A2C426EEF8DA67E650EB7B1D97C6DA381E3
C7686A50DD234EE73CD469E24B979DB7A3C26801713D3B30B95F41BAA0489023
9EC93C0C768F2510685EC5CDA47D5C15974B7EDF6D7FDB24D5F390F6D8059BBE
B0125267D929CE8BE711ED480CBB8B9E59E1BF5FC3C43A4C530DB3EA06EF9672
983138D713933F67674D3D01FF403643F1D606FEE10691D19ED84FE52EA965D4
FE86436194093E227746DE035B33FF9862E3081AFEF8F729D1C66EB4EDA34552
5FD4FCBB4E5CB711DE81DAEDEB659682F45187EAAD570494103D598F013EA141
1C1F2E369E282622FA6C76F04451E1282A2432E88FF4586045D937A6C2DD7C23
20DC37841E76F57069E9178CABF3F506BD4AFA8323B32617FE09DDABB4DA5C95
65A5FD2FE2AADF530E5F627D5E2622D22B75FE01501A8E79807281F7C5416109
CCEFEC324FD2DF976CFC21F0292569229004C919DA628C6A5B0F4F626E8935AE
2943365C5052867E45873CD3DD3281D71574370C35C4DDAFB83D730285C49369
1CA69CA1A46C02C5BC7E68BB5FBC64336FDB10EDF6CF4B28799093DD8F65BA55
CF0B996B1649EB4313A060C09502E182EAB0E7D0D01ABC1E310F7D2A296E92D8
9200DDB63772D73C36E0280F8ACDDBDE5CD4F20A7C05C060D65C25FEA1A5980E
C3B8FDD9F568AF98771B2DC5D449530F3734C2B9D624AF3E43BFF510B167E222
C594D730AAE868F185D541458067101B1F500FEBCC2E454078EE1312FB9ABF4D
5FCC4C285213F93391F24F53E3801BE77C27641D2C9EC25EE965F04F42B78D23
50064124CF9F0BD77C9459D61FC212A9A03F9BC4CEF9E5BE1263B16054C2F450
587BFBA838A12ABE23EAABF43783913520D145BE35C8758391594AFF7153A7B5
D444882205CA8A2F7A801C7AFACD58F93FCD83DCF3EF58FE4EAC7FB9DE6D213E
8BC6C96E1A693D7D952E8421467F814CD54C97A8F65464577DDFC461E6ACEEB2
5CAD1B04BDECF1E9D4902C2219481F2E2E4718FCA2A1DAA2649DEE43E7B7BF4C
8CBF53A7FD78362CFB2AD31954A1FF65BA69C7121F924F2877EBD9C05944518B
80A83A36DBB8735A32BE96443C3EDB23C3544E1DF0BBEF26102990E062B487EE
684E50997A09BCF819BDA0F556460AA7F620A2500D114B1E6AB325FBC1794729
65BB6B99C21D0CB69EA3B0BFDEDC9E199CCB170BB7DC5A3B3CE69F746B0E411B
03ACD659F3518A8B601D4602EE86709E264269259481A032531BDDBE618CC7DD
66B56AB89C1B289D953CE8F7AE3DEA6BC301B831BC479C0295E4599BFC78C907
C3A123176F8E9257CB36EC875339EB25DADAA0E1A671EC7085D867E935B40F3F
EE29A68FBAF8F95762FD3FF5A8C0D2E97DF65B0612857F360BA1F06AF09DE5CA
FD23D059DFCE50EEC59133FEC5CCC5E9E46D30F8598CAC910329FFA3D5E9CE73
3060E9A912DDFC06BEAB5782F56BE42B04EF9788B553B8D19BF6984069E6A19F
2F62F3EAA666994CA158ECBAC9867D327BA0A2D690679A219E5E10A4253FBB1B
124C8D80AC2794EDB253BFAD5DEDF0222B24BD8A246DD721F201166F975ACAD8
B4D1D6C06EE4829BDCF62AF4204EC8E64AA8E7441785155FCC58282FB23867D9
28A14FC94468128D66D335FFB5F7B1FF17874AA7CC620939F3BA8AA5ABC54099
0B8E8E2B3D65611110CF0C3FA0AEF50E284BCE7CD224F37636586E35780492AC
4ACCEA843EE25A1DDC3AAD4A6E430E43D16E0D780DA825AC347EE138DC959E22
D8A696CCF401E0111DA90614FC43AEA3A6DC2FF687757D9A996BB1CE1113D64B
375A591E5B6D177A3E42525D2C91B4967E130CE848C798AA7786282E1FAE278E
6048CCBE94CF265A4ED6A5B90EB70E2BB7C7C23B7B83DD252B205C37E8382128
ED3AE89F06F2EA57E3A7A6688008E734DFBC5CCAD3452A7FE5A527D3A9DDC1C8
E5A1260E0799334BD9A0170CC19568A0E08CE6352CB79629CB55B6433C2BB093
FED8AF1342C465247B7B603CFF4F4EA2A5E66C264C08F4AFE461E5A2EF030046
700B475E00D41FA34D7F14B549B1E8C80D263159FB18C27A41CE503CAE7BEAFE
86D243B72B3E700F97E1451C4DA6A0946805D0E2C84F7FB96BC2C4563C7D80C0
F466B67851DDD360892DC9D0C1DF4B83A1EB775861645239EC6EC6B59F4712F1
3C74037920F8422F3E911F2A28969E9BBFED7EFD6E5F2BC440631902B92C516F
671CBD98E454F752CE741536644E91B8167212FB2D1F27F55E67DB8A021F3787
3E5A2CC5D496ECFD6D06B9A5AFC8C8C46BCFF335C364E087564559D47C3240B0
D4A30A382DED5AF585C938A804FF9CBAFCF313178E02D3BFFC709F92ACB6CB2B
A47A5849E5A1337693FE4708FA07991672B29087B8E5E649DDB2054B7E48E70E
B7A5CED3C9EBD9DF959CA83BC9B3F1F05AB8E622B6373ACBA6F0387CA03AAF34
7F7EF05FF517384EBC70F615B86F0F94CB2242B9A1A169D9F8F28D61896021A6
B8466391813B9003AC9B950A22EE900DA887619E8750ACCD1A381F3FCE07B3AC
FFB8F392F4F4753E7F5AE99A990B727C6C7020F14175225EFEA39202B7201437
F4A4CD704E8EAFC757116FE3012E01AEBF584EBBCB84AA912E5EB0584AFFF1D2
4ACC803C1C4257740B2A5FC011356ECB29BB35D080170EB46175F25F59D70126
99463BA2A4625E490C81962EAD17B2ED5B28AD0CF0A7C36886429F9D70DA0C55
A9A37AF458FABD99D3015F6D8CCCF97174ABCF4EBF0228371A568CAD41225BB6
27A6D60FF613EF2279B10F44600BF002CB1E35BBE7ECDDDA6E7FC363C345F8B3
ACB722B36C8D8D429B95D709D9A2531462945084D8BF715E80C029D2892AF19D
50CFF1C8E6F121CE477BC13FB3235F5458F65F1E67BC40979F9B86E0222012DC
A626F8A2147A63E0889DA5E1D5B944B8FFAAE19B188C5CD06352E7E56B125BA7
30B13E566F44104BD1DF95D7F1298F80536DB4B9CD1F6858AB0DE8DC472DE1C0
44AE0C6870CE71FB32D3CE571E2D40180A087B0A5E2A061E3881605DC022FAA4
73966CA2B53DB31F0659208BB467DEDED13A24A226E050379386AA2433B68A35
10F264B4303C8701718C22FCEDCBDAF3A9F80AF982F9653F2DEFA6365ABB1588
6135B00928A71B769371B2366BCDCAF59B1C2BB8D588DCFEF210793730C8E519
7204416FD5342DB3EFE5D981BDE1BD4E6191E9765C4CB18671307933945F0527
57D22A6E1FDB838B2EFB86A7EB3D9C1A8F97264607F6FEDA52296C2E3794AF5B
C45F581841847BC67F9DEB35111F36D958E1B115E4BFB215F78134A6CCD9B455
5EBD9C9221B4BCC2D016EF4B68FE6C549FFD52BC02589DFAE6B1527E81F32AAD
96247A394D75BD7F416CBD96D8705D5739486E22536A70B713F19D4B5ADA98D2
F6498ADF7140F3ECAE1056E6AEE64E6026428BB94F2D2BEA73000B2642A5DB13
666A1582C024571ED84193804FAD106770CF187E4D6BD0D25157AD1CF48BAF2C
5C0A5AFBD4B8D5491D3E1D3B2F0CE0F224B24AA1BAD49136B3532421D045D0AC
DBCEB72C0D5415FD34AF3104B8060E009ECBFB74365B175BBB6507DA3E129DAD
A60A06F68DAE1BD84249D55E5BDEDAE1F4454DA4654464FC708AE01532F17160
8CD1E5C59F655F0065FC01EAB2DF42E2ED8FC597B475AAC41FF909D531986507
0DD71843404E5407A01A2AB9CE1ABD0A48051A8AA4DE3EBFC3F6E2EC78B63B17
C3409D24AC19161569BDE0D66D79B090D239BB28B04F50B591BE66C0D54F9300
B1A5B261A193D64E3AEC89CE84D0CF163337298C63352C072081722683A51D10
FFAE239F46FC41C53EE61FCC5CE7C9F8FCDD83C276038F4306F4B92882AD0E8E
B1B27057DBF0FACDDBA6C9B59F30093BFF58163A6077A983EB4E924D54570E29
243EF5384DACA5AF1A9435676955BD4F447CDFDC7FD4CC1B02562BE8A77C9F3B
D966ECE976271A27E2EB61ED546D589CAB02E8D0318836E2FD53DD9498C34627
B481B018D4F3FA570531BD3E95CC48AB164D0B56A728831201A5BD4547307F4E
905749A8572C4581EED3C8FEEDD9AF5881FF9BAD937E03A5AA0CCF8CFFB94977
06044BD05564FE276FE374D00C05AE65EAF85F355A0A2827E3B0DEF529D46E1D
4209195971963AE55FBC024F28CFB5F117115E4F9085F7D671F29BCE5C89B641
37620187FA3279D3717B710DD15600D3FC279A7FD816A5D6FF646443F9679321
20DA43F73D8782DAF04FFBD0DD450BE0B9F754265554451DECA194F5D422B7F3
C3AF4399E2400CDA38790F2665842B251C50AB3FD02B3A21F6F71E7CEC1FAC50
9A98F2498C5830081A5A29EE2A73817031A700750263273A5EB67EDC39112692
C447A91168508BD26A1F1A420F63A9F591117C36D049520A09B0D3EF9DEC5341
75C2D641380CCF63AAE519616F242EF802FFDB6752321CAA003E70FA5F202D59
7B232881C4395F7A51FDF3E039266AAB1CDCD9CA5AC4FDA72C1DBC773D933D69
BF165956A04A221871AD1E31B5579D034FEB823A21BD85F8B148D9CB1CCE15E6
17C64F89D1B0E6991CFA26F21B0705F750E21376A1E6D67E649BDCF9807CAEED
488B8609B3514F7E0E2D6014E3BD4341CFD9DAC5D5F9C3908A0FA085E065122E
83C20C0DF2699D2751602868BB468DE3663840AC40B6CE46FF5E759996976AD1
E43A4221165E379D534FD220F43E35172D1D9AAB82BCC91FB98C4A4C06BFBF4C
B5A7293D405F9DB6383FB3CF998B84796AD4F1646204CFA8DE394817161D921D
D21A2D91C2C88736994B723070FEDE72BBA0D1B95B846F4F39C1F8ECE526BB55
9E2B77FAAD722F6046CCE5251BCC6C37F3C6A7EE9F1957E9C22FAD863C72CFE8
9E674254FC8482F402EB8E5BCFE58B869B4D37B28960BFFBCDAAAF95C5BE1F7D
5F8F3BD36FD7329D9C9ABE885846EF814D678C5D9FA7508BA5C74C896BBADCD0
D4E3EF5E0CA8F8A9B736239EF16A6B96B5AAE1EE6FD993013A4BF2271312DFCA
2FDA197833A0CF88AB082258D5E44966C8E5A03D5F1D98A373651358EFA0AB99
A7F3DD78B9819683D2D0D565171BFD5E5DE46F3CB60447B8C5009EB223106C16
55B0BCDD040BBFB0A6BEAEF83ECE59F2DC24E761A2F5D32AE09442641A7DB6F9
E0789F71AF74A77D34C305EF86A6D0A1E61F853157B7A1D4E4C3CF42328CB13D
387967D2183336C0786E91F0021BFF6E7B42E69271621C4E22A288F6303F033B
0C9B0807A6E1FC2037E67EBBCC8C0700BFB0FE118F26E94AE5F9E34DB6E65384
32D4F7B47C3EEF56A52C32F3F813758D34A40617FA3D963FBBA2247A80F63054
50C4A820C87647986E1760B7B836E2D9A0B59DC7312A3CD10932FC7AABB7B1B1
BE6AAAEC1C8ED1C42A4CF02D05B001D7A1145C6EA40C55D6CD5505FB3E0DA0D2
ADD18B2457464C0285F43E96268BE0996CC1C2B0F9C1896E8ED9B7F0DBBC1BAD
77472B4B86464EB26D8F474FE7024549C5CCD944BFD09F264E0C3DF740719571
5775550FC7B7D2F4BCD0ADCDE1607AEB407571E1D348D708D7628EC32AA1F0DF
A49C401EB4A2B2AC53CD3D5F7779571E3CF342003A86ECDF628102A599814697
12F247B9584AF235D6D04840F525A10F750EC5269B2C6898F9D38726D5172F26
8EC25747D8616C606B097A544A146ADEA4A731723712DB734BFED217033FA60D
3867F4BD9400FB700A16F1FFFFBA008EA14C41EBA75DC18501562E1F8D224071
8E3ABEE8005778C407E4397CED92199287B10B02D797881F790AFB477E10216A
E63D61CFED40BF8F4913F0113B484782A25BC28A856F923AA9D29D18222E8C27
0673546FC5669A055B3E53FA86A565347AD12550012F23193E7DE754C1AF7683
21A26C614351F12B13BAF4DAB9F52515C7139F80083C9BC54F4583A9F82972A3
7C0D39884C8625CB19D1524493619E2824078DBD18665FAA16F8073298CF94A7
B7B36D32AB64D6A05BD7A77A8FBF00E1F5F16ADE153AAE529BF2A30AD496A0EE
F1CCF1CD39CF68A2E6667256ECE2CACBE31F9CE362754F54E4483CC215967B46
4BF84EEEF1F83341EBD8142F5400758846C314F2F11F448AB9F4BFE6AE7012AF
E707A9A5D5BBDB6AC35D8465E1B3BC4E7EB50A0DF7E16FCC4C6509D58010DAE5
4D9C0EAB00D345424D6986C0A1D13FE57614EFCABA9399B26656486721814B59
840243587FEECAD354A03154F0E6C62B7C89ECF3F7C1839FEC5F71C3D5C65C82
184AB730B08F6F080FB260EBAC03AE14412D7526C5F559353205BDD9B1C243DC
396238C4986035074B3199F5A5A52E40DF1C1B93097D9CEDA2E5AE02BACB6FAA
D30D11F2110F479D60254E499A6ABEBF1D58BC68DCC12ABCF189DC5187B9F1EF
E95EFE2ECF09A4DDB0D3133835F43A24EC4B6D02076179C9AB74899B1C640AB8
EBE7093DBECD22318A58CC6028469AA02F9EF614AD764E2D43DEA2501CBC2BB6
2F34F4703B9EB007C74C438A5BA4D5F565F519DD4924475D44B6A76F0105CF82
1C0B3CDBFB19FE2D0349FB9596AB550DECD242671D0FBCB856474C1D326D5600
6EF951BE21708A2DF9794633A7D36719C942E1CAAC11E215253319096A380E79
5699D090A9D5CE35888DC2DE99186C40A9775AC65EC9D9B30B0EAC6365CD866C
6A1424928591F349FAB73D0767D4E35891079F7469224DBA537F43C8315FADD5
C840120101DFE37CC769DB741920C868E5FDA3BCE330A7D636C1FCDB936A685E
2911BB5E61951DAFF2A3E9E9B46B9A5B29A2F79E746AED4AC93D2F55AA2CD890
BDD9EFE44569F2A13CE51AE673519414A3F76B65763C33A2C9809C685D70E20B
54FC9981FDBFDFD651847C7C2C86BE4D56260CF375479D615725C3E483A2E710
B34BFEDCE6224EFBFFC4B36C600F196A53DF0A55DD18D1DA001C11B6A4B8A9D2
381D5D165FD1B4327D107857C3F9EE26BD97B7BFAC7240937D51CD9E1E552E46
9A3428CB6064A16D01A1233174296543BCDD8BD58EB8DA70BE8AF5D402500232
C575AF0F945A2563ED5C9491BFAA2284F02BD11FDE0E5BA107C68B49F80BC019
C594AAB6AA7B9F26081CE1DCF8FC4F94CA5089C7DD597E62B98E55963D3A446A
5183B5D59173805F04981FAF8D9ABFAAE73E5179D1AEFD7A0EDDBACA655007EE
1AFA6DF6034EB010661F85430CEC52B4F45FD32C560AAF4D647545C3A8AC0CE1
1DD4BADB17462A55DDC1973F4B172A634E2C82FB807C8F71020CE7C9E7E6471C
A4BD5F10F13F1724C472496746817FD31B267DD0E422CA8DE433C390470E429A
803095B2E72760EFF2258E5129F5ECE0442E14391B45178D5A55C0C54220575D
A02C0EF1FD4DC93690ABF6B8DBC7A2157F06DB5A91BB8E9A584923FB1E24D47E
A7D9CD269EB95BFCC27DC472BF329A7170D2B3AFE7D5F01DA4356C199FF3DCF4
0956527307B13C2087A0DC8CA302C605C97FEAF00506D8994DA92AC483E5C3C5
EA734A0EA41703F1E18028BF6CC14F198DBA7A8AEB426BF12F8A8BACD0154C47
27E881704817CBC33E6446078DC0A15591EF6C45BE6D1FB3758DDA79F8E0BE15
AFA97A395D3AEEEAD49BCFEBD5A8A8599269EE9E80F0C79F9AFDB9B8C7FA3CD7
41EF8D4E6D9D40CBF87650833C8BD3D708F5884A9B0EA79CE2C85ED72B583F82
31EB737D726429E183B1DD089EA4E11CF1817C9878B6A3BAD1EF19FF75C9CE88
D17D4C373218683C2E8A590F525F07677894590F5479F0D8437A332421B07431
43F2F1002AD7D2F05EE659058620D20B51D63733A6DF57FBC274FE9A12B66716
5B8292EAC86FD66627D04728D49F9A4531B87A0360124FD1504C60D92EEC4687
DBF7EC1ACECFF6C2490C6C463524FCFB9E4731B65B9BD0784EFA1A9BD09ABC04
956B86F9B706370C247D0010DE6EB14D45C8693A68A338B0AD8CB3DEEDC4A420
DC387FB5E7630C1ECA2CAB3F207B90758441A59BEEE4960FCC85100159CE22F2
24FD9FE3541EAC7DA79C8BA11A325C3870E24845E7F0D0CA21D11CC214911083
76C8F42E373B442D96550BDD272E388E3B9EC4CFB2D2D0FB7659AFA3CCE355B0
89B1964162B94E5F0096C27845EDBA2C9F4E75FA2C020BD2404FB795EC4D0857
20DD623869CFE286D121B4246DF3BDD90A425AB60CD6932F77471367D014A87B
8D04FB47A45CD1BCCE7CF51733D11EB49E39DCDF687ADA283110EAF5963C4F72
DD60163C9FB14223EDD1F6D7895266B2F9E26F1B01E356977F54B6BF8B2FC6FD
D3C2562F96D9BD9060797845C2011C5C99DD74668ED3E9929056DC63B0920F5F
0B112153611411F9700E3866B4E38EDA963DDC4C1945B0DC22FA51377AE11346
2B086DF39F5DEEAFB4E80ADC9F4E246851212321A4313128E086004719237062
8C1BCCF40E5345CAB362399D87CAB40B45DACB128F806BF01DB72BE43D1BCC71
B03888FB1CB6E106961326AE9A2EB40FCC8BBB57CD9F910D1AA3CD06C4F4D338
B8EAF76CB76864AF6497F674F2BF93F11C9C8955BE49E6E2C27C0E78D11D16AF
8CFE9373FBF1A18B938AFEC239CA000B293D12E5F40B1E65F84D36761F098C30
F2EF6520776495EDF6ABFAD5198AAC62C15CB9FB67ED8239059505E31904CA89
E5D11B3FD07AD3142242E80A6794EF1195D17E6048426525B63FFEF3556BF2FA
57083436E458A0F2E0F8B20A58DA2F4D9AA286F1578F7582770D48140FC06678
F93167E3D50B2F94FEF28E49E7BBA32C7A63047375101C6A3E8FD780800CC766
D419B68747786E95D46F19763D0868490DF7C1C69D242E857A8D8137B85111E5
D92DB74D323F74DE789D9952FAFB237DF58DFB651B6DCC36F9DE39277F451C70
2FA7B007696FDAE623110FB41F89E0CD0A30FA083F2C0EAEADC517E4217484BB
975578C97969225FE24670C9B44536F724F83C7A7563D090FA922D3E6ABE01F6
B601D390E2DC1104F91B54A06D57CA57BFE78B9D16715CB699C46D137A70B82B
C1471F59C8E834704472AAE7BA1CCAD90A57AB912B6D9C211717CEBE9CFD0F4F
644413C2ED9D0848242FAE8AAEAC174E13340CE868C0D453945F999AB6082714
B4EDAFBAA48EE80D4D11E8DDECB3F946CE8D7834A34172F536F85B216A7CF96A
C9958A98539E2B5648B343BD700926AE3D0634DEDB5E64CADAC5D8E53E6BB98E
CB09659994CFCCBE7EE81326D432A5E3561704D83845A8248657362A4A096276
4EFE65F6B67A48B204B9AA75F0DEDDB7C21D12B780801AEA3FF33341DF87AF55
D0D39FF780F15DA1570CBAA9C8DCD428FDBCC58AE0F6576384D456A11646A71D
D2DFD10FAB2CD911298790A1A918750549B4EE4420B96D5030E787961D72D02C
195C669E792C0DF3BD85061AEED8109D87C3B4C7E5E204608458C84ACBBF037C
53F897D3B64D079A3BA8A991284F36B0270A75158526F39C45D48DD9671757D5
F5B4E85B124B81A22694CC5FFC3569911E100A036EF590EE09FFD84314D9394A
33B12A7133E834379B3477DAD425B7996592FB0395E3B779A0898B744DDEE77B
66101DA875FCE4EEB3E5B0D37037A5A5DD3EDFB21FF9832F73C3FAD7D8DB727D
F00AEE7B1AD49486D008600F1D6D4D9324F54CA3C3C39928FB26D35C5A00E5DD
430F0551549C8243C86DBD488E6FD7F9B14749056FE89F8720719C58191079E9
22E7D41933704465E6CE2DC78CE20AB2025C272F3EB4E50788F73DC3A126EBEE
67B0B6A8D7E0A690991FD96653C36471CEEBECF84766E309B6E25392B49EF1CE
A7392DCC9FDA933E267898F8F18BBD7C4AF00824F80C62801739769F300D44B1
932F809B1F20879783786CA7E2DB91B341FC119A112971635B92F2EE3474DF68
2AC54E1C416911F4DF88500DEB1725360319CD3BE6F8A20030DFAB98C6576206
921F0404A94A3CF1613D259C16B949A10C8D69AF2F393EC2BC37D58D68A9AF99
89694EFF16A0340CEE4AA380B2A83A3D2A7D23AF8907176CEE75C8A1158FAF57
13C90ABB5B9114A868C0D7E17F247AA917144B705A55EAA66858A20DB39B7770
2A538DD33D193BD3ECF8180921DD48C10C8ABA3F9256FEC0FE2F17E6C5678B80
95E0F54994C857A51A8D59DE9778D16C5FEF08CA628FE830AAE61A09FC0A772E
6D93B3BB452C0CF149CF88F3AA7D093A3D9AA206931B9D1583F1F71365D677EF
FBD6C8510880A7124AFAF1462D8AE659E114DF5F88635AB1341D9FCAF2B6CD1F
CC4D14CB0EDA3D3EFD0B5D8575997D6B8A6BF548590FECEE8E9A065265B7575B
1CE1913A21F06F84ACB4D05C25DBF15524F89ABDF0E22E47F1B4F33641BFA3A5
45286F91E15E3CC833679026398755D1384518A92EA79750ED4D800BB75F8916
B0DA3468A5AD7EF9A30F46DF6C942DF6558C291FD3E8602A5DCE4DED01E3EC6B
6EC5A12956239D3E43DCC2E08ACF7D79E2C4607421389821CC4604DDEFD81735
5D4F877256023ADE33D6EE10BE2EEED5E33F8EEDA0833C35F798D69B3B45D89D
7278C9F437E1CBE760E968AAF2F80F62F013EA199570F8AE0ED469EE4A4ACCE7
8536E9953A1F94D07D5CCEBFABAF88B17362F4293F3374FAACC470D63EFFB75E
33F317F570FE7BDCC95A33DF22E24F5D5F7DF0EE651B7C7C2924D1424C444B9D
6FDCD0195626B9FF52B0C03A4B743D8DEBEFA61BA82047BDDCB28AEEC9D0A2B0
1029303E5F173F6FEE8E873BEDAFE808550E9BACC656612D1C47795202BCB553
0D7FB4E17609168B33F440CBE1339F15A2002D2B7FE29E018E17AAB83DD33CC1
0C1C7FFDA4BABE73041A161ED1D578B1F1682BBA71F462AB9C6853BC1A94950F
16F3F36D0E05B4428791392A6FE868DD449773BDEB71DA37C609A831C2C62492
AF85067DE6EDFAEA7567D26EB24093BCD34AB432199BFADC53AD5FA10FC0E6B5
F3EE5D9BC3C0B396DEDCAFF506F93406D3DBF03125A77FD2E57644291326D990
04497FDFACEBE39D71A3A628BCD7B9579BE782EA84899E1A28979EBE25D677A8
AA4DE651BBD8A2CB56F2581ADCC0E9CBCF5838002702DCDB725BDE8BA8D16EA7
8FC8FB38AB35BA2424E89E8047AD7D73B16F17DB957A5C42190679A0BA48AF34
6151FAAA3330B73CE2434E325B88AC132D54A5A908B5F2A32F38960F4078B4EF
03C1E2B447412F3D2ED6F432DF4ACC74B2CA07C24338BADFA0C6E2C7FAE2B647
7320DAF01FC329D22DDEFCAB36E4862600E511399D22F773556780188DBB551F
29C63C0FD38E151DBE7DB96604C10D85188417F77A95C3BD7A1281CB6076121E
B948BB428605AD56999C6228886226CDCDA03DF6DAAC466AD385F2708BCA7CC7
8AA8257086D5C60AA8FBB2BEB0B4FD4A8D8FBDEF27B9FC1AD3215A03D6C3C61B
924612C160DDD5172D98DC5DDFA80D9456928291796D97AD9CD132894AB79CED
F9AFBEF0323B34ECE54A1BC5E7269F5317D031A400EE8C4AD035FFABC5957CE7
A9F08E59FF2A6D83FE6DF16E0891D5429E4D0657CEE0494E29373BE7D67D4406
4B98D2826E9BA79B56615C30D3B1ED6DC9BA35E413A76633E8B571E2CF5C46A0
D643E16386FD66932E40B2C194ADBE443C0A847B82D484BACA1B5C649CF209DA
FE4F1416AEBCF33F072CCD073AC15C48C5F0EACE9F97B15B17EAF79836799C78
22398C82BF331AAB757F2F609AB9538BD42D5BDD22EAE3AB4F053E8599E9CCCB
437445F365B728866C1962CDAF4615EC3AB156FD7DB4D28509B4C31C5899236D
72385F5BC5C6D69AD4FD907A280D3CB22D5F56212DB89962839ED6F49AB8815F
321407ED2E3F3C6AFDF66A3DCA3C092A691292BFAC09A0A66B863A8654260B10
24CFDDA52C2D3958D655CE15162430900EB2DA3E88DD984FACEEA39A4F0E2B07
26D365E065D8CF79EB180FC3365AA9C499E924135ABBA1D7751BC570A94592C7
670BF6EBA00EBA51BCC0FD94BA99DD39628557A83A95A50DCFFD4DCAD2392556
9E3B1C647F00D147F33C0A680456C5008EB66FCD6549F4A034CF2FA7D9FF944D
CCE92FADA46EBE4A677C4BCD931207960C9BA56892999790016B0236D719FF67
F799F5F5BAD37D218B1C3735FB7D517C344AFEC68F345E6C747A7AC47A9D2F4A
10FCF32787186F2650B1FAC556B07F4CBCB931F9ADB92E0D61990B09C6A749C3
666C64B9FBAA515F68E3D13AF1E8067FE8AD1D722E59AC0024954335F14A0F01
2805FAA4DE2E937E03744732E3FE8DC47DF35CB5B0365C6F1C69AA30D6293A08
C43D9B8B2DF43C65708F4B32FDC5EC1664FAA48BFFDA73C008C25F2E9BFF8B4D
9EF40F4347742E429D214E6D87D11649403043692FAE37BF2ED974306C292ADE
44E3A3375F09C4122D7A96439928D006A4176D09B459C6105D9A22105C9E59FA
58B5864F9DD3E99FF8603152472FF7AFE49961F461F60FA06C9906540BE0E006
1EE4AA7A9A9A38708DE19204584689F539BF6C809CF54FF8CC34590D81873D53
1DF4FB838434FC4B7205820507857BBA3106A6BF5C8893C457CF577E82FF229A
45F7F93C4A77605D7A072513C78F710DC9A54F1891759DBC520888CB54A86A54
56A0293797A1BD1FAAB9AF2BAB4802D42FC03E542912B987A9BFB8FFCFCAF350
1977899340D2E8A19DF3DE86B975605D286CDD3FAB8FD8D5711B89169D0ECC3A
1DA0D7AB8B979BD9E121A9F52FFFC88360C20C4996BB4DE57C08204E80CE7DE4
8F40030EF79A5360A2BEB4825D970822E5DAA8F0B8CF49543EBD9FD240165825
E00C259E024B24FC93E6DFE5D1FFC59935909E112A184FD5A95BC9C23FFA7119
5A7693EE04184B463C7FA663B5B21513A1EE1B7AE701707CAD347208550DF890
CF5924BC50D349A60C5CC87234D5594796765CBDDE8E2C7662221E2CBE5FD69C
A87BC9F910524EEE46F14F2E5DDB7C197D9B33CDAE6B954B34C69C09F6B2A5FD
58037D23055702D82792444DF62EBC28DA96447F7F934EDCF05EC8CDFB2C2612
D673D75F24CFB21934CE02113E902D86A4B483FA084CF1FCE1461CDC9721953B
19FB929464DD83CA6850327D01C70CE44ABFF10441EF583795534232A7CC89CE
85E3902BB2370AD4C64DA15F0FE86B40623DF5D9E0E4AA6C193AEA978F049A4B
900A4F14FC24167E8AE7DCB23A2AD0CD6B212790F51899D5C6E48B1F72C2BDA3
2E9C8836FE9A919BAFDD1CE3EB931C86664F13262174638FACDEA968C0CCB6F1
786B432C43F3C7361171FF479FB4FDFFC8147214FCF16C034A24BA4FA16E84B7
3917E43FF456B5C435CE8E7972AA4C8B1939A6DA38FC08DF8BDEE6C400D51AB7
6DA345DF5118645F5FBFAA751789F2B8C775AF784D69DFDD3B1EF7AF41574ED7
4EC415246EA5F6A79C01F2892E99F9980BF9377C91F9E00D52BB5008F3DB9652
EFE5CD09944D37188FBDFDFFC7E19CCFDF2C407F049C21977C2A2287E9B839F8
BF1A62AA0D3371F4079DF50A47992D30BB623E8C75DCF88EB2184643179D449E
7298539E4034E36ECD3A32A712343AA577D88E956BF5BF0998598076B2E87149
D79CB229462894CDF18CA4DF9F42A66C8D2112258404F541B164BA8FE30ED8A3
792DA9B163C2C65B633801219FF4C6465AED57BC4ADF0681354E61498ECF9480
EEE35E0950ACF6844AA44B2CEF792935B7A8034EDF79DF5B4CC891E283ED970B
130C0A04502D832AE53000DBB2E24549B7C243DC396238C498E0C3E44C0CA78E
9836AF5187ED97D7896893276E071E1016C1E67003A22251C2B625FA5687DC5C
D7640E6F9E50B68D7C79C06DD23E7304E743585CC7A75EDA2495937CB3521939
67A20BF5ECE735C40E831150E060FAEA06F05A2C4221DCFED97580D9DFF8078E
7718729E706D5F0FD13E5C8B5F2421AEEB7D24E833F7B8BACDECB7D16496D80F
BDE4CD2AFFFA21D97D473903F223A595BD29D19EF88A4C00197EF27332A62EB0
BAFD95D126E18CF283F098DD64D428B294E561AA0C774678613BD61DD4080E69
378A2E61026F8AC2417B713FA478F24F684118DCA62967305CC6725518E383D2
FDCE555F8CE28E3035136C15642D6C4CBE8F3AFF39B371FE4DCAE9A68F64D2CF
9B4EE95672C13F4D709C289E55EE66AEFB56A44965744053106BD5B5E99175BB
C27E45BFBE2838BC4C0021571B3CC54019500DDC798B57B6D364DB33C24A26C3
2A540E57220AD7ED50090ECB75DCE2D92337F3A5EAE6735DE2C4F5B27DCBDC04
7B3476CFB279B9C01CC56F1D1EC252F26F852E1B9114ABB6758C40E3780EBCB7
705A43DA4915B9ABACD63CAB3F114572520F54F0FBD8B94E0C5EF66E5F42F82A
64A35014C22AC94B731E86835C271CD5551FB080025D3EB139C728F046B2313A
AB96814F15211A21387F3D6A3D047B6510FC15C993D398287E439A0E82C5E71E
2BD8FCDAF76C5BC7146F67A8E92C14023D6A5BD001B59C0B81390C67B61C835F
BA29F185C0181148D2DEBCC97621B1E7E9D9AE9AA465942C8C19D915CFC94110
1BF8BDF96D3DC8C4527837DB241EE7FEDD285F249B24B01A7926694EC48CB03C
F1EACFD31FEE3C7AFFFF0C5A35376BCFFAFC0F71433B47B55359AD40D487FEED
3550B14B3AEE622949369F968009CF9DC7C4B609ADD5C5E6F1D29E7AA9384F91
3B7FE3BDEEC07A8E36D8E0AB0739DBE8E3296192EF72C80076F612EF941DEE53
AF2336D298BFB6A05FFCEC61581A4B4CED1CC44BB69DD41DE505CB7E3F9EB04F
2B049A42A9F1E6A35186BB77EB0355E1970CC1CC8C58AE4F89398149EE53CF8D
ADF47D764A96D5FE26E52A54B606D1B896C8650EE8D8B394EFED155FEF50BBD1
6FD1A37098BB898BAD2174942681E3A20794FFF36761C12C01B88668FB4DFE0E
6F2941988E2D2BBE4FB271153F63B937D8B3C6AE7A17F4FDC902FB24DE4A1115
48C5A6E8224930F807137FA6AF40064A744227137D55E6CBCB56819F0BBFD3AD
FA44CC3A1D926B8736786B06895FDA68C24969F073BEE1699F55E90CB69B74A7
E9FD538C4D2EF7A61604DB9F3E3FBE084A2D0DDDA5F3E7BECEB24EC8F05DF652
ED44D2FEE5E58A32BB9DD8C85C04E2F67134FA2F27D41FD4C72F1F65BA823265
CB45332727AD11C514DE9106E91B8D869C14AD808D321239F6A2C461B9B4C982
CB9F1734B1897A529FC59540A84783C03798A19C872529E87B4FF14EE62C8DBB
BF397F83C24613622B89741417E5C0A79444E197B321BB8116BBC6FC1C6B6BED
84A8183043EEAD380C9ADDCCD80C8C64F1F4BB81948667A4103AFA3E49C3D97D
89FAEB4F1BD04D8285750245519485A88FAD5252DF3FAA6364C632C8D32819A1
452EA51C9AB784C23CFDAF6F044A5C2AAA6CC85A564E695F084C94FC6DAAFF2A
9D3F119E9C9E53EEE8AA358ECE59A563B4BE5B7CE1DED13F0047C7A6B6CB397E
A11F985CD3709694E5DAD604F15731A523D7CE100C5A4B0D4BAD47CAD5EE287F
F010AF55A4B864B822E4B9F6FDF217372686B1FEEAC57C32764D531E3B5CD8D1
7C350767AE6499663C88B604B2A8F947700A630BFD6A54759FBA4E6D45EF87E6
54F8A53BB617CDE3A95FE588F342ED1668BD78B436073EBB4C69A53635336054
7C3C45AD5F1D7BA1C34A176F23670FC914F8B8ECED4709CC7E676D22475726FC
ED59380E334EE75ED80FE8A7B6C80DFEDBA2A03212B688B37BAF7CAA51962DD9
2E7209B2CCDFC5C711A3A752FBF80C009DABDEDDFA9138E7C6E4B118CC665F4B
861D3766A24140007F4F5A084D18176A2720844B1819A324AA9CCF64C7D2DC4B
EF9744A5F857A3BCD2CD0C7FC9A380FA89087761D94B72692D176A8EDE4DF6B0
FC0740AEE590CFDE3C61BAA18B28F5BA8160DABC41DA079DA4A751DF9A610979
6D1D5D0AF8D6B0D502750247BB25006F466250647F37A36F4D5D4E695F084C94
FC6DAAFF2A9D3F119E9C9E53EEE8AD43E7D211EB02457653F21CCCFBC9E1FFF4
C330422061EB0675F1D60FCFB1B6D26AA24377760FEA6FEE94F9B81557122CDC
8E3A30C8724D6F684B3FD6F3F107F4C9DA003940D06ABB918791C56B3917EDB0
0EEEF0FBC62DCFFCE9B608281189319696D2B0B62502284BC10A55DC4DB30960
1C4181DBC8C580ADD685C1FBA496C0E033CE57E64863E0F1ED4725EE7312BEB4
0F6EE7BC88E28B653076CA53A9D73D5FB903C296E7B8D16450525D76B03E578A
BE923BD936E8B34DEAA74C0DF41C1DBDC584A6665F8C59C1A2F11A4F507FADCC
056E232FE935163335D5593A75071F793CA0AB7C5867074220414D1823406F50
858BFBA1EB391C5E4577E78F589543DFFFA3D68BAE26119264EE1030CF60157D
DE641609B79E1F193394CDA217AB522AB5851F8574ADF4D4468318103AC9943D
C5C31608B94EC55FAAA757B63415B05CC0497E0442E9E36A5F86DB77D2953204
A11AF4D158E0F746526F2BB94A933F9098F173D8BFFFD3DB50BE815438A3C46B
D16B5EC42E06FC203245246BE584F1CA2A5932A0D57DFB3A0C996512C89072CB
39B2431A24EF1479E2F09EB565FB2C828619517839D51030B695AAE2CEFC07B7
FEA769AD6DB847C5FFBF83A9135CC1969B263991CE186DB3AFA1BF4B117EBBDC
9A4E574D97FEE9AC41452C855525C48F3B4E331753A9C1D017A8D78BDDAD55AB
EE13638987E141E181D826EA05DBCFED55722B12C8E070FEEA2648A9AE955250
65CFD6501C1A3DC6F19B4DAE1DDF8E867B5E6B907F08AF08F3A711D0608B2273
DCF4CB3A1CB631AFA51A23677CF06FB9C65F0FDCD24C4CD8D9B4A021BD2C712D
35DE85A57028E71A8C9EB66B5F8D298B92F6B02A14B07446DBCDE9D6420E6C76
2E7D8811F0B70B0FDF4FA8F2153C35DD7F6437716B282F736AEE1A4F727344CB
A04D1A0BDD8457978429DEC75D2A0E8B21B62BEF5EB66D79C82CEC88F948E940
EC0639BEB7F11F2E56EA59E9C2459EEA5429DC71047A8CAA9039893530D2DF97
6CFC21F029256CB6FAB89311C8D330F0AD6E39865395536828DA89CD95686F33
F0EF84E03C60BE701384D766CA8CACDEFCAF9E7D3FFD9E69AC60D04886D10637
42D723EB1C06B948EA4A37115F01BDFFB5EB6CF214440E4DCFF294E01915AC36
9529BA905766ADB2EF24EA02CF97B1D8E1021F51CA294BDC7B454129E6DD0803
880E1EFFEFC885746324E0D5188AC6718F554CA3351AC9D5C2D42B5DC972A1D6
E40B220387B025179C6C7BCBBB8D9714249A9A7C328D78D3DE205DACF00BCE93
0F6409136C1793AAD1ECAA2A3CDA4D80384C86FD1D4E42D1749CE08AEC4630D3
E62ABAF9BACBF92A2A6E252001B79F03F3093F321CBA9EE3E2FC4D00FB76F15C
9DC68C138FB4F7E2FDDA8B62C9D15D146B1F79468D135044625266E58B9BABD8
9FA98E8461FC7F9A68707004D825BBBF84FD99940224CEDFFD53A6555556089A
DAB4DAF9B826BC53D97B44F52B014CC1C4571AEBDF9A96304B33046CABA81261
5B4088F6EC43320D24867624620D636BD5D74B42B0388D34CE00300E4C81D9D7
39DF88C655165C148CA55C7A1936CE3F02EA2E6627C292001D28A40628F89D0C
92DE6149B2BF0F7362CFA24BB2F3D4EF7D39E1902C53053C27FACA90E170EFFC
12D2D1F2356F8A3D634E5AA9137DB99F4B25F58B6C3937F7A3D8165EDF4C74CB
B662283EA60DBEE9108C28BD3BDCACE2D523AC51DB2BE615EEEF47365C21CC28
D856E1923E8FDEEC710B6CCFF25048A503F72204FEA323B18B181C72BACFF218
DD3D444E26503830C04AF3FF2FB05052270E1F34255D8946E44F270E02730841
A22652AA30B419B1A7471032F2A9CD0B0632416E2316A739A2703A399BACCB0A
38FF9D65329058203176FD4C2D16191D8876927CD90FBD2951925DD3895AF5C5
494FBA8B3BA18E2291B934F2683C2E0190194BA115354C9E7BB83AF76762C2B4
FCAAAA631C5156BF78580BD31808CD5B82E47366095EC153870C2B19A306BB15
DA5CB7FEF1419B1470DDA02206B7B7411AF464F0F87D0455F58E197E3D314A99
EF00593548C7CC878821BACBF512AF0F0E49AEA0BCF3BD235FD1F5601DABFEB4
3C8C730543071E483CB9B1E4AC5CFB2C9F6FC1E372B95E310182F66B217FD6CC
9B23CD9DBB08CE4B28C0ECAC880E5F0AFAB2498FE1D79954BD53619CA37601F8
0746D41C1DF757C4DA702C490ACF62B8ADEFBD2DFF91739D68D7B0DADF133520
A0F4E9933000A0710759B6D56F83209F1234B69484C237E2D1E2E64C0D483293
29AAA47E7C5A88AF0FB4A3861C67A42D0010D9D2F9A7A1FFE6D41C917402941F
889440828C2A04EE2A09FE620F47929ED4DB45D220B878C5CDD3C5C12C65643F
2111724F671040E3E00F45773DC20480C8D6BB75756FFD8F5C7F6CB5EF5A6EF8
CBB6E313016221128534D79F95D49F2E0190DBB91637534EF08AFB652694F3C1
6DE0CCAACDF129B2BB843A36E356A5A081C99F5B28FF8772D7A7A52EE5807B40
59728E6FF57321BD66BDDCB3DEA43918FD73B8223DA11A98BB52623C6E78850A
B645FFFDD40735ECB23C765EBB37367CDB40EBC13094B92E378C542756ADC232
B896894B11B6F775A729A2B17CF65E55792370C841821BEFA38DF83E7D7C28A8
2DA273F583762972D89C2459188F844A47B5C8BCFFFB0EF5FB307A8A2DDC6589
85F92261EDA6CCD9B4555EBD9C91782EECC9112D93E4E93FC183B9AC71CCF850
01E16842613F05E9D0862A067F74BADE2E7A9DB397EC8C5425C61F68E3ED13D4
A0C81B1006F2251A814B274DBC4407A5EE2215FB2CD1C5811F86578F44E5BEB7
F997758232B7EFE394E2E1F32E3F90B51313D7430BE1825C90D88DF40E735409
9B9EB33BE4747AF13D0369EABE30E90ECFCE19FAA6B02796146E427215C73BEE
F20E828A46681B6BDCE94BC52D51276F4BB7E88D9B2556169FE98FF9B3CFDF3C
BF5B2CF182099C4AAD383FC67EA4612F4F154D2798478952AE4C8E2478A28257
BE4461BF0D5737FEF579DD97102605D304EAC41E27E9EB78ACDDF9B6FEE71DB7
A580EAC359CFCCD4D9D8EA663BB0FCA9AF7097C516281508CAF45DC022C87C80
B09AA1AB8115B82581629D0C9CE8BDB56672A6FECD532ABA4DAEF7AAE796B055
0FD7BCC97D2E5C7A2BF30C27280DB9C56C4F649456956B785271FA600DFA245C
1CE0B5E19A665B6A93FC5F905804D152E36A70D94DFF8867426D50245409A290
DCDDDF2859681D7DDD3D6C548AE06C27913E3DF2FAB630C7A12F54553381D25D
8428BDC73E408DF460EDA11739AF3788BABB313D58FB605A64384C2F529685F9
65F25D9E0B3809BDA31891A2F17F603FA96532FA00F88F3F22DCF2AE0277502F
B60CE29034714034D80B72089E755B68633D391B920A0C7D70697B73BFADEB82
B7C4A1D071EAC263297A33CDD908F8CE2CFC49E0FC2DC53756011358C467EE03
A929F373697CD318EE0DD3D8776B8652D02E450911B9742ACBF7875898BC2950
BEAD20E38333B4A9D8774A3000FFB25BBB928A198E5C2A45A538E8E0ECCBB9E6
CC6AFC873DD270E955214CA53FA23B2D27D5B17ACDC041F923737AFB4D625E77
288BE6DCD49E7B623D0FD9E157C98965416FCBE5F7F0BFAEE60DA61DDDE54258
20A5ED5CF22A46874F28BA1ACB76564CD974075C1670BC56A66B2C347BE7C691
9C2B5834B520BABBEDCEF169BA87C83DBE0F0CEB9B96FE8BF58AD32AF60E534D
81075657579A0241D35080B772A281DCAED1B2AE879E7BEB9302F36A826EC2C2
1F16F9071872D10DF18FCE12ABEF5A38AACF67DDE0217905ED11DF349F541532
81472BAE9326DE81CD6B0FF6176C13E0534B375CDE3CA6DD7143D1FDAB6D1CC9
1AE662CB73E82E06DD21A7C173D5BC371FBD939C42B4A5A20E344807E04623E5
A083B06F5AF0BB69A7155A9563A3B3009F37E856E1E39ADD6AB74B496DCAE5D3
2187979E9CC09256FEC0FE2F17E6C5678B827004B8F2098A92C807BEFC56908B
359302BDFBCBA4C7B576C35EF6EFC93636BC1482F58C6A6A80494F02A74FE212
419689E7F2ACA8DA3625DBDA1B37558100D7CDB839705408A1249F3175E65964
0825731A12F98C3C20EE57B0D35F454BA332CF97F6E8543B4C8DA741023CFBE9
F04154797AB7402A7E4EDAF950964E903405EEEAF0EB2E785D4EF9391026D75C
E7A11CA281E861BB0E2F6D9487303334A8479BCAEB272DDD92972ED8E7789EF9
899B5D5511048432F2E80E18174791A6E15E13987EB96A28F7B3230231DE743A
60BC0E04F067A5C13D434667F08F6DDDE5B9B0965C52B191AE01721D88A03BF5
FAA2C6D5E55D643EB591366950DCA06596B169C966551150795FDED603C91AF6
BEB934EA33023152C25C27C3C771B5531FF2AE78C04B549FA1A623A71A8C8C76
D2502BDB72A6A450FAF8A7B846D5D7690108E2BDDBB7A29E0E16FBAF2581DB91
3B07B991B03FC783EC9AC7A95C0832ED8BBDEF629C482ACB47B78AD526567B36
35C2DF2D8A778075A3AE524CD65D4404D0323445D7B0D148E1843D354DE9CDB2
0B9749C1033BF3AF51455B475EC9692E9E99F6AF26810D0AB4EBE2D73FA6ACF8
B48F034638705354BBB885AFD2113EC467A4C0E796E0769EEDE4838812E3A65E
A7FD73D69666B6859ADE6E5B940BF9377C91F9E00D3730EEF2FD1B1017CD15B4
F97B4E039CFB556F43AEDEA439FBF139A16A553428365341688173ACBB5E5FD0
F0E523540498F79D701A969FF0100DBDC9C4A58C2B81EC99E8E966AF3390E3FB
CF458D3AC709D30285E1AB798394F83E6835271C13CB5304467AADC6D2FEC3C1
59B04570561291FBAB734FD330D412A44B5FAD4031F8A6D2813AFFFB62566B08
C6166BD76A7CC319C9611200706A0CFDE70EBF5D80EF6F80B9DBDE9978EA4780
3A7028C2BD74CBD41DFF5CB88D0BDCBB4DB843CA29C03A33FDA8DE677CCA20E1
E32B15A96B96C65FAE754FF556DF6071E03560F26A1E65EEE09E12C4482924D3
484DA84DF20998014260A53269FBE38672FC59BF4042F0ACF320513D3154E077
38A2E39D6AC9429F1A35938912CA5172248E9945997576593D9271B16920B943
32B46E56FE8413B74A66B44F623D0C35CC8E183CD3F00B2463BCD23C89D64688
9D57BF0414FE14AB93729A8B6356C5242CA36B2BECF9DC186E0B61727495EFCD
43C508C1935F6CA632608C2514C9702CB44C600BF38B70C87E586957AC962A19
C387672A4D101E1BFB07CFF9F577580D65AAA1DCE0E4AA6C193AEA970F45D01E
FCFBBD18095FBB885F4B74E77A542ECC85D27B1E7B2892E94414ABBE928E30A1
72D59CEB63338D52AAA02A40BDBA5FF88D8008E1A605BC8062E675FFB48A0D1A
B9DDFE6A5A10F028AF4C8803F18A2569F67BF88C6CAA306AF4B343BB10D3DFC8
C2B2F371B1559D8BEB245FFAA7955250F08E8F5F56761089559C972F241B85C3
465B3C551DA0888924F8B2D921147246805C3CFC1CFC72AA0B845443DE308C31
36193B0AC173D443C41768EDB3EC6DC2C481393ABA6C8BE8AE73C8D54A057433
5DC5551F3F64F0823862C6F4C67FE0BA183E761B5E05817564A7EFE6EFDBC4B7
41C2E1477129592C32C1B2BB3CF2C7CEE932619FB59E82513A94BE894217DE6B
1961B586A186D94491E60F99BF13A26A91368AD5A88A8B57262A9C2A79542595
0429249F71129CD656CB61A35E51DF7678D42A33A54EBB11938889400BA136E6
E6B5C5A57285A073A8183732EA6AB11047D83B4742731265EE3A44209B1A0030
FCC519CE2E6E956391BE976C2090470DE79E46796B158683FDFAFC2992D4689F
7553DE7432491B5EF1999CECABF7BC9918E80C82F1DD153F08A82D7C182C9895
8AC2F1F1D0D4B7515874F23DE748261D18BE773A523C6315A57DD666A02B1741
F11A8EA85DAA7F366C3BD9918C3FDAFCF5F26FAA3165FBE64C2205F9F58DF8CA
D54C426D3E5207046F4498CA0B4D5B5769E9342181581681AA5EEC049E3D0641
AE6B28880F9C43681C4AA96C21ED9237713DDC3FCF18AF1DC6EC83799EB2A1AA
D8D1BBF2244E10185F6D901D93C5B6787D709DA21B98B9F95EB2FB0585546B8C
254BEF7A9E93EA296220ADE4199CB323FC110C8359F19E948B7A429F2C4AF001
82F8E28417EC5BBE4366578203E863866A036F60E9B54B78BD6494CC61AE4017
80CE880C639397437CEAFD132EE6E272CF3C9F773364E1416C8B58B0DA0CAF77
1005135EF22BFCDD2547DA5D69721A9CCFF4C22BD8A82DBB5DED06B89099BE22
DCBD4F8B15434E0D862D8EF34128E61FF74326092B06323B6C0F288B55340E2A
24629A84811624F91A9510DFADA1D20D8513C64D3A1F78843A7E8DAEBE2F8813
556EB4C8455747C4662E3A87EE9549A43BF17E79E4FF8ADB019C894698B234A2
86F08549BCFD7E7E0A23C7938DA600319A4A81D614F939EA6E01528C1F44A8F4
BB030D7BDEE920E7F7102E0ECE823FB636BA84384E7F5CDECDBB01594DC3D0C7
C8B6147928A0262792AAD6AFC30D7DDF16402D772A83F7F573CD3698D8A3064C
E109A8A614975CEAE85F5C96DCA2BD7026DCA2DDD61B3CF50B6175535B17696A
15ED6D572F73DFDB537841F0D1DE450FB3227F2DDF7DAD4EB55D4DE05245F398
7FBFC0689BE47F1E0290A056E078DA2AFDFC0EECF6DA4FE89E356F90BF7E0DE0
E02A1D2C01101976BEC54ECDFFA1203BD6DBE79E9458B9FCBECCCA998FE2C678
5CEA3B9868C72B9511055E6A7BBF3A579420D64CF4758AA9F67B38BA0E5BC87A
59586F40A8B74FF64283F15EAAF05E26CD9458A821EAF5EFD3C9F551F5EEC233
F37A3338F1BD5BE28FC0E42FECBA0588F5D55F8D37D6ADE7FE4450A50FF6B42C
DC83133B3A3731519F77EDA4AB72FD65200289983BAA0F986483BB6508E95AFA
765E4EE55937854CC4349517849FCE592C18E3A3DE39193606E3ABF34EE4C79B
2A4734BA1D8B5DCF056427FFB9501694DB62BBDC80FD36BC46BAF93D8D4E785C
F8C3987111C4032D459FB1ADBEDEE2A763B3798350724DC28E80F29CDF397CC1
D516E23B21F8E87B87E3483702BECC333EF1B8001DD78C7ADBE730894D857700
72E3F5010A9141043F4B9523BDCC4504200D11EBC3E8FD353C3DD463705C8809
11C50507B3D3B2575CE27A5CB07B042D3D6BC449C19C6FACEAD9D3281A45C986
927A57A61CDD39560B3F76C20A4EE6CF189C069A3E4A6DDB561161F232125646
0DA352AE3DE5D771C6C3950974424AD380B05BFBB42D656887F0A48CE89803CF
BDB0D1D481F6C7954AC94E12C2D6AB935D7AAF978B851C02E3E3376575C61E60
C67D7A9BFC853350C7FB7666115631072C3D6D762B89233CB44390EE8CA9D18A
7F42AF2FAFC690EA021293AB884372E053C0E6E435043FE03050ACC430A131FE
9B0E3617C84D3B635A701E53555A41FA4A0C8ABE008A41C13E4DE560024670A3
50878CE265B6FC039376A868093CB9D660C6EA55984565CCA897C0CB2A585497
E88BB47D755429B430A21C8B05C260F5B6226920324F6517CF9B3FACDA62941B
390532F19F2A95E5614FD2361F90BA2C9EFD891CF5AE0738BB142E82A8FCEDD0
B8CFF3B8A3E9D4370AE216331EF27C1433A5B21C85C48E1CD7863406A90AAF53
8D3C565F485E6684DFA71D95CED943D21778F10E72314C412C5DB4A61C4291BB
0ACDCE15AD59DB50AB51AC78B5C98E0F9E1E87D4AE50A44DAD3973824B28E045
152ECA32C943FE7B95CA80097B1D578F2B650425B57D018274B0DB3A3028E484
FC3A60614F149122B77315772361AA6CB358BF5500661ED9512B87BDE9B75E9A
7247D810A3E22CBBCDCC353554192EA5DDB7791B4CAA6D49EFD69340B25819A1
DEF142900353EFC3A71F997E9E8F4C5CB9A52A15AB7D6CEFA2BD924A5BE106E6
EC6F15E7F3F48B41014D6F7910ECA1F5DF7E604D1B6D09A5C804FD008AA3D3B7
D1FE5DB3743D73F39A9A9E2174AF47F3868BDFF66DBDEE6C8EFC3A477D53F951
4C24C03B8EF5E00B0D2BF5973CDD1ABB0D6B406B67C4DB10629D785B3385A4A0
9C7581D00AE985B72D8570E28EC80130B80CE6DEDEA486DB889CC056968D0248
4C938001CA121164D0B7B18AFC752138AB2199D0D8F21492451B4406995377BC
39854AD78ED833E8FD3876A4A40EA3CE995448B8AB0D4650A67D83D0F49C84D9
4956A1404882006CC4A20EF6680B3BF72C79C7EF1D7EC057B46BF8540AFC6EC0
3F35AF5BD693B02D1DF52F5A368D5EE83B82F60A3896973D2B23B324F2361929
B90F5E71CD3CD95DCA55519A4091B3F7E09EB4E8F65EE7B77DC6C6C0F89C4EC5
FF3D812412DF7CA791CEB1FF340F36776B54D9B250A58C3037D315485C356A01
BB3AC4563D3E778EC54F6635B6EDD3D367413188E9CA7F1F380F5D35ED7D419F
B19B9402EBF4848D93D2B58C42B4C83EDB5A8A25309FF3733227CB305957B97C
A20A8D4E59E5C86FED27BD84762FD27AC0201F55F240D28B1A25DD409947F3B5
AABF44FFC3ADF7C4B374EC51108329B4CD275FC97B252D46FC95874BC2BCCDE2
BA89FE4E63D756C77409700103426F4A0FF7450C2D795A32D0BD480EA1AD9F95
214D28C2B99A56F67AA753BB8730714826C2FB3B19420031856BCC760B3AC688
84026719A13B84FCEFCF9B0F76F01DAE824961DDF083940BF18B4DEC60555AC1
84B80FA7FEB4519B26C9508D20750A5273C8CA077D8042C157328DD1C2DBDCA4
B3BC553994CD453E799B18AD34C68B95D9E2AB01CFB4D1FF6AA81102C6CE1AD0
A8F5D1CC07E188D561AC9028983CCD2CFC89AACAD7BFDFC0B1F62692510D1261
BBC640FD298CCBFC7F3460E5051BEBEB58265E067DE7DAC433B406E6B26D7F59
D35C45A5392F8913EB0F0444FBFE7D8AD601516C18B61CB2F2FE5E3C0CCDA9E3
D861EC0B97A8F5D674B9BEE9F6F7BE367C1F298B2E6DF9BA80667E6A90F50796
1421335ED04468CB2F1D20081A6B1CD8810944D4792B04E2A99F72F421FF5F53
199D2DBBEDB8E005E4A1FC8C2782B120AFC63218F33A725D48F8C75448383A1B
60AC31584D5D1361190AF19BF8B6152DAFC52701CC1550130FCC4BFF1D0D99E8
66776610C928206A3498845DEEFCBC9ED031E1D181A9578C70F852799CA64B36
D5A905524C0B0A3D8F2E239E64367B1B9327B6BB4A27F784B0D4AFB602504CFA
BD5B812A024CCDB4BFAB91CEE3D9CD3B3B7F8D4E7ED9DD7516773994C74C624F
93CFFEF0DB05685D1AA0511605B28C5402DA8EB4F67F354A5D859A20CF68EFDB
AA9DD382DA5AB07F54D8F3392D4EF05B34447A2B996823CD7CF94E57599783E6
6C3C4AA1A769A11ED316CF1AC2E32B50008C7D3CE9E3C69BA435E1FCEBC9F442
11BF5CFD60D6968904C639E3DF0C481883941EDFCE2677ADBAF28EDFBD3D364C
BB6C2B5AE9020E4E593DFC08FD1273CF78D430B359C0CF7231F564A0FB2130D4
64F42267C1D6DE9F80D4DD019A8E01AC3E3A49D6CFEE915B296335B6B461C7FA
A7FD55891180493205BD06305BCACE685215A59A8883B3D1C475637E751196FF
B33ECA641F919770A514C27C9C93111D6E11635C69EFBAD88ED7F3327A86580D
7C6679DF9E22F36363D91CD535FB93AE283276A70CFA004FDC1A2CFB98DB52E7
2FF5E56C99412014794737618BE410761AAC558B4451D6B3413FB950BE960140
DADE075F0D0368F3DC8F24F27EBAEF0046D3C7E14C169012D8114249272178AA
B156FE7EEA0ED916A44EAC3682B3B95D1D367955EA1596EA87AF0C9B8B11A0C4
F01B94FDC5BE3D045AE5B35F27862E5CF11C3886CD6A74273F5204CC4478124D
C65919B5DDA820C0C2F6A1887F6BB52E01E8C34391F2E2A075D66C4CD8409DBD
4BA90DA598015A7BB94F37FAAC0B1299F3AAB925312BFC0F52E75492A93C96A7
1C49176D6E244E0F7DF01F00B24E00C1BE7A327B1343B67130F2BF62575A483F
380DE9176CA33EC5EF31986D4C54220EC028327B05B7C4C620BDE152D1F2842D
69A8CB4063529DA66FE556747A21BED935D0364A4FB01514D99DAB95E755EF98
1B87B73D560A8EF8D8924D9E1EDB582A6CEE95005F9263D106AE99959154C437
31DDDBFA0A0B010B3E5EE4460D4472751F375DC80C7CB19CF95B4F551A10188D
F4652099FA4A086D63650BD77790EEFBC5E7294785ABF038AD630F2AFA243C57
4999442F195B3BC5421A0EDC239448D29E816D256B2216093BA5E44B1D358C78
79065C5AAC9148BC10807D36DA65C7867271D68020B72CD6AB532FAB287A50E8
C53F803D631A430433877B592FA19E49EA0DB247F35FA8257D87BD7B9BDDFF5E
B848F8FD41BF0D24D0B7BCD61408BA9BDB5CEAF1D369169BE81F9757197D9D89
211B0DC693DECFC03F3614A031DA59594E950B4D0300C8448DD770C5771D4858
A8F46517CFF904BA2676E2871916EE395788714483827974177BBB507A61ED83
2EB28E5F0A1B84C8F8992D4E5F27826D144FF1A6F8AD89125184ACCCF83CFCA0
B3BE75E98F6E71843D654C6FF3502FBD90DD698671D250052B462A18FA7F1849
0BDE3E4BD74C1CA889A52C40286188271DB2F5F0048F255E7C3A82624E4AB492
F8FD2C6179997EF15AB33CE5E01C7C9397855377AD8A29E96C4A5C24A6F7BF18
EA8559F2A591C08F94E2E2B00C53DF9788B437E52876C51E435975C7369D4838
F92608615553963A589FAB674FE8220DD46BF7DBDB7DD4528083211B5034E87E
3294E43B6587C9F1FE5EE8557EA556F1AD2F047B55E7417B12543303AB1A44CB
1ABACD7A3D7D91ECD88754C8681BB40807C962F0A74DFA643FD23BBA0B28F912
440D7950D3E4EDFB6DBA944E3B9200C321983CBDCFB68F4E1C8E599580DDF967
6F2A6B79E5E16AEED4A514626C26F0520B15856093AEE7E42F8AB16FA400BA3A
F256821F518C0EF40FCAD162A24532438323F3BBDC7C2A46988A443E112DAF52
BD9C89659DF6DE61FC66D13CCED91FFDB64C7281E2F83D378B56C91F022E3936
3BA3D4EB1275DA8EA8B6348E906AD69135A83EA5A333C778B5C6B8B5D791E5CC
0C055D6E5E1FC04E13880A2B7C992FD4A3009483EAE63C762CCF0CB9C34A691C
B66171FE36B3BA415820A0C3A48ED7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C260D0E3D67FBFF208B4187A30472FDA89
1AC27F6E70A19F685F1F909AEB88CDC05F7CEB39E1C7E54CC2E7318F8D957276
0FFA000582EC243DA0A9B677C3604D13492FBEE039B2FD87A31B428501DFE5AC
0E7921BB302C6476ACBDCDFEFC8B7BD24AF41D55196DF6FB2F28D9E2D55D0D71
2E617802976F8F223C8ADDCA895309CF945DB99410D0BB68B865F3E4BB7CF3CD
00DA8E491D3101479200E5F7A3C35D2DAC2AD31A4A8FE8112B67C5D2878E81A7
554DBF0C2A226014B8B3024CE88091E893355BD893FFB34D445FF8B74EE25981
C24E8C36BFA67F73BE3B0B1EA301EE8BF7F102D69F47EE35F889A7107E9DDD89
1EC4DF4956D533E0A0670D60CBD73D1E1B9865CF9EAFDD170CCDFB350BA1C7F3
ED4F1FCAE0F8BF9ED8F0A018B071BB90419EFA4512B1227E6D1174CC7D3D57B6
0C97DBC0FD00F170165DF48825F719AE145A0224A50AEA86FA712230610C8D83
F4C9F5CDE041E156D38BE5D68D519F4C9FD3DBA03EF6E49A632BF7DE5EC45B64
A1F4E1C73C023951C59F3E09157F87CA9762F00A7EE36053F8F16D2248EFEE32
C3DF4BE75C70703CEE4A849F90107E0C58C166E734C16A318CC4ECC1B69AAC22
94A0A9F2BB34947AF82D8D10AB50C26895953E493CD5E3519EC93E0D84A41699
E520700C5E54DFFC63F44C24F76443DEAD2374BC8D310EF915D13119E5609F7B
98B8D14FB6A6A89B1E97A66B2E9B937B85A69977BA8352BB68ECCA70D0771191
00E539C2382994EB7B0C9F7649A8A413005DD3E363237782E3B2AE143E600696
83917D8D87F033A910EA478C1605A709DB9A94BC08D61C1A6E98311D9F5A2144
0987FE7AE6ABCA16D566FBEA8B0960A982D2FD7EB88FD9CA0AC8FB5A2E119DAA
9F80083C9BC54F4586C95828328970333D68C7090E454AF9E45392F1B4CA706C
968D8F3BA9DCE374762E175D434288CA0576FDB0D7625E1B5ED58FEA3576D091
D838B5FAEF76DFE5D49BF4132C19604D321E0A4F6F62668E644F9F2FE08C7790
DFD1FC31D5870E605E7D08F03D47AEC5B22FD073701F486A18CFDD2E70DC54A2
A26B1D78582A33F532481524ACE2C2C2BFA48D28BB363416C065A47778839544
A2E2D58D2C0B13F44F655AD6FC40955A3EE68C16EF312027D496A7B29222D619
822D08CF5ACC9DDC68D89F32A2ECD19E237939C43BF179895E1A404580399E65
C1EC0F675700C80A31374CE703F00747B6681DF1D04612616F817CA734B68464
35FF97F246CB468ECFD40D3519E95194C3143340E2573F64ABC3875E7151C6C6
B387FFEDEB108650025BBEC52700BB11800BA655003C920EA91E23891E5340E3
40AB4B4B3E99F7383E534EF6C936DF6ED77EFB07C3DA6F036ADE9E871E8B5FAD
8BB153024818C449D1175755ED672C537AED134379E63D9D00667CC3658B3E33
987BE2F5376231787088260621587FC16F7612E260680490FEA4A1C8187F6EFE
88FFAA20E0DCAA36935CAB6B0B33BF674B242CBF5E4C75D7B9426F419A31BD9E
3EEE0CF4B5284A1332B3EAE57C27B1DAB7F691529194054B3709508F2CB51C63
D67FBE4BF01A7ACD72330ABC9E413D1DC2AC8A2BF701576E5BF8658DFBBC52B8
07828E02BB2E6C2BEE1CFE5391674BA68E572E13028779C254BF516641EF95C4
32241E5BA5169889D0DD08D5D5B666B60ABCC53F96B823137FD2DFFAB4940017
47473ED6CA6E164AE7693B6F5E02523C7F041D6C681C6B221BE12A1B419958BD
C5CE5269FBE38672FC59BF467C1F4DE2C960FC8DD8350723042CB80FA217A89F
4D286B6F5AB317859A338B4394A3A0E36CA816F6272CB6C28818851797154291
5D70737B3F22C6A831A9821624AD6F0D112BF915FE1CAD98D0EAC02F1CF6E09E
92D62158E8694CF82916F0AB41B429CBF347632CFE037499C0C8F3ADB9CA97C3
57ABD25D6B8DCB78E81FB5B8D5C70210D548134565813A441931DA182401251F
09576C023ED491D3FE57C39699CB7519F3F570311C08074B3CFC4E22505DD7E5
031793A4E70219B6569340B59671BD93C1572E7ACCCB91CDD1A857949EE410BA
7DCF000BA5716D4F4507F9953D8EA3833BE27127E1C489198821227C1ACEB8CE
5FD9AB0F7B3A0929E777C5ED85D8B6502C2D4182A83BD0978C073A1C110CCB01
06DBF37D3D6257B109ED152B83BB3238BC779091D87E5D195DBD7CFB9AD96E15
0708D2DD9F52E223FD098660B344B76A7FE3FC83B58B7334EA5EEE14B739F60D
45D102706C99D92E1CA5018CEB11AD971D82FC1EE6868FE3D060DD7B5AA766C4
DF51E2F20A7068432DEC0053CEC7BFED397F59BEB40AF348E731FDCF2C1789F5
D48DAD1B9169DD75574B2BDED2538C0F8A78C65E7ACA7CBD3EDB705695E407C5
5AE38713428E3431716A47083CEFAA1AB4AE6EBC0FABCE2B6B5CCB6692B463FA
2680A5A1E7FED1E46283199D5A2682BE2126E96D8A5737F03BCE6C4646734B00
7435751050B43535C1FCCDC397734E25B9DC2952C9B101276FF63B62BE3522C0
F9C45C403EF93DB577D2E225B5250B8DC67657E3CCE0AB011371A1F347764850
0238C40EDAC04F02176A91212484F66764A0D815C7E354B73B808F50AA36B645
07B811177772757A5E242E9C1DFE6BC19A289A95E15B66DAF0068DC9C65C037C
7E6832D316727EA0F8268D7697CE41A0488BD81A969954766C27760DC2E5042D
D5ED7164154AB4069734E1013EC8E44363ED00547D4C1F5ED323C61E323845F4
061430AF295D8229F2B6372A243FF94B73ACF1F7D10B29C97874F6459EFCC176
0E9C6C78E60CC0152340D9B7B10C8864D21E57F453ACBE58FCF00884C57203C0
4D500A54EA2E91D9940D8CA147C1035893E2D1C6AD44486E57F877EDDEA5EBC9
DE866B03AFD6C619A8FD902FF91CA986579EE8AD097A9E96D63FC72C5FEA5CF5
284AF8F63251495D697C3F36A2F9F376C9E2DCD603504B204A6699DEAF529FD8
36B25DDE9DCA11FD2EE6F253A60B2B187AACD93FAAC2C3A7EF82432621B73BFC
3A74815A314A5340A043393BDCD349EA093EDF3861D8055DD7605F9D205A103D
0B4E320CB26E2BD241B993D1925C487FCE04C40826208216A45C23F6D07CD446
6A31B0CFF132F8AE3AC5B29CBD2D073A400E7CA0B870EE6EBF02A0707CEABD8E
7B415ECCC3A6CB7A5F2F60CA54F14A5FF3B3F2B3A0D09B78E658B5B785D2AB68
63AA16D6C4C82EE4AF7AAD7E5BD75E11432BF54C80E629F3306A5183BC623F91
A308C70CB3A981DCB94ECFF2363CA48B9E48F64056886EDFAC2A830EEF021FA2
59BEEDB8E53DF62FC14593FB1045CC366F8650AFE3009F4B5B5B94363EB81B61
D72242433A09BACB5C2E1BC3888224F96A5E4D8CD7CFBFD1DADEAD3DCF8799E2
505AC7F2BAEBC8F1CEE20C43F067B52E270DD0DFBDDC1DA61DED5F77033A07E9
A06D683510CEA1CD89A67BCA5F06C8950334FB4DDA9E1BD3A55C4D59BBFB7F5E
FB232FCBE3C49775B37EEC59A516F15F22949AC658037300F1E113F46B917CBB
D7D11FFECA4C326D9D8B30A01DDE65747AF9A7354719A43C743589C85EFA6239
6D75D56EFA3BE862FBAE712D30EBD40C7BECE058645C6876A647C19F9C697B5D
558C353E220C1970E98DF57796C609FE7A9F107990F5604401CF5235CF67B5DB
FD92F99E847FA7B0D89D85CA73F6589DA9180169A94C445DB7A56C39CDAB0ACD
64E8185C378E7C7961340E398551177A7D13B2A9214A724F707C0A9E349EA8CA
18AD26F3D7A01485B458622A7AB7B1B38E0C2CCBC094031C714DD4010E98C3F4
B0F39793E523AB8F2202A4EA35FAC630A9090039AE81EB832C4C485AA946B5A5
848C28634C55827DF64290DC57BB2BF90C6F5C5E7BDE3B6219A8B2DD4249FAEB
D22D3002B9BA6ACF58E8A207CB55368FB37E1281E369DD8A03EFF3CE10683BEA
98EB2B7C1F4E93E0147DBCF1F65751F65D0DCFE08F837083F21026CF303DB053
C8AD45EE919B881181642CB1F6C34FF817FA8E8118AA5938436458B8EC95A9AB
4C9D9BDDD6483C9E6502DA4464776D61FE53185F15EDEBA3654EAC3D797E2324
E2A08F18BCCEAF2AD29CF62DE16034C4D67B9778BF8F2A1602FBCC202CC8046A
87DE75AB3D8F141B95F3251B6DABD584F17C752478691CF40C4929992114915D
DF1AEB1154E4C21FCB1072F42472FEB6AEB27F89F410C8CBAA8F91583D376801
93927930E338A0A9D593462CF91C1DC3D228BCF7E99F93FAC56AF405924BF40E
49AE3D7453C630FC3431FA13B333D5C0740478F55C4D6DA862B50F90997989CE
492D884F969FAE77F9FF2EE7FB7DF90EC4E6205794ACC10BB2DC028A50CF1F98
4E972E628C1884D4C6CB1879CF83861B93802F4BA86C8DFF65A35D632A676599
386A9FDE56721B6271CBF0AF8D53B79FF544A0C6F98C72AB9F84F3C354B1D8C7
BC445E500C128AA2B10494823BE831209AC881C6E971875E956600DB7D9BC9E8
06B2B0538F96B28F8E5079E5B1C55D5BF69E81508860E3A54474E96780AF1731
5D25DAA9FF60D639DE068E6459B14ADFA9FA485D266D62193E2EA3A0861A653F
3F4DF8192D7A94FD4BF2694A6D9CB09895FB773DB25F1A4FBD03CEB58C7EDF13
955C477B14256AEADF217F5E4092D1D03ACD2FADCF137E2863BF87271B5DC461
5D281B73F4DA92823A4FD66010FDD58D4F8CBC00199B1E265B3DC015029A4189
E4FF15FEB1AE30C228F2115C76EF1ACD02C1501537F65F5D5C16E5ACBA4C014A
2D47DAF56605F718B787A38CD24AD3792C3F2A4E5099310672F072B8C476C665
85599E625FBCCEC7D015551B07AAD8C85C6196DC28076CF4C4A6CEB2328F8CF9
DC677D2EB637A72100B74BE22A80B3B71A3333C87D3DA3F5DB311E5672052E05
C3A5CCB847F0689B96842AF50BBED0BBE3BA0D089E11BD8BEC957385174785D3
DD6ACF0F1F7F0327F0AEFB4CBBE69715B14E066B59299DD9529CD003AD4E0847
689E519FBB2B7793C1E27276C8B62F82F71EE259411685F5F363A593AF5E695C
0F6F6F786A20316B992F547DE9372FEEA0BE405021162044B51D993027884012
CD4D69AF731BE9CA608D79CBB858A7AC9510A95F3973DFEFFFA71D9E1E55AC67
1E87CB7684B4B2C5EC0DB79F16DAF9E1B4BAAB41A1A7F349E231C756F4EB0610
E592C567EF82451009C0401F4B24358F69914A513E0B6F2A90442F640001CBED
1C263140B0062DC0C4F50F4755B4CB54F6677E4FE9F80D1180B1FCA1A75090DC
BAE8DB96C15B184D1BE8D4CEC2DB8F0E70853D17814C9C0B8D4D3415222AE59D
E8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C42D550340914BBA7C438FE513
0439DD96BAC786787D295100E4BE6B9E623761D24C0B7CB02DD90DC8A2CBBEBC
09E44026D8276281725274B64C9FBE525B184CBFBD4CE21E9B9AFC48061FF544
0E6474701B7CF41EDA7BB3B90A0DA4FFA1AB0196CF0B21F0851081A26969E75B
F0226CF57B4EF64B20C24ADEAAB40D5907656CAE0CA0780A71CEAB89C97933EA
251CD675EB316B25E08D5C0AD1051A6C4AADD69471CE6B07099AF0E0F7240A1B
663AA365F71F40B0571439E5AF3F9C520E811EDED8DA4E014B89A1215A2B6066
7E25B40CE5F8CFB9AF2BCA1DAD558C1F28D9511017E77DE30E4887C0E7B8F2A0
D884F8C09A5B19CF7FC58E1F434E3FF24D0318801840EE5EC48069AAE6D5A0C8
A01C8DAA5F5DCA2060D7177CF5F25AAB7D45791021199BE22D89940BD35C45BD
0EC0CDF70F847861AF5AEAD56C58A80E3B3A615627990FF6E45FE00933038F1B
E45766247545BB7EBD0BF4889AF4A03E1F15030EA41B1E8154EA90879B566357
1F38A84B53712BD7B6396AE31243332FE1E3FC91864C8AEA7916A726F924AFD8
4409099CFC3E1E4DF8435E646688A6CAC6190A493575A352E3B4BDE678D07125
08C2D49378842275701D9CB07FF029D2BDD5E78B2833CE36458A6868587A364E
5DE2EBB24FE7F36ED2F1EACB243DDB6C5673A5BD6D0F4E843CF19AF6B696839C
E77606FCEA4474578526F290F5E3E1E606D1BF5F7B254305E3C2A2B2764C83F7
FDA217DDA2B6E46728AD90E833F397246EA4C44A12EF33A54D213034E9AA37CE
0AF7C4ED41B2F7F13DB459A5F8DCEC497B6F4C2EED449992426730E1A4338C14
F18731B69684438B0B317A996878BA057984BCF056A9D38B3AEFB10A919BF008
D44EF8BE9D5BA69087F77C6F010C92022EC5BA1286BC2F48160E257BEE60576D
F6C006B65A81BD00E31B7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A9CA06
47A5A0817887BCB9F55C05FB87B760B29C99F7321F1012EB04587F2CA18F7441
26B953BBE11BCF65003D798DA3E3543FE2A4894925D73396FBD0305CC58E3129
350F53471631464ECB612BE19C84213E7FF228B69E1CAB00295766162B7BA50B
9C4156A24084CECDF954E655F1A3FABABE7F94C0E09E6D9FBFF9E42091225BD1
B2609137B821DC625031347151BAD326585A71F1852B2C5BABCDC9DFB624A248
F2B3FB6C70615176F41A8DB91E6323A72FF18085EAEAE51E4D7B7D66B4481823
B60F897D0E946089F0C35EC708D48FD3B3B6D764189B894725962F73F5C7C882
B7BF79F5205F9E9A1EC74128D244818D2685391F8AF7A536FC4BED6E915ED208
2C744D4402799E50E9465971C6B191B8D3ED752968F923AECB58B21B32C3B22D
5C02D1E02E3603E885A6F4C9949F4D5AD4F1CD0E2D284D287BF3AC834D9B7784
9C378DB01F63F4F0F59E77824562A0E86E19FB8D49646A4C3BC15E3719921145
9DCF7630AE1F32E2A5255FF980420131F5D01C86CC860E3767D8880357E50171
47E5372F54B764A8DECB9287A7A619EA936D0B6239F72579B0E99370DA9C9AEB
BC0AAA3F11E907177CA545CFC0568B9C0A2670BB3F46B9D3076E3FA521B5941B
4A74D09E1EC4F2201CA9FDABE72D2353FF01581DEAFC030C2CC97DE5E1DA366B
BAC523BCB27EED75F22A4799C741EF0E366457EFC5B4DF88C8788DCC638666E9
458B2AA416677F8CA940DA3730F89D638B4550B2727E8682A7A6649577BC0704
1B903BF7E748DA4F15A736793F0C6BEED9FCD9CF230F4B050408E28537947877
79F7699443E56F512E3CE8C856BCD306349E0917ADF00AF308AD5D1762456435
72C741F526E453FAE12F33586A69339B06C285601749955A3AC5F7C13BD46EA6
5B0C82EFC57F42E20CC880EB0682B9BB414C8C15622C131CCFA722266A137D29
655E487EEAB7641E11AF8BBED63B4BD8D5BDB57E7D648C060DF99984F2BB33AA
A56131C3C3E2DB3D9254363A00BFB2F2B2FFC89CB88253AFF93D541651CD027D
5B23BE4FC86005E73CF5E59ADEA30FE832C4FB773F52E37A9B385E8A28F9064E
84C98559415D8B6C4206652AE8F04723A732022D38A9BBC7BF269241C0DA67E5
BEC040A958B14BB3D7821512A22F0FA129814BE883D2D4CFFA721D7D11990750
232B68B801C1E350E571D93F96910C91BDEE18E063B395D8482A1BF194D09129
E2021AB9B4DE3C8C0567E70FB8EC276168589AADF921AF5085BCDE41BDF9134C
2DF0B66AFF2C036E02FDC6366BA2ABACB9AD1760964ADA8436762102F1ED154A
FEFCD6DA55C6B20176CFB38E41D005582A237629286D48D6529E15ADC93E6218
33FC3E90469C81132DF67CC71FCB5081AF3D51E993949875A1A8632C7AAE2AAB
7266038BD7CF8F237D8E9B7D4AB72F831764DC652AD7F59CB2EC8487E1D3AFC3
573EF48254753EF9B906F41078AEC60C1F7D1E448C74467F8D71CB310BBB4AA8
DAB73629A1DC0ED7C058AD150C4D5BE6CAFCC7D17FF9738781B40AD0AB672FEE
9DA35CCDDAB44EBBC0C718E10B8F95A399DFD3C62C04AAB48F6BD8C8BD63D846
1393B985A5FCC35A8891C300CCF87A6C602AE0AA7A295DFC0602E5F63A71729A
13D3922AC2BE00E1F189F9A01FB2CF6804B66C3760BB3AD124FF837C7D4C084D
F291E64C479934F5EA9823AD143D84CC102D2A6E3DD7AC3CA21660D3FD11B81B
D02950A753F3C460F00B5229B48D5F6FF7B50ADE7D40F429F96D0DCE41EEC1EA
29EA44F2C9C66F36E9033E6406E6904C934DDF1025D0C7DC1256F58600DEF529
3C01896B10A6DA71A1684F6DE6DDB7E52BFAD6E018E867FDA253BF15E1ADBB05
F04614DDA7078DF7DF8F7304AFDDF88F35E1F428DBE74E704276634C84D658B0
A0269A1FD38BAB95AA31DF4BE8804458E1BED010374662630F09BFC03B3CA253
66260E5E523AFCC8826DBFBC34A074CB3BC8C1754662B5D3FC0462AC4961462E
B55B1CF4B2482D465B5835341350E215B0D55DDC1BC2AADACC89C52E4241BB74
7C37DB43119263FD591842C4D85EC1BE70A479FCCE5C4093F4AA8854274B18E9
826CBC0D3E8832BAA635ED3F627C7C46900C1CFD1FCF2E4F2B8626B86EDDB355
D66FC9A90DADFDC11833C93331245FC75181A42E65C3E1CF5269B00E31FB47B4
F77D77725C8136D99C5BD8C57AFA1EBD9AE6E949DB069E5BBB5AB2A10AB69341
3B1AB7A35B65D857089968DD4A685E0798885B9329DF559EE4F73496FDD2B58F
8B140D4750B93EAAFCEDC3F42F4101AC88024884C018C7D0DF676726E33D98F5
CC7AB19ABE805DA22DB03751EF775FA59DC1A21CE1DE2CADAEE76E1540527E73
B23D9CB14BB185772C8861B304696DDC7CC881A1AB590B7E461DEF52DD6EC565
191C7E2EF94BEC9B9AC2148619921DE10E917D9249A6A25A26E3DF4FBF136DFD
7EF4BB6D14D462C769FE5396228125B95375FEED86180A4873C309956ED3539E
3AAC8D9694308E210C6D89E25E5C0E0FFE02BBE6774904DF74D18A8CA65BCBF1
74EF594812E849D6E543E2282FAE18AFACC74586D3DD54067F7779D9DA069D7F
730D770F19A5292DCD4C30E8928CDB1375A67FFC9369381C1518D2DB628C3C99
D0EBAC0F0017D917875BD4F188D9A3A2A4D87FC5875FCA2059C93DF06A84B1D5
5E3816E35E2D516A4350D296BC197E9B6C1B2706DC46F7F8D6551F72F8134699
04235C1C8B306357EF02FC4EB7630C8510B8FECF198AA5C28D09422292380844
FE7D375D1FBFF007CC14BCD053321843A4D058E2997B621F6D7F0172E4003E7B
7FE30D31721B0ADF552294F3AEAF6C9997239F8496FFF2FE5D5DD1C32DFC8040
8D750304E9FA55E68646E417217FD59ECACC94B7272DC613F965E02CF0C8B7AB
A8A658ECE9E355790EB93AEA254F7742B065F2C450824E24C7539BF475C8E173
34B514528A8B1A91E6A311C6FA52E9323191F7B83CB246CD2E4BD5401727533D
410855F5593D1424A27B7482D2EF601673E5E85CCE7CC1B2F46DB8AA8C2ED75C
9D266C339E04836A947289CE2D6A3326564A6B5DC3297FB49F7AFA80FB695BD2
2B0F6DD9E879857B6B39E7DC1FA69943D9D567ABBE7046E5214C0B15C50A9B5A
26205F096D63762A9B14F26068F1F169805580F4EBFF87B92A0E4040F9F5A61B
558ECE92A1702B10B0E40E16407433FC9A216DC7AFCE1C59EFFB1ECA64BE4C15
3AC91451F122BDD5C724CB8023326EDA83EEF89232B34BD8D1A690B61E603799
AF425983D8A31D130FBD21BA4CC1F4547D6E3F9351F911D017A58DE91A773485
32C91F1B312141BA6CC5B99C850C4A7E2A125A10C4231BA0D23BC56E88AEC82F
B156E051F2DD6793B267D8B04CA8D3F2307C8F88CBF47F32CD5EA9705E7786C5
718D18D9E787C067EE858FC6A68B9B83487413223C0A636C246DB228EA31C9AB
898456287492A5456BD5A22E042B00542ABBCC4B8AEB1D08B5EDEF0E0AEE5277
338E0B37511CF3AB6B7EDBB237ED747AD16E7C3E316D486AF3ED9EE1D3B4A47E
26C446E0B8F2BECEC0A29BED99575EF2ECAAC7649193843D694E6CA59318C014
5FCC5051081C696B4BF2005313F6D6D55387C03EED114ACDA13BEDEA4D61E803
6A67CDB7E5708599D51DBC7579C40FECF8939B041A8223FBBC9371D1D672EB3B
04BF0E9E81DC574B05043CEDD7015FFF40A9272A535487624FA1715ABFC0A841
256CB0CF6C3BB7835B7879610B1DFFC471BB6CCB2BF3DE8FCCEC8F095F164208
E827A9C11DE8A772D2111082CD9BFCAAE019C01BF1F6E94DA8B19905BDD82E4D
6E2C479BC9C761571C27883C79BE00C7A86E6E3B9E181071101E184E8C207262
119E30EB552CC68F79A2011DDE2CC5C2432BC832B65BEA5A7D0E8A5FAAE040F7
76F1EE9F81371ACB9AF0819EEEEFF1853D67F9A2F47E1867EC9CE37E9BFAA10B
0D8A7279AC40D5EE6285D1978B6BA40D5F8F12BED3969657670228721A67B7E8
376E57B6E45D2F375499F8118EAF5C7F6607DAF9399C86F5A809952F25B26C65
57DD62C2B52388A1B7BDB64EF5C95044FDE2392FAEE38BE1EB6D086F2AB69CC3
F684F185B2FD093493DCCD90A97F22BB0B70B8DA22B5ED8E3F2FA4335EF6B9C7
A662359D8DCCE1D2B9CAF796BCF06A14AB4C73C82A8D266AE490756AEBDD463A
19AB85F9ADE933CE14EF4B9B99042164C633B9FF63BCB64587C442CA8AC20930
D814C6A3E6ECE761C6C940133F91FBF5511551B4793C42178514EC183BE32AAE
65DC84BECFAD8714DC88840B711A771548C11BFCD146DFF1E588EDED92678E96
59F6B7FE5E0C68D5B2CB4B0A01DF450149357BD243EF56A477B3DFBCC8AF7B6F
B67E620200B5A4345FA375742A1B2D26366796627D7A18371F4B613DD42E0FBA
427EBCC9F86882CD96EEB8F3DDC554ECFECC33FBCF420622EB34B4E3DD2D6BD7
7D42D4F1646CD21A8BCEF48F1EA6472B994806D02F28988112405F80F2BE6EC5
4E07386A0104CC5ED2C68B08B6321F881E98B4C7FC7F062423EEC29B326C19A0
684DBBCF44FEAF613BE158C86BD95CBD6A63F3CB3D55421CF3C996993FF175FA
DCEE52DDC6BEA07E93C31D65640378033A2EFAC8C4620EE0F46D76D5CDE08300
34E3BDC2EDA5AB4B0FD9F3EC53D32FBA8C1B5C69DC9941DEB2E1BD49C7165227
30132DD186FB5FDBEE9826DA01DD8FA5EC384E9B78FA5A7CC527B30CCFC70412
8747515D013FC749F75BA912618F3AE1315C9285436E5868E756EFA26237F1F3
3881825B029F608C27E76C984E054CE25800DD25631C8F220596A9D2C6DA4099
98114BF92E9A4D8796FB9DBBA8CDF19857B1B2AFB03CC96E0DDEEE9FE726F7C1
2D5C234119A30C0225915ACFCE13DBBF0464D7FAF3275BCD65869D112B16C744
8C1719C88FE99BCB73F7DEA427FBFCDF4F05D7AF56D1946A608EA2655E2E2A8D
CCBE54353F36F4E7776A8116A5787FE211379BBC3E33DF49A031282BFAE58F6B
20B6B0365C6F1C69AA30A236583567EF7E3BD1111B86832EFA3675F1386F3FA0
700A77387EA8EC41845417863180E6B5584FA1EE0C760AC0168ADAE8A1716BCD
C7866C7E91E4D6922ACD09F2EE5497E8C0A748426DBBDFBE5C2E55A016EA9291
D93253757C38CCBE4B84B941CE17C1E1417E02C197B010E49F7B468D51C05113
E4DE2394B32F209ADBC81A3F255D199A354F4D28DC5CD51E108E22EA6503B560
C49D125450C406CB538A784024E8496688FADC94A77124E291CB27BF10E4EFC4
17FDB11820D3D8518F68846E3E5386A1D75068986D021414BCA08317D67F4EA7
3AEBEF22A27A8BCEA4E344C196954CAA9D901C53BE9BDD3A9DB16092B5A9B5BB
3C56B554A848C3BE9E43228645610FFAD3AC143D4935066B26129C0F8406CCE1
BD593B8DBC679765ADCB1825518B002BCE774E26C946CC12DBE3BB490E38FE8F
427C8A0924E569EA6A3E63700CD60508D6B6FAB04637EB24BB02352B8B2B7A4C
7C9A9FF21DD3E48DCB02F3D7C2B51BB37DB730FEC3CCD062AB8F79E7E373B3ED
8F12EED1F07291CEE163BC25FEE537205F61CBD24CCCB80F32E42439EFDB0FE3
39B0AC8F967B963C907B7F6D6851A48D65B14048E160A1A228EB693D31E6CF2A
DFF0F69FF5805EE9460646BE26D2B060C263168EC98F5002F02D3E7B346DB519
681D34DA7D5C1EC21BD233FCDC655E808CD600ACAF872AF2B85E7C1C3E750A52
C070289822BB0302834B1FC9CF98ACE7F8A4CB9C06F5A2CEDE9C68F323E4BB2C
422E929E92F62E89B545CC8CE837E952DF7F7905E346F2D950EADC6A53B8DBB2
D29A967200FFDE2DAFD97A8EC83AC798D6B0603BAF3A3A2ED80BE99EEECFCF54
4BC7B7400D175D9D5EA299455368A5BF8C716622734DD713EE81617EB0A7A882
F085502E0046C40309F7988B8059DA7353BE3E058F73BE24D1EBCA03EFB98F7D
C1299B7499749944AE39E5580069AE6DD3647E9BDF0DAB9B666C7ACADD9B7156
55E5856B03F958928D7D9212CB32E505E863ABA235E6B2D7C5684A2E0304E937
6FD88FD8806394F2AA95F0320828C6D74015E8BBA95767D18142144D77BAB2ED
0A4447580C3A67A90FAFAB99716C2DEA7403DE02C363DE731EDEA79F38C99B32
5A3A1A502672B17951401E5FC1E44E37956FB033A28029E3549FFD49F5377E16
806EDA427069655CAD1D168A5AA473212762E38AC1717D58BF9EC9AFA3307A64
C170D2F5315CB4109FB0977C176FDA60D7ECD7E0ECA38C52A6D63AE385200B04
C48D96B86BA1D889077CD44C41405B4A2AC75D5C6E0D5054E8EFC7A0BA650E6B
A8C11C3F95504A0A11EDA0B7061EDC872505B7B97CA5EF4CADF86019AD68BA86
07A0AF91FBB5108AB0EE57436E267ED368A44A51C0B18151503F2BE59D799501
629BBDB617832B2A40C59329CDEA1622BF4930B0375210A79C4DBFF0A51A6DDA
F69AD84AC8E0F70AE0E193F4430AF3A4E3BDA695AC6822C4F42EBED74364AA50
881BC03E6C4323F499565020C617AC13E189AD88AC543395EC9503A3930BDF64
6F1CBF542FD1DCDE85F1ADCCFA851EE65F225725CC5FB7944D0E5D8CC9582414
93C0BCE1A88A4FC83C6A799D67434045CC5FC1D818814FBD2A86F24039E7BDD8
036547D5F1B2D2D1789CDA6B1F1B028649D87659DB69ED2F58450D2ACE4F8F2A
DCF4BA2F6996F7A40B86E9D1F3307FB098740F9A4CA349B7553C90B4F7FB949D
50F861F3DB8B925F67C9697A432F0F714537F0A8ECB8DC8A9378C354DA08651E
D7466213D9B6C2D3E15ABABF5D78619773B5277FD55E54C6775F37B07AE699F4
06F9C9B8DD0449B4DB55413C3C50F1E0FECA53F43DF310CE0CEF7EF55077A1E7
3C9653EA139330D03E1C047133C910400B293CB3FB704713DAB045F7FF4573BA
D368F5C97CFE368F7FFD497736E320C7DC823DD68C5C8F24ACF262A36A8205C6
8AA0B892E2B8FA499394178F13030AE0D5E7B3CB7D36842E751568F2518691B0
AC082197A1D4DDC9884E140B04A635B81D007AE54BEAD4579574D5351815A959
F217E59C9CB6C348EC25FFFC344A25EC76F9D3B88548A60EEC54F98528221887
54559F0E7230247E7BB8CC90D86DCD04F36399EC29CDA80545BE92E5F5A0DFB6
931B70C7EB71C2EA1BDC1718ECE8E34694FBFAC8DDFA2733F32F6EEA73780710
BC754F92D99A5B99C7BB48AFD62124D1E3652EBBC3C0B786745FE374F29BA69F
3C046BE6EF1965433869F73671B8A052DBC1A8E3BB231F9B2C9BA8D343E4ACFD
8FA77AD87AA1C89AADD9DADE7FD4AF5BCD18E0F8DE212DF8A13163F2A3A41856
452DC7BA41BBAC63B7526F7C3DD8E84E9190A3CD56B04F89B052FC8CE2F4FDA4
C33B26C3B5835AF3488D143A7BAEC8AEC7F103FF74FD4CE557096B2BE6C91D9E
4850140FF118558E0C874F1929AB0C9D27E9651A4B053B37CCA4E46381A1B3B7
EAF3A3754D04BE163B9E964F6762BDF2BD0ACE10B99E18F6CE15FB947C4D9C05
092A89F03CDE0E64DB4231848E9C7182004AB0973A5BD735736D9A2DBC7AFD01
B463260FDD2BB1C9D6E05B7DA8C435A28E816251DB4E838206C6EB4A1096C958
2CDC1411E2CB8B95DAAD254075B070043531082A166B2816094BD1BA4A4FF3EE
DE176B0B5E1202B1F3811F3D4FF93F6B4B491FAFF4C1AA34F344E838C124E95A
A660B46620FD015BB6AB6EA80107B52F69401C1CA2E0757A6CD84465C7DE6192
3312E4A2203FB591A0823D08F3B79FFFC76341E71B98525615960F7B9F564F1B
E794C8B92135BE8098221EA39FBA1919AE7716863596A220D4770E2813741A8A
F8E8F6607639FD0E146D6B621865797B9893D7E96EBDEEACBE2D711F4EB24E66
47BE39F450F94732FDC89BC40880EFCEB8D91A7661AD8134E3C94FE80AA16BD6
BDE1D7CCD1A973BF297FE6A8821E03A381C468BA5ABBF1ACF7D5A0C81B1006F2
251A01B22C15A7CF4F2D254D30A0C8438DC8844FF9A9C8A07C5C69FB5D619EDA
0D4F7CDA135AED8D4C6723B64C2BC38A181BE5BECF6D5A162FAFDF32B6CA4901
A273AD7F91DD2A4E7C559876C775AFB11E467B256DBA7E2FC86346D05EE230D9
82EF0D001E61125A7170E748B5BE0F90B7F6423EC6C03F4A6F2F81BA6E4B0315
7AF42FDB1805994A6CB816C359AFC592570530F290D4B3F0C462DFE39F227D87
B7676485B580AF811E9D87D2ED813FA38864506ADFAA5D9AC536C55C94499E0A
0862B215C5C944FA541EAB0D4851F88B4E284D51F14A50C7CB7DC3B8473F6C51
73BF7198BF115043C8E3F4C95572C0155A4922C92F6A892EBC60B45283B2F563
1D37B966C85A27A0AA6E874293E89DC1292F3A57FD6F3A111D1FBD389BF0BA95
B2A29E90BB4820B6AEF318B1F51BA61315B0C02E9F97305FC7E43A31E0002A2F
803A30B12028D1FCEBEB519F2A430A703529E5AF0B4A8E087027FB0A976F32B6
7F8D2123A90047F9AE80F11504560CAD2296E84563E3D54DE6258D8695931B2B
ABB4412A2A7E8218D356330061A2649D908EB07321EC1E7B0834E6220A3C5F99
8F946DAA8EB190AAA90756CA252AE35B855D277C359FFA6631E0669EFC07A27B
65E6CB851D13358FC3DD04DC1310E3D0E80FBD9D45F457EA30800D80ACE7B987
A41AA4F0BDA7495FFD2989718F2C30C5C6C670AF6AEEAADB72DE788DA1C6566F
5EDC5EB282AA68E55B51457652B854B1F8331CEEE2C8C886F5B1E7EC05DE17ED
DA313A6B50D134D3BCA3263CB22A1806941DA49AB54DCEE46DB8A513E329CCE3
22C348A164C9D4E4769BE2DE11A6A3338E38D4F8F93C04C4BC954B0116852694
B48DF2E4C0B13AC3A2359038E2524EA18FA46D8057EF8134B6938AAF0A8BEB2C
FAC9DF6931D01AADB6E2C006DD6544A13A283363FABB71AEB4A1E944A3580AD2
166D5588B87953B6F26F9A59A24C096694D2665F0BB9EFD60F9D0ACCDE739B57
6500ADBDD6E0D8D415402B06C2CBB2CB91B45D00DF27E5A47692A30CD071E897
6867475731BFCBF77993B27F23C4B9C00853779EEC49C64D3DEB13D303AFE907
2318F967F9E979A6EB4DDA2C386289EBD7CCB6319582D7B0F7571F47A664A6F0
629CC41AFF7700001FC838E8843F5B2D5D6FBC1FB39765D17659F0393B34E72C
E680042CA683B123A051B16393A337BD182780389CA09F38B773F2A3EC4464CF
19509F1ED29A2A4F2CB04C74B28083D85B098E887851515B078247F02E259A2B
6C3ACC2C3D113ACA3ED60D7025BD43D84FC4120F19829E8FD19A5E3893A18623
28340418FB9DCD6D13FDC5F73CDA630CCAE24283E4FAC32C4007910F4EAB9A8C
4E759FC4ECAFC7C0DD81CB2CC29C5B7F2DDD6DD5104E04E810338E7B485BDE7B
DE9BC70E96B31C3CE4C4F64DF379F6E9B6BE0BBBB796CA8BC8AC81A2FAB38A81
5B713EA00A29D9EFFE4BF54EEDAC2B8564701CEF19E33CEB106908F2BDE07642
A8B00E5941D215F23AAD39FA1B29FE6D81D364D72F1024710219CB321ABF2BF0
7C7DC774FF01BFF7F0A9DF2449607DC71571FF3F825649C0D05852B70149836C
4700CAE5B90560D4FC5A10AAAC53D2EB5449C9A85CBCE97B8139D44C844257B7
6D0594FD79E6CBFC28273441DEE911FE3DED87155214C24771941D71BE2000E4
94533028241A49ACBEAB8C7469B3E81757827C1F92239390CEF0D23101E7F6D0
43A16ED46336398D7AA6721BD2C85CB48B349F2655588D58BE1315658207BE23
2FFBFF91EB1AC77C3F3D2CF5D7821941B18FB5BB7901F18B38FBFF69D3FCB65A
973610C405074CE7117682B42CEAE6CDDBA5161B652098C379573AB2C9A4485E
317A2FE8FF14A641E51E5945D9E13256DA3A3E6368DD2BEBDD5D556CF2ED795C
0E6816937F920E832F66CBA4E4387B2011A3692EF47F86ECAAED23FA58DB2BE9
BB4BA3AE9E024974CB34825358292E580E29F720A9854A7DF4495464BBF83197
365740986E9A23620F176C2894ED013F696F06BBA6E6E87CE85F9893DCA387C8
D07DA90FA6559672A01D220412A12760AB5944ED9FD1E8835BB8C428E4214B89
B34675A7375B32E72F06D6C8D134C5C070060FD867888DD7CFE31F670E39DF99
85A387848E5AC89ACF4BA16140445775A0B36BC9FE1BB7CE6BA9FA052C8EB7D5
DD6E5BAD531E0BA471630879C87397009EB5D21EAAD7AF83D0F8288C2D95E222
EA6F455AC5FBC299780DBAA1992889C4C3AB5B333511F10A6E751064074A52C1
38FBD488EE35E317741CA321B950C8CB71227FA0EB3F395664960DE2B0316A46
7107F961F5ECB741C3659D33B7D3129D4CE8F512C01AC8625EBA4B84F7A37CEC
0006EED8D61F34BC5EDD6BD4F8929BACE7F7BF91C6DD2D4DF8A4192721E2D329
A9BCD9D1C0F0B98D0BC57FA4985CB5F305BADD040871D04E7809680CA46BAF59
B4129B1BE1A662509515B1FC11F9BF6138BF547EF45B3D8111AE4E0CBFCF1D5B
4E0A3D0228ADA6938F1BBF331D54AF9C627586F74CA84273F47A2BC7D53E26C4
F00FF61C1C42ED9F946D7234C5715484D95E526873B67E1EDE40002A2B49054B
197077899C2F96A0360D0412B86A74E030503D954B58039A5CBE6E36640ABF9F
42F373C1ED019CBD456665192ABA2933585656F5BC303A93B3D922C3CCC0236A
DB50C2C24DCCB5B25F501DE4AF0EE888EF169D43F4426CA064D82AE21C74DA31
5FC19F99BC8262CFD72F20BF5E4C75D7B9426F419A31BD9E3EEE0CF4B5284E6A
A4CC5F2A5D3BD320E14BBA53A23FEFFD7C8DF3D818428F5040C41E0A8E99FA1E
B6A2D1472E78ABCF03E83445D2682E5E42E0441744AE862A1929D4A15E2E5ECE
44585462294E69DAE97C939A7338C746A33FFEAD43132F9DF6682D0A2492F81C
54051F924F2877EBD9C059C4212B3E29F7A0AD5F8646A4F9CB1E8C722FC4A855
C6B356C4BAD59355A74CA3DBB5A609F5F1949B5CA4D900C985AC92E34CA796E8
3EE954E5B445ED1447B53FD102912EC764FE8B2F15FFA7271DF32904C70FBFBC
AA75969712B8F49B644367248FBEF392A4232644DCB4F412AD4EC3D83D0B71C6
730740BA736DD9ECAB04B00026CFD1F21228685BB8A82AB6ABE49B67D9D6C5B5
BB87E0E66D356007BC3FFA3B0B0658A443BE80CA30D9CF4CEB3F562F89DE34EC
10F9C235F6569969E68A2486D09230AAE571D26EFC02767DD3BF6BA86CC36E80
EE47FD409DAEE69D70D010C78511AA173779EF1890CDAD7D747F10BD432F842A
292B0C2DD8DFC1081BD417762D266C09A38A699B14204DF901434F5E6E194FB4
286B61A4AB26796C52BAA9B7BAF2276B0510226F8E375B3BD2E2E7E19700ACFF
7ECBBDDCD024B4AFC1C4D30DC4BE97737FE62AB71A7CA0B999DE141FB1DD7E51
1FF1C66B8F429057FBEE6DE9AA82006A43276D6A4613A7F6111CA1656BB8BC84
421A8091C5B68C4C05147AFDEB6F18976FBA38F8BAB09E1C98BD1D25AE7E02C3
8A082ADCA1933882D94F90EDEAC8A3A8DCA72E26C987F09AF3C2C890DEDEB4A4
62DF5100C557350BF3BE29F694E7CFF5D60AB7C0BF92AF063FAFC13771BD5104
AA24163A73C1A0AD7CC138C2F849585F9BFB7DD6731A52861C4D3A316B7FDA40
E2C0C0A1A4A6BB860F16084CD876A14CEBEB82D46328CD8A749B363F4B77BB6F
514B5894646F61458F973C5212CA2EE0525DB2E0F6747A460DD805C1575D6451
A10273E165A9F19AB16DBD4FACFEB5B4B052AE720A157C68CE96E4FD896BBC6E
EE2D48F9799DECB6F74529FD46D71E61219137679A6148D3574D80E012FD928A
B4FC224BFB800E544A6F858A25C26ABBC4C25AE7E5D2F2BEBE39239ADB477FBD
2B0D86B7025004216D82527E9CCA690FA83F7A9EB23119348D2C82A64066B440
EDAE92245AC31B810E4C95B7506440F3B34C329E6D796D20B2AC0BC79B34B489
30980213FA0E2C36D1BC7AF79E579CD2E0064E5832E860F937F033783A442321
96B01E58ABF296C7A9189A9F16136068398E090398D30ED2F741E7EB3AAA4F12
C642D0F545E630226C9237CBF4D620A4EE6CDD3C2A135CCC0C7FF0A0EAB9313F
B2B9F04E29A885A4073D155D36717EEAF6D5361169396ABA935D64D97638F1C2
3590DA17BEA76694200B13A975A022F1C722FECF62CE9A270B16BD0B52054F76
ADC3DBFFEBE70BD7BA4B4D7BC7EC3D1855CBFF7CB9EF134966552922EFC7A76F
B1EEA21DDAC0FB75017D0E7E73EF13C4726391E9E8FD471DD2621DE331AF551F
36D978F21CD84F461CC877703BF886115C96564BDA96B34F65035EDF5A9DAF6D
41FFE9E0398E5D09B8A4D791F756EEF34E85D613DF0A5BE5666B20E804831A47
90D78779318CD06FC9BB08854E32033D4F21A3C3D207F5AE931B829B24042C5B
66EED4F921646F560829E5A4C737E5A4BEA72A0E13F3E6B825F861467649D10B
4872EFC2B256ACE4F23CE0BD28143A6401E15BC7251D465A083EBD52BC366B91
50337127C6068B9C79A4AD5C1991F7977C9EAD5A2F3D83092CD5ABFA557EB424
66F27A921214CF0DAC8E29D4835821CB15EFD2829E58B3F2115557F9DAB68970
5157A47A53B42F29771497E9F5AF68E2540408A71370002EBCC0DAF5E74341B8
3BE025EE14F3FD8F77D0AAFE2B76FC49AA65343193F93DF239A12992E860C899
CE126CCA1090BA2CDF850F9E1A5C5856D41D8FB730E04F4039F14606218CF236
274FE5B883EE84FDF41236AD3C1D8581D36D25AC400CEDBA37A55CF4BD0B7750
11606706CEA21CE1DE2CADAEE76E1540527E73B23D9CB14BB7A4D40817AEEC11
C8E1544DA74B369425D80E2A4707E78198F772276AAE0A4B270E8385D9E3DCCA
E2F30D96ABB5C0FB5F7C733B68DF793BC4661791DF29193741C11A89B8EEC8D3
C188F08FF2AA1C7D96028198DFD7488D94B100E71E41A2B854305924BBD754AC
15C7B0F3377F3867C1EB4C3D782F2BB7EFF536480AA43F0D960075B605CFDE9E
D79D9EB46E2F96864FED2642FEF3038B305DE5C1FD8DE172104A59134C57CD5C
D0305BBF875D7087C56867845116549D2FF228A4E253490F1AC29E479B090AD6
76943EEAD4F8D399E8581EEAB75C6118DCD17F6E2C5B46257B48123FAA9B915E
AC39596A2BE14212BB653AB276819E18604EE2822F39453154D4BDADD840A6DC
1587F95A9A314B50250A597961B66368352FA1A2313DAE81643E32E096D75A6D
AAAAA6CA373D525C97898745610FFAD3AC143DC9CA8CB1C3931E36AA8390828A
4C47A8648A567A89550FF4F0A8F1AFB3A1F7CDE059023D420EC9F149FD6A55F1
0C6A190836F871F85B287236BE86853C322E1B203E8CFACB24A3AA9CC0FD9C3D
34843D7563FEB171921810B132DC36AC666FF0899151B05F45DA158D33813954
215A6E92657CC1F488822C5F8D2F5568954834A309F03F5CDC3DB65636F4CFE8
1D7795DFD0267DD906A63FDDFA9FCC724D47AC870D031B7E29DC68A3D428659E
96AAB68C27C9E57445EE8B3E451BBF40DDF4F85653AD97049379DA096E1F56D8
7595343D1C24BC1455EEF85827BB6DAFD252116A288973A1161C9352D9E6D6F6
65336EFE2D5267627FEF41D96344A05EEE4C43E2AE2465717094C648751D33F7
C872EA5EA529F6DE126C11432D8C0C7C69108F44975B7A94588215878E6866C7
1C6FE5F3B5156B32CEBA6D7B35526797A8C94EA0723B30624091866D42F7BD74
334DEB94DAC8D266FEB94A9353307B572ABC439769B91477249D08F7EC9005E5
F4D03ECCDA89869F0B072B5A9A38A1F390E7989B441E83CD759798E0326AA49E
2884079464CAAC1E8B607F9D37332AA4BA88C8ECC870179C8D3DEB35D08E2EAF
E7F782A3526745D8E4956C1FD982B31771E57B33D65C7FE29D48424C35BB9037
478F5DB212EB897D53EE0BD51C5AB94E9377A329DF186EEC9BD7660538BA406E
8AD3AE71B2C39CA75F0060CD729DE1346341E3F251815769B230842A3D61C78E
D1DC5D6DC0252CA2E3EFEDE150916661FEF85C14B057B09F50AA82A4653649B7
CDCA11A1FF27AFA7FF189A799A077ABD580D75F5873A6F37020AF88EF7E6D9C6
45D5766834060334D2136641C1AA345C7642D1913555EA172DB0ABBAA819EB8F
42657D15542C6068F59745747E0FABD33DCF5A465E9F002FA79AD452E2CCE8D9
5B6A538DFDB9D04361F2FAD39A7166188D5B887BCF0201D55B03FC3E2B578BA8
CB3F277990CB67BEE95B9FB61070366637EE4B08828BA8D064EC7A3B8B4E875F
D9E86D97CA37588B5D3A4C2CDB0CDEB3F1ABEF40CC317216B6F631AD82CA957F
7EA4AF071B0130364622CF8D7EAED62367A97D15EF20362AF7068A8BBBAD7E8D
B912FC8512AC127BBED582D785A553270000A8C1A013B04161B4A7BE0D8B8565
FA82DD73FA136664C551465C9013A0A78518D6A5FCB909D61280F8646C1C2112
0E490E3CD97683EEEFCF837941C0D9596BB63DE201E971AF222C24758A9D002C
A04DDD891FFDF913A20D36E2E8C1494640BCF0294FF2103926BD4D876A5275F0
1AB676E600823FEC28C30D2208A868EC0D04C616A036FA09D383749CE7FB7E4F
833192525F8D0117A1236F25BAC550C282E77B265156DF6B789ECECE18841D39
151D4CAFCFD1AA6E87F704E9341E5DFD1410EDE9589E0B1C84FD659AF3A3BD54
60075443FE7E704B5AF900AE257F08E931DF53396C8B396B5828234246148C4A
5CB94B92B25077BEA5920DE1F858ECF0C947A444AB56E8BC3DDA5C389B58637E
8275AE5C9AAD22F7AAA065DA92EB9CAA7C3AA0BDFDDF66CDC5D471C3EABDEDF0
AEC960EE3BCDED36A84B31EDFEA41A6109A2CDC306F5A5110F1E1E64FA24F370
A572296994711F610195388A5FBBE1AC7ED7121D8B0C55A1D37E81B651A06008
E937633B7F04B262C9900EE340112C6C063B2F9BBAE687BB2F45F6465F5186BF
3C603D347C7DE7F9C6FE08275A2BD31BC49F3F6D36A5F979FCF84EDC4C4D95FE
1B6C14E08620C282FE1094CC0EA2676BA81D5448A78FE8860DD267F42D7098AC
8A89D309DD6865A65EF090ABDFD9D50DB6E44F564839FF60FF5BA638C44C3F77
04AAC97347852D1C63F16A3C8ACDD98342BA23224857AAABEDEBB709068CE066
923025762D8B1EA327F5E48E1F4401B0B7684C557A431A880A9AC1A7358EA7F3
E7F8C17678D5063AB76DD969F24415BF60BE57B2BD9C04F1FB7A8A5279A8F8B3
B74E5903393305F298C8933E9DDF533FB7D592E28A4431E1C30A523DCB49AA8C
D26ED4A688023BF4933D7B415FCEC04738328542C8F3521CC962E5A6ACDD1317
97F623F38B06F9E9EBCBCCCD998985C068941DF37927BD4B4A45CFAC6CEC9EB9
F13E33073DC172F8F801A548A930588FBEAE00DD8811B5B2940DD69F05B232A3
663BCD7379156B9169FA234DC14B389DDC68D89F32A2ECD6836558664FECDA00
84F4C01F1149FE56AA0AE2654BA2A7848236C2088224A0D28855D3DDD561D7AD
D96092D29C4B9552459407BF0EC09498FF0C8A3C257D260C84A5512B2B17CAA3
DEAD6707FAE76C7219F735AF8814824E04761415D2F53A866C95D4A6848E2BB7
970D17667742E8269796032ABD4C90337D680985AB4C18FB39B1F47A8564B456
7F289298A69F79F6981B190F26774B50E7B120BF5A471FFC465B8D40FA63BA53
CD71AC8A5ED1162C00428ED37AF944D326EDDB80820D550FBC010FB4156D8B60
2025A3E11EF9BA85A5C0ED82E75B075EADFDA03A3A93E598BA51322F0548A74A
C221796FEF28187ADD2527DE5DADEC1223353192A043D952F5CB93C8A1FDDDDD
685568D9A4A02AA79B5975C140AABA1B604C266E68D6FD8310685F8DEE7A7A5D
209265986F92AAF11143DE6CD7239E8ED5BAFCF31C113777EA71DA655F2B2974
66B26CCF7D6BC46136E789DFBB5571B7EEB55FEDC7C010EE520E64B3E25A6531
7CED9554B58585CB9032C198B08DA5149E3FD6CC9DA195BAF6514D0FEFBBF1F5
36F6C15F51C5B534339549718E963A3AA987123D13C4676576C5D6424AEB0ECB
B46A3F9924453442B3E3F6174FAAA04B983536AB81B2E45EF45EE2D16C4F5D7E
2EECDF9CE4F50382F27D46559DB1CBD149A291CCC45BD2E75C339D29610B0620
614F857CAD4B294F36E3BE132251A5B1A8DA1B30A710FDA8E19C96C0CF4B8DD9
CE727EBEC2D79049C07E649B1492730DB5499E3027097569D8123AE971E07E75
73B5341AE692D8E5D7C3FFBD41365DFA502D964B332A89C5DA71AFBF455E5A68
FDD4DF74A8F0A2DAB774ED9A06590378C5F9F1002AF12A15F01E915DCD3D8FF1
F868CBFA6B9E855DBB6596E8CD6922C12385B3F666D96A5684E7747AC880E391
0D379FFAD65217803E58FE46DB0E6E9B04D3B5FAD58C121AA7CD78AFF37D6D6B
BB94B39D8CCC2DAD557200C80A7DD4B180521CA52FDCB634318CACBF994B4147
31F0AA45DA0804E5E856A79A38623745FC8B6FC306EEF7E854C6A3894E40BF39
CD65D690ED11705004C2190D2F3D2A1369FB459E1C15D79689FF206E5B7C96B6
B54F27FEB1D9FF995AD352A0ED6F1559AC779E0362E41A52F6AEB6967865B84F
938B40E3C60C3A9390242D9A34E6E251DC8A00D1D932612E0AE4FA8ABB03A3A3
23202E6C382CF8541FF7E243AA7F16F534CB8E4EE81EB1CC3944DEB241F1FD9A
5FBEE5B1F2620B814FA2A66394C3D519D0E8EEA22F43C572873A347CA8EDC2BD
F33BA8DD2AB665537FEBACD5BC7C774D53CC63B57F7C98B784DBC639CAD5B2E8
3C049DA71FA49785EC5565D2B6C9A5B7FB0314FDF45F05106CB4E5E03072C214
A0BC571D435DEA4E75D61036020AEDB7754226F422E9551CBABD4961232A95ED
2B05C01B32EF1CAD05AB36A40A0F83DF032C87A69A63A297549D01CCF8A92C81
D0504D7CF60A057251506608A2FE4693A2B9B3D435499D35A59EBDB61FDC04C7
FDAC1250C88230C1576FA44E4AD0A1F2C1CF2966726A1DFC958250F2438AFF6E
DEA0A0BB908FD2F1634F4173EDC8861F00421E6C0787848E6766CC8D703B6434
1ADC30B47F91282ED810C970171F7CCADD659E023687D7661D6B521F456E9EE8
07C3500325C2BFF8B479CAB483B3A034DB509967035588251D0206E56D3FF611
1A50E1FEB6FDC3475D5E9DEF223ED13350E2855ABE726BBCAF973A773A225C8D
6459ACA5056F7FD695D0DAF3F5FD315EE4C1EA704A154645DFC342513361C9C6
BD73A9A9879DBB7FB52F25A5A5DFA45DB0FDF9B94F0EEE1A114334CBF42718BF
C37F4346B36438B94D02F5669B9E963436F1B526B5A4CF3AD27EA5CAC1BE4E5A
D2BDB75A1DF193348E8CA988354F249E77C9CC8EE4CE02F9601A7C52F372CB9C
FAF7DA3CAF003473DBA5C03B5BC15508CBEDCF76159FC0311D52E6B44E5A78F8
27CB355DF32A49382C03778F67FDECC3DB4BBF0897CA4B909C846B01027FA358
E88242C2AB3C7666EB43C9A653D05B8D42792959A1DA04A777B592888D38EDE6
8FFB3EFE8380AB658780D69E25CB2C0BB3B0C945159998A4AA4E2F357993F4C2
DD17352573C90177484F7E742B00B7C92F1AE53C50F1E3F16FDEAE6A34ECDDB9
C87ADD12BBA280B600D0D94E943ACCCD35893686E88F8F127DE4EA963E25878B
DB67E8ACBA7603ACDF0BB64DC77FA78F87D37909098AD7A3A1B81718F3A994AA
4CEAEAD1F1FB02B3052915029DD6AA15B6DD86726F1107016FD88A03A679E33A
F6D09F65F460EA1E5927D4524FCBFA7625C922AD1FF2B93E970C46873EDDD6D5
EE795339F7AA703CC3ED22B3D6AC36DC35A57822703030EBD9A20CA017FA6B91
93D531BF240DFF74A2F754FED1D9ADED600804B7786C268ECED16A7AA32EC49E
A31641D1739B576500ADBDD6E36F3C25714419B8C988456CCC24B81FAD59AD71
A3EA6CFA67FC3030FF6EAF97F7FA79ECE49D69AD360A543C7C504FA0FE7042B8
0B0E772F332A863DD328D3DD0C2258092ED21B60115A395877B1E42F8AAEEB13
5141C89D80AA0D815FB742630B5155547029E57E0723E7743087BC4DD394D806
6875353739FBE387290C92FCC76940F64EFF4AFBB38FCBA139680095425AD8B4
DCE63A5845CC77126DF2DC5FB4D565B443C53CACE9535303D71F3EB7F12E7377
1C77B3E22C2CAFC254B52413A107BF5B596BAF902B8D616DCB0FBE3A63A34884
DA9097C0F903F0F05E0F77EA5D5536BECD3B9F74A6B21D04D33D8D6867E328F1
F84E5477A410ED791CB407A7959F6668F66D3D48597A0D1D2A599CE79AE57AE9
B7B392D167B6BB9212049D5BE682D3D6D0CCF45066D5E44887F3FE31D7FCF229
89718F2EADC4D6D3E493C298926B2685A94983E273B0780533FCD40024E9602E
D96C5227060C7CB058DF3A612C3ACC795C93BBD37161B684E307550C1F557F6C
61D3B4B6B0F867DA54F4237D952A379B660FE32997BDEF8649F522DB4B7BA2EC
722273635DE518BFDE5C52F52EF763183218442729201C4795E0ECC246A1A96A
67E7EDE8C1B81FA5A78EE72B5E234A1ED054FAEB7C41A0858354B42706AECDD9
AEA5FDEE1C1057846B76616532B79C929723445D51E55F2F3C077B72FD370FCB
F53C18F76B79AB072E704173D21148603A171196E3422408601C926B58765B86
98FFBBBBFBCD67D52C6CE4D2A88834CEA8080C90A3D588D038806DEB21FCD11E
65FA0356054FC5F9B0C2A769D94B8CB39F0D68239972CCF3326488DDB3D5AF6B
8285E4B468DD591E51BC53C5FB483282D5589D0D5E41687A669C3BB6C65BF6A9
23E70B1E963448609855AF215EF4749D8F23B7A62A4FD8E749DBA0FFB2CEEB7B
C26050F69233DC41378E584E3B3DCA7C4E4E3925B7F965D410E4C6AE5A044EEF
BBE57A4FC49AC8B731E9D514017973916884B791DB33D768B081015A048EA8A5
BD31E2FD4A3C65E04F45CFA0877418BFDBDC3423CF739AC5B38303C3D4DF196C
4629797C0D5E0B1FBADA15B871D8EE501D12B92AF5AD8D4BF436A14C0BE4E84A
E841FA2E7EB61E603799AF4259804CD7239F0F41E86F2D4EEB998520A57985CE
EF4463E82120ACEEEF8DC018E388F3C9F683C1D32DBFBCD3D646C01A19DAE812
974B4B88A0AD2F91820DB1656FBAC648905138D5B49E44663498F48DB0F065C8
D31A09D29DE4F528D046563AC942F80C2313118CDD0CBB9A3CAB44362F017F01
50616720B0E2DE883DEC3D33F08703F2A6716EB8694B38E75BAD5F49513CF891
45342719A54DA73A385F9AF86EF6E3F5211BBE23CFA17A132D964FEB500B32ED
3ED63FBFDC0E43AEE3EE3CAE1721051D37D1EC32C188F311A107CC79FE5120FF
3149465D47A71C9E0244FE096571F074F07CC1AAC1DF294CFA96682BCB48B923
012E45D9F0EE55BA61EFAC69501F18B53FC78BB32742316AED9FB75942C9699A
2519D59B10D94B1AFEC71D982895820AB47D0BEB5D5BBE6577DA79F9A5549A54
5B654FBEC03ABB367876FCDF342EEA44394B55332B02A1EC7167A159265490F3
4509A694696164272C296E3BBCB4231674EECE12A1E10E7805DCF438C9412829
6E8CAB02B561FF49E6D94CCE3F4487F15A8F897EEC003EC3D62939B8A5864968
B9F783242AB7926FE5D82FE6A1D6539BD64CFC759E582364830BB77F218FB837
E7B352DA4AFF5A50CCEF0A26AEFD0620414860832D64B6BBF9B9AAE58386D7A6
D4D54B096463E1F3B65E79B9693404C2039FC62C37DB28EBBFF30F651543A111
27279FFBABD2B8CA4A70F9961A02B350A76F697E285BFA2944943D78D2C4C883
4BE9EC41F48EE50AF6797489236880ABAFB28052CFF50C95D2FB0E5DBBACA112
DD1B17A8E6AB34F895AA2C80E04CF5E36852CB2C4A9C64EF7FBCCAD8F5641A2F
1E372A88C843252610FF37D6B41BD2338609CF1ED39100C3A762BED4DF80EC9C
8ED45E90258AC67172B4D68F86390113BF944E37480AD3FF9C10590C070BBDF1
C3D217AB69A6E25B87D4414045A3317968C12BF4F48A7F0C0E7F16A7D1761BD8
0997CAC753596D23D8182BEE239C74D3FE1289FBB4C85D2FC66A6D58416409B4
8DE4FD86BC144D800D2FA44F4804329268F4440F095951DCAB0E6034307C674D
39DE36B687430840E0F734F7263363619CA43AB3953E9419BF5CE129B15DCFE0
8B3574C00C6AFAFC980EF935042D30498684E51A098F566F3FD8AE45A816C5CF
E9801BF7E3E7A144C4B5311AC4B50E839B5D76C73AB6D697B19C6DB033B5C629
4AA6F5B93DEACADC3D74931887E2EDF98FA2196ECE13CB4F39641D55BAC02180
6C98B2D6899726DA27EBEE38443A0995BA6ED0B538A69C0052CB0EC9013F7EA3
91C8922ED288DA4ED0C816667514189228DA0B47FE071D80080D42025BAF9011
1311074349A969A656E7F4E76D7634AB97167A72810BFAD7E53CD4EFE95E4AC2
0E54A8A54995D460B2B9A6BE505711794CD4EDC963927D1BA8B8233AC009EC59
392B7E3FD773AC7B2263889F1266F35A1D775DA8BD6974D336DA8B329DB23511
9311B9888D0BE96AC4BFD340BCABB8EE5CD4B4608179C8BF28994732BCC57D92
8BC883B8E76068E5117C83B6356A4F1B01317BA227DE03A9FA9242F6C8BF92A6
155BB0695CB857D7D18E788D2DF9753691F4849ECFED69D045E949E25F10F2F4
8C6D08A7F95F6BFF0CD8B5C95F99B731FD69660310783BEE1DD3D04EB580E039
C7AE682238D80441858158116EDC3CAF738F5F7DB7782A305A4AB4203DB0A98E
40A97B263DDEB9DE430001C503B09C6E1B12F264DEEF6E40E169FA4E0EA83347
DB28AAFB9137CBE9607998FFE1B4D2716BA61F704CAA3E21577606EDAB50A684
882F5AFAD80DF7A079FF4135D2C1C57FD87D043F0C3AFDE8B7FB5F9531FEC993
7F2FC73C057AEB1B5A03B7A717E254192D14BBA2CED7AE52D4E3C448D9A1FC92
A5039BED5F5C9B9770ABF579FC9115F2F19C9C7CDCD74A4365CFE1A66B25E1E5
1946FEBA8865976807450844AA5DA2B6BA2556EF8C648298FD3611151A67DB23
5577B68003BA14073E2702296B284F803691A8D59C3ABA73070F8B3C4799D649
8B2F62BC765634A9D5AF29347797F3FE7F4D056A5EB03C786F5F980812839237
ADC23BF2E23A462019A6C8D0750307647DCD99E9A56F020869427242D783CF0D
5CA4661A6578FA0C8AAC28AF1FF600427C11D65BD6DCE46080B5D041E2A87F3F
A659EE56F352334ACD0AF4601369783A83EE1F04086CEDF8F1B371CDCDC742A2
0A39AED2E38EE1DB9B7107136D6BF31A0D3AF01E55645C5618082D79B2A4557F
89516C41F67E3F24B50B159ACC10C378C5E37E2C41DF47626F617888158C48F6
7E984ADFC4099E16C7A8CB77F0528D6FE3A59AC26D8BAD05222ACD2B447D91F9
B45E3D327B6EEE5E2FDC1EDDE8BA29DAF59A1D4658796E70F01B1294269A4340
48CC7EDD560731643C3373168C5F5AB5EDD7CCD1A973BF297F66953324BC6ABE
C3EFA3C9165D231B9617F305CDE3E77D4831B8C3BC4A824C6BADB04B8A46487A
361130ACAB39CCC1953B78E7D9D492761BC99E57F3AA8B30DE2E936B744353E4
6D26B3D2271B1F5BE0F9B8CC5D17CBF0E1965CB751A02F0888ACB73D02BDF350
B799C501E3D9241E4EB7F7B334E90E1996E467000B6825D183B82130B2CDEA6B
CB702ED0349048769E409DE8103E427DF41539276DFE80C5412CEEAE2967BB84
5CA667FFBB83F25EC71F22C06D4C6178ED8086D499D9CDE76AB76E4E694F6A38
AF77B9BF050E361D80988F712F2615578A0BF862DCA1C8E252B42E5900F3825D
C98E4C886E696ED126E7CF2685295395CDF2C3CD3C0F7E7601691C0425A75BAF
8C5544CC3838AC9D4DDCF85EB60ADA0717EF5542B3BCFE831EB848C01944014C
CDCC4653DDFDCD26CC3743EA3440026A3C7604743EC9CBD9D279413F4B588930
6AF4816AB256345B55E4E85EAFA68FDD22AD4228C836A3AE9CCC1F9CC12E6245
521AEBD517E7CD7204ECBC6994505D83FC78D45AA402B5EE092CB1C0BAA3BD6D
7EC732CED987A623F612FBD3DA9646CFEF3AA4D883D0A99935D271148F65A14A
762899A2AE747380FD5EF5838D6F715E5A99E6C26FCB369CEDCC7225587D1C41
C69BD214F2BAA50EE807B42C8616A0B27256A1AF21AF7FAE20A1015252171C71
3B12E142C26D9055304431D7C0FA7EB859D2EDA2A3AB328A1CE776A80892948E
EF95C118FA02CD00D530A970F342D044A59A91937D24B011D8CD4E9E1DC6DE77
6C322D2040D406762418111293782E265B1994D7D215649A49151C8FD97414A5
89C0C9325A9898A05E3F108DEBAB8CF7A1DB22450819D00E7CDA48E79C2169B3
87700A2FE9C900EF22E663AEE554E0B2C6FE5C6BC5A0678FB654917F25C05F3F
3D19D24A4D31BB68B07F89EE558F514629E5A25C4FDE93EE15C1FF80298300A7
6017E07096B7AA5EF688BDBCFF747599606708D25D0AFAFF0687C7FB7965016B
5B1E2BF79A4BB263DA1730A72C30E1297D3C20D163A737CEFE573334D07FEEE0
59DC775023D6CBC832DC02A84C0F71B846AF9FB52AEDCBBDBFCDE35246DBE70E
1A26198512A45063D3C90AD9A6DEB8F502FFB223FBFF08DA860FD1B4F55C19D1
079271349EA8EC8FB24D8549B8B212EFFE74BAE5DB0D9254B2979A622E6CB6C5
E0B90148B1BFF2D8E67D3FE056E0C6E87A79D19869982C8335260E6AAC865287
2FD047C6241331D6F9473C31A679F56DBFC2992CBBF2697EE0833F58F6281657
347FAAC49AC0602F0FEE02205429215414AC13FA5B07D25738ECCEF496EBBF1A
FAE1FE3DC86565869DC5A7D0D5478103BB47AFB14105E20EAE4442853F45F2E7
2499CFBFFF7D18A37785799204F554E07CF0A0966ECF944C4F501D33BEFD806A
920D152EEA293BFEA001C91C950DE4785207EDFACC7E6CE2BBB01AD0B63F8846
66AE365F5055DA1863E500520020FADF2F42FD2FA9696CFB3A0C9B5E6F443027
EE0CC759D3C255D4E49209ACA46369C5ABC37160183E68C226060B2E4C553274
D41B4D361A00E3D57771BA2C8955C15372DC703A38D92FE3E11F7B1CABB84D24
39BE4AB7C1BCB0355A4CBBE74931694325E1720A3DA90AC5C2937A154FD01A86
19B21AD50BE4B30E72AA96937B450746062CB433867AAB9E9909EE52CFD9DD4F
FE093633B67DCB6FB18615E6A15689E2E763461817A5D4B8DDD32E4130BEB7A1
67C6C5CF719173F3EC2F2D20F1B547B76B4C2832CD7CC85B9E09028FE573FEA1
34AF3DFA5750F558ED3687CD63D7887CFBC1B8636E21192E1485EBCF1C78CFD6
7F74F0F575BCE0CEBB55DE19976229AA5B044F77118057D2B278A64BD03944DC
36677990CA1C292BA1A82D7CB9DEC36AF13AEB03F9E946A8D0421D844AF20CC1
3823CCC0DFE9A74FB68877044046C819F229D10BA07CEAD7424BFB22B681644E
929F7A49C780F0FE455BD11B2CC7528D855FC7A2311ED5748BA2D659658E106B
8084DC62F2188A98FC0087440850CCE86062FAA7C2AD7C9444AF8FC8FECC5986
B8825FAF08D2546492977FAD2F274E7DFE3B0A0468ABB36022CEEAF016C69437
D3B96E5E54E180A55A296170E07967FB7ADC0CC6A46979FB46F280381673C10C
14B639DF527EAFD3EBD1AE51035DCC003C805BEA132CDFCFF6F13D25C8569894
3B6AA3CB70667C511665714B78F24B699920ACCF99744D5BC6E118ADE3A1CC04
7A5901521FA85C56E0A67C3E583CC6A571ABD6096A7852A21866D1041D370AB5
9CB5E1F3F33B1091F243376490F561BE71942AE7E58D6419BDA0BFA004689D5A
451B2664925E291FF729F9FDAE0C9C67541994BE60A97A6494F32BBB20324FAC
AA8FD38141EE35048EA16A9311A97024E74B2898B4D7BD59E92911EC64E9CBC0
0384FF1A2BCA599254C347DEAFBA475B0E0D107C7560C1C8AC56398681AA2460
47CA2908146464D5E419BFF6A0FC94074F376C7055EDAEAC7F97381A6A92E8F6
49EACF3789D932A71635147D1F7A9EA5675143441D7AE35661B38BEACF277802
245F7EDD0D7C00AFC3A832CBF8953417B09AADD16F2C4A7EB7317E531214A7A8
69489DCFAADB9855C72D4ADACA00997B89C89C79155502A33F3E65A94A6ABE85
499A802CD5B267DFE29A245F114327767F7CDAD1F51F530EA6DF887E68931A0C
4C0DDF299D048C13B9DCA2A1C7FB45CDB8B3E27BA580C5A5F182C2C42BE379A5
D38206F88C4EC1316CAA3B9C93CFE986D69F8E5C9750C4C92F3C74AFB1EB2D75
1C571BAB9B3DBBDACFAF3B3A19B1998273EA5EF8509D9AFE4FEA7602FD261A8D
3A6CB0EFD36632FCFCE941F4E9A8F758ACA68FF8EC7B18FD77DEC7ED77F962C4
D07048BCF348791E02614634C4CDC027AA1F6D5CD68DDD00F91C5658B380C2FA
2AC13465714645D5598BD939FBFAEBC17A6D3F0E77B7BD33B7E9E9C5A7A4E87B
426ADEDDD4B801A5E6AB92FE9CD7D3C267351704CC60C246574B9FEC642F8D27
032A08502CE338FB93092B148FE8856EFB65CD4ECA87A9444BC01F377030D03A
AE4B3F026DF847160DC0F74BE1D8ECA9B3DBFE771592508C1AC7B4AD1362FC19
827EF69EC670F9ABBE26DC3B5E578172F6831E303B19D4C8CDE97E2A3F2360CF
DA591B72B093ACE5E31B08DA208FE08B4C37FA58BDEDA8F7E025EB227E8C1905
06EEBE4C14481DF1722D50ED1FD559DBFCBDD90AD7D4FBBFB9C175E31228927C
88CFB8A09F49676B1732B64F381F2E6DC32A3440B69595378D97C6303E8243A3
B00B628BBC018A31021BC222B518F904ABE96333EB8A033D13E80033452B2F7C
8F400CE65F0EAB9181EF6447CEE4BB024AC35075D24EF62ED3E393401BA04C01
CA115E0231AB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fb 255[732{
 enclmmathsy ReEncodeFont }1 885.568 /LMMathSymbols8-Regular
rf /Fc 145[1118 110[{ enclmmathit ReEncodeFont }1 1912.83
/LMMathItalic12-Regular rf /Fd 153[452 102[{ enclmmathit ReEncodeFont }
1 885.568 /LMMathItalic8-Regular rf /Fe 203[993 1[993
50[{}2 1328.35 /wasy10 rf /Ff 185[723 4[830 12[553 2[553
2[307 46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fg 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fh 173[959 82[{}1 1328.35
/MSBM10 rf /Fi 201[0 3[886 50[{ enclmmathsy ReEncodeFont }2
1328.35 /LMMathSymbols10-Regular rf /Fj 204[470 470 470
49[{ enclmrm ReEncodeFont }3 885.568 /LMRoman8-Regular
rf /Fk 194[1012 9[650 2[650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }
6 1328.35 /LMRoman12-Regular rf /Fl 135[739 9[776 7[641
2[560 553 683 34[1012 1[1012 361 59[{ enclmmathit ReEncodeFont }9
1328.35 /LMMathItalic12-Regular rf /Fm 3[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 686 723 650 723
1084 361 686 397 361 723 650 397 578 723 578 723 650
9[1336 2[939 723 2[885 1012 975 2[1011 1[469 975 1021
849 885 993 939 921 975 1[614 10[650 650 650 650 1[650
361 434 361 2[506 506 6[361 4[723 759 27[{ enclmec ReEncodeFont }59
1328.35 /LMRoman12-Regular rf /Fn 134[1136 2[1136 1196
837 849 879 1[1196 1076 1196 1793 598 1136 1[598 1196
1[658 982 1196 956 1196 1046 6[1315 5[1497 2[1616 1470
1616 1682 2041 1293 2[801 1[1691 1353 1412 1[1554 1530
1625 10[1076 1076 1076 1076 1076 1076 1076 1076 598 717
45[{ enclmec ReEncodeFont }45 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fn(F)-239
b(A)717 b(4.1)g(-)h(1)f(Quadratisc)-60 b(he)716 b(F)-179
b(unktion)715 b(-)i(ZO)h(-)f(BIFIE)p 0 TeXcolorgray -741
4800 a Fm(1.)p 0 TeXcolorgray 651 w(Eine)433 b(quadratisc)-36
b(he)434 b(F)-108 b(unktion)433 b(hat)g(die)h(F)-108
b(unktionsgleic)-36 b(h)g(ung)p 0 TeXcolorgray 0 TeXcolorgray
10471 8453 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))368 b(=)h
Fl(ax)16176 7971 y Fj(2)16997 8453 y Fk(+)295 b Fl(bx)g
Fk(+)g Fl(c)433 b Fm(mit)h Fl(a;)221 b(b;)g(c)370 b Fi(2)e
Fh(R)434 b Fm(und)f Fl(a)368 b Fi(6)p Fk(=)h(0)p Fm(.)921
12105 y(Ihr)433 b(Graph)g(ist)g(eine)h(P)-36 b(arab)36
b(el.)921 14651 y(Ordne)422 b(den)h(v)-36 b(orgegeb)36
b(enen)424 b(Bedingungen)e(f\374r)i Fl(a;)221 b(b)423
b Fm(und)g Fl(c)g Fm(die)g(daraus)h(jedenfalls)g(resul-)921
16642 y(tierende)433 b(Eigensc)-36 b(haft)434 b(zu!)p
0 TeXcolorgray 0 TeXcolorgray 2683 18350 4500 45 v 7182
18350 4523 45 v 2683 21609 45 3260 v 3391 20474 a Fl(a)369
b(<)g Fk(0)p 7138 21609 V 0.9 TeXcolorgray 7183 21609
4478 3260 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 8952 20531
a Fm(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
11660 21609 45 3260 v 2683 21653 4500 45 v 7182 21653
4523 45 v 2683 24913 45 3260 v 3391 23778 a Fl(a)g(>)g
Fk(0)p 7138 24913 V 0.9 TeXcolorgray 7183 24913 4478
3260 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 8925 23835 a
Fm(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
11660 24913 45 3260 v 2683 24957 4500 45 v 7182 24957
4523 45 v 2683 28216 45 3260 v 3391 27099 a Fl(c)g Fk(=)g(0)p
7138 28216 V 0.9 TeXcolorgray 7183 28216 4478 3260 v
0 TeXcolorgray 1 0 0 TeXcolorrgb 8961 27138 a Fm(B)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 11660
28216 45 3260 v 2683 28260 4500 45 v 7182 28260 4523
45 v 2683 31520 45 3260 v 3391 30445 a Fl(b)g Fk(=)g(0)p
7138 31520 V 0.9 TeXcolorgray 7183 31520 4478 3260 v
0 TeXcolorgray 1 0 0 TeXcolorrgb 8997 30442 a Fm(F)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 11660
31520 45 3260 v 2683 31564 4500 45 v 7182 31564 4523
45 v 0 TeXcolorgray 0 TeXcolorgray 13765 18350 4567 45
v 18331 18350 24170 45 v 13765 21609 45 3260 v 0.92 TeXcolorgray
13809 21609 4478 3260 v 0 TeXcolorgray 15536 20531 a(A)p
18287 21609 45 3260 v 18995 20402 a(Der)349 b(F)-108
b(unktionsgraph)348 b(hat)h(k)-36 b(eine)349 b(Nullstelle.)p
42457 21609 V 13765 21653 4567 45 v 18331 21653 24170
45 v 13765 26708 45 5056 v 0.92 TeXcolorgray 13809 26708
4478 5056 v 0 TeXcolorgray 15588 24638 a(B)p 18287 26708
45 5056 v 18995 23513 a(Der)290 b(Graph)e(hat)h(mindestens)f(einen)g
(Sc)-36 b(hnitt-)18995 25505 y(punkt)433 b(mit)h(der)f(x-A)-36
b(c)g(hse.)p 42457 26708 V 13765 26753 4567 45 v 18331
26753 24170 45 v 13765 31808 45 5056 v 0.92 TeXcolorgray
13809 31808 4478 5056 v 0 TeXcolorgray 15578 29737 a(C)p
18287 31808 45 5056 v 18995 28613 a(Der)434 b(Sc)-36
b(heitelpunkt)433 b(der)g(P)-36 b(arab)36 b(el)434 b(ist)f(ein)18995
30604 y(Ho)36 b(c)-36 b(hpunkt.)p 42457 31808 V 13765
31852 4567 45 v 18331 31852 24170 45 v 13765 36907 45
5056 v 0.92 TeXcolorgray 13809 36907 4478 5056 v 0 TeXcolorgray
15551 34837 a(D)p 18287 36907 45 5056 v 18995 33712 a(Der)434
b(Sc)-36 b(heitelpunkt)433 b(der)g(P)-36 b(arab)36 b(el)434
b(ist)f(ein)18995 35704 y(Tiefpunkt.)p 42457 36907 V
13765 36951 4567 45 v 18331 36951 24170 45 v 13765 41748
45 4797 v 0.92 TeXcolorgray 13809 41748 4478 4797 v 0
TeXcolorgray 15606 39807 a(E)p 18287 41748 45 4797 v
18995 38811 a(Der)341 b(Graph)f(der)g(F)-108 b(unktion)340
b(ist)h(symmetrisc)-36 b(h)18995 40803 y(zur)434 b(x-A)-36
b(c)g(hse.)p 42457 41748 V 13765 41792 4567 45 v 18331
41792 24170 45 v 13765 46847 45 5056 v 0.92 TeXcolorgray
13809 46847 4478 5056 v 0 TeXcolorgray 15624 44777 a(F)p
18287 46847 45 5056 v 18995 43652 a(Der)341 b(Graph)f(der)g(F)-108
b(unktion)340 b(ist)h(symmetrisc)-36 b(h)18995 45644
y(zur)434 b(y-A)-36 b(c)g(hse.)p 42457 46847 V 13765
46892 4567 45 v 18331 46892 24170 45 v 47992 4800 a Fg(___/1)p
1 0 0 TeXcolorrgb 48228 6792 a Ff(F)-123 b(A)369 b(4.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
53259 54804 45 v 0 TeXcolorgray 24746 81281 a Fm(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)671 b(4.1)f(-)i(2)e(Graphen)g
(v)-60 b(on)671 b(P)-60 b(olynomfunktionen)667 b(-)k(MC)g(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fm(2.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(P)-36 b(olynomfunktion)435
b Fl(f)575 b Fm(dritten)433 b(Grades.)921 7346 y(Kreuze)548
b(diejenige\(n\))f(Abbildung\(en\))g(an,)h(die)g(einen)f(m\366glic)-36
b(hen)549 b(F)-108 b(unktionsgraphen)887 9338 y(v)-36
b(on)434 b Fl(f)575 b Fm(zeigt/zeigen.)p 0 TeXcolorgray
0 TeXcolorgray 2800 15324 20906 45 v 2800 33451 45 18128
v 3508 32506 a
 currentpoint currentpoint translate 0.76547 0.76547 scale neg exch
neg exch translate
 3508 32506 a 3508 32506 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 191.62447 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 32506 a
14624 21812 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 101.65681 0.0 -100.4199 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 95.01382 0.0 -96.61064   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.65681  0 -100.4199  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.4199
 101.65681  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.61064  def /maxTickline 95.01382  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 95.01382  0 -96.61064  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.61064
 95.01382  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.4199  def /maxTickline 101.65681  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14624 21812 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14624 21812 a 14624 21812 a
tx@Dict begin  { 101.65681 95.01382 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14624 21812 a 14624 21812
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14624 21812 a 14281 22098 a Fm(x)14624 21812 y
tx@Dict begin  PutEnd  end
 14624
21812 a 14624 21812 a
tx@Dict begin  PutEnd  end
 14624 21812 a 14624 21812 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14624
21812 a 14624 21812 a
tx@Dict begin  { 0.0 0.0 pop 101.65681 95.01382 exch pop } PutCoor
PutBegin  end
 14624 21812 a 14624 21812 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14624
21812 a 13576 22144 a Fm(f\(x\))14624 21812 y
tx@Dict begin  PutEnd  end
 14624 21812
a 14624 21812 a
tx@Dict begin  PutEnd  end
 14624 21812 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5293578935800984 def /x1 3.57282683975511
def /dx x1 x sub 199 div def /F@pstplot (0.6515379335652558*x^(3.0)-0.2932894957441645*x^(2.0)-1.247903296439932*x+0.8896548586188406)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 25877 32506 a
currentpoint initclip moveto
 25877 32506 a 3508 32506 a
 currentpoint currentpoint translate 1 0.76547 div 1 0.76547 div scale
neg exch neg exch translate

3508 32506 a 21295 33451 45 18128 v 1 0 0 TeXcolorrgb
22004 24720 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 23660 33451 V 2800 33495 20906 45 v 2800
51622 45 18128 v 3508 50678 a
 currentpoint currentpoint translate 0.76547 0.76547 scale neg exch
neg exch translate
 3508 50678 a 3508 50678
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 191.62447 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 50678 a 14624 39983 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 101.65681 0.0 -100.4199 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 95.01382 0.0 -96.61064   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.65681  0 -100.4199  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.4199
 101.65681  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.61064  def /maxTickline 95.01382  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 95.01382  0 -96.61064  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.61064
 95.01382  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.4199  def /maxTickline 101.65681  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14624 39983 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14624 39983 a 14624 39983 a
tx@Dict begin  { 101.65681 95.01382 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14624 39983 a 14624 39983
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14624 39983 a 14281 40269 a Fm(x)14624 39983 y
tx@Dict begin  PutEnd  end
 14624
39983 a 14624 39983 a
tx@Dict begin  PutEnd  end
 14624 39983 a 14624 39983 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14624
39983 a 14624 39983 a
tx@Dict begin  { 0.0 0.0 pop 101.65681 95.01382 exch pop } PutCoor
PutBegin  end
 14624 39983 a 14624 39983 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14624
39983 a 13576 40315 a Fm(f\(x\))14624 39983 y
tx@Dict begin  PutEnd  end
 14624 39983
a 14624 39983 a
tx@Dict begin  PutEnd  end
 14624 39983 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5293578935800984 def /x1 3.57282683975511
def /dx x1 x sub 199 div def /F@pstplot (0.4166666666666667*x^(4.0)-1.4166666666666667*x^(2.0)-1.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 25877 50678 a
currentpoint initclip moveto
 25877 50678 a 3508 50678 a
 currentpoint currentpoint translate 1 0.76547 div 1 0.76547 div scale
neg exch neg exch translate

3508 50678 a 21295 51622 45 18128 v 23660 51622 V 2800
51667 20906 45 v 2800 69794 45 18128 v 3508 68849 a
 currentpoint currentpoint translate 0.76547 0.76547 scale neg exch
neg exch translate
 3508
68849 a 3508 68849 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 191.62447 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 68849 a 14624 58154 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 101.65681 0.0 -100.4199 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 95.01382 0.0 -96.61064   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.65681  0 -100.4199  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.4199
 101.65681  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.61064  def /maxTickline 95.01382  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 95.01382  0 -96.61064  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.61064
 95.01382  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.4199  def /maxTickline 101.65681  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14624 58154 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14624 58154 a 14624 58154 a
tx@Dict begin  { 101.65681 95.01382 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14624 58154
a 14624 58154 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14624 58154 a 14281 58440 a Fm(x)14624
58154 y
tx@Dict begin  PutEnd  end
 14624 58154 a 14624 58154 a
tx@Dict begin  PutEnd  end
 14624 58154 a 14624
58154 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14624 58154 a 14624 58154 a
tx@Dict begin  { 0.0 0.0 pop 101.65681 95.01382 exch pop } PutCoor
PutBegin  end
 14624 58154 a 14624
58154 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14624 58154 a 13576 58487 a Fm(f\(x\))14624 58154
y
tx@Dict begin  PutEnd  end
 14624 58154 a 14624 58154 a
tx@Dict begin  PutEnd  end
 14624 58154 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5293578935800984 def /x1 3.57282683975511
def /dx x1 x sub 199 div def /F@pstplot (-0.5158841765564153*x^(3.0)+0.3019605653462957*x^(2.0)+0.7053075398560196*x-1.4913839286459)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 25877 68849 a
currentpoint initclip moveto
 25877 68849 a
3508 68849 a
 currentpoint currentpoint translate 1 0.76547 div 1 0.76547 div scale
neg exch neg exch translate
 3508 68849 a 21295 69794 45 18128 v 1 0 0
TeXcolorrgb 22004 61062 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 23660 69794 V 2800 69838 20906
45 v 24758 15324 V 24758 33451 45 18128 v 25466 32506
a
 currentpoint currentpoint translate 0.76547 0.76547 scale neg exch
neg exch translate
 25466 32506 a 25466 32506 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 191.62447 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 32506 a 36582 21812
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 101.65681 0.0 -100.4199 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 95.01382 0.0 -96.61064   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 101.65681  0 -100.4199  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.4199
 101.65681  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.61064  def /maxTickline 95.01382  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 95.01382  0 -96.61064  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.61064
 95.01382  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.4199  def /maxTickline 101.65681  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 95.01382
0.0 -96.61064   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 101.65681
0.0 -100.4199 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36582 21812 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 36582 21812 a
36582 21812 a
tx@Dict begin  { 101.65681 95.01382 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 36582 21812 a 36582 21812 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 36582 21812
a 36239 22098 a Fm(x)36582 21812 y
tx@Dict begin  PutEnd  end
 36582 21812 a 36582
21812 a
tx@Dict begin  PutEnd  end
 36582 21812 a 36582 21812 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36582 21812 a 36582
21812 a
tx@Dict begin  { 0.0 0.0 pop 101.65681 95.01382 exch pop } PutCoor
PutBegin  end
 36582 21812 a 36582 21812 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36582 21812 a 35534
22144 a Fm(f\(x\))36582 21812 y
tx@Dict begin  PutEnd  end
 36582 21812 a 36582 21812
a
tx@Dict begin  PutEnd  end
 36582 21812 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5293578935800984 def /x1 3.57282683975511
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)+1.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
47835 32506 a
currentpoint initclip moveto
 47835 32506 a 25466 32506 a
 currentpoint currentpoint translate 1 0.76547 div 1 0.76547 div scale
neg exch neg exch translate
 25466 32506
a 43253 33451 45 18128 v 1 0 0 TeXcolorrgb 43962 24720
a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45619 33451 V 24758 33495 20906 45 v 24758 51622 45 18128
v 25466 50678 a
 currentpoint currentpoint translate 0.76547 0.76547 scale neg exch
neg exch translate
 25466 50678 a 25466 50678 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 191.62445 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 50678
a 36120 40793 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 105.83772 0.0 -96.239 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 102.33018 0.0 -89.29427   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 105.83772  0 -96.239  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -96.239
 105.83772  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-89.29427  def /maxTickline 102.33018  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.33018
0.0 -89.29427   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.83772
0.0 -96.239 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 102.33018  0 -89.29427  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -89.29427
 102.33018  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.239  def /maxTickline 105.83772  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.33018
0.0 -89.29427   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 105.83772
0.0 -96.239 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36120 40793 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

36120 40793 a 36120 40793 a
tx@Dict begin  { 105.83772 102.33018 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 36120 40793 a 36120 40793
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 36120 40793 a 35777 41079 a Fm(x)36120 40793 y
tx@Dict begin  PutEnd  end
 36120
40793 a 36120 40793 a
tx@Dict begin  PutEnd  end
 36120 40793 a 36120 40793 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36120
40793 a 36120 40793 a
tx@Dict begin  { 0.0 0.0 pop 105.83772 102.33018 exch pop } PutCoor
PutBegin  end
 36120 40793 a 36120 40793 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36120
40793 a 35072 41125 a Fm(f\(x\))36120 40793 y
tx@Dict begin  PutEnd  end
 36120 40793
a 36120 40793 a
tx@Dict begin  PutEnd  end
 36120 40793 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.3824161404766113 def /x1 3.719768592858597
def /dx x1 x sub 199 div def /F@pstplot (-1.2864373177962225*x^(4.0)+2.442645498117902*x^(3.0)+0.9316905690702632*x^(2.0)-3.0873058683058248*x+1.7100863785380367)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 36120 40793 a
tx@Dict begin  { -35.61584 -87.552 } PutCoor PutBegin  end
 36120 40793 a -172 x Fd(f)36120
40793 y
tx@Dict begin  PutEnd  end
 36120 40793 a 47835 50678 a
currentpoint initclip moveto
 47835 50678 a 25466
50678 a
 currentpoint currentpoint translate 1 0.76547 div 1 0.76547 div scale
neg exch neg exch translate
 25466 50678 a 43253 51622 45 18128 v 45619 51622
V 24758 51667 20906 45 v 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 48228 6792 a Ff(F)-123 b(A)369 b(4.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73866
54804 45 v 0 TeXcolorgray 24746 81281 a Fm(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)717 b(4.1)g(-)h(3)f(P)-60
b(arab)60 b(el)717 b(-)g(MC)h(-)g(BIFIE)p 0 TeXcolorgray
-741 4800 a Fm(3.)p 0 TeXcolorgray 651 w(Der)468 b(Graph)f(einer)h(P)
-36 b(olynomfunktion)470 b(zw)-36 b(eiten)468 b(Grades)f(mit)h
Fl(f)142 b Fk(\()p Fl(x)p Fk(\))428 b(=)f Fl(ax)38407
4318 y Fj(2)39252 4800 y Fk(+)318 b Fl(bx)h Fk(+)f Fl(c)468
b Fm(ist)921 6792 y(eine)434 b(P)-36 b(arab)36 b(el.)2617
11326 y(W)-108 b(elc)-36 b(he)307 b(Bedingungen)g(m)-36
b(\374ssen)306 b(die)i(K)-36 b(o)36 b(ef-)2683 13317
y(\034zien)-36 b(ten)433 b Fl(a;)221 b(b)434 b Fm(und)f
Fl(c)h Fm(jedenfalls)h(erf\374llen,)2683 15309 y(damit)549
b(die)g(P)-36 b(arab)36 b(el)550 b(\(so)f(wie)h(in)f(der)f(ne-)2683
17301 y(b)36 b(enstehenden)575 b(Skizze\))i(nac)-36 b(h)577
b(un)-36 b(ten)575 b(of-)2683 19293 y(fen)593 b(ist)g(und)f(ihren)g(Sc)
-36 b(heitel)593 b(auf)g(der)g(y-)2635 21285 y(A)-36
b(c)g(hse)433 b(hat?\))p 0 TeXcolorgray 0 TeXcolorgray
27928 19340 a
 currentpoint currentpoint translate 0.66153 0.66153 scale neg exch
neg exch translate
 27928 19340 a 27928 19340 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.07672 a add def
/d 0.0 a add neg def /h 121.94312 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 27928 19340
a 38929 16745 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.70183  0 -99.3749  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.3749
 102.70183  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.4452  def /maxTickline 98.49791  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 98.49791
0.0 -23.4452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.70183
0.0 -99.3749 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 98.49791  0 -23.4452  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.4452
 98.49791  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.3749  def /maxTickline 102.70183  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 98.49791
0.0 -23.4452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.70183
0.0 -99.3749 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38929 16745 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 38929 16745 a
38929 16745 a
tx@Dict begin  { 102.70183 98.49791 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 38929 16745 a 38929 16745 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 38929 16745
a 38586 17031 a Fm(x)38929 16745 y
tx@Dict begin  PutEnd  end
 38929 16745 a 38929
16745 a
tx@Dict begin  PutEnd  end
 38929 16745 a 38929 16745 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 38929 16745 a 38929
16745 a
tx@Dict begin  { 0.0 0.0 pop 102.70183 98.49791 exch pop } PutCoor
PutBegin  end
 38929 16745 a 38929 16745 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 38929 16745 a 38586
16902 a Fm(y)38929 16745 y
tx@Dict begin  PutEnd  end
 38929 16745 a 38929 16745
a
tx@Dict begin  PutEnd  end
 38929 16745 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 1 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.4926224553042267
def /x1 3.6095622780309817 def /dx x1 x sub 199 div def /F@pstplot
(-x^(2.0)+3.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 1 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.4926224553042267
def /x1 3.6095622780309817 def /dx x1 x sub 199 div def /F@pstplot
(-2.5*x^(2.0)+3.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.4926224553042267
def /x1 3.6095622780309817 def /dx x1 x sub 199 div def /F@pstplot
(-0.5*x^(2.0)+3.0)  tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274
mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy moveto  199
1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } ps@Exit
{ exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  gsave 1.2 SLW 0 0 1  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 50297 19340 a
currentpoint initclip moveto
 50297 19340 a
27928 19340 a
 currentpoint currentpoint translate 1 0.66153 div 1 0.66153 div scale
neg exch neg exch translate
 27928 19340 a 921 23196 a Fm(Kreuze)g(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
19759 24163 6865 45 v 19759 26925 45 2762 v 20468 25945
a Fl(a)369 b(<)f Fk(0)p 24215 26925 V 1 0 0 TeXcolorrgb
24923 25876 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 26580 26925 V 19759 26969 6865 45 v 19759
29731 45 2762 v 20468 28751 a Fl(a)h(>)f Fk(0)p 24215
29731 V 26580 29731 V 19759 29775 6865 45 v 19759 32587
45 2813 v 20468 31642 a Fl(b)h Fk(=)g(0)p 24215 32587
V 1 0 0 TeXcolorrgb 24923 31513 a Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 26580 32587 V 19759
32632 6865 45 v 19759 35479 45 2848 v 20468 34499 a Fl(b)g(<)g
Fk(0)p 24215 35479 V 26580 35479 V 19759 35524 6865 45
v 19759 38250 45 2727 v 20468 37305 a Fl(c)g Fk(=)f(0)p
24215 38250 V 26580 38250 V 19759 38294 6865 45 v 47992
4800 a Fg(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Ff(F)-123
b(A)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 42322 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fn(F)-239 b(A)943 b(4.1)h(-)g(4)g(P)-60
b(olynomfunktion)941 b(v)-60 b(om)944 b(Grad)g Fc(n)f
Fn(-)i(L)-179 b(T)942 b(-)j(Matura)-2385 4515 y(2015/16)718
b(-)f(Neb)60 b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray
-741 7823 a Fm(4.)p 0 TeXcolorgray 651 w(Die)441 b(nac)-36
b(hstehende)439 b(Abbildung)h(zeigt)h(den)f(Graphen)f(einer)h(P)-36
b(olynomfunktion)442 b Fl(f)142 b Fm(.)441 b(Alle)921
9815 y(c)-36 b(harakteristisc)g(hen)329 b(Punkte)f(des)h(Graphen)e
(\(Sc)-36 b(hnittpunkte)327 b(mit)h(den)h(A)-36 b(c)g(hsen,)328
b(Extrem-)921 11806 y(punkte,)433 b(W)-108 b(endepunkte\))432
b(sind)h(in)h(dieser)f(Abbildung)g(en)-36 b(thalten.)p
0 TeXcolorgray 0 TeXcolorgray 13289 40539 a
 currentpoint currentpoint translate 1.21356 1.21356 scale neg exch
neg exch translate
 13289 40539
a 14156 40539 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 142.83289 a add def
/d 0.0 a add neg def /h 195.75458 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 14156 40539 a 24549 30019 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 48.93875 0.0 -105.84424 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 100.72252 0.0 -95.03206   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 48.93875  0 -105.84424  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -105.84424
 48.93875  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-95.03206  def /maxTickline 100.72252  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.72252
0.0 -95.03206   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 48.93875
0.0 -105.84424 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 100.72252  0 -95.03206  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -95.03206
 100.72252  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.84424  def /maxTickline 48.93875  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 100.72252
0.0 -95.03206   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 48.93875
0.0 -105.84424 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
23304 27155 a Fj(1)23304 24005 y(2)23304 20856 y(3)22572
33408 y Fb(\000)p Fj(1)22572 36558 y Fb(\000)p Fj(2)22572
39707 y Fb(\000)p Fj(3)27464 31365 y(1)-7135 b Fb(\000)p
Fj(1)-4352 b Fb(\000)p Fj(2)h Fb(\000)p Fj(3)24549 30019
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 24549 30019 a 24549 30019 a
tx@Dict begin  { 48.93875 100.72252 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 24549 30019 a 24549 30019
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 24549 30019 a 24179 30305 a Fl(x)24549 30019 y
tx@Dict begin  PutEnd  end
 24549
30019 a 24549 30019 a
tx@Dict begin  PutEnd  end
 24549 30019 a 24549 30019 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 24549
30019 a 24549 30019 a
tx@Dict begin  { 0.0 0.0 pop 48.93875 100.72252 exch pop } PutCoor
PutBegin  end
 24549 30019 a 24549 30019 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 24549
30019 a 23282 30351 a Fl(f)142 b Fk(\()p Fl(x)p Fk(\))24549
30019 y
tx@Dict begin  PutEnd  end
 24549 30019 a 24549 30019 a
tx@Dict begin  PutEnd  end
 24549 30019 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.72 def /x1 1.7200000000000017
def /dx x1 x sub 199 div def /F@pstplot (0.5898906689021344*x^(4.0)+1.513114671137602*x^(3.0)-0.08989066890213436*x^(2.0)-0.013114671137602042*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24549 30019 a
tx@Dict begin  { 34.71237 85.35823 } PutCoor PutBegin  end
 24549 30019 a
923 x Fl(f)24549 30019 y
tx@Dict begin  PutEnd  end
 24549 30019 a 29967 40539 a
currentpoint initclip moveto

29967 40539 a 13289 40539 a
 currentpoint currentpoint translate 1 1.21356 div 1 1.21356 div scale
neg exch neg exch translate
 13289 40539 a 921 44523 a
Fm(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 46515 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)921
50005 y(Die)1105 b(P)-36 b(olynomfunktion)1105 b Fl(f)1246
b Fm(ist)1104 b(v)-36 b(om)1104 b(Grad)p 26914 50005
3150 45 v 30536 49957 a(1)30064 50005 y Fa(\015)p 31658
50005 V 4254 w Fm(,)h(w)-36 b(eil)1104 b Fl(f)1246 b
Fm(genau)p 921 51997 V 4542 51949 a(2)4071 51997 y Fa(\015)p
5665 51997 V 3583 w Fm(hat.)p 0 TeXcolorgray 0 TeXcolorgray
13768 53370 7393 45 v 13768 56454 45 3085 v 17139 55151
a(1)16667 55199 y Fa(\015)p 21115 56454 V 13768 56498
7393 45 v 13768 59757 45 3260 v 14476 58554 a Fl(n)370
b(<)e Fk(3)p 18750 59757 V 19459 58460 a Fe(2)p 21115
59757 V 13768 59802 7393 45 v 13768 63061 45 3260 v 14476
61858 a Fl(n)i Fk(=)e(3)p 18750 63061 V 19459 61763 a
Fe(2)p 21115 63061 V 13768 63105 7393 45 v 13768 66364
45 3260 v 14476 65161 a Fl(n)i(>)e Fk(3)p 18750 66364
V 1 0 0 TeXcolorrgb 19459 65067 a Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21115 66364 V 13768
66409 7393 45 v 0 TeXcolorgray 0 TeXcolorgray 30427 53370
14086 45 v 30427 56454 45 3085 v 37144 55151 a Fm(2)36673
55199 y Fa(\015)p 44468 56454 V 30427 56498 14086 45
v 30427 59757 45 3260 v 31135 58554 a Fm(eine)434 b(Extremstelle)p
42103 59757 V 42811 58460 a Fe(2)p 44468 59757 V 30427
59802 14086 45 v 30427 63061 45 3260 v 31135 61858 a
Fm(zw)-36 b(ei)434 b(W)-108 b(endestellen)p 42103 63061
V 1 0 0 TeXcolorrgb 42811 61763 a Fe(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 44468 63061 V 30427
63105 14086 45 v 30427 66364 45 3260 v 31135 65161 a
Fm(zw)-36 b(ei)434 b(Nullstellen)p 42103 66364 V 42811
65067 a Fe(2)p 44468 66364 V 30427 66409 14086 45 v 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 48228 9815 a Ff(F)-123
b(A)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 70437 54804 45 v 0 TeXcolorgray 24746
81281 a Fm(4)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.6/FA 2.6 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:45:00 2017
%%Pages: 2
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular MSBM10 LMRoman8-Regular wasy10
%%+ LMMathItalic8-Regular LMRoman10-Regular LMMathSymbols8-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktionale Abhaengigkeiten/FA 2.6/FA 2.6 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0944
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB68A4B14D70599
BBC56D832892EBE9E2BB72A6F7B956D8D8F257466803DF558640D82C0BFCEE12
3AFE51583D9E576810FD5239C9CC0937BF33358AAB8807108315E38FFF635A3F
57C728E8D8020D71C1703AE469859D5BCC5C0B83DC56E6B235EBF3767BECF1C4
78DE16ABA697C3F18F402EBF9F09621B8C072090284BC5C6F10E7A971B454ED6
62FBC1A91870F50B7B061D00C50AB1B96FE351BA98EBA736BD0634EB795F1750
1A1C040D912FE802B5A2237DDE404BAF0C14BF53D8D2D112D26D2FF250FA063F
181B85F0AE00B3CDD40500DD3014552F5A15E049CCC7143BA6D5481C43A0DECC
7692405E86FC991638FFF960D01EDD1FD63752D6A00771B87730EEC035F26737
2D75F4CB9B95C1946B48FF93280C26B85F7F17A7A32CC00B93E60DB42FA91839
C0D12438B3A01FD93DAD24CFB6D523F0DF0DF36D74639E605690A455D15945BD
F49DCD419DD626588037DD122FD1B21F61D39564EE5371200E2E24AD33EE69E8
62AF235E1F550483BAB3612EFBBC88AEFACBC968B4457C6C971658B8
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE279918B0B31E08031DB686D518B4CBB8A4D0B
EBF6750A452A7F706EA676E3B3237FC5656B29CD5A3A04F82AC871B526CC28B3
A61D985EEB3610FCAA433B9C6D4683C512F0FDBF3EE6FF552D7BF0BBBBA37050
FCBE3F164189FDC8446ACDE8D0D4050278151B46E56AF826A0C2E9389C2B8BB8
E38579D281D5142944D3322E1C66D456E4C5DD727AA41FA5B369D5E10CD71832
A7DD40DE855B47289C449B6AD8D5F1D557102050EDA5F1641EAAFDDBC082E579
A06D8A3A323458808BAD0F4B8A2BF406DBAC4C5F555EC96E760C8245A1AD9F50
881DB475F892F868823CC55D4859C09148529FBA57A392127B68F5366491D1BB
097D8FF4A71966D42DD988F48C8A1F4DE0449E6AAE79500C42B4EFE4936D0D00
0FB339115493C16412F1D6DCE02BC7B485CC108C6321EBF1C609633933A576C6
B0758D49F3155D448D505F73A5206EC1C8886F5949790A7E4B850B6B8E31EC18
B7321E63AC75B6588774961F6B7D313B850AA4B368E48DAFAA5693CAA236E150
E02FB2831359FDB95792B2E6431DD24BFA8F2B51BC21E2E5AACC0CA211F50A13
075ABCF9F440CA468403D939B91520C652F1196EAF1BC975E26F8057F69CB972
E976F99070AD3FCD958C1EC54B3994EA142AA0615EF7BC00D85F75BF5F32B350
E2CF46BA0E8D0120BDB54910E5C27A27B59664E856EDDE290103A0D490FD76DD
09B152B3AD1C4754696B239D4B13935AC19769600943C7343A5E7A06C9115395
DC2F92EA95E5ECE5A08EDD16DF74B6297EC0220C91F8BB9AFE742FA96456E131
7D41CDCE88A8F9A12D46B8FCA50DF4433B0B8AED6A63BB5FFDFB8D48D04F9849
2972699B5667C0D2D206F4785DE20A854E1D4C655A690689B7B5A19F8162E5D8
454B7A1CE94AF723F47C6B168CB7269CC802B14545C8448B5C260C6AAED5FB23
2390D7239C22534FEE644AE96C5718EFFB9DF1AC47CB3022D3751E6B7123FB71
403E154150FA4A14EE2CDC8F0BD084CAB30272E8F065218BA88536F138B94AFA
D750F6EA9BB43271084CD876A14CEBEB86283BDB500BBC0F9E152C30059054EE
92951E4A202AB409F7D16443DE00ED69C1FA674BA3664F8BD00C08A27F475C00
E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4B116E78065CB219C926D45163
EBF6E81EF0C38076871283D64FA5F2126CCA7E93636A7CCA2158B99A15CD405D
4AD290CD8F7AF8845CF78D4BE9C7F2E4DC00372530C64BBBB785117A8AEEC190
9F49C82BAD55AD174D38A74582CB367BB50ACF8FBB2C8A2EDB17FF267D0F21C3
5BE42CA518272C9F9FB2DF0780C957CF1B9734E9F49C0E6EBDB5D24ED5D673E2
6A25811D4BCA9D693EF8ABE784D2BE46DE1E57E1B738ADF6FD49E6A53BF48C6C
2A73026234D3719C72C2FB8B8274AB54A6853DC6784398A6B994BE424B6E9078
6C303D590747608AF3CDD6A51B5612DD5D49E1153A25EBEAC76FEC601CF4D10F
65DAE3EDBF9A163BEE244542BFD2849D498C239237ECDCB23458C7C3B9395C7F
900C2AC7BDEF8FB9D4574698BC8D4E374B34969A885A0A4AA26F19F8348EC621
89B42297868AD2C3E80D95C41FA4A5AF7A016D3C773E040312AA0240DE24C7F9
D662FC2E59673DEF563AECCABF724C09CEEB5DCA64FC6D24A091A75B5745DFEE
F5C1162900B5F1EF5A7102C27DB1918679E7E354A5DABF897D9C8EF5A14FA8DF
FA3A7B3D47542FFF5987268E60E7FD64B017EC6A8FDB4BA5AB5B5B58046899C9
C5993E7302C870678DEBE8FEF3F2438217BA5121CC668458620DB3D381D56770
19CDD612E5C0A267BE4F707ECE93B3E1E8BE65922315729FA5513AD13B562C5E
E145AB39905815D6C3E8B60AC5C1D4D7731E2A6B122C6F57790C42B0368AD7A4
99EE5F029AA6F8E302F4CD994EC08C00AC6A66C51254F71280CC722402E200EA
D4F6F489DCD61B81CDB85804A5EF00CDB09D9C2EE4F3D571285E319A78F90942
1C31359DDF81F38F6E8615BCD0E6CFFE077688C365888921E45608C868A0F6F9
D726CB2CD81B49A9F47C12FF76284D3B07E2C2E788036B4867F90D40C1E4FF74
60399F1F08F98A05A579D00D1ED5E8A86BE9DC1CEE3FCB03B9A0E4BBB81C849F
AB1A6089E9807455A5DD78B2EC3090E36EDF4D19FA6BBEF386127BBDB53D25E6
8448A975CD56BE0A93070F848850FB9B3B0285C7FADB28A3711C06273B79FBD2
A509FDF7AF81630306D67E0AAD0DAB78243E1B814F745234BA7CD57325B5A34C
C3F984018DC9653649786481788A6F58ADDB87DD0D883AF60455753850A63756
5EBCDE76329F5626E6328EBE3DB5770A4C3E21341C304F38845FE70E091803D9
D14037AC4AA8C4D17EBB62ACEFE5344982E0F489D72EF60183D8F2A79A3AA765
C18E0479B0255870CD61C8CF7AA8DE567D174EC90945404C5B928EAF3E8DDC1E
018442474EC6B0B42DF539EC1557722299347DCFF0347BA4273054B8062D3DF6
FF094944AE472D60DDF6CA62288E4E780F8614C7749C9406325C82715C866134
637DCCE4848D2B051B8E0EC7B88872E9AE68BB5DDC30F4A61119733F6F6DE0BF
4C6437A849A661B6A233B1C24238BB910C11D2A8024C89FB5DC745489AAC2570
4C61242B4B1983A5D0B134C8052495CBAA9D2E2E014641BD58F0EC389FACADA3
08A1723A5C2492BA0615B0222EDD152AD19C307118AC0086653521EA59D676CF
C36AB586FF1FD4C383E2785EAD36F41274FB0BFF9DFEADC612CA44A7392D8E79
1DDE1DE818BBF26CE3BCC2569F5CE6DC91D4F8B7800A05DECB300CD7A8C38D77
4C1DF436013901C9671F77F34A63F361C5579EC5E00C5A8E2FC97874F6459EFC
C1760E9C6C78E60CC0152340DA6F26C67B2E10B620750E2C44E5CB9DCE747E29
6F7E716E6BB12B699A2FCA90DFB3DD730D96D100DC5B1BBB1632D7015235F4D5
1C1C753EEFDD6ADCEB45DF4D00713744039C43B860B5A9C51AF0BEF11CC8E85B
067A402342896C9B3BAAA570C4900E12D720F2812F28626DE3BD3F3426B82718
259AD02CDB518BA4C4AD8F261CFEBF43857EC7A543ABB1E059247E276E206CB0
0BED125C8F78A665901F80068C9B0AED83074C6270B177BAA18F1975F43E9160
8B75D86D9F7C1E986C2DDA71CBF33FACEE675B943764AFE71B5A359C4A092916
3E8EF660794518DA4307AA5B38469000FBF31BAE9CE8703754A099D21B332D3C
A19A842755A79DDC1E281A8C34A969B80EDC946658B7579B5BCF07AC8B45C2A8
3664140E70CA62DCB3153CB4A8E46F12CC16254F52A26FE47FE41504D3E851A0
665AB60BC0CE5C72512D196F8D1BC0B3FC12DA2D13F4B9AEA2D017EE7E574B86
2576F5EA495F51E1B3A86090ECFDB57097EF73BFFD5E41E8AB6BF105F87986D4
95940A8B4A29E4DC974554DF975D026EA92FC09DBD65783663CAFE414B6F8C06
F00A26631D7FCC4527109F177093E7432F5FAA6CA14F1654ACCFEC8FFC127488
F604E972B695E9EF18F331A58BE4704E5130FB4984C3FE2474E6CF0935F90B79
7221D94774689E83E5406F5D9554C1284249C687A6CF5A6B4783F54267C48710
32ED406DE854CD5E243C0BE4656E35FA02FAF5101E1AE6B7CB286C9DB979D763
FEB468FC7AA2DDBE2E708D27D89164B12BD8BDF0418BEDF018EA67683158D1B7
73C6EF553EA897D5F2D53E75902E57D7C4E06D7DC83F1C557ECF5DE83748370B
00EE03A3ADB919976D4DBFF11B246AF9C2FE922A8A6F8CD47656ED2CBC816B17
3B01048BE9D1E4B54ABC0396D5203D088ED7A1FC7CC863AF414AC14AC2D75E5E
EDEB706CFB2AFE24EB580E55BD31B793E4065CE83795F047004ED88F5C38BDA8
7F5FA8880517429B9C4E5FE980448EDF3BD57758FD145E769D4E88BF43D19050
DA58F5EDC7B4AA76BD8CDAF0B8639BD5D2C7552AF5415B7F35B957F02B962930
D3D0C3AABCE7BF840A7A035F2CC57FC978684570CF6C8FDB960B9CC6E9435D65
77D1CFB71D362BAD7280AED8771C6EE2F7E2D86C5661CDBEBB354B84249E93B7
7A0E409B4D5E17600E1E43F5EA1F884939C0AE467119F1E155676D10A8A35955
BADB667DB10180DF404F43A166E2E533F1C050D35CE4AEE92C35EE391398EFCF
E19EDE2E31F837DF86F1800F59C89EF6401112AB73434A3938E1970D8EA3CD40
C7B8FB44205899626FBC269C25478E0A63F78F3460EDD4F64B4D2A5B3E660B64
D293F803C670E243F0B0EB1C548746C08C7F4FAC0D4A7FD8B7369AED2AE9A79C
74C0FF0E0B0C1AD3B59BEF79753FDA3E929B52F207382364B1C62AE8311C4337
297E030CC0CE93ADB4E2FEB60E28FF6D4AF0010D422AFC137F2254FFF6C2929F
CB76A235705EC088049C1F1B0E78FD2D357BBBFB0E12CD481F96252AB7402213
DF9BB4464515CCEA5FE4C0CF761E921D7D2992EB24625547D54E3F2C644ABABB
47914DF3ED2C719753BB1EED9C435F2D571BEBA4F76A0AD5DFDBA6EC952A4F37
948B63263FA4097587802F6C66C3BC6E9DF45A22A24877E4A4499697D46B779C
8609E85E4BCFE84319532B3AC9D62BD413CC127C8DAEBC28D7DE5CB57A30F23A
2859902409CD4FF43EF6A99E9FFA2DB4113C12AB9C616F074276C4840A546A73
0D24D8518117AD200014839545B1078F38D7284FBFC473C510CA28AB90147613
F0EBC94C3EA0001043705336F16E783FDADA674B361F951D5152C0011FE0BEAE
51286E4979DACD3F5A953BD9E918D5E46449525A4A597FF0F091B2B4794752D7
EE5D9B94524DF768ADA1377760AB1ACE2D780F5624CF53DE046A36EFB35B52F0
566623440D7F364C4030648BC39783FD7AE189510DB572D01093BC4C7EE0C09F
389FF828AA7585F9B7FAFA718DAF925AA837B8C0B647161E5C322CA820521400
5D234795C9DC1354D1C0E5ABC997C64F3C84D2C3B7581BC9566EB6D012B6B784
F740B8E0B360808C984DEC73EF57328A2347BC752EB0EFF7BE8B688A3622826E
C83CC42DCA4A26C504AB95C5232A86199FC1295D8BC52BBA9C5089A346CC5760
009233FDE0B38CD4EC1D07A9F817ADBD1AA6D303AAF94D5FA688675B55D40FA4
3C6D97741D9FE4C964FC6D24A091A75B5745DFEEF5C1162900B5F1EF59402CD5
E4D0C3953C9493D87F46CE4E9C7A543364A9B82B34154924F4739C650A8EF8D2
38C73BD6689A0657D8427446E44E2F5C77937234D1D6AFCA63944D3FE5126940
8ADA00FF11BFB205B9A42EC1F50B435E4D44E14E22056FEA071D0061F16D8879
6C4BA0C670D0E715ED9333A0FBBD15F19CBCE5F93259A6C4A8CAD50B9186BF14
62D3AE2AAEA8A45E9A29BBCF83E95F0C65B2D60169538EDFAAB935FE3468186E
CD90E2F15FDBB395191E6C4659910683768F80764D94FE8A746FD06C08F15F97
3A528084C73A3416B7D9498707C04E9115D411FD74AD771B5973E6D0A573A1FD
2E01CB1197990EDF8444CC83F1AF789DCE5C7F64567C9D80D1829D7FE5F45647
ED6B99C6D96B728840A77AAB12DF037473065B62E9F3775CAEDAD9508FA92283
6FAA01D50CBB9B12B543AF2A86A99F4D544B8974F01B52945FC6ABCF3ECD8410
335AE6CAAA4F740EFA8AE1742B115F4FA7FD8E330D0B86B191FF5B038A5D0C32
91053A42460468F6A1700953700663A85229385FB9BC76B5FD875ABAE3E6DAD7
9EE2B71FBAA76C2CF157574A30CF7D71980C9059C3D6B6A3204F03427D0C1ED0
63F935C93FEC0118A7769C3492300AC5C68153E7DC46AC75E4031836536A9FF8
F9855C80511A27D667AE834A96925698006601802F57A614BA454AEBAD5381A9
33E9E2EC6A78543582AED8FADA73537FF0C6D7FB2EAF256CEAEC65106F666E66
BF183E0F0E4775D00C05AE65EAF85FB57223FA553494EDAC82855AB977A49791
5342A184DA5589E192F08B7149CBB9903A5809202C698AB39B218ECC7BB9128F
40DFF15856E79E10EA85E741412DF41F4C59FEB8AEF11EC7D1484B17EDFD7F39
0EE3B12312F51B3512559F1D609D0ED4BAD7B1C1C003F982B905BD7D67725C83
EF7119C2C4ABACC0DFF903C17E5B0BC25F89AE84006216080ECAF450D8FF2A1C
A4BD4256B7E56091E388284DBD11F5425FEB05566B96D20438400E0E78630FD5
05A174BEB44068BDD70570D038B3D9F60F63119EC9FA765E6E318CA3DBEB209B
ACED0957B2A13CCC8B93FF7BC5FC7C7A37AE0523EEAF1FBD745CE175B921697F
9D9FF0803559FEA21109882857594189F167F40EED0DF7150DB40D2B141DCC1B
60EDED42C0DB0FF95359E700BE2DC30F248D1BEFA38DFC784CE855754BC80098
5A57640B2B6105B2D2C996F6D44657DAF5DF5891AF008F869D7AF5E4EF1989FD
377E9723C5A85CFE645109B1AA5FEDE99BBB3800D471BB00C657884722CE9678
6CC228DD6BDA9B4F88DC224D329F47D8E9A61F56E5B463649E058E104A8537D3
D81053D9DFBC564791CA6CAFD44529A22B1E1E1B4FEB64AB0950733055DCCC2B
78551535EE5DA52B7AF5030F8AE1482312B61697C4574658A3E865BBEDEF8E1B
CD305A5ACF3C44E769368D0593ED7C9E2AB4B0184BC89A05CD2D29851EA57424
D61EB6B784F740B8E0B3E03FF9D907051555C00416A0EA6EAB6AA9A9C2805F46
DD33536E310CA9D69717A52C2A3DABA7DE4291A28B64252FE32F1E825F6C50AE
8C0BE20370BAF7C1B52A067A884BEC6465A5814897382C0B7360A9FBF7B5252C
0274C581A2005CB515170BEC2EE66FF8AF8CFA76772D207D8683066FD5D51EDE
B31496012FB2F9CF2B71058CCD97763B6A3F95EA470066F36A09F1CB3BBC4F26
EE89E4F31CCC0872C502A1C8B0CDD787936E41B4251518F5F104AE5CD4A2FDD0
DDF0A49EBF5AE2F2B48CF2FFECC694D26D54D22CC042E184BCC24B3A24A2EE02
87CC9B31D5DDCA74AEC3B0951BD68B348F775EFF7AFE7DC3807891D039AECEAC
3F500A09579E6107764550DB8E763943AC6B7E96B5AD46DB008CFEFC57FEA529
B1A39A6D5A637A28A1A9236744BC166B91015A118DCCFF71287C18CC525EC8D7
3AF17F67AE52BC83162C7E24A3FF370EEFBCD54039208ED7DA3A6C181536F001
3360EA2059B5F7BFD55E90340B4244BADD57DA59039042FA132CF54473AF0AE8
0410C4FBC3A45FBE3BA441881DC9CD13CA0FDAA9BFEDB9CEF1998EB975A32C3F
C4563D333529F06FDFCA1636023C3B45D99837E560B85394784304941D884646
C328C7B77E1C3FD22A147E3E44E556C981C23D2B9D8D0304DB1745BE10587DAB
F1A68427E641E85E4574BF359F918F2B9D3FDF5CF9C116B9C191B49753E7688C
E5356D6BD2F73A46212368CC9012404153D4E5526B66BC38B0CC9669D8D3BCEA
EC9258D51FEE724830B54665ED029C213CF3BB4A518522A5EE6D6E2C63E40AED
9BEF61978D1C0B4418FC109D76990019363F72B37F6DC5B93BDA314C4167C256
03722DF8F19F1D293DE97870BB576EE3FEB641B33A39173CC1AFCDF3D79CE4E0
6C5CEEBACAA228078E63369F52E246723C7D0B2789C9FBBC3165C34863C9ED6C
46D85A5EAD76FEA954B700C381C6793D5574AF08AE5A4FC89880D4A8DB59D1FE
15462CC74BFB60D38C2AA5F2CDB2BD662749FDFF8BFD6B7B6B8B82733F531FF6
61381DC983DE2858E791FD4E36E69AA853466C71E506B0E121ABB2931309A431
84D390D40F3798E2D544C5E1B1EC8AD43FF8FD3EAF384259D911831536E2F66A
2B9F9683381C56776D27F95AA5C1EFA52406037E2B86C88F3E83C98EC71CB862
7476F2964ACC6BFED98F0D54D93AB3AE38D3F24C63EFD772D2AEB2CF3B6D89B5
E598CEFE581529073A5E8853C554843C06DEFCD3D6459B5D9116FA780FFE181A
696FB51777C88B95C5DA1613D52F0B05412BEDB2B9F46B82A1C854C6D6ECDFFE
5C9FD3CEB862C7A09D086929626217F6F3C92AC03E542912B987A9BFB8FFCFCA
F350197789934689A185DED842C2A0642F862E14B66919AFD491F98D85CF9C5C
E4E5D6AA1C6F813D68C3D0E18DEC5682F6460808F64E14D191A136FAD0C22A17
71AF31FA95258B6F35D713005FE7B9CE6A7410E32401A3DFC709FEB708BBE2A4
2CC369DA41DAB8861155A0B48DB7048568AD2767314C134DE34AECE622C40AD2
D349F0A99EE75CEDF13EC0C28A147FFD44C20F4FEF9B7C06072E0398F740D8BB
D104EBD00B423765C2FF3AE200C83D5ED0A48664445010A8937F061B9FA20CF2
EFB32200703EF58C425B9A7D255608613C40802E0D32EF0DF8FE6F2D4E2880EB
4A142CC5CC5A245A39A7FD55D42E3FFFE439D20EF38EA4183AFEDB56999D5E9F
D505CB2D368D0F4BCC5D71D81727DDB728C97B2C590A835A6D3C651F84067FFE
F9E72F8364804DE89B9A39149E124C564C5251F613393060892D5129DF9C9877
3585EA5E4D316AEAC8CB4182A887EF4B294EBBE495E6C242EA7B5C525587613D
335148791C6FB743076DD9E879857B6B39E7DC1FA69943D9D567ABBE772B7BC7
43DA9F3E4CC07736067986E397D9FDE103446E41BB5DDDB1F2F0DD388E0CED06
7B792A1170A1A5CF4030E9D16CFA4D5E4A384094A1D84A98A21BD69CF349EE82
607495686545D11C0E99DB92988762E6585B31D75FCA88B7070E2DEDD1593FB0
DCDB5087484584C2F7356FD6B5A93E9118B3322A5C34894BEB40BEE8B5C55D9F
59B7CC0FEE7DE8CDEF76B79746DF911F556899F819A7F99FE11DA4CAB62EA76C
BCD8DBDA1CC34AC36703682998B1C19239790F6B0B3DD6FACF052D2E1C0EB346
72AA7F0D076216347353760B35CDE282F10F4AB8020F184070568B13E980B20C
E24ED96E7EE72A3AD5AC654B29BE5E3F74EEA1B900DCA5B54A71495EBECDFD03
53655C34FE244B430BFFA26066C7CD27258773D747DED2B68D22743E456E2110
AC585882832B7312BEEE75B0C6F18FECC008E1573B012EA2371452E23091C65D
76AAB3B0B477436443089CFDD51972D8DBD2ABC7D011C6D2D65F03B4F6F3BB08
CACC6436E5713A61ADBA63A38EB777CF374ECB550D86A751E25B22ED67B89501
24818EB258558D55DEBAEE736958AD16073794C893B9CE977F7FBF95D2C47F97
9C10077D2CDBEF60569742932E06AEC82A22C9AE93500AAB1256EBEB0D9B5DAB
1C7D96028198DFD7488D92D5377E0D9010C431E2D5BD26ED30F5D86AB32DC91F
6D787B92147BCD955869B80587746A2C55B63866E552FAEBB22F58DCF6C885FF
A8B3E42F7CBEC366E60C18416C4C2F689BC105CDDCBAF905C19B77D2A4807506
8836C50084C16070C4D6DC4777ED7A723EA37BCF5808E562AB9E9D4CD41E0B29
0F4767CC576F85D2ED391BA053E403544F370D68355C2007E89333537459BED7
9B9B3EACA8B357D1EC4A3D0035E2A57BEBDC39E7AB9B8A6C79FE20717BD75EC2
5A96919B0623C4B487F73D78D9C5A40096DF7BA69F270BE9F4B41D0555E6B3D9
69E12C4E871B24F07E41630F1CC9B82B395BDCE1885A1D5F3441B03AC6B3495F
24579852564EF01DC4AD98F15D522BD15FB9074ADF929B90EEFB3B1EF3AACA3F
CEE17C7835239CD824655E26E5ECB3811D95422BE5D90F0E736BB7657CF2A5AB
C7090F06E79A8BE6B9EC347BED7AC15B9A3B0CAF7AFA5D20A5428CD87225C7FF
28FDCD4FB898A052A0B1A3CC17B24EC39E1164A06C9A13B541EB4AD89289FA3E
D9860D1E2BA4404CBAFAF99040CF04CE4DB5A8C71723B45F3F89E3FAA8AD725C
FCC84AA3BB820A654E2172ADD82805CCC3A752A37735B9C1F81610054A54D769
65628B653812E20CD44F485912FF174540468AB1C1C5BB7A38244F516D156D28
2BB7BDFC55B4522C394B3A5441598C496AE56C594ED6F276069D11ED9BEBDE43
C59E2F387F40A791E4A62D5AF6B69ABD9CFCCAE361770F7112D3525944F284E2
2E30D2B418CAE285AA38F9FB436D3937129C9868D4AAC414F307488A9B054FB5
B4D0A2B019B3C9630894990B5B4CCDEFBA8FA1D34686001ADF08CCB3417AB559
1E6BF8490DA0C23DA2F68B499386161B4BD1FEB17C994AB0353B91D6BC325ACA
18621F9F14916D8DDCE627E3839477F4ABB1565BF009732AFFDD2FF708C1A3F6
1EC50C2372E576B0B39D5736EB891101032D9E0E209E64E92230E836BCE00754
38EB5C1DC0E7194022C2794174A36C2D80E7E32A732ECF3856D43066A459E432
2DC29B9807118332CDDC0D88E7CC1CA9CD67F3BF4F3FC525EABDEC8554E1B61C
81BE88E2E32828FC6527AB2B1106FC6EECFC2FD37984B6B44AD59BE051C0B91D
4BB0C966A52E99BF1C1D6CC83623D20DE450B1367CCC4E89D6D604E5946429B3
50770BA66D6FD926D4D51FB2F9D57ADBDB79981672F5D7278419D03E92B51E62
CE40C25D780A08D5BD796ABA334160229587F4DC11F6EC986B036931B2291933
374888A6584744692F87A67A218BFBCC8E4A144C3ED9B1676110F9C89AB74DC4
418F77DB1E421DE938CF01941C2768D80733E456821FF981702745D81E16C76A
B405E68746B94535F38840BEC013B783E6A8729788509C64277A9AFD2339BDAC
1F73578793DBC5674711E6744E56631FEB5BEDACD00C64C344DC67A6461972EF
B5549D56C3E372F126A22A872220273191166ED09DDFFCEACA5A433EAA684798
E24F49EE478851762DBCD2B1DF63FDB1CE3CF726D64933BE3E7B9289E87FBBEF
B0C2AA8932A66D7782371D3D4884B50E1295C517FC56BF309E10EB06135D9789
ED82968EE23E725CABF73E2B96A365F93032B68AEE779AE3F1257DF466F59181
645570273E3EF05A00A57078A6C9289FBFAB908E868942C11A50DA1A7208C46A
EE9AE963718BAECBCD412C2BC6BC6E3463E0B13BCC0C763CDD3627A3737DD414
77A8BCF7CF9FF9FF11188360AFC84BB2DCD919A160C7AD5BB562C37EA88044B1
746FF6148CE49015828E2C2CA02CAE79C84DC4D6D3328DB47A624C0296A8ACD7
D8A62118514F9A43B023DD3A0469D988EA01221F330746FB913FA421FD461C6D
D528D0DF17F15FF78FCEB2CA616D526C530E1689FD1E7BF1B2E2DF13C4B64C9B
FD510200C2E03FA0533228F6C30F8FEE5DFC7A7593A18047327A70393F396D38
50CB0EC9013F7EA391C8922ED288DA4ED0C8166676C54A225B2A6F846CE65D58
69318FE640DE6C8C6BA0910BA248F9AC90ED7B624CD4E5EB652F778F79421651
7B1B84F0D0869FF15ABAD0083FF4BC53CB4E6A826FAB2BDD171908E46A3BBF2B
8B22DAE7BC3650E52286E6F70EA5546D79D5B248F2812B349367EBF83D7E1F33
5DD114FD105C9F8815EE6D17F25A1C8B7DA42FD174A42C50B313CA3FB2B04635
D43B682FEF799CC1DB95DE914558AE8C2496F8015D26518F63510488252D5564
2E3F3B8CEBAA0B3BB333776508F468843263A1D577859C49042A0D0EF87FD638
70B38E4100D67ACF9EB4C072D3196F99F99769FC61F47D6C101972BC861F80C3
6AAD3511F899A80ED9503DD3A3DC42C9107CA0BAC50A027BB01514BD9BC50571
7FC200F6039D043FB5759B9FDFCCEF0A928C3B4A2801E3735C1238FB68520A56
BBDED554E575018D9AD3652C529DA22A5A9F0AF66B44344F1DF681219626CE94
996BE214AC88BF14CB44C210BF44141C72291EBB107B1FA81DD123F8434BE971
D9EC8149468CC0F2C45ACCD1178437E175131C8CC487F7EF853BD1E0232AF3C4
A10960AEFAD538B644942B6B97E778000DE2F2AC2B228D509B0ECC3CBAADD93D
E6987111C9C304CB555D6628A47709AD9CDC3302D01D7138DA8832FCDD816A2A
B41854657FC103FCBDD935769AE28F1BB1EA4029C7C87BD07B625A477A93B93B
A8E0E0B086C29AA069A41EEED25AAA351E18B4EBAF5DB938AECA1124060D8D13
8F01FB4732B7E12EF2773DAF259E6D1B252E4E34BB5437F75671944B1BAD97AA
7AA98DC6CB5052261D715735810768798F2D9BBD22DCB24CA9CFECAB9938F99A
2394F2B5338FB07851B45925E649AC3F7C555829C9CAF71C5318B590F2A0AD9F
D325C398E049FC951F28A391F664BCE4148D37843E7BA13D63A2DF6044F4707F
3F4239774EC5D2A530382DB6BD15030D7B40622753C9A7F0B1C126314700F7BC
CD3396B200AEC477909C2A7CFACF4E2DDFA16383B91013A9D01E04A412631402
BCB7953E285FD626E103E3A60D9765F9059895E4915405709607F4B3FEDC85A3
A7325BEC212BB664805A6ABBD010D85C3565B2ED2E163EA673DE40DDE9C57743
3F1C3461DA816138BBC8B837790C625E702EC701B68DB40148C9FE39D955FE41
A89345805ACD15B985BB2D00197AEE3C0F83A50E05A8E6A0FB2038E2C4F614E5
9B395D1D9823D7D5F126D93214B50C987BA805BB3BD8F7FABDDB15C7568C36C9
EC5AFA0F3B6DA5E16965289FE28186AFEEC45CF8F5AB034EDF79DEAAA1FC2146
237C1D110D4A10112D496250647F37A36DE5FD87D4DB565A8C6E527BF76C2EE4
2E59C6C6A042AC156C12A8DD4CF75D5B36BFE119AC55130DF559F1BD80C5B936
FCDC451C50C76BBEAB3E02336A4618FF7036976633033648C936C547CD0C796B
110C4FDCCA3F1B81FE358E963FB3DE11F7DFF7D47C96C4722899060FC8F912BC
2CEE059687FE5220B6547F10E5C09F9E499346B2E7B7B2D63FDF71131FFF47E4
533DA66CD9916403176768AA491C365040B9654679EE7EBCAAF81EF4540E579E
AA88C5D8F52122B8BBB73BDC31C477A7F1FC73B49906DB7E1228A8BB64EF2EA4
3D7C1FA208EF44EB316981B1CA39BEA010B3C6F6AE2F5DB222525CCDA88656F6
4C44A83EC6AB38547FFF70A5B6DFBF7DF68BBFEE25456BADC1A12FEC7F9E54E9
2E75E48291ABB565C1F8644CD5D9F6349E5907563769751AF1D8076E19266EBA
AAAF50F33052EAC512CA317372060AACB1AA7D7D6159E8D91210F2680C21AC77
0E51AE71C71E6B7796B6B54F27FEB1D9FC75A1E77B7716388AA987B266D62BA5
841AF5ACDCB7E2CFD3750A6E07486D39DD38FEC1C6FA2682FB89B797E70A937A
6D0BC305BD5820C99145AA7E7B25CD2E2CD662EE77CD892A017557914059220B
58617297C43DFA17B32B2DA549EB52152BB04BF5A3E95CECEA846B5E158A5662
1C6910F350B8EF85203E4DAB28B15D18FE1EA497486BE613A4D07728245BAE9E
AAEDC600B0EF658DD1A4DC8FF231881D85C822D90730ABBDDC0F2CF53AC189CA
3718CB1767179A1B63E40EAE3829BF4CE47841CC9958B70FFE475AD631D13A80
2CB7B6D960A86183FAAAA64996642E3082DD7583FE4BC0A3A30649486C002BFB
9868ABF2124867B579F69E34040E2AFF508CE7AF4B0D544E76DD095956B0333D
16019A6A972910DAAFFEEFAA0C2F8BC52483BAB18CEA58D596BDED31A69CE0AE
0177D2B99B9AFE5FEE057A8A193850B5C51C5B6B1416CD777C55A39BECCA7E62
2D460701760E7495135D6EE1215286E75A2B401AF8D80A714FA9764D1F94A025
EF53C533AF3B273D004C22CB71BA294550D4E89C73DFD6CCBAF383B70A5F55DE
4E919ACD596A9D502B2FCBF9DC15B995D2B71FE253DFAC85CB745676F87833CC
5803627C6DD6BE703B8FA58E1B03E56F779FBEC972E383758D612268B74D800A
3B6AB946BB2EA31EA37F257398CE1E359B28940FB1DB960F501A93455644ECF8
414F66199ABA373DB1AEAE6C06CE483ADA65B6260F0EDFAE9F825D09A330FC50
AD97E76719EEDE81E652B0347C8D04A059F61FB93A4880BAF9FCE4C848E41EFD
CB5AA1EE1DB0E3AC051E6654EFC9BD00ECEA5BA15FF061F873DA9220FF3CA685
CCE2EF23F6B3FA846C8B8B8A7C02A5ED1742EF3CB42EB0ECB3C9C5C3C3F9B015
26D9D71A74984522CAFBAF6CD275B1AE546397527506CA0C9A886441FF55ECF8
069E82BBCE141540E21EA8F9253E6CB7433656B87E1B0A17BA09BCD3A2A87CC9
FD874959462454B5D439C456BB55FB81B4DC46C236DBEBC18195D4BA3F2D9C1B
A99FCFC7C1AA02AC2D0BE25E49A815619A4F69E6142B447900FDB1DA07A85508
A9F2405A282E1B51C5C8A6EC490F540287D85B9F7C1800BA18A9437C91EF10F1
9C2DCDEE1EDDB0B6F3988E1DEE273B2E7D2DF24878CAA34EAD81BDC76197D97E
CDF3C410189522F61655505F37D6A182ACDF7D3B1046DCB89904A846BEB90626
9EF691B4B66A9FBF2F42F869C1DE35DE090F1E6616D745D03C080D30E00F6F43
4922CB64084FE7BC4F5B60542FBA3BABBAC93B61A938F68FD787DC530F7383E3
B9EE0B0A882F18427AE27053815DF539E3774A65EB9D4782B0B8251CFDF3D178
017821BA6915C5F45D0E78BF2EC3E236B95EF9D81C6294337F123C8606767394
157BBFF48C1CB6341FA6E33C3E6D72B7E8EEF44A34F5404C7F799FC22BD8197B
11E1B0AAD54245A32F7803B9200043E29A62AA6361AE5A39C14B12F5587F209C
939D8516182CA5F0966CCBF971FEDE25E7328428143F6B180067B2F9E68C5528
E0DD9A56E20DB0839D442E4D291FC422B5D269C60A513AFBDEDFC1AE7597143D
514298FA7C892D566AC886D9C2D17F9C23C68E21D6B8CBCB49FD9FFD260F56CD
6070B916527529102FE9F8CA979043CC0A9796E0080E45D33C5A4B75DA3161D5
AB80476A0E2F3CA21869CC19CF9CD0F897F0E26E2FA0FC5033DBEA582F8B4013
81B9B86AB1E1B7E0C048E100F1CC4208FA18CCB93DDF3784D054AAF95DC58EE4
FFDBE2D64BED64FFDDC683B50F16A3AACED2042AFB7CBCC1F139B6B9F8600A76
C34590309D8A9CBE69D2B6F604D5DAC09EDA896ECFFB9944EB7EEADEC7BD012E
823A370B138DAD33602D146F2F5391729B51CD703B8FE781EA15E51C4099C380
7A01337FA4063B87047466804D6AAF417595F6B9368142FCB34668AF303A6455
B248FB866D74CE7D8F752C4550397AE68035EFBF876380FBD672278B9EF441DE
94739A4F0036A5B8EBB5BC7EA32B1F3BC57C74409D536BCF3181C91EF4D0E75F
1BD0977B2A69F53CC706659FB606FCCAAD3CFC3B3AE91F01D400C95E13435448
D6FED37E6448AA04323974DC97E9ABCD0FE2FEBC58C945B3E69E5931F5E101CD
5755CC5539A627C3F2FF35921B11EE89EC4EBB1384878378F1C62EC04E23BE99
C97D290292DA35B180B5A4F17FEAB6088871D203AB2DBCD015EC7380AAEA0E34
2F54E13C3F4887CEB8981A6EA85C135F60246D47ECC90571044E7021E8399BCA
B9D51FA9412407E10C4A4FAF36CD27DA3CB90D5B442854AE79405374E0CD5FA2
9B8ED4A8217BDC85C66DE8242C58C6BC26430662D2EA4F4ABD625E32FDAAE59B
1E1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD43375A2C5CB23494F45B1A3
78C2334376FB34610D1A480AEC604CC50026FD0FA59A0D93F91021E7A2A4339C
E19669A636A9B0CDA1509D95CA8A85A9EAA164A4716C5788045EA5A9E1CAA5E9
4B0856CE64E50BDF59815F4195CAA4F01A7623989D0E44CFE448D332EFBED44A
2D79E2A881282A6239609D959B3A288AA3F5E6D1AB7F466605087C78863DBAAC
FDE460906281D5BA5ACCD188EDB29681706DADD0814370DD82648DCC7C5D049D
0E9A984A2D21957B430996030C42BCB6B3794F51D6F7DBCCB9A3045345A71C51
C1B1D3F58F626B0C4F0382A7A3F51A65116EAD737A7AB1D63393DB4A3AADCA38
9CE1ACBF20AE2B72979A8B5F2E4DF2F0E9273EC494E37324F68F2914E3959180
15A28BF09B926DFDE5F394A54086EC1AB27CA3985E4B3EDAAC1F28BC96B2CA44
854FD16417A7461A576E3B3D9C5E5AF62AB7BC7DB94F56A0800FAE7F4A952D09
6093ACAEB8F43BA217E6E3C8F19577F6E400F8E6B2F779B5E4A06D7C0D022BEF
43BC1E37A8D5922C9E5A8377FA22BCA2FBAFE2290E8AA03A28847AFE8A99CC31
99B44A920715DF097FAC7F5A986D92776BF790ACBDD58F6981FF58BD0E3ACAC9
3C4FFBEBC6007D613F23E810E32411D90C2E6ADCEB16B34EE0E57E0CD0B4B588
26FFCE9262907F25AD9111BC334B0C16F2965D6AC9C1B17CA161B706FB78D45A
A402B5EE099644E30CE5DDE591CB23C99D6C95BA4BE3078D332E75E6FCD6D197
74116C99F85D7C108A0C2CCBC094031C7139367941CA39AA6DDE22D9E20A6583
A90194B818C87D1D52DD6B78C9B469AA63C8C15CACA1C98CC87E8404F41256B3
DF22C3C0E1650DA02EDFB42C4810D2FE7BF278B215DB9A61885A88D88D64E7C8
27B01A52FC3FF1E48BC9629785FB31EB547C41394CF8A276B1C849B8802C322E
DF465E72523731A096919A46B0354E6F4184A66F97100BC2D099309EF28A6B73
A46BF0AFF136F1D2B16D83BA9B18F004B313837C7400CFE50F7F3534CE92A3BE
7E59B3F685C31D350E42FA13152A58E4DF1E3545C17D95FC6E9D36A82FD5B3E3
D2201CB19819C28263893057FEFFABA2CF401E5946086ADF99ECFCC4461B595C
70BC08D30416E6BA194E0B86209C59631C5811D0CC79DCC5C2D73915AB87E8E1
BC964FB2784C9E13F0795427324E80C175BC99140176928C082619C089CC36ED
066250AA99949CA91F15452AB13A459F59576D9C446DD56ECE6A6B5438E4FF77
5A864FC7FE969EA834972ACB6C9FB17B01833D63E59E3E080EF41990F514859E
DAFF646FC9901512369941B40653F65C7E4D20FDFDC09FA7737D4AA4D6D86B4D
448843DB665451D7D95B2D0C57BC179F1E4EA1981FA75DC53DC7E39ED5DF5D5B
049F09A5729642023458DC41654D497571FDE8A4E2F85DA1A213F84A9EA913F6
6734602C39047FD0BAFA91D2389F1C2E3B262CF637670FFE852DE1E90FFE9325
EB3E9F8552091831DCBD55387DBF7F59869CC9A2D5E699820F4CF92C09C7BFD4
2089B469CE5593207C521F9CD08ADE0BC6985291656DD4DD0D60BDFBFD81FFA8
A87C22520207570D513B06AEBC356EE5059463613DD36491F24D7C3D634B25C2
C8D4B8E4CAECA175260290D8B0FBA6DE7DDD436420D72364D0E9AD38050D7784
B535AE6D73BE63663BEB15062186C975C2F574036E13FC1CA59DB02E731D1809
F3CABE4EBCFEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9D9CE8E123C3FEBF
42BD06F669C0CA2187337E87C6ED741BDB45C491103B6C2D4C14393B95D12FC9
F4D36F563DE42686EB73EEDFD49DE426BAE93C7065B09977A242A133713AFCDA
C01BA256DE73FC8BE63397C8EA891CD418E06ED4E789466852BDABAADD6B9E6E
1B71655C46DE2A52C8067FC63D525C0F838155215ED01289E67F05821B550384
2E118BAD386E3C17AB22A0097CD90D1EBE972FEA449E7A83B1927ACF9DDAA971
74B4BE1E37C5F768ECFC3AE01131AC227E63DDC1F8B0F70199530690C14683A0
22C39E546B0D7DA7ECD1C8C6310E4713FABABD7CD290525DB68F9F2E168FFB0C
8BB5E7D0A50B33234AF28E55765856F9C24445B72D59E2898450699BE5ACA02D
B1536D99057E320BA867298C9FF511E8DE1A26089D383BDBBF27066BF4D3A1E2
465D8DFA46EAE6ABE863D7AFBDB909A0B9A947C05660C9D279613FFAA3D65FFD
AAB3B89F357F7F55A33A67D05224C9DBA79A84DC57C2EBDA8E422A9550A2EF62
BDDDF16634BA0704A37BE9179EDA653BCA0422BFECC59F2AC29D7605F00B0BFC
2C39A98B88135FEFC62A92726E5197A556E05CC460DA5FF8BAA066043F44D1AF
3635C93FB02BFD3C100E7A65751929D0797D1C23EE03039A8FAC5CAFA7A2B028
395D9345A98973E2BCC93E5C27D1D7015D613B637F19614B32D3113FEDDB8BD4
32AFA686B93EA8851808FA65D21C48CB36FDF606B81E306AAFE89BFA0DF9538D
50441B5B1405BB15DA7FF83A5661C83EE698716C9F052D6C66D3FAEE0166ADE5
F16BE5F1CD6A362C9611CE4C3F21137710209806D7C3E7739FF062CD336D48AB
C3F5E23ED8FC35BA33F568888E01A8006425AAE9B724F03F06318611075D77F4
D74F7A9052961D0C2CD09DBF020D89506CD1270C0B3EA235BDEFE3E240EEF1FE
69DDE14DB1462E4F9859384B15882C6B0E2216F5874EF368BB22272D3602677A
195ED7B734278171E845B6FAB1037FB0997B367483D2C8C0D44E6111CEE2EE92
5D915B631D0B097082E73509B70F0C64694B73BFF296F181DA63277A28B6891D
DC5350D347DB0724353AFF2D0576FAC83B213333DAE658B403207D2824F6E97E
8E38125F653A26842C9832772C15EB82E86734FF9C269FA511CBE5E5D74E6D3B
251A6567FBEA785D838A9506C671C109D9357C3D53CFF50F60D97926F71A1A70
4B01EB06D2C51682D23ABEC2E24FA835DF271E3C376B5ACCAEAD099498D76BBC
666584D25A8599717F9EF91A6AFFBF0ED590F986977994BDC068A61B0DD5FF9C
A582782EEFED21BB54E07D94B187D72A93518C1C686CAD65DDE0CF3149ABA513
9548EA09718566B9DE86D04C3628DA170B484511DF91C6F3D21FBBAAD00FDDDA
BFD9997F399B511E334347AED468CEDE89A1454A27484A481372B38705B0CE6A
EA8C43CE8FFC9D1AEB97BAF55DA23B2FB4A86F1F4DB33C06F6E50CD5E02F0313
BEEF1080B8E63CC10013AB1D1645E399B20090DBB60D0B3F5EA1A13FB288ABA2
C2054A7EE25762D02DFA0029231EE1E3133136F8B9E7DB037CE9EB308D4EB08F
41F3C2AB7B1D4EE45BF11A1645CBADEE0BAA08C4A5A3C3F3998CD3328F0DC964
B5E8FBCFF0488D22883A4EFFF3493935C05BD6232B0B747A512E7ED6AE24C151
11AEE8B0120DD8E29CC460BCF8508A4506CA93A854676CAE3BDAED8DA7D7C801
6D0FB9A3F1D869255EB21B016AFD3655F66750D3FAD238103B812806CA1BEFEA
E26D641D49B7A3490F09BF16B8D17B54D21B30140CE83AF772E98E8CB3158C0C
324C6C762EB6B75C28196C45BF03932E9270A38A5D5FF22CBC9322E983871D88
3DBB1CC9F5BE250F123027EEAC691DE5848A4959E5DBF801CDAB652D681BC673
C26D3C73FE1AE133DD3457D17C81740DAFE000798A2787814333C50AAC6D552E
789A1B31DEC7E8D9D51D81B8C07066303958931659EE7211854D497B84048CC3
6954802FE8D642F2BD26591A1AF37A647E9983184BB1D4262A7990F83A59D950
6BF691ECB496D36B6D575CB14DE008AEE4AB3E2A63DDF6CFB6631064FCF84433
ECDC982117E4051337D7AD3D3487FFA46B54D3305A460F868CD85D2AA9D5C885
E8E74D5F231B37C3224D6E9A5A869916EA55D68ABD60567F307D6EC471F99B03
CC7B5E8140DC0013337D5966A35557DAF14A4FAE61403855815D8F79840B5C17
FB9397AC08625C202E9BB2A81577A0BA6A227BFE8D590992254C9ACFDA5D5D5A
18E5ADCD42EF2EC8A8089EE151CFFBFDD570C4C889FF6E06E89C0A4DD6352528
D66FC839C05297F8AB66A0093B23CD49DC998B0E47B9727C5BEBF6692FB8A31F
5ABE35A198ADB0555C4F6C3BD429A9EE05742C16C60A4341B505BB4602DDC56B
198B4CB36ECD96CEB82DB4F150E0826E153180D394B568C4056F4621F4C29048
731516E16076F3482F71DC669DCDA55F2D504F45CAA0E02507034F043B65E123
8AC2BDD7FB48E940EC0639BEB7F11F2E56EA59E9C2459EEA55DE47B5A7376D23
1490C68369D7AA11958CB98BCAC7C25E2B0B10EE7934C215451BC9D441EF8278
B9D00EA809C564E6FD488F2C81DDBB1ED0D13FD4BAF26C1556CA219AB468B588
B6BB4916556446A786B66DC30FBB57A488640C3D88BBBFA3DD28BAFAEF400F21
A35667DC620502EE76A5D7DEF679902FF59E3B86054DF5B3FDF8385658570C2C
367ED572BC910D908F7DC81EA719C8F7EAE852880AC99060EE05DFF3E8A2D06F
EF8A8810791D8613AE632F369D2455765BFFD8239D0EB37A83045EA6862149BE
54B789665470ADBFED8C929ED08CC0B325BA32CFC361695B67819159F7D3AA41
23426FD4AB3FCF34FB778533D72FBBC0D754AD58FBF92629DC8866A0698E72EB
E1C0C1DFF94FBB5CF83F65A6F1952EB4096C1B91B6657E2A194C8F01E5693BCB
A645B07E11D8AC59AE55F0F7D4C5B89BE54606BD96D7A485AF1114173E61A360
05E1944A339F3331285EB0855B7469989DBD397E1A500DB4133BE1B4A2FF37B9
2CE6C953A91853B38E12AADEF8F3E2116E82BB40FA5F2CEBF23C4F738E9FB4CF
446EEE451FEB9988A093555A7D35BD9676F71B57619324C5DCA1C3E237852F2D
4A4D45BAA85754EDDF9EC01F28EC7B1CB31D98CC4489F682CAE39E3FE7543C53
92CDD26DBB0B3ADC27B6ECD62DAD0950121002350D0A3DF2848607637DA9D9FE
3819B1998273EA5EF8EE032E0638F6DCE41980235DC626ED3A0752A698D4275D
81725E961D50F182C68E261510E8B82A5E5CE852D1AB080F8E3F97843B172E40
E7CAAA3A6EBB0C27F6B3D45356DFBEB0F12864B22AD2066DD9E879857B6B39E7
DC1FA69943D9D567ABBE73D0D41E364FFBA48BB844B5623950E6053B0068BC64
EBA4A65C4DF64925215CC4DF3BC0DA1077DE75F932A39D5873CB0D1472445EDC
8B761635A25AB894750A1AB42F24F193526894BF4A34FCD2A8674D1C9B1655E8
3CAD32A474C9CB925A84ABECFC00B4212CDF4E88876C2DD4E53F0763EADDD822
C4806C9910021263EC419BCE1D833695D9CF48393E530139BE17DB6A1EDE4361
3759B68D1321D04028A12064034A7290750EBC897F11987CE12AC76F1A61998E
D4A65B374EE14ABD4D9064245FD0D20797E135508B46A864D8C10A0389EAC459
20631FEF52CBB6AD221098F3DB66448653E536A3D89386E1431C515236A26FCE
EB4DEDF80BA158F65C546E9ABE7B6415B64E284336426DF9562D021B182BA292
4AA1DD4DAFE4CA472F83F56BBD3DD789619909A6BE5CB9117199FBD2373594C0
296B7A8C8FC175DC6FD9A0DD7BD39016B7D3FA7B591B301CE2AB57F8B4CE5CEE
B7482302CB5D72BD92E6CCD1E2343DA01E1383BA6D010A596CBDCF5A96FA3215
DF2074630E8CD6A2E4D13A42A534EC7EC672D7560AD5C4F969AA8ABFF5C4C36C
97C23029D2599CCD06FC306E63DAE7ED90A76B6805FF4FA0E81426E7F2AE6DC3
1CAB00CFF72A6A42485387E9168CD6120B8A1B03ACA50578F362B14433BDD91B
A70E84115929BB08D42023B94C5E0CF89B15331E5E45AF34161186E06076068B
A5EA2291529A54BA6EBB99DCDE2D95074091ABC9CC2542CD6C109BC4FFC9B323
648D1111EBFF81835631AD6C6FB88D8E7A06D56ED69EB52BC90411BD034E11E6
B81735AB30E65A0455528EBC5B96912E91FA3FB99C6D35123233B7F0C765D3CB
265CF381F02FBF83D19176AC10FC91325361378CACF7DE9B1068A4AC9924F5FB
36EFEA483004AE42C32C51A1BF355FFE11B5C1EED745EC9843DE6274B66B0B09
7A38A7CEBFE998249291D97CD034935C3A0DF3CC3B3775CD8E5870230E9DA69A
BC80788F2F72CEE5F5594A0A4F034A401FF8DCAAA5BAF8E40F0C3E68A9DC74A9
D6D63A25A641920E62DD5F8A91B4277A1F49C67E25F2CFF05124AAF53671ED0D
84110670483EFE13BCB89E89FA22ECF2B4D90FFB8BE2F427D339D1EEBAAD58B0
946C6AD04D85D1E6ABEBBA650C441DC395590E4999A373A0ABD2D148A1E83BEB
468EAA8FAF6CA4C24899968C61F1458BFC021948AC9FB8410A3DE22E0A01E367
C524702A8A1AF1085B9D03597AC3B18B05B7D271BEF9B8173A6C4B9CD697035A
82372EE5B315A29C309EBBDEC6FE4167AB1185F91CA4EF832E7D6DF3E9E03BCC
EAD202AABA714D39B314B33C39847F28CA33067D35107E25C31677E08CF07330
29CD583F6405828CA8C05E7325F9077349C963F9284536F31F7CF7D9EABCB996
0BD4C526766BCE7971F449F34200628C46B6E5904BB714391E98F34461B133FE
0AEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF1D120FE44DFA7F5C260FC9C
1536A6CEDB493976B105164278E0E00A028B98F990B4D015153CCC2E1853473B
BF6C9D19F0A24AC76F9D709E512323E167B6081364D2B67B6D20B2AC0BC79B34
B48930980213FA0E2C36D1BC781CD2F480148893C418531769CB5A194EB62D17
20D7836D3B90B0D801A80168699AC317A0E331EB7AB0AF62C9E0FCE365A47081
89A7BDEAB2D32A6E464AAEB3505AF0B04FCD4C3FFCF1E23BABF322E115CB7965
7D91D6706ADC0E03261C60884073554BD0771EAE6A1500B64835A3A6FB3E3C8B
0A5A5124AC92D53113C9773D6E27F87E6A07A4BBBEC8AC451239E34711ADD347
782194D0FA7B8B1F356AE807F9874C8D167AEDA5D3F96AB60F049863F0F0DB61
75AB87E1A511A61643A607CDD14F0BF896E4F6623D94DBF0F028FF400BBFD75E
4B8650BD529514561F0CA6DA05386BEACC3228335BB67811370645D5A389244D
B49CB9C38B939602D8F7A3F70B39F1723B8E668822F97158CD969A7D3CB2390A
AEAD3C15E072DE0A84250C6DC1A52D3F6D51F6E9B7E84A5DBBAB93DD3CF19713
0908085C3080C3F839C9292D8CA28B507641AACE2C46EF3ABD23DD3A0469D988
EA01221F330746FB913FA421FE7822A90EE8A7E00080300F0A05D265549982D5
66148FFEBB0B67F9079A1B18B0768FA4C03A720CDB13A9FFE78E0927EC543971
5BFD8F854843EA1D080677F64889D167CDE75A39906AC28A3DA273EFEECF9175
8E02FE252C66BACE712D285882C14E68234B605493EF2D2F1DA1BF1DF103DCBC
3BDF0F7A571AAE00F596EE01EB476BAD9E826F881AD3F6D51D65318915D4C9BB
9730C4539A8F3771BC9FB9B4D2669757817C75CB265F8F86136A2CA718D6A0A6
24056475519E20504721F673673592085CC2A21A4E59E7A06C58C5F01079E5CA
265FC20C5927E8126158CD7B0E9545795A6E62188B643BE9FFFFF69BF0E7CC4B
AF1AB621533F6A1938E812BA39E0756E167FB5AF5F6E442E9D77EACBBE3D271C
3DD27C28F754521E715BE52A286472A747A459E1A0206B706274CFB2E5004AA4
209406FD8D4619BE05CF8B91285D727F6A3F7C7EBE4EF402B191424BE5016B74
116233186382B5EEF1B534EA1E727F9A7D0D3FCF1DD66A83FDA1094245139346
C89EEA6553F718A0AD08E1E3019BFD5218EBE79578A072462F5A6C01A5443002
CFE126DF21A740D9791D4FD8CFD7ACEA771D6A52EE169C6D6044F0629A5F9805
93A1A0EBFE7A97F2F7F3C15296DDB13A3D8F34A84DD42541141BE64D4C827690
BF7B6E45B4F8674A6FA270F14B4944F27A9F28C440631902B92C516F671CBD98
E454F752CE74190E4128512A8C9D7D1960C869B02BBC47434C1FA9AFF8ADD7AE
9A5B364AC04F853C9612C58189EBF33343368B88A76CA65C28DFAA3D32E3EF9E
A5DA268E7331A54E43632B7BC5A6641770F5E9F75C572675AE6E69E7AE376FF1
5FA8D65B74900DE1EA95B981FBBCE8D846DAE64D9C454A2884F0B424AA60711B
28D31C755C6C03BEDD76747F2EE96F0FAC59B411CA72663A044A853EB94D553D
5D6FC325D941674FCE08A60064CB42F4B5DD688729F3FB9457F718A0AD08E1E3
019BFD5218EBE79578A072462F59A73AD5D9D20562309C8864FC6ED851CB0F55
2D82054407B9BB459F0DA464320B7DA9522E3C9E3EE88D6F3D3A80BBDAB5EE42
0B6D136FDC941CE819C6D2BD022A02C792745CF02D7378466CDB231C7A899431
DA79EF537CF1F658F8460726FADC19D1339CAE67C84563320D69D394212A225C
03F528601788EEBDAD19B56392AA3BFD2E48D71AAEBA4E0C1139E3F29A74CCF7
D97749A925E0BC74E96567C1B6F9DA250BE4C9917F3B35D43FA75D5409FA5272
40E389590D1BB9D82D6C8D5A1ABF35B558630C6A6D4134BEA5C8986EF4AB4C97
092A1D17169AE6FAB6FAEF043B7BC1D982E7CAA79328DE04F0F7A33D4CD50024
41844F9F61FB670F5521FE1FEFC260F3E926AE8AE2BF4852233B804496666ADA
A0D84BBC6A705A9C77B52BF56582BAFFE585B2474643F58C3BBB894CA3DA52D5
464C364109D6F3AB7D037E509C5DA4A954235A57F0F594EC86638DA625E36CB1
C3D5EC97B9D19604F4CA460E1676D465CB53E7B1896BF003AA15D377F7F4332F
BA5C0161A080F32B4934A768F89217A3DC055A807F57BCD3BAE66BF71A25AA45
16F5233C789C3E74BBFBF64851305E2FDAA6B0093FC96F298AD1B5807C33A89A
B14673D37A50CEE6642084F107EA5399188AFEAC444757444D27B3ECC5A2E2D4
AE26385ABF6CC82A01F18E577035FF3499574CEB67966E9B6F104FDDFF62E82B
16CBE3D401AAF3E53F3C0AB0A894F08D7774102350E15460EB209E5D31C5F139
E3855A521224E6698290BC0D0742A314497D14FAE19AE5947E4F61E7EC67CF78
1E780A34EB34F468460B008F1C02CCB3F652A2EDF25D95A9456C7098D09D594B
7BAB4BDED1134230650AD2AE42517997FF7ED694F2223A5D8D988200B32D7368
EC952AF449294534E34615C9C990FFFFE47A620C61C8E99A6680B0010A419D66
E1C96D8D570E5CBAA0F3181945AC95C016F789A467F4B8C232DD8AA8D22AF601
4F10FB75B5E2EDC3910A75AC1B4B5C843D46ECE2BFAB537FBE610E15D03487A3
4D84EFE74AFFFCBF4181A86F0AEB6DB0D4FA6874B32D25B2A63D47FBF730B352
702F7E48B9315500C0DC0FD6145ED8A014E95ABAF7186226785206EDE20DD513
5C64E710EBE36C8257EFD978BF6DC1761812EE6FFF3E68C4D0652D9ACADFC17B
FC98AFEAAF3B9EDDDDE49EBDB158AA031B43B56AEE72A4448E82197667EC3267
F61B4C9EE109701CEA038C3C8DC33B98C5431456A37E49908E7DBC9DD891F6D2
7442F6E8957945A8BE6A4378D94CDBF84F58E338C9654098096922FE9E78C97C
EC57EF59082413742AA68D4F0FED4E00ADFB7B3C9C7BC4D6333A0BBB030E9770
AAEB74DFF533E81F387717EB6A6961BC58263E7BAED20814E5D688746CD026AE
EBD65B24E3E49A7B62A62F4705DAB5133E5A5D0B5019F9294CA4A8B0A5C0909E
574AEA223FDA99320416CBEFF4824C242C0D84EF17606A490E3081B92C190DF0
4DA2BEA84A128AFBF3C245B7107206827315BADCA931CB27C2EA9DDC4EB68BBB
49F29231D98D968A8045606BE9A25E02AAA45FE342C59B3F16F74C56269C5F98
1C0977B1F4D825543301D02373DA10FEEA95BD6EE6689D6D81FD6F535FD40624
89E91714E5285126F19008E83F0FA487B723BDD572BA2E80E3A2BCEF8929F087
81F83FF7D661B347139CAE00ED77AC0B6A53BF011E924A8A95CD8F3B1C3481A8
E8A018D297122B66E67991DCC0EC187464195F79A79F90C1C81BE8D0F67A7D6C
98281785A0849E2A173C3632BB6ADAFCE150208998F9EF4EB466233CF0BD264A
87D1551A08
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CBCE8DD618C282235CEA785C6A78D2363395579F2B2
D33E0A96FDE83A8A5594696CD718ED3BB458C2DA505105E6365BD57F140ECA79
A7DBC5BDC4692FEEA0C69754128BFF3B534AA2ED4E09E32A48A080A0528C027A
06DBB52362404C99C58A664D4ADEDF7B74E13E6D85E03E615A60A780F3788AAC
A2DC8EFBF1825630B15574DC1FEEC3A21CE1DE2CADAEE76E1540527E73B23D9C
B14BB4086687E740D8095E63F70CAAEF65D1CDE3764707A201142248276B7E4F
8924750C8361FDB1FA32821194D299ABF128FE251173268B8CCF777D3CB7717F
11B426808D7D9F477C48D7B6A7C242ADAA8595AA08E39E580442D3C50CD9E8D4
3B56D68065A97B680ABF57E74C65C720927327296C23CB5F312C82783B949195
1A63A8F7B71E650130F8C1FED4966E36E7E879A87DF95D1B75FBEDC03D02F28A
0B8845A0944098C4AA0F3D0894AC4BA9F2B4B8E959E8877C94C6AA9575819DDF
023FF06A5F3B1A51AE4850C6FDD58F3B6999DB5E1A4CB1BF6A6F67F27976C6BC
954572891470D5B7A0906CD92658FEFE5A0ADC08552CA63534B61B3AEDB1755A
0341E20E4D894D2DD8099F6BAE43C01A924BB9615DBB6786DF6522B4AFF4D46E
8B522CC9AB6FC6D10AF305373E1B87A5E462AD7A712809845D79276638214467
316210E275C4AAC7931329F212BB8B5B9215BEAF72F041F17D55B49B81F3D127
9D135C9F7A05F120B9638E9DC9E65F758F0FC4FD7904B0C56ADC1A80619F155C
66DC637B24236DAFE0AF946337B119A917B10B32ED08E7711ABC3095A121B119
34FE858B995425092493D68033973B109C672ACDB5F732AE79AFECC01BA71086
2054F5817029FFC5F7284FFFFEB953A66691941FB3973E9829A8FB1659758482
5C7F2C49C6B55ECDFCAB2B87D00D84B6D0D4D7284A86FC797DCC1F99EE10677B
75E6F729E7E3BDCBF977D12A5C7BE23CB6EDE16C25E0D9EB07239AC5559454E8
F5D1A42D40CCFBC093AFD3E57973A0090A01235C12F607A4139FF20EAAEF2D5C
A5FD46F35AC3BCBF7AF61BEB41C26625394C767E4C0626C13C0D563FA6FC5A86
F9BDF14A59162961B280502F27EF7A6B4FA4B11B77ED898E896646811C6F694D
F3692B890706F0AC55AF4DF5933281BDAFD3F168B389A8CFE1BD96B21DEE04CB
26CE92623D7E09B9FB24DFDAC489CAB1E59509F659BC41D9A4AEB4E4366A7B0D
7B70CD59D78221C6142913E0F74FEB7487FE4A32984348DEF4DCBEC008172723
35B1976623A79724270B24759DFC51B30558DC38D736B4234C6FBD966A5CCEA0
555B83C49AD961EE0EC5E747647F9EC54DD7B45CE8D2B7AB038C1A5D75F8DB2B
B43E6E42C11B61F6444D769690E7ECBB18A69157067C873513389EC1B219E0E9
6FB513
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F90765843635
9C2461BEA57F9CC512BDC51EF25496B2C2253AE85AB38889B26761BA509C7F63
8C6CBC4BBDEA74FD3B43A178C86F9A97423815F5FA2C09BA590B8371D5B7758A
43F98F4DC4792308CDFE2779CA6F20ACEF23FD8FC11F483C0CDAFE837D984A76
1286C4DC5088F5DC4B8D59F781ED48736CDB2D0B9B51340F6218CDD622544552
9BAB6B88481D111091C2CAE5E19903BE5F2C90E79E2469EFE314329B4653D49A
0C4443075770A91A1C8F4179E4167E37B2DB2FB55576CE3A4FB2BDCCC49ADAFB
01C7A6C0A0CABBB72135D782D6D302DA6F67A5A31664FD4312483EA00066C08F
2E907B83F704F9E870AC27EBF1A21DE55E2E8139EEC0F780FB83BBAB87209B36
C1E995ABB0450712CAF436627E0FA539AB4047E252ADB05C815832FA26D5A46E
6E6D081665CDDB47E5F4524EF2CFF89AE5639E089330F124508E3A00E51CD32C
2B1D7FC2F5632F32B024FF4066E30D94383AA882E38281D84775A03BD1F7B995
9DAEC7640944CC7BE3791DDC409CD8D537C3308195EB55597D9E6C5410AB7DE1
82463159831D8EC348AD05386348C3E9977F2E748C3B018195B5031E3F51C95D
9A061217DA9F3B704B75F1D6110C7D4F9DB6CCEE47BBD06941C667CEC41B0F43
4CBF4E08767B6F023C89659C6661CA363D2BC38DCAC52E6C67FF1AF9B6A0FF16
6C4164A695E66B3B6E55D7183E48E3F84E99225FD4EE99C3BFEDB90B94740F22
63066D80D2C9CCAE054CD0BFFB25C7AF92F419E57D9E910B719BB3E00FD7F8BD
14FB0CAEF5370AD7AF775252ACE49DA73B0D2AA9F15408179612668B7E8662B8
AF299360DDF702A333A109BA94A4A3600C16E04899E47073AF80A3CC059D6366
A37B864D6DFDF35F7F77B6B130C5FA0AEC8A11C893E0037B0D4138E2C5411D63
56857185E1E0445A51C67BE74F11BC20309B35A2CBC0209F8032C8D0BFD97EBA
0D5A0F94355FBD634729E049E1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFBAB9C89E77CA9A4EA14CFE770362035BBEAA80
881D2272C1B9ECF140F7E5E6F8EAA04D634638A585FEE65D2701A97AC2F6C05B
A5D4ACD8153580ED848E0273B43B1142DFB564F972BB56C524FEC5C355407F96
A643FACFE8DF1F7B0A6D171313F92A306D1A7DD5FCA29CE223138B98E6C30143
04FF109B6B54A2EB3ABAB26B3AB760F6DBF40812444C6F0F4DAE8961E50EA638
60BCBD47C387E396BDA1DDA80E3C740F1B29DCC967F20665B07B4CC78B48040A
2C2876FC49AA65343193F93DF239A12992E860C899C366467405422CB32B2039
907F8C5F84E3E7781B5300E6AABE35B01B991AE910B7DC821CFD8A6B5C7F489B
F3327B9AF9CAFBCA001B7C0328E4C7DB807BBF0367A9A94391AB4330B37D4E7E
2102D867A3C279AA2548C6C6CA77370BA3C979D11C72BE4807BA88A85915C05D
F5F69DCD8FB92B332FB6509FC3FA395199FAE0A88153CFCBB70E29B7073AB33F
7BE2B6BD070ED9776DDF97D5EFF51E900914122E6F7F85C21F70401421955164
5EF4A3399C2832F197C27808D7DC3A930D9EF3BE8726073C5E069241A906F0EF
15886DFB61E13AAE325E28DD7294867052D0E38D1B00CF95E18712C3E996E6DF
C40960E118A3C99F54BAD880A38BF73C228B8D77415431379DAD60BD2BBB2E14
0158EF0915F10790DC31D5F15BBEBFCDF0409CAE4DF288E9F7D93219B3EBFF84
387DC0AE4856109095A7780A665FC3D94D5FB00FABD415EB4EDA15C15D794AB1
1EE10C58F89C93C537BDE3A1A9A4C90286999ADC8E984DBD7916E1E881A86FE1
9A47333D301D7B28EF54B5027CFD66907EA4205A0BC3435596988D1C67406AD3
3743D2905B5CA2F739C797029BAA9D1FD7EE9405CB29E40F03F1E0A4AA9EEED4
6E8871BD8FCABAABE7D709200B052BA3AC50A5A93D31607964E58D19D8317B77
DCB64BEDB3DD9AE5B2B077C4245513CE965D1C9B09EB63A5D8AF8F15E122C28F
CA6826B096042D18A2DA41F9C480D2ED544D78E6FE090066EE46091A0CE26908
05A62D746841F0E7130339F473EA0F3CD46DB4FCB9643E740F1B29DCC967F206
65B07B4CC78B48040A2C2CBA27AAF2426421F0093C603BD63827E28F17D57CED
E05CD143ED4B9C0145E452A23171A224ABA4D376DE4A9732C2BA6F48EF90BEEC
53E88FADDB38686EF45C2A60BF89FE798B0A5928F7CE466BBDDA8186563C7B39
244852267155E9595327E348EA30C10EC4FE555A356C26BF3F435E6A6E9147BC
1B68EA135225157DB93D0D852582BDB1EB6971F2EBCC0C538B9F4747E6F41038
E83705D3D364B37D0664664C6FF0AEDEFB0648BF6D376C4643295F769C4B5252
9A054F6B673D04BD321468AD0D7FF1970B7F481189507888EBDEBDC2437F6791
1380127CD9600E7E91033ADD17BA3F0DDAFDF2251CB83AC5FF4ADCA84FF6594D
3A339B1435E299166868B917147969EF8319C216ED3D620588A8D3D4405B6295
4F2E65342FDE538763E4DDD7B9015E4C8C22173D1578300B5AE51FE74952CDC9
D40D9B1A3231624D0FB01918E8BA87EB21AAB2C494C6F6FF275D13AA282C565D
63BD51FCAA7D8BCCFC7792A18449B152D284AD9356402E391761E1DC4C45CE37
AEBC396E34769CE7CACCAEDBA16A992E6B88C29CFFFC95F56114EA8EA347E398
09F30562D10EE8992F88624EFCE435C636701D0C4F7211B5B5CC0A348F325F3E
45531783D52D62C959A39542360C638A47B3631DB34AB2DDB061D9CEB29539BD
A71BBA7E79A8A11520BE2B47FA5EE4769E545928DDD1FBC289A18A4B9627E833
A471ECB40DE390729F6D0835CFB91437FDF5FA3F59048FD5210CA7DA81F74407
9461180436BC926F08D69F8EC62BCBE12DA950703A90C352983D6F88861882EF
3B6E7209317C50945E7DEF65F98080F155EBCFBCE24CBAAEDBAEFF30348287C9
C3FA8B34A76654DD7AD69273BC721F48AD00693D9EFD2E0110B640E38CB4A7ED
CE7DC8A181B3F44ED7BD070FDF39E6B05258DAEEB74C9F2FE4D85BBC15DF0448
A6610E1F7FAB897E1D4B3C38A24B7130A94CEF9322DF0CCE8FE0405D523BD802
08619FCA686B5792D720974ED9249ECE9FE8FCC568FCB4B911C17FB2929D3E12
A8967364952081AC22A6F99A44B8D0586FACDA34A0D0DC74662C3F4FA17368EE
D00EC6E0A19B83B0FD74090B3D09D499C3B01F3B48CA1CB15E82286A1A7FAC8F
B6B47C80B4555FE34552E01ADB495027386100D41B4B76E83104F4BBDBCD4020
082622BD4E3E50B189223DD7593D3674AEB6FC88F4356FE435A2B184752DACE1
A3E8298420C5F301A0A4080A732B877EA2DED6026CFA1807B087EAB33A3CCB4D
8216D136C4B20B96065574316F2EE82417F025C6CE183F72C2571F46E81CE317
A0B867554FC41CF37FD17D352B303F2518E05CFDC4DFA697683ECBDB945E3E73
4F0C5E89F86867CC439D4798B31C7C67D14050EA31440CA22DBF825096CF1ABD
3A4EECD3B71108A14DA5BD9E017D60FC01124BABE23FF62E75FCA9B2D0FCB692
4F06B3F1FB4AB16280601D4308FB33ED588337E211B10C9B5C28A6DE7B032900
6E4AF46A8D35B88DDEA6D3A49A83886DB260065E423B426EFCA124EC786EE397
76EE06BFD3C04FF933CE48AE61ED515EE4AD49B5EE0AFE3B6468AA01ABC8EFFD
9B0B6F15B6FDB5F81E5D42A27D3BC70BB815896C3C727D60E284D64F181AC6D7
355D4D5AA7DB63FEA574CBE1D2652C4FCA274C572FFEC24BA30EF9DB07054965
BD220FC33E8B73549BAE43FF1AD0810A62F516AF093B9CF77DCFAB6B8AC894D3
DE5A07441A79952846B0AD9E0096FF3B1EEBB4D44249C853D35B0F0740A078BD
25B0B232899ED1D9677A4F8D8524778995AE143572154548BEE691D8D8ACA1B6
0FD474A38C925E0587A1CCEFC7BAA665D56A05FE6A270625DF8ABA0420067817
96FB64E9DABEAB56BC495DDF93CACEFCE5A95981BF81C6C76A8D01486E55880D
F02409AC7D972FB0832505C4A7C97A82344F676958CBE764ECABE84ABED150C1
67DB572D551087BC152E862D2BC14548B0937A1115DC1B6D6F1C924FFD9E94B7
6F6EB9D89B157A3F26BEA9108E8E2091EB36923F31341B9DF942E732F5332C61
623FA9A58CCD5790DBCCD67F292584BA2A471906D47C2575609620A88021B70D
B89EC4B9C642582DB27E6C1A558A23352997474241F59317F44A60ED73DAB72A
2F1AC1DC82F135FCDD6169645C59195984192F994AD63C130BC1DECFED55722B
12C8E070FEEA2648A9AE95525065CFD16DBB9EF1F9D60352A41DBE68A7816F31
5788F094FF4AF024498B4B8377F6A19D5F37AF5096CE711EFEBE674AA02DB9ED
56F150AD56000D24ECFC77CD8BBF484BC0F18F59C626ED3A0752A698D4275D81
725E961D50F182C0D77C0A4E33288FF3508ABFBC38F3AFD684646C1339542C59
D2CDC00635411C8F8802574F7C72914BBE9E892BE1AA585F1CFAF1E6F7EBF70A
7BFBD098994ECF216FFA89E69981F1AD5778B2FD0FC05CB4C628A1F09377B857
CC6BCC6FC34470C82B24631BB6E5E32E0E8CBC71BF221A773EB2B16202B2F1B9
B785E55D27267A083AB75D951CC002B8A16F7DB74AF6D8B7A401DF26D9B605F7
DA45395078537663E0B0DD1698B9D1A2777ACAD657DF7142F4F6088866571603
7A35F574BB08A82641F3636C82E0C352A2C616DCDE61AEAC6DBB9F2270B32B77
20A0133E1E05A04F4B6B420E0A9814BE89BBDF31242EA4B8119A31591CE4A448
B3BEF3B9E02AE3B7BB1090E9EE695F896992C8E5FFF579E85965F5408100B416
B920AEE0AA6F4B8553CD9E2B63F945504D950C13B31CB7B479C4BAD824168705
88344D7AF34CE6BC647478C7F3460278A26B3EB8A390B842BC222AD420F4485A
2AEA55611671C11A04E6A7CB6FBF65104B93E0C7573C702A48C722EE4D59E3B7
76BB4B3F82782A767201EB3012C24B426C4224D064D7B25FD01AC3E78750E6C3
17F693DE407D800FE79A35F62A539E5B69070B528273A685278C5988DB3F0262
ED173A46B3719D7280A90EA7038A2F6390BC183FDDD009EAD67C3008E7F5A58C
7ECD68F3E37E5F34BA68EE94963436F1B526B5A4CF3AD27EA5CAC1BE4E5AD2BA
17A233B5C6494E5E3B14FA09EF6982B1220A197516A443FF09BCC7B6286BD93B
C1126317ACD924D5A61FC3104C7D85B63D84FFAD9364EA2EADD5C0B0940737AC
EB41095D11EBF823F0CB12B9B888942681DFC2715F371A8D6842FC3929AD9700
B3205A433016971AF248EB25722ABFE7320786C536C7CBB691860B26161029D1
05F12820F0E07802A884CDF665D0494FA0B277D5E2231591FA97E26B72FF513D
B641F42A787D55EB5C5481EC0551008BFB1612A59FD8BC7A0FFCD765CDC64A49
22496D357B62048CE9D210CF36B6EDE8ABE94C8BDDA908C412D1709C24090F73
DE2564F315213F7D17A7EE4B34B024B2778E230775325331FA1EB4009CFF19FB
5E44A47072D26960AB8CE54ED33CEB36CC87DB0323EA4794F91CB93CBF1AF0BC
4126D70B16BC2AD7982DD194EC29C4A096EC4FE615E41DB8A81E4164F827F359
A4630C2955964D0D808C9830A152186EF35D59BB974980F8D0478935C577AACA
EC2677B0EAC04469D32C787EEC5494B7CE670CFE23D511045C3CF00E04542DE8
3914234E64423B9D418C440019F640836605EDAD3970BFDD1E7200FE6F7730D3
3F20F8A61C3F3C112ED828E9BD8DBB5A60E88548BB1CB4FB964C4CE7F52144B2
D4AA133851EC30082831A28816092720D2B5109E5B291B20B85791FE7902CCB4
FAFD84E213696D9670FFD34A14D9AE40C155E53CA7CC6FD6300D2936F2064947
6C08CF8E15487FFEA1EBC887F047AB47468B0B317A996878BA057984BCF056A9
D38B3AEFB108300FD1FB6A9C36877D0B777EEF59B03F19BC6B8FDA91ACB1EF5E
5E1F853052970408E1B96714C7B1D4F806FA63557B3FF2B21C4398EF3C4DAAA7
3D2E9E02B7C7F7C1433ED3DA2A47FC87C5E3CF18CE4227ED29B9A8CF29D9EA66
09693644014E579BACFDB7DAF89C5D10CBC2237A27E0840EEE67CF5E402D7C68
5C9208DED34537CE2D959931118A0B30CC1FEFA6199B33F3C1173535E17C8887
D1634AADD69471CE6B07099AF0E0F7240A1B663AA366AA84BC9F306B44A7BDD3
5F637D616C7003024B08E521EC8489883F4B3AA0690A4194719604D655F83392
CE847CAE53A2099524F362A188688DEF40BB855F61020289A0C531588DE29FEF
CF03915CB1C64141049219FC028E3EE622D70709254EEF9476C91C59EEEF6DDD
C9E7C614DB86BC6EBAFDBE642C963411707E41DA572B2601547FFC90805A4660
A5BA95D0E215CD8E4357259257698DDA28944B2F6FECDFD361063AF9A6CA6F98
607BC14EDA3F053E1B5CE76BDCEBA951B61BA48FC22AEA6EAE2B2161319E57CF
1B92A145530344BD2C906FED03F633F3FC889BF33B3EC438D3DFB71B016A8BB6
B315DE7285F1C1C722B1903B2233F9F3689D9F8CA2C2992AB3F998BAAB3897DB
E448D430707351A800EBEC5406DF466111A4391ABDC34F34DA91337ED4A63D71
2B4C9F05C103D6A4A8CD074F88D678C1E449853FA9B626D3A4E5A49861AF6BFC
A20D5A70F7A701141598FC354535362B8538FD37ADF93656AC4468414C1DD16F
A34D99515E2D8DB7DA53533E244DE3DB1C186C1DEE5D70B4822A925B3BA29EF6
811BA54DBC158618BF04C375EE7CA4DD40DE855B47289C449B6AD8D5F1D55710
2050EDAD081697E7A5AB01D4273EFFA969966A789FA2F37D752BCFEE4E80EF89
6E9AC268552B0266ACDECB128DAF42B9A704C1E2CBADC35CC868597733C80576
D274C172BCF4D23548EC4946749CDC981002C4414156DFE0D783406E25EE4B3C
EC9D872E3D11E1EDEC05A8C7D87D28E288CB580620DE35BA53A5028CC2FAD6DA
11F18120152D0101922CB750BE2E146ECBDD16A1584F3EA2AB3D9A37849747FA
139FEE5F45132524C31BE606B3DC96111549E9123C0502E692582B811FEC5551
45C96752D543699833D91D21753E86F8A3C4326C4C0619C9862D301F4A05A8E8
82B013D4409759831BE693C4C5DB5105D2463C9E347CA6B960C86C7DB62ECB4E
DD7544FD3FF04EFEC96FAA52F545BB8480972CF0DE416D863241758D0D5EA901
8A743FAE820590CF22DA6BD5621A494EA63AB3321C9FE6D0EE52DDC6BEA07E93
C31D65640378033A2EFAC8C464E5536A35E9F2844D17BBDC178AFFB0DEB4493D
2BEED936A104C1E2CBADC35CC868597733C80576D274C172BF07AC140AB9DC46
A3E01092F57C1CE1A5474A92C4CB8788C86F336551A6836C0430A946C0D86419
0CE11362E4B9812DC29BBFD9378D8E898275EEB2B9BB17486D50FE72B94BF469
071963E5A576DBB19F3E748799D49C3065620486D1E58C2B1CB5633E89A7CA6C
FA4DB4C08432BB3F3655DEBAB6116D53BF50D681063EA6A439F193E4F1DD44B4
10CCC9D2D48091757130055257815D95644A1EBAAC880931DA86BBFAFA13291C
28312DDCB7FFB35DC60FAAE3BBE8E8134F7F93A3B0759E3C725F8934D93523EB
AED9214BC7F3D1E370B1330D811FA76A32154D39CDCD8DF52F3E70B7458FC09E
29911CE7E04BA2E2FADFCEEA206B6174010EE3696D11291F2E3F06359FB2DF0A
D948D316E83C7C6381716EA9FDA8379DAFA5415D1C283524B437D0E26FE1768E
05DB3BC25F19D9565043816BDEB5818B7001DB7CB38F2ED4568BD464C960DBF2
CA9A2713CC7980C0B833315629060D58E961B9CB7015A19984E6043B02390230
B01950FC6AFAE6B3F4AB7E650489918BCDBF5D498496818C244467171449C73B
ABBAB53F4B2759D72842FD7FB86459BD0F10B0796C113D22152BCBABEAD2F7F6
618C375D1EC39D0B866481D723779B3786CCF2B23FFF7C2F9B79EF66300B3F94
722F0A1B4D56F116B4FC839CCE9E2DBB0220DC5D37D70AA6564CC6C853890D4F
824E914915376A127DBE3085A3C56EF423357F6855F5C310AB3BC4F61C2FAD79
570767979CEC35A111F4C8C036DDA3B3BDF2721951FCD97D40ACB70C5FA5BA10
6EA8BF306700778714A8D7AA7699529CECBBAEF4879C4562A5EDC245455943A3
DFE5422C5E45E5D0CD32FB4F61138EC1501C46CB5B5152192E8D337A77D60A3B
C09F5F3A1E08C23145D56FDDA94D6C05701424A6D49E48E72BC5D496ECFD6D06
B9A5AFC8C8C46BCFF335C364E6B8B0D23573EDF7798A4397FC6B28F7DFB72F58
95A6B85F4E386569D9DEE8754EBA551B635693EC4FEEA9CDAD053AC6AA3C93B8
43D8CD8A652A665EB31D6B75D752E4DB5C21CFE17E2DA671A7FA88213B596074
FE4D777E05DC2740F87D0F698713B90AC7FA85278A2142CFD0DA1D16946FA4D6
4ABB59B854532483B8ACFC184F8868FE10E3D0FB880F4DA4053549A93053833E
4EC70B61444F8849CB8E97D37202170DE7E17BB08E2B6EF58B741F6458E1B27A
902B371A2751DF250627167FD29136A0B369669E194DED3571258E7EC2908007
837BC79BAAA38108E020D94FD8DC2FDFA7CAC25FCA4B7E3D4B21F6896D9649BB
C8CC0D1357BE9CAA1126E0B29CCF37CA44199F828CCC37F45D571280B3333419
C677B64D3F1A150213ABB8287DBCEF8BAAC89772FBFE65D33E336D9595FD349D
0E10EA32B5C7659AA3999D8CA1D3941D1FF042DCB78347489566CA8402BD985C
AB49BB651D6FDE79EA92A7A009267D9B832756381E2964F3E3DF03476A89616B
10556E0124B797C9234AAAE7D3B6E3905815731051460362D16D815ACFCC6B08
5FA277618A1FBD9B828B8E5DDE1175D3E8A4C090854DD806FF8CF8D4707C3B6C
BC968560E30F51ED484458EC7A47856EDD2F4482CA1EEBAA5C23F0B9A2358E0A
1B05164210F4453883898DE5BA43091343C32477BCDA74BFADE0E3863F119383
9C6B39CEAFB6F803B0424A3AD4F4DAC719BDB54D617A5DDE6E44FDA0106BDB9F
C8B7B93CCD6D4F24070097AD9B966A19934FC1B816B24F440A40A69FAC2613E3
3319EA7DCFD8E886844B2B25C7D97A289538A8BFB71342EE3899DE4C4D470FFC
582D06086CE3AD3BB9DDE9851808334DD1510066DC295CD6875C634D9ACEF68E
CA80DEC81A3B612DBBC52AE00B0680F1E0C94AB5509CD19279CE7A23C71963F3
6800AE17D410BC0C3E25D648B2423B108D159517D1805D2976532B64A356B32A
047802C9BDEE75029E991753E1710F0BB9427C07939EB5649DED6075ECFF58FB
ACC2E1F09AA8342333B1C402C5557E376495A1AF897DC7D318A98EE73450462A
C1FB753A41D8AEF0DF67893C1D06F68484D4A3A37081D7529F94493EB4739C26
7B8C54B3A6D202613C40802E0D32EF0DF8FE6F2D4E2880EB4A142DF44623BC14
67EF2FC0E98A2BB28E5933E2F6E50D358368615702ACC3F554170D1B22CE7818
EB99A8E80923E8E0280A8E141775ED7DA74734480B48D114719BD5B35F1DE032
E15265271E6E9F502C0B057C5A3F63F8659F536F44B36F01C6710BCC3064B389
6E28AE7389D260CF032B0B7F275A4FE93755C89B01CE2F1AF46EFDBDC92B4241
D1474EA252AF193E5E9B30FD11F04D70E268F1D4B4070FA78C0157DB843CC75F
CDAA40A5C9A5623B0797393ED85720326DFC2A455157B1BF595EA3E14929085D
BDA0AAA1D8287E95DCD5BF08A1FFCA11B8BD493853D06AC69A445B5926A7AA84
A5E96521F3A544426A80EB40607AE52A6E3A800AC4C443525D0FA14085EA1A86
2537B1AA194470276B176E704F3E22C9B97CD4154BD64483719F865FFAB99043
D683C060DCE93729098B15814D6B84322B2BD7F4E0CEABFE19A44B5B431DD849
045A57D4231C1354002A2DB1C9F9FF6A9DE9A3D778A6463E16EABC7DD183189F
38A0A6C8F8F7A09788999967CF3BC505F0790190762D297CCA604ED82233D226
855EDF9248E96D593B0F00CD0DE83A89CB97C7E6E5D5C17A42A296FD715DF983
4C9A0F16B9F74BEE52FE101D2897009ED4E79AE8FC7EFEBB1BFA166A088B8F23
2012896F122727523D62597FF776F1EE9F81371ACB9AF0819EEEEFF1853D61CD
B0070DD0E20298066B78B7794DD450A9BC2708F01A991313C9B5356A9CD88C26
16430A0452193C353608A545D89ED79D9EB46E2F96864FED2642FEF3038B305D
E2B4B462B817D7C337833DD53B75B05F357A76FDDC3D0BCDF26FC207372135B8
75DF11865C20BE5944EA0642165C0A559D552475FE671E64A008C89FF32E4F22
75FE24535A2CF7B1BC59192EBC1F5229CD0EE7C4569AAC25006F45ED0223734E
5A7F68B96A1184091D122ABB1E38957AA0439351E9B9EF85ED875422A0A51F23
33C9056CED4BA0A346307E3BD497D7F1E2F51B557FEB6AA32E84F25B5880511A
27D667AE834A96925698006601802F57A7CAD94743F39B1DE3C4F8244A99D481
D27312DEB6A7DCE9338E7EF2198C005568E9DB85B2A0D87AA2DC263934917055
60A2C81AE79DF8CA515C323A63498CF6A5082ABF216F3A1C671D6471E07D4B70
D8A19389EF17F259FF8DED3150A34363BC35D052DA1C3DB6E76F6AD8C9245142
E312FDA41F34B777DA717440229035A4BFEBFD6D31182C7D4CBE71AC6D66BA09
71925C5867848F9B3286C1CF0D9CF0788A7243C3044621CB3E65487B72A54E20
4FFDE1013884A89FC8D6AF6B602082FA5C9B2D9784067F2AEC6F7B0BB69266D0
FDC747F0F89C2635D595FD984E018424517ABC1951B2F5FEB44F59C055C5D608
7F1FE798197408EA2A22AA7C602BE0B0A43D9D5C6F50C479A9CA00B15EE37DC5
F4533724D785C22C645809C6B3B4BEE5E0A3BAFBA940412ED8EA92E60758EFE8
1563C7BD46832B4537748B10A647F1CEA85D597A49335CC40D38639D731FA3BC
F65F7C1BDAFF8F1CB40CDD078B2B3129F33D04096686CB6BC7604D8438234752
2297D1EF900E8BA0E0BABF3DD73B968D7E025311BEA11FD3D09B4505AF99E42C
A7B18E275EB0CF680AFAC9DDE4F9B48568A1F086091A553FF47AEB55E074E0A7
EDCEF6F7111078FA6B55BC04C0AE0FB4F043144C99F35A215B53DD2A8F465562
9413E47E2507EDD79BF25B181AD308D29C23074544C3C4BBC9925B98CC9178F1
C644D40CE07A4E70B37A6CF48E33D269E90877555B1E9AF694D44B85295968D0
C9BD89EDDA84A6665F8C59C1A2F11A4F507FADCC056E26B76611E0D53472C70F
C6A1EFB0C052CD7679FFFF591A4568F8DBA452AD22FF83BD861FCD07E1302D6A
3AC104CAE67EE665F4E74227B5A328BE08D81F6EB1A4EF484918F151F791B14D
83F1DF955796BD15D834C5356276584FAB6D6AED2DC26C28A403BBCA3435C3FB
7971E9A564827B5EAD215E012FEE2151C91429061E8ACE4B92604B4E45E88443
AFB83F96DECD5E0B32C5EA329CB34200279443AD52C326F7D4869F5BFCDA189F
E81641832D1FD830B1F4741C179BDC324DAE72A177BEB36A2E98DD78E39B7ACA
FCBA2E54C16968D6B6BA19ED3CF567435DB54B724D937BDE200CD5F3148055B1
CA561E2BA388DA3494F7605F687985D7A49C7EE9D048BEAC0ACC19A52DFAFC9A
F29932C19E128DB67D6F73FE591BDF942BCABB96879D4D9816AEEF3795C69DE5
77C4B9C0EB5891CFFFAAFCA0FB83132026FC381D8D871D0D96566F0E4910D171
253642E92B286CE765857220244A9E98E7F4D6E5435B08A187D4A0EABFBDB7FD
8AF98AA7C94960293D71261F0EA22886B8789E949DD0D1F40CF156FAA89645A1
43B9D0CBAB865047F3FE900978937F5C97252EECA5CA374B64C394CE7D1CA1F4
5B06D9C952F6E026953949028A6B78EF065C6DC1C13773FE58B2717DB9B9ADD4
EE197B09C620A732F0F0A3A02D479C48D67816F04AD0E3DC993DC5D36654C1AA
F015B9F8B0A1A057B354D8D8A6BA18F7E824AD23753D39FB2685E03CE9CB1863
3B63A89B4E985BE1074B7E3BC175C3A3BB199137C3DCBAF784D79C2F0F8C65AE
F9D1AF88BF14CB44C210BF44141C72291EBB17C47640BBD5AC1B23C3F46E77E9
AB8D8989F1EB540059C5D6DE91ECD2A4B570E70B8E61B2E9792E6510FD62D881
A1FF86D1A71187A40F5776AF971B1A2B727DBD281ACF1309C8950E7DBC216AB3
59087D8B27F4F7C38152DCFBAF4519A585B0D50E05208B6D2C68F8CAE9E03728
9227DDAE374A72FB1B4098228FB6D6B41F8FE51016A41F554C3AEFA67EEF8FB2
07ACB013947A866A8ACE63BB8250500B0B4D7D4EF68BFF74A9D07C26F5D34D72
8AEC7718D8E1E7BA8E5424C8D0A899F621CB490A6823BF823411E312220D0EF7
CB139D0745C61011010407B5F2CAE5D46940D3C144723F5403453E9B176D8D68
FD62E9FE746413A676D738B40DBAE7620F27C3A01F2DA8A5556CFA168183293F
6EB8ACC485B94BBF8425761F19EC6C599E26EFFACDF70F4ECA4EC27770554DB2
96C79D660487587515D8E481CFAB40DBAB63E602D113C81A461ED958FB3432C2
D3995C6C5A645EF436498CFC3ED5156D12DE4DFC5E6C01077017D8F2FF9F6F88
AD245098A9CFAE5B45FE8CE2EF30182C021C7CCCBF1968BFF32DF5977ED67263
A0997CDAEBC1CE52CC8015865AA46773CFDEA40370841AC8EB9E6A94AC62BB8D
3E85006332DC7EA4CBCF5F7820E66C5852C838BC3BDB4D669E857C7280605EDB
2F5D4EC5311F7BB5FC964939329982758E8D65F2566D0288EEFE8684D472BD8D
065D836983265DE8EC9081A4826A301784C3DF7D7F7354C807C6BCAE0E89082E
D18574A407B6A736712541A117E690134A5915D13634B978BA6B1B0412854F4B
C16A4CA2BE0C84BF4624522F116E8EB533F6AE59D579D8C717B8A44255CC7FBB
B882B2C3D4ECDE1F2BA3A42EC1FDF11EC8385B3F737BA6157B5E19CB02136037
D124481DF8E5CA7D5F3F84929BA4716C51E164093880A3C18EC4503D3F55A337
4474F1D4BE72753A8FCCFE3E5EBA9218379428AAAE8017F3F246E5094987ED09
D03C8E716505830E4391AA5074CDBC73175C2A6C5ABC0A492177451C915FD543
B77DBFBB4559C6AC58055F12CFF265C212EFD14EC183298277594958908F5042
BDEA74FD3B43A178C86F9A97423815F5FA2C09BA5BF71C28D97F1EE6A630FEAA
7E220886B3A57BA549FBB64FEA1910586DCEE2DAA656D1A9845954314F142A4E
62D6C44C98B028B708C01494CFB36F5239D236E560C663A59E7FE85F6072058B
E81ADADF5A3B4F927CABF282C33D780625170F3F9DECEC62F2E7186C23BFD0F2
2C7793909BC7AEF418EF47ACD1255068A21969742C55D97F1C107BE623B3B8E9
274798F32EB5455A608A9698485878D673643246468572F84A6C7DFD02A58EB5
7540F4BD805B8D521AC56BD90E5D14B07E2D70F084A5A74282463A115DF7EF3B
47566788D4D5312707E5F2A9026BF35850540235701E2B0F63F82670E3F91BF2
9C0C9F23043250A2697AA0CAB0E8D157F6BED3C1D0FE8A4F802753BFFC05E7C5
43DB648AB544E8212B3B2F97B5844022274F5B1570374D96BDAF0BD36479D9E9
468E90DBC4237103629603701A5D90094EB79BF159A65B012A2EACFC2FD63C9D
4478F607F6E5FF01DEB3DDC4F78880AB187431B6D823247C9814C9F50119CE99
4EB691FA38948F3C1F7E3CFB59E586BCF89071C9EB5BEB228C5A1BDB415F80A4
CB1D0C4BCE2FCAD37FC498AD7D881491C1D06444915B1307483C88C97818E42C
BDCF311CDFF05C37F2EB54F2D39A56AC6463C5143F5BA873027BC094E52312E0
FC17B2CE734EC0867AE2471C93412D93033DFB7D2B2F19E5805120CCA4F4B970
A594F67A09C43611AC9EEAE94F2C9B435DAB02B7FB07FD785518D695E1B816FE
C3D358A9A1FB90745CF02D7378466CDB231C7A899431DA79EF5370240F9523A6
C933683151661BB27664EC44367EFDEDEB60FB27393E94DD3DF00391AF696A2E
581AC595954FC51D7616645FFDB0B1EEC921620E668D20A9C04B43955D3C73DB
109D6A9587CD6B0C5BF54A30D4E3072F05FEA042070D519DA028D46BD8A6C868
9151A1053F96BD81D9BC949E1D924CD89FF87DFBC5B77ED158C0EF082D34EA60
E9F18C1B074589368AB6A358AC2E23291325A17D6F9C8C9B058AF361B99666BF
294B1C8CF8E7E10B17D5AED1FC4EF89A73B433B74131B5C935D70CE9DE75407A
EBE45A9E8B1068DDB8F66680F51B46E06C9E9FF99BC9BE56D9CA9257FC6F8AB4
327A93FFD6DD41384C155A7898D8024EAB05EBAC5D4AFE97D7071C95A6C055A0
2AC93EB5967B4356D3C2DD059D73A1F8086340A0CD4248B15C0C9CA176DA59B0
240FC0E7C02D0BF476D768D438A2C42E0907FB786ABB0F9A79907A37B4A5F808
BDAA3699062776461B29E64E8C636A0B57ABDE6CE59BB754DCDF863FF2F9B508
06C8FE8DCD943DAF3FB4E3A363CE18EBC1AA6C6CE3474CC7DD07E691CD9AA195
0FE5D3ED2A5AB002FD26C7D9899A3107DA486100B7A0D5DAA3401B6A9AF766F3
219973B50E022C6E52D7175A80B2F60AE03C2C07DC33C013CBF06EDF7DF34EAF
E36D3104DADE5D30F71AA4D65314D2BB69D35F3F089F755BA04D5D03A83FE60E
FC41B40F31107967746D5B3A5CC23BD0FFB24E73194B47B8B7D33B55839F7454
24D22BA34F1BA11FC742A486416DCCF2D7221490784231EA6CF28982A4470A71
518D60A381E3C7686A50DD234EE73CD469E24B979DB7A4F1E73FB4E3D4A82434
9A563D628BC5B81D682AB64F0FBBBFAD5A7ACB5C30A9E79E85CB8BF53846F458
71E08B4F2366497EE0559C01123E97FC1B226867131D1A1D25EE6AB9A32F971F
DC88ED8244072D111FAF3B29F82B6B045AEC25E2CDAB7E3E2BD29D6E460691CB
D49F4CA39AB77F1FA4BBD9EA92E3DDCA58F94D3D94C9C818825447B7BB7CBD0A
D5633645F38705A9B01BC869FDBC4831ECE70B7DE922C36FD17FBCBCC657ACF0
C00272C7BE8C82E9F48D465247CC08127C60B94A181D75FB34147D95839222B0
A08A26B00280FE57F6CB0CB72BC26EF0ECDD2B50AB6056A429F54B372902B17D
0C404105753FFC4DCC09E9384073BEF515A459776DE5C16AAA95E2A57AC09B25
3BEEE3AC3C9907BB7B683009C74D666CAE5930FD5EB8A9776F927C4FD3E09207
90A57DAEA08C5B169A3E25E3CB1D72F9F8D4F020C558383A14BDC6B6BAACB366
800CC775AC3C97FCC08A6E6797D9D6D4D6794945B39D222D666C1C93D49B47DB
B0BAADF97494B3039C1267B2FA6D6CD9CC2D30C7486438C4EB99365D68F27B9F
CC33D2C94A415C5AB2A72BC3F9A63FC847DC244530BB6D83D84512848795C2BC
29B689EEFD40F525663D0225B4FC11E1F5F3759E08318611701B27F723F3786A
03BA85152A3ECBA2136AC301C5535D02A93621572302753A2401D10B5B651177
B3D358AB127B6B6C6133A18BC4FB8CF81D3047BE10B839DF0E5EAB1B036C24E0
4B900120FCEB6F4D3B953D2F10B5C472E88BAC0E18F09BE3AF195A23F0115257
BA5C9BA0897E711DFFF1EE6ABE33479FC9E090A6883794787779F7699443E56F
512E3CE8C856BCD301C9FE62921A8D17FA331966743BB807BC62ECCE310D8B7F
23F032CA0DEABE21398FDA5FBD5500DCA48E4802CE9E215389C0CAC1CCAE761D
AF98DFD702EDAD43518F28CD4123B8EA6D147D264E48E69939FDF48DF49CBE4C
7CA19BE3AE00B66F4A9398E4F3E813EE0695C87322F0418E83A6FDDBAE549A9D
225505734F3063FAF5573603F4A26A5D10C2BF46D44EC8836B9FC33A70C50FBF
AEF60D41E594EE13C05A0F517BBB35DC823331882A9F6B05A19D27FFBBEEA87A
B0EB9BB484F8FCAFB65D189D87550A8F1378CE2336D13964007E1320965F9A9E
1AAEA8D0B909C46C33B4AA716C348026B4E784494517023CE9CEAF678A6714AC
D5D2BB98B011650B2A5D8B881D6854DA3237C45D86A25E591E0531A442F63B6D
86590198C59576589F5B82397BC85BA02C0C027FBC07CCCB2E7A571D92C88C54
50843D46ECE2BFAB53FF907FFC2D5A568F8A7715D5A7C1C28E6E823E0E6CD2F4
35AA4F6E1226A5379DA6E89872706B290B8C9EA925AFED9C9A2CBEDBDF024784
EB60F9FBE554BD27786B870B25727E7084BEA8B53516D5BF3A248BC9EF074637
CB07B405BC6D7D43475620FE504A744DB2C24EA2D2D80BABE40FEDCAF3E4DB41
FDDBD9C09238374D5BC908EF970D0E8D3721CE0C695028799B6BB7FD8728CF47
A183D6C68DD3D62F25E88429C249289B9DFEF1751E7E403F5F91F911DDCFCED2
D5582C9E0E6B3234484519287C20D811074449DC64461585BF2FB31048A6E8A8
E59BADAB0DF6C6D023D4D3FE4C32906E491718D13CF485B3CAE0E01B327EE291
07319D27F745CD3DCAAE5B6CEB2B2A3C2A5085BB0E87DFD0B90AC7C3591D242C
1D066E165BF330F4D3A0A807DA8C72ECC6550A9DB8419642F9E1FD36D119C88A
B05574832207131D7831D622120D6EA45038626FBA51B8409CA6FA9B2BC0252A
225C03F528601788EEBDAD19B56392AA3BFD22F7F3A3B7BC194C7854C54411F1
4FE808D8D515C07A313E60CA4106218CF236274FE5B883EE84FDF41236AD3DC1
B3C196EF729BB5BF404B88E88E169AA5732CD5420385B1A8DB9C099B73ACAAF2
F2106069D58578B215A967CD119B31AF7034155870747FCA1150FF64B719550B
B45EAED6F672B517A89E498488371938C573B40D709C838925F36CF51A1B4A55
4F3862B07DC9D9B0A60C5216785B0EE32B2CA8E867D68BA9DE568A359429E8EF
0DE164612FB52A590DA0FBD0CCBA3A05B25B0E98968FBA2BFEE5E8D9FAE31C48
BF614B8334D94920C6ED826DADA493E9D0CE5170A0DB6BC7D12AE19D05B59A80
05C796575D35A511D861A0076446786FC21962B0FFB2B88609E885A7D406A873
0276B538ABF47804D3DD30B4A96EA7AFF48180A7D0ADB4B19A95CC2AFE686E55
D88E47257C1FE2B8D75E427C2DF89FFC8F337C8CD0510F06A63566E4E62745D6
6BAAED3794ABA3B9F49AE3CF459EF266D04FBDB5A582CE3CB43CD00D50172192
64F47E5F287393BDE34A27ED5D5C4A91CCC4E24C50984C346A441E0D4C268B7B
1DA397FEA6A4E3B9D38C9A68E23636A15FB82CE007EF683620836DA8BB5CE31B
AA722DDB36BA5642CE4116FA9386543ED82DD7C0F29D3522C88917F450648A58
E939BF94269D8C8640A75773638943DE96B8C4EAEC254D6CDD799E5286705C46
394020E39A769D9235CF735AF497B10D1EA14E7B8EA8A5BD31E2FD4A3C65E04F
45CFA26033E112A3F1FA8AC72D13019A4A0C7B838BF2BC3374C5DA70208D6884
BBFA2D4ADA174645BF47E448B703ADBC06C80E19A4165AC73F32D0ED08C8FD0D
0407325DFB2907BF16A6149D5C8565581C8DB5DDBF2BC6D6DF576ED52E63E327
E881F994B1C0C4B384265CCCD74CFE69738AFA03723FCCBDA11C598DE6337C0A
9CD1BD0F94149D3B55897D004C5FA7A412AD924829C2BF2C24F464D9A581ECC0
946B845F3F2D5F0BF62B6497F6781F32893D64458DE6DD8B073B786001E3C02E
C29969AF637E04D93532EFBAB3CD7528965453F099DFC891293700BDDB4E2DFB
D18B9D16715CB699C46D137A70B82BC1471F59C8E836D41CE42B94C8876399CA
C934E742A331B47F46D970042ACBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B
09010551BB22299DA9DC600CF989B042B6B08355F6EA716A314D471A4D7A6449
D75188F3F600D5FE70576EA427ECBC3A04BA1F3E668B0082724961CDD8AB05CE
AD3150053405B993F5CFDB502635117336387D170AB42F95FE229D00A5452C09
2484FA6FAAB5FBDEA2A2C207DAAF55A45469A5E8EA1D48018A4D4D2B0BF27383
25C89AB1AA6C49A35C0F08B752FE2134FF5A862FC683DAA0E0C003E9DA10AECE
1F7B9FD3B35074D85BDA9A615D5C3243050189F889200505C07E64B2D4509D12
70CDBEFF01A0295E7BE8ABC6811EABCD71C983ED1CADF268B85A208F1A951B33
57D218276A5D0FA4EADB3616CBBE98428D5D87378C6BEA8BA7A8A2DA134401D0
ACA9E239449DF4A65D55496CBF7316889A602D35C37EF36DEC95AF26E9BB0D58
F38F9F4A0FCEE7B11A31731DE6B46EE9D1C3D61DB5C8E5D3BA865B757E8A1327
63F637266B57E210657C6890560A4A2E016B5FEADE1A79C0AFAD4A873434BA54
F79ABA4C1ECE9D5E75EE053C7DC5E9415BE35C9DFC6B4B703F6ABD3D815E7369
EBCB3C06B404819E48BF00F1A3FB16C5BB5DB4DE1CA9064368A00D89E04C07B8
0303E6BD97083C2A380E5EF5098DF574EDDCC3F0F4130A40A8258411CC3AE2ED
2176A6762E968A406843B9FA47CA8BA5767649996DB26A6F5886A43625C6A60E
77A37D5DF5E299E60CDF648F9677A2701944FEE0E51FD5BEB501577BB29A3D9F
E54E8B1AADF323785074E2F023CF26547352F0E9A685CFA82CF91854D0CF8296
ACB49EA77AFFD48FA23301D1019A130E49C18CF4CF845E65D7FC9606AE5B4405
02BA66D7BDC6F09D2C1E649C9111200607AFDF9114FE5907937A142E781FCA4E
776A39606F6444C3DDBAF70C12F496CDEDE494A8D9AE1CF7663980355386A2A1
6232EA3D4CB71B90339604DA2E50B42DCC540253AA5AB283CBAA4CED9A2BEFB5
2B2966640DA32C7F8F7E368BCBCC16A4EE788C1B9C00527A245579801716D7FA
F457FCF5121DE99A297E1558C124BF3641D87FD8BE98D471CEF38BDEC6D79C7D
48B5A11B07D4143799F1FC77504661892F60E5A560333458DD227E6552712567
54C40290FC6BD7E6D48C69F042F7A5179B595C412008737F41AD8DE10D42B7A8
910606700D1AB8E1710927EED9832D3215B3B1C180712B4A6F4B7EA870585E13
FD9AB1C64536B34CC71F6EABD6EAE8A6A87593E70B6B86CC678FF6D5A199877F
0481B1BFA806A353E32168E19F90FEF7B4BC08EC3D1F16089A6C4D67EA0050A7
8494F3E95CC117E21AA4E3A42C7E69DA6CEBD01779B6333F07F4C015F22DE6C9
243D2CAAA5ABF67ABEE3A6F1FAF4D1C8885FA8AB4D8167C57C6E3EF7B7378704
D1BD9F5B40742D9B5C02540547A3BE723F2374DC822B9A9019E8CDAAEBE72E55
AB10A4980F44CC84F8DD351882DC413D2C643D94A36B2FC74B53A9E929C04FAF
AA990BF0EF140A22A0FA9505D9A09C8FD62172610A719CD4E8F10F2A27E065A0
0484AC956C6B5887315E02952C4F82B3AC2058D145119526B2C3D294FA26FF1D
3965B4AF65641FF8CB3CBB56BF05CEA7C5200B5A292B432D0E5F16CD7C36113B
980562CA065AADD1A707CA33BF3D4D3ED20AD7C4E67A033E87DFAB3DCAAFFA29
1CFAACD7F664D76D3DBD0F5554A12B671BB2CA1398F65FD0A764A54500F0429B
9D38A4E5DE096705B4034226D6B5DE97BBDD7421E702FA8FCDBA92637D2CE33D
4EEBF0AD2A8782CDF9E251277A100E865CED746D25302D405F0492BD7ADA0075
EDFF10A36032D13BE99BE23D9030CE41D39C20CE46CFAB8ADF3950EDFD6CEA20
D0649071442B2916EBCE5F49F70596B2E0C6564EF9A8E2D3ACFD8C67C2C4DC81
E7F5C8F24A515995310546AFED54748BAF73E59E91D2B4E275B9DEEB358015D8
2061EE67F3FA4770B91AE7D909E60F15A6C73F8BD7A245A6DD826398954FBD5E
7ABCC77AB437D2B0D8A303AD186A5DDB0595138C0E3D757E8DB9BE8D521B47C6
DA9DBF0F87E5F9CC7BE01927BD85A77BD338426240BB2AECAF921477FCD299B2
E5EA7AE1997CC31C9CFCA85A1AB47D180AE3AB5EDC9A66EB2152A3931E19103D
A708F2393AD051D68085AD21C982C71F0ED8A9BA17B1B56997FCDE6343BCF09C
5B5F5940EF2F716BC774CBB069CAE6BC5F117865AF3389F9B24A1D21A9CCB62D
93E8D7CBEDD8B5CD37443C40F8CECF61496F879235F5D4C7BEC93BE0F7E73E52
E0829DD5C3B6B1397245C52FBB54E07D94B187D72A93518C1C686CAD65DDE0CC
A500CFA0EDDF6A0122789BF66501B14680A3B9650D68D03E7C9A4B24C0499FB1
611320491A48DED20371FA6B07BCE550619F9D4C0F28A95A2F883D5360CD77B3
95C8A2A8F8E7E4C5E135C975DFD38CB856ABAAD1818A3B1DF5870EE5F4098D2C
F1EE50DE28481AD61A1003A2652B7AE19681EB84E30DCFC2AE97D2736CC12CF5
0251260D3F76A573B19C5EC770C8A621F11BC4E386CB5165537AED62A00B8079
B49DFAFC8C084815D95C080E7881848222220A63605F00205C205B35DF9B0F6B
30AF73CA72C9EB2C7F36E27D00D4347DFBB8BC829319F123F67EF19870CEC1AA
22459EAB183A52F33256CBAF13D57C3164763BB0D9368246A81F791E89F12A30
990ADEEF68329D5CAE9EFC75DC15A9494E876104FB3DDF36AEC67146942DAFE5
DDFAD97B5EE4B04E0B479D30085FCCC3F5D98ECD3DCC13EBA3049418E59C5418
E69A54700A71A73C6C9FEAE12AC083BCA92C8994B9C7671386FF2E6998F2C4B4
F5FCFCBA5B07B79B87015A90D36A48920715DF097FAC7F5A986D92776BF790AC
BDD58F68D1E67DF812A28813BA8D3D99207F91BDACC98378DAC48E06BBCA6632
2FD2062E1691B9BF3AD43C472CC0438051B429E334610A086977052B17A03262
6772388121ECA981B87B3FDA2CC3472D6D40775CD82E40FD77069359E968C744
D688071444C6EBA6D73FAF4BEB874139626E8D2A90D62328EF718ECDBFD7503A
0750027042AE2F875C9D9140ADD2348CA838B3A1CA68A22C5A5134CB01DE4995
B01CFDCD5113471F061C2E3C68169AF8184B6D5F898FCAE17B8C982B8395B1F8
ED435BE07E5CFC49BC92D8F7356C311D84D4D071C1465C95E05BD1F6B603AF4A
106CFFE2D1DE3A9C4D5F986B5B114CE454186605D3E54B43D9F2881A14C31669
CA51B6F30B24FBA0A97D3FB10092FD7D332DB4097FEFE402D3DB0E617B120CB7
F36C7EA979454654E3AB7A02A32550E356E526DFF66FBD3023958661D01D7B4E
F7591B5F107F831AF680016FB772B4920BD5657F0064D24DDE0E0560100742C0
C991B59E1BBE98BF1F3312B4ABDCB2CF777595158CBABDB6460781E60274C80F
D8919AE84F31418152E3EF415F3BEC29758840A77AAB12DF037473065B62E9F3
775CAEDADD9268F9839FA2646BED8080D44243E74485FB8223624C0213470211
9C2D414E4812B2BD61FB558B9D8E86926C89C4FB5EFBC771FD1CE6C57981689D
4089C6B147D972B4A79A842755A79DDC1E281A8C34A969B80EDC94665CF31831
19E073DB7DEED7DC4A04968B69F792644FA8B57A787F58E41B65FC873FA6B0C2
D90F2E3CD6E9838164DBAA68EFC6C2F83AE423590FCFCD5F871F03C22DA4FB1C
CF729FD8F7EE51A9C5DE687893B51D46B2914CA75C18844C744C96F6806D9816
FFA07969DD0CEA6C96698D5EE9FDACD080AF068F7A1CDE18315BD694C60B1DC7
1A1F6217FC92A87C319B62B7902F55C78D8B2C6BBB0767BBAA1D1645E399B200
90DBB60D0B3F5EA1A13FB288ABA11788F5199E88AF05E9E6696DE4E39CA05A8F
919A4C6942D38BD0D40991A5C7C5B0545F6FA98F6E6E37B1F272566B5F081835
95C8E603F6DD62558DBFE78E0CE8987BABF47C207A5E37031A4C4A86EAAD87BF
B1ED2F719DC2C75105B28471B69EED368CFA2F0B81EEEE6E1DE6FBD3C2AAA852
25DFF931D0829C9385C6D5F48BC15D9DD38CA3FEAC82A8998C0204D4F954529D
2395D6191F3285068210E9811B2898D889A581451395C7C5818604838635DADD
02347E6B3AAE64A949E5C87CCA39AE1F17BCA46F11E8D9D29D53AF3EE71A2C1C
2758596AD40E704DF786D8EBFE48DCB5DC6BAA38B43805207BE1887DC7602067
FA18390F67BF16F9B4CB43B26AB9B8ECF42FA5581C57CA550E9C21BC719C0DCE
89FBB23B25B8BD6276ADAA462F42876A4760DA16D3D24B402F62BC6975B78218
F6BC2E235EADEE4F56A388398B1E3B8EF7D9F110CEE18BA6C367BA4BEDF8592C
876A83CF48E4A2F7E92558E57E912A235E972CD32D6AEC688F02DA90B4EE822A
0869F8D21075B899B3D1D63A11F521C7C70BE77FBE727E86FCA6937B279F01C6
C09A13ED21E3B1AB77F511DB48D3293F4B206F00EA34910373901DD3968E5FF9
EE5FA98B2F04D25932D903B8948753E873822FF2E1C8DE9834854FF296081DAF
B12AC6686B4CD6EC151959BFE46E90DE9ED301D02157FFF7AF3CDADCE2FE6D5B
7E562DBDCF13F0603E86142F7ED5B36C3AD33E1B31038F25819C130B7BA3ABD4
DC0FB5BF685331C5C5999B5AEC80E5C6524D97498675082B72E9E936BBC50D28
B5C185399BC5C251127B6ECFDEF6AD56640152A5010D25C836FAD8B8569DAEAE
62BAD9DC15D52DAE64F1831E2FCC5EC3D5A4F5C2CEA86B47ABBD3A72E0226869
496C7C10E6B9410FE7B69EDCFD6A3D4956C72DC9889E13896C84FBA0BF4D5EE4
F6B4E7DBDF36A3181C7F0944360D37BEEEDCC2D4DFCFF453BD5FC928BC11C69A
884657E36271363919B140CD6DB9EE73AC0B9E7F7F265666D7579BCEA6D053FE
58FA2BC93F3F455D187AB30CE153914AF924F674813266AF9200C94667D5BA84
83B5461933DC9EA69E5F28389E3A3A607FDAD0D94966CBFB46E98286E8AB5BBC
C5A8C431D8D7BC14E87D8D60441E898B9240AB3BC8F14FBB57279B0CE9EE95D1
72E1160FA3192D02B42E1A706A9BCD086545624065D38265BF356222C354FBF3
75EC58C2E9FA51041E98626C1C21120E490E3CD97683EEEFCF837941C0D95962
0E18BF691A987A0AA0444A2854F0D81B873BB2862E9BA586820E071214352072
B64F57198BE7F11898B3E1471985FB5F85BC040258DB2E044A6DBC0975EA6AD0
CFF3A8B1BD18A3F032DFB948D077AC495C5D85F5543B18BD05BCE713605BFA72
14E9E62948C52E4564D9AEF154224551CCA6B1E339DE260B1BBF233238D51114
037545DA2797D9B7C2B7126F601786EC4B09DE2F5F307729344F96CC17F19F52
55E594ABF60D9EDEBC898BFE8CFA9BFF966D8299AEE0EE143A1D053206A7C133
D547A17964F74FD0FEEE3B1A9713DEE9400F5F752721620DB18010DD7D32CAC2
D5487DDBDC27DCAA73799D9308C7344ECF781A4B94F0D92A7A8A44160BF79651
F0E264F81770C690430233128BDB6370FA61522B51536AD69F860DA40324D11F
47078FEBC262C5E48B2E6766322DBC0244B0797184AAB17B920AAB6FEC1B5DCE
D2A635506B1FA069879101EF66C5F23DD00C6C48AEF676230A41BA29DF7C0BDD
613C9D933255633A6EE98B2CE3B0D8C1A90D72D468577B8A986B66DDC9D43486
DF7BBC05B79A1E96F4F6F3F287801DDA565BE73013DD56D944D97798564787AE
6BE28F2FEE876EC79521622318BB6960F7588E6392FC1D60AA4A346B1573B9F0
2724722B9B749AFD87E637298B9E49B4464ACF6BB7EB6DC648DD591585A08F81
174FFDBDF5BC806A41F7F1107728BF1E9A648CFF974273D18A1314AB58F78A4B
E43408C7C2F6D4465B31BDEBFFA59D887A5AECD109E5E69F3FADF2CE498B72C7
09FA1C06F2F5385E1CE48D9D7DAC7D581318D98098F86960E14829CCC1D79474
385118652EB37CB7021F80792262A4D2F0313DD2107D819094CD8E14744B5717
76B1D9BC9C544050BFFDE63E55A8FCC6397B1993EE08C33AD29C43D03641CB80
D1E9C83DD4C8AC4C76553C50F4AEDEE6941CE54595A01E67F2ADB1429C4D93EE
B6C7C34769FC0C6B4658AED9519C49A0E3E2DF4FEAC5EDAE4B31948659912BDA
8ACE22CAF1CCCD3A0E760C89712AEF546DA37DCAD6B5661C2F19911903E48307
3D902403E71CAAD63ED22B08D256D4B4BB1ED1885730E570A3252AAEDB3183D3
EEC87358BDFA412ADEEB9E0891A62B5B795FE1FB8EF40078DBAB93DCC29707C4
9D2A572DEA8CE4BF3911AA57A9D9BEDD182B90BEB1466E532F8E208D5E7F5F21
58B3DE9E17E222F6BBFEA818A9334BA7F82041E7517A3B6FCD69192ABA246E89
DE8852D903268B55D5F7EC0111D574BA4192FC471452999FC337744781995E82
918639186A928EF12FE1E40212866BA7ED46F2B0994068C2F9F083F990F2188B
EFC675372BDD73B0B19BD143C697D103B20F969939DD4E8274594181BB8AD7FD
B6C541B3D526D321A3B254C96ABC009A12A564240DBB494670FC1804D241E14C
EE0326B9183336B45E338CBD396A3D7C0CCFFE26F87E387AB35490E5231E4969
14D0CFFF622D232B1E6293D770129472047991F13B71F527D425312BFD58FCD5
3D79FE31DCA073E552117442D802DF52CEE62D333C8680E45AB29A6CC48999B1
9367801BA59E660FC5B2B1E296511FB7643BD998F3C5BDA4BB16589BF177A238
168FD3279DA37DC71D35BEB2F17B2EE77A251071F93B4C14D9EB565D29AF1B3F
C5D973408F12F02CB8EDDF6CE870E720C61D187C817FDF26B95211DDA7C94F44
637ED9DB8797D38E81C7724296419D91D7204489394054D1FC534C1F02D6A994
28D8731ABCF5D2C83FAAC1AA920326C75F62F1790CF69B37AA1F2C7843A71A64
C773142F47AA2F4DD210FD30948A4CAA3DB59ABC1BF5F7269FE8A9F7205584B5
A53EAEB35FA5C74AAE3A3CF4BF3E3E7E1F8D696AD05F9A61ECA0BE81C9C8D7B6
938CAD55A5115A0DBDF308BFA8CB78723FB40B625D7418A892CFEBFF58AE1CD0
F7C4BAF9F2B5F42E39023760290E41AF5A67734E96DE631258A33BEC1D91D932
FEA8A790C218DD6FCF271460677DCA185AB61EEA65500D048E11CB8A8E505E9E
31AC0991E75BFFF4FBBB8CD834845AE5ACC4988201897A6224979A1947597693
3B742305066D1656493996A2A629092FBD2C4E2EF1070EC9528F0BC7ED87DA4B
04088C5EF94A7BD1E361BAD8DE2B1AD0B30D5A2B2DC4A6A78E59C1144F200FE3
4CEC934F99C14E909440B5457AE7487222C8372A2C548AAB3DB4B6D1148F3EDB
90B6970DC51ABEEAF55FED4E2A045971D213CDC2DB3621FE6CDAFEE3D5283B58
02AB247E9FD612C7762E866A6E4C83D0AD28B315F84FDECB9089DE5CC2DDB60A
534461E5C023C137C1CAEEB86480FA9072E4E58620CFFBC8C6E51250F22B87D8
29BE87991F755B2DBA4BD765F7A4F966BDDBC0507BCC1456887D508BCF6743C3
63A295839A2006DECA4E445CB30ABD3A6176FCE2E406CF339F06656D824A6E1C
E9D33F2A289DD8BEB1EA056C203B431634B78DBC70A309709627CC97B1FCB791
BCA86C8000610FBF38625B8733141A6BC83CB7D22D504C13E3B3CEC8F2FA3948
635339B38E049396532635B98C5018A15684F9BCC79AD6DB70E636F6A8AA7910
6C39A9F3738C63B39DD1BC2B4707286AB421867AE5AF3F3B38BCAB834C9E0D06
A6FB148FBFBB8CCDD33756619AF59ACB9D17A3ABEAA6C652186D6791FB3499BB
C0AAC68B23C5040989825428B9A87CE2959932BADE6D74857E0CEC3B9B3C66FD
E7436030382F98332EDCEB3669E8934D1DFDF43498A55EDF16A009E3EE917816
9A266871978FFA3BFECE3465E9F0918267336E1AC2F84FA09BD0F0F01A5C693C
8659E5ECE5F23D716597B983385CA0444C480FC2B7F3E50DEA1445D9E4CBC954
17F273AB83ADCF6F99961DB2281F99EF93041C023D40A1CEDBAEFD14FB9E03BD
6DCEB7158A8BF35603C688421CC6639823BAF2248AD544A48273795FF8EC6F39
CD1AE0E3788194F96259F8A07ED67DCE8B5ACA00EA4C0E1FF55CBC8D3BECEB71
8B49F2297D416D2A3401DAAE73B06DAC73507D4CBFD16D0B592E7A24A122ADD6
648E60EC11A849E99BE97280ED370D6909828DE61CA45D557BC13B8DB8266AAF
65EC987FC4455748C8913FC00A0891208975BF20C63B321F0584F9623A71F05B
694C7382FE2AD55D3FA827EC09C4A5745707438921B72245BB1497191327B51C
E018B956D4E094531061EA1994E911990FF81650F2589FE68B29179A3E97A3F0
B35A3FE8DF5B20923D1396B65C30054793B82E7449725260F4476B1FB7AF7D0F
95B5A683ED8DA83806CBF2B803C94B5A135002CE4CC95AEEA4C65E463AC3961D
2D195C1560E30A519F2CB74ACD79560771B58BD38E2D621DD4DFFB6670BDB87D
D1763ECF666139E66CF7D277ABA5AAEA55AA7900864EFDF5F1C22E3C015BA8C4
6DFEA00293FCA8CAD6BD2C799AEAC3A4FCCC29386254DE597AE4C6A8897F9E44
E3EDC6BF21D70A72AA4B05B19BC6EA6705003370A63CB708613C6CCF19C49E03
8F56DB0698B5AD852CBD82C783B81E0EB44C2CBF703208747659F0C260A6B4FD
314B9EDD41620797F020956A61C93EC15ACC8EE5F47D870C0A3D508444AFF044
845F16B02C5105565CBB43DE8DD9B1F8BA59187DD339A1F2AB6AFC3E79BD199C
C74C43983D9E1CF9C6433A30B98C5233D2B5EEC1C70F6F28FF389DA4C584C1C8
9C0B70F7654DB9EDF8305228BA8CC820918A298F2B21B0F1F1EE8F3F30211529
41DBD1298F498E3EB9B5D24ED5D673E26A25811D4BCA9D693EF8ABE7827077B0
60A9FA8F120B9B0ACC23C3BE38506A74046DCD02DC03658881A9C92C09B14BB2
D87AA395EF6E1C8A665B787DBD0A6B4CDE1903873187DA86D2C1B5D227166488
B70C8A5BED21A826EC20AC4384A8CFF8CECF07A59A790ACD24D7090BF490E997
7036461B66EAC5BB976C63961D3272E4B12630C2651431B3554ACC5D07ACEA1E
064130D54CA098321FE35A05FF4CDF11A2EF3FF5EC6E4153117C8DAEBC28D7DE
5CB57A30F23A2859902409CD459F41BE1139A5F3332699713A1D0E26C3922208
32FB0A336EA4FA68C4A0C748338792955E0242EC975D2BEB739CFEB56C48432A
C33288E52F38272DE73F258D2B99B1BA830B869CCDB7AE4EE70D46F3B11BC742
81190FC625ACEF5A3839BCB53FCA127E78284481518A84B2D8EFE81B677CFC38
48BB5760CBA1D313DC83B5E924BD35B372B51AF5029011D8526850A8606A7EF2
6357BD27079480B950359D72B23BFC19B9068B03663A126AD84F84BBC214706C
4A30853D90BE54207C2842045E4CB16FC9F2F22D88BC3CA66DA2890FB3B6009E
065B8E2B2C8E7CE692746D29FDF3DD6C73C55A1E990A07F8B008FCFEF55C25FF
D265353A0D84229C2226465DBD27291A7AAD14E94BB0761369E2E54C06B408FE
E2918DFD868DC4480DBD8F7B43707C0A9E349EA8CA18AD26F3D7A01485B45862
200BC7051B7060935838E474E21B30B609BEF51309650A12A975105E60AE0E07
D48E52A869C40EB55CF31782D1D60AEC3581E275BC94ECEB7B517E88F6126B8A
392F962903111524616DDC2B199CF790ED6262043A642D66AD3FF1CFFEEFD6DE
3A2FD816398A08E4D6C40A823273E55BE1155DBA5E300663BFF1B1FE9F4AE586
71187FC42102558819D054345DF144731DD2332B0F7F5E84C46AFFBD87560A24
65A0565E91E89D1335338DDC277E41010807AA325DC5A5B0D8ADB5563588D38C
1151A012779EA3A018FE29FB9EE32F0F94CC9D675700317A06B3722A56CE97F8
849E760494BBF70003BA53516615023DBDE20CB383E85B6CB1AD69A9A97282E8
DF9FA97A20E05E0276F0C0C82827878BAEE83AB15AF7823AE436DC4ACE2F1155
D2D24477AA83EB093F5E477B022F220DC7C268E275057CA805BB3BD8F7FABDDB
15C7568C36C9EC5AFA0F372966DD335E29F1931A004EB68BF10930ADD30B0736
259CAD66657BAC3A58A4EEDF997EB49F8D967E148F3810C4684B9DD6E82FC861
C0D9ED986D35E9325EC3DFDB6B0C7987BD9514116341C3E1A6D538BFDF58DBCA
6A2C0217289E81B36EE6E63DFDCF2C1789F5D48DAD1B9169DD75574B2BDED25A
6903AA3E907C1DB5CA65E297B0DB9B140DF4659E33CEFE1F90A040F61BAF86BE
97F8DAA8326EB1A2B451142F6F776C4AE3D51108E3306E02C345F4B464F05F1E
AB0DE8B099DEDFC1970C9A89BC930EA1D1A42317A7E0D83EAA334CE0B53A11C5
81E7F34A283BB124F0D54869A45366260E74A07EC6FED29F36FD17B805A2E970
CC0C0A46B2C5DA4E2C856F8A09DCDD56F5DEBCE76E0B539283FC00EBA39CAFB7
E24A9DDF9349BE33448D2F62D8F7B31F54170D7396A08A5A5B2D074988D55D44
525B61A947D712EBE656C474C7FDEF8CD73566C72585272CF86FDF4E24E74ACC
E5F6C828D040B243098C9E81B37E876FCA37F0FEE5F90D5AA9E8DE02F66F06AD
FD5137D85F4CBB2E3FC6167CD0586C0D1B5025739DC39D178DD6FBE31C42BA0D
B3652C129B4C54BB1B43DCB3A2FA8B5BDD20FFCD6FFDCE4910EC4FFE3BDAEFF2
AC4DD3F5C6791FF7E20B67947B4C4A254274D012BC8E2178A5B3CF0B45440B26
EB4B9197ED10EEAA649A096E866EBD9744CAF3E599C68D8EBF3AB45EF1F0FB8B
E8101A608CDD94F6C2AE81F805D2676453888EB43FF5932E0DF49E6A823FEA60
01F6CF3DBEA867D01A3FEF34B6177D5F30C478F7E0FA3FF3E39EBFB7E9B67937
5686C474857FAA3574F458084152E99C3718544A4DACFE09A3BBD495C90140F3
E4CBB2D60357FAB8FF647FDC451A1CEF0B60F6662582CCC48AA4B7671D495033
61F6E0B106FC989B27545805CF1696526B5E41B9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BA22C873A42C13AFF73AACC425448
8A571F1CF7A9B7009077815F2D3488996A754F0D89465BD9F32B061E78C54C77
BC1DF51167138A612BAFE409CBEF302E61421FC31A29D22A5C46B2E75557BFA0
C123C0DBC44BC7BA77E553FA3B4CE88FE87326511247518E629A2B70B0577881
BA6D9347F9A8303DAD8BDEEE87084A06B962B7E28A73BE0B2713DFD32DEABA29
3EEA5ABD85A37B1F3D63ECFC9C885D638355D76EA0130CCE173653E1733940CD
BEC9B476678A7BCD0C6AACB39F1863ECE4DDE11AA3604E2022AFC909284A4D43
B90779468E29838365121EAD77DB71CBA6FAE1532A4AB7095F9B0A6F329CF352
2C813AFD3714B9A4A8A22C26D9970DF9F48A4C3A801E35A650279607C8CCD738
1713A93E5F02E55EF58E729E06BA415230C0578017DC87B4B835C7DE472E783C
F2984139C440B1826E3D41A3E8AADCDB4D18753287AF757E77D486D15908302B
0425976C12C80E4D9A88629DE47E52E3669AB62A75EB16BCD26BD752DE5BB21D
C9C7FCBF815D3F994BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3FD13EEEB24
95BE6DDF7C7106C66F3EF6A89F9D6EE68EEE45A1E9807DE85363DF1E37946025
9D44CE016453B2D237AB3A9CE8C36492E99AED33256A1A6F3303F85A20A40EF0
9A72B1959517A0630A94699E2A1BD96AB5808C5755EA09921F05567101BA4EAE
81E70AE16AF7D9FCD676BB03B407AAF88101D7E9CC89CBAD30C59122E46D3E61
F8C996A63AA3D616B447B0D88B533C973DBBAA82C5904BD2170921D4B2CB846E
609078D99817EBF4E753A713F08859480588CA6F6C580A811E43C9F585ACD311
E1BA537EE424CCE1F22EBA803140E55A85BD6420F6F968B2F6AE2133A32FD0C3
EBBC3CE5687FE59B9CBDA3DCDF109071C2469B43DF46DBBA605E4D7A73ECAC4D
16FD02C19C53EA68FDE62754AEB1E15FE7C332B97A00994F543BFDBC8567FBE4
A28EAFA97A58758A164FD2016CC43256A16EA86B4045C16068D8B27FFFA57066
2BCCA90716C0FF768A9C7C69C1DCB4086F1E88132B0AC9512BCF447499C20053
48B848036DC6131C1E5E283C74DA9B46A0849176EAAF3357F06F8B6A34426728
925621AC4EE580A496B1062FDB354D0361A3054B6EF405FEFDBD14B53D540809
1D6039FC4977E525D5BC68B0DA4C5DDC0D361A5F467481B87ED7CAB30EC2B8DF
601A8E54EC3176CE6D4FF9E1672415F7B96061C2E734C33F176B640F93FA574D
3425DD12DEE557D4BF8A3030AFA24F19126C17DD16A3913F27F12C896BDE5C6B
FFB9246D30103569E9EFDDA9AD14A06532D665EF7C6391C6B3E8149E6DAC14CC
191D578828A5E4C335AB285BE28C61C4190C2CD483C3FEA264D734C035D3F474
AD6CD39E4BBD87322D3954294DA62F57F8C02C8525D3C6F9F559A0B4827C87A0
8A07B80022D1720A707BA004D9543D14A8CD1D494DBE2FBDBB4E975D6914CCB0
3185EBFF5C61172A956151D94ED0A2689908E9D864BE3DDF19B1291DEA72A689
7F5696C127D3C11BF012F62927A36A5EA1BEC1F1A6A1A5A5BFB54A1BE8C70419
4D72A79D360BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A922799821DF82
B89E2DD0885CA956529EA49D7B91337D166939828B171915FFF4545D5E6198DF
7C495B95A55F5ADEF7849F129A102D85699E82645BC6784423AB9BD63FBF14D3
A0C5FB48201578146A0398875225D8B82A812546620491E2C870B30F3A593DA2
285CC25AC742E876D74E547CB0F59386340C9F9ACF9B1510282836EE37AD8022
4C8552D197D6C1D6693EA252427E636BB34CEF619A6F649A42B061255C93ECD9
B8DC0D2A73720893EA87AF152BD8FCDAF76C5BC7146F67A8E92C14023D6A5BD7
E656CAE5E580CDF8E9B9EACFAE3A6CECAA632EBD3B5BED02FBE3C9604278555C
81C25F6BC844221A7B1BC5980B1905C23DC9A08A0BAE8904A56B51EEF3AD23DE
6A55731F459ED078E79D5958AF2E7438E6CF63BB80FA0C47DB2791AB32CABC3F
AFA58B5089FD5B584A49F2A6A4E4C8B419499D3F6B356E3548C00DAB9B0BAFFA
C4532CCBE0AC3DBD4F5A7BDBDA43B38A384C2DBF592B0D5F517FF6029E87026F
3BB851D1D7FFF4837E72EE7A9A0BEA4BBDF3709EC3E06DA87BC5EA364369A76A
0425256215AE29342016D1C381E1215F0849BBEB95D3FF126E33BDA3F9FDC54F
38D882DDE8DE62EBB90A9C30E1C0278E2083D4F85907F87D83C4498EB6B0376A
C57F7D8DAE03CB25E6664AB5CF938FDAB7E295D877C01000A993AAF66B73490D
3450F1E3F16FDEAE6A34ECDDB9C87ADD12BBA280B1042CD6A95599770732EBB5
A44792004E125FEE4463A06B8B83F96A9DC950870C1B21E2186D8C4CA15E8E1C
EB3680F0A2BBD5B56D32B90E027D459D467C66E0B2E15C2BD68CF3D193489BB9
7B6DF215A0061517E49AA81B8732E6973556546BE5DF809165D743517888265E
57D75502D311322DEC39D0DD73AE3F26702733A44EB5B31E90B7D903C8994A07
8ABD9F42C5727A1DDD62734BC08592ED1A114334CBF42718BFC37F4346B36438
B94D02F56190FD5E3A6EA4ED4A4D375B2D42DBD1B70D7A5E03B4F41B1C11169A
B412475580FD13F889686967136E64075A8F103CAC7E399A667E12B07C65D791
72DF1A3287C67960134867B579F69E34040E2AFF508CE7AF4B0D544E7280E682
8392F3978EFB0530AA2239903E4B3F8196C3AAA97B6248FFF91FD52CDEA7FAF9
6105243EDF44B4052F80453D485AB9858152E3FA121F9BDD04B7EA8A00B2A19D
182981B95AFC6AD412742960F1B7EA0FDB1228C5AD94D74A5FFF03959033FCD2
55AE1A59643044E28E29934F8706BFCF5CAD7E90636DF67FD47B0E4243A9295C
8DF2A9FC51887E252E8CA463340490CA6634BFA6F5B74355F6284FFFFEB953A6
6691941FB3973E9829A8FB165A20848F7AED76D89B3C3DF7FD48646D6A812D93
4D815A07FEF543805C6423089BBA44118BEDB82ABDE315589D9E30474AEAC4F8
3628E491CC03F8398BA941BFB2EFE672E683E1862097BC700681207E93E45BC3
3ED9222E7177F63E6B1C183879CB39765C2D75DBD08E127CCC3790280F0D2491
AB13FCB507AB79FD0421C5C06B9D593022C0B75DBC8C1F90FF30BDC97107DD0F
2BE9148FD403D246C6A0AA6B857291BCDA9B6705F0B062A78EFC65E27E56C120
26F58D771229C2A3A491455426500E410A7078C7F9FE6CA17D515B2649714872
5E1E777D1CD1E2260572A3E88D2F7FDF9F26AC92285B3B181CAF04E8DB2C1E79
B9E9108C28BD3BDCACE2D523AC51DB2BE615EEEF405E4193954B4833509E1FD1
37D8B823953AA248937D59F386703D1DF07EF2E12C9802AAB56426BFD7E71A80
528C6376E333BF24A5894AA474C9F08EDF66B627B992CB4694392A6FE868DD44
9773BDEB71DA37C609A831C2C2E0E372C102C23DB580023B789E755A847993D2
CDE4206D95EAC3A4FCCC29386254DE597AE4C6A8897F9E44E54582CE65C6EFAD
B667852739E02647D111A69CAEAD09B07842F60131BC8969A7E52BFC97C3C1CC
59ED40A972568A44F0B691350DC0E4B38E4B5B5868A34E643E6077AA5E7C1538
8CC763B7B0E6C116B3C87E992DE617DE4BC00A526228AE299C9352CB5EB8F2D1
664F33B77E60BDCC4429157208E3B37B9CE3F1D0C616D951BA702DBBFB698C42
742D2EC98BF1E4ED4CDF8DDA7799FF2A8AAF44802D3698D76C0FC15C0DCB4C59
318183C941C098648CE113C0BCFA66E9FB091F8D5A1ABF35B55863058CBA718F
AFACE305733BF769E719A39FCAACEC1E8763D1BB78156D5809A68D4BEED88D4E
27E5EDFBCEC126CD722AADA6DB8732764C4A39940BD3AD8C75262EF6C5B60BD8
1D2770945D3D6ECC9AEB26E60B05B105EBEB7A7476D831D2C0383F393D8BF18B
0B668CD16311DF9993D2AD4F956BCABA7F25705935AACE33019AAA883668F3CC
1181A14D5C2F627DF69FC322A8BFA0F031A3DBE8DC1D6FB37B2A939790B6F8D0
1989BD614D7DFF502C408B4E2531D02747F8BE666E611B7F30C87B3EFFBC7AE6
E8F15B9736C7EE6707DA2BAE5430E7907062FB3BA362B2AF6C697F818EA103F1
767D4BDC35209300AE63A15A7D983219EB991B300213F2B1A3F1C2DEFCBB8937
EE5BED99E7C2D320236CBB0BF1EE6535CF39C6C3E0846586077E38E1DF1BF4C8
C223AA5B63794D01CB48972C196E0C10B2F50F32E1E3EFD8CA41AA00D1D0B9A9
1F0F83DAD1DFED8E8E569D3D3DC4E7B347E64E85C73135133A1C84C65793AEF9
8DA25996EBEFDAB53BF882D33E5A43EF201EC0B415DC701E8FE4FB576E1FD8BD
D1A30E7692524ECA63916A2AC46ACFE18E8178B51B3B89D7A218954721CABDD0
0A51A9D83D24A69FB6675063A2B3BD3FA2B3E0E04ED9832582F5515AF4441CDF
EF5F67871FAD992447F76CF16F85D0A04140B19B51943BFD0868FBCAFC4DE907
FFCD365F3CD9235704BEC725D2CC7FA26EF0C059090FB93A5747EDA57889E69B
D3E5EFA2AE6FD2F0CFD1F8478FFC614017C841E62D6156C2EBB31217119F59AB
B67C1748F28CBE526D90C5DD69DED7A9934BF625FB39DEB2182D7A5B4CCD3FB6
5D37BEE41CFA13CA06EAD9BA13FE15B781EF82A7634908B76C4688D4C2ABC3DA
2BA5A87574756FA0D72F2D6A0CC357B350D466B4D20EE132FE168BE61D4FF951
311855E5321E5EF0ECCBBC3C56DA4657C3C5830D796F82301BBCE1D7B9AD890D
6BC64614C5CF9B2479B4E7C3B7C52A6F8EC7A6C9F63592C6DB794714FDACD66F
22FBBF8C98A3FBEAF9140B86917135468FE006F159D3299B3D44ABBBBEBB8F6F
9C08B63E2A5E7428FC3CA0C1BB2BF883A31010EBD8E77BD4B7FAED7B613F4886
52BEEC39119B6E592D548B4F0E0AB5EB81214D5EC5ACCDF2C02B22208DFF23BB
3042979D53166F6570B05CA0CFC94ACBEAB61F40B35D6A20C60658D61ED95E7B
B4ECF7DB3731D584DE998BA0614001C00F5D36C5A8CBF1DFC11F715B19702660
BCD025878AC44DB91F33D815AC9DC3F4429790C922CB133A407D1599B367D46C
34D3F5936C49BFBB74A8E3B62A581199E65B1D8E5F59136D8FED9BEF89C39506
9AA2561D4783F11B5F18899CE22DC92237B4D55F41654AC8C3A9D70992C1F31D
C6753222850ECF459A7BEC65976D3F56E6CF780B37CE39F605793D904FA4650A
8FD8EC1DB81A77C19C9BDB4426F2E6E52F6410BD76E4451C4D561B4413C38DA7
401609733F47D9990B238122AF772FF2D971B0398468408AE8A9D786D4459F1A
FCF285C9E54E486126604BB3082C40A65639E91B97483486C37CE08DB5E710CD
843327B1F360133AB8050418585ED1F4E998716C9F052D6C66D3FAEE0166ADE5
F16BE5F1C915253FA11BA43C743589C85EFA9176E2EB9352AAF9AD3CA5D3250C
578650E9B6EA14BD4EF58AB1B6D0740A8A4986EEFB47AB14F5238A12B150006F
AE3B62EFA3D374AB25B33CD03B4F408804D99FFDEA459395AEB10196F4067E74
AFE1C8F9B0310407D79D9C672DB6DAC3AB80DB4844F2C72AAC64F9B9D1C39420
BFA3EDA0FC110165DD64B0380411F61C1767E29CA57A47EFD1F774F2F20C3DC7
C21246EFE84130BD4D15BBD2A563E0960140E2EF8AE58083EBB18C1F3CD700AC
85DA22DE061E6CBE95A645F170A44ED236CF8C61221FE0317F6924FFBDB01E66
7F4E8AB8DB64134050F3FBF9DD7D42790762CC7D2F2B08DD025F3EDCCDA8B132
9836CC6136E0B2DC8292E36DC444FE63DE2AB549077A292B73EC6AC2F77A93BB
FB1A82DAB81E9D005070FD4D481045801264AF54701AA1D5F9FC3B06ABF25F89
455E6E32D6DDA5BB840CFE9AAEC1BF791560D2ABDCE78D2BDC07CED874A17323
647398EE737D27521BB99D04FEB88B6DE54F3245753FC550C7F6DDFA3FAFF92A
C26C79FFE09DEAB661F37F30965BCF2B6B89D4659DA262C5151B948E529F0C7A
21052F1A28CE3432A8DF93FCFBEBC586BCB872E666A060E4D9241802B72B1CC2
78D8850D009A8B3868F4A84AA68FD6EC42440357B7D063FC7D32096C6A7E4E08
1D61DD7A3FD9373F9A75590974A252291322ACF12EE7FE8A738607329268F441
FAD84CCBF875257FD719D237283F6AE6A12B1CF5E83FE1F493526894BF4A34FC
D2A8674D1C9B1655E83CAD37AA1977D64B65F245F3C8B987ABBF94ABA8DB33E6
BEE83028A732F12A2661AB1FC21CBE13E07D84E81C83C06A7FC6376A2C3719CB
2FB7C4B1311ADB97C07BA2477251E34038908072C47C3B4A2404A102FEBB1734
00073C225B2BE7110F6C11E1FD27431377F103A3AD8DCADBE15197E8239C7099
2C563709271017FB5A4C79D6E8F17447CE85374983B011A83C2F74365C08C2C7
FA6F07F63D81F4107D69E8089525CECD505DC35CB17B6D8F433F9402B0E2392E
E2587AD0D3D3A48714EA217B591D115579FA3862358A758825ED631CC7897D81
D8DB5E1BDC5FA5472DE789CB9B4E44FEFEEDCE7B6160978ED7FF4A5199B53C91
657198A802B68AF5A81208471F43D82DEEA1724656B5DBA6ECBBA19755C85371
FC39C88EC838D41D58EEE905CBC51FBACD7A3D7D91ECD821734025EB13E3336B
807981134B1C53AF1802803BAF5597570A8C6B0B4A5E0E80F054547B0A1212B1
CB9033538176952B24F1AE4D3E721D8372D8D1ECA5A32CDF25E34A95065640E1
8838487F6AA356CFF8DFBB285BE2E378FC46E580326593693817091D84FF3E1C
152FD1DD1AED48BBF2B65F5D053BC7B1F2BBAE9CC424E277788953475AEB85C9
63B6B554201AECE2A4529E9CC7EAC192042268BA800B6AF8B46A5D6CA588DF0A
FA1E08FF5177BB72916D578C2C6E72A18B937490AF68DAC5B52DB3BD947789E4
0F9B74CCE1D5CE17CFD0C4166E42246934DD00C08EF218B03254F35619AA8280
FF1AC67983B2E5C13CAAC355E995A962D992766147370FED9E0F297D698CCA82
15BA271A098F840FED2991AB71CC001A8D44DF11ACEF4941B8E5598E11FD12EB
A696C359A9D2372D5BE1E01AB1EA93615AFBFDD29E9971630FC092350F18DBAF
8F2A1C368E486C0C4E1D829FB4C4A4C60E907C72052513A13269BB24115316DC
1125D79F48531B10F7A9991F6EE897A83F5FB22F5F4C7AAD461F3FF2EFF20DFE
C6942E2E9BF905F3600DFDA7BF98C5632B31D9509AF593CBCB7B0B26192C63BA
85A4C0A125CFC22F5BF18F89D806B3E19297E8F9B34B21C9F3D6882E3E909D80
E0762C58ECC4E243CA799B911208B258E1F1DA5B86C8D277F8134D0136CA28E8
A2C4C7B1AD1EBF980096EC4AF841E416430F8B4403DC45B8070D31E6FC60F8C7
961BA96362CA771E3DB9D813A9F1C35F6938DD79049927CFA9BCA1F6164C53B7
623D8F7083CB5367D9FC51A77E2745DB8BA22B1E79D2E7E6C1AC119FEE2CCBFA
E53B96143DE8C23DBCA777AC4DD1A22A90464277AD9424C2D2E6251728429284
BAC3079F0D01093E0F11DB13D383ED6454C1E13AFB362FA62E54069722666626
CD65EEE09E12C448292143A933B10F327FA3BE68C541EE8DA5E0A6923FF60DE8
B8795EAD215E012FEE2151C91429061E8ACE4B92604B4D99C915BC7801E7956F
4E5182744AB6062C8460299CA0A055596FD630BF9FA4967FAD0D848DE7F7DC36
D8B7CE78E4A6D5A9FA4D18A05926998D1D03E2532F635933BC5FC23D5090E748
679849A829F4171A1515A6C5DB90829B90896E2F250369FC6B6F5504B4E002A9
92E251508F75C7FCBCE1A31F600A210F389D595CB86D1556BC15DE31A675D44B
2D0C17274BAAAA454168F15C37B7F2477196FE666140D9EA8AC68B343772084D
45B94B823423704B40DAF7FDF2FDF4017F94D9D89F1B6F249BCAAC5AC3D0ADDC
4B61BD20023FF06A5F3B1A51AE4850C6FDD76A4ABCDEDE568BCE4B97C14DB45B
BBABA2360BD53527CA6D51956D0957EB2074C5F64C7273311F5EF4154E83B6CD
0E45682139F85FD44F45A013F484BB0C079FBEAE6595B5C11F9C826DD1B4D5A1
763C560F54AB4521EAB09D665E71AFDCE72C9225DF20BB60D5EBF6D5B7BF0375
C1C2EEF97E28A71990C9D9D966F9510557EAA9071AFD7F0896040C1A6741E56D
793ABDE9F34D71C58EF11F62EC37732EE5CCC0ECD9151B8114E865F16B9F09DA
1BCAED22CBE6E8710E44EA188EAFBF5EA958EF011BE0E24B90BE5E372FC69FE9
FD47150A0CC019FB7BF22A3B97997369CA13481DF1722D50ED1F69EC3BB564F7
F7E2715E0C6B032DDD1B9BD9DE5D89AD98207F2426CE0CBC97FCC7138A730729
7BF2B08A80874CF0D889281F4761B0DB32089882A8FDE5AA396EBD58CD1FC982
61FE9546C44D22BBFF30E18A42C47DD0FA1EE3521C98714EC451AB5F1D948EEF
981516AFFBBC84D27BD1ABD686D1351BD5ABA2112A1675F9914CE626DA643120
4C74CBB662283EA3F80219710517916D0CF980211650F7FD1D657C31646B0A70
074CFD2728ECD18DDA85175E3CE67FD4A6528AC40432CC012322BF86C75D542D
F2E2EC862783E843F9628EB1C95B6FD047603E302D3D296FEAF54D457AB45064
94D30D7F86A94EA970D57AEE7F6AC6A473BFFB636EE03BB0550C4C6894BDCBA1
0A60B000EBD20E34B1B3929EA15A4FB8D129DA0E15E6784A61F84747AB61EB86
AFC45B70EB42F8CDA0BAB89ACDC9A2D4D13DECF2FAD9DBFD939B0DFEF5275B93
87723E2A0304D20C40631420C685B7742DD1E5B287F5743B651341AD1D17C6F8
7FBB050C6304ED348A11503F3C9D965A92B9D0FCB6924F06B3F1FB4AB1628060
1D4308FB33E6F40C5C63C95E789382461E84C460D0B87B60DC612AF9B5FC2087
FC991638FFF960D0D38234AA1C9900C092C169929FA3E2260E0BF7CA0B74449E
CD34DB1F1FEFB74A8A773F951A63AFB753A6A3C4DFF9BA53B2C6F34650E78E43
0F63F2F8A60EA6030C5280EFF0AB91AE4F207B82CEE90E8CDAD78E42F9D49AE2
4D11B9B064801D47F4195DBC73708CB11EB869023129C967D3E495794B2EE286
E7BFAEBAA6412B6ABAE22BC84F3B2F41285EAB4720FDA4B589793BC051BBBF44
0365B4EACB0932EDB316D350D7DC321B64AC31C545859F011EB636016EE26635
8CD06DC6E4491930A1D4B662BC21C5C6FC7B5E1BFF8F5A22EB124D1C97A638B4
620E485A996CC84306CDD2D6B4B49DB07D73304B66C6BA835EBDDFC19E88CF11
D2E7FBC54E360A85275A7DA9E0E1336F13F8526C6BBFF2B1DB7D364FEAD08ADB
FAD028161A01E97B0A9DFDF088978B90DF4F070919A734F426D447CDF8EFDCC1
C8AA92340FC77189A1653959BD6F18A593F7F2F727BAE27D7A66202B997D26F9
4B7F4A00706240637B9CC0720467E68E2CC5B817E682C4F6C7A55DD17959CA19
0630ACFFCDE63ABC92681698EF9F5C3F9C1E9D28B71A246B043CE44E65F1F3F9
0A73211447F2F4AD6CB5ACB2C7C5DBEF5E30FD84E103DBFE59B74C19F6098ABC
DB06E2D56FD40D8CEFA60D95E2E4C0A29284FD2C9A8740851EDC442490FAE839
FF8F5A90E1E7FA2401AA0BE497CCFB11BB8D6B2A70A060B4CDED1B0AE4D90352
4DA5839DB2DE078A37DECC11CD133020D4EA2A4E4D86A1963A3237C7A488381A
17E2890C71CCF05245C4AE72F3998A9740C6CE8A5DDBB1D7721924E9AD6B9F76
4E268D0F02C88423F82D718BC9D532885B47C469D8E4B8BDFDD6BED166CE490D
7AAE6049FE273D83092CD5ABFA557EB42466F27A921214CF0DAA2A78FEB0BFBB
6DC2FA129B42E2142611ED0A8ACAC6EA58B85CFB3C815F4EF44DD5BAF85A8C46
162D1D7A306F0693FEC1855FAAE316E0BA82D2C8952D424F7EAB83B2CAF547F7
72C8099CDDB5F3D586B9B5A9D9CD9D7AC97141B7FA018A0355BA8777786C48E7
1D0A4EC6220EE0DB255760640BB17710A5ECDADB2CDB17ACEFDE8AA1B613B090
3FF6491BBF618C94177E99B34D229F4027E09BFC92E3FC4A6441F33A5597D72C
82E4BD9A85E2004635A660E48DB7DF1DA1BB41D984B457154D1DF0103E0A79EE
6DA5D6F62578515EC78E18B045F400D54B000D430634C92280AF1AD0EF0622C9
11960E1233C57EBA78A4B34D716E9CEF42A595CE4B65C86C104E9D92A4299653
008B0DDE8F3988E4A1991FFAE782BABAE8EA35A981C0AC8F877623FE0703A8D6
9B9C0B4E7B3E0E986592AE7310978B0FB3A981DCB94ECFF2363CA48B9E48F640
56886EDEE8D668DAEE4E1255BF293797A1BD1FAAB9AF2BAB4804B88C53AC0152
52171C713B12582F6D29ADDB80A225B5611B31192D23878E807AE0D523F99254
773C65920E5AF68C0463541489F56666025C854B28533F3D64DEFAD76535D674
1E9B6D0C8A568AFE964E1208B00085E830ECB31F8437E175131C8CC487F7EF85
3BD1E0232AF3C4A67F4CE9FCC4AC4032F55765C97633CB23DFF6429109D3815B
9CB0CAD5FE88FF780E752C4FD8E749DBA0FFB2CAA60E4C2047DEB00A17267777
4217ABBFEDC33DF60D1BD83DAD7F7101DDCE5EE69C1F877ABB152C60E40979EE
9EF2186A550FAC789DC46BAEA1D028891BCE072BC401571A15E9BE11CB03C9FD
CFDE3700BDDAAED61CD52A7A1D3410907CC3E44AA1EA09B9528809ADADF12424
004FBA91AAEC6CE3913A5A406A455C4AE0BC827DEAB8405598626F42696F69D1
30E3278D31D66B3E5649529D21E2887378572EC9BA14A0944E37480AD3FF9C10
590C07082DE5853C13A1479EFBDCFDB925E45B3F17BE776D928B2FD252A6C23E
1379381AB6EF650938D7D1D90A82EEF9C8403AE9B7678F96A4B3894FEA6D9905
49345DBD2BFD2FBC84E409650E9CDFFD63D996E25E5C0E0FFE02BBE175EDDE9C
E7F7DD4772C2C44C18B52E707CCB800762D59A47D65414D629B139C0B3C2BF3D
2905CFFAE9EAF0BBF01FBA9543F0A89C4DF01C43A24BFE5463C9619F0CE8128C
CA7D1FC1A124D3C9624699D76D7351A4A78FC2B392BEE7C57463B7E16E4769F3
CFC9ED065ABCAF0F93C93857EC8A788F84093A75F78495F796ECDE2684115E95
C9EFCDAEA25114CE2484465A56A684012053B3D0781228704CF132253C51B9E6
E27E63511004A58EFD38E701DAC195C99A614B1869F207E6BAFA869CB82B6DDD
4DCFEDFFFE62A9FA3A22300877CEF345E6A7DF0D81E0B7E40387195AB6AD13AB
3CCFEC63A901A9B3B9A5C5F43476D116D2E892576552117FE414336D3F93A306
F0625291D2CC7045DDEC6576D746C1AEC54ADE2497021A2B138D496FA021D3CF
F14894FBB509021AEB395418E202D9365BED0F1271CD61BBAE0B6A6CF275EF76
28F546E9B7FE3DA2FABFF62611EF483C9711E1B0D84F44171C48CF73ECCD8464
6C78399E063C0AAF44775E6D1570F08B3087E3876BD4A97F82516242F03398F3
3FC863BA14FF3611A0C6B6E0E88750BE13E67669EB4A632B81D1349A499AFB3C
704FD9FD5AC7065959E797BC0EA0A0C04F9BF6A32A3AC1FD4FBE2F70FE56B13A
A90E78AF892C68B6248BD4E6EBF6D067042F1120EC563DA5F7E81E23B770F5B2
EE5B77CFA52B22A941B3A6E2A2FC1BFF764DE0045F2298D3321B64AC31C54585
9F011EB636016EE266358CD7CCEAE1FD98697E21F7AD3CF2FB3897152B7E9F7C
4C3762BFA29EF55C6ADAA3B2B49B17F297793FDA280740AB25FB35F3A681733D
AE65FD33F5535C1235C62F5FA085F93DBB36B38CE86196A8838829AA72E7DAB3
5155314BE7242BD673EBBED1001F890256CEEBCD45D2980B707D98721C708302
BEF4ABA0604CADADFCE6247669F6392CB041D02ACCBFEA0148283EAD2E621FD6
50A01D433803DA6D40DDAC291B0C4B29733DCFFCA15AC3CC55BBF9B469C751E1
B64DF5D843B0514647A70CB32D9A9EA279662D1B274B0804CDDDD6A456D0CD4B
B0433209DE16CC3C3336CCA7AD72305F06A987174DF0D9A5FD9C2FD58F925E8C
C6E8273A0A358EF12B2D5FA77789F403D80BC3F8D3CCC849CC0D1B54E47D44B8
07D264B8FFF9E4D785C264F4E43E4E692B8EDAB13CF5AC05D11A33F2D53EE26E
86B3070DD0E20298066B78B7794DD450A9BC2708F01C090B7E7D2801778F393B
2383E55FEE3E8FE1D842380C4D8E902F9850B1E071372B6BCF391E58BF827DCB
DC8EE0D42FA52B5F496E54A4BE3367CE05FE6C27359E520A8D128156D4D32497
12471E85A059529C7D6101E2D5CF84EF3C4A91948FCAE03F3DF3E6963455CFB2
2972CD642C7A3746F32DF26E116198F86DAC5BF241D4D9AB88EE8122956DFB3B
DE32F3C81073D6142631E50AF3BBDF68CC40344D489CFB91D1E9D4911F13E416
B1B605357F60A18B6D6EE4E5D1A32026B5D613260BB516FA40888A91B043AC24
6F0149F995741E08CF460E2BA3AC50A5A93D31607964E58D19D8317B77DCB146
F27A55A86B68F77C160BB6F3E5DEB7A1043916E946EBA56691C682B067F1525D
C438EA0076574A376BBA77E48CA898B5CC37910B427A110BF440CB913E39C859
B9F070E2982572E4CDF1C6E5BA5CBBAAF733DF941BF1D2A56E755FF507A56FEF
98CE576CCC29A76055C6764C60BD44E16471530773CDB0D43E2671CBB107D16C
3B6E870A4AC04AD5F17FCD1E87796B6F6721ACE5F11E543050DF43E4C2811D37
C9029692DF8E94F6FE39474EE13AEB5F8E51F65DF4EB0148F58684E8DDD4641B
79CE028D54B64D1D29209A16487327DC3CAC470BC33A673DDC442F0D49EB3706
A4BC08DD6698AB78D7681FECCBB4BABA1ACA8000D94727B62F28E0D8A1C6E2B1
F4AA9A11B291D79B41976FF5A8A85F9EF6C96C1307464B56036A7143F0A1172D
F3F9D6BDE77DD5870ADEC8900D6346957B84CFAD695A01A7EE18656AAC3D73B8
51D54A2FA55862DD7918705B73E8F285A967624AB240C4186FB5E4720060C815
1389BC2DB1381ADB11431C97A8DBC052426E3C954580E08ED9CAF70948A4492B
9886712F81E03850B816ED9406FA5EFCE34DB39D8690F60922A5775D8CFB67D6
DA5AD14C9571982039742230A411A843F1A39E0E69027791E39FC285EC1BB6E1
9BE9B1E902D8F01E5ABE8CB47FAE6E21AFE8B2F624E4904F97DFF6C0C6DDBB09
6398CBACAF0540A23487692AB346AB4C05A9722D691D6EA14EAF06F0C766294C
04721D029680E00568264681B4B0208A0FFEC8A0113955F647B7140F878644E5
265E9BFA2581734AD1F35B9DE3ACB82D7CB8D81EA251F2033310F8A3D0885C3A
D41369B1FE34463FD3B567AB9DF5B49B9B15053B033DFD5ADC981CDD9336F954
A16CAB9A779759DB3EE03CF2D2E9652E3A74ED08AD043E24544956C5C5719127
CB2E870640300F1C405463D6A09A148C0D02CF572199F74645C0D9B4DB9DA965
633F5DCD8684C232BCFD8326248FB04666282E574E03D11C268D928CF70F2802
135F1BD4EDF9C332B35169B5E03A6D5C343CB60880746D96BB76E360801E6013
C17F6BA52CEE47A7833FB14E12E8CC9AB32E28CF6D59DC1456D0F5BFEE977791
F083DEFFBC6A09BA83A6D45CDDDC75CC6116F95B109A7300B46C94ABBD0D625E
0BEB6495C5A5D985E6057287128B1EAC742FE87C96ED517481077151B32B0CFE
769492DB1AC5A4A8DCF53AAB37A1CFFE23A7BAE41B738D556FAE1E05DE56D64B
F5AF1492D4912E529BF2B319068BF2D155CE4DA0428F3791BEA41125C6910F27
D26E64F6874FF19760240533EF6C1E4790F43395982A50310C87EE9F254D1C84
762655252E4EA505DD2D9DE884C96BB923B1EC8208BD7DCEAB0FC229362CBDE9
1169316CD9FEE8F22111CC5C1BDD1347412F127A6034544E9D0DB4E5B18753CB
1E6E988CAF682890F30705677F72376CDDEAFEB14A3C0A154FAEE56481E6E5C9
9EC23F51973A51FB3C68063DA6C06B2B94DBC98F47ADCBD829B30ADC50EFCC57
9DDE622648E10EEB970612F4E32EEE174B6CF744140A5EDD4C1FC436828AC761
455851A1BBDF123203005D9C2B0D63BB44A3E06AE4D510552F307C0D84C4B4B0
D86288469F9A2D9201463685C3ABF942559DA4149F93605BA3D60D559E190181
07DAD9800A3E4760A333543F2F406C5BCA7C3AD1E677AAD1D0CD471029B3583E
35405B8D4274936B98D0C4876667A6FC270D632AAFAC2F89B60DDF10FD43720D
0933F22BDE95A017DE3F673D1CFD831B4AF8FD0BB54A1DF34FF2884992A7D0E0
61046E3A77147EFAE51530151E344446A90B41EE3009DEAC8CEBB4C0FF4653FA
FBE73816A59C964D0F7C968DA2341C0A2B39069B3C8EE129545E03970487D366
72E4C4225267EE658082F9148BA2AA1B2EC8EA341452087A74269C0C5E9EF300
5200E13DEBE6F2AA1136616AC7421FFF27A307C640037491175E5CC23A30FD24
48C01DD12827878BAEE83AB15A6AC71CD9F3222D900DD2280DFDBE984FCE0A99
13CE4A74DA1AA826C384899B979F3319BC21A716554DB31CD1E0D41B95E4E75D
4EAE1FC6AC56BEDBC250D1EE87819AECA19633087C035DBDCA0D65BB19842081
21ED113DF68ACB49250584884A5A97708BA977C3446903A776A4C384A8FF8A7E
CE5661914B9EB88FAC8F4B536645397175C10044A36CF38884BE13BC75564DA1
CA0D96BF4C3F8BC1C89F7578279F52CB4AEC232D5FEABD2FF55AF0CBB42D4320
2A614147EE30B0E3AB771003300AE42117C0F37BF499A9DD2AB665537FEBACD5
BC7C774D53CC63B57F7C9A26CC2E48F1A1A43105912A559D78274189318C9557
5D6A37336169CBB3B0723061CD74EC15194DC51F17C2094EE48A1ACDD54ED022
459FAC1ECD79FC76D8554C9698BA111D680270A2BDA4E49A9A40F1044C0C48C5
DB41B41B6371FDD6218F51BC17ACDC208C983D194D487C273AE477C849C0084E
9897355FB2FDBCE2F1E90327B54826BF278754F11B1447D77810709E12F94AD5
011935A17BBB6051C7CF8CDC6BF96CBA3ECDEE51488A77C93B1A797CF0F29241
06AA765723BD9D268960E7C76BF7811A17B27D1134617F6B1B60CBFCEE9F93B6
5E328BC84527AC936AB56072F0A343B79FC4815120434FE0179E9020062622DE
064EC1424A3655802041DFE2688F464727BE1CDF9FF5239C62338F7EBDFA8EB7
05D740C0686E3F73337E28400D716A714D8676580AD6913F9101D522DA03412A
6C4C6B34EEA836994B671694C3CA413D2833B34AF40511E53D7B0B79E460C956
5B5D77C6EF1116236E3DD3BA352C99066C6608768FEAE3F14F96049A701500B6
89CFDE18F735A09989D3EDD406548C2E346FDA1896AA835ADA1CBC8F7E96574A
E9FD1687EE195EBD8F7EE80FA8F42C298823CD01085767E84DABE071FAB10B3B
3AC52A75A50F59A8527733D731C9C0FBB2C31C4F8FF8BB184E773D5FE8065F67
83F91A3F9A222863EDA09E64E8A4EABA8278191DE7BFB1FEF15ECF06F91A48B2
F0FC092F08B1EE7D33D3BD85B9A80845B563A2C36395275AC90C60EA6479D85A
5E72337F1858CED1F464477350545CE0EE3A28B21D3DE6D4F0C2E927871F7EA4
B99C58A5A0132E9F41F4C557D71735ED4D7540A283225280F4BBA24BFBEF7DB3
84C4A7DBBFB4F14DE9B53660C5DE208E6580EF76392A5C7DDAC371F18B306E3D
4C1BFD52F1B31DC2A515D9AA0C4DEA8D31101A1B4A8DDD02DE5DB6F99584BFB2
74C4D2249F6FB363D2BF1952AEEEAB9AD39C857EBA17FEA216B1086DB4F1C691
CF4060DB7F42F3395BCDEAD7FF9347C49E6CA33ED9E033851B2F9CBFD321540D
96F8094F2D662FB19D606B325F2CE1F5CDF6CFD87E6D0DF661E0E1777CE3CCC8
15A7BFBA8E8AC6E36B21B6985DC561E6DB6723C02096DA77DD3B014A346CC7B7
3CB2F9B262DDEDBD4EC97189F02054253BB5F40E5109D03785EE72E566ABF59E
D86343E2C1C9A8EBCD6C3AD71A189B6C6372F5BCC3C7F61E10B7E4C9D479CDEC
AA0F42E48DE8F43764C9E47270675DBF3F91BF4E4B62AB6A79DD9BDC71D17A28
5E9E25C9E196349B92AAAF12DE5C156BEE178207BBF7556616312B874AB57B15
179888FC4789BE62559198714BC474DE4C6B705D2AE3ECCC1BD2D6FF3B72CAA9
52DEF11AA117003BC518F1B917DDDFD72012D65DE4B8C61706785922600F23B6
16D214536C1FB9DA5EC6C7229DAD8BA466618447DC37FE94DD3D888010E3C380
5C0E4078FE1A81544F49D54A45AE6D370441DE9711BA3E3907192866C7E0FC2D
A6ED47D61F83DBF89585DAB88E81AE9874382BB1146A0FF73318128A2B2DB3EF
D07706D953C5BF85F94F5F401CE18E37E72D710F5E78D3661C1ED9317AF5DC5D
FBC576DD13C365EEDDB8252A21D24F8878AEAF3BCA69882CFC5745047EC27DF1
EF005417B1558072CAEC68706DBABDC86EE288A39DB1879EE205A354FFDD83DC
BC5DDC01188F4E304C4610FAFCBA9D3EBF0651EE316B192D4601E69166F92292
4FEEA6D29DB77656B2330F96F1B496062216CB375ED474CF3F16F05DECFA7657
74CFA3592B5C6D2415B02A403011ACEBA6C31C000DB329738C20F59B7379A283
E0A10270FCDB37AAF4A594C978B0C0DDBA352E122B66BB958EDFAB97A7C3B689
36FB2D9659D413E755B3D87107B3470726AD1F8E0455183BCA80A8298B856953
2A55EF57743658E9B1E9F702C488694A92EDC12091D3EE126B6F73ECA3BBC216
DAA74D06CDAE6239CD5582CB58EE2F0F342AD632682458001CC505953B3A6FC8
022F58F2C39F2FC9AE399AFF9B937E874F63295BAF64383C221CEC460A2631F6
D3AD4ED713C81EADB17142BFA35136D3B2A10575A4885581A7AB11BA0E4A42A4
03DAD4B08C4B20035FAE6F5EFFEBBAC9D30C9FA188D1F97B8B30F860652F18AC
E6857EB2788CFC01EC5D9558454A249D0709DA675E40677DFB26033812583ED3
F8B8526E3B3F3316ED2B3D40FFD050AF2B4B8695DDFC6AD4680DB0E8FF9B3A7D
97B2DB09F271EEF344CFDF6D343D506C09A5570C53BF9567B964C490DD6439F9
FA6F27F763629831C81E373C26C2B8B8A2A90B6D6C9B00B56052E8D9C384C30A
609EB1B4B788BE82AEBD4C7BCA363042E2158D163CCB7BEF1856AE1269F9D8F2
48DD0A62C212DEA4EB53D5DB9E5A3136F82BFB6A3D395DC514BAD89D76F835D4
2791BBB25DCA1AA4E6B2C2B9BA91FF88E3B9557E75DFABA555163ACA6641BABA
53FB4CFD27568726F94647A3661389891BEC1EF99B8DD2CDEA0BB2DDFD557E15
4C7D4931BAFE9A9136C3AAE071B00A3D225B0025F5169291029FE697BD123AA4
EF021B951CE04E4904438467C435361B9EE2378B0B2365178CE4FE5D7B69E253
9000E546E4D972CA286C6AD8E8B66DEE60D263137118A2507605D45081A0CDFB
468C449C1D9D2E7D4E286CD89A53F9DE2626B3ABBB56D2CCDCE5BF354BBB4234
B989CE702B8B95AE8D829C8F3AD7ED9549B8EFA0FB748C5D750A66CF695EE131
9968FC0D479F617AF66FAB78AEA057C18ACF58136C94A428B207C281D66654C1
AAF015B9F8B0A1A057B354D8D8A6BA18F7EED5C49E77CB6A755035B1B05F1C86
833EEC02FC813145A2F30E869A35A58844DCDBF7DCE03D6DF9C02645D73B7500
E10824E7C576E16E367D09E78B542A922988849204F4EB4D94BE61AE327AC74E
EC20E72B37559A1833B40240F3D5F638455AD2A2C8EBBFD42820EC3BEAC121B6
3C661DD8CFB05D30817DEB4D0A6873B147641F77908B3A667E43CB9F1016ACCE
6DB4B0127C39133C13E018EBC1BB6AECE8C6FD83AA15F07152847D89CAA745E5
A3A5D752B32BE79C942B7A1CFAFDEFA9CDD965AD98ED0DF3B9E77AA94B712F57
43176D2498717344483E28D0460CF829272A3EAEB91E84BA00EC3F76BC5A848B
A25FC81B91DDCE0CA3E5B551096DD5762189E8BD776815DBD7F7BC33B34BF3EB
64D8B41E63A28E978DEF34AF524F8E24ABDC6DF356C1DD844D9C65C3A5B0D92D
7F334344F50361F289B380E41E6A986CF2AB652CFEB9AAC8DA714AD9D987DEA4
5368072750CAD0C9ABC3F4955DB42E3368597EFE9C11BAEAB87EF29FF3F78E53
47D42660944335C52006AB3E969E0C1DF16FD608B544D8F89FEAFC54B70A8ABA
2A68EE6C25396CCE08CB652C307763EDE20BDAD8A5F96E56EF702487FA9AFC60
34A8AE34EE4082F7D2CEA3061D49C7CDA655827C476D163A4E95FF718B7B8B1B
44138B372809F295F67DC07F38A43E4A879B02E0392E5AF9FBF53107760245F3
22721F2BD2F9A474404C908E46178E456E235177BD268BF74D3CCD0E9183DE51
DA43AAD94AAF5D800D4AB2C7DC1C07C459C38B9DCB9C9187FF673F1C457D4485
BF9F4D91309BB08F05D2BEE3EF66074A65390C8F3E99966BA0D5ABC06C957DC8
C5AA7D1D4D52E8720372ABF6B161502CDD88292D5F5B08B6324436853C5D4B65
BC7F6FD69616A8D43DE5A99883612F4170DBD7D01398B38260AFAE01D1497F4E
6D600483961F215E6A1B342ACB1307E865826825DD31C38D119930071A45DBE4
DE1BDE6833C5D66F0F8C047DD04227E659ECA646BEA9ED12CE97781A06B58C3C
1D0074A8457B12F3D607619CB08AE72CC5BB3A34201955A6170CC8588E1E1881
0BCB009A89FBA9CB6F1A294B1F8ADCBCD7EECC4D048422BDEEB672D65763B7F8
C72F225D67D76C3C62EC86E0AD332B4801AE387CE33A16C0526AC18D17B35E37
F9B8C857EBB24A997C8162D5E0C0D251EB23DCF4961F68DBB0644A26A298E8D4
AAE228D4307DEAF10CAA78CE0B13629B92560BB12D5D3E73DF2756AB6AB85A61
84278D32B64692DEA650AD5A2857D30D257A6FC41E333CCAEFC99BE24D46B1BB
BC03F349DAF8F5A17D23166977829F1D2AC2EF53151C45F7348AC023A41AA52D
3FD0CB980F4FA8334546F7EE6A8773AD2BD413B02EC1AD7483729ED525086D4E
6CA19DAACF2F15039F0A99E6FC27910556F60C29AB8B417E2D6092F8BB70A2DD
5DEDD4BE6F621381FE2E38BEFB071B9FFECD8D9C3DBC8DD57F121D566D3EFA04
88C7FBA026C56202DCD4279531E1996480DCBE80E5191287E609C608A3CA16BB
2A47D13E1B9D550001C2DCC1B1F541C0889BBF6795EAF589A6C17CE7360E2279
F1BB8DB3CCA399DDE7FB9DA05542FC340CB11389C30786897E49A974E9026CE5
A804E64725F69770905D11D3022E1EF4461045B82D9886F7FE83C887D821177E
1A2FF9720CB1CBE9788FFFFB8C7A9D754F82664DA9F3AC4E6DE16151EFD7B4BE
CB9377A28858ADEA2CEF77D100BB5B8E4EBEC177FE14C7DFCBB90E96A210C9CF
325E5CA01FC85E51B01AA84F987724653A6EBA1F30D227A123811D47A6AB4F3C
1AC82FC46276D4E76AD9E4C5DCCC874CA19128B746F76A57B250B8BDB935CE9F
0E4F2DA860A187225CC0C6D441A07B9E644604E3331EACEE2626FCDF19910A62
71259B64B87E903786C9EDE5A23F1D6716E1039585D3491B85CE94922F0DC5E1
CB0335721B4E0870F5F6B4908496BD390056E49E68ECFCAFE7D585F6768B66AA
2B54A79C695180E97F63B7BB13E8840E9725539EC23E12580411A4CD17D3D8DB
C4AAA5AAF1BDF7F2CB316B1A44D9853FBC3BB993E6220DB96DA09BE95E5FDA2F
850905D014FAA3ED5882B2791DF3192D90469E7178B0B0A9051262A361AF56F5
87343AB6AF74485B3387CC896ADF7ABA61FC71A4841BC9EA8A8E7A2FD431260F
B1758BAC67E14234D25747F1E68E0C36F9F2A5E46F12CC16254F52A26FE47FE4
1504D3E851A061554D6DCFF82529C7CE1504213EBD9FDAE57CD482A24C361CEE
EC95A7DC4044F60BD2A1149862434B7002E648837DDFBA23B66124203536CB04
FCAA433B9C6D4683C1DC0EA505B6CE1113D64B375A59E235AF06DDA6FF21A5C7
C84D80F79F285E493690EB87479294A7CA46351830F7A5365A10FBE00E8163C0
0F0B2906011EE9A565FC1D001BEFD34F6C26C24C8BB36857E1C1015BB185EB7D
35201E1566B4F50EE635A4C8F7A3B6866F93CA641F3F2CC93D2B42CC569F78BD
73D380C572E5087A5556397E485D17669EE3DD8CEC4918D7FE142F2FBC5F9332
C1ACC7C13174AD59EC5C32E126DE6ED927D9ACFEA24DD07D5BAED9EEA6D1EE6A
7047658F351FB7FBFA0858CFB486F12054F59BF4AB1B5B115C6E138C33D5EFCD
C886034B19F6786F371616538012F572ECC282E7CA064862FEF40FF337CDAAD6
36D9E3DCCAE2F30D96ABB86B00439826D9CCD763F5BAB3DB9A7863049488C39D
C02FCD6E34B28002DC7E74C22192182C5D3BE601C0B5E2CD84C43EEC93DC6406
382278511893A86407A133C4A8A18021CEE9A1771E30988479786495E7A1C40A
7FBC2F5BB4EF4620AFE4B1E176EFD0AD333C9EF4C754613990C98810FF2A692D
9B62A1228CDA0BACB5EE30046909F5A90B188505175088F43345948F1B06A1B8
A026B3CA477D4CC612D0DC8CFFB129AE0D077FE7AE2463F40DA89824D1C5D17D
C70E135B2DCE0FBE3A63A34884DA9097C0F903F0F05E0F77EA5F34AD0588690A
B98E5D6E0EC1F49E0464F79D51584470317F5C55AAEF32B582FE54F0B93A85F0
DFC1C267798EA54C8BE3F89199BF4F71E1F6FBE8788FF95705DAB0FC10701354
830444ACC1584CD6C80A8D3A743D5E41F8029823879C2455A1A1A35DCFFBC046
6A81247D0D69510D8ACB39D2D841A976A9CC1A12AED614B2CD0995541EF185FF
4385776CCBDC8CABB9120CB68A1E10BDB3F5B1B9D3AA5FF9EB9AD35A3ED621B6
CD294F385A66F5504DF8806766DA412A95FEC4645DEA8909D938CC19B9EB4FCD
2CAA9B6E8BC9F1ADB18AC0B580E27865961CB032F67DBF49E534F361F70EAFFA
374C8B6A3ACF9264E462309F5E4C347421FEF46BE9F4D5016AAF19DF2B1E2D97
BA8D3BAB84CF7068EB16D13BA07154D1F4E64CC897917F6E490B5BFC1EE11AE4
C309F99ADA972F517FA7F06A3C36A4C792D168DC61B0E00C91D60564537CFA1D
D18800B7E40E16407433FC9A216DC7AFCE1C5838910795C8583B1FB0BC61C7A2
6294870255E4A960FEA1B585A5CD814C0CF46BDAA1C4AB6AD47FC4915ECA2471
6B985818B87ECCE3A0213E77E529C2C074B1746250709876DB8C3F21E3904411
CCD832A4367EA9C08745A8F713A81C613FAB60D3E81A470B21C75D55FF5E370B
CBEE26790A95D9EE5692DB7A36B45EE0856A82A2D76A25A91BD1C3A0C4D415E3
17BFFA35D78F0C5C50B626CBD8EC4F2C52214BAEFD38370DA903A5120BD4D881
97E0662023B383E39712D0264196C6B424F1D39D11670BA89B298DE40E91D1CB
AED90CA45248D16465F0743C602C6E12438E7E9CF6405EE80E8C0A72ED24B70A
451B58DB04A1F2B707077BC18F64CF92975BD18850BB73E507315CE88A7A4CEA
A6CAF2FF72A5358E0A1B05164210F4453883898DE5BA43091344FC9464FDB0D3
04F9ECE6A91142D95593EF9FD51E984FF26C559B9662A007D77BFB4DE9C841E9
C96CFE06796A38F30C8CC2C68C6799E76E6EB98E52B9C7B989FB44C26363968A
36AE17A9011825B5C312F5D22C676ACD0D18A1AD90A289935E739FF0307192AD
4BE3BF03C5B8623C58788518A9150F0A9D21CC63F96457ABA8A4AD18A71F3C4E
3FD4DF7591C57B453808CA61DDEB391E92B0844617E70800E95F33F26CB6C651
83C731A3DAC81CBC55BF505877F74AE7ACB9507B7A2BA757530152A5A2633667
1AE7DE584DBBE693904A72A20A1F7C70C68627A5356470BDE9575AF560856215
3DD6A09E462ADBE677E6F550F93922E1958108ACB2A48291F051DB2A6F0D73A9
153A71C2C1A8D5679DAF06069F3D36632973AAB8D7CCF7AFB5612B76BE39F322
B90CA9E3B4E100C6D4C184955E04FC32A6C8E05A9B5E05F8ED25325368D4BFE1
0ACE43981CCE9FA80DA835528B70E5C8DEF0073B298654121F1BA142DC3E8055
BBFE872FCC769D14859D2F495418FAE47FE6F72C62190953145A7B9982843436
8BE48140FADA8F09FB1C506F5A1C0EC7B9BBEE0A1EA4A6CB25527C6E4A4AA103
30C6CA3C4FD35E17E5FDB9A55FF38EE51356B2B3C5476FB0F676D28AEF3ACFE9
F163EFE84E8CB01497CB50410DC9BF548AAC8016F95C6A212208CDE1635F4E52
71224CC19B6D46761CC2D858607F50C15E06E5205869C1FEDA857BDF1690B8A2
C968A17EB81101971427571C487B6365B1516025A36D21DA865F243F1C5A4AA4
CFB8DEB788E363CDCF93EDC821F63484ADA2C38C0581B6D421A09DED7BA120CE
54ED0DE7EAA81DFA2395A029F7CFAEC61194397D4F36743FDA257F5CF80ADB4C
5C203539D1F5B72F010F93C7C4AD5B083D1D68F6E2B23D812346265355FBF2F4
58FC2B5CDD259155B095E545585845B09D855C3A01F713C1BF081EB27E2D928D
D7D02B80E1A845766CDB597CACBFE070030340948FC8C5EE646AE2E2DF81E278
A3AB9359A878A64E913A46FDF5F1C22E3C015BA8C46DFEA00293FCA8CAD6BD2D
3FB5F0E6E195CBDAC59C6559274CED2B0F61820249B4467DFB1A220AD14E1EAE
70CEF7F489BEC25D3BF6095A35A2FE7316537827C936F574760B1E3281C9BCE1
706410CE0BFAF40BD9C5A8652C95246A640E9625BCB3CB684240D74BB982A022
944E02CB6D57282433EDA8D5EF4DF4CD0E85FC5335F5A2EAC3EDDAB854A47B76
F5370E80E921C65275A72188A3E799E69FB694045841D4F2A77F822170D3318C
D8985AFB1F9019D5E8909C07B0E83CB291B89B4852A379E831559301299C446A
F84A690F56A09A84EBB1CED5515C36F27982028E398980C7C6DCED448D1588FD
8922A47AD1FA0FF202762A2BC22B5323164D1C34DD7EF75A885DDDE88841A6DB
0875E02748AE1A891F2571C84066CE46D16111ED19B906D915352458CFD5817D
AC157E3885B8EBDC3227B0B3812E49EF8453EABC20642F902437AFFFE1EFD725
BB7B2BBBDAE0E97940D1CEF1A63272B9BA6305729749786E64DDAE6475C34051
BAA36404DC4BDC3F482C8C3738A2BE99A8A506B9DE4D054F3B943A621AB4A04E
5063B03E7D30F1B518A0D298CD90EBD43F681D265E669F7E8CDA97444BA23297
27573AA1DFEB5E9C7505DFAD505B36647811C9A5D462DB4D7618AFA660E0133E
62FC60BCC7E6C3C652C631BB7CD198E97C759703623B751FAC652F49975BAAEC
5EB990EEFD6DF188E1CAF77BA635C45EEC2E10659D175404DEE21441C9514228
983E7C8BC378656A2AAA5E578D78863453488925A1E5726E6C9AE40D3CE74A32
A4C86C8196F901BF6D9816FFA07969DD0CEA6C96698D58328F2C21B7CBDECEDA
8B484FD4DA121C010A40A2D174857A8307114DD547128F3C4AAB5F287641A157
47A15A80EB8BDB7BCDDB654F6DCAF082D792D7749102D8B4DA5989D96717792D
0EF3BFCEC3E71E20E6D9823E559F4C8FBA82980EAAC61319CA91102867C65AE2
D791C30A07B4D0051CD59B4DE515B8EE8F3E3954E4781F7C0BCFB1B406A9A0DD
FDDE481AEDAC1D0A982AB1C0D499957DED64B09E919155997990277E415BCB9C
0DF2342B758096F5565D8D532C284799723D59A7BE0BECADB2C7EF9F4B3BB090
7F7B3B6529D52885A62CAA9AAF76CB4FB25764F90AB42953EB49512593D1B0A3
5E8DF367FBD3A073E552117442D802DF52CEE62D333C8680E45B7C8853AB024B
3868C0DD77370B3A4C7B16C5FFC37C0CF9A2F0D737557A1B3BFFF929DA57993B
F9D3E0878EA8407141CE42A834F186D3549338FDDEA07BD62F4D3D8D3B5CF402
910C9019348D3DC98C095C782F79B396A22D66D7F484E1419B199244E016A893
A4A50057B21E4A965DB0F4741C179BDC324DAE72A177BEB36A2E98DD78E620D8
1C49D6704446773CDD8B4B7ABCF7044EF4B1D5352497C77B09DA1DEFBE251D0B
35FA8141B0C13FA94EF3B43C29CC8629B39E3AFFB5BDE6FBF3FF1A8BEAA43A6F
4072482854EA5AF4A165DF641215F5B6F107F10F868F5484EA21898DC1DE852E
6BD09C8B8DBB09467049791F9C23F4101F3EAE2CF8F223E477AA4C1EB99B4C0C
0FE29E6DD239D2F234D71DABD43C46396DB5E8602903337BF4700CC8E80950D4
5FA840D363211B2D4737DBC8CB8E5487232F1EB4E76EC19851686B30AD78409F
D6B64BF03A46E17307A879D563BDF67454C78B01300D51C912BE7CBA6297E683
87A161F72C87548C5C2CF4F8EAF073497C25E75040E1F9A5056D77888FA44C33
496F8D1A112381C573C14103789F6FAA26FA174330D1880846763A0BE692D475
684C57427D549833C20D9C10DEFE6190F7C40BCC505E0E86FFB065A719B5C674
1CAE5163A6E0717B818974CE8172F198BE0403E7694909E0D4657B9A187A7365
5F4CD057974052F06020F0CBA556F3804ACAA98571E34DDEAC3CF1C8E08495C3
50138EECD08C67F3631AB786187031FAACC2E2A11BBD869AD3E2131253789C00
651A03320D88A573CB0228AABBE254290945C744D201C0C179E7DBDD954923B8
F8A971992FF0ACEF2A9C6A27C7BE185C32C030980CCFAA4B132EFC84E19F68A7
93B49D0F28C85399694D56469E06B3E23AE0413680351FEC6593D034D2C6FCDD
CB31E0A1DAE6E03EE53F5EB857A8657AF297C745260B5BBE4B53110B5EF93657
9F58D24E3E4CD431A408174D3A83473A392D21F664B690948D73C98A8F7C911B
616DEF7D0230F4F6665982C069EFEE0EEA415AC49C82B8F6D49DC1C54F46C46A
7199C7510F9BDAE45F356005B667ED485A5DEE37D16D9D129C137ED7870F3FC1
F4C4EE009BF3B0109157FDE9EBBB7881F729289889A8A3E5878CF3795A0514FB
67759ACC4C6FBF1E3B7196960CF23C2474E3A4886556443D7A56756A5E1C9A2A
7B48D0F0E789F7B7C6D7B2C9E9D8924080864CC646336AA5FE2BE4CA5A0C7F85
9E4DE89C32EA8D50881FFE9B414C45B06FBC491330279C6713342989CC68907E
A4205A0BC3435596988D1C67406AD33743D6D4801648A2ACA6D4B8ABDA4D671F
194C4A1DC79F2A54EF903550D006BDF393ABD5FDB4809BF0797127EFC0C5C84F
50D4EA65C2E41ECE837B8C459B6103D80406FE119A69B91F3723658962BF39A9
9F2FD91BC4957C7DC6C85330607ED4889DFC82FAFCE87DAFD858523953F83284
D0BE40F822BA1ECC9339131AD6F60C2D6475E339DF9CAC88474448B26091BF6E
AB240A5A85971093E1155B4699A7EB58822AA2F2C52EA5A64AA627F92472AF15
6B6411E0D53472C70FC6A1EFB0C052CD7679FFFF591F49BB7E39C19BF2C5D0A0
310A77FAAE497904F8FA721EC9290CDAE87B801C0C536C101AA0D77A3B65651C
DF70055D46B053D8A52FCD4D041B6EAD53106C131841B0A858F2698126B89815
06427FEF687CC83EC1A2691FDD89AD64F41A74BEF5C8743351DC9550AC182A98
736A2FAA7CEDC182CBE1F42E739B6485473B414FCCA4D5C10FF7CF5E0E09C79F
2AE5A178E37F4FFE0300932030C47C0C4AFC17C5F28A5787ECF6F5E76A133661
B6DA9143D4466E663ED5714246550C54D9693FB9D39A0AE308E0382046648D0E
02159918D562F4CDE1E11CEED3F7C823BDD1FF20C533A485B3C290FEECB6BFDF
FBC931D43F4A900FE2081725F4AE20FF5356642D5BEFFB60D9396AB2D1B33391
08E2D924FB26FC7F1A6123A48DB786D2ACFF0F2E068EA70ED2D5CCB9AF9913BB
C020A414A2F0FB3268047B4C03A37A680D1F806296BBF942428C3E113D563D72
EDA0CB54435883A32775F148EEA9BF993F806A2397BA520E686CAE8E9320DEF5
363899F97A97D808ECCA59FA67A4D1A70A60DBB15E19968D66162AB9D9C84578
5D28DE4EAD3AF23E8EB270FF2FC011EB0C215B1A4D101A5A0C0601758F644CA8
B09B5C3E973F69EF733DADAFC1AC17B04381C6754327FA7C65AEAC1A283E9C62
398C839ED8D858AD4C773175799B685B89D4019AFF86941CF1293E86EE719C9B
AB6263470C7009C3933A1F2F6A0146C2E6E1EF0FCFB020C550D427DC5C10A9CA
AA27622B68D229B9799A0B305A8603313B60DC539448AB99A98D5FA7ADAC4F65
7DBDF2BDCB627DD11950FF09DBA2E131A6EF79D80A26C51614CCC4AB67979B0C
F0045080F87A9B60494D9DF409F39494094E3EFAA95DA51765E9D8BDAC9197EC
CAB982E8034AFB57D98F2183D4F20BE4AD2B1EFFA534C96D9D052F54FEAFBC7B
2A746E4218E4B55FDE2F6D290EAF0ACBEBA134D8BB2EAD945FC6ABCF3EA543FE
5983C285A9CFDBC8C751B86B95FE1EBF06596558931FFB12A4C3A7810CBF87C4
8ADEE1B533012F19D1C9877BF3DBFBB850C398377A8B3C455A69D4A92801AF9E
1B1675357FAD583F6C69AAC18E0B596A9BB3489FBF70088277714B8AE8CA8C2B
E32602B4601EE0735D3640FF126847D225B597E0D475F3E0D2745E7850BE983F
AA6763CD28EFB3A46FFB3CFE695C790554CAE65CB5F398F0236CE827CB5650C6
2A76156675563FB00E5697688998D4B8689B5638004350A9746BCE1DD559799C
E0C88FF6F0EBFAC5812B592DCDF62F0757714D8229EE8532CB46D1634B10586B
FDC4160A2CA9859EC27ECE19E1358B2B2C8B629042C2E1AE0093867B0BDD9A99
964B982FC858089BAED969370631951C63F5E8A46FD026260D0CBA59B887199F
E93EED64937051CB94AB66DD06DEE352DEA74E73FCB8F100CAF08189B0DD10EA
298634FAF0C84761F3C7F23CA7363FFDBF3675ABF732FB41F87A63AAFFE0C8B7
CC60EDD2F27E9517F6DBF60DD648A764BF8EE9AAAFC3D114E7F327220DC33023
6F7133F753DEF42679A33AAC164A287A8C8C869C63FBD9A64ADB26D3860C990B
C66B80CC6B6DC55AFD31DF25C4AD8F261CFEBF43839A6AD14BF085FBF50AF7CF
2D153881B994A7A8C7FF2C9C833186227C6499DC4E6DE17A43D33DB3BE958098
A8104CEAD0D71412F8FABE5A24DE1560CB949D746B5C36C5D939B928EFDA00F2
1BDC87DD2D8DE1BBD7947B768A7372777089C2097D945A59E873F5171ADB1735
7090B4EF152C9D78866901235C66B0375A4E531CCE1A08A969106DD02255A768
9A824B564B699D4851872CBC01CEDDC7F3DF3CD45EAC63D7202E2F23518545A7
5568CC03DB3212A67260183E68C226060B9050AA15C6DCB58968CEF1F260444E
08EA8214CD4647D62D216E540277D26CC6774931C01450286FC19405DB16C42D
1F5F66E7F073AF0A0121DFBF5BC78580A7EF7997467C254D74D509224661B31A
4D4B3B7961171D67F8F6B26EBA8AB37B5C35DEBE0B74D8F82F752A1A312D0D84
E28780CBE9D4A1D835A14099E4323F4CE4286256FC3CEB9858A66B3C230271F9
76E4B30C88D7C77FB1097C6B36D6495916FD69B176E7FD7D0F7ABD580D75F587
3A6F37020AF88EF7E6D9C645D44A0AA142797E0F0C40C15909BA02E8127B1D64
67EEB6AAA1ABDB65179B3FAB830E1EAA31421C2A09E63B1CFD5A36371B6412AC
24A92A1AB79CE6900DA269053810EFD1F2E214177FB453CF64D338449D1D3D09
D27EA8C1CDE68F1C2CD728BC91B8AC9D06065D2034DDAE9C7B38F502A82A0D35
F24B66D798E3F9EAC13ADF5D5249AC0BC2B157F86990D94315BA18B69E270685
2A4462771ECB67CE68364F3E1CA6A7BEB5222C987AC7DCFA8D483678AD5C4E2D
22AA6B98967E17EE5036C140839AE349A5475C5C9E0D053CC075B0FBD115BE7E
BCE87041A6941BCDACDC9B6F6DAB891308EB4C176C8CE43E52DF6A2E0EA70A77
CDC358C603522ADBE50737CE43B15C41C7B914737AA5CEA6BD1810DB78052DCD
299EEB942953F047F34B52267155E95953271FAB39DABF80A1484208B9929EE3
13FE952C7F4F0223847A7DBBB831670BE0D25F08CF057ECDBAD28147DAC67EB8
75748BAE25E19781D04D8911F60949C075630D5E29912CD7E6362E528ACF0CFC
65ACCB6CDFCBAD9EA901794AB36126A199A07F3ED39236CAFD866D00AD8F5E7C
5933ADBE7A11B64CADBCB461444D6D9A1149B1BE963A3237C7A488381A17E6CA
39E2976CA3496814414270F4A67574C6667EB5AE7B82A804AB2C81845DE64C38
7F3AE3EA8386A9CB5709CBB64CBCA8EDBFB3CC9869F5BEFFCB86768D0C654D71
C18FB63259A4C4A297E4782B903778E542C88E9D4947056FD098329687C00C86
67F7081059E86F1570ED25CEE324888E67253AD7CB7C01BC6EFD70E0215C50EE
42A111EA4B21D0ABDA55D4CB47440014F30DA7BCEA6B5C566F541B1E1B892391
CD54702D07F21F9592EB7D34C1B0143C36A80501889C78D309DB3B4824692E85
E9320C26306F91514E727B42F60131BC8969A7E52BFC97C3C1CC59ED40A9743F
501A409B9A722856880AB8B91455D050ACE2F9B63125F8B561998935167338AB
DBF7E8DDAFFFC3D0003ED1EDBBA5CCFFD4B7A508F64FF002C8332CB1E5505E76
45A7CA00305B894723028E0529C6B747E58310BBA39C620E54AA2EF2BFE3E57F
50DDE010BDC88BF5E6DE01C9241A4DABD19E66502FB01BB3684D274B6896EA3F
C50822D2774A09769DAF0833020CA53922C211444D40AAC9076F311828EFCB01
B35A95D0E929461A4A0166B3AE0676D8AEF0BB53B8EEFB121487E9963A653812
307AF69D6E5D7E7164A60BC32326C2D36742C0D71D21C63AA4DECD103F7F64C2
1C8767DFAB7E5677415F55FF32E4308FE3DBB21287CC4D31BBC3C5C605452A1D
9522D16A67574E77F8D3064DD668D016CD47C8D086A4C9BA264829CBB9E92525
C767B37870CB666228744DB62F32588C5AA6C3B5DA9A4C3089716621AE996B40
79044466CCDBEF218D8076AF0FD88887EB7830EBB7FB142EE14E7C12BD59A0BF
E1974AB182380E87F7E8D7398211D0CE805938270FBCA1DA121558A0472CE205
9E67A7C91DFA1C229A50C63CD9D72D53B1A87CF380435A15AD28BA530A5D13AD
9A644A43B423E96D2AC2122D1D8A14A05A7C11D863108632262688A24D58FCF7
D2A7A4BD11A9B7CFD1D4DAE8D4EA877B0BA1A8159F603E3F469FE2227D126A9A
A1FD2CEDAC61D2F7EB862C14E4621145D1DDDA771C4C62524502A70F54477BD8
396788F263DC28EF80899B289B7E88A9EB85AF349EDC6A255BE6483A3AA13B3E
CEE040DA280902D3F5DAF29A414277AD9424C2D2E6D6116E98615F14C511C130
5254C561A20205E725588F3CBF187360F7F1D3AC68AB44EC29A28E43DDFECF13
1E27A82FC1B8BBE36315E1F7BA2F5910268E28689F546805A26884C73258346B
52A6AD094338F09076A091CA69B1ACA5AA995EDCA2CD092343AB066F94EE078C
9CD251103E5FB8E75BF46534F3DBA32600AA098B44C0A422D25FD07EAD975D4C
14CBDAF50FCF70AB808FB5463133418C76C371F9FADA0222F423CE6C53D90433
C03F373B8956556A2AC81C1A18951C5C6177C72DE1210BFE3CE7DEE4C16D48C9
152A95B64ECEE72BF30706C80B42BB37178508EB5EB02F088194A2CCE325B1A5
1E10221B4EF82D270EF712C30399977105411118B4EBAF5DB938AECA1124060D
8D138F01FB473186853430A9F37D9872B22CD19A54B1F50F3D1EE06AAD0F27B6
C1C8B4B4E3351331C2D9C47410ED2697A503FB81679302FC17CBB29E0D180FDD
DBAF9A48E56A74D60853BAB5DBE02A8BA9131C32F184D85826A92BE2022BD824
4C9BEB865CE8401D402A1CFF4BC2289BD9A92213DC88840B711A7715E9D9E149
F53992C309D1BEE3F274BF58ACD16CDDB671CC59BECBB168638F0E0F606AAA8D
875999977885322AB14709B114E69C18A4627E744BECC2EA71A69249599F8C26
F69E2D99A27ED6066C1CAC655F9F6ED169B247CB072CB86448B838E5F4BF11C9
99CEB4AE4FEA7D3E180BD315E4286694FDE992ED1F7BE8316914A615B1FD4252
DB7DDDFE905D12D27A134D7C593D143D7837A95DAFA72A42A9D9139B1E72CF58
F4108232204FBDBE07D595C3006B827A9C8CCEA8069244A38457DE103E9EC460
D9107041271455B72A85632A026657004F381DDB0CCD7467539084DE16A75F72
5249C5FD6F1BC5C9F060FDD409D102EEEB3D8C73DE2FD7079BBDD02D7D2AA247
6912EE77B51202C78C21B79185FBE3AB429A390F704020F6451A3AB3360EA116
954E26706951083D41E3F085AAAC800498BC2BF8959A36FDEA98281415E7DA73
656282F803FD0FD072922BF552DFF83B4D7FCB6B90032C7525782E09A03D5CD1
5EFBA77B41FC16C3177564942DC9C7611D8B7AE1DAC3FCC5BDE950CF20C4B37C
CB8A8C5A008A32F15108703D989CE25B786719D01DB7CC8620D6B9047537F31B
714BD3245FA5EECA9FB0EBFED4BCCF3638857C2579165365CE813308459124AA
A0F24B5460FC138E2CDE49CBA47F93F020167831BBDE88E26D8426DE2E6DA1BA
EE63A1E3F87544939AF6FD30E404EB92AB6C124C6E74A4B71A4701E2F5B81555
A1BB8588D57CABD63E5D229BA782B0EFFE319005BD50369EE4F4A98A7636C91C
AE97E27F293F9315774960A9DC05D5DCA2396254A58595169F62F8DA9F8B7927
A0FF6E86BFB92C1C80BE60297A381217DDA94199B1CC2BB00119E84A52CC9F0A
F4660F165A9A5C879D8BEAAA63FD2483F5CBB78BC6F40369C5F48EAD5AFC6FF9
68D406842D2936AA445D88D9659B81A19316C8F36DE90FEE2608DD4697032547
319B133E1E463844DCFA63F19F274224E5B8258C20C0B885A0FA2EDDD3DE4B87
831478DDB5AEFB307B02F808E98535D4E4CAFD4530BE5F5F4C3E2E67F28CF8FC
F53DA3B8E145B11A4EA0E002D8B94CDAABCBD06BC5AE967CE8E90B9389E04268
EE0BC911109CFB66E485F4704BE20D08D0B0530E068F7B870523E55EB4024CAC
C4C3E2614ECA10F7AD02099116A9DADE083E3F9DB165052A9165904415F4F0FB
0A73385B69B2CE289F636613EDBBCB76E7AB960B128A6F9652DDF4B52E308977
DCF28660B49354C81505260B0F6133974F0312ACD1609D331584F4D73612927E
44788E9FFD27A201DC55A691805C8DFBA2792D675D181E87162282496265C79B
AA10D954D727C9E8FAE7CD4DDA10A7D4537991A02B0E469F3DAA3BD08863AC01
28C9A2C7BDA35775E88F59408F3BFD2D46127A9F28344B7897B3BF7D386F4CA2
1A742159411F189D77F70AF8035CAED04FAAA2A1AB8D397BDE0422E93356F66F
3E0C68F451BE4ACD610F5168D37EC1526473202307CF6BBA70F1EE3B214DD50C
822AA0CB04DC4AEE2189D97DE4897284B2FFF9E55067DA7B5D710F55FAA87C52
9C7BFF81260B15A63BC3E17E2DA671A7FA88861132DD06C773EBAA882D140713
65962770A4E5A0DA7690BA2BFA67306C1B7747742C9D8FC5AFE25D4376EAAB16
63E71A29422785E5C6CB72DCE26360F8C516421D047C73780C5498BE05C2603D
3DAA504A8AB57806ADAB5D6091D32AAF7C4CEE18E2964C4F9BB885AA73D74774
8C9A62A9194AE3561565750777FD273B43F5D38C95E999ECCAB5206DD43CD82F
0E2D841594E5273F811DF89E4C04F181EB76AADCA656ECDCA457139FB56E55FD
D1C3C40F2D73FDC16FA2416306B4188C744A8D4DACF0D423EDF685777B46D286
CEEFBB71E5D3DA4CE5191F2F66604F3E89DDB5D524CA1F82DF40219887411B82
F764EB74F73AE6FBABC43231C46D1A52F55E4DF018DB23CF2E2CBE89AB455183
0E7875BD973FA6399E1620F048179613974A6A88CCB12751B0C2205BEC937003
750C28B4035146B444F666F667171AE6CCFD60855DDB589AE1777398B5D226CD
A12CC2BB6652E588303B61537BCE65F6B52FD36C48EEDAD07A3A2B6FA885AAA4
E7ACDC45159B2058768439A72174B570E3021B5AEE89066FF0CC6F3FBE3D4CFD
E5FD04949CA4481064E004A3744F9457EBE45093FDADFC88114A232CCBBD0411
532BF22520359D9F687B12C6DCFE31A057D5E654CA386C0EA16980D034DB911D
B4B707B18254FE58C5519A49FE3F512EE5DFE704472273802A08EC2EC642214C
A81A3D5313EAD3B796674DAC86469D16FD84A69EEA7E8A94D60F4B70B38CCBA9
C814E9232C534C22578B9D3D61074B0545A03180C50C083561258D6D47897D54
7A1C57AACB9041A2CC40368E0C4E04B27578350422D3B9826AC93FF1DCF87E8B
90E309AA59328B3659F5596F7B6D5B379B2549D1DF62BEA154D914DFBFAEBF80
73CB873541BBC59EE6DA1CA17FEB0B2F3D4279B1B3D790239A6536D744776019
717307B5D10B03E29008C2031EE8D50571F948225DE8A5CA469E1AF498ECE59F
06B8E9371DC76AC26FB2F989001A3A76A8763B955D095998FC32F1B94EA067D0
ADAB1492482AE665466C26B01B6A62AA46DB60D4A219AFAB33B88A3BB336E66A
207158C7B17216675BB4DDBDBBA7791334F0218382A4324B37CD5286F714A0FE
5070BD5E2BF0DDDEB22584DBBFFB94D3D65737A15B42800D1418A51602E6F378
5E47302D3B69FB8E7AC777968C2A73EDA7D20FAB7C0C88178908B18F947C7A11
FF2745D24FF95ED60FCD5ECAC89E798E88403E4AD00FA318585CC301A2C6E1EC
6F00CB6CC73AB6DC63ACF462936F9E7DF41DE354A31B29B309ECECB7BA572242
1E932D154D55EFD1DB6A2CDEA3F2BB6DE5FAF333ADF3E9F90AD387B4B0FD47E0
C0AB3B33A5ACCD97F35446351A9EFBC16026865BB05E8304A43319C534A05416
79E8A5A2F90845289B7BF2FB4CD712677E5A7F9BCD69017D475F2587C753AA59
0B863CA630F2BF14277DB909173387ABF6543684D7D4BEC4C668847EEDCF5E5E
EA747C568FBB4138831B5B9556826B7786F35D21E3BEDB38FFAE47BA1C81F3E8
772D2B7EFB4F596092A166D728755CA591BCC2FEEC5907086772F41EADA80652
E36E0D93029616F055E04578C22DE6FFF8AC8683DDF4580D22566FB9A363B59D
A4CD177D8FDCB843CB31FDAE894D198C21B48CC3FB3694115119A133FB42FE25
9D8FC95D95E6CE54236FFEAE5928DC93A486B1CDADE393852C6A15ABC9FED82D
A1A579BD248C4FA1C360B204280720BA7BCE323503283F56573F55B55970080C
2A5D9A3CE7002E22FCF75B6FCBC5277473DFC6CD4A8089506CDF552FC402EF86
22CCBB3CC1853EA1F50B172314034D91E4FD49DC326F5A9C5A9F1B9CE52D5314
D2F547A80D50E003AA068D08BCEEF649E230AFB5AA3DEDF2BD9A676DCB45C0E7
1FE888ABD2D720E8B3967B1DE6AE8CED75D1791158384A425BC0D86B96CBF560
70D9DC8F07C81A6ABEBD18A4936F611EF5072DC05FE3798E173EC7EF08128D1A
EA856A2AC91CEAF1D6BBD320A2694ECCF05588F1259640B713B26FF039975BC3
198BDCAB60D341B8E89EBDEB56C5B784DAD9270DC35A2343DED09795FB925832
1FDA2151D1ADE8BE45326B37B18A18D62293EEA06B9346CB10E18139179D554E
37677269D24A0A27FE35A100568A9CE974035B19F0D0B7DBB615538F6A6DEC1A
0AFE371CC1F33591F2A8D4376C9071B53B1097246B39DDFEAFDE9EBA81C10B54
4F3D79C383ABB00199A7652941F23377663B2C0C00BD61534B424FD64C102401
1DF0C50B821AF5E81F9E7F09F0525F71179DA8D2B2F2B285FE8EB1DD227C0CEC
21842289CF2A52934FB7D14DD7860AB9549911E49227E40F8F0598442FD75CF3
4B570E1521AB47AFEB1F67D3CAA5E0F1B44EC9D75FA25CBC23932D467D0E8B37
CAE9F0F63F371F6ACF0D409EDC6B95BE3D09B73038FF3FC22BBED689D365B516
AC3FE908459AC0CD603C10ADF784DD3A3FB0FBCE474841AC15650DC7195BFB76
49800B9EF89383C06A6EFEF0123B8688D9CAA7C708B01D5706B34221382F55B9
E1476863F048D80E560EE4B94DC04711A3E81F653AABA4BB005FCBB025B3E4CC
7DE3682E6CF11666723D30FC48E2B2AE43AAFC603A9C9DFFD33C324CA05B4900
1A305E675EB776A214C6249E78E8AC30A77C1F54859DA408B1F12A4CB81B9B88
C65664D694670C09560BB3CA20EAAF6713702720B3509C0BCF66220B3B26F28A
D2AF9FC945C42AF9CD130DE81EB21422BF6CC3246B51FFC3B2349D760714
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC8B64E3DB194682A30A31E9D23ADA7D5C0259E2410A72
D9504CAEF21597965D669100E95B8C450A3845A54352DFA15984693F8721BE6B
C8436111546A70C5B35A2390E5D3C43E8295CF922FF601D611725D0D5D9EB2DE
CAE11F3A66BA22F94DE028A8861FBCE564DCF89B36A5F1C621F0088A5E41311E
9B82067883EDC8BCDDDFCB6A87C2BCF37B79B1F65339265C3BDC27CD99AC7D74
8CF26DF4B25B62F3A47B378A341378AB1E9AAA88112469298B36645A69B98423
DDA04A18DF5410EEECE859A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7686B3B
2D3EFDA6667CFD49D2238D55D45C48100D47604525BA0852326DE98A17CA12A5
67CE98C02760C521F44824D1B8EA2E10C8D15A57F5E7884B1F63ED9B541446E2
14AE6FDA6F0EB66522C36B257335EE0539B9E15D0BF27D8D2083E799A8BF81B4
D1FC7CBC756CA4ABE99BE732D6518A5254C42DE6FFF8AC8683DD62ED727126F2
36C790583AFA3E58651B2FA8827ABE229BA994FB4A0185E38559023F4168EDA7
27CF0DFC3ABE725F0FE01EBAF6D0E7CAA8B511A630E8148A51C1394C7C321156
CF52EE7F3710F645DF1A4A5582FE6A701C083B7540B54FBE689D3EEE6EDEE8E8
C6F72242CB222238B955EB40FC8206E642813B01CAE8B6D3F79EFA12E39E03B9
888375E11BBA1D0821C1D40D4C232D2A2621514057156FEB1709FD747E0D67A8
42B20050A93D6DB8B2411DCE3FDA5F4B4698CBE32466DCF2665897C5FE2E1554
509B77F925832DD59E613B99092C8C0BF372AC59957A0BE4818891252E1C8954
CE34A28A00466BD986761AD3E2EF247FFE69935BFF8D957C1F0D9832BD2B1F97
858C8260E73B513FD7315A2ED9A64ECE748AC1F0E99EB86F6B50EF7B0ED561B2
3B0917E33911EC3791B19D36916F36273C57C627D220E97FE72BFEAF9FF4D774
B61D18FBE087FB36A2BBE9D1293CA10C7C29B1D1F2E214177FB453C94631C603
AB653316994DE423123662D2F640D99729ED3E53B9A042CBD9DE2B19F5F89F17
A00CB10996932B036BCC08CCB25B2BADFDB659F305315BE273E5D021E7401ED9
78AD4C9E1AEC73F39A94EF9F26DBD3FE2A3BE5F7F9BF42EA170FF2EA98485424
B855AAFFFD138E85FD6770BE16471D811569F9AE4A101D1CE220C014805AA562
591C3969760019C54EDE008DB2C2F95F943BFD0868FBCAFC4DE907FFCD365F3C
D9235704B9D57ECD3B26C607EFA14CF65A22F5837D99A0013C13CC7FE20FBBC2
97B1935A3A5DE94E8681FC6842809C0DEC70B59DE1A9AEE59B1B62112D05D8F6
B68CEFC24B5423271FE1164A738F1B67120F9EA4B1714F78512D6F1E5BD5698F
B2BA240974DB978FB3C97DE5A6A3BB1459685F96E6EBA11A6FC1414DFD0E9066
6C29ECE42DE48A84A79F230AA9C602691CF790EB99F5FBA8E1FF8ACE3BDEB589
90269176A8A789EAE744D80392ACBCA46A6BADA4D94FCF0DB12B8BE269EAEC1B
DB6C1942B469D58F7A10B24D35D565B1DF4C9ECAAE5959BCB2A406F4DA9969EC
F88C95E18C90FC990FBEE1D9DAC4920DEB863CFCD75A6D2CFFF48F0EA132179B
5CDCDB8013B4E8898F4AA6BA2D62100B6AD02F561A5627AD987E3A80E4A7361C
702A8D79E07D6C5493E884C224A12A7147033F91371F827CF41845BE0BF81D33
68B783A38A8CFC0FE65D6B47BFFF512D8FF7A70A37E55BC647D7D906AFBA68C1
A69B5A341BB0FA79CF03D4E94FD0ABBAC5F726C0211AA7623246144AAA273D22
B830BEF02DB4D96260375927C7F8C553BD5A1A4932815AAC2DBC452A2F272AC5
8C8922A04C62CE37D702831328E68BFC0F8FBC6B272DC77716F28581D49CCF87
3388B8918908938970807FBF218E9D6FBD73D96E1DF5D884C525C8DC907BD32F
CFF75CAA51EC71D6943A4D0390560ECAF6AB7CD65AA53D6253DA7523347219FA
D48419ACDD59719E89F283070031D36B2183D523030509C43B681D646479753D
5CD694E390F42E2D69F3F634E04DF5BB144537CC2183F55A69169BD805DD39B6
E2BF1A95E421880E5016F457D900D0936D8F349F59C8C2A4BA3EAB6FB86ACAD4
6EC63EF289087BA976AAB6F67BC7E36A6528C4D4BE9D1EDBB96C5DFD094BF09F
3C91FE33C8166123E6C3A6C7112CEA3A447C36CF04A8E77124FD74148EC73F77
7A325CDC037BA2E33F6226CFACC9C718D0B95CC97DB30EDA41BF930EC7D04FFB
7AADA6FD53E9C5576FC7C748A906284B48382B3530B9F9375C78F9A6686400C3
8CC4D925FFA2855AF9FFECE7A48840B1BCDA9D828349AE189A5D96AB7778D174
FCB08CEFEAF28FFFB86705B938C1155A1615972CC4AB5942301D5AEE8281C4E3
22949AE903FE76215DE170A74D8D6A48DEB28F43E9ACB855517E844A1B5A7209
3A107839B2308BB754E582321BC0131404B1AB6858D550566A3BC056EAD089BC
A8B340E5FB10C1E0FEEC760C685F880246D3BA278BB8CAC2DB7C4CB7139C6DF6
D914768B8D29AF0D172E0475FE4AD5B4DA6C9247869EEF444AAA9B36F50331DE
4E81ED8945FAFA5F2A467E7F4CD708F00B75556EF0C8269DC00FE24E7C7F60F8
962C07E3B749338C9C0394B53B7475B01C9819370DEAE7A39691522F97812A0E
BA7290DE48BCBAE91B594543FA9F8339F4D6140D236543365FF9E434386F74EB
6935106A05E6E9E3D3D793686101542A0830AC0A30485332B4FFA6B4E3938AD4
83D5220B927C24B8586281FCFC00D8EC1116D388A51E652706D4EC442E2B5539
94F41E42702F9EF619F70CDB2F49522CBCB0F4AA111ECB4B8F846841CB6FEF4E
4284922E64B7E3CE23F461953934BDAD383230C1A0BB254D9F9228562E7BE6E8
8B01DA7664B2B8E1CDF6EF3D85C08F701D454BB273DE1019833E60C44EAD9415
64D86DE05B5E8202CBE741ACED199FD4EDA0E55E998C650000E52F4D890AADEC
91F50A0DF8088C32FFFC286FFCB6E65A98667C506C3E961090EC3BE8CA966ACE
24102FFB95BDD7E867E286F02313C432D2F97E204826B4470A1AEEBE0F394636
C9CF4CA29912AF2688A29B4E3F022433CC44C43D1B9E3D4B6876084A9E68F8F1
7DD27E449835ABDFADBD67F166935F2D79859E6B0E65DB060A0FD7D606EF70FC
C35C58298252D79D0494E92938
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC660D7704664695A83680221C6397E36FED57827D0CEC45CCE9134E1
20F85C107CE5E670014BCD3D09417B18667B975BF873F4BEA9022072655ECB43
9ACF13725A79EF90AD4FB0073FF142CFAF4290F2BEFCDF56CE9AD3AB8669A691
21B16C33CD949DC6E4C614B2D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86B
243368F8CA936A6B93DE729493EDC6FFEE039CDB833C0CA3B0223A63BA100BB2
B4714AB955DA07C374F097906ACD908F1A8355BD40273AB986F80E6021E31427
AEF512224950615DA2039D4EB3B18C87BC21D80345EDB06493E9849967F12E63
19295F104EFA71C12917DFE9B08B5473DD51A322ADB72FBD8794B3F51A1EA076
A789F59B3D595DD347079EA1554A4608FE9440AAC9F04CC93440E1A8B0ACC1DC
ADB778837360339F16EBBF5AC7571B0778C0E9D25358DA06B20DDF35F40C2314
035F52C165A49120D5332A136461B27E1D641B91CA52CB6583FA4C6F64BD28EC
6F839F95D74E2FACD9500D776DBF675838C2E27A9A1C75D9786FB52F7B15A017
61AF688C996E2561756B8F923AE34B82BCFDE51213AA578A8B93C301A831AE89
3172B7D2FF24745F8972DF419022F6B4D7310D075029554F2E31FD6843FB2454
1DC60BB39BB060ED6495AE98F6798010F76FBF63E31324B0F048C2F099F9085F
C2395C8F5A89348809EE005D206688D0DC863AE9D671BBAA034E8C32025F984E
69BF65497EDD146516938637D1DDF0F7255864D2C4C8834BE9EC41F48EE50AF6
797489236880A9CBC9A305ECC299FBD9A74AC0CD41EFED2D2CC5A3137F136AE6
76E52680371D036D1801406A3A5009F8AB7638A1926BCA7B7C3F049E3E5B235D
984FA314E9F4555AA5F99198A39BE62AF7CFBAB277B8A66C8413AF546739AB46
30018BE647C048D9204778226D706C55505A06D4EF01D9FECD5C795DAA94A1AC
AB3F519B354DC0198F2957A103CB2F0D1F55AA122628853277D0FA20345C143E
B8F2A289EA703C24663DD7C2033892919E4E65630EE03681A62471A1C035932B
6545FA5D6F2A04D26899399FF91F4FB98EF6E228ADD22D093FF7C07247CE5236
EB13B7F1E8A15AB9B0819C35691AAC73AACADC529A2B37845CADC5D1C00E2592
7E8523A776A608FC51751104BB96EAF8314E2322C457EC61961583124324CC49
1AA909ADDCD2D038C3174BB48F0E846DF3CEFCE0977B68BBEF34E03365FDF696
30AF010FCC79FE5120FF3149465E612A7AEEC2446ACE741C2D86A04B426E4778
6802DE7FE88E84A77CD3AE846ECF2693940F20F5176D8D1B6DB30D6740156644
17F53C060AEC69C2987EB7A9DAB2125D445153AFD3F9CA5169205C09A3ABA72E
EED76A0453B2D8B3EF3EA7CD9E665C4CB2B3CDA28A0E667685A662BF38551B50
DF4F12EE6C72352170B4FAB1037FB0997B367483D2C8C0D44E6111CEE2EF4370
AC4CD5D68004F8B2012B1A0C9C20040175C45A00D690BD3B098CCE53DF66B332
030F66A40C5371D8A6507D35F092FA58B287777FEDAAE750B107CCC7C39AE7C2
72FB9E9857356C4ECEDFCAAE74590B3DD208A9754D04BE163B9E964F6762BDF2
BD0ACE10B99E156A67CAD0A3DEBA0D947D0AA1F03FCAAAFB247078719DB68E22
8E6AC9E51AF57A7B2F22749A53E22583C0AE5B3E7506A8D328199ECE23C1F65F
EB3C45554F66C8FBFC1F3930B708E9E73D9E9F69FC7147D6F806458851F3D994
762E9918C422D1763BE8FDED2C51369E0DEA4E821067927EC46753645F880BD1
38BCBADAAA94EF14407ACFF4FF975E04E30045D6FBA477667651D8C7368B0E9E
CE176300D5B23326DB319B1509B693779181F685FFAC786ABEAB809427D3C924
672E418A8F273187F24F9D209D78E0A2FD3FA71C28EDFC1577DA8EC167B3ABEA
718BF706ED33155383EF6400CDE98179A9C3D3166C39DCB64337D7A141529B10
FDAF9ECC35E387DF38E4B5DC807AD09ADAD44A2DBB0299AAB0CC3944DEB241F1
FD9A5FBEE5B1F2620B814FA2A9F442DAF6C658893DFBF0DB8BEA767880B7064D
05AE383EF05A00A57078A6C9289FBFAB908E868942C117CFA7CBFE350C693B23
476C3C77F0D21406751D2DE44887FC5DF0B7AB1BC8DCE622DC3FABD85B0F740A
5A8CCC2B509E9D70AA5F53D932C71EA76AC75EE6B68937852005B46123D78C29
6F0A156E288433A91BF564EF22B8245F102B7DFCE33759312AB0A03416D0DF55
1593B3392E75FD9BEA16B3FD22EBFB9D13E7D7EB59D752001FC8B8E3B1270C1B
EB1C4042BBA0D34125774CAC70D8FE9B08C9033A1E95F5F8A1717DBBA7AAA1EA
7285589A7279F88F053DF725F2FA768CD4958CD594AFF8C59F9CD25752F93232
509E529407836CC3924FBFBBD4E1840734A905BA1C18590A9C8CA124D1175381
EDFE59BD0E925B6C047D2DFF37B269FAFD98CB727609ABC99E6E71CC653620D0
AE2009A796D322E5D0E429760DB81F141C4A04D69475D7C8CEE1255CCB36DDAC
9B974D3E6419A08312787E2EC3CD4C3CD3A40DEB1D00F3908FEC9886FA4A595C
2D52F322CC455711C0147CB76F4723BB02264F53B538C9FB9AA802F3002A29CE
268FE9D75A7FC59B051C1E3CC2370D8619DB10C162B96E490193208D7CE9CF07
FB21F94E9C9CC7BD30C73E7F151C5C6505DECBAAD271193FADB03DB2896A8BB1
13136337F88C41B0FEEE9CDA294EA156D467EE3C32114DA6F3F143C053205C11
12B13FCB4FF9EB8BF565CFC6665360F71EF764906D8CFD014548F0B46C30A3AA
503426744E5DAB6A37F59EFE3DC5CB054BFFF87BC43B7676E7928DFFDB5EC610
6C4A16750AF5A4EB59A67192BCA9ED8B4D70ACD4EFFD55C4155D982C04D14C4C
65A43095F7F0BF8E2E5795683F27D76B524B55C3949FF9CB12318E20B680A50E
700B9A05B54469B3619B40515553DB3F71F0EA2621939E55E20F3BB6BE64443E
B7D0F6C3883D195661CA3A1BBAEA7BCB495AAC552BF394D17A439067508563C8
54365205930E9C220DE636E9F3805AD71A5A170D54DEDA2F6264B06F63B85DAE
DD018E78872329E0EEEC1189F5A43D6413657F892218927A24A122ADD6648E66
832FF08A61191F1C11943BB76D8067392C83790FA2AB3BBA5C4BD760F4CCC302
8052B8104183F60E95590CFBD7570E6AB5CC9A8C5FB1A7DCD7325C911804E9F3
3AC5E0DF808A05E048FB7194097660500901B25812F7A25307535F51BE342A53
8EBBBC8D37EFD7DDCB0F249FF96E2C1310B081DF4307E85352CB995B47A47124
22DFEF01EA631F6E5651D3E39C9D5C62A298B8BE48AAF79E7C22E2D14BDE28BC
9BC00AF48A56ABD34136479D929405FE67FE24FDF2F058B67B666B84BC164518
713BBBD20E129189FB1A1759AAD40887F9AD1CDFD668BCF9D9CA52DB6FEE5398
9E24C52331D6B04D84EC272A85F97D2358B1DC13AE97ED8364B15A2B0A06DB37
A8BE36083562CA8E19101904A1EFA36A8A1388C4604675EA7384F3398E49404A
FCE19D3DF5B1AFB1D8DCB2B603A43666989974543B3403BE45A1F0F7ABD4D966
424FADB66F4669192BE430DE2E62E8CC3B57281C8D4157305A78A5E7DF61F9DC
5015F89B10FAE836087D8EE5CBB80AB303F36D640C1DEC81363028DD8D0E318B
B9E71EA6161CE4DC9F8CD54F808DA6ACB6A4AEE9A30FF6A358CFDF673FF3FE84
582EE5136518F8303B4D9438C2D541657DC358F6305450C4A820C873273A5F71
61E4834077E659B690A784535F5279BBEE58F4C8C48A4186630DA766AE8A57D6
50A226E068F16140D25A157FFCA9F2D5BFD0073C9671F7F951F199375ED665BD
B747BC6C90A3CD9FB434F4D12484E03E14C9CDD86089832B845586E3E2EC973F
74E00D5AD68EEE1DCC321413D420CDFB43CD103ED7A1B9C2E885C88F882E29F7
57EB94BED0241E39A771747F79A79D9BFE1996455987BDDE60E2A8E037290EAC
AB5FC3D90C30A01449D0F3EFD8492161A8DCE38246532ACA149B0F4009A17BF5
74811A9434CA6A267733EEE15CDA5D0507DB02D763673DBB31417A8AFA280C85
38B7329C429D7E0ED44D117E1C942F56B51E615267D9FFC191A743C8C0A3C145
44F068343D3ECC39B6820E33508182C98CA4C5C968742603F4FDB0B0B6D446B2
9F4A0504DC2B57040AD12975FBC71D755F8F7DD4F5E299604685484B9C3FF649
1BBF618C94177E99B34D229F4027E09BFE74EAC2E140433640B24F4ABE14345D
6A3A253C967BD35447301E5BDC0E125346571C3AC8F053A09AB668003CE910EF
7A23CD0BE17CCE683723926F9624113DBCB3C5E324369FA11EA56347CA6E0E7D
F6ED26F73890B2533C4974A8D534C082BB16ECD75C6A6CAF0F8F4ACBE558F94A
8BDF4C69967730EFA86C446424056B30D3C57FE8AD1D722E59AC047A5A82A2A9
463279CFFDCB820EB0DD10EA298634FAF6F8FCB40998E518680AAD2CD473A10E
BA3DF8E102DB08E293810E3E8A6F2D62624F8FE4885E026B5748C0D34DB2FA8E
DB02B3CDA24BE5B94F4D4C0FAB79CD0D3E7F8A3EE29028680D64EA62CEF40A7A
7AEB4FA346EC850785BDECE90BDE98DA5E4D2BC78ED4EBA41C83C1D5DA8109D6
FC03723FCCBDA11C598DE6337C0A9CD1BD0F941499F86EFEBFA63628520A97B4
8285DA87CED8A9520D667D03F62E89E0F168D4D12950FA0B17EBE7E676C5E99F
06D77DDCDBCAF6751D42E294852AAF5F35B78CD823562BF79467296FE55A893A
5F9B7B37894A990DDF7B3CEA7951795C05CC6D5D32BDB0B4906AF58FC1F3B370
9533196ABFC771853ADF3E330105C9C8CAB2A3714E6215D181C838BFEC3F9566
DE3A93DF6FCCEB1D7BC8BDF10C700038FDB23B78F3BB8BC8902ACAC258D53D1A
83C0538DF2F8252B6B963B85BB230DFA66759918E9E614F8FE024A7C59EC9ED0
4BD079834D26E0B1D4064C3A65B38641C2ADE78C30BFC3C5B148357697C53A35
978D6AC89C5D7D115D20015326BBB45A5A17EFCCFA99FD6AC36D436B89F0FFF5
7ADC4D7D461ECBABF34B6E26BE56E8D48A62D3F86B78875F838DCF959C9E2D7E
1F76B0F9D703994024A3214877736FEBD350E44E4DAB4E5800D626CC47D247CC
610668FF164EFBF2FAB31D388240F8F3732DDFE80B8F4A66179756C6668E1376
5FC066433EC7E4474E192590A04E1FB8508297F560345357A0F72CD410E0959D
3CADDF1CC54C45BA2FEE00D39D360B4D2F92C01428AC9051C9F5AA344BCA6CEC
10B498FDA1C80AE684E56726F52F4A49A022808893BADF86E50CAB101F8D4793
C4204D7D421367224D757CECF55439389AEB8BA48A087BEA2DFF55CF5E3DE25A
C0B17B4AD32EAF1F0487C30CAE8A871B9627A789E268385070E4DF8861D7B532
48D9F280C9CD217D448994D1EC57E3F5FB843AA2943C05C912B7B60343A7DC7A
3F6F1AEA9D830E9CA62EF42340AE1622BE6C34C82424E1627E053532BDB76D91
C2946D5B9FD8DECF9B210557E0784EE5F62E52AFB293A32F6702E0FF3BAFA642
8355378CA104CC80E43493B4D5F379DF239265A61C11462A034CC5D3CECB178D
8DFE4356AB5F2F38D70FA75397E8127FD3D47DC8BE70B9B88D345869D96C57CA
FCFA148BE140BCCDE6A73F9C77520327CCB89B0EB07AE1EC07FD93D19F9C0A68
9D0F12AC4899921DCF8300B818383FE550B3DF19AD8F3B661CAB3534A86E51C4
73E3F9CE236C2399BAA8B34E00DC8C8BF53AB40E03103A5A199CFC46CA3D96BE
9DF371F190F346F585A48F89006ADDE2E437DCADA997D6EEDB7B501ECC18F0A7
8587E1259B1205482DDB69B0316D4CB3BC7F8DAEBE2F8813556E1640562B8A6F
F2A3744834E4185C378E7C7961340E398551177A7D13B2A9214A71929CC407E4
49AAE706D13F6186F857B2FB2F403BEBCFEEA0DCE180C8257A3ACC1122CE497D
5BF45F01304932926A8C93E809536E9087CCA809106A42A594173594198EF071
7532E4799F0DCF5D2FAB1DBBA602BEDD835FE3DB4B01FE7AF62D56594BD31845
DD8EF67D1D8897036CFE2129B1301EE091D9F7A4D345114235F4BA28952FAD55
6095CF37E19AAED47B12F78EE97E435588B749C8DD0ADCA1D9E4E8FD28F0F639
B67D7840AFC0480B3860EAEF1168B0E0658B71C1442E7BF4C1C343358685BC27
2C6D1BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C6F6B1B9928FA04BEC5E4D
82B404A97DC2B00BCFCAEA60201AD4F7F545B7276291BC6899D20210CC12012D
47C1ED6274669C7D9712D975674948A0C76CEBDC6D0CEE931053E70BDF616FA0
10BE479ECA5B7529BAE86B985D6840BA43A80B1A5D2EC97518BF399B9F49747F
FD9611C86AA0F7EBBED6B1E29CDB9D6E7913C796CAC09567214488B8CCB27219
72CF98BF642434F3F4FE164145DB59021EB5125A9D357C79A3D909D7B929533F
B0065C5DD17075585EA332D296305594792AE5A8C234987FE1A8FF45975BE538
FBD81B239C4EA1BE3EC5EA325EF6E6D70EE4928E54DFEA06E49A5D6A472ED847
2C2387DB5D251F74A635E519763C2B61D2B1EDB8672751D8A658C45E07B9558E
776E94EC0991B31B7EA6DE0B2CE2BB881BC3306E363E443C146F13D4D1A83CC3
3FEFA3D9E13FD38FAE1FD869366B61D37AD7EE8733C84A112B6D4E11ABFAF291
03ABF419D2F80488457D132ADE26F6A94321C8CEA614A5A206295152CE0A04D8
9CBED323D3C90009A4366F34513C6FDB2A0232D1BAF93166E0E7FE69E0FD82A0
4759D4629C8D2F0D26C8EFA56382B2C86A4D7C8034C3539349E3AD8C20DFA31B
DA0437225E8EA1FC5CA55634C938CBAC138CDA0BA04A36A3BD6DFED9BC3104B7
D31460E3FA77DE5FE1C1663F92A5534030BEB136E2DED01B58B8684AA0C7CDDF
0B5E098F847FDDA0D4DC48817A0848201DDD7E184B5E5C7CE7E75A8F76138050
64BA22FE6411CFF2DF507FB4E464BD4F2D5163CADE45AAAE02FF57B1628C6CC9
A9FE8F0CFFC3BBFFEBF0F70C0EDDA56ADFF26319F220874C13F2D0DB4DB1569D
2046591B5C19A84304529FDB1612F916D7D98F158635436B1C389EF0664B0A44
A96214F93C68C7B70266EDA218C6D2606A4B760A6F7DD7BAD6C8CF1D70B9CA43
81DA2CCE50261937EE955EA33BEC1D91D932FEA8A790C218DD6FCF2714606275
B9A0427A15A585A40D5265A4CB711011332AAE28B102A5D59D6E77D53634C137
AE6A6E83FC0D04CA55D141B265C400F5C62E9FC8B9E84BF464065CC9706434B1
2135389AEB8BA48A087BEA2DFF55CF5E3DE25AC0B17B492E44AAF2ED1D90FDF9
2AC9F25075CE7D76366B5B28A9B796D8C00B3D93C7BE15407485744D54252131
4697AD43A6B2C2B1A9AFA9C9DE442876D10CE2FFEB527E7F7C60E5B530D6C697
7137319321BFDB6A526B7AEA07EB63D7C6FCB3860E9ACAEC0BF95204DBF32AFA
9DB2C058F1178CCA7D1FC1A124D3C9624699D76D7351A4A78FC2B50A29339E29
8FB3B1EB9C376E87B346CC0210DCE05E32586ADD335E29F1931A004EB68BF109
30ADD30B07362F8961C7109103FBDF1B4DA7CE2B7194624D33B42527A698713E
E13DCF5C2E244DC85556F666C7ED81894089B7B5786DA2E4F9E5FA2905FB2678
4F9F27A3F3F2264497390272520647FA07B7B6A0D06F3C5A9923AA703FDE1672
DD0098589449C6B0FF73A672307B352E141233CD8E24B5C7022A2FBC90C5B6C0
745AF40B30A241B262FD6574985AC9DD10D3BB974C0C92B89BF728B6BD03C5A9
2B4905F6875890DAF09D18C3EB567019261C42C5D4291C539F3C5AB05E8304A4
3319C58B569F751361768EF815CE84DB64E25ECE20563520ED678F0BFD966D7C
9FA16D70C161DA00FB8EE982EF8B90CB80EDDA85A8D52C7F2A3613D06CFB69AB
1E13576BDC446872C97CBE03C44D9B4FB4754BD1677B9620CC6631A369797125
990858F9945BCE886F5949790A7E4B850B6B8E31EC18B7321E63AF98BC01C1E3
50E571D93F96910C91BDEE18E063B395D97C91C31D2A05C70B6412C4E43703D8
741E79D8D32184C4B1580EC98C8BE4F24D8FE9F50D35EC6ECEFD8DE5BFE29AA0
8A9A1D1C8A385E019C753DEAC82F89ED671BAA88D51C570AF572D60B480B94D5
7A95A639491CC16868FEE89ED512EDD4915A183A8FBFC7A56EA6C8926B4E53BF
077361DE9BF2D7E5C0A53D49E72D722663BD36B291302D9CF74B61013834256B
83DEE05DA579E57801A43BD6BCB6D746FB9D570DF4000845409915796611B1C7
B596DBB8AF64EC15A553C2BBCBC65EF99088AC7FB69444911B4B4D6C2C0D8987
87A43C1B428B896A4A7608EA78E1DD6F6FE07328946228E1675EC90CFC1B9449
A066060746C0A627E366A2FD240E5FE5C96CC80C0A6CE44601E065840E1F2B3E
694AD870304557D3C48E601BB4E92AF0B9183F250A60A7950B3939DD770977D6
7DF63DE42402DA190130A7712BE3B76ED36626C93E57F28E0BD7E996BACCB156
86CDC206BAEEF6E6430D27A7FDA22C80CE90879E1206F6D82500B4E4476AE727
7F89C5ECA1C7C2FF5103A6B0AAF8F5CBE80FA5025BEA2FCDF13767A1D3A0AF7B
CC25BFCEA010E023A2FB117C46C16ABE5811DD097EB0065B1E01ABF5E2D8428D
248B1110C3F9D7700B650D73C9ECAFD5B2E4AE38F78A5667BE79F9D2A7100D9A
915D2A8FE9427BFA46A65C5D87E83220EAB248FB3A28CB446A04F520699BF5B2
05854F9BF1F07A7DB49C5C9C8318DF97FB33C789FE4605247509EC6933699860
2318DE152D2F8833A11E71944E3E9F458653B6CAB0D0806B4665EC054B927270
13B6AF798D3CD75D3AE1EF31347807DFAEB7D1FE2901AD5E7B28EA439764E8DA
B83C34AC97C66C21F4CE4812FA0F007C1282094AD74FC5B11F5E5D7A41A3DD1C
ED1B040870B95BAE598CAF55FC4DE699B0C84C35A5F80594811FDCAFB9194A7D
EC8C27637894C238949AA8D43875080E51A9730FBB4A831220892D97DA2F0E5B
B1BDD5ABD40D988B018FD6F823FFB96A311FFB2A6A1E302218F9F363EE874499
1618FDF77EC8C0418D82F545A05180502B25155B73D6D1C2BFB27F6EE195F1A8
3EFA65830A93B7C90420FF4B8CB5C7A52F764BCF5800CAAF2AD0A2765EE6EDD8
40B30C6900A50044A2E997DB689CE85F6312A6A94F0B83CA6737F0D3B10BF7FE
4019611CC67279792C59C002037F1277BE2B697EAE7593248EAD1C7ADD5928EA
3DECC5CF8E6F37FB40B6A9DF429A374CF27923C6A7159CCBF80C8E2A68719BAE
108F344E5F0CF9DB294762537A84DE04CAE35FB75FD346019D2B86EB21FC2BC6
F585B621FC39F4AEABF0B9CEA3DF2351DCA1E6900929E498D27F5EBCE0ED5D05
9989302773F0C3AF78609DFD6173CB81DBA26D9D9788AFC8089C4BC9E39F564B
0C6FB7EABC7BAE61A5064AF1C6964AD6F4FAEE9F0B6F4A1C9C8FCDA78622A909
0BB18CEE5DD843B5FE4096F520222A20FE01B30797377DE3FFCEFE1D9D56A166
0DAE90B755958197A33515554DBA51AA3FB99908B46B10CB5A9D710435404EF3
8E6AD0D94A6A5714BFCB508BCE7F93E57797F9BAC5DD14EF2A0995C6807B6805
524A6D24289FF6CE2EB50AF4A6D97B81228C82C0AFEB9A325D7CE7BF9AD7FC50
473C90844B8E10D3A5157E4115CE3B6A3BB452417F1D87BCF5CA2607591955B7
8C0CD5DECDD2FAF1925C3BE1C67CDF9F6DF98026BBBE228675A553F3A56FF81A
199C054093645C49B289A9B088BD9EC3B6580F2817D63DE90FD71BE117CAF688
1D65F8CB127FF9339190CD044880D04A8267DD7EB69563510C525D05E195960D
0EAEFB7710500448A943C10F8DECD8B6327AE6B4CFD16C32B42CF90832707A5D
4EF9391026D75CE7A11CA281E861BB0E2F6D904A58B665033E87DFAB3DCAAFFA
291CFAACD7F664D76B5EDF28D5BF0F0F1E39055E86180C7D70697B73BFADEFD9
217D4D3FFD95F32C14424A2B5AFE307C7807A80188CD08268B6A21389CCFDC5F
C3AF1E9DE106E3CC7AF6A891276A0C03309EBD39951A398883FC919A711E8E89
1B390DA501C5BB001FF37B292301F1244DBF5A2C79B9B3E16F87533F049824D9
D5180E5434E8B574E6A7E1DD4765E17E10FE9F30998217113414AF854A8EC0F2
711376F839596193BA5C06EFAEA6313E62E70EC9BEF8C4560FE3970552E683E3
9F8464076AD8A441BFF7B95FF8DB71E45FC6F68A86B7BC067186BCDC0A56EB2F
2BE12BB974DDE288CC6626651ED6388A1C711D875943A84DBBC24B6C21FC0F2E
650741BC21A839C49703BC1322D1F2C581CA109B35B4AEB6B72F30468065D1A2
ABF1AD34324CF7A8A0827C831C4D5256069855635B43A7FCBFCD73E962211985
FE9635A0F5DC4890183DD07B316260DAE1B6879252F32B95405D856397C843B2
B7FA307EB591FC6D3141F0E0CA3B9A1D56DABD05371F9479BFA4CAEC5CBAAE91
9A96CA4FABA813FDA935FA86C092E2DF9B35F469AA173A877B819434E200FFF0
DD0E0604021508FD5108026F32992316A2DEC84AAFBD92F033B33EF2BB8A4796
B06628CE4104BCD93691942E935C838E2CD3A397BE2BFB00FA1300BEEB57CFF2
2C7CBA28D69C7E54DAB585AC15A6226F39A572823382D6DBF390F03121A932BF
A4FA7A27594243F63B1C1767A866F1F9B4B27B64CB3D441086661C6910F350B8
EF85203E4DAB28B15D18FE1EA4974E0456421C2B6EE7B37D178BD49174E5E639
B50D8F4EEE871F76F19BC2ECC2D462741B0BA00C6561DF4B4C68577BD9B3E3EF
62F7F7E3780CF0258A92F433D8A3E7CDB2231B52C9221A8534A1618604CD2A31
7F0B1BB0722BB927BC8D50429B985F23EBA0C907B6CCB4A57AC0CEA9F5A84F8A
5E38A4D87BD8AEE6DF7CBE80059C2A83B08C6965A839169101F88B511FF838CA
D0FD11B8AF2A2A4F5EC3278AA98A3DF4D154176673A003851DE425A8AF6BA29E
7F2AE36932B1C53EA335483605847F13D5093441987F3E7CCADBEE9CAC7E77D7
9BA760EF4C53A3C983853DE670289510D008B8DF64C3DA9E1191B06F159BBBE9
A134C4E997DA7C363799EB647602502B8190281BA5F0A910B24E8199ACE69C54
25B0C3490B489EAE7998EAB74FCB7A42F775680FF6AA0A18E74DC148E58116C9
0C7B21C4B7BC7CD495156D56EC5DA36213685C51D23EE8A56B93EE9F94B5A63D
96B1F47E96AE5F10E07D9A75E9F4AB10B7E46728AD90E833F397246EA4C44A12
EF33A54D213792EE370423883BA857C54F7B3EBC20098C6212DFAA3FC588543E
6F5CCBC5780936829A15DE3B4654B265AA138ECB8438407EBEA5A06488A7CB70
74776AC36B43FF510D096D3B6F5E02523C7F049D006AE59A0E81FF681A519EBA
F2FABE7C94EDB0AA8E432CC2BDE47A570DB69A34C2BF825F9C769CD611F343C7
93DEDEFB0A2B19553ABC505DB05D6BC44417E8CB8E2472EF2624C23DF65B80C3
7859F507F74E231EFCBDD4AFB595E8C3F0E8CAE46CDB1370E08C365BCAA589B9
FB46E97AB020DD38D71B7B8E5D2DD56FAD7828E5E203F328AD955AB433987B22
9799A32B89E3A4939C152ACE83E912CB7AD280F09997BB393D7C8537A5FCD099
50C59D0B79467CED736D9EE1FC6C3E293409C469920A5E60BE73C36611705DF0
DE7678022AA09EF714E4BFE0D7A1352D7D4274677B103477A4358A1E737ABB84
A750A16A4999D5A59AEB5FAE6FA51EA84B59E4E75BA397998E519B70C3670D8B
0B89C65A9A6D43D8D3E30A63243E9F7DBE231C3DE32B82A38A9BADE0C5376A9F
2841845CB62FDF58F84CEF83450F3CF96A0D4DF87B91E7273975069C907199D3
6165A282C7C6E855002F63492E44D2391EBD6625AEEDB22442CCEB84038E9AFF
58CA2C6701C4D3E39979022FEFF095DA482A4F411FA0372E799AF99DEB62F1FB
386855F555961A4762CA20F5E88C40FD32DCD9EEEE0F6BD53770FBEAED00D16C
C461AE68D568CDA22B8B3BD3FFD900F59825D71AECD7C1A376D9BD1234205A95
8E9E890BAE1B6B240F0D1924A965039011AD4C5F22986EA0FC188FA30CB08809
DD2962E4BA66F7844A77BAEC87EF5053D888D6C101B6CA5C72A2775BC54B78E2
3B62E3A2AE32BC724EC6D503D71AD216D45E95601049B03FFAD238726AEAFA20
3ACF95F2332E12BBEEF13F0EA2444B154323E8F7B43A98AE3455D635B444547D
F7D9B7F9EA1DD690571689F7233406B83B0EFEAA6C8CE3B066A7C6A2626635CD
202D4990759495D7EEBD7A02113AC7415799BB341C0177F10D97338072AA5346
D7DD91901DB0114BC982205B9F1A4F8D649C4C11BCB49DE285E7CCA8EA2BBD32
1844409FC95378BCE06C3130FC48E2B2AE43AA5CD63FAF844F5300D7F8C2B189
78C77A5680FD5D8DE8B605ED3013A69E65112D9622D15D0FFA4E22B5A0CB4FC8
2C4BB848D07EDE0C17E872BCEA52B0C480AA4A7B456EED703C27AECEDCFF88EE
5634B80411532BF22520355476023178043584B70A2E09AB101F8D4793C4204D
7D421367224D757CECF551A4B4AB740391B20163EEB3225514A76AC74C34163D
2ACEF07D9A4A08F4BA36665A80C7DA15AA557C55E72734A14DD9CAFA0CAEAF0A
927D5C7DDCE03DCCB229C446797A10740BA3FFE21D9099979EBD752E36A8EA33
F54122C0CCB305D9C4587AC495570DF9C4F05525921AFF53DD00ACCAA577FDD4
A0C3CB556245C965074A8DD4E351567A7F3CCFE73E0B0F42BEB8396D03C6ABD1
8F70784AFB3DFE4D510A8181C171816540E61E5A2E2947957AA9A455CB563256
509346128EBAAF7D11ABA3DC2932E9D0E618DC6AE09073B38E8EC302C923C417
F577823C0210444A3BF399C2264540350C9C4105F867E2AA3F10C3D701CEACAF
315B8E1DEF18FEA368F63489F8963D45A7BAED4705357152E49CFEA53498B4A8
F79C7AA87B0624F57F342FDBF35F8E1228EC06BE52C6F7398CB420DEC6450507
C708FB774FBD896843C02A163DEAC4B6BA52A7CDDAF33464AE6602C376F6D2C9
A086DBADB887242739F5D9AFAC745E74FB9CA02ADED464E0654164876E63E8E3
BB26C15E177259F34C2EADE01F1DC12B1E324F1710B201EF41370FED9E0F297D
698CCA8215BA271A098F840FEB47AB01C8274C24B6B3A684DDB55A94C6BE29E4
90A13030BB1629720E21956A2E0336865660580AD6FAA5A61B3F913009C2A49F
CA5BB62E5E51E56CA70B16425B3026D0124EC73730744A2343B9BEB38B8A2106
AA74CAC58AF617D2BCF947E22EA79D2C8F57868E2AAB61A3C1D0EF8A29D1201C
63D91450E7B5F44AEF32087A030D933A92BCF3A0D6EE20AEBA224E4A6BA0FE95
811EF858DC7CB8C5D6B8CA4A70F9961A02B350A76F697E285BFA294497416BB6
C02A43B80A127E623F3ECC64BCBB149C68A54B6478F80B793FA88EE3DB7788FB
B28D6A6235824DDCA7B64001AF33637D19547C8D92E24C1190A50E8DCED4C0D5
D628B75223D15695B6ED06E7FB334F4F2A5BEB4C0C0ACBFD7888703C8C503CAC
8E41F41ECEAC32BD3F62499AEC10A41FFF797EE8CB26F5F87D22BC1766A64775
822EA092DCF193A0DC0E0A7B0B3A647E93E5B3AFBDD4A92580D70DB13A90B8B3
A886423D10A76D674334C47FB98B2E35B9789FA83E1FDAFA7FF188F74F086260
93D94BFE63C234573DAA11A489B87A3C6A208E9CB0B30F7AC129D6B56890F59F
F4143ED2E3259641AF153D7D485F93428B420854DE15AF291ED675A634C15119
3D29AA6E0146CF1E546E58DACBBBB7F2564453044BC2FE71B260410D8C87B237
C1C5D37A94279D5EA776EE24A4CBB9A0A5E02FA37261E130910A5DE1AF58CAC3
F06DD1F83FA50A267B16645FFDB0B1EEC921620E668D20A9C04B43955D3835B3
BE1A74230C180CC48C0F9D6BE0607254667BC73D825FE456A79A38623745FC7B
C778B3765D421C91580B0E13869795A7234CF01F9C6D90FAE6D5EFF289A9B7D3
C911273AEB78CCE20956F1F48D71825B795DCE254E2426E99ED07FD2550CE2A9
6156EB5EE9F9A9A9955142873CB00E5697688998D4B8689B5638004350A9746B
CCB13A6836EE7A131C5F333881C1279247352449FF43736CA88FCD560B3DF5EE
5FFD826E4297FB433EF36C4D4ED56676ECAABAF1A0950A2B0B48CB4A468D6933
DDEDA10237EA2D1B94DAEE18FD20F24BBFB3A2C968EF269DA1EF5B4DD6544595
D1EA952901FDD537C1B1EF54E133B0243FA763B492483C51D41076C0FE99D988
D612DEBF78DAD539BF6423C688F32BFA5256F93585A43DFF3C144D3E8EECBC54
F126834654AD20853F11A6AB840852C69E9E628CBB9FDE2DD6A4C64592B79F51
1EC5A8780B2773D08FB7B54F4D085798E459B5F96B09DA6000AEA0E6DA6CF14A
515995310546AFED54748BAF73E59E91D2B4E32C7A4648B35B9C84FBE4B94E61
6C0BDDB44A1151E2CE00F03D75047ECE96EB36F6CADE7470118E6D7588C757E9
7326F94B7F4A00706240637B9CC0720467E68E2CC215D87FD88107643EC1A422
244B1F2D267E4CB947879BA7C1233055BAEFD7983E8B82C7DA405015C1A44F3B
015B1F6479DB81F669BC2ABB4462835ACEE028F14B6850CD4763C89CE51D484F
7E49765600A125D6DD423540BA1EE7744CD16AA40D8CA0ABAAF045B883582FD9
86BC20124BFC3C1F745325FF863E1B1DC4F69029EA6A156CB711D7ACF8513FB1
61FDCEDE6E8DEB1C6C2BDEC9E6EAD8ECDD1CB56A574738360B1A6C03DB434D9A
EC6AC60E61D08515818D4AA1FBAF363B899827711651101B499AC4E32985F328
2828E93178613843527E859F21169642966276EF69826C9576EF9D0671951505
993DFCEFAA29DBDB652A001B2D429D90F2A70FB18CAF8575273D16EBC3E8EADF
F1D7C22793E76FCC5C42CADBE15BD012DC48E382F3632023EB775FE7B11166F7
B7B6B183B2D5CBFEC8771840B2DCFEF2FF7909D06D055FA464D3C8B1E65888F8
7EB1F3140ED033D80A82CC481E2335EF7A6F704D04BF7DEAEFE0858F12228A07
5053F5AFE1DCDE46B4DC25FF6E3C48E033090080ED0C373530E0E008370CB892
0ED13AFB17A0942181244338E823D71E29A46E400DBA21B396477E9F1D0183F7
38B9226B65EEE60F33763564604A666D861BB9201F9C9CE9CB687E79AA6C64FA
697AC270B43B2CB2E642CE73AC607039A14DD033E4EC98637A5C4EADBAE0F96C
CCCEA4AE2D1F7A3371BA702DD8D6AE1355516609D7DCD078930F8F711408ED0E
541E8D4A4FAAD7397C4DA8C2AE04EB142AEA9C77C2C7B2486D61BED35C2AE041
07B03CE274EFE7CDF2F859A620AD918277F6EE607C91F92DD6CA0115BE9AAEC0
0A2276CC25F1BC533CDD1C0EDE053252B8CFC1B56618E527C2C18936E824CD03
968DEDEB34EBB98A6F8C570CA38433D2382CF9671AC06C4C7B4647131DFA9B23
17514FAD5008A7A850532C1197D3B0039DF582A397DA1B56ABB4C9478BF5CF36
8ED4D6481FA7CD620020089A9BB8700625883E55FD9A287B38091C6573D0993C
3E49ECED9B0651A8A701A73B784091E35AD15A3AC36068523CA518FAE9010047
9256F435AB0EE7F0D287A4584DB2F9E34B3492400B6C9F32FD48FE37991FA03A
B3240FE78B9CF007436A1DC9B67E4C3D7EE3767338D57E10254ED22992AD8839
5465E4422C06C712EFE42295F57BDB0DEAB91E32A451C5C92CDC549D0B3E493C
870C33938995C9609CA7D68631339CEFDDB322FD0B3D25692D2CE19B0A75A210
2905B8CCB2F61255AF45BDE940DC778196CDD3D3331A5FC98C0A152DAB9F8124
003F416EFE2B231140EE4E7B14727B086F27E43E6E3EA6EF0DE68E1B13AF6728
0B865E25B0FA38A6356EC5262F82A1057544490C256118B0867DA2ACFA39F9F6
EF1D81C607DDC246B12E9F3A9ADCFCF2099128D1C3565C6F5FC2D898DF5B697E
E1741043EB837C589B4CEFAC955BD04F4BCB9D5D11E2F2B792C0BC289B8FA24D
22A82C90A63566472F61D45CBEF2F835DDD975EF68B4705E1C75F856D7C269CC
124471831856CA6D1296CA1A89FA67E062AFE64E646C9133FB47262C6D41E1A9
3375E0C9D3121B1EC95AEA2B38EE56C49EC3850D88DBE34BE839D3F2F36EE306
95E04F615BC6D2991FD8CCC05A5F22FEFDB64E42B73A9B860C44D2960976543E
664CD26055E8F13843591A8845A97071A6C97A4FB2C2CA4E89F6003274118D0B
8D1E0D15375E059D8D3F20870038B6EA3C5E41A3E6E6EAE70E64E3D667B35592
E73C61A2DC1F13CD09369054DC569538E7018CE3F7F57BC58432C12DBA3C00BD
8BC794C012579857A80D32A6E6302E20A88B91EAC2D1F8961FBBD252327C8E26
761C1B4D7908FA753D99017FF1B66F3B97525E9BD2FACA5BAAAB67F93F52ECFA
BBD3F95B4051A81E40A3FC4F697AE17FD24CFD903B9E817416F296F47527940F
D9DF8F4BB5CEF32D35E4363FAE63AE641D2ABF3ED182CF840DA1FC7023487E06
7045ECF9A3B327E613AC58D511B94BE709FFFD268FBD1DE643C968B57B9782ED
CC5364530BFFACEB16F6C7ACB76A8137EDDA8204EECDC331F4D263D8C476B255
6B6F07D62495582C54F30377D907055650B89FDE7B84224DF5181457FA74721C
912156A3535953622D728091172A584DA586CFECA4F44AB3F0C5D40BA950FA92
BAE49BC996A26DA25B1F97D325E25D65F7C7CB00C09124376723EF984B8EF327
11F9C55E0B38221CBC0A897A65E6FA8ED43C1608D186382731247790E540295E
BDC301471B11EE490EB595EE031DC020A4A4B01695D2A12BAF043F22C34ED59E
641B30C4AEB214FDB8FB2B5595BA0B6B47B74732541A96105BE1A2257B4D7C74
F6EBE32208A0FE31ACF83033522871198AB3E954EDD88B5059BFBB42AECC8A91
B1E0C419DB3E99A2E08D6749F21CE313BD5A86E0AB094CAFCFD1AA6E87F70469
5C32C3FA6607A0D7DB09EB3FB56440DF99E6DC49E4D01F9286E11085D68EBF47
41D8D1ABFDDAE449FE68185327170B046B27F59EF674C89A0641CC2097EFFB9F
6D14FC983E99D27F9136D98989B4EBD8E11EA7311610B2BCE067F9D06DB1786B
C141BD6C0CF51784DA23C2D29311C4F82514DCF27C6B9050B9C956706DC814F0
D43DC49BC0FBC1630E2642E9485D844D20A41F60D01040DE059ED2E6E1BB593B
6F05070F1A6411EF3246672B5D2F3BD0D76E0827D6436D78D7CFDDCA6D227EBA
781DC50669164B54A35F5CD0E9282C38B7C8186A48128BFA4770B91AE7D909E6
047EAE2AEA2111F06336C394A67EB4705D5E99A4AF2560F992CE0AE4FA23E512
640BD887EB65D2F4C5B17E29867A327ACED1EA729FBBF3D9C2829B9FA5A21173
244E53DDD5593883DD53F4D15F2192995E2C860E6B1105D5F6F4A58949963E2B
E64816D23253BEAB706FC15FBF0910EAD2F24A0542DD70B262916BDF20D8889F
757EDA4707D802C7D84BBDA0B597F27D24CD973524A4441C68261DC400897B7D
2C0A4285D3DD6ACF0F1F7F0327F0AEFB4CBBE69715B1491A433897306CDAD972
101182A41616016A7C6A48F5A7B0DB520A27D96B1E7FD78689111BFA6B2D1015
854A402A914E293180E51F1800FFB0B1EA9845063F46A9EF1BEB33BADD69E874
0C589D604AE446538C40FE5F6D369CB0CEB58DDF0FFF4250D413CF8B039DFB90
FDA3924F75DEBB65B949D87043C4686B22B16B2F73C307D1F7291D237E059619
411DAF8A0287309BFA82444E5EE17335B0987843EB1546BA7FE32409951CADA9
34F8896AA60374662616C472A8514CA08866F5976301EBEF2ACB3D7E95C02838
D00FEFA67912F19EB02D56081A09EC5D78EB9234972668FDE225DC2121F2238F
227658A0D094B5E9177357F3EB28B569FBE1A8DBBF77D731FD01D58A0285C388
4DDC3B10C7A3C21CAE94280EF62EE6E93D7CA0F77422E3D54820416467F42FBF
40443A68BF486AFB3AFE2081EDF0E6362EA9F95EB9E16E2E215B43A727025E5B
23E9EDFD422C969BFBB8C47A0976B1BB2DA4456FD2FC56FCDBA6778B59FDDCE0
450B0831909DD3F0165312A265C46AE4F5DD66D3AFA1E29A7EBB7EB558D10C65
4377D7378E560FB1BB832442F57B8E558D08652D08C880D80B720697AB19DD4F
0763E4A2107F831AF680016FB4E04750D73999939FFC6CC505033BF71823905C
09AE12665B739A7948155571117E9A1DB66325654C5B6F54A2ADECD14A9759E5
3F63388B94EB55F0BA2492B9D1112B26F92F1866018978D5E83E9651AA343D4F
C6C6B06D7DB4B3BE25BD81F86F7CFD366BF9B140E1940E13D7443EFCEED61611
C852C4B8E53AD1E9C1EA0ABC02DF8661DB0F0E9413B8BB3882F0A78E8E2C82F9
6700D8E645B8C585491B21E9ECE18C44724039E6CA19DD2C823B48C21485F431
6042E951504D96BEFFDDD40C691F9C3093E6215CED2D0C8FD8D8DEB6F8A6222B
BC6AC2864C0C8D10A93430C7FE1452B42AEF735B2F76F0C4E33453AC3437FA2A
82CF794AFB0412D9BBBDF8E2E4FAF5139FF0B1ACD7C8DA3461EA6B27865DDA90
6119538A01F728E4ADFB2B9D470719FD1531C7354CA7A6CA55D8BDC4572A3411
D94F83A0C1018343C8058FBA8085FFA623E6D3B4CFF4CD3FCB4806AEDF47403B
A7FCD1B57B6C8C3E0553729B37E4FFFAD50B6163A2019F491D1C8BE038AD5122
C02C6CC8F43F477F7F7873C3B5DF4E1C330CA8B316F9568FB2486F1E6DDFDA63
C8291183A250BEE61B4C96BA6D5CA51482EF5AA4FA2E0CD2323F72FD4F6E0F55
95E5DEB7A1043916E947980B65F353C94E6609CBF4A5DC01D92B9F634FAFBA9B
BBEDD787515FD37F2C7F12F4747B6231059B0105E2CF146B4B33B485BB5F828B
FA085203E27ADE225B6350BE22787993D65D049EF120529D9ECC7B0E877BB179
65923D3CBC34E55CBD5C1260BDF5957BC940254FE54E1A4478177EE8D4C7C5F7
0063B436C5B0F17FCD985DF0C1557DC315AC891C390C8A1733C2DE844A1F915E
4CCCEEFD359AEE06232DA7EBC45D51B25D1A18AFED90B22075CA6D2D249929BA
4C2DED2BAA764A41DCB7D007C5EF81AFCC44A5C176DDF5EFF2C02F57FE5DDAEF
20AB9045B1E26FF20C75007F00EF200564FB5482E70985D6B740806F7C3B81F8
9504703150AD1F28A79FA307B89E1E7B299372BCEBC73F49B1FA3A488C0C84CD
D6DE5F9544248A73567AA211A690300EFDB3982710B7AD183A1AD8F204F38BC2
44363A93FB17E0A417E969B329786296835A5EA2E4FAFE11872FACCE79D99A1E
D0D08F2CB2D0A2BBEDE9F37166E5FA94AF78849536586CD367FA0929C3CC0C0F
0A424BAD2A76790BBBE4EE64F7842B26A9CC6A952B78BECCCA0D39C65A3BB884
C816B1F02653DF15DC9203F94BADCFE1625ED5D6A8B6D1EB654FB21317377E17
A3253E2854F1CD4BD5926DD014D949E334A2FDDD071A0D756B5C7B09B6B99C88
1ABBF836F8EC13A5A32A91CDD341E13F8291AD91F804E24C582927E6F48151E7
20E33CA846C5D2030BEC9B98B413F0629F86E2A6B742B1E842D5A02977664F8C
C7A4AFBB516DABB82503272023C7822BE402583EF361E9DB07026560DB5FC2C2
70C0F297A27F4C1A2438DC54226B03E4DEFB70112BE7F4212FB8E2A9BA7384DF
04E23562352D63B00CE64E574010172423BF5A5407F05E984FEAB4F519600668
E48BE0C7A590D6C817424EE5D003AAF94D5FA688675B55D40FA43C6D97741D9F
E3064D552622CD181FFCE8712B2D4723E484772E5CFFD6095B8A55BDAD410D13
310D332113ACDC8BE5129A3B450BDBD2FB69E0425E6B527C4E25D28CDE453EF7
A4E09EA7B3AEEB6A7BD9A6606F445444542B9E1FDD366E1A6CC35A648C243092
4E6AC90BC611F18FA7D4EAC0F9BBE80B59586DC34AE1D06D51FB674BF0AB80AF
539AA945ADCEB0AEA5C4120096F0216A62A4CCE62E5E2182AF7389EA7850B52C
9CF390791BF3F65C1031B1549089FC76A39DC6AA9575819DDF023FF06A5F3B1A
51AE4850C6FDD1BDF8AE7D390F878368BF418BFC665172859FA935BE54868785
66A3E5DF65F790B7D627679909F5CE6D50AFEEB876C38BC3BBD7FE5B14FE97B2
5FB1D768B1555C02A86D56618E1D8A6B7518A96876019ACAC528744FC9A898AD
1E71A915FB663A04001D43A504ABC776456B69DDCE7A24299A869222D13CFDF5
99DD43370E6F28DB5DE10921914E293180E51F1800FFB0B1EA9845063F46A9EF
1BE014D9AC89078910F3D70211659CDBCE05F0733AF96E310262118704F4C9DD
A1EEF4DFE780E86651D99C9B74B881FD0187ACD1D9A52D5C7DA6E229B27B32CF
C272B92AA3252C572AAAB15FEF7E934F5D0498C4BE4D042DB99364EA0415967E
4FD41CDD60D64DC19C0EA7292D2B3FE1939F417FEC9397F731D7E5A12044AC9E
D301EED9776A8C36DA99B2FA95F5D3ABB7C4C92A5A2348EAFC868D51193867E4
B1958950A7353511D9264AF323CDB6F5079C10E2B9661D9DEAC0F8D4CCD2D249
ECF4B2ABB172D0B1A0A417DDDCF6A2914626FD272505D63333A224D45FA1FFD9
5878D5D702C814032A83DCC64A592E9818986F390E4F048050E3FB3B79DC491B
D30E3554F65A2BDBE89B6F6BB32B219D9AD4632DBE33E0D0DDA4D02A93E18795
A8AA1D4994D871C6C16AE7EDC955695970C7A1BAF6614606243C6256300F7140
DE8F6897511B2022AE9612796DEB9138059A4C12D239DAB471B96F06D4DB2CC7
8FB024D8B8C93B14187852EC5ACF9FF715F820B4BBFDD5D2F1626083FB8EF288
D553C4BAA42EFF6873C3DF76B77B850D5496A83F008B1C42F6DEA94F85AE991C
1AFE483903A4919605795E6ECC5CA2E4C8B419499D3F6B356E3548C00DAB9B0B
AFFAC3A2018829EE2C58BF09D30DFEB19A02D18CA44689E5DFA540C04B567DF3
008C7C00ED5B17DE359DA187810E24CD8689252E8625B83749A64A7FFCF96007
AFA65AF4FB74F4125B49D7D326F49D00B17CD9434FCD4D15ACF07E35D06FCE28
DB743BC92B2EC376370FD355FA08C74EF580E7405ADA3E1BF030E67C7B8BCD80
3B4C9ED2CA50CEE663FEEF366F2F37CBA48E2A26DC6CE7C3F1CC174436AE6EA0
F77A40E2302CA4D386A4149D5533482274E277ABBE4B44F02B39F48375A7D75B
C37FEB2784C1A15D660626C2A716349E226FC5584B9F327F0EA6DE50EB01469B
77337F61CD97537B11B4E41440A0A7E993E1E4E942C23A3D3BAC2E91A9800BBD
842BEC8FC4A886B12C8E58A585FB7624F5E48CF6C7AB491C365040B9654679EE
7EBCAAF81EF4540E579EA9DB706183B075036DF7634B34983FEBFFFFBB746400
396AE8A2152C10AE95CBAAB2029DA4C8C10EE3B69B30BB0A3C07509CDA7CFE6A
CBD4AC8FCE2F795F67E70B86A48E33A986593A7611E89CF0F2A5D79632DA3D9C
903E9327FB8671DC9F1B6ECB2EC7EE483531E3DF9CF64734DFD97F007D9B4B8B
1E39C378B50A2E0882EF00262F821798E27E0F586CBF2D967E468B2E8E763415
D101BC3313EBD812D550227C0665E7B5096FF9653BCEB357931A1A0604930C96
B3945E84C8ECD8521DCE96F735B30DB9A5B0901EC307EDBFF4A6CD8CC2FA66CA
C34B13C6FB58FF45541CB32FF7D147CB0531155006E6551AF9FC1948C0DCAA97
3AE709EC464547A99CF0DF3D4D907DCD2F33CD855879F82CE706021F932030C4
7C0C4FE4C18EF980D67F16B316CBB53D6C3CB18E9B54DA68896917E6372D7271
75E6F5B1FCF13854D727AA74C1F595DD5C0D64D79210CD88475FFC804919E0EB
3FEB9F66AA416492AE025B1C8AFC1072F7FB0206DFC4ED61F2CD09BBEB1FA1FF
7EF8999DBA1B10FD88E772B05AC0D79474385118652EB37CB7021F80792262A4
D2F1FD293A514453D826F13E1E0B4599E2E7913B88A92FD455FE0C19E72FC8AE
9D835BE39DF765ADAAA523C72A60331DC8D5DCC3CBDA4D42D0F58C9235C9725E
2EEB3707F05325D83DBBB3C4E0D6821DD5AFBA6B442CA00F1E87E97919264CCC
1C4262F5C2F628094B4630F8C20D87FE8400FACF1F3ACAF9F8530FFB377CDEBC
816B9E8F767240D2852E8CDDEBAEDA05386BEACC3228335BB67811370645D5A3
8925706A4AA25C250C84A7ED5BECBDAE3D7C09AF01A444FB4A4CE136D9648BDE
5AF9F5E9E16FF072156903B461EAF91436944204694D39E05F5E2A12201A98D8
5FF009352714ABC69CBA4DF38A61022FDE5CE208FE6C5CB1BB04835DA892BF31
443C40E10CAE004DB631F105D77CDF18A2EDA5801DE620C8987AF2B45DB507FE
BF54EDE62CBD8098A4CB83CC7DBBD9E436A9BAB19555B4D0698254DB71B8DCFE
F9D428F015A5831A4B4CFB2F0B2C88DEFE123F1DF903023F409A2BB710CFAE6E
D037138B3294CD515DB323465DEA95A929C6729D5F13BAF38E3BAAA063840B26
EBF6A5D43602141A7059990C8285E8B30A95FE7E65D68DF8951796A6472848EE
89441E890CE5EF1EED2985EC52C26E5B8E62CCB91DDD6EBBBAED8A49B82FF79A
C6EB0B36E2F4794FF8D66FB74D7FBB23BC73D4E4E6B9C279210579B4BC35B218
8562794C805E66A8DBC8B1F0033CA699C2B75B54756B55154255165BF75291EF
6E74899AB3A9D824CE570B056A4D3EA6496A486815A6150C8063B5D2D0C03EFB
23D030149C5E04DC906ADA5253757383F401C518141E6BF170ED6C859CF2272E
5D4A4C20814370CD3B1ACEE58FAED43D1CE59A59631C5811D0CC79B74EF15450
A46FA6718115F2B5A39DA0BD218967AC5664A2D8FB1972ACB1C5B1B6CDE7CEF5
2C34D01AABC2082DBE1386640593B95313D9D68B5BC63B0760FA3F7B458FC48A
DC21D4E2615CC4E2615E35AB2086B8CC7FEF8384AEA8C22730F59BF85572E113
BC618D2B53E17A5F71350B9B0D612BE89EC25D5A081AB5EFFB1DEB38B224D4D3
ABCCDDC8DCC0BAC8B3BE0EE05598ADCCEA4347FD3DC952FE149189B6E60D973B
0468FD4F84E83950B76B1A05B4DC730083B881024449D162DDB5D13A00C702E7
F8EE4224A614C89B48E61FC357754093C51EBC67E1499C66E969C0D0EA36CB75
C377D3C5C7267BEFE151C52A60427176D702F0F03099264CE02983116E19A103
C3E9A071256151DA63F640FBC7033A2240FCCFA6434B7BF4BB22FFBF8E171B03
6311C1D845BA6097374DC5DA037D4C47FA90D75E9CC4761571952B421A4B18DE
71F20FCD1D73379643BCBC8CDBECB12CD6F738CD7508D0EAD76F7636182F7ED5
B36C3AD33E1B31038F25819C130B7BA3ABD76C8FEA5FB6D820FE9E6F5613F30B
43AB82895F7B7EEE007BC8E5D38E95145F61A7C3B33198A31AFE25C04CCB5966
FACA7A2304712943C5933D3FCBB4642200D1975E08E30921143CC3675F4641E4
249F5407670A26DB1F7F5D67C4D22790BCD0F1E86BEBDE2444913BE1977A0496
EECE4FF615602C603E1E10F449BF0BBB413EA850A2EDBFD395F2A6CF1E84500A
5FEE071444E379817760012E1331E9DAB047409E478B5DCA175A4DF80041603C
E71AD9F2AC7E8DB53B169D9EA23BBA591EB9678EBB5A676561BF61FABAB8309A
E123A3A49B325A11DF1406AF1D0AE60BC2939C038A308187A2352F692FB97A0D
D77737F84F944EE4F182641F0519824C58651C7387DDE6F1AB98E7230F6B7D02
91D44E80799482414DEF5E701BDC76E7B9700EBBB54DEAF0039BFCE1C38DB5DC
80892D9E1AD5D37B506B7A5FB67FC411147AE04917DD44438F4C166027A5BF3A
BFCE56BDEFFA096AAF54FF7460399F1F08F98DA9AD4E5800D626CC47D247CC61
0668FF164EFBF2FAB4C4625702ACC3F554170D1B22CE7818EB99A8E80923EC26
BC6447046EEF2AE810351B7FCD69EE2BF546967021213E151A3880A3C18EC450
3D3FA5A3962D1D49A675D64C78BB50EC8315FBADA2B158CB6CB378FD1C196321
BDC8E9BDA2CDF34246405E14AFEF21255A08232EFBD5D5F7506BFD050AF0DAF0
5646E193B5F15C9CAF3AF3BF89D94C253CDCE592272EF1DFDAA2DE6C0097EC1B
C552EBE9B4BEDDDDF27B0F036EAD39402546DB208EFC3CE2DA145B6B40DA1DF5
E91F7F793234A963F7F6C74C3424F132DB46B106ABEB773B257EF406499A2B12
B953D0AE1984D78EF2399E862A275059777CF86DBE59E8C4EA4B47A39D9D73EA
96FEF283FB92D646AC1CBBA7BDD35F637D616C7003024B08E526DA08204B0D7C
712C1367086F0E83C9A242C22593968B0DAB942959FF0302B3225CC885CFFC88
07635C426241260C2F67009817A28C281C3EBE5C2C46A6AC2854462F6ADC68A9
A8A77C343B645717155756D539A41B7390B6ABABBF735C312FEA9A1AC7289E4B
43B953D2EC568762DA60A4FA68C4A0C748338792955E0242EC975D2BEB7D8572
1119E48FCAC8ED6FC8001DB369C80928F84166B7AA46CDFEEF80ACA698BB223B
6648346DAB2D48777BA16BD348D0F6B533408F3D7332E7ECB95D1D16340FF23B
7E479C0408DEC3E57CF0E7EEB0C17900842424E029E0A8308B69DB7B8EE627BB
B167254177544C79DB93642FC00D8C290755E13784105DD74BBAD5754ADF5D30
272EED71E3442C0A00DD938476920CF67869A9DDF5A29D3ED296896A9318D430
B2342B9D3806FAF0FD8C3F73BE751B3AF523A60202B4062B5C8A4F3AF53C7267
8BB3062C6F329E2AAB888219F6137A5EAD65B433124BA3A88364143C714D8CBE
776E96125014FB2360FFDC5659ED885DDF1DAFEC73B8F3419AF9EFF1090AECA8
36F704056065B47372105F841A259EF699DB0CD08D81478BA57338AC077F86EB
925DFE31A012031F36D5F6099187724B0C43B840C2A15E2F739D73D4931E3263
E89A0CC83FB6A1F174B5E4EDAEF40876C1432B1DA965644F3D198B275ADBB494
2225BD45F6FE01CB6C10015841B66CD6BF4C70ABEF31529A024711AFF1FEB19B
20AC9A3E1BA1D49D691FD5CB212FF2983C3FFA0E9045AB023E047EAB436520AC
DBFCEED1A6D912D434767D7B0AB3C0ADDB95258164E37CC5DF24B185F4AA10B5
E5AFD0E0E955AB4DD42BB3E792310FD56056AB112633DC84FB7743B5F73E9DDF
AB2A86BB3061C215420F75A9D089C7BCDEC50559B82CA0CA1A902897E97404C3
9FAC60887421339F6D451A5408978EB82E999CB46D339DDD22B177D5471E90C0
4470EBCC83957A794662C9A3DE46CDD613700336F44B4F3452249DA094807D63
12F3E8F27DAA9C755B75CA93BE048CE142EA2BEB3B272FBD24A46D9F5365A783
EBD5BC945C595C9D3A18B094A39F0AC8535F07BA31C71CA5D158A149F937D919
B18E726B2F4740839E9FF40CDA511A96571999D1886E4B878A2B5D561F971760
33A7A3ABA468FA39B09057610A1DA0511605B28C540210C6A2007CA581759DB6
0F24B248874A723D1CAC0E6DD815CE279FB0B28D20F427FFA47CCB616448B0D9
4CBD7B81C9A48A5254BD7D6ABFD2D134056836F54284D6DB46220609FC811077
668B31180EC57FA02BD30F4FCE0D8B2F85DC1E77B04F2AB40055347AF1B94802
89790693FF5FC7197DD01B0793031FC9D38B8E7970871E4B60DA0BD17EB1DA25
6678EE073EE3098DC9CF8BBE54D707AADD85B68DDE13F0F9671B2E7E4B03C30F
D2970B441E28545320D2B0CBF0378ED83686DFCA1626461C5C09941BD5BC1CCA
19A6C6102ADD7121D240FBEC155F3C47F059986FFD8A921F94B67E7E100D6EC8
1280D8B96348FC96056D32692DD1F7BCB905A78FDFD2C31E91F4374CD9C3CE17
6DA4D7D31A9F6BE6F146D4A9DC78F419FAB7C9E01A77AEE7AA684866DE13145E
5DCF2DFD5965B0A9705BB5477E36F75B06C555D966E73FA7A1164CF197CECA72
4B484B5D7AB94E4C153F264048F377A11D08F846F08A13D93A61622899A6CDA1
B6BA77CF4525E91037F30CF61FFDD1C909CB4C01DD94075FE397D7BAF3405079
A9E9CE46CDFBB94251576B80EB8F69200D272C713BA3B617402C64C158B276E8
851C66234A9E6A165F30BFA407C9E2364C6DA654AA4124D577D774A217D4897A
261017122417B9E2DDDDCFD2BD85125DC5A043A45C0B9D3C86A9A6E5F5E41A10
4221C9323CDC0D03B79E4C0CD14763A75AD66BAA1D80F1562BA19D44A904C99B
2005FA7E0F038AECAF884491251E9099681293009DFDDBF03E92CB23984E4DA9
98482B242AF0DC5F1638F58F2C273B0F2CFE5680E84D77723B30955FE36C9083
10D2385140447CB399037A9BECEEF7029F9A94998C6CB80C88E3959676E966A4
53E4116229DDAB2A07CF8D93ADAEF2E7B0528A2E085DEB6115257B334B648E11
C3659B24D8FA804D52164DEA4F0FBC603600E77410A768936DBB1162F16ABBA5
0F261E01F6AC228154EC7DBB3A58840236BA90D553D86CF2DBDAF69D51D17FA7
017754C7B13E4890D453802BE679D5794B77C3751BE6F455B48BB452D8EAB1CE
63B736201D31916A5C032629C85724CC1B73E3AB241E4E95C8D8362BF803A242
DE01C8F3F2353809B5F2104922CC21BD94F2E43182DD8B9A3222D4F4BB9C4287
EC21452229867E085EB8B0A4B09E56B24538CEB6AA2DDDC988D12BD4E4ED00AF
01B1EA08868E70382CC9667A5A39F284563D53CA9D68D71932185E5FFFDB790D
3DB1ED94EC7FF74AE8A6F328D85831E2CA866E1C972347297172F627849C378D
B01F63F4F43574BD7D555403B83025FC259D4ABAD69050D64014F76FB4ED01DF
D581E9F3F68DC6F44D503C233895B9C85AD28A5736F611502AF427398B9E970A
A2DB33D9F091B0B0EAA507ACEAD905A7696816006C3A251D77979AEE51FB9DDB
F771ABF941E6D6D1EE9CE21AF6B0637AB23DD743CA17407312625239CDFD85C4
41C0D7A174C40F2366A899776629A24D8E120B61C9B1CFBE3C57C6A60222A5C6
ADF8C6FEB1CC3203CD0D1A78AA64AA9FF80D4AD28DBF9913982BF0255D585BAB
D246585FD44C7FFBD5B878504A44F08A5B9393873150FC6E903E8E0A2D4CB9CD
1CEE0FBECE6B754D45403C0CE7DB59931D705C7CDF634276519375C6900EED2C
97B53738B4B2ED56EBE617BEF17B9DF4F312C0BBABD916DFBBD382DA926E53CE
E7C94E6B1552C08F8296A65BC09DF9CF7AC51625202CDE53409BCECAE9005E5F
D960797BBC187FD33134CEDB86D1A5992304E472F0159B9B7DF58324AE6E3B63
9DDE323A6EEAFEA964B06E6B57D1460D9C3B07AEDF0C9286EC4D7E02795AFFD3
17B820A1D763C4968C1A61E3A5B420A712B256913E54484E04DD3C883396E0CD
2FBCBAC78714A00E89C93A74BB67C32FE86D15E6D7C8B374DD4AC964B2D7E543
0E49C7BE32883EADC961CA7434A5C61A9CDE6E8ACF4ACEE03F467E63F960DD0E
22F0A59146BDC23E27AE1BC097FE42EC61D30AF8E103F301AD9FF8FFCF4B8DD9
CE727EBFF153F6F37F321C91DA2EF7558D9851391D33786BD1F73EC877F7D5D7
BCFC054ACB7F1665F47D33F454316DDCAEDE93FE7FB1065F435BE8A39EB454D8
8F5BC45BA81DEEFDFAAA9FB441525882FC923BC3A9787F1F829DCF4B00A68B09
E25384B0C3A3A15EDC6C87355C5F7C8F822ECBE9DE9CE7F7DD4772C2C44C18B5
2E707CCB800762D6404B03FB878D974AD04A770977FBB2C31C4F8FF8BB1BDAC4
7BBF8FBE60B6F7491BCC79E2531E1715A18BF8400A029912F6012B974D2061E7
E1BDAAF50B9DA03EA41408D22117091EA58204F935EB454FC0099D03A9B6B8CD
3E98507BC1668D127A59D1C07943A5C720C4BE1B5AA54CA68CC9E05D7B24FADC
2B172D329D0064066026BA37428191B65B887F3881C8F1E9A6995EA8453C53CE
0A4A364E139A34EAB3F9CA9BDAD5A94060F0BA95840741EF31D4E6FCEFA01405
45252B0FC947B68384F8F409DFF33F625082C01F701C4B9B94F3AF25F8BFE1D0
A1AD4E24CB6247CA2187337E87C6ED75CEE589F3AB240F2F3B866D14E3164241
8A011C1376225E181621BA0243FB0E3B2973211DDF336F0FA910AF67B7E659EF
36E5687794CD8F7AF8845CF78D9CA922FBA2B75EEA70431B5F9B72384FE592A2
11B459FA2C1DA698F0893F995BE9716E416EB8F56C62848C851C1F71427642E2
F292EBC8C271410F92FB9813DCA00FD08F63E741DCB0F8AB4CB14661759CE768
F0C7C70BDD64D37B8CCA90860282F50FD1EB2568752BD6349801B6BC9FE69D56
0E0377BEA7B9EEECDFC90CE09EE454BC48DAF5B6800E4A7F712BA1E41F838FC7
6FD03847355716EC01053815E8EC4D277208E3B37B9CE3F1691D282B4ADB2E1F
D079F810F4654C656AF5BBAD22DDA42E5909A8F0811FE2B72E4B2313CBF733A1
70D72FA5F2ADCE7D0B046CA030510BCCE07CCF4C82B3A2EA7224A365CA552FF2
AA669CCEB9D33BB24FF75095947E2D0EFFA32E8786FD5DE76BDCEBA951B61B05
121B10CFE5637432699720C606C1BA4410F07C69BDA9E6FC71A067E58B1AB973
D053D8D31C04F8A8C4DAA4119F3DADF97334CD1A07B5C50ECE43C8B7AC80A351
8B84D1D49381E2A315DFC80EA4DFAD8CD823D24ED8131626ECF5D1DF4BC9EF99
33B453B04FB1DCF625A32AE5D392626D586BE983DAFE8D9B2F0B393A8C879129
C97290BB5EB49AC0C200FB38A64201CFE8286959FB14BAB6D2CE57FBEB97E07D
8B48F6C80204774F92CB392EEDE45E423B07810C7E8355C1CD3A01A21061670D
31F092EB8D34447761C34D131F928313783167A9DA37A65C27611DD65C671DF9
14514B488600B53F992CC97B2ED904B683659F2FCE20A9E7D22013BE1D1F16D5
D5F35215456B7FCFCBECE07D6C3D2246EBC69353B022422042A8A72D186C2B2E
A786BAAD70DF04E56E1B3097B046306663D6A4B25FBCD3380CDFF67C73161238
6A4C4892072FF10632B01D06AB41C2843A0E1F906747CB0F5CFECFB87D00C8DC
11B0C01C17EC5E49D90CAAF7A0B94495E7C80E1CE2F56E0E0A40D6389B73935D
E1495E55A9968707AB2D95EAE2C34E47546871038DF8D28CAD7E2D6B5D39A1CF
EA6005E0585371BBA512017BCA9AD3E6B3AB0CEC0ED284429CDBA51BE609AB5E
A0FB4C4BD9BEB274F26EADF93C6DBDB621DC190AED19DEEFB52EC0E80B8FA094
1240EFDB85F96BCE8023DF3517F72DE2C0CFF53F4822B3ED60BBA08F874D9ECF
4AEB538B4399D2564FEE3D5E668512E817F8E961542DE4E388804F6360B9278E
50D23323398D0394CC568623804F61CCB1AFD7BE00C6F41D84E4247CBE0D4682
649788E479426723C497BC374E61C32B496A86D5AA59C05B6BACD6F0E355CC88
9FD31818B497D91B5E1F159EB60B49085448E1F283D92EA88CB94616051FFF6D
BAD95FC79FB4F7F3F5F2F3A12BE886D9D9022750D607596A331997340846342B
EBAF8E9731750F82FFE45A9EEC232E5A1E7030B503AF15A79DF07D0EEA09F040
055E39DD8D00BBCC7BCE104C0EFEB8A15DC7802A111D96E6F17E2C4A4EC4C25D
5D7091809DC1FC7114491BAACE198ACD51B48CB850537E6788209D3113C1BAA3
48E9B90E23BF9E8C4545BC30F8AFF47D4927CCF5779C0D49053B372F507A2325
8B4A00740F471F88BE2D1B0219FCA01A65E1838FC545BD5605DE2BD05527321A
FB43CB3C35B63BFA95636839C62A6FC5604D6E0BA4EB5F659BACEE4D72C4515E
0F230187F9DC24CE05CDC7DAAC7F95263DDC4C19987B210CC7C7DC7E5C85059A
6AA1DB76303923E6D6BAD1324E4C80DEFDB1EDB01CE0BBDD9A9E2EA8A2D0125B
0346279A77523AC8037A020157768873342F876D10331E46307E613134E72B63
C10A367F7D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/FA - Funktional)
@start /Fa 241[470 14[{ enclmmathsy ReEncodeFont }1 885.568
/LMMathSymbols8-Regular rf /Fb 185[723 4[830 10[553 3[553
3[307 46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fc 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fd 155[484 100[{
 enclmmathit ReEncodeFont }1 885.568 /LMMathItalic8-Regular
rf /Fe 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Ff 242[1594
13[{ enclmmathsy ReEncodeFont }1 1594.02 /LMMathSymbols10-Regular
rf /Fg 198[470 3[470 3[470 5[732 43[{ enclmrm ReEncodeFont }4
885.568 /LMRoman8-Regular rf /Fh 173[959 82[{}1 1328.35
/MSBM10 rf /Fi 205[886 48[369 1033{ enclmmathsy ReEncodeFont }3
1328.35 /LMMathSymbols10-Regular rf /Fj 194[1012 9[650
650 650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }8
1328.35 /LMRoman12-Regular rf /Fk 135[739 12[676 4[641
1[676 29[842 2[931 67[{ enclmmathit ReEncodeFont }6 1328.35
/LMMathItalic12-Regular rf /Fl 3[723 23[650 105[578 1[686
939 686 723 506 513 506 1[723 650 723 1084 361 686 397
361 723 650 397 578 723 578 723 650 6[795 5[939 723 5[1192
813 4[1021 849 885 993 939 921 975 5[361 361 7[650 650
2[361 434 361 2[506 506 6[361 33[{ enclmec ReEncodeFont }48
1328.35 /LMRoman12-Regular rf /Fm 138[1196 837 849 879
3[1196 1793 598 2[598 1196 1076 1[982 3[1046 6[1315 5[1497
7[1293 2[801 2[1353 1412 1[1554 1530 1625 10[1076 3[1076
1076 2[598 717 45[{ enclmec ReEncodeFont }26 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(F)-239
b(A)717 b(2.6)g(-)h(1)f(Zusammenhang)f(-)h(L)-179 b(T)717
b(-)h(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)391 b(ist)g(eine)g(lineare)h(F)-108
b(unktion)390 b Fk(f)534 b Fl(mit)391 b(der)g(Gleic)-36
b(h)g(ung)390 b Fk(f)142 b Fj(\()p Fk(x)p Fj(\))369 b(=)f
Fk(k)254 b Fi(\001)209 b Fk(x)g Fj(+)g Fk(d)390 b Fj(\()p
Fl(mit)434 b Fk(k)414 b Fi(2)921 6792 y Fh(R)1880 6310
y Fg(+)3101 6792 y Fl(und)432 b Fk(d)369 b Fi(2)g Fh(R)p
Fj(\))p Fl(.)921 9338 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 11330 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 14820 y Fk(f)902
b Fl(b)36 b(esc)-36 b(hreibt)759 b(immer)h(dann)f(auc)-36
b(h)759 b(einen)p 24300 14820 3150 45 v 27921 14772 a(1)27449
14820 y Ff(\015)p 29043 14820 V 3910 w Fl(Zusammenhang,)h(w)-36
b(enn)p 921 16812 V 4542 16764 a(2)4071 16812 y Ff(\015)p
5665 16812 V 3583 w Fl(gilt.)p 0 TeXcolorgray 0 TeXcolorgray
3720 18184 17440 45 v 3720 21268 45 3085 v 12115 19966
a(1)11643 20014 y Ff(\015)p 21115 21268 V 3720 21313
17440 45 v 3720 24572 45 3260 v 4429 23369 a Fl(direkt)434
b(prop)36 b(ortionalen)p 18750 24572 V 1 0 0 TeXcolorrgb
19459 23274 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21115 24572 V 3720 24616 17440 45 v 3720
27875 45 3260 v 4429 26672 a Fl(indirekt)433 b(prop)36
b(ortionalen)p 18750 27875 V 19459 26578 a Fe(2)p 21115
27875 V 3720 27920 17440 45 v 3720 31179 45 3260 v 4429
29976 a Fl(exp)g(onen)-36 b(tiellen)p 18750 31179 V 19459
29881 a Fe(2)p 21115 31179 V 3720 31223 17440 45 v 0
TeXcolorgray 0 TeXcolorgray 30427 18184 7962 45 v 30427
21268 45 3085 v 34082 19966 a Fl(2)33611 20014 y Ff(\015)p
38344 21268 V 30427 21313 7962 45 v 30427 24572 45 3260
v 31135 23369 a Fk(k)414 b Fj(=)369 b Fi(\000)p Fk(d)p
35979 24572 V 36687 23274 a Fe(2)p 38344 24572 V 30427
24616 7962 45 v 30427 28075 45 3459 v 31135 26672 a Fk(k)414
b Fj(=)33745 26149 y Fg(1)p 33739 26362 485 45 v 33739
27130 a Fd(d)p 35979 28075 45 3459 v 36687 26678 a Fe(2)p
38344 28075 V 30427 28119 7962 45 v 30427 31379 45 3260
v 31135 30176 a Fk(d)369 b Fj(=)g(0)p 35979 31379 V 1 0 0
TeXcolorrgb 36687 30081 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 38344 31379 V 30427 31423
7962 45 v 47992 4800 a Fc(___/1)p 1 0 0 TeXcolorrgb 48228
6792 a Fb(F)-123 b(A)369 b(2.6)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 35451 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(F)-239 b(A)717 b(2.6)g(-)h(2)f(Celsius)f
(-)i(F)-179 b(ahrenheit)714 b(-)k(L)-179 b(T)717 b(-)g(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(2.)p 0 TeXcolorgray 651
w(T)-108 b(emp)36 b(eraturen)374 b(w)-36 b(erden)376
b(b)36 b(ei)375 b(uns)g(in)19571 4318 y Fa(\016)20097
4800 y Fk(C)471 b Fl(\(Celsius\))376 b(gemessen;)g(in)g(einigen)g
(anderen)e(L\344n-)921 6792 y(dern)433 b(ist)g(die)h(Messung)f(in)14635
6310 y Fa(\016)15161 6792 y Fk(F)614 b Fl(\(F)-108 b(ahrenheit\))432
b(\374blic)-36 b(h.)921 9338 y(Zwisc)g(hen)487 b(der)h(T)-108
b(emp)36 b(eratur)487 b(x)h(in)18831 8856 y Fa(\016)19356
9338 y Fk(C)583 b Fl(und)487 b(der)g(T)-108 b(emp)36
b(eratur)487 b Fk(f)142 b Fj(\()p Fk(x)p Fj(\))487 b
Fl(in)37621 8856 y Fa(\016)38147 9338 y Fk(F)668 b Fl(b)36
b(esteh)-36 b(t)487 b(fol-)921 11330 y(gender)433 b(Zusammenhang:)p
0 TeXcolorgray 0 TeXcolorgray 18615 14982 a Fk(f)142
b Fj(\()p Fk(x)p Fj(\))368 b(=)23031 14459 y Fg(9)p 23031
14672 471 45 v 23031 15440 a(5)23929 14982 y Fi(\001)295
b Fk(x)h Fj(+)f(32)921 18634 y Fl(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 20626 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 24117 y(Die)854
b(T)-108 b(emp)36 b(eratur)11281 23635 y Fa(\016)11807
24117 y Fk(C)948 b Fl(und)852 b(jene)i(in)21774 23635
y Fa(\016)22300 24117 y Fk(F)1034 b Fl(sind)853 b(zueinander)p
34562 24117 3150 45 v 38183 24069 a(1)37711 24117 y Ff(\015)p
39305 24117 V 4003 w Fl(,)h(da)p 921 26109 V 4542 26061
a(2)4071 26109 y Ff(\015)p 5665 26109 V 3583 w Fl(.)p
0 TeXcolorgray 0 TeXcolorgray 973 27481 16139 45 v 973
30565 45 3085 v 8718 29262 a(1)8246 29310 y Ff(\015)p
17068 30565 V 973 30609 16139 45 v 973 33869 45 3260
v 1682 32665 a Fl(direkt)434 b(prop)36 b(ortional)p 14703
33869 V 15411 32571 a Fe(2)p 17068 33869 V 973 33913
16139 45 v 973 37172 45 3260 v 1682 35969 a Fl(indirekt)434
b(prop)36 b(ortional)p 14703 37172 V 15411 35875 a Fe(2)p
17068 37172 V 973 37216 16139 45 v 973 40476 45 3260
v 1682 39272 a Fl(nic)-36 b(h)g(t)433 b(prop)36 b(ortional)p
14703 40476 V 1 0 0 TeXcolorrgb 15411 39178 a Fe(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17068
40476 V 973 40520 16139 45 v 0 TeXcolorgray 0 TeXcolorgray
21610 27592 23212 45 v 21610 30676 45 3085 v 32890 29373
a Fl(2)32419 29421 y Ff(\015)p 44777 30676 V 21610 30720
23212 45 v 21610 35775 45 5056 v 22318 32580 a Fl(es)434
b(b)36 b(eispielsw)-36 b(eise)435 b(b)36 b(ei)433 b Fj(320)36260
32098 y Fa(\016)36788 32580 y Fk(F)614 b Fl(genau)22318
34572 y(halb)434 b(so)g(viele)29805 34090 y Fa(\016)30330
34572 y Fk(C)529 b Fl(hat)p 42412 35775 V 43120 33580
a Fe(2)p 44777 35775 V 21610 35819 23212 45 v 21610 46850
45 11031 v 22318 37679 a Fl(eine)585 b(Erw)-36 b(\344rm)g(ung)585
b(auf)g(z.B.)h(dreimal)22318 39671 y(so)631 b(viele)27307
39189 y Fa(\016)27833 39671 y Fk(C)725 b Fl(w)-36 b(eder)630
b(b)36 b(edeutet,)630 b(dass)22318 41663 y(die)358 b(T)-108
b(emp)36 b(eratur)358 b(auf)g(dreimal)h(so)f(vie-)22318
43655 y(le)23563 43173 y Fa(\016)24089 43655 y Fk(F)485
b Fl(ansteigt,)306 b(no)36 b(c)-36 b(h)305 b(dass)g(sie)g(auf)h(ein)
22318 45647 y(Drittel)434 b(absinkt)p 42412 46850 V 1 0 0
TeXcolorrgb 43120 41667 a Fe(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 44777 46850 V 21610 46894
23212 45 v 21610 53941 45 7047 v 22318 48754 a Fl(eine)494
b(Zunahme)e(um)h Fj(1)33991 48272 y Fa(\016)34518 48754
y Fk(C)588 b Fl(immer)493 b(ei-)22318 50746 y(ne)434
b(Erw)-36 b(\344rm)g(ung)433 b(um)g(gleic)-36 b(h)434
b(viele)39968 50264 y Fa(\016)40493 50746 y Fk(F)22318
52738 y Fl(b)36 b(edeutet)p 42412 53941 V 43120 50750
a Fe(2)p 44777 53941 V 21610 53986 23212 45 v 47992 4800
a Fc(___/1)p 1 0 0 TeXcolorrgb 48228 6792 a Fb(F)-123
b(A)369 b(2.6)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 58014 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(2)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 3.2/AG 3.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:29:36 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMRoman10-Regular
%%+ LMMathItalic8-Regular LMMathExtension10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 3.2/AG 3.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0829
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A2255C2C4C4D9E02626F0B4DF1B646DCBC0A6BFF
8EF29877FA968660BE139D8210CEFCD0D24E2C9976490B46BE7CBE8C1C475F88
95C6DDCECED8989E2AF9133ECE53E795B85E6800992BC331A4199A189ACFE5B8
DEB2182D7A5B4CCD3E9946F115492C8F03055C82927FFAFA6E43AB2423BC4874
E464ADB3D3F07FA22542322B7BEE5EF03A34FD5F89F09B25F78633F8D269EB8B
F7FB2277C280DD664B7470201E0B68633EB54DE3215CD1B5C3FC0318D13CF485
B3CAE0E09B8FB8BD66BF548F6A0B8DE645BE6F8F76FC287714FFAC1C08144A12
955053DAD310C9794A50B92550102D37B167BD5E13490703F1F12484B1F15B5F
FB5FEEFA7CF513353CC8D24DAB2DB6C023C62ED0742313EB41B9F622110FBE00
2E5E87966A452BDA7CE29D9E8ACA394EC97EB3C27EACDEC403B28BDE9EA4E24B
548FFF28053D427DA3EC5D297A4D9E94FFD40BA9AD110046684E3A13A3725C8B
585521F374FE8E555CDF8B4425DE8F7F49213908DE06C21233EE9DEE1E3D549E
A6623CCC000A65D71B3820796C75B563D731692ECF7CFB4FEA099E2E91987B4B
E631A5256713482D5A128BA9C1B6AFAF2E533D4FBE01630F1C522EA3BA34E324
5FD6994FDE5D38C9C79BE3BA37021501EF61E34CA864009D965D0FC207305777
139313F4AE886729344A8A462330B120207C069631B99C58827555F398EC2BED
BABADAC9371C59F27E89CA8ECCD67EC32B7B426811C0DAD492FBF4A248FDEA62
0CCAB2DC7767EAD231480F1DCA0CB59B5A6DDD0847117E3E37059ED70F0B0E54
50D3D79745C38C8F88A9E9A53153E122E9EC7CC7CC1718CE240FC1670AEE2063
7D66D307D3F761F76552CA46AAC25483F1AB25D7E8693933BAFE73354A93FD73
07FCCBC371295662816CED327989E8D4D49D679C860B4F5C6C9A7EEA7015AB1C
10E8355E743DD526AC7410B02DC034A1D9B4ADCBBB590E2BEED19D4D910BA11E
B520562E10C0932EE996867CCE2B0B778FD6A0ADF7F65CD68FF6B96A3E41316E
577137B94B2298FB62A7F968D133F383FB03069AFAD0E1D1FEC2928C6040AAD3
293A257CC3C93B0B18351165DA01E1B0DEB0A4BE817B311845A1CD83613B0662
172324ECCCC5B81D6FDF9AF51AC06DB72D337285700BA11198929F50F169E841
D321803E0B609FE38B20709F2431FEA724A03D0F6CAAF186FB2AFD82B5B60629
84363060A3BC180D563B7B87355505805DDDDE727179DEFDB1920815EB8C4702
F89F660AD37925CD47456EE0EB0DBEC56C87A898B2A2C5D6EAD7AC9D2EA2C02C
02F5C0A0405AA2A9E01A40097EF8735C8D53EC97C876B5D9D44D7E2D40A53D30
111752B45EB39C509139B10309C28479F3F49DE3D0E24330115B1FE52FCC2060
FA9B10F48E1709FBF156
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3FCE3A9E67ABD53AA2095C2217F80B3EF7AFE49961F4
61F60F250ECF1329A62A5D6C3F882A44310C4916ADBC3DA9B6BD436AD86BDB2B
16C0E63EB1257ABFAD25F281D32B547B31CE48D82E48819606699CB2A75A64B5
D1B5FA98029D7CE623B3B8E9274798F32EB5455A608A969848587FB4216C3C35
4877EC108D8DE8FDDF058F61DA3D0EDA68EF579CD4EBFBCF2F88DA535DC05FF1
5EE718E01518738F7E6B887898261117EDC211226EB3AF880E5F0AFAB2498FE1
D79954BD53619CA37601F681AA949D18BE7A0C27B1870062A9EE8AE41F58328A
DB5170FC710F29B4CF6AB780A4E2A1732B3626515EDB3004C44AEAE92C7D6E49
A68F23BC5D249C4A3DF3CCCCAABDCEDA355F4FDF613364034860D574B000252A
5D8DA8E25DC55CD4EA45809FA89CBA0CAF97C045A54130D431695D45CA66952C
53923653511BC070AEEBD7A6206DB51E022B378073A32722BEFDA8D1EA7BE1C4
6858AC7236A130C5BAA5744ECED5515C36F27E883157C7260465A657929DADD5
64021638AC293FF604364E19265E828274EFA7943AD449C7EC1FB3A6E71B557F
C25850E187FCC3DD5B2466C6615CA30C3F71D10E1D5D11BD5A31DA3A305FC549
F4D79F4BDE53501E2ED5A81D91A820DE59A9AAC76D12FCB66B4CE99B98936F3A
AA59EEE03D5356625E72E37AF4E0674B33FB71C3A77EC1A63C24330197667FC9
0BCD004E429AA00ABB3B68B255C69242F195F7585165B848830E6987404A4ABB
B490D44EE8874E54DE3E991946936E71642D04AB88C9E9214E2C9E8B8E5C5E5E
CE2FE007319FB5EBD4E557D0E27ED3249C0D357983FA4F9EF4261DB88C753421
BE1BFF2F18BF6FA92CFB8D56EBDA0ABDAFF561681D2E55676B54C8083FB9F9B1
F745C9C1ABCBD0A3840BC12A50536D456D91F1A7326A617411A994889E5F4C12
B7DCFB82BDE1D085D424A7799AA802CC16A540A8010F191752C91D28A7E9A438
1206E9C9BAEACE68952139DC8A9237EFCC897CB0056CF759359E150E87A58981
8B16068294BEABA54B795DA3FDE362978BB498CA7D3682DF0CD9B5E64328E00B
326151489B9812B91C88DCDCA7064EA117177B09AF4C6A75D4EDA1AB894979F9
ABC42543A7D5093920B245F81F22A9652CB29D84DF8562791D12D4E4FB1B3381
7F10F92F1DCB6B944764EA7C571C00A4FAD91F9DECA044DB7DCC96C6D25C3BBD
76990FF6951BFAEE974F7C3328A2CA3443FC9669B02DF5B96D4B27F20E7AB7A8
C47DAC0D96364590C1614192666CDCFDC986CF9B0041AA18593D2BAAF3FF08E3
49533AE4B58733CC4F0480E783465534AE47CF010613F8BFB9F36045A17C674B
CA1DA029B666DDAE1D51A0326A919C73DE915F0B5E9597C6F233384F2A74281A
41AB6BFF75B162575B0F5C80CF8338B9E0536C9B09447D2E9DBB23E2BB43455C
5E831B85506A56CD280B03869D0EFFF9BF7CC605012A42F06504E291279C8F2F
66C8CF284085BE8E545CD71FC2C08F0299E791439EADF5874EC27963A1678959
8AA832BD10FEF0574C1709405228BDBF36E51BCBEF136DB4927D3F65E510C178
1A4E2DC6BB47EFC471414CD36AD567674D90EDF31DB225C61DE5E7FF561BBC56
B2800DF15F49136475DC6FCF12F8E82E59A545E73CC20315194EB0F59521A28A
582B6373E560B37B94DD479EC28CAA4BE585EFB466335F823B776A7DAC42A0FD
2CCA5EEBFB74B4643C416FAAF4852521E26CCF3C0EB3C632E6AAE2EA785F9777
0D088B789264A0FF8837290808F65B8FEF4FF460D365426F9ABD4558976175DD
5E572D083D3E7D332129C59EF4A0007C4184CA5445D5B441D98A8D0F01404F17
44B4016B38A6B51CF0C18DB221C2C5F756D1C8608D7F2FB3EFC120543D0F3C53
C63CCD4EC3819530BFB306BED3AD652C91BD6DB0EAF3AB4F7351951A729D8F14
0EAB83AD73B80AB41BAE7112DE75F323929BE7BC244D97697C5DB9F9DD852898
EBE3719C745123D644435758F54D99F1D0DC4C2312EC701C2AE3CF1A1D61A55A
6DC93EB0B5285BCAFF15F1F88099765EA060A7C0819A072C398513330FEB6D62
239D216ADC87FB13B58200CD3C41CC6600CBCF985AC133472052BEB78686A1EB
8478F677AF9E5ABC7A32A1436E2FD6A040BEDD9CE76496E9C90546A08AB0D1D5
0DEC1B5EADA1195FFAB9D734C28E1AD8D92904A8F06DD2705BFC0CFE96107746
08CC854407D17A820EB8DCA992D04B801B72D7B691D9D592525E97562C4997AF
D00C73071365B7CAB9C75230E703122EA5C003F07E1B5EF4342D89A7522BECDB
B5EF9D3AB4C52B2AE862EC71776D7D8B4C30C9D5E7AC4E121CD06DA6575E6012
C6F87FBB050C63045AF7F64DB699E703844EE763B19D06E141A7F4D0C4DE1F06
6E8EF02B8C755BB120CA28AE3C0DF770B0C69824FDEA6B5691E3076E510C8949
535E9AC1659136D97BF8E64CEE37AC6EE1771FD4EC0A6441FBBD9F1AEF19D86B
FB95D65B9E0144D8EA2741EE60ED8D7BC9BD2E0CA47F0F337DA5150B3A9D4E2F
54036BC5BE59B1647D11DCB2FE0CAD4DD05EA84BF3ED440512DB4AD6C2ED41E4
621DC6CFE4B7B4225F286304E6283FFA1DC5BBCFE4F4D41134BF3E4E10816A92
7171F8B4C5158961A276E31EF474D6247327AAF0D211C34286C06E3260C5BC03
CB4DFE8DBDF1491A8C37625140942744B330692791603FD9F127F3E828BF2451
4C24602BBAE849FDB4025848596CA0814C26BB3166DF3C5389F9AB53832F1BB9
C74F8E3AFA3E4F1225F48225A84AA56CBD3EF29C31D082B8249E5B4ABF02DADF
2A55076E0A8D1BE1E434ED1F5F21F308709422934E7D25C9DC0B87C6162E0FAB
84B47889323165882279106A2B51BD2CC6D2DD6B90CCF520F395C8A00A911B40
42E32D4368D708B49281E9CDE0AA54554E2870AE61033BA81FAD8A757C1392A1
B3A12640F157E55DA2F737E96997D14B2416895ACC5C481EC8BB92FB75BBC76A
DC9441CE46FE9C12ECAB1749A381846949DEDC727CE6FF81D1DC7BC92FB20247
5C65BC74358E4D247F1429ECF6DB29636D1957FD7A4D6A81AC22105C49F3665F
6B784BC378CB30CE0DA78FE9B31D6A362B987725E28B2154D4D8CA6D3F19667B
4A9FB2E0CFE41B0F482969A0C0E0B2F5535D056A67158D401E8A8FC16BA019FF
95E08B1B75EF5723163D5049C5EF0AF85D195A7D3B89BF80FEF31E3EC782D052
3761582B78C1C11E70A463DDF05CDAA2D81EC472D492EEDDAD480975A018D5F7
E1BF629B2CA31892EBE373038ABAB2E94F8D5EDF690361BAAABD89ED5183B125
B9B84DF0F12F450BA835B62A8F0AFC19A7F97996AE7596CB6E4BC8AF3AEA9439
9A0FE476FDF65AE5B01C5057E5E9BF85BDBE9758D7B866BC219482EB1936AB84
ABE2EBB275C7B968522642FB8E7DC80E2A1EF198286DF6DD721D312514120F8B
E168F576AE6815443DDE0F0D552685EC25
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4A2DE9AEA203B209385B88D9E708FA615ADAD672C6
BE223D5855C0F6753649EFC00A7683A9EBCDDF1610B2D942987DAF090BF54FD4
E7304082BF34EBA0169EC3F6190879D5D8DE05CB5C6CE7C2212251BFE8824A87
3A277D0CE8C588611AF4987F7203DDCE93170428CB54EFDA16BCA73256C1FF85
2C85996873C9487906AB70DAF5E4FF2EBB5C7489358365EE072EB45FE7328E73
5D241828F39C98E813E0B142027DA0842BB3BB3A4EA8DE8EB34BB81AE7BA9B29
193A289A9EA7EC158512A268417204F047097E042BB52BDA0AA3ED16B4315244
E3BB451A99B211EEA2F1CD0A5709AC8CFC3EBA9A0C45B48925B43CD4417517CF
6F42243C234413756CA68A0F125A0E7C1CA1F6166685C3FDC27532C931AC8B86
E81FB0223686025707E5A69C6BF3D0C6660E636D6AD25B03A44355855B2712D6
F84E63A541739B3F161891F0FEF72180DA1546675AE16824DD84B6CA375598B6
C439A2E90E30B7AF6043F860D5D548B166C25921D8DDAD3398299D23D94203ED
FEB2A8899B078698314F08981397316AEEDFAF486F58FEF25284B5B5618A6762
967822C2B91D421D3C8CF5D76D071D3748C32BF1C779E9131603E8C0EDE2D696
E60DFEE5F15D5EA092DCC4D49B16373FD58807C44B06016EF5E2670A911AE147
CC5A9756F870A1716B4DC3D868BDE539079576E5CDFFAC34E165C063768ED394
770CF07675657587CB8A56596847362B00E9728B7CF7F5E85673E4B8C4F424D5
94F93A6861828F6251F206B9131C951D1ED4364A9CCE5383C0DD92E3E329CFC4
E2B36E704F5A2E99A7CBCE624FD99EBD4EE699630BC16854CFB80EDEF8A6A652
03EA75BF1416D23DA37B18363AB001813EFF029266FD7220DF1315C0E76AD8D0
3FF4CAB5E5114042B951CB9E36B323D53B28643AA12877E269C4D95E1ABCE508
4B1C0EE6096E008A5C34BEA647B937325FBA2FAFA9F834FC7F5DDF178584A24A
214283F53AA2D015BF620BA5C87D84E4607F3A29AD8DB076BD9AE6E949DB069E
5A8CC9484A18CBF278813319FAAF6C66177F200389C2015EE81663AA56EABEF7
C4CDE32059DC33368DFCD76D138D0BE636CDDE883E1CB4ADF94B4DFFE102DB0A
43842EACD9168B620439F55FCA7313B67CE7FA22F861B2BE1B1041C5C68C45B7
1A717B81834A23F54E80647B84B6EAB895BA6138753EF23A95D41A8069B91B9B
0B327E651C06AAC2897A2E839E3A2225EE93EE41B03F3907EC73E5B4F9B71156
B357F62608909B7E4D0D6E6DA17D2763E1E130164942DA5F704DE35D983D12A3
6140B8DA142FD05AA44E8034AB75C30DEC81BDC725D2CC7FA26EF0C059090FB9
3A5747EDA57889E0E402EF14AE8BD323700B083E6FB9B54FF40B63FFEF520AE1
5B9882BDC14A6567C19ABE55F8186365B30C9002FC88AC0C591F66241ECA8269
A34B5441CC0CF92EF7F66E79D3B2B7687683D34954230DC6E93A7772A7BC9056
B27636A3AB7844D6308C174441730ED96BE3E09FE4561AC4F28A2C7BEDD716B3
3B820BA74356DD9FC8C589974C55513AE70589392CB5599C789178CD1C1C86B8
FD8EF3FC186A8EA4C9BE51D592FCDED41C3662B6A487F14B9D9A5B20898C25C3
4DD931F1B09E72D4167DB96B594B7F8296FCE3845ED8FAF19EF067F6572E2787
8BAEE83AB15A7D8416623122579EBFEFB21DEEE302647D68DF3B50F5CAEA8BD4
F3E91ECEF9412CD96BC9190FF4B231AA728E36BE2546E81C23F4584FBF0D451C
ACC5142CD5AAC12ECEA34351F85390338ECC499C043E346A4DBA66B7EDE932FF
D84DCEAD5F98337B73527537B8FA58F86F01329F1C4BDC2FBE36276FCC5A538C
B4A58590A3D15A7909F012E909D4F3C596C6F28C2EE0009E717CFEFBBFEF27CF
58AB01C17F7F53615F79D689B6B02532EBE773369461C682C841008292750A37
6D0398DA95DF8AA168A0A9EC40CD9E45022A81934CE5B9973ADF81D7EC966369
AFD3D36EDE20B10EE93517665826A01E9F0C9B401CC50F9B0A3DF60AF84E3C2F
621C38C0CAEA89B2205499005327DA99E494D9E1FE8EB703797B611CDDF7DB31
F62CD736AD7AE654A7A2D892EA471590989ED2A8B9CA97C357ABD25D6B8DCB78
E81FB5B8D5C70217A7BC930F472F93E247E29CD9852001BD2E16E51AE491BFAB
A39D0F2725E0DBA7C8CE305DE7C1B59DC2184E09F7B7B2AC0F915A89AB253EFA
653E29CDBE7BEF9D40CA8BFEAB9B506088DB3CF99C78613AF62054AE1A32A95B
595E32FF28C330E73A2D5F605E33B1B0E45BE31A8DA7AFFA42839CC734E717BD
D52F97832A24A6606A5065F649FE81E6B3B1E8D0ECC21206BB80B2FCB7BECB03
39036F3C3B3A2FB108872E8860AB6F67961567329F5626E6328EBE3D35B8883D
AB6FCA8A2B979837A433DEAA348233900A5BAFA7892567BEA46F08D78E105FB1
0252DC8E0EA149DF9D95D5D24C4B6B2795D94BDEB015C731EDFF85EC1CFA93D5
D6087892FEE1D0B7EECA805A8ECC002A4D483ED01D7F56D4B0ECD46EF72E02F9
E238A7C7FEF6E38762888F2912920CD0C00F393D1D07D7CB3A30733FCEBF2730
D812FDA06934F16F183052D3D1BEE1F6F9E8DD2B04A1858D9B4BD21DC1E32FCB
7610BEAD29527E98C6ED10893E4B2C5725588E1C4490068ACC9773393CE62FEA
ED981D7EC957174A99C23140EDEB93B2B8615EF1D6868BFE9F953BF90D731B90
C4F19A0999B940D7B30E13B1118FD1A28A2CEE1A78FBCD55AFD5FB30944EE4F1
82641F05198CB96E1262F95B05E91CF259187F0E4A5BDF42FF18E08E64973275
A1BF22D5714E8851D93331FF300A266B618126D10754D562A97C214E88DCF08F
2838A5BEB990584A9351DC689D69CB7FFBED316BC6EEB5CDB0636DF51B3F92F4
E3681F40F1FE8680698250F9C06BCFCEC5781A692410F18B35935AA9D15EB6A4
59ABA0B05A7962C3723BF6E61E3C3E10DE25AE1908F86A47261CB849B07F5777
B063247CD0F1D75102D7BEBA6BFAE4C9D1BB679CBABE4996D7829CA57157A0C2
1189663DB06992292E4EE841E84D80C291C9516038BAB4939EC62C6113BBCF86
D7A1C356032136221AC34BDD22D9433F0FC61DD06BF1493BFD06A184A94E7ECE
046B6C6E0E2C5C0822AD4ACC38A6480F55E66193090204B5D4D40F80BCE763C2
7BB9B68F8E8367991AA1DFA2F966331B52ACA50DB8C6437C945D1D7CCAB290C9
D734A287BC52FA90B551817128AC48A4BC9A1CF74EA3555248620EC344A98054
2A44BC097409D54F448085BB95D055D0C99509A00BD80C0A81316A9443236537
6C2F40DC7B37EF6F88FA599F06E5CB068D581825CBAEEB79A311097585DD1840
7AB99EEF38F190EF0581F493FDD3B12713292A4FF1F5A0D2DDD0EF95DBD22F96
0535F5320F630BA5053926D4DBD9E095D84060E1394571392C3FBC27E276CD48
0B48A201BA66D71486093EC47ECF01BC054639350BB4C6F3D684122CA9E5CB8B
80C1AD587EA7AD3CB3BF89F4FE0CB9E03DAF7874A1FCD21E5789A9218812516A
85C25266CAB5029721DC94DB18E1011414D4C110BC7FA7BCA985AACABBFBB71A
E71A47B99CA31C07EDCF33E6FC26EEE6B424064B9A9B887E2E8D782D8F02EE06
A6EABC6CE4CFAED0E1A07845153B6D4F7B38E292A9B74F34C467095B7BD88178
6E8EE7AD49877F9ABCAD141C0F5FF73B3F4E335518F14A80C4D80AD24605AA66
32D512B317108280D8DF30D8CA287A2B040C71F73BF0DDEA57ABD941DF37787D
29BE073480DDD048F9023FD22671710E8A979B29BC4E9331CF876F318333382E
A2E43169F4B4DC168A19486FB4C1D31E05643BE95D94631740E881C0B9D6E14B
783F529E7D71EDCB645D75EBE572B3E55937DF0CDB33E479A0BE74BBC7DD92D9
41DD60B76E621A2A3183FB057FAC50C2D75C0CF2320197F9930E6AF23BCFF5E7
F684114EF9A11956CBC4B24764D050C0E71B1A87FA2CB696DEEC0012739D7D5A
206A98B1B525408612865484A0C9AFD958E39A39B7FC1A6DA06711073A8C428C
1719C88FE99BCB833FA1C1F0E03921E8FB6791FDA4BCCD41581D12C0CDF25A65
582B0CDA99DF335D0DA4FFDB85EB2013C9C2682963466334F43909DCDCCAF5DC
69E296AEB1A806F0222132EA46587D76B7DED6D68C89247D997C8C95A50D1D6D
582C7A94DAFFB623DD472A01FE93EA14C8ED5E9949CD49DD86CCB8C37BCBD346
0F9E803E409065E158DA49560DBF9060489E467B51F09D2625AAAAF2A089D94C
253CDCE59227298C46A02E05B02D4C6603B5D62633D4DC6CE91B83AFF6840691
9B918511D079AE85F0F152088362E431D578E4A67965280CA2AA2A7399918BEF
0043812F3D71789896DF682C50A6E3D62384F9ECC1679B6514C107D7B3A613F7
25C722E7211327F13F8133ADCE7C195BF3B07AA2B351DE2BE55B48962C844CAB
B7BED489A190D1E8539850BF76AE119EF37404C17535023E73FD32A1EF0C6595
55F842D05B9050D2E505AA097F2FF446589143D43EE23C89140572544985AA22
FC24BB9221F2FCC931C6A211FF8D4CAD4C5612DF8192107ECA73776BA42DACC6
FC521279CFF261C7D433B2ABE29D96E5720E9ED02B59CD4371520763D6FD209A
23F24B713F90024CC452D45380C69174F5A031A854336C4DE2FFC6C0F0BBC5F9
CBAE60CB15F95D06470E7CD2B15183F5B3507D7032AA6408DD738A98DD288428
DC05CC52F59D616EF85F9DFBC28F2E43AA4227182ACF455865CA526CD0C3AF1F
22BD3E3A9AB1B4E1F14790B24F5C4420175EC0FBCECD37DC88CAB475ACFFBFA5
4F1B60E65A13C4E5FD0C50395716E8BE9BA7E7041A0D3A71F932F583485A80CA
B5EBB990D4AA98F4A3F9F058416B79718F7C53E34C5057880AB32CF15942D364
A217622E4A7A73B41920BA2F51F6627DBC1F119BA6B728785C551D372AD585BB
4189795DC7DADF2A16E3969993136AA5E7CF174EB3D74860697B255C72846F15
70C3EC290D39B2224E2237CE0413A4E475C834368130893D5CFD815A47B2EB18
FA14E3C61C18F6D505E8FA521F1FA539F9ABD46CD3CBEC0C78624CF7BC577F13
63169B5DC51A52999FC337744781995E82918639186A928EF129C83497094D63
EA1E87EA4F5AA5E4A0C898CB89522DF46E5AE530279E4DB9DDE98CE3D3D9D7F3
6EFD601220D28E29D37893BFB424316E1AA4B38746A4ACA9B0683F0E4E2F0CDA
E87B801C0C536C101AA0D77A3B65651CDF77ED82F497851499E3E82C66DB5D38
FBF245D7B539812752592B9D86439FD265C90CC97F2378B9B632A6DFA87F168B
BD16A82F64A29C7CE76B354A5CB2A662E847B438AB66F405924BF40E49AE3D74
53C630FC3431FA13B33040CAEFA0457F1B420AA61EDADDD60410CDF5CA46C021
D4FCF5F1C22E3C015BA8C46DFEA00293FCA8CAD6BD2A91EA6D2BC0E824554C74
679B25590F079D0C1EB4C3D40C3A8C4DC8F475CFF7D51F82FEF1365F7F41CD6C
5D58CF7404E9646515EB8FEF55DBF964A5C2AA9623B8674E7BC18288519739BE
3029B530AB99921E6EB29842A5B72A07197209E04772445358B5F9DE15A8D07B
47ED81BF7B7F5F8723199E67C94A7F81AD08BD684BFE08C9D3183372ED4251FB
9A201CB1483EA78FC5C87A4507A5A1696022B302659522BF22518338243E2958
069A906E35BDA72B8F15FE4F89517D4C07531E5FAE089A21C1D49A8F8FAD7842
D60CB4A26A706440E79F43310E4B9C2EDEB163746E87D240911DF09A7B362D7C
BEB0CA28A1E598EFD0A48BBF57A4FBF9C5D261A449C118DE8B1B9EDBF53FFB58
54DB44D5A187F806B5D7B12FE096BD13F4515A482AE933D99D2B61165C824C1A
B174BB19E8202B76888B93CDA18F596C2A638DFA3A2A0E4088072A3C9E36431F
7357BD9A0594D1CD925DDCC2EC217BECF37587795A411195A287935F0E7AF6D4
9CB9DC59427AA75801EF639C52CA883E95575A8B730A57721EE9D678A759A85F
77BC4CA1285C9898C63CAB854E80B0886B08A72B1D7674B8386BD99FA328D21E
9E2F8F27B94AC00C32E36E1E0F676E72E700EFF0280DC344D4320156E9721C05
42A01A731F1CEBBF5AC7571B0778C0E9D25358DA06B20DDF35F1F525B18100BE
E64228990E597E21FC63BBE8685F311A79397A4E04BBBB4676534794CEAB380B
1E461C5432AAC498FC2B351212FCB66B4CE90406085978F8EAEEA93E0B1DB79A
09D0DA43B3B6D093109037249EDE4DCE403660DEB4C4E35656CC9F8DBC6622F6
729EB829951D2913A502D1F8B1CB9CF8D2467147DB637922AECE879A80B81FC4
B1CD14FC14D9AC7341D504E6D06FF487CB3A0303B09B9EA938E15B0C1A7C171B
748D0E32EFC302B3DBF3C7582C91A8525079B97D6CFEBD379A5D4205C28D75D9
A93A375C05DE6C340D852582BDB1EB6971F2EBCC0C538B9F4747E6F18F88638F
9ED604F7674CD3E28DD94E7A08D50778A5127C788A9F9AE8BF9E2E340162023B
85CFE6D9AFB6B92438F1E18E43FB703A7EF38F9CEC2CB0BFFA436CB8AB982821
075E72EFAD513CFE9712A388CB4616DFC5450B912CC2AE408342CEC44C330805
3C80595C83054F2071F5C356F4DF99FEA2543E25A3A5ECF36DB4155467515FF4
14FC3898D8751345712DE2E5FC2564ACD7935C737F83FA75D8C756822E7E515F
481AD74CDD7B3D876C9B15CC77B390C83DE369C48C9E83EB8BC3EDFD4E8F036B
7A8E0B933723216C053851A688BA255F9F771F4DF75FF3339974B377BB84AD85
C2EA35B47218D82EC626C936209AAE5D9735BBF8799A87D4440BDBFE59B74C19
F6098ABCDB06E2D56FD40D8CEFA4A7A464FF352BAC31D36B071C4B68DF8BA0FE
38D3A01EA446BFB889F83B3CAD005996A6309A63BEBA0FE32D706CB89D6201C7
DA9C846205E522DDC3FC90FCCF6D6AD66BCE2118C48004CEC93F33A41E97C719
CD5A7576A3DF9C67BA81ED16B267CF5797437F0E0A3CD668D7703F04295E6A9B
B3489FBF70088277714B8AE8CA8C2BE32606F6C3F48B1949C72088EED64E45DD
9874A61523D23195A496A3FBEAF9140B86917135468FE006F159D3299B3D4556
8BFB0E0CF46A06EA698545C376603E34B998965FEF239881A50C3765942F2321
EB09ED414AA9861BFEDA78BC3BAB7FD13E263C2549247D8DF74C6863D43B0266
C877E4D2CCF266295BE92A624B4E80043AFC3C802C4DB296C79D6604875923AC
A1A9F330A10ABB310B4D67EFDCB00B73FA0DFEF0358BCA49F4B1C4F1C38029CB
D9019910BF2B29C5B7222F91961463EA1E21FECFAF8AD4EB83E57D0E806CB7D1
3B81CE15C720390C3EBFD7DD14ADF945F0281B5A24CC391AE3E1616B5B5E4B67
0FA18DE54633BC3D109747E0911C7859CEB157765BAF324D4115860EED4BF3E9
29DF288E1BB1BCCE88D89ADE52E37BB6E22875FDD5C9D9DDD7BCCEA2ACF14D47
E189148150B727AAF2426421F0093C603BD63827E28F17D57CEC39009E99F717
FAA635DAE480F40B36D3154B85F9782E3DA80D00CFC5CF8008EFBE21C38F9927
527A4AAC3ACAEB7B0F96B8C07983FFA8FEC41B589A018331D25E5B0C31548D34
9627FF4BC3D6663890400C2F5BC1E1A1E73B2B95D532709F7A5DC180608370FE
A2F20521FBF91659A6F91AA4CB1FCA94642068AA64456765BA45597364DBB104
4A073BD9C333C710AAABDD27CD9B2644983B1A5F84F64441BE2105B861FAC6C3
D38F32F29B1DB2FA3163796F4C2EED449992426730E1A4338C14F18731B69685
70AFB419B7ACA96BFE86212612449813E191E96140B27788E6DFC27DC13B8E42
E450DA982FF3AC62D4E943C6043451188F2982A72C2B7167D4F32CDB86D66629
A994971CD84967E7D057B246BB2427A14B33842864731E3C0261DF08737F41AD
8DE10D42B7A8910606700D1AB8E67C2E8F15FE4F89517D4C07531E5FAE089A21
C1D49A8C7D732254B2B54A972B3583047D43D202EC047CC23B8368FB4660F955
C6F90995E1895A56ACA672B233D05F45F5A49CDC5D0B6324F16FC38E84F65943
4AA8FF66FC0BB403A09C16680F9176A05F32B3A326B6B17063F208C35F41BEEB
19B25596A888D7530D42EA1DD0CBECC4FF008A8123FA5A955A10A4A1E4886DD7
7F28198802852A26CBFC6A61A486F802A67DE15B9BA0D7E90197A1D15E564AAC
5A27E142976623D942A3058325F54D1B6E7713609222EC88ABBA31ACFCBF507E
6262226CE746000B5054EDF468CB8A86E4CB66CD2B1A5550625E4B5C2B2BF987
9F8289296851D7C637B282BB092E5E6C264DD54CA062EA1FF40528B1614153DA
232DCFB65F66B282DC881B6A0F249AD2B3B1E406F4F4168DFFB1E66ED5DF4565
D3319C2134B463DEF37A4C9F16781E9DBE56B9B2FE8226C32B75403B7609E685
C1A00D822718BBEF12CBB30F4304FDA5A801CB9F0590AB44141EAE0E171B748D
0E32EFC3018893B871697F1DB6E55F2EBB231F88BFE9882F3847A9C7401AFB91
DC4E6728A1CA7BA4ACB868F9CC431C92BAB7DE073EB0BE646E41F0E12E0C0729
E5F10461A8DDBD44D0269F0EF8128B32C7F3555B2CCD2A3970A8BCAA0C6A419A
9AFD645265013E717B3EA1B56DCCA040C9F839445185EEF705993EA37E0CA2D9
BEE0AB4AA71E488092C1D8BDB19447B728CB005C50AAEE736C1DE0B08E3CD67D
BC27AAF2426421F0093C603BD63827E28F17D57CEC3D46B9A8EE0450E4C446AB
056E1ACAEC045451980CD336C9A374550A55B6CB4A316825AD743AF24B4870DF
45D86A556B9279FC9194E2846675A21436F96354CB9747BD04947B6B42083CBE
06F7EACB175FA09D2DE49226CEBF06A99529639EAC0FB9701025D55BD054E058
D3E91C9E28E50AECFCE6876E4E770CD78BF0179451C84FE2CD0E3D233E09A751
4F41BB6502768B60981F6FCD12FAFE279DF770A26D72A2F390B82CAF5BECEBA0
8708A3D6B1EA07EC344D217432E9C76E6B590845648531D696EE428FE2B65C3D
AF83DEC48FE616D00215967EC806E0B7135E4E68ACBDDCD0C7458D1EA587B33E
CCE85ED1F4FF5F2EF7AB18CEDF9A16487327DC3CAC470BC33A673DDC44295378
5D4F2D6944A68175A656514425E96DD970D81D4DE5E9441E61FC59ECE8FF86E5
068EB1C90211676F658CE5AEC1CAF14A0F012805FAA4DE2E937E03744732E3F9
84968871D125317E14B83714D18F84E5C4E50BC74E4466B0BE4B2BE6F8EDE15B
5BA0B0D168F09C7C58A544FEA031D46A78E8C8DCB8B0E742828E3B7D17DF5200
D682BBE475A14E5D6F3AD091677CC2E4762AC786600CF0EAFD9BC92A1DAB9FC9
F25B6A0B2942D60706705E64A21CA76D755204C3D749FA3CE81431E83632E50C
9504B72AF7965E6F3636AAA62701259915BC2641DB03EFBAC85EE431C5BF1502
696A2FC6C88A96AA853B4D07B9843C0AEE5983351D10405C55F6EF17EE4D8419
8A9E10E110155916AE8ABD71ACBA23B26E3D17D41DEB9F5AD6FFA10E50B8EAA0
489C6D09EA559B9E0DFCCA1A39673371E8049490871597A19D95E52890887DB4
21009DA97A24208F6EFF8D5782C7DDA21A9400DB4E7D4AB056E6ADAC0EFB54CC
DA835027A419F29D65C2C163CD6FF2902799D11555CED849422395DCEBAA7D01
D4CD352FF812ED27662EDD238036C9A646C280EFC242ECD53B667224F36D7686
3F16000383F5188E09A9E1B8C023F7E3244328862870D89C85F9ED42D3F61FE8
49DACCBABF34E4027EA3BF11CA27B0493E7015852E7EEB380DF5047AE77415DD
57356E07653B1B4E8DA17BB26B03BB06E191FB7F57BF96A9157BED2529808160
1534640AFD502DF4CC430614F792804C8C32AF13165D47FEF1D6AA9194083E23
A2E814FE874B911DB19255486BBB934077F4ADF6BBBFC3ED6251A095434D81B1
A68AFD88B506A966D125E652087A666AE1792E06CA9C7DAFB5CA2C18ADA69B0A
50581BB92A1356887584B94B00DABCEC84A5888BA906D2B237D0E26FE1768E05
DB3BC25F19D9565043816BDEBD1E8A90F3893CB2E0B4C75A713F443B08792A50
8918BF29465E8E9F27024CEC47C494C92CB2C82CFF4F92468593B871697F1DB6
E55F2EBB231F88BFE9882F3847A9CAD50E878F4E2083D6364096796B76894B87
7B6A59D472D60840A71D8CA600B776A14DA18413C9221F730F4CE2BECA91F339
C38E5F1D9AD0BCEB50B7E52DEBB660712732996F9572E449AE0B94C94D9627E2
75FC30DD9DFF1BFE1921F975BFF08942B72D59E2898450699BE5ACA02DB1536D
99057E377026AE5443B5B8E77B8D164B2F15290E5272B2C64B10DE3B1094338D
ABEB6D84A0136B85A552A80AE3E6451EEBC711514EE22BFB83C77161145FC0E4
FC155733F106624BD35956702C9EAED6CEE280BA2961683B841750004243C560
20D4EDBF4044F0E247D957956045B16131155A5A2CF7B1BC59192EBC1F5229CD
0EE7C4569AAC2501148FF2F97B757C512C8213DC07182269DCD201B947F29FAA
F70882D5E42B784224A4B831761423CF91A92758565882DC56AC7CE1F8CC0CCB
477CA9031023CBEE603E4EBE4456186C469B5CAC9DA5727DBC8D5BAC9F356822
FCFDEDC861C8B6559F06F3AFBDD9A0F6C3E33B3F38C34EBA2ECAC588F37BDF9F
EAB7F85B65DA6E204268BC4F9AD9191951C3EE46B13C8E08646484B644D0C255
6462BD7BBA30853A9B90DDDF7AF372B76FE598D19AC35D78DD83EB8BFAA3D4CB
5E17327404D6A835514F62BD91BD680504B6D8A1012797CBA8969611C3EC6454
3291A490B7ECECEB25B18BCBACFAF313AC51BA6360C4F0BC346E50F2CC1347B4
D4AD31E7B1B93CB1A2DB181104E45B6E4DB9D2C9082CD5F8B74D44AAAF83E4E0
4ACEA44C5BA8020DF2C5920C97B1584B7E0051107EE778B10EC2C5231F009A77
1A5F5B55B2F7B559162CD4C17A17A440688A2A4609274CE1CD02D148724B2561
AB1E54A672AC2EF6C49788ACC23ADF1096031DF2400A054E10E28F8BAAAE7B10
F337F31FC100C92E6405D7DD1C1CADCF7E712A8FD41497722398093CBD222B55
9CF79371B1A4373E7162DBD7A4967C8D4CAAEB97FCA86D77E3E150439D42F681
907445211AFFC99BC0615FADB1F0876B750657977FAF5B224FCA748915856FE5
0D442BEB8A77F9298A753B44168D71E5B7D8D042CB8C40FAB4644CDDAA91F6F0
D7155116BA95900DB4A14F7638DDEB6EBA2F8228603C991D2DF4215D3B088BB7
6CA846A545BA053D423E0AA681F2027670A8ABE634D07B0846A2830876FA16D5
97879F762BF7CE394D18DC76D206301896B7BEFA7092B483C9A4F08A49B356DB
2C444B2D7917B56874CA6EC92FA9101102BAEEAE5C1875DBE42C23E7DE937CA4
80468889080FB68E9896AB991D6C62169A628AF2D86BA9F1280CA84AA8CF15CC
932934227CDBAD1B62BE939EC62C6113BBCF86D7A1C356032136221AC341EE96
7753771F4B609B835A6293782B98DF6D611220029D69289B083AF3FF0BAF2E59
29BB08D42023B94C5E08A7C12B48008D082AC5C1C0427AD24E2C9976490B46BC
8B58DF73CC036BA1DC8D789B86226E38B0DB3AFD1893C66B50E2B9EF955D402C
FD581761BC87542C1FFFE3D250E2CF107F0A4307D118828912D14C9792317664
F110F4A09CAFD320D8F1E60750FC8FA17A96860BDD648B857DFC799160EF1940
87E7CB8D3BBD6FE1DC8600DA605F238D9FD8E30152DD5AF9200F8AC8B8FA3941
3858E8A872C52119450CF9056011CF0D1B9910EB4B40F86B92F2F36221AB7875
CCA19E45CF3721111356D1F3E208CC515C49FD40B5C0041310556883CEC750C6
15EDCBCCDF3EF3E8EE27653324215D2855B6955770F81C522441AA6D6C9A23D9
4203EDFEB2A8899B078698314F0898139733CC3A7BA382A902F008AB5B92AC6B
F1104B2CC45643185EC50E2749400B4D9A8BEA502B531A95D074A7642D5BAC40
0B7C57DBB88326E51293ACB72E81E11CA795321E579A13B5BDE71C21B0F7B711
9BB0E1EAE6A7874FF05A6EBCB11B3D0DFA60D4F1FDCE6B39387CBE54C520F44C
06C989FE4605247509EC69336998602318DE152D2F89ED15E74895D1B415315C
CCF6ECCD15CD3C0C3C3AB1F1A6F27F0216F4035428C0EF58020562A57F0E4F5D
B216F5A60AD62AEA3CFD663916700C95E0023599AD8BF5E5E1D8B7A7E8EA484E
2B9BC3B4936126CEA5662629D66ADB23FB175658468CD6ECA301D7DF996E76C8
27664C51A6AB07C557462D5D23EA6F98133850F7FD4B4BC918312B4FCAEE609B
63A22ADF574D314348DD5A81B96A24B6ED648678C9FEEE3FAF4B4ABC91988432
BF3E266C7E71C75FEC2461F4B71B7028415CCED34DB25B1C87ABBB96371F4C3F
5A3DDB5381CFCC78F31123A59E84A773A3DC1EE7D16D2EBCD7AD3050E68B2F5B
879433A41FCA23CBA96BC043DE844726A222F8E7690F4294AFE8B5E7C4931A6F
A4F965AA2AFB5669696B08202B034852C673ECC2D2CB13A29DE6B7B84AF75B80
C7685B16F3F33A59C2AE886F3D4752442EB8974AB96F46DC25B86B07F3BAAF57
821CA397FEA6A4E3B9D38C9A68E23636A15FB82CE0013FE0659093FD46A56433
8A191EC83CD5AD0E88F6356E57156B9A315700669D9D8A3D985F44DE6070E8E4
AF65E85A1A17C87D7082371D3D4884B50E1295C517FC56B868A6E13261A8FF61
F2E56C5C273D04F5DE5D8C5C9D00BF8810E8001DDF0750125FBCF26095A320A1
071176B20B9AA62F75ACC6FE2E31C8759512B691F3A5BE51B3A5C527F9ACD205
A00D5C6228AA1D43F1C6F0E9EA338B254ED9B164D359D7B3020C65DB0A4BAE1D
4C27FF32A5D291D07A202C1FB3301369DFCF49F694EB601193219155501B753D
CCB18277AD919493833AC73ACA7B5E025917057BF2C952C95AFC8907C1029717
80D4F48B74CC49A8ED76ABE049F1F25FDED5170BF6156B7946465D1D51CE9D23
63EE95A66B7B588B417B20D3AE846ECF2693940BEF6E1B01ED4C112B8E1D0991
D0294BB9A13B7E9A883224B0AFCD9F09D428AA79821303447C940325E2C4030D
6483414283FC7AE67D07BFD4AD7D7C4574F0F05157163354E17D08C708D13559
F506ECB281432C904833AA8B3DB99032145DFFB88B3A3F74518FEA9848D5AA92
EFE85AAEC58D3403A416F243F1B58CF54E94F3DBC93516312639544EFEC21F1B
21DAB103F2ECD03C45978D34A9AF47E75D377D3EC454B9E8E4E4B7897387234F
730A1D2C99F7554B874AAD2B92245CCA4AFDA80D1C7AA1442234A1ED31531B8E
A85AA74FB443296734D6B7F9A7E71D17B9438A8FAEBFCEDB510A80A179EC5417
CE43C28028ED2BB4CC8C61623AA82E7460074CD7A9D04043F8BCE201DE521632
291DD559CB82CE0E04016C3AE50698C63E35321DBE396E177C09467EFAF26F37
73067464CB460F7E6FE58A19CE9CBA64FCEB47C4D9C7891741E0A123FBB8FB71
9E6D6C8ACF2C6986A41EF5F57E13555656242DE12053A965E69AD0F1EC130930
C2F342014382F21C586E7C8B935FD90668FF86A9BE37F550F087451064170705
F6CE6DE44654AF1562FE5062F2899C47999760A7B349451A69162F1B7D626255
12150439080FB47F44979B717B73A69F270BE9F4B41D0555E6B3D969E12C4E87
1B24F076CE00A19A3389B06DB5DF396F0783135AB26A74D62EF91E658E419759
560A51607E66B968F8E8FCD31C52FEFB7FD17D352B303F2518E05CFDC4DFA697
683ECBD75A7D3C99DC40C53BB0F0A68C7C49C128507F648221B48FC8DE6A9750
07BF6EFC3BE05801B2FFB32162A41F236832036247C5F7145C1F682683139E21
D0043D17ACC9BC389336C93F939FFC5263B1BCEEEEF1C6D4E507FE6C285D2444
62E06C90DF1FA02934809574A5B0C840E7B69617A157AB0CF1881601EF253F0B
A06EB43DE3BE2530FB83F8FDB2C2A73ED0D6C2F1BDF1B7EE5A0E8DC4A1C038E4
A4321756215EAC98410CA2D353695CE804B7463204E96F011EE6CA8DB225952B
CF9D3854C9EA86DA22AB40A3B3886A6C0542C01CAC677B3C62275478A5CC6EE6
8F395A1EA5B475FB3AA771E383C38DB2E6D5109FDE9B405E97ED9527026AFD8C
09ADE55BABB230D76693C8E5802D2FBD34ADBC0D48CE7D36B986B29BDA8B9B5B
38E548162584D2EE4508EC7EFC0ABB165CC98E1CF0A452E886EF57A241A093B7
69BB09BCA809BC1BE9E1BF3011EE34B526EA480EE2879F3C845389DFBC5FCFF7
B9589EF18E1A4A35F047300D6074771EA4675B7A2CEF0B8831E122CFEEC2DECF
76AAB9B3BC31173680C582EF3A79C9F067B1C1D5C9E915592F7FABF0C89CDEA3
0FE832C4FB773F52E37A9B385E8A28F906499BB7F1AA329748EB929258416A34
D1F24F412C71012BF865C8C59C09D6607358809158C96AA69CB92C96236D3062
00FEC0A6D60143CC3D55F1DF6AAF7C9D25D99E42FB37E277C79BF6BCBA6948FF
E6410BC7E74F3FE437C47D627559B9F38F17E3877053BCC3F004DB440C372348
168F9998865C8B6D7EE450BC57C3C08497B28DFC782E476BEB7F2C5F4813B347
3BB57651FCAE9AB59F82BC229CD4C12771C6D0E14A141A52D9465223B3ED9E26
A5D88A9D7DCF13C49E7E3427B1468DA767BB437092DD7CB890B10E725D99A55B
6543C2AFACBAFD2D9DAAF0AFF6DFEC117599270578EB83D558D01F09DEEB5B77
98D02A78889FDC2480BC8223B359DA5AD05039EDC7280BD9F1606ED5A2FBEB95
AA878584A8ABDF1E8CF78EBE55ABDB3C9E24AC19161569BDE0D66D79B090D239
BB28B04F50B5926CE28CFF48B79840BCB88B39475A7E1C6815544584C1D633AF
49B4CB901556E63BD6391B3C3C3C80C46740FE6F66D0014A2523949B68137F60
4BA7F1A81BDE6D8C23BC9EF5F28324D5FD6E41AC58D6CBFE29B13D874F05B30A
8C02DF0990ACDAAFB55D9268843B6818DD0CDAAAD67F1C43F8454EA7BABEA8C3
C56FA34DC1FB491ACDD3A0CE09DF3D2AA01AFC9DDFC00E0B4DBD332E7A80AA80
E1EE8040D687BDA0971EE623A6FD950DA4619E834957CB1CE9106A9B0A113ACE
AE5A6F53668F19BE5E606C079D70699D8D4D29FB72DC6E795DAE9874207EC6B5
8B1225247062B3431D5341C401C563668C403FEF6D0969CAAF54CD5F89FD89D1
53C58F0D6710B6E22882829376BEC979A67E1B0B621CD8572B3C63267C295820
DD78AA19FF23F80B188F9969CE4D13F0E4C58B74F657E6CE1CBBA31DD5B6A2A5
1DFB6604687AE27779E32FE4D1DDDF485DBAB9896AE4BEC89701F553BEDC8A60
21A6B8466391813B9003AC9B950A22EE900DA88589EA94605EF6283222A4FE45
E411657A641435556166E1B34A0BA7578B14A1DDD2B86E4865F1E32B00231986
E014784C3D073FFF4BBC2B12345A39202444EB3DEB2C6BACC07E8FF81098FF08
4D9E44B1D059C53F7E34FC8686B29862F343AD8B98EFC32D0A1F2ED51B7A46D6
915A1948C983641D635534EC6A529CBF4FCB46D727A6616B98EE56276CB5C7A5
863400BBD725BB08927B936A128B8B65C50F7D0B536D797593F26AC40DA92E2D
981B80ED5D8361363AEE238D66A94BAD615F1FD662DAE00DB38C393FD68C933A
2A880F5163D1BBF55D50FEF0A0220008CD59C21C7ED769E57608B34E65A38D5E
0D698D57462F51387C3E66C138ED90ECD7446B93CCF9A39CFD45F9ECADAF3797
C2EE47AD35BBA52F360E387AA6DBD6AF843C4D86CA343E2368691757281F2FC3
5633487F2C0FC905859443CA79335DCDCEA285804E46661FBCBA022557A2022F
679A0096D179DA4C1E7F5CFB63224F804D3CAEC409E50D986A1599D4C8C96371
94CCDC120FF2DA2EDEC85F664B31B59D64BC75C4D5C9ECD9A6C81ABAE6C118A7
507D248BC241530DD3197E4CF723E84AFB2F18CAE1B3DECB488F4516109BC34D
CB034E30CA3550FF6349B458CB29C8ABFF742A2C915EFB83D07261482C2BBB95
B7DA80EBE9B142D3F6E12E1A6ADBD38235072B72062BCE735C586F73AC4BA960
B60F94611C5460442B946ED0D23963DC921CC2EF91687D1754DBF5B948FF7160
4762398FB607F4322C53A321181543EC7117EAB9BB59D2C713706E56A1A20CB8
F3D8AB760743E5E7B0DC6E2BB57857B5D1DC08FBB910A7B647D8D8D3D65EE4AE
4495278EACAFCDEE9F733638AED8F79F4AEDFF33633C7E9F50D6444D0D04DE3D
D00A5996470B0BA6221D53B854CF205AF014266FB58BABFFCF3895FC4B5577F7
D502C187BF6CB7801D79AD1DBFC1F2E409ECF4FB82CFCE1F46716453592F0D8D
624B2FEEFE7483E17EF5BA0C93D02FE4D8878CA0226756EB778DA76EB8B12E23
FF8D77362B2C522A1E73144B7D2DBAFC48F4F53EE7B6577CD729DE3EEE82CFA3
01F711AAD7FDAAC6AF57C64F3BD58ADB7704EC2CE3D18B0D1774E48FAD69F117
70486C21CC05DA1CE1392FB489FC15376838253A713BA71BD5E18C8589A3030C
7FB08779586196766EBC0C627AFE190E92A9F663E586C03C8F01FE596479A7FF
F10B3C04048C491716495B53D75FA473FDC34A8D9CA81664774F068F20B44244
45BAA5E5927131B397A6D572A399A5561E33CA1E114303F5FB6A2B5CD89D0E2D
6651BCC89D17B682C783D2731859F6C26132370402671888B18234840528D7AF
31C542C249B94370B3AFBEAB99EFA07B6797FB31A943889016E468EB1DD066AA
408DD54EA661697B703402B6F26F9A59A24C09674266D74427C914F067479B3A
4A7FC0E0823871776F853F5103F310B5A8068E167B6E11828C9721A9E9DD6411
CA59D5A88CD6030290B03C9F7F7634AF5BBE81550DE856033C3973A7EEAFB16B
BC4EB329BEEA1CA31962F9873B8B2F16B9BA4C16562D3828538D584B3018352C
DA300425A5D59B8A89042DC76DFFDB6E6F65EF6A5F86F6CF328A21CBED7EA41E
DB011AFF4E580273CAC642775014D13DB2F653450DAE3057E356A2589158E940
8AD9BC5F9D607501DE2A26C3A9B33C6958254B6D96C9E5485190128AF195EC2C
5AF7D2458ED505DB273570367E214389E68EF9473ACF734EDA3E4A7AA5825EA6
85D0ACCE69DF5BA3BC4603CFA49DABC6589A3DAAAC3BCE4CA460DD166D6DA21B
4B915D675ED3BCC8F33C64C5FE3C3245CC61543C7905A55934A4C1B67F016058
43E9B7DC27DEF3D229C2DD21419A36341933A3699E8251DA979410AA10FAFFE7
81B183FD30AD21ED41794D8263A36A8A44A5212CD32F957D187AEA22E0085646
EB1AB9B5BE3E97BFD64B7C9AB8EEDC1F80673685B35806861DEE9E87197F7AB1
3B79C678B153A8440C2C49AED2E5C345331B43E71F08A7FF86D1A71187A40F57
76AF971B1A2B727DBD281D5D33CA6EDCE3B553E8D513719B44FA5F16801924ED
F9C9345BCFE9FE54B9A39BB5705CEDCBEA07F7C9A8955C91B5875129F97EAFEB
BAD97F2BFA8D67828DEBC2D5F03BA39E25E0C8C07FFE48E016A4EE987287AFC7
5AFC03608FA78032A4D2614B7AB66A41ACE97970BD3A9151B9B2296AE4043F31
1AD19043582418BDACF82462BF1D6615C8890E8FFEF0CACDA681CFA1A2ED6C62
D12D47BA3A73BAE5B8F30C668300AA07A75C955F4070A7D49732D073148BD42A
737CA249FF9ED0E30BA68C133AE4D11A9650B07379E14EC6E664D7CEF78D51D4
213115726F959C04D04EC6CCC6D5C4515070E4EB6AD120D762DCAD9881D7B7A6
CC203EC60179C8E6199546C9CFE2A9BB8FF781B99DE8E488DEE3923C5DD00104
FD568268B58F73A530D187290FD77F8BF4D1F134724AFB4F46B61ED5CE94CB3A
64B7EBCF757C1C8BEF1450A006E6094EADA15827C499C166A9B768EC95FAF533
017A41FA9D05BF51D10DCDB5ED1F8CBA1556C42FC97C461CAFA75CC4D363B1EA
B08AAC559F33FC9278A5490A4D016D86132F1FC2EA71CC5D5347A131300AC3BC
B6525F5B66CC3870D6337B70A2E169946DA0B47BDC9189E05406B0E9344B3A6C
F9FF85C119761CDB9C2F06AB050F48E538CE03C12A6A786926CC0ED9C63F8FFB
B5E694B7F8233FE2931A0BD45E5FBB533BFEF03D9490181F9BB8D010EF4276B0
598EB0AFF9C1EADAF010B9445367EEFB6F38E6C53073111B042E5C75DD25644C
138DE61586CECD5FDC4529763E1780AF187F071912E8FF214B3DFD62C59BD0DA
9C906401FE514DA4DBBD11D9ECAF2A50748D283FEE7FE3A07D3B5F0EFE139D65
3820FB3EEA998267FB51CF42EEAD7BB650B2F9535C4BB445FEFEBB1E5752CBC7
539470C7635D7DD5FD719276D25B1F67A774D6DE23B4AE10F280D6BD9CF8B287
E870697C7F524665CD2ACA97F3B6680E7DA0AD67C4171FA1A3A1E8207072F258
4224B7823BDA6DDDC51C0D6F24F45E53A4EFAD05C0E06B89D9C5968459A61F33
F240829CDBF408546105143EEF17448E1DC4DBD38A3CBB57158BE4E2C0F19227
3563AF7EBE0FC2485DB7106B3B9A3D01387289C45C4616AF288C28D41D32049E
08055E01B34AF96F9261CCB11225AC2C0F4A8F6A3AD155891C5368E6324127D3
7F1C2FD7BC35D97982298F0E6E36968C8B49307BD6D8C65181A42E65C3E1CFD2
E73E66821ABBE952259A83E8464F81C7CAED44D2E4FECFA72EBF8E6D48944732
5917AA985CCB7786B5BE1E9AC5D20796A49A7350707CC29D66C887D41C056965
E5BFDB249D4DB53CA56FF408E200D6FC94B9257B8372609EE1FD58303ED9D121
3AEABAD0C1AFB6896CD6AAF6F3B06AA514584347213FD79131EAD11B2A32033B
CFAFDE09A8D7DF149E8E3ECE04FAE2EAE4A5183AD80196FBFE632A666964EF77
572B7FB2D4365582E4B187B6B82816AF94A3A9362E8EDD11414584A51F1D3465
497072421B16D74E87CBF365FC36D5729A71D31129DFD3E22A981ACD61C0BB41
B57F889E73009AC02A8E744807321EF367B88BB14AADD9D9E86A25A06CB88946
31A2BBE4261D092954AE8B3616D471B990FB29E79D3405FC058411A569E1E231
3F94897BC7138510021E13CC012FB104AD0463E0BEE20645D16979854FFB017B
432BA31E1E3EB4135A0D606C6FD5702CFD57C6F9760A27B09B21B014602D45B9
DD07A3F868DCB6BD79DA98E65C015DD2615C2DE8E8719D8F75FDB896BB3C7475
B6585A75EB65D6D03F9A082B52E2339DF1C3037555A5AAEEBC7F4E421ED1744A
587A737894FE46ED341175500094C89AB44C94351722F935D28243116605D91A
A272CBDB3C20AA210FD7751654036895FE162A6F1598622F33480C34752494AE
06FAD8CCC7239C7ADE15F8A44FEEBD26FF453DC14D9FA00AC5DFB99BD8677BB3
AECC0277307A20B641E77FE1B98642A1A622A28F6657C76F77B6CDEE3F96085C
321D0895836F1B99BF1DDF0AC75FDC56C0CE2FD5B13570599C258B809606354D
3B959ABB89389059A494DEDD34C9558DDBB1CA715BF7AACEC56E4FFF06F84521
A06BDB446FCDECB1D6BD82FA54158BF6DA083CA47A74DCC307A1293292185971
F6D3222D89D2A83DF254F2D38BFE07580DB0311AF7EF2B1F0A26CA59DDA6D011
F79FEF550DF52C435281D07D0BC24590D8C33F7A5B0E360136BACC6BBD9C11DC
295AE534C4AF56D964B3CA791C136BCABE40C367B0EF9F1A1A082682EDC959B1
E6E57E9BA65773C218F6F1981BC4817CE9EC9CF116A82C8607683549D3BB8F8C
229515F952B72155F809AF8730C1B3028AF126557EC2CB846F004573C585B080
A7AC7A3F8A6DC3138B57F4DE855DE567BF2A377CBA7931BA7412D4FAF6E2E3C8
B5345709E0843D17D3C5727AB54DC757EB094857E4DF10C9F785B14F4A6B5F3B
4823A4E165327B61CC8306EB5A5F9D9D0FDB9658C2EA3630BDC2BB93FD700173
35C7751E074BB831F91F7CC5FE7EFCFFF578C1FE429B2B53ADED366BD57798F0
A499C68E97E7D0CCD7A0F952F5608562153DD6A09E462ADBE677E6F550F93922
E927E1036763F020AC43AC01DB8B5C1ACF1FA6F771B0113D1F81D052B32F50AC
86A7CDB5769A24EDDD91FBF6C5B8C6994456786C670F70C8977E70993800603C
6A74BDA21E4213E02C3CF434FDB5F0A7DECAF84A6B4D480CDD45A30BBEB3BADC
1A74A1F1EA8E30D51C68FDCBE097C0DC1353F3485B361FF22160C2FA737B6502
09C2A4CAD064E43E509B3B941073E6CC072FC1EAD6ED4CFF6C3D9872D65EE8EE
AD9D0B61C56CB501FF704FA4634241F6F4664DFA5D4263E087530ADE1BB032E9
2F91C649D028CCE273662C91844C809CC2ED1BFE2D386227D9659285AF0570A0
13D3A84D48488884A7D514234DBB867AD2AAF158CBBDA080A5448FF51E8E473A
FCA6BB853E2EE3C197AC79F6C08FAAA470CE840437CE7BE0CC90B8843B29A997
3E92A64E782EF8345AAA0EA74EFE4492AC0F942C81406DCA2D5E7F90D278D715
1D59597FB7768ECEDA82478ED288423AC23CD9F29923B2931E05B9DF0654B536
952EA0DF14864C03F16DF011027F52B2BC85DC24548E7825C5271DBD28DCA6B1
A425106194273AEA4EFF2DC67143AD383A0409A4C1CACA0292E356D0007481E1
015EA3FF79930020D715ACEEFA264993D497B0B38EBBC5E0DCD6D6D2C4E34F96
E7153732320F16628FA7917233ED662579985283FF986567D89B27EDCD957EBA
EBA0F3516F35E08E0A7BCF6FF6C6483E256522FC73EED8C3C605E5D32ED38169
7A8CD8EA891ABC9FA515BE07360D61200E7FF9045257D254633BBD929CB36721
1584805688C232D2B236F56713C8459A2E17B64D491AA6F1F8523E200FA54610
7734B276D7DF579D42BEBC7E9014B91C2F1A8D34B15D5184F32FDD2BB1FF9AD6
4439B70D37557A01515AB65ED0FD98863694A2A26DC767DFEE895E6D36EBBA0E
B51AA3C1E55BC7DFA1968908150F9DB90F0297AAC58997EDE47F1862BE7093FC
FBB2FBFF2F9EF8C864291F5BB66C669965C398389EFB67E4109D5E0A6DCDDCB2
E2124D53A2D5106DDA4F328607F749259471945843331BB382EFC1B0C41587DB
60C1D39A78B96EF9DF60D8ACAD2BD90CF4641D3A18DEFC3B8DF53EE8E41302E5
97B15C2F640CA86F291743F03A6E7D7F5EF270A816607F248C5C1D5C56035A8F
FFA4DC151719BCEC7407A248870FE02F00F8F1692EE007A344BBE35D527F40F2
E194844E76B625836C94F281B25AC08AD15560CE44A39581BD6B555165091C5D
410716692CA824929B84DC8945749689F439AC399E760F5FB59AFA3CE08E8A33
F2BEA963E7079CAAF932DA184145B6DBD814C80F8863192CAD61512C1B8F2415
761454AB113D58690F17EAA0A31E1D8A3D9B31D6394FD5291984F212E04FDAB0
2EF2B67F2319F6D06C6778C4E2B0E9048F41D76525EF6D6BEA4D391DCD5D0826
8EAB44BA2650CBFC0CA9B55CBF576B3ED40825C75260C7BA8A5A0847661FEE0F
6B879C36B3AC6F09C42B92571D1CB2958AB0A4B85D6D1BC5ABB0DDCAC505B0A1
16055E404204AA2EBD98657ED2E5DC222D9EAF5125485EE20CD2A2F920560080
1D01D06AA4C4B2A0A5A78489BD7C4A0CE7209E7A02792CC03A7BE44067FB63B0
D6E29D278D535368BFCA054713E33E36DDDE639AF8069CEF3AC8299AAFDD823A
C60FC284335BB70455CBA1DB1370BCCD254FE4322AAF548F5EEEF3E0AC96FA7C
439D2554498E70031B3F522604AA3FE461C90353497F4C10A40983C953F5E476
55DEC4152DF9D9AE789C6275AE8F1B47BDABAF4FD5B0892F1CD64DA01242267D
25286BF074A9EF6D192C27801AEFCC40BE77E249546AEADF4F5F8DE23FAB081A
76E735B56D1269177EA70352690AD7AC8121D008BB28D7EFABD32508E19BD9FA
F4D8EF498629EF7B8682DCF5A9BA9173D96F0AE7DB86880A093297E9467AC1C1
21AC6653AB3980811378058A60BA811CA25AE84386036954E9BE823D855C2EC9
9C7E4EF566497DF949ACF8E1839ECD9476089A24D83C4BD4D9B1ADB221AE1264
10D93C7EA51F8533C1708E79F602D75F14662A22FE88A09DA8E6DAA48765088A
A83A9ABA1B16D22F50CF65B954650E3A17039A52FD685557F16E60974CA12565
98199CCCEE0D461B765C3016586A709FC842970075AE9581CCDFF42AB3879F9C
3FE3FE32664C8951308966F5427F75911C5B90FA361D46037C2AD4C75BD93DCD
F1E518FFEBE884DC456E8E316BA407BECB0B9EF3F7420D93426C7D753DE0B2F9
53C1730FE9B0C05AFF1D37E023BBB0B0C364308BD3BEB4FD3F106E062555A574
DC7521162EF1F88486E4531EAD6CFD24B096CE541942790EBDF132DACC923979
0F6B0B3DD6FACF052D2E1C0EB34672AA79577DBE258F901A0B50141288B7EACB
5C756637C91648B121F9A121DB46042C720348F8CAF4C31690B49F454A8BFA55
2261E9692C5744746C4581DC7FF8CB9A11F07A5DC7FB52A11C92DC0E472BE30D
B70B60A0A5BBEE6FDB104EE5788D4654BDC3C27E42B5CF44716B01F496BB82EB
C14BF1AE8DBBFF6170BACE74C2023EEB183C93D0673EDFDBA3BC461510B4437C
63322938A8899D319FFEF051D62CAC60AEA27DC8A4B5F2F38D1AED538C2B6703
549000F14EA21D789687C591FB3F5EE20909E3027AF58FBF21A714EE76051B22
DEBC1D2D951643DD9E77D144E3277BBD72416F90100F71FCABDB90FF8742689A
121F87A4C89E096B415A14A8393B1D0476579E56A2E963AA04CB9E7448068F51
480A54F0F6EC95A7DC4044F60BD2514D0B233A8804D94809CD3CB06F065F47F3
21AF7C579D40ECFC539BC89624AB7CEDA811986141DCA92BC44A599A2F488745
C0F435E6C537309795B5EA2AED5ED3DAD42D3CC952F6E47DBBEC40C9B7C1CFED
4A41BADF2F9A5113C498117F0C50FB1669230ED4C68F9A415BBCF9471A54AACA
6A05C0467D1430C53F2889ED97298432B5A73B515732F065359CE74AD419B077
F12EEC30AAFF954FC358E0F94273AC56B95FC7BE4E71EDAD2C96CB02D987DDFE
C64ECC1D46BB3EAA5EAAF1B9428FB71793775A10536A91EC3662104D433D5012
4E5E2929713A361E81E0471221FBE4375D1DE87C7BA7CEDFC2A6B3B718206A2F
80CA19DA628C6A5B0F4FE21426F77882275B8EE6FB9326FC01430476F8CE199B
9A37F312C04A1B7BEFF0EED509EB52F96D886A04A51A5E027C900C9ACB686099
0325D6A60BE8C9300D73879721F91F4C5FD367F9E1F68D5E2C68455DAAF61C73
D2254EFA2C215941383124196569481872D2637F7C40061417CF9247A5E5227F
A99FBA99942BD86CE4B46FF5C69BABCA7E769879BA57A01541463FEF58020562
A57F0E4F5DB210D95DDD5543BA15221D9716AC3D4CD2AFA8D9B404C04B43EDB1
C1AEF9D75056B84005CD292DE5F77ABE35B2D496FE1912DDF6CFDCB995609788
A176928BEB2B6E6001FC86C77174F5BDE64010F443E83398E3D3D71E8817003F
448FAB06F5CC72D8902549BEC97B2E749845339AA18BB23021C91B4155EB4326
4352337F9E1AC63691E95FC086B28B9F84206E796E0D686415451BC4516EDA1A
A0D91039E5B860C90893FC6E41DBC54EBC143D45C196E89415EE35B7AE2C8627
F0C0577BFBFDDC9A774445CB9C354935EF5F00953B121F2D290C00B763D73FF9
D164A307CAD806A97B8352D197D6C1D6693EF72D2D35FFCCF06A96E0C4524624
78D318B0A04273B8C4E2FBFA9FB84FE59213C6087086C72E5DE832292BB840B4
5683E8D9EEADEE30C44C51D1CBCE94104368FCDF31E3069C561B56E569B967D1
E9136FB202B9A33D47ADC2772ED042F0A9F8DD7CBEBE018E1F056476FC098BE2
62E3C2E63B34AC259F84ACE7D6104AD009271852AB2B785BC982B9EB2736D453
D66E3EAD617C93F431708ECB75647E7BBF3D812346265355FB788C1FB0F43104
4979F76533FD1D324460CED552C4C9A339DADA1BDE414CB914CC9ACEDF36E5F9
3171BEAE339137D94F544F0C6EF82F0DE9599E8F9F8AE66436A20B34B1FA3CA1
23BAFFACB6AF74398500FB30DEFD42BEF17B232A611777FC319193DA216221F8
42FD0F3878668752CBB97A140C81DB516E544E04813437A0B89307BE5E64C65B
AFC5DF1A23D9FADBF762498DEB47B3D854E11A75FD38ADF1D15D6A0CC02BD9E2
665DA9C303B805491A4E4E55F03CDB489351C9A869BCB90A840609275ACA4FCF
AD6C3C935E56C071FA9EA5EDF607C614359D64AEF34AB791343187FDA2E69EF8
0AA53B258E61F1106C0E136625FE274C6AC706B516CBF14C54000BC2B7B0B378
44794DA0CC4B2AFEF64B1CB0E13CBA5639D7A8B4C9EC8F5EB857F6429D3C2BCB
E8A6FE450D0D9586AEEF3589F7BA2FD2D9A7D56BE01626624D2044B3CA00CEC6
6649E991CA89CD7A9B34AC0CE3D7912D96DDF3DEB03A3EBCB023ED8878DAABBB
0754CDA6215D31EA1D3979894B278E35C26C3C50F4AEDEE6941CE726EBBF9B77
35371FE5A2F54624315981DB9E59213A134DC867BA4BEDF8592C876A83CF48E4
A2F7E92558E57DEE4EC62BE1B20F349525DC3AE759E21AEED1C09E800F642392
F6C98BC185514EE68967025779E5CDD456756E05171A62DCC9E07F228AD47070
1B0D6560C44DC616F94BB5BEFA7092B483C9A4F08A49B356DB2C444B2D791187
904A6AA5B52709A8FBA2E4C924C0DA8E4692793C76EC2115E6B4BA25D13F5D19
5BFB749751279816BC7FD62FD9149C1BCCB865978492F2A9061183D01BAF86D4
7649970E9E9AE3F70095AEDA7B41CEFCC7713E723E936CA008FE90CF0E5B210C
C70C72242AE780C0F5D6C28F84671A45E86CDFF07BD97156DE5D3A7F698B8839
2DEC0890EDB58ABE5710062F0BEAA6191A51723300EA98739492C91EE775E06E
20F34322E5C575C80EFD0638B2AE4201F8617D411C52FA6A68FD856F5BF2EEE2
9043AE119301A177029DA4752800B15524A93F4754E28F4ECADBC97BB43F687E
2003D7497070937528F717EE2E59FD9E50F7090C17AA2EB223C6FEC86563095F
56B93D56DF696400ACD04765BC793759E6BBA26F48943BE06E64726A02452B47
061E1585E5B6140AAE98A7603A473DB69D6AA93F3CD6F9A1D56ECBBA1E96FC91
CAAA02F85242A013A82366A0342B4D1A81D3A598181CF4070B0BF7C049F570BC
E6E2041497174C8AE0AB3479AA86E7B615D041F7E073AFFF58335E26D22EA465
1B178241B16274A7CED74D9C4370F5128980C31A9134005F3DD49190EE8D0CE9
95B1E67E97E05345B2970824C3A818B3A2FFE0ADCBD3D1F3B66962A7C6579DE0
654DF904567AAC3976F001175363425C4CABE113B257128A8495C3B86E77CA94
92AEB601D13CF1BB3B4AA1AE75F9D2FB0ED1252A8AA4E5D159D0E77A9AE27CAF
C2483A172A22E3CDA9C565EE7019A50981684447F68EBF491EC593714470AF05
EE7FD59641A99D3529DD3B8224D77F85F2BE4834A3A78F5B436CF000514A8E7B
A6FB5B44EC192D31B048416F609C27A9147FA843862574D48B8B64014D5A4944
3F5FC6E21518DF676CF6E46A1292A838C381D0ADA8F1C35F6938DD79049927CF
A9BCA1F6164C53B7654901E2679B339EBE55411D9D0784D058C1C336B45F1FF0
6DB20D9F9AA20F92F1501F9FD6F89FF2652453807D4AB4E199F59281F5D88499
0D92861BA0BEA5DA56916490AA089BEB200BBBC5CA508A4D848A9CBFBC8AEC71
BCB9AF2672DFD2EC039E89D7FC0E738A0E0ACDC62677731A4623EBB704904B70
8C6670F0E0B1A2A0B57E8C0854EAB18A0ECB0B84E206BFE1D6D0CA544386D209
958E82E39C166F9668965B30E44ED3E9908B59DB3B3506C60D3F766ECE69AE27
0EE31B9E4DAFECDD6DF4D93778E6972E6C807D7ABFF66A49A235F6F3C221A21F
A27814F2945BD12376C76380131001E6A9828BFF34CE9E8D50A09530D29617D1
73784071C57140DDE858D6FA5E5DADC4CD466B12D7A09B0ADCBAE3D15DF85ACA
A6ED5A6BB2612A06E9DA3C7E35D22354F4BE860A2B46225D1784698203C4F0EB
A2C58BA5E15B2D04D05046DE4B8AA759050A4CD64E67D56C072FA8E068779D6F
EC4A4E1B2715664F98F1E30C448F26344942FDFD512283643D9BA7BE0DF887B8
D92AC4A43F1447955F419C527700DC510B038A7DCA1BFB50F26B9439ED2BBC89
2659FD3FB7E5140A4CCE1C25F5F7913906EE4632C790C52F35F10D50905FF0C7
8D349C6A719B2748066BCBC4698763770EDBD23AD9E20C6EF4140E2744364834
CE13CA9FECBA2DFBDDDB68AC73E6F7FAD03A805F7D11FBA9BE71E209F8ACE4C2
92A4738704FC0AB763966458C914CC70675DD35EE8DCB4CD352E3AA258B3B781
1DDA9D7FA0A384669972B0E4052646CC24A48FB0A4614612258CD4BD6BF87333
4EC7AD0F22F694A9B1B605CB50300FC0B62D3E168EE1B0AEBB2ABAC2B90A514D
97941B12553886B0A8AB0DB6CC37838A6472C601C215037E94AC894596B3DD23
80CC96B5155C7598D6D71114D161E132C41C01C8B0D18B8D2B8E98FC6F61855A
64DDFC439E4D8DA1B7D845479D2C1DC59FAB791F69903DD5379C49DFB01B22FB
78DEDC4E8424A98EF19CE83E6F8C22E5A050397513C364ACBA58A0399B8E5845
A4C3F0939E28CC5154BE59A138DA64D777F3EAFC1572D2E56F8586351CDEA40D
784D321CE2C68A2B4AD93F40B85B005E15517352F4A70EFD79C131826FE146E4
C8295A9202401F7274A15790315DBFCDBF47196CBED5C40B669F0DCE5E1FD20E
DC030290B03C9F7F76464B7BFA20AC6EC4DCE3C1D63CE9DF37155D947B055CF7
036B79F050AC81BCFDEAB59A75C2FAD62B5ED900F9F9D95DCF958D640F60CDC0
768741F927B1B78AE7718839EFF456FD952E94337FEF0B6B2D1EB3FBCC801F03
1BB1385023A014B87059314CC9332BAAFF7C1EF565F71A7EA8F103B5061001C9
5B73AB4AEA73AB129BF28FF961C275A6578B7C6C7D40680E2EF13550F80BD0D4
69C4F8682839C1487BD6C1A0B56EE8FD852899BDE36744C14BB918AA5E62E5A3
50CAB715017F2A611AB4D135FFDD0C872798F06F6004F25A5A8E8892A1A392E6
DBEFA3F66301B00BEF7CE27D7467A123484D9F0480126A36D76BC3F262FA279B
ABA8F1BB4F07B431A1EFB315AA5BA3E80AC900FD5ED52EBD4B10AAB2A5374674
B232F80DE37E0D6778152F90E74CA15FB6DDEAE82A5C3AA6F551FF6EBEDCB8BE
08FCF789B158DFE9181891177C5D637B69537505EEF3F9C30855C6332DDD58A2
809F9890A5552DE4D6AB773091F63732330C3828D478B2CDA0592DC80762960A
A8CFEB282301A4E342028B149A4C784B170575F2CD0EACFBBA826D65727B8067
3D6BA889F461D7048C2190616F793DB31310AA0A8F45140EE4FAEACB0A526228
AE299C9352CB5EB8F2D1664F33B77E60BABBD84998B1B1164EB30AE3737AC094
373F1D216881338D00027C26504F0ADD190335B8F31210BFC4B376C967A73E7F
D49AA3466679E8CE0E6FA4E38CB2EFF3F59156332DADAF3DCD4A1498AF816248
7A9C8AEB780262E71C5D57C1757E69DA6CEBD01779B504B08FDA806B70BC9271
B58F35434A12E8F25CC476CCFE220637BA69C7965DC0D8F8B86692D45186394E
0A1617F07EFFEFD7F25BD5978E7557824AAD36B6349FADA4CDE0472942E28748
3E4CF87E1719621E73D1924CA504825538CFEA5EC147472821B827DC3EC27D23
9604B5D6C4BC8AF397729222F3B7FE28FA141151082AB1027A7C100AA78FEA7B
D18D688A1DB92AA489E8C04207F2F983CAF4536CFC511D445A13F3F7C33E8265
164C60AFFA9D133FE33F87D6726B9BEB9D8DFEE3348FAC5B0719A37DB107095E
30DF0BC6D5DC060750ACC2222D7328C11427488F58C2749C285CB1EAE3A428C9
1E35A714FA872CE36DA43BAC36E7E75A1949EB631C21FEADB8AF3344D01585FA
53F13B056A2A99C929E5BA5830B9E88A479DF1EE8F6219D0882DD96CFAB8653D
43BE4C4CCC091AD0F9957E0541CFC69B62A9EA6BC0B6E0337ED4B7760F308D8A
99361087A534B6D3CF5B66767F3198496EDE0C10FB8EA332E1AAA5ABF67ABEE3
A6F2AFD87D2667C50A07390FD01FC6CE69EEDE25A0C58C98A2AE0588690AB98E
5D6E0EC1F49E0464F79D5158447346300970697E79A5F4F65FDC310F85FADBF2
F7E039F22E7BB7320CCAD9722595E7497392C3C46C5FC40BB4100C40CC81B344
5B02E27AC2A2FE3A14C5CA57DB545BA4917ACC7B8F7182873FD7866F5F772E67
79BDDC994EC8A763BAEC2BC1ACD5DE363DD5E2C772118DBB5745E747C86791C4
D8D94F6C7809FA24383F3B0086B4622477B280AC94BDE02E173C2E326F290907
04D06A4DF90526B2503008ADD57810F764FC4E1C9420079898B318F28C5F3F5C
6EDA9099E9D82F8A32DE820ED3A5C2011B842784111020C25AE0E8811A1506AE
38F13A4407E66CEF10819E7BB99D4891F331978D6AC89C5D7D11AD7D7E6E69FA
E3CC644565DCEF43F6C89BCD2B604D67C6831EBE50A8B60C5E8C27A51D4F083A
443EA9334659FB1CB69307AB2AC90AF731CF03E0FC58752B3FE0BF95441176B1
0837D41D68B15F2B74914B08459C66E1FC31157C79495740067D88934C7F7DE7
96595FF66A429D8FF5FCA7B5F53078556F87DEB3FAAD963C8909CDCF0C09C864
86F508AE91D36AB08E7214960AC4ED72101CA030BEF5C410DCA1D11F770EBC2E
641196A40F43F24CCB7D1E2AA63F6ED520966565A91A5E52796975C8557AC71E
FD9E8C4A77C773CF44E01D48F1CA50929C208B4D227CF54ED111AFADE7A51819
89FF4A51C89C9F0FBD12D0FB7DAE0D2B09D7E812665ADC33831D41389A5C340D
D4435E23F7395871ADE1695A097354B55D06F70BFE77AF3BE36B5587FE3B3674
C6946AE88DAC6531394BDB5BB5D22DFB161E1D6B6DB3E035241E3E2F47B265EC
4F5C6D3D7F2A15B42461B544054ABF0A3A48F40D2D8392CB24B922F94EDC99DE
5512B3125A4054191383E77E963DAC466447028F139D9C6A52A82E3F29539FB7
F8E16596FFD4151B332C718B1732E2D286F8E6A28A5AA2A6206FBC132F4ABF5B
B7758DA4833E580D97CC9E7A0AD30AA62480636B595CCD064AAA8913F631B663
55C40937313BBFDFAE2F250B43DEAE745B4E8E4DC63C15F8FD1EFE4ABCCC1CF5
880FC66196E6B2EF514CD779900A4156930785F1BD24B442988AE5DE4D0F4F81
4B77D3B6731568486D5A0CD6BB35654451090E27DC1A985E6F3CE8B6695B3C20
1F4B7CD67C0896D9483299205DE91F70834CD87323DEE711598377B8A1CD7DB5
D35EA5C80ED2A7CDA10B31287AD9F5179DE27EBF8656E4045A25145D6E0CF1C9
DA430D0F857354C4916B83066DCC623B43342283C7333DCFF7A8E1EB4419A6A1
8C8B8F25C505F2EA29120E4FD48FA46D41BA6972A427EF5C938B1C0A5838F882
764801349376E15AACAA88BAFEEB7E3C8132122B802045C00FA6B86363D2C9BE
917105F07880B030AD1E9BFF5F40ECD773CB0243654A34C1C67C390186CE7123
78CC6217567E42300CAD9788E84B4399D4C62D85B43354FFB487FDEBB3F6C51A
16CFEFB149CB67410C30C1F0203646F53CDDEC1A4A0B99E1DD8C3FC2A00E05F0
D6076A34A4B833ECB05A1CA91BA88B6EC44292E10449051823F23F527DA1D580
610A916FF9E4B2E310D48403E301699E50BB542741320F0BEBA676168ED63314
5AE0E97EAABB279579DF6741F6211E52EE1B89F32F409EF0A0DDFBCB2C1F45FC
45F86254CF9E3B344B5B3F2A805F8F72F5C3B587D4CCF45388E2DF10BDBA65BB
8EBDB1DD7454C603F478635B219D5C350F822A57563881E59CF308A0BA859C98
11C7F4528F51479C03EAD7477181F724D242E49D35425E171592ECF80CDD3656
50AEAA5E1D52D8F88DD499F55DB994D08D78DB2A5DFBF469435B4A7574A4024A
C054F620BB04BFED11AAC6E3F216FB46074FC3278C2BDDEE6367CD66CBB31886
A1AC1F7D05D239E7299A3F8AE26642D95E4D5E8DE9FA1A5A27B7BE3561F19B2D
0339E8E0D4D692A0AA8495E0B25DEE170E15EB41EC43CC5A421DA0E3BDFDD78C
647A507CB9F67A2AFB114183DA45B3E61D3E1989D5FC1640FCB27235B7BEBDE6
5A9959F816B949D378B71EB5DD0600277B77DAC49F1825ACF6EE5515D44707D3
6E475EB78FD45B008501E9247BC61C29D379F2DDDF33386D5FAA4C18AEA81E9A
46CEED5524BF40246A18A8D921257BE9AC6BF7CB079E42756905C1624923AE6D
B8994DD4DB0D452EE6690A8D5F13D786DADBC2D91CE0B646D8AB5073A179EE0D
E00057E8E39C2AAB5DBC6B4D224FC0BD03B4E41501101AF2E9A2A2303A704C68
3E6C590BF297796D74E828A14B092920847E147ADBD4EF63B08019EA55B467EA
1F66F4CBD23B811A131FFDB4948D83B6F3ECDA8EF1A082C93DD2F916E265D752
6CFBD3C7467A15B9B0CC1EDA67E0C11F7373A6EAE1B2B52F166D90B23636C571
FBF119C64F5392A4B596B6FB9A2B8BC293A7C2CEF9A83B6DEFE5210979A18FAA
038590EAC99330962F5C2BFBC445FDBC0992FC3E3A328174B2F2AE6222B01345
27426997D0097B73BF7F4F938688401784403A7FC9C8720F25D2F30E26D6FB3E
2327440C0EC280C2C10C128374FBC78BC39E5A27B81550274A1CD0DF7223579F
433ED6A18218DF587BD534F09BC26A8C1ACFA2B0458E662FEF702D480679F3BC
EEEC5E41DDB7AED48DFC92B460EFE17923AC043C72CAF7696F7B08049AA54889
D43B95104214B86E9F39AE5A3B75E59E6BA8CDE849B5139EE86EF4E92189E7CB
B584700EDDAF4C2885C99AE53924F1F8E2EB5DA89463202C52ADDAFAE2612B21
B964710F2BB620F822CB58C8E21D793B54188D11AF8339662D164EF37BF8635D
5E0A836897CD90B3658EDC786857B905C7F1CB57AD26E5C5B010E655A41DD3A4
AC1A5BA0B78D6A72C65D92D917E2BBBCCEC335EDBFFDEE3E46DD584F04936B53
C3C81CD9E76F78614DBDF2EB65869969F265341938B2C7D6B979342F0F7C7258
39431C54831890233509C6FA6C2124FD165E8447A9986794B83227FD4117B279
84A141A4B19E695FBE69BA85A4C0A125CFC22F5BF18F89D806B3E19297EDF9B3
BA24101CC96B6EC14A211B85FD78B94FF98D6281C3C294A4355AA673AA61555E
E91D01EFAB45F6927C7A5C95A536A97D54E9EB5D2927F8DD71C97EB8FD9C28D7
0D3D5F726406002FA2421F5675FED3B4BC777914F71C11F681DE70E20C6A2FB7
BFB3FBBA4D52B6BE324658866A7782C56FC2D3D8C15433AC0F29C2AB604224E1
42F3A042F1C9B25CAB6A4AEC5FB255306599B81B13D33D91A461C8A36A6B7011
3D5EE7B15C46E393933D2C0C9B6E55C718900ABA46C8E1E8D30561EE8D848575
17A5F51E22F26D51A08CE882315994E7704F25961EE1CDB56FC78B8F7FB1D146
995214AEC9DD12F893040FC083FD86B4D996176455BA74C8A97441EF1DF273AB
83ADCF6F99961DB2281F99EF93041C023D45ADBF7713E3898334BD99CFBE66C4
FDBDD9B9180622A9EA53CBA6C0A0CABBB72135572EFC8D9D95FBB46A1594E5B0
1829516A4350D296BC198DAE5C954D030F08DC14942E99643CAB67EAE604EB03
969CED4EC23CBA3CAE1AE51ED9EB74A0D97D8FA881C188C233363813F8F0BDB7
75895C47468A8EE33BC503C7B0F87EC79F901C42B5197C68B8679685637F6AA4
F00930C89F95208CEDC5DB5105D2463C9E329AB4A26FE7C2418EEB63B7E39310
8CADDA24C91C1963D188840BFF3C84FFFA505C304DAD6BFCD1A83D0D7077442B
9664CD43CC1BFA3259E016212EF17AE578C0B403ED433891F4A5DEB671999343
71EC8910E5644EAD188175137952F4DB65684D6CD4AE246EA88B6567C07522C2
4646216B28BEE039B2FD87A31B37D1029A9EA5F61A91E4DD851FA1C906963236
7CBB413F1688F8C9B8F0BE5ED8FC0CCF161B23A5061284E6AF01D8B9FAEE6741
22BA926D2DB941B6F84DCB70FBB014CAD6B16DE5757CC78503FFAC2842282954
BB4F31114F6BB6EB3FD64AA40D1E89750D1C3DFAA3832BF4F9861632EB43F94C
377753D001B0349E045198CEC15A00D0B570D3FFC6C760D688D7FB16FBEDE6E9
8A7092110DE34EEF27482FCF081570B20A022737A36094DA10CEE6AEC179630E
1FEBA01469CC999C2698D9FC0D30D42E351B32DFDA1A5752B5222EDD9012B45C
F0DF0644B2E3DC0969B7FE6CC9CF1C0C94CA8B063A6E51A2EBF371263594A34B
24F711FF571E75403D111C5EFE83AB5351D360814422D0A94B0B67068836AA14
69771E77444A47088ABB8FDB0197F1ECCA581B102A8C283F3B0F9995EC0EACFD
83125F1EE19256CC5053025616EEEF28F24F95FF9F8A8299F064FD5860CB7395
6966EAA8FEF4C2CF83F00C876D831ADA61B11F5EC2A7D2C1CEE14D1A67BCB8C1
E3099DB8419642F9E1FD36D119C88AB05574832207108DF6A3D467865B963C6C
B6C2BAC0238F0A2AB3DA276EB6529A35B41B4B6200D8F97BB703231B4C20F535
59262D941F33CAFF807F256B31120CF711DE24CAB53C62484F3DF423CFB21934
CE02113E105FDFCB7879A80950BAD24108C2E2C56EA5C8F822C591411144CE72
E06B401B467E90AF68DAC5B52DB3BD947789E40F9B74CCE1D5CBF635AE3D8A6F
D8E32F1B23DAE7CA267896578F46BE8FA32625C7D97A289538A8BFB71342EE38
99DE4C4D470AF4DFC5E5E913E24F944DF0E71A1F3A16609E7BE31EB814C340F2
4A30B1C3E6AD87C7D4424486F4D2504B044B73FFFF43DFA0932B65C1FF7776FC
2AD3CC8496259C1A5184E900EE6B0388368937076465A87EBC1E3D56B3A4CCB9
3C5FE93DF12830D995534A8D82E4B822F07B115A3759716BD1E7369C37B87613
412091CCBDFC2E7E1A52D6663EBD8F62062E2ABACCCBA95538C0C4F37DFBB760
01E331C9FEC79F9816DDA5F458D34D1C7F7EB6F5775693138F94B902610DBE2D
8B35321C8B84DC6B6393343A1ADD11CC83EA7E165EE1A8D0C140D9870C6801F3
4F03D7B35F653CB99C6C0D963AA93AD3D6A6281165ABC013A0A5AD5CB4578401
19E0122C387D01E4F56E5EC144F99EE488217F8674D795072EF2344D5BE23860
C15CA8E831EF43CF2298F6868D26D2CB4300838E6E37D565F96F3D9A34870764
515728A063C6EB6939B4B36C663316967E5066FAEDE5F46136AF11509A59F344
7A24656D33CC5D961E345D619B7D3E06C65BD371F2E48C48712ED6CF7509792B
D183F495C24EEA403DDCAB8837EB696BAC4B915CC97D8C7016E1860CE3D559BD
39211540C0292A87BF6BBB1104E430475909571F2F881673DFAC8C84AD48326A
47FCD6200A4DC0DAA528C6A92646975A56E261E3C16937CEA1C949AA6D023D25
F737D807E2CB59BD81ABAC51D01B15D0A65974612BAAF0DE807DA148D9F2B7BC
C71196ECBFE60774DD5A12C20120B99667816FAFDD247E06D9789127D2DB933A
205F302DB580277A6D0CC1ACDE791164E8F856ECECCD9E0B7240BCC29C59A4D8
4770FD34E97E0E6CE2CA0418FCC18716D53ACF6A8B741A2C728C44314202F65B
39E0569693E3E2CDCD508876E200F3B1C6FC0878C367E07E47AE7A2A858E0999
1137800C4AE996132AA090B02B5DD6583AD84991C3A8C4489E09B6BA85666079
C0DE99798EB7B1B4C5C7407C4953E4658D0F9E1E2C68E714A1B93B63EEE14959
6D7BFCCF40E12CDFB66977C8ED9C06F9E6851A64BE4366DDCB521F425B7FE168
01B28D8A847A0A30A41818C109513C0E0BBEC04C2E34A98BE3EC2BA44F85AE99
1C1AFE489FA41EF441009FE2A428F00E0775FE6C143128B438D6921A1A6CED4E
A47B5612839B24908D7BE6B599817D8B6F1BB73771F350004647D66FE3541037
A897BBC2C9E1B79C150C61E6ED7847CF8B09C0FC1DC6A63F6BF4C10CA61787DF
EC365662C1A09274F6B5F83024E9A3C46A324B0A081A8BA2124F785DC376ACD5
8CCDFA76AAE6B9C81E82118698173158C9059D086A07AE3C00DB33F2395CDA0A
E30E914EB3B4349B85CE1340266F64BE192AAB6E053BD169C81FDFDB6A06CDF7
D3BB0D95481734CFB5A166A6337C3EAF5FEE2AA99A62994160CB424CE05B0C30
625A419CB9D2FE82509B3690CB29D4433F0FC61DD06BF1A03013F52C04D3F43B
15AE9B13D87725B48D591434AEF5C7A32D9B0B46F9B6718398E1153895575A8B
730A5772F7B60672735B1310ACDF727BA1BD1AF6E9207D6513AAE75CCDB7C19A
9608FA972D0BA76CAFD8102AA6203132EB86CFE62910D2E507DA115F2A595D56
B332161FCB9CD512996EFD9870CF4B8791A5182B1AE2C315C804C7B86C6E4BC5
2515C87BEB2D4DBDFEA1EAA56E6C426F8C13FC44447FE6D46A22DCD1515964B4
D13ACD6DE421D2195506194AED9A0D30C32092DC57295BDF1427B5DE715876CE
BF586DFA1D4E3970DCD5E3EF92C90AC64A0685E75B9C85F742828DBD3AE81862
8E003F8C2225E05B0FA3B652A3B40E4BE645129373AFE5819BE1D310E216F0F3
72B2826CE743F1D8F5BD7A9B0B739B3A08C55552D047B66AE26BA3C6B17E0C85
3EBD237F5F644F91BFB0B1DD6E7F7922C97936BC474F80C38B25C5BA05DCC1C4
3E633FC98EBA733F0C1B678913F92C51A82FC17116FB9DECB6FB8CC9D65E96EE
8361E3232C513D8D6B6CBE910C4C17969561ABFE3E915F711F3103644F6A8E1C
247DF2FEFD30CD5ECAE5A1788353BE234EBEC069277D3FBD51B95FE36393BFD4
799DF2AA8AC2494C1CBDA4525282EC085A6EAED306B780CEDC38B32F1798C5FA
04780CB8DC18F810888CB075FAB2A62478BB1C749B16B324564E30CCF5B5792D
B59402210529478D9B0D07D0D016DD0E11384C2B99B07D18D093A1F89E4D761A
16F4B907465F766A5E91C788357257F5D1E734F6C95B4C4A733FFD32CA9250F0
CB57DDB323C1EB1784A0481D81630B5B791A4D8C2709CCBA72685E5B610B6BDE
3789F748CADCBA9311B77EE10FCA3045DD7575636F21CF8FFCF0110C9AA8D706
3E8EFADE5731E68782AAC7082831B60B03AEC4A4A1155C6EB05AFC5D2E3067FF
6E066254A5403275DBE2746794887BB825E1C3E009106F9F2A6D554D221999DC
675A8640BFE7DD4E08B9ABA7569F1837834E4F510448489DAA3CEF8B479C95B5
5CF0C4765840C15F3965067B1A71343DACC41C12D68A3100C0D4505AA9E1F38D
746A5CFA11442F91DC3D34224484F31141426AD73ED8BD62C5BE390ADD85946D
750ADCE45446CB9A805CFE06F287EB9AD7A6A8DE369F3ED3F0F74AC6227803B9
200043E29ACFCB95E6E354DA6591BDB8FB88B2B4AD539047E8DC21A21D70EEBA
68EC4D8467F211B82B7D2B4C0333257CD408C6DDF22EAB023A4C6974F0D402AC
ED2B7DCE1FF9B7774DAD9B026368DF0F7EA5DA6CEB01E2DDEAF5D3C4C38EEF29
442B20A394CFF42EC9AE9ECFC83491DD2FDE4C295151BEBFDA7E84191ED3A327
DEC8895FA0F6461821B302631BE55373FE5DA637182B0BAC8AB3816510BBBAF9
8015E8B4DC420BA86070DC8CA9D6CBE6A830F13311F94CFD6BA9FB473CF5FA2E
51A24CADAD0947BD80714CAF3DB43970AD1BB142F1C4B5D94BB950358C28C0DE
81539E0D2B927290D0DC031675A7E3AC8D8CFF4DC312E6A4547001290F5C5501
DB6DC7B0668D12C3CA9279524BD9EA6B48310AEC7DCC8831566DCA04123C1328
B57A1196609F8765522A666539DDDAABB87EF3E901F4327642DBA85B9D0653B2
4067E9B1B5404E9281B6D757D293D9783D4D25E34E97213A1665DE12954FE352
A101D25A1BA2C976051B00C9B07C2581B87C18CCEB55BBCDB5CF03D1BC9F154A
58CBDE9194C3C587269A4B5C96FBE9F655600B28D01FBADF0E5DE3B509C71FE0
675948D3D5A8A8E0A35326F3903068A6431ED97A419DE405A7D9186B0FE9F1CA
6AA5533BF28CE1E4B5D9E327E905C518E634F6769FD4AAF1141CC3F37769C3E1
BE84D6D5E6912725585275871A5CAF404032DF21CB4956F16A61994CC4109825
DC2EBB95818CFDCA640997A765B6998158F01376ACEA643B4E2451249E4EAC10
7166A57367BFC3ABCB5058AA4EA92318EF052DAFB701EB4DBD2ECB32992439CD
A388EB56767F55EC39B4524D47654FCF3D20A3425E7EAA1D8F568AF35EFCA7CF
542231D2036B2FC01219FDF9F1105D3B799364E7E388E3946D1D7404821099CD
17F7F782FC186BF8B403A3527310A2404904657FFF41D4D060B8F433FAF7CD9E
1629D452E39B1A0DDD17D9B6192248DFF11E9FACE642F6660C991B0FB163806B
4C4E8D12E25145142F0D888FFC2C837AEA7F408F477796A69CF2B8C41A579E96
D7244D80F350F546EF37081C337412F7577306B1A99D1609875C27333385895F
6B679FC8846C81462EB8973F272B7A987888C1E91C53FE08CBC0B7B4BE647A87
0402C86976AD8A18933E159E75AEAFA980B8C18282B310FE9E705EBB95831C51
8822E03E51E49E4B995E039F738CAE2A6C165C38AC9D184EE4761B5823852261
F83344390DD4797CA14600D4819FFD3C05F210B9C68DE4FABA999D20C883CA64
7EAC19FFD050618B117DDA5E27BBBDC772E9DF96F69D210976A0B563F3951675
E8F2AF8336B94E43BB059284D566C75F5E675E2578A9CD6E1C267C74787AF1F3
3A2187B890FC376C6CDBAAA8C822F07F13FF6A26CCF688483D413DEDF8374895
AF76FD0E32CD51D2E6D07A1D23709CD3C3023E1922BFCC7E1A50F2D77A3345FA
5C4C71AE88CBD5B0FAB2946F0E648376294D1E54915F665EA06707DD9F4573B1
D3649A4FD652EF8A0C1B79FC9713041E255D367D6B3E47F3249FFEAF9F7B944B
3B918E374EE24F130A8A9B66C4B1B5144437A8CA4E437CA6A7A1D9186A6FADFE
C4A96C75FC61F3E1790D1DC917910B2E91AB51778C378AB0048B5D8AB9BA5077
4BB4040AC68B3B51584D33E9438E614410AD4CC77342D75E28E3F4BEFBFFAA5F
5C56B5B0C718D52B1E8E685BE50107220F80EFEB32EFECDA997162C45BA5848A
B80CC3A89DDDBDFDE46389207D72C8E18514CC3EC182D51DE31F551340D571A0
BDCF8758B845990B2AA4A8213B3F09A7A91CA527251F32477CFA7FBE6E40DC19
DF03A73AAA2A587E565DBF19AE715BF830989AC62DC8E8BF35ECD34C2EB27B4E
2489CC1BF4C8B58FEDC2175BC9BD8E3B56A74019CE1A0123FC097A054D4AFED5
BF0D7AB5B2D55F1A664C14CCB9CEB5B7038A86E2B4B1FF10014B098FBBE941B2
E4D230A251FF14D728D1967EA896C096924531FF016F89807F69791E81D9BDB2
EBEBE59A85DDB46BA58352EE6811BBEEEF126E2CF2CD24269128F75004B5D058
DAB819E4CE79549BCBAAF32D49A18BD95B9C2BE4AFEF36B98DB6D4EF9F15223C
73FF370A008FA4BD0396DECABB4C56D7D00CA002CF9592635EF4F0F627F51032
4372CE94D196B219672001889FBF28560487EE48495170133F24B7EB6B0ADAF7
30ADE4715A29AA3FEFFED8008550660AF03DF79EB5CF461D56D16976D002AD76
621F0F1C199B71352A8A8A521A560F12B5AF108B0A14AC80E2127E43F08F0DCF
814BC2B3F657EEBF8A242CAA882597BC3AB473F23E7F957D38CB0C21CFCA8013
52BC3D231AC1DB6537362FEF46610D19E315F397008BF23FAC4CEEC70BA598BC
786EE5748A65329BE7062DCA91768C2C2B038055386B7B02239E7A943DBFAAB9
26A05520D2B9320E2C9B3C42F2D5CB4300838E6E37D5C5D89BE55ED4AB2F4520
A1950186B562DEFBDF3A174028CBB2A2E75B4F12F4CF85B37B8D7AB643D2B4E4
9A2EAE3365128BDD58258D5BF3A603B74BA6155F7F848B1309BC40BFB4FD5364
7B7CF0099ACCEF70D584C35151D293683CBB77E3AD9C20AF31FE2D920F5E850C
5AE8E206BB77F413618317846A98FC24FB7E1523DF8F18768A814BE6A0BBC80D
A7BF0327F023580946F997AC8165427C8B8DDDF81C4F042FC8339051199DFBE2
D74F96310471B937C0D582B32A13A9897D21B4943BAE62B125EDFAD5B4F94786
154CB7E0984B375C6C941366D0D81135901B1B653BDEAD4BD4E95E5533510B22
2820EDA274B2E8E0990CCBE58A9B13DE46E8332B1E589F2B4F17BCE53CDE86C0
047D77E61F9B4538D960444EAF67D7FD1BAED4E70098CD4DB045F58CFB412156
EE401244E82DECD11CF3A3943DF30B6AA450169601AF4CCD1299DADBEDCB4C2D
CCA6975564DA27B679B55B301431F192BC69142C397D6CEFB2674442C447AA3A
236E2CB5CBAD3B2AF44DE028A8861FBCE5AEE6FA5B0D6918F5C9D588C49BA2A9
A7BA4060CC3794E2FC2E3FE1428B2DAAB5AEDEA66BF60087CD86FE58D7C0848D
D02B005DAE7E6AC73FE056F150AD56000D245392208503ECFA9878A03482928F
A4C13B1FDD7B48C447B35AF8B365EDCEF8C6482333D8FE3B88D06B61F866525B
EB9478DA38E9AD80267A4C7797D407CB3A99D9F9868433930DA9B2BC194C7854
C5441157842304CA599141EBE92355B3CD91250491A10264F33BA91CB37B397F
75EE749B7D0DE20C1731A8783635C025393019F97D865ACE4F75CBA7E5C29B4C
7C7D0E6AD8333F289DDCD83525C9568A34322DBD21C8D76E4AC8A08E173733C1
22B6BCE2E5E33ABB8B59E9D9862FE6191C61683065E505C79C9D23A90F11C051
F88BDFCCF0BF83B6D79DF535721B6E108614FC24C9C906F3027E2DF9678ACBC7
A82D06B7429EAFA39608163AB6C72FE84278CD9CEE33B2BCC49F24D7816089B0
7AD366BB0F4D4CFBFF750B4E107EBCE89ECF51DECCB83DC12688E510CD157D8F
466694FB466FF98D1D
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE27995D78FD99C5784B2B7C7C509E9B93BCC29
35CD2714C50B246A7DC70C99B7DBFADA1E01B81749EE49A70853CD45FC323019
A45BCA3DE39C3E7618C6322D264556FD657D9270933D8B167D2575CF146336BB
1C76735F3B09470E40B0624E52F21809704749F6D81E3B829D163D9F61E070EE
D8CA803E56CF227F71EB8061B83E035C7138A7CFB6D6CBAFB766754C0E8934F9
AB738930EB75A2713CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BBFBC61D7D
25524B08C70599D58E7521F58D26AFECE212309BD7BCF62735379ACF3309DDC5
C3F30DD7D3A37804BB23274D7B30DD69E1B2C3CA70F2F79FA29543F526BB808F
04609B43776382C4389362AEA7FE4E03637B4599D176F103143DC04D5B5E53D8
568E7911839EB05C8F4A9E9C911D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D4
7450B1FD87B119E547047F43E9CCDE1C1F8645DA03EEB02B27E36BB6C87F39D0
505579B2D0FF4DA9D4AA971DB4C82693DEB59FAEB3A14C1547C6C46C24FF3513
EBC97357AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8330499FB4803EAF74
920BAFB89889071729076D755021515BD8DE5177013854B10911605F872456B8
F504547AE968C323B85DCAD9AAD5FC33F29A921D427EEE0E098E8591EA7F2D7B
A5CD8A91C01AE80B672831C286C900AD20776B50D4D2004F7295D860A2974B73
A9E8B594BC8BCA8356DB43399E6A6918A887A64B2EEE98060E47C0F371681713
13F92A306D1A7DD5FCA29CE223138B98E6C6BE9F3B305E2E4ECE098AEC270F11
2CADA74CFF4BD78C5DEF4354211E3953CD7AD90239C1FFCA061A21652104F54D
4CE1C6B388B901F937A299F65C3217180D4BBDA87A96F4C31014265EFD9206DD
DDD45DD3F56823BF8236F0E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0B
1D76EFC8D22A8E991888FC44FF9ED2954B7A9DF5CF6F256C8A86C3D98CADF1E9
24E6C6725EDE1262199758B2B070504BD81147F35D8989D2CA44BEDE6B8BA09F
511388851B9D9865887D4EF8AA7AE6AB234B252A506EA2EB59B1AD40A04BA972
EC6DC7C9E4ADEB7E40045F10F38E0C8D50CD28D96A028BE7C67D1CD148404CE3
0DE9213AC26B82EB823194818E6DE249207343C37BE9B926EEDF21E1D52251D4
37D555CB1FEF227CD15A08CA2A245C3C6508DD3592E809E0C72380B92F4B946A
7BAF34835CAC375077A843F61978AB4876871FBF42DF8EB5F877033452F08D41
970883CD836D1668B85BD642F7F50AE117B3ACD1A1372D5D4D2555A2E8E23E29
D8C8C5F39807B5A01188DBAA07A27A116C80E837DC740E86068952F0A57E9027
C39A603A4886213EC782000DEABF71EAE1B8944E2EEF19E1F7FBF442840845EE
D13FA9B4C5CB1FDE6F0DE20AAD69160BFBDA23C2D29311C4F82514DCF27C6B94
A8E727522E182DAB2869CD2C2B0F39016EB778060F35A6FE085A1BDB04A65CBB
6605D4D72E11338D87D5B0283A4B81EC83D03F502E7DBF202BA558B4EB271C57
922F0CF3980A02A40CEB2FEE42B631C999B71EC234FED7B269E5D91564F0AC54
D70F8EFC63B94F73ACBB4CD279716F68783C493794BF12502E04FC52064E63D0
05F2034A1E7E4192D1193BD94E99C0CCF702D9EC100066E1490894F5ABC92A92
C3F42F4101AC88024884C018C7D0DF65F7CEBDD46FADABA26B5433D34C2AEB07
6031841EA02F1C9622E0B64CD190A4AF3020654123563C5D6ED62F112077A1E5
88A8C8499A8917CAB23F00BC124FD93096D2603BC6C1734124CA3176AB14F488
26ED2E56C67571DB18177A07E082CB873440C4648D3FFF06A1499A5C7EDBE172
1759C1BEA3DE43B426C5E175B059005BF2911E685D076FF12D01742E9AAFACF2
CFCAF0517858C28A24FFEB5A26E46BB5B788713FB8009CCFE62C17E001C96636
A8DC58B71D4BC720F615D2873CD11E06DDB3A7788888A8E713D0E82FC861C0D9
ED98E873821095C6BE6CA909BCEB6C9BB1B0730BCBCB20E22D06AD1AAE225D51
25AAA901A78E86386D29A7CCEFBAA8F35B4813CC9D289E5244483DFEC10FF237
E38BC8E19B81502A19E0BD113AFF02F4E365A4708189A7BDEAB2D32A6E464AAE
B3505AF669EC3FE5A7C9320D907438DB23A82D8CB9777BECA40890C137564EAC
CE768714D7430BE1825C90D88DF40E753607A06AFC0046335F97A2FF20EA44F7
94C1DFD6B105FDFC6EBC6D5745C10D2C3BD560C939B80707B471D13D7A910F23
91FA6B63F2E6A01890368EA8F0D42E7A93B343C664BBCEBDBC0C99138A50E5C0
F57977D929DC9CC159568FBF5523D79229E9BA352E4193A44EE745F76035DBC9
34588B2B8FF44C8368C9C69AD17E91BD78559AD4BE219C8B110472F95FD5CEE1
A7EC2A78941AFD0B102C6CEF9D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF
9FC06879D91DADEAA25F850083BE6CC26AE7437664ABB66CCEEA19D0BDE898CF
328861C3CB4423FD2C0C1AFA95A6195FEF30511D5C87876C863364CE4B089A97
6F9C29A14A61785C42D2C746A98194782D9A504B2A0A92D4E4B5062855A33404
2E14145F4684AD22D461E740FA8DD232D18E559DAB50A977CF474EE1410D7097
785D120CA5C6E051D096CC40E931BEB074AA9E32BBFA361593C78D0D2EDCB1CD
D560A14E93017099D24663633B06BBE3C20A2718C044731B6DB8007749D1B605
F397413DF968722DC03BD138B0559D3E5887B7EA9C9C54F8335F55CC3F1B9135
C70CD0214CF04A4EC5AD120D492F25CD6E1E80CE87C5709112938ACF9BB2E011
87FC035CEA0FD5C1147D41630F1CC9B82B395BDCE1885A1D5F3441B03AC321C1
5CDE681DBB192993B553048C58C55F0E420DCEA46CD16B75173C5D37047E511D
C980EBD803E01C35504C4092D93AE476AB15324149043E713261671835DDF160
4B8DA000941FC5F85C754D5132402A0A94EA3D0E37D6B9890461CF1C65AB7C2E
E42288BD17DB983600580BB1513D30983C4FCDD1836FEDC80308316401D8B181
EE2A3B114F68DED3488EB9ABDBCE6E73EC5A0AD42D7735045D594C43A33EA29C
BE2AB98CD0305DD935D8F0F5EE3205A7576650887883B3C9AC23E217F48154FD
6CE1454F09486B47A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF8B10F578B9F
F66D78D738FA85FC454C23236FF4B665EA0E6210060F6439E9CCA612DC7ACE7A
D12F478F25D40CDF7D23E3E543B75A97A7BC960A7F742A2C89212832C36801A4
C384B89A91D53E0CD886C7BE0692CEB0CF29D9B4BD53E08D9FC1A863599BCF9A
717F4DC319B4B59AF009C11A91ACB087542F94750DC53232E62ACC3C660965F4
5849011BD76FF8489964A7848FC6F3CFA44B7F502649EAD20FD32FA1999CB88E
A646C764BD2088A3EF00A4F1862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57C
EC6D4CFCE0ADFD99BDC3BE161F4C1FBA9B854899BDB7E9D09A1E25A95E9789BA
DC6967F96E550903DF9B81969E38FA3DE2A058EE2076C77C33A93F2FBAECA0A0
EA98FA4C3D1F8700B04CEAEA603A0833E91FB4A44AC83C4E86308B6E89C99A84
8AAAF1BD143560B559176CAF28B1D8B2C8370CBAD5873329B24AD4A743F2CFD1
8B26B1128AA48F72767FF2268BED8317FAFDB532191FA35C2984AE7C50481FF3
126BAE5309893814BA28263EB863D5E6F01C423E6C5D3289B152CE19FDB55A11
282FEEFFF3E262F26041CB1AF30804A3CC34C06C6FBA8AED582215711B0A17F4
1B505FA0B5F906C537EFCDEE4C69AFFEF89B74C5B83E2DEE7642AA85B1615F9C
BA1C3C3197223C98A1ACAA495A6B8B8F1919AC158DC63FF4600FDF993CE8D2E6
3DAB7E352BE200322BBAF6DDD2628694612A7790EA8E1836533738405E9B7AB6
9DC77FE9A283B3A8C6A3651DE8AF71499D39CE0567AEA286091BEA9D6A443A5C
D35747785C433D4E18A02ABA38F55742DC36E4FF07A656AFDC3D0A32CFC097B0
5F9D90CC4B614AE7F58F3BFAF22EE6821291164B14DA11FB16C0E671A6104082
94D05830E44ED3E9908B59DB3B3506C60D3F766ECE69AE23369AAC3B5951B557
D62C7728D6E3F13BE05939C2A6FAA336EFA57001DE299223DDBB333D71003681
B4A816B378AFE37543607554F1F1B427784EFB366CBFF1CD7CD5FE3CB61842EF
56F134AB25DCAD2BD08AE61E233FE6FA79017D1883C61EF0334681CCACC5D024
F39309DDAE717CDDEBF80C88974D717C4539732DAD1226FE504620FDEEEC6266
41060E55159270B4794F9C0945FEAC295D17B4E252D015910B847534A519CFC3
2D52169510940A9E9AD636AE141331BE35D1D5308C927BA3940B773F20E5B3C7
813663D33205454A1A4B2D9173D593615C4459845E1AEEEE1ABCE3E5328D3F81
11610DB32C86FF6F9DBA1B8D6BBA3C4AF64523F37F176F3256E298D22DC5F1CC
F1A67A355219E2EE13D5D6369F656836EE0A77206E8236649E81A1F0E02D8D3A
3C8FAAECF7839D20329CBC5ACB43482D3A3A1E9C3A426BC7FE406E89FF25FEB2
34CCD7F3FB3C608FF37988C7DE6A41FB1020DBBCC762F2BF24BF424BBB2D3207
9DD408226AEAA0C4DCB8DF16CC6767B0BC73EBA052FAA5311407ADDD4BDB1061
3A860B10D2C219E96E61050B98FB04425912F484F5B79B9C0735F92C1B4353B0
76358780D1547206329F302AF6853E5DCFBFE199A76734AEC487BBB103A8547A
0090F0342D48DFF9EA9821454CB759B3D82921AB4B9278E652C2F30A8A121781
8CFD111E32142FFB160DB6422A5884151A4671D631260FB1758BAC67E14234D2
5747F1E68E0C36FEFBD535FA5C64B046AA8835817140B76DC22B5453AE8F3F76
C69B9F10988BE7D061F539CC8711030D2483F752706E27D43E3102CEC57B8A58
6D3FF862999D20CD6BBDB23762249BA7031D4D97DE2280C10756DAC422F0B747
E427E5DB0B265FDD57193B8E7F00C2162FB111DC4972B51E59320793EC60AA3A
F4A3F68AA5E11F657F898F59F67E0D285167231B9F444D42F17CB182EE584117
FC81DDB5BEF8EB957F817C5699C7293E47DAA4EAD6D47F00FC6443EFCDCCACE4
627CFE80E82179579BFE305B9AA1770E8E8970E70524F9F7AE081E64AD1F71D6
CC6FF054661866B68CCC383E5403F0A734ECAD86937D32FACAB6B04F3F9ADD79
94C11CE94999A3F38C88115D6082DECDC2125A4643102DFD0AFCD8682BE5CA11
AABA54285DEB171209CC4CF8879A65088C7381B9029B67CE9029093EEBBAEDD4
403C382D29751340F63D14C45D0C8ACE829FC3034643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256D29AE0E789DBA81CB4DDE7D4A970A3162D903EDE2880C20DD
FCB205309DA145A55A2C6763E0D8BC8A0BF42461DCA1CB7E613647A93FAEC756
3535886E28292A422264BAEA373D5F1AD84FC79DE23E2BA52D8EE1B1D3F80318
8614D6ACD81856288366086F50154919E5C99CF62A7700E896F5B69456110B9A
8BBCDA8551C3C14F979F3CBB597AAE41210AA7A444428DD055DD35D91A1DD465
3800988005F542BD304D2D1798BABD827BC8A689C3C35078CC3502DEF40DE082
B544B4AF7127EA6D5B8FF5A0735257BE29E36A29B707A51A697A4D8A360D4017
19C5FDD791A1C640D47AF86948448DD00039DB41E9C5BE1A7E6BB48920932280
BC552ECD04E2C33B76A0F6172098AA76CD4660980EFA1C84D5348740B8A4885A
BE1FC79E81913524DB238155870C6B9819E5842664A4049499CAFA7351D3D3BF
FEB9A51236038D4452E44A34F25718B7158C40F12ACA152F1EE78072533F8900
CC3A1869BE48305DA62447B28A45D6F516078C72A4B155A2715B713EC359F680
FCF2663644C985191135F0156722F0BF1DFACDE42BEFD5278ACEC4A55F1A082D
537B3C1EE890A6FD2ECE0EF3999DB161EF7DB88DA4B0C592385D35F705BC2A9C
CD7351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0AA69918932E563C8827CC
340AC4350DD2FF1A3EA9F8F3711A16CCE9A37170F0C02A9C7143D722CFC08677
6227901157114767FEC20D2DBA71C87061EE8BF523D591180D29A8F8E14A7959
731A74DC4B215D7EC095EBE86A3CB7C28C2EA7E6A19A68B64EAF236A3468C0F9
453189A1DFA55A9459D1C5B8CDC769D992269E6EC4631B1B75F7E6A511DBD978
F3032D2FC6BD54FD7664FAF472BBF13AC7F619FDC4AD5B38CE04E4C555757F69
C669C5EC403770F681C400FAEA98F62F02633E0F85A780A61DF255239F9BC3EA
AD652E6D5E754B9ADE46841E52DF90C3F0D7CE5DD684566DCF0B43A0B0F975DE
AE2F7601EB63C39D6EE8C54611D9D515EEBB7192C63D22D02BB2A5A27270225E
C95173C09068553725ABA9423F4B268C58072241D2DC5C080E7881848222220A
63605F00205C205B35DA93F4D000126B2CE72AC322B4D962537889CF225B3381
6EB449BF2C28599EB66F071FFCE3410C547A9B74D216032B72854A0B8A6ADE15
EBBFD5CD2BA9FAB7E75099FF1B68329B68A2CE587608555325EF062CFF465B6F
184FB4C37A50F08B2F1CF6E09E92D6215A5C9BE511CF326505FC5EF2B72DC40E
3350D5D5358B49CD7A1713DE7AD5B63F462A77B6268B7AFB245DE6EE02BF2A97
B0542A5CFD6CAF309B7E10ECA06B51C2717DB5BDE8E80D6F29B33E9FE12AC804
AA0C6670967F6C3C2A7310CCC64AB48219EF140A1D9A942543FDE90924C9DB3A
5D667E0AF18066F4318101305AED22847F855960CC952649426FBD46FBB5728A
CA73B436527795BAA59086831567FDD5B3BA6931468115577ABD8222985FAED7
B6A1CC891D07185666E6E74DE886BB13021AADC9950E2EF1FB69E5350B281CA8
F05E2830521A7BE2EF1D993F75619EAC1B3A7A437612AB0E8513DF8F0F44E933
75553EA81965C83F6CA655BBD1410B7E8F600CA820DF8B4BAFE515BCC974BCC2
8E06AC06B07BB7E08BFA5CA8C5EEF8386971DE077781A9E67359AD8E75DFF208
727DC428911CB820B9211D2A3C6BE6A3ED0A5A2C1C623A6D6615F24FED298A68
097564A8429CB235119311B9888D0BE96AC4BFD340BCABB8EE589A69F749B180
3E3C1EF42D935EFB4AEBC656854ADB4AED11740BA3FFE21D9099979EBD752E36
A8EA33F541256C368B3217E226202117CFBE3DE2C6DBFB0BB25BB138BBF69BBB
484DDA6371DFFA6222F88F0886C7F8848E932CF0D89BEC7E504189315DE0E931
69236EEC7E3C7AD630E43CB5B3540FE72436B7BDC9E33F6D4B2E9C167ADE4932
2A5AA48B228CF68EE0032B1968EB88119A375D4DC1AF6E4FDBB4862DB295672C
BEF8C0780AD1CED1352575A76E2FB6DA0EA3472267A89135EB528CFD0877E8D6
E31A02A87587DC7D4030E320C514539B504A31AF3D7A4DD413750FA4B723142B
B074DCC9B55E3A49B384006A6320B55B1CF4B2482D465B5835341350E215B0D5
5DDC1F173119E073DB7DEED7DC4A04968B69F792644FA8B0757303F40F4E3D39
ACE81E6816449AA859A9754CAD99EAB3F59EBBC14ED7BC71D669091521BF6739
131AAC92DD77A116EE7E81836676237F88C519F8DBF39EC35FE36E3D2577738F
553F81135829F9118F4BFE20CD51190F2806A37A4B011776C7A572D2FCF18871
BB569C2DB5B9A3347F911C34150B85ACF4262B137D9E0FAF538F8838EBF6E79A
1ADFB94FEAEC654AE20E3A693C2D57AF9597BDE85CA476C09617B1CEE6A2B48C
DEB0450B99E5E00DD9825D72B3A9D95383171187CD0E33C8CD308C436B64C763
C407654A8C311D3B3C8F5901B2AC785B222E5DE6A3FC2A9B0662335A2DB9C80E
B7BF67101B1F500FEBCC23AE484F2222BFD38455BA078A1A500CB006AA6A7D46
70530EA460E36E1FCC24D0148C458B745876A5FE5919C3C624E46C02C72E1368
8BC50A383020829462604E0B5B2CDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942
D6C7B09C6F75C799F437E74F0E185AD518B7E446C30415CA18B5F59F3C4DC209
7CCF7B2FC2F789BC49E4AB223FCEEAA22FF3F71E5E5E966DFB605D18E4B1CA2F
59697989C41141C74CAECABF8616AD95FD9ED3B11C918BB38D14FDE1FB20C560
4C70DC9E98857AA358B5F754BC18087F2F7BC99B501F212C04DDCF148251E923
37D102BDF468038B07C256081F5B8F3636CCE0A293F905974A0B37050C2ABC49
F5FDFCA8BE38549AE53F72B85A6F03B58AE18FC178D906B9BF3D12A818C8EBD9
90E7A12A38A89BDAD7E6A192877F8F9B9C3E5BDF412BF0E8C92A234BC8049091
778F36D558DE72E0CF1737994854EABAF8C2D221E0081D853369B8ADE0B18E8D
FDE785893B5EFD6019A709D99989DBCD244F0C11087A077D2103E494406B1DC8
1032B618349FC6ED24879F02A9B2C2924CD9E921B84C4E6C0ED0396E44A5667B
7AD3375595524D22C358B73374B5E7C4F285F9BD614A00DE6825572189A19315
AD3E7E3EE742E2EC53C778F677810DAD0C8F97E6FC8724E306E2E37B799A57B8
009493929890EBB3F0C168479B6999AD5B3C3DFE28AC43FD186B6BABA7FFA776
83212C8FAF6DC682C841008292750A376D0398DA95DF8AA168A651403C2477DA
990FC58E46BB65AB0676A40A8130F05A6CD8D0A2713820D615BA8AE46DCDCD93
BF182F0D752C9EFA34692B1E9877D715480B2CBC1181E6A95B05E9285F173BEF
A5424D243AA8BC7E87176773002363255E70443F86B6EF38C81511BA8FF4887F
3EE4357A421575258AAEDA4B5DD9ED6E3482283ACB506A2D6812D4676F3F6464
94832C8EC9EDCF022E141A5DE5496F54EF7A0050C0D1D2166C4A311A0C52ED00
D2305C70A416567F5EE877F0D165C4D4E6B00BF84FBE6428597412531988959F
3897745D7159FCDBB10B6459273EFD03520F2483A9E7FA0938D162FC5890998A
99BFE2406581D64F49F46B2D453844BEFB1931DD7E2CE0E540A398AA83F57164
3D64D9D9B4DAB92AE722C326065E48F4EC7FBF2E1158F0535DFFB59313804D69
60AA6F0C136BBED6E020CA50ECC4A6C90A628121B6317FB8E40E11E48E61DC6D
B3FD911235DC5A823A176D8387CA420A441980D3E8666043259B63FD3CE13E54
945B0A6BCB5633B1D580346D913BACD9742B308D575A409EFBAAE5D96D65773E
BE8D69A606A70A06E230290370856A89FA8D56529F252E7CC538FD5673744947
AA98663DA46206E7A75B1E7AC0247834B4558985AF6894363B2114294E668644
46DAA5CE2591121519A4117747BF9CCB78F9F8A3F5D44459BF81997F9E7A34F8
122CF87CF933F558E4660C9FE5D440B33AE6DD4220A093310E3E65B053A2EAB9
C183BD44FCF0C480796469C934250A5CE240A1171441D03FD75811F371B3895F
AA14A75448ED483C51D41076C0FE99D988D612DEBF78DD7EE23922F1A25B3421
F4AB7F9881955BDB0AD3FDECF4CC3BFC8CE815CF8DC0CF6D4C15FC110A14C6B1
7D87AB69D8E840ECB176762EE87EB04071EB8061B83E0359E6BCF317360AAAFB
7C198CD8DBE03A3CE7728D8819BF7826CFD7EE20738DE07BF2CB6AB91D17C579
3A8F9EDA9EEE6F64F51F736877EF6935ECA18A5F86EDFFDAB7E32A239E731333
107A831FBE6A6CAF1BB6D934295DDA357EB9FD1661523AE5AF8DDD8B198AC29B
D3B8DD91D49CFEA23E7D6EE63090EEC569D8FBEAF4E5CA52AF81F8FE49557D75
B147C85088703C68C018951631F2EA80DF28F24FD71D502A040CB4DACDAE1FC4
F892A2F092A3E45C31A6DF9C59631C5811D0CC79DCC5C2D73915AB87E8E31B37
12EFFC2E3FE1428B2DAA1853FEE27EF30CB0A494BA6ACDF6788877A3104070C2
23170140A7516D83EA6A99D1E4F756CB95EA4C2F9F4541B4ACFE9CA666C46C7F
031C67944AE235F4F872E636F24BA68ECAFED13668242C92CCF7FABDDB6C50DF
2485AB8138E3D841A9D8F9F80AC1BABB452DF2ECC9744C9C500556EF9EB6764B
4F8134DC429709776F04C4D5E4D04DAEBF5C475C7C3EB2EF7E035707E5A69C6B
F3D0C6660E636D6AD25B03A443509DE32694DEB838C8B360EBFFB8D45798018A
310214EB1672483CE4272074EBD88C9DCBDD1E51AC1353F7C1C6F691546B9315
12AA015585BF3EE444A7F201B20F79ED641D0EE7473C6E028D62D173D45A6D17
B4A1D1D916165B0BFB018964439FA7B3877858BBA8A26697C5929DF8B06BE1AE
01528C75262EF6C5B60BD81D2770945D3D6BB88DA9FDDAC13FEAF57217EC230C
CA301F89A1016CD564EF2EFDF0BDB775895C4746ECF87F40A23A8418AC968F2F
B30D5073CE2A53F750B082C4A6590AD501BDF6EBCDC02B48008D082AC5C1C042
7AD24E2C9976490B46BBC2187317D00BE0D30EB7BD4463F7A542C9A7373C3A43
39301CE2F890851EB3E99946DCD9A40E25DD883D396E1B7292137CEA7B60FAA0
52E4E631CD7AD08606E816F3E54E20DE4C1F23B16A9440AD00F6BA5601CEB6D0
79BB75886BE988058F4C5A79047AF8C75EEF3919EB6C5639046C6371F2024871
88A7BAFAAD7699E573E26B49D2D3520CE7EC27EA837EDAF9DBBF7EAD3B2858BC
FE820B4633E69F61EF0A9659847F8BDCD4238F576E09B591DD088900D4590818
6740C9412068CEBAB515DF56E83B52503F2A044FB87D284384D6AD0810B5407E
1085B1D5104BEC91C4AEF5E1E1F02AC9FCD1D87929953EE6CFB6C2FD8FD23C18
CA4063BCC8EE90AC1756B426A936BAED123DB1E3297770D868CC596E737A5234
E91EA9C52A86F396EC334621CC131F067BE82B7A00167945245303572FCD07DF
901E78AA828FB9ABAC42443EFEBDA80787A0F0A9682632A59B9D4E948DAFC6D5
74A33B9CE67A5639E34DBF36BE9F30BE03B0B8FE5F8EA006251B9E33FFEBB1BD
B2FDE76B58AF101A0AD64320E0217F90916924BEAA08BF7FF02DCAE8484C13F7
C5DEDB4EDC72B4042D30D14E8F4D415C5AB2A72BC3F9A63FC847DC244530BB6D
83D8451BC66D90AA787A9A653A4F75C63447142226B4AD05ADD80A9D7DF9C7A1
817250E78AD0204C9DCF16C79410605D4D744BFBA60FC22E964CE10AF512C228
F4CFC3DD85AEE7C9E61D62CE0FCACB72E14C2FDB87A97F47425D7D53DBEE6D4A
863D81138795F521C6A95DEC14BBB3E5A8BB3613EA73BA2AAE3FCA5D2E78ABF5
0BCFF51317165C88BAE59023144D99A71EDBB90FB84380ACDDA68AD46AC7AE3C
09162E8A4FC6CD4741B38836CB599DF98A21C5245BD1435E23F7395871AD1115
8CFCA33C04ACFDA3F0707836091A6260F217D91D4EA2F2B6FB87E2E004C0C5AD
DD2AB665537FEBACD5BC7C774D53CC63B57F7C9A28A5F0EA14F929D5598F4437
AB944A06B5EEC3343EB1EC04DCD09A2A4F2CB04C74B200EE87D92C452F79B850
8B5A3F364A4DD82BA880A7A5CD59F8F6000E1978A9EBD18D33DDE269A3E70362
6A0F204E36BEB8606041ED5927BF69A367EEAB44967489A34B460172AB269789
DDA62F516CB7FCE827E8B6C453F843B10EC212D258C3CAD385E8512B667AC78A
09A780813B1FF02AA967B12AAFAD9ECE68CFFB45E6E44703FC7AD68DBAA09BF4
E38DCE8FA46EF5CDFAAF3113D089D7C85E5859F27B8DC4C5D864F41B8B3B0F66
D6FBE907224496686847529F68DEA6FE86CDFE2FEB8DC3AB2D124146E08DA532
B277C8A73DAF87129F39235E00862E70D7E93430EFEEF4CA1441C63290D48E72
84386F6082C2362E4CCF3E66ECC33C744621B1FDDBC9F587FA9AD60FF1DD01D8
20488450336225C64FDBE7F75433FB87932A162CCCA0114944A1AC1E57C446C1
533D84AFF286AB0086008147E26E133E012707E204F21F5EDCA106FA0636B029
F12E6809CD8308A1512A4F3BBA0E02AA42C71D9E27302A88E52BB8B1924F057C
43DB0A92111ECBF02129EE8DF16E063B7BB9D34606831C82F4954E3E9F458653
B6CA43CE1F9164BB0FE39FBCF2876FDF951D8F9ECEF97273B7554C01E0528548
562040B9FEDE9638C09DB8EABA360ABADCD32C16E9F72E34B4CCD3A3F1A87879
31F61A705F34B65A7D17B8BE932648CE9E0B7240BCC29C59A4D84770FD34E97E
0E6CE2C95CBCD1A7AAD2312A280F0C0753434F33D438BD8EED69053BE9CBDC74
E87B613542F58DBCA1007FF58CD1A3F9D87400FB8A600F088414D8992ECDA0AC
C39AB210921E327FD8B10856C476FBFA10D11E87A61DFE3103AF0DA9F627E710
DB3D3C578C86CDBBDC0A2BE5F6D17EDD30DE14918A2AF0E1ED9254513D2002A9
CCD73361CC952A8238AF64FF352BAC31D36B071C4B68DF8BA0FE38D3A0188439
4AF829C39DB36BFA67124053D79DB19F848987C0F2E57CC79D75EC3262338CD1
3F13C659D762DB6199447516E1A5D4B3326832B50B45C50D8F3B912D34199D95
8BC7C6ACBDEF8BA575387DD0D73162CDDD96166F795C46B8AD5A7ACB5C30A9E7
9E85CB8BF53846F45871E08B42AF72B3F3760F5FA35BCD767FEE4E9808EBF054
38BA865AC5CE19DB05CF529A5DB0DFA4F1AE311FF2EE1311CEECDC45A5A65A71
E268231C07EC0F3AAC2337536495DDF6085A1BDB04A65CBB6605D4D72E11338D
87D5B02C7980703D1DF07EF2E12C9802AAB56426BFD7E71A8056C4D40E53D42D
AF400AA41C55881CED39A6EAD01854DB545A7D0E46716D81039491DB446916FA
5F10B5FF1AE36BAAB8A07828702857EDDDC1030D19928F2E260434DD44D61B33
1A026E3D72A9FC0E15EE51F97141125A74C5BBC35D82385C083D07AF133BB1BC
941AFDD9F34D5E0FDB49915C613B9E6CA03E2FAB053421BDE071AA7232D3FB8F
2F4E2C4C544F441AD84AB5DE68AE07093F707C67DB1DC2AF85CBA7D0FCFEE888
CC7FFDEFCBD573725714DAD9F6D32D04C681C42D15D8B8DCDEF77987C808BF0A
56664166455D888CA8A3B820DB6BE101296BDF05D296180E1F0068E431EB425F
A04DD315AE10FD3A72CBDDE3AF4825F7C3B591FB74909EE16F53AB0F444AEC23
3ED419193715DC8998AC0E556F16DB74C13D05E062FF908D37AACBCC9086AB4D
09E359B41CF74AED5B75C01085EEE6959AF5B321D1550C15C0E4AD2245D110C2
485C08BA84E13D79C4875E249580B771CDADB22DBBC1715016A91EB885A51BA3
F73CDCAD65BE718C0072A840C5D661E2BAD9236D480D9250A1EEDEC54A0D75E0
C853808E0E457AC644B40C5D496DCB96A463116389EAFF5982413681C556258C
6A96EBFA86A669F671B2056B5206CB2889A999E7573B012EA2371452E23091C6
5D76AAB3B0B47745CB8CBF9EFB538C274E3C64685888A61CD2FE2A3912714563
19C9B1F9D62740A6C1E4ACA130DD76A67920DBB1EBF803737388C01B84BAC1F8
C5D2AA3A3E6BCD63BDDD75FB5390E6DE2159D712C43EC39112935BA5FBC2D1C3
048DD4A16B2BECF9DC186E0B3479EC564EB9E63BE5C92779434A3938E1970D8E
A3CD40C7B8FB442058996268D90BEC85B51D5111091F54823FDAAC9DDFDDFCC6
DD12C114B7373759BE4A62F1370FEDE056CEE265838696FCEA5BF7EF4865F3EE
0054B00A9EF36E06722397867DF4DE78492BB8EF96B9D0B8AD794FC37229A534
DDDB4A69FCB5E94DCD2FB69D65D8D970C3C755E6F464E23802978FFD29A0F681
BB7C42AB16F3DC305839233A6D79FF1A8152419BC99C0B233ADAE39DC533F1D1
0843067264DF39491C34CB4BF88039971CBF0B811DA5D0453701393BCF3D6251
E80A93FEA61864BCFA907DA7513A5D5AB90346D805E2A2205BB410B3E1317CF2
47224ECF9FFD37BA6DB7283B75010E5542A389EA2F787A4693E254921B8DED4B
654A34C1C67C390186CE712378CC6217567E4233AB90D231BB07679EB2ABDE89
5E12261315A776E2579686DB956486C96942AD652B9188F2FFA1495493978225
54956039FCDFCEF8BB4382003153E604C23D313121A31905074446B1B55348E1
E2CEB827C74133EF89CC4C0E3BC93691F53282A0F0627B5C2BF0D24FF6B79AC8
74474B73FEB6FBCFE8F5D07B521EB0F086704D2F749380E92B97B1D4D15A6A6B
4A8E7F107E2E4ED3AF0A323F4ADF5BA2DBAE0C452EB77B9EB60BC8E8DBAC5E44
24AAD00B852219A60384F37D44F4096D8AE632FB2EBC0DDDFE6674552253C086
45F0BE1E25404BF8131379A057266485F454D5AE1081304809DF523EFE64D400
BA4D22773664235629410B1866D7A52B5AF7B22EDF4D13C1A0F81659D7C22C7D
D495DAEDFC651D4A939CCBFF875032E159EE437A2F68FBB9A796AD2042FF89AC
01843A0B408603CDC4D27FAA68D7A5407E0BA263CECAF34FF58FCCAD408B8B07
D84E95D6D79E0FDB6BA53C1C524097F7E1070005FE0374ADBE880B8E044E4662
EF0AF221544DE5DDC61A54CA0504D9C77E08FCF101D33E908A71B94B57A71E99
C8E97C95D6264824385F1E9C6AD73172B8777A6A9C884E2131126C9A2EA19A80
074BCB3432256BFE41FBDA108B3363B7102FEF09C25D849D7DAE91025A4C6D38
DB16CFE8E67900498C2F9834799128DF2B034852C673ECC4B4C9D77AC775F945
CF1F96E80E3B5528D4D09E1B5E78B3E352007805470CF8FD960389A736A651C8
E9877DF4A9DE3457D17C81740DAFE000798A2787814333C50AAFF69C863ADF81
27F1FC35DB9CD34EBC684818AB259FF8F84FCC533000D0E1E9DACA45F94E8282
61BEB551460C501428C4BFAB2B6067BAE1E2D71CBE46FFDE38A25CD0DA603BA1
BDE6BC382D8DB22A52CE0029B573F9F5F2F99F02A7E96171314C00E5F85216D9
9E98CE869F017082FB4B0C2DAEB278ED1C55B16BBB1D07807CA3D7E9844BC82B
B1B2426ACB9FBF557D742F35A403EFD9761F38E63ABF21DE56A291D2DF07EEE0
4F70626F4C73D605F7E228B23414CA58006F3D40E72FB71FDA23113D1B0FD21F
EF5897DCC7EF4C2CB4B9918C0626FBF8C4B10DFE83AF257544C70A57AFE06F7A
0B5F072E7235E9B1BA19B953CE9DE783BE36D5CCDC4C798C8CF098F26C8AF48B
458803BB26487C1396A12DC36FC9583A048A83F68049C707E5FC1473E7DF92F9
D2E2B830669F8630FB55709D85C29E7014A84F5920F3D806AF76ABAD9FBEDC38
8D8DDE6F49CA08F4FBD88644E60BAEFE49E53B1354C807588476C398F937F142
69C0E5733E34BBF9B416E034586C46E8419A975C8D37D0A16E6E3B361477A079
0C7141A679CF5F95FB8D5A4E24180ED6517E4F0FEDE76BFECEE5BE55608AC296
664FA0A919782A6ADDA23C38C361874254B5CEC048F7E120356772127F589F03
18D086E59953642D6C2D23CCCF3129CCBC9A3C3E966D3F3B431634B78DBC70A3
0BD571B782F24BF7ED544AE148467180DC2293FA812D817D2E5EB294948D9305
B66F6DDCD13D1E9F158AC88FCAF620320B38C49770AE23986F8CDC1C1DC9E4C2
14326056CD0B162BDFAE809998E0B6C0032CF12BE89CA00370A27B2EA4AAD3D5
A9753BFEF2BF2C41938C4F0D045A0A8D658A3D44DD192024F7346872E8479505
9D0A12F0E405BA2838BC4C0021571B3CC54019500DDC798B57B6D0D13127291F
2D47B02EC7F91571FCF8978A464394EA8092DE7AF606694CDDFE9C6DD15D99ED
151912F966FCD9C5B8EDEAA3693ECC7071FEEB02814EE5D641FCF55E6188E23E
33140F8E91CE236EBFA996C5167910021202680C57E0057A8D4EE1C5DB70F4B1
7B4DE35C678F54658E03C1C84B04C87E046D425D2C67D68D0A054F8A3F6FFE07
295936FF6131D4CBD8880F040048728D0EE1112BCED54AF013408AD290A34B2C
9CC0F6E3881AEB9427D4167265AD86FD668F97C05F88DA5099D12C2940A318A5
A146C3BD0689656726A6B409C00F85426E37C3B5EE1F6343C8B479309AE973BB
998BBBFE4C486AD89EAB0D0C26D0A0F17C220DF312D33508279355F50B3A93FF
5A9AA1B7495880B7D6CA5327DB81FAFE2021B109D7DC8DDB880AAFF3059366F2
93191CE257782F236FC2299F6C600339CFFA85D117825A1595466DD4A1542B74
D7A7D21A05BC2B931A723A236AEDFF5676ACDE6EE71DC9EEC11305EEE39BD2F3
14B4595C18B7A2C0EF1F5A33B8BE57F38548BE3C2CEE2DC1118746EEA119D980
4673924FC20C17C1ED4D389C4174811E9E24F85A8B77DD6AE21621F960DF0147
A4DFF91B1D7636794038D4BC5D6DABA9931AAA9EF77428F5D92F0D318ABB61FC
BEE8E8B0B00C0CD02DE5923FF7CA111DCEF22BFDAAE0A7FA0303A0269B0BF575
4A34A69D56270FBBCD33071471AC139C90CE7F8D08EA040D5658FE6880E58035
9DB44661981E8B79C0C2475836CA85BA749C7CB1687ADFFB0B83A7838452A6F1
83466DDD82D1A1D297D1973E6125FF805E17D38C76F5B4C7C83E8B807AB38A85
53E4B5345123312D43AD2E836E25F9B23583AF36D35161B3EB6C40B510603233
182D94662DBA29C1CFBB09441E94207F55E0B78627E2EC67AC26FA885E54E087
D698F1A4BF65FAF83FDEDF9FF98C673B7AD1BEAA697D3CB6D9C462D6C4E3B2DB
011FE15465A441C472834AF396EA9104317CE37F898A92279DB351D188A1814F
8A08AB09A1C3887E0A00795C3716FA975B5F1A2392EA4950D391482AE9F2AF40
D860BE6534F6DC2FF0E40D5A3A2E5B7AF64A3304B9E86E1BAFC54DE2082E90DB
FE87968918000FCCC4BBB3D0F0A77E13A6786072F77720ACE22C9983B434CD77
8C28637476392A5B7F44050B2198DDB2BD938BA9E0A07C349F6A296A1FA1D105
0D37288CA08255BCDF5929EEB634EE8C2A7455D8076E107197F4F97EA93751AB
E18A6D4E241BAF0011EC6FB1D192BAB823EE0AD7DD15D945A99E5A173DE39EA2
59EA2E3B442B92E2D055C196BFCE731A8139223DE5819D1764130EA68615B1B7
189F2451BC21E2E5AACC0CA211F50A13075ABCF9F440CDD30739CB3148475002
412C3BB280E2FFFB47BAFBF92207E0079853BC21C88A8E8AD88833808160A84F
3F9F293F7BACA804CD809616BE4342A5047C07E76889E53BCF1F1964657D64B4
3EAF4ACBAC482D06AFD458F0DC3F463AB5D1D4343512ADA1B78E710A10079F21
1FAA5227E4A5365D551C1BDE7D5E9A26CC8D7CCE79CA02A223ACAE1973BB47BA
EB51200930F442D8ADEC45F642DD8A886A39A3AC3798AB415E6CB6014A911751
975AC7A57F25C2EBAC6020B3B544551122AD08152B541949413594F05C56F93F
BF997CFCC30A827D98AE725BFCBD8A36A5062ECEF637B5AD07FF0ECFD58862BF
F0FAF3764B5D45112AF57AD63E2A0CE96F4E2C6D0F4914F2282C9D88E5F14C30
938EE6C68194808DD7333A1BC6BDAB8EB3E58F5E03DDB8BEB4E575471A0373B8
D9B96BF9A426019EAF34A2B13634F55E964F8B7C21D93731020ADA80E93F82F7
477A180FF3D6F876D5E3064BB81E67AABB0D1F22FAB247C46BEC449857DC4CF7
94E41D60CB1A7EC4E17F11916E951AC82C2D476ED88BE7999D64A4D6F3D28FD6
296AE76BEC4B0044AC2984337F2EA913D7D8A327644DDA7044E0146ACC2771C8
93B96FE305B9AD0F0EB9BA120D8DB54879A0463788B5F261ECCF04129094C34A
416DA82241BDB9F204686895F1936FFA3A8CD6C9014001A032465003A5310E04
016C3AE50698C63E37ACF756AFAA29249BAED5FACE19CDD5A5FEBB7411F952F5
0EBC070B8DEE5D8ED323ED64D790560A64E3B93CE0D8DD09A5E54B4E5F84D181
47590E054B70E3F30CBA53474D86655EC6E370B94F19A54C3ADAF77BFC22A207
36D7F3AE7941F78325CA190CBB2659BCC601BA85B214C53D2624B32B33E7D902
3B3B8CFB63CF6C8AF9623945555DC8CCB321E0DBB1291EABC3419C009A5A3750
6BC2760125DC1A4B1DF7AEE1C8D59D6FC70C5628EA55B38F9D2E0EDCA058EF58
2CEA8D6D8D1D374825390142BEA3D78744CA49BD54EEC1B72058DE679CDAD3DD
8F72FC21983A2467D000AE87A0F2AB99689F12B25A7E3E92666F3B44F37F00DE
38DA7BD7171FDE19B2407F893D523EB78494A60D0486B75FE82E88EAA03F6507
7776C747047E336053FBA35B5D9288B8F54F0FB93B7AF74423F534302DB937A8
F1EB48AC809BE050BAD39813DCF287E7B822B095692DE610C064F95504C55B0B
33BA921D3E00537474853D3679C8C3675A673E6E6554D774D715491E2407EE4E
CC6F36E9033E6406E6904C934DDF1025D0C7DC1253626A0C6EEF544CCF26CDB6
FF82F3378CB493CA2527D45EE2CA7873DA692889A66771DA94EBB0ADB9C6FE53
01F58A5814CBD0A6EA1306BA16CFC5D47C6DE264B0935EA548B052C16E049D2E
6645239263D0B6E64191746616E8FDAABAF671B02C86C840845174596C6E1F9E
DD7A3194C486E3FB319F985782FFEB05794CC8977E665AAE5D7512ACB22F3B53
500DA95245AB7BE1A90282BB20ACAFA2979BED0B38F659CD7EAE81E2E8703FC7
5242CB2E393771399BA25DC06AA5E5CDF0DB7CF70534F620EE513B13B181E1D4
193954E87405F8A3441BD4D94A1A3FEE76EBD21B800831E129F0DBDD7BFBBEB8
C1E91EDC4F4AB9327C327B4F5D6FED61B8B603FED7E020939F4E5DB2EE7F2A59
9819EDBDA44E136B801A216AAE5168BF1DDF7367A32DBA8D37A86E9E871087CD
C163F7596178F69D904F1A2ED4ED053A1AD9C8B08F37C8247738575EBBA55151
898F67901B52715557491B4DED0A19A1E6464D99B36FEDF9EF398C700948FADE
7A6E4B2335E903D3CCD64CFBB2675612197DD34000D9B35BC93FF2EFF7DB3731
D14BB8E0A75988ADBC792656B858C0919BAA073453B24FFD0A40D17D352B303F
2518E05CFDC4DFA697683ECBD5F9644163C2AC415BCB83023D233714C8195F99
F5CC3D34F7116627B18993033B383330B1D2E211B7812E89AE06248F41975F0C
F5FE0048F6752008074D6FBCC56FAB16DAA2FCEAFCB4B635CC9D88D8EF06C084
C8DEA328EEF308557EE7668528DB216195143E8CF31C5D103CA1E4F50FA5B17E
3209DF9F81567747542BD1857B6F5060D0F822B463D183FFFDF1A2886838CB11
B791158E1FB4FE1EA3317919026F198BDDB71847B77FF4BA89C15EF8B0055DDF
C3B366F7A7F361F9470E8C548EDB3CA0CF7B4B6B14740A6F22569A9BD942A13C
1FF22C22F84C48B07BC584F77651C95BD71456BA087709827B05A80FF78741C9
F300CD61CF880F6B9A1B6B68F3CCF0B1836A57B85F9CF1980E078225BC8614D6
C29F336C5E9F60656D2F7B1DC8BF269241C0DA67E5BEC040A958B14BB3D78215
17A66CD8D4E2DFC75C0F145FBEBB48466ADB7CE834363B89EC5BFC3C84FFFA50
5C304D514E5473A41499E485ABA13B8242308FE26F51C5F52B538A85716A62F3
27A10682B2CD1D31625B095EA8C29531809B80408BB9B61C2DD4CFBCF7322BAE
688DFD73F7115169B32AB8B6C05B20647C842DF6AAE5843C949952BE48F9E5C8
50205DBA79CDE4831797C62154E0B91E213252C58D39514E9BF54D46DCE12AF9
14DBE32DD3C1292D965AA7AEE47502E92B821CED44D2F499C69EA518C7503707
97B96D672132CA94E098A333D20D4CD01885C2AF1FA17CD5DC6C38DBE00CE0FB
20C5604C70DC9E98857AA358B5F754BC18087A289B6E43EB001FA13E44683DC6
CCED04122D1FFF56BEABC7D9E24D4245ACC125867ADCC571C1F70FA8326B84E5
E49B0DF425F90DF8FD6B5003D9C6C8787A337728D1FF40967525002205BDF49D
E4C1B446CBE6683FADB4A3F5CFCB29196D5920D78A27E926494D5F4D94DFCE0A
70D390644D376A01518956381347C7BD2E67F7F7AFF763F1E18A1B06587ED0BF
CD31833B1EECAF947E67DBA702CFA976DA0B21819E209EFB5641184DAEAFF3FC
3E99E8BE0D7CF6054D70678B01042D547F91A3D046DE70ECC42D5629143FBEE7
5E1C89CEF25CA0643BB2A4366A5EB1A89FFFF566E7A6ADF80D431A13D1F870E7
9B3C0A8801056776BD5C9CC6EC08DB9DEC5670442C353BFF385891EE3A1B5CE7
6BDCEBA951B61BA48FC22AEA6EAE2B2167EC229220EFB97306A6B0B1DF3BF3AF
690E1AD2E1C89A644871515102AEC5C04C666B0B98D0431F47F1A85B4D8E4AD2
64351DABB7512B0C01935C590257F4F2D842D172D57C7BA9A9B55CFB48945479
C09580F378E3BF2E5FB4699E24C566824C8AE99CCF0EA0BC1407B202F3CD1F9F
209A0EF9AD85DAF560741A702B11CE084913296F4F237055338B097C143077FE
9C8991243760D452B459DD4DEED2F039D4F536CABFA083BA6C80DFC355A362A6
DC65AF82C30005002C4E3FBAD8EBBE1FA99D924A09B20A1070399A6E816F7DDF
A1EC3DEC0FDA50ADF09D8FCC01AC0731EF06C3D620E42B145626CDD287909F4E
902B150B9740CAD83B848E819175C4E9E5718AC2498022087558E2BD4C2ABA98
16226EB744128F41014C24426A003C762E498A17C7ECFFAF85013B5C541204F7
98245660D577E5018AF01116B29BBDF7C3E0F5C07A8F7F502C150A82C241D7B8
AD117442D802DF52CEE62D333C8680E45AB29A6CC48999B19367801BA59E660F
C5B2B1E296511FB7643BD998F3C5BDA4BB16589BF177A238168FD3279DA37DC7
1D35BEB2F17B2EE77A251071F93B4C14D9EB565D29AF1B3FC5D973408F12F02C
B8EDDF6CE870E720C61D187C817FDF26B95211DDA7C94F44637ED9DB8797D38E
81C7724296419D91D7204489394054D1FC534C1F02D6A99428D8731ABCF5D2C8
3FAAC1AA920326C75F62F1790CF69B37AA1F2C7843A71A64C773142F47AA2F4D
D210FD30948A4CAA3DB59ABC1BF5F7269FE8A9F7205584B5A53EAEB35FA5C74A
AE3A3CF4BF3E3E7E1F8D696AD05F9A61ECA0BE81C9C8D7B6938CAD55A5115A0D
BDF308BFA8CB78723FB40B625D7418A892CFEBFF58AE1CD0F7C4BAF9F2B5F42E
39023760290E41AF5A67734E96DE631258A33BEC1D91D932FEA8A790C218DD6F
CF271460677DCA185AB61EEA65500D048E11CB8A8E505E9E31AC0991E75BFFF4
FBBB8CD834845AE5ACC4988201897A6224979A19475976933B742305066D1656
493996A2A629092FBD2C4E2EF1070EC9528F0BC7ED87DA4B04088C5EF94A7BD1
E361BAD8DE2B1AD0B30D5A2B2DC4A6A78E59C1144F200FE34CEC934F99C14E90
9440B5457AE7487222C8372A2C548AAB3DB4B6D1148F3EDB90B6970DC51ABEEA
F55FED4E2A045971D213CDC2DB3621FE6CDAFEE3D5283B5802AB247E9FD612C7
762E866A6E4C83D0AD28B315F84FDECB9089DE5CC2DDB60A534461E5C023C137
C1CAEEB86480FA9072E4E58620CFFBC8C6E51250F22B87D829BE87991F755B2D
BA4BD765F7A4F966BDDBC0507BCC1456887D508BCF6743C363A295839A2006DE
CA4E445CB30ABD3A6176FCE2E406CF339F06656D824A6E1CE9D33F2A289DD8BE
B1EA056C203B431634B78DBC70A309709627CC97B1FCB791BCA86C8000610FBF
38625B8733141A6BC83CB7D22D504C13E3B3CEC8F2FA3948635339B38E049396
532635B98C5018A15684F9BCC79AD6DB70E636F6A8AA79106C39A9F3738C63B3
9DD1BC2B4707286AB421867AE5AF3F3B38BCAB834C9E0D06A6FB148FBFBB8CCD
D33756619AF59ACB9D17A3ABEAA6C652186D6791FB3499BBC0AAC68B23C50409
89825428B9A87CE2959932BADE6D74857E0CEC3B9B3C66FDE7436030382F9833
2EDCEB3669E8934D1DFDF43498A55EDF16A009E3EE9178169A266871978FFA3B
FECE3465E9F0918267336E1AC2F84FA09BD0F0F01A5C693C8659E5ECE5F23D71
6597B983385CA0444C480FC2B7F3E50DEA1445D9E4CBC95417F273AB83ADCF6F
99961DB2281F99EF93041C023D40A1CEDBAEFD14FB9E03BD6DCEB7158A8BF356
03C688421CC6639823BAF2248AD544A48273795FF8EC6F39CD1AE0E3788194F9
6259F8A07ED67DCE8B5ACA00EA4C0E1FF55CBC8D3BECEB718B49F2297D416D2A
3401DAAE73B06DAC73507D4CBFD16D0B592E7A24A122ADD6648E60EC11A849E9
9BE97280ED370D6909828DE61CA45D557BC13B8DB8266AAF65EC987FC4455748
C8913FC00A0891208975BF20C63B321F0584F9623A71F05B694C7382FE2AD55D
3FA827EC09C4A5745707438921B72245BB1497191327B51CE018B956D4E09453
1061EA1994E911990FF81650F2589FE68B29179A3E97A3F0B35A3FE8DF5B2092
3D1396B65C30054793B82E7449725260F4476B1FB7AF7D0F95B5A683ED8DA838
06CBF2B803C94B5A135002CE4CC95AEEA4C65E463AC3961D2D195C1560E30A51
9F2CB74ACD79560771B58BD38E2D621DD4DFFB6670BDB87DD1763ECF666139E6
6CF7D277ABA5AAEA55AA7900864EFDF5F1C22E3C015BA8C46DFEA00293FCA8CA
D6BD2C799AEAC3A4FCCC29386254DE597AE4C6A8897F9E44E3EDC6BF21D70A72
AA4B05B19BC6EA6705003370A63CB708613C6CCF19C49E038F56DB0698B5AD85
2CBD82C783B81E0EB44C2CBF703208747659F0C260A6B4FD314B9EDD41620797
F020956A61C93EC15ACC8EE5F47D870C0A3D508444AFF044845F16B02C510556
5CBB43DE8DD9B1F8BA59187DD339A1F2AB6AFC3E79BD199CC74C43983D9E1CF9
C6433A30B98C5233D2B5EEC1C70F6F28FF389DA4C584C1C89C0B70F7654DB9ED
F8305228BA8CC820918A298F2B21B0F1F1EE8F3F3021152941DBD1298F498E3E
B9B5D24ED5D673E26A25811D4BCA9D693EF8ABE7827077B060A9FA8F120B9B0A
CC23C3BE38506A74046DCD02DC03658881A9C92C09B14BB2D87AA395EF6E1C8A
665B787DBD0A6B4CDE1903873187DA86D2C1B5D227166488B70C8A5BED21A826
EC20AC4384A8CFF8CECF07A59A790ACD24D7090BF490E9977036461B66EAC5BB
976C63961D3272E4B12630C2651431B3554ACC5D07ACEA1E064130D54CA09832
1FE35A05FF4CDF11A2EF3FF5EC6E4153117C8DAEBC28D7DE5CB57A30F23A2859
902409CD459F41BE1139A5F3332699713A1D0E26C392220832FB0A336EA4FA68
C4A0C748338792955E0242EC975D2BEB739CFEB56C48432AC33288E52F38272D
E73F258D2B99B1BA830B869CCDB7AE4EE70D46F3B11BC74281190FC625ACEF5A
3839BCB53FCA127E78284481518A84B2D8EFE81B677CFC3848BB5760CBA1D313
DC83B5E924BD35B372B51AF5029011D8526850A8606A7EF26357BD27079480B9
50359D72B23BFC19B9068B03663A126AD84F84BBC214706C4A30853D90BE5420
7C2842045E4CB16FC9F2F22D88BC3CA66DA2890FB3B6009E065B8E2B2C8E7CE6
92746D29FDF3DD6C73C55A1E990A07F8B008FCFEF55C25FFD265353A0D84229C
2226465DBD27291A7AAD14E94BB0761369E2E54C06B408FEE2918DFD868DC448
0DBD8F7B43707C0A9E349EA8CA18AD26F3D7A01485B45862200BC7051B706093
5838E474E21B30B609BEF51309650A12A975105E60AE0E07D48E52A869C40EB5
5CF31782D1D60AEC3581E275BC94ECEB7B517E88F6126B8A392F962903111524
616DDC2B199CF790ED6262043A642D66AD3FF1CFFEEFD6DE3A2FD816398A08E4
D6C40A823273E55BE1155DBA5E300663BFF1B1FE9F4AE58671187FC421025588
19D054345DF144731DD2332B0F7F5E84C46AFFBD87560A2465A0565E91E89D13
35338DDC277E41010807AA325DC5A5B0D8ADB5563588D38C1151A012779EA3A0
18FE29FB9EE32F0F94CC9D675700317A06B3722A56CE97F88218C359AFC59257
0530F2FB3325340C31C59DAC6DC1434CC7460144DD2B6AE8605D0B92975BC6AB
750F4A12BDC1C612B31C7A4A92402893A7BC2B0D206B0B603771A27B121C5E83
3A81740953E78C51C48C374BA974F603DF4E0C8BE81C50F1CF962495D645A9E2
6C29A8311282A2DFA57985CEEF4463E77633C6C4A987E2812B8CA402021F33A3
B306589E39D1229FAC3B0B2A925839C8C34CC82E728B395222C1E9B233D025EB
E4946011655C21E22D5420119C91515AC8E44D5503F057E05D147A27AAA2684B
F08AE584333C38CA8DE3206E4D672D1306407D69F633E5C7B79CE97EFA3FF7F0
A83DDCD78D676E71B6C51A64A87FD82AC7FD78224E2E7EBBD5193878AF0D3EE7
55BD5958FD3632E6703A5C8D4E469825F31A9820830FB63D5BB4E8414211B97B
3F5630E48A620A297B211C3996726C2BD5AA99752F7C9665CBA4F5559692B732
7B6720BE086562C6CBB48952E50EB4320D53CB983F9BA5E77BB3F6A96281564D
7EC007DE0E5657C31D96285557B332CEE2959749E610D02CA9F12ACB9624AEB7
824D5B0AE928DA1E4073F2400FA3691AD390CC9088C268D21D1CFC3186DC7060
235145C709EC93F4430AF3A4E3BDA695AC6822C4F42EBED74368F88C2909144C
30A00A6E010B4220EBFA66EF79E0BFADB40D1337D7AD3D3487FFA46B54D3305A
460F868CD853373258BF4870481D8FA433728039209E7FDD13ADBB9B5BD42CD8
AEFDD97BD87B20D735CE102C0F60A9D44BF1D75B17E7340B4E1A110BF7ED2BBB
B9AD9B8AB9094306E2BE2A76A177E4C9629776782C4D11EFF6063FD1B7402173
D75BB92549852043B5A93B2F223400E8EDAB84233CB6F8BBBB8203FC988E5357
B3D6D909980CCB2EE043DBD686D8D58CFBA611F328B18D450271C3A0CE600F9B
DCF81BCA19F13CA5EF9E68E735F0FEB865EF8A1D2272A5F7AF466136460A8ABD
44631A2723FF23A43636D5CDB34C008C74C0035ADA5B1C175BA90C3A1E4F0F30
828FD5292B686371FC3C112A2667AB8AEC7E16E2E0D368D38C1F7EBFADD460A6
0C2AF2262B8E243EA3CFAEDCDDC84FAF3EA75721AAE09BB9C2006BDA2CE24FFB
DA8613B2C3C1B926DD8420D84FF417D9F1B9C0E1467C8A79D9BD0901DBA0C1A8
2B9CC1E4C5B053B53BBFC5B1FD5B20DC08DA02B22AF2A316937AFF552A91D965
8FF8C050401606DB5BE4F2F78BC6DF142E1DBC501D25CC443641635A04B12CE3
436AA3D67CA3D126C9BA6902930C6B6F9297C81C1A312CEF52CDAAA7A2DFB5EE
919F1579EE7836C788DC08951D3435D796AD9D35480872D3841A39E538C32D0C
C0BBFEABEB5332BDE9BF5A1578C7F8365620CC9E2873390E2A422847962C92D1
4E8C4BA57F0E7041043638A7C4850BF9538D50441B5B14B34322B7DFD215C293
73484C9834C294941B263898CDA6103C53E0BCE514CF9C82A4EE22F45E5506B1
5636069D5FF92A83831C57634CD84D5FBDFED62624FB8C49FB6C900C6D9FE07C
263B8EEDFEFBDB6975B15F487C45B645447ECBC42477825FFA4A8D4292E8E709
65AC76C0DB39EAF542F7B0A2B7AA4276DDFD012C099FBF4E4DE350B091A34578
52C2D60EA86DFAC2443F3FB4643D826762550692E072BC167813C39C5FC897A7
210D1F291C27C6187A26A0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872F691DC4E6728A1CA7B24C909D0B9C03E26
CAB4684ED3C2800D3BD58F5D44F0B16C88AFA1A33F9A3D8C9DE24F4A7FCA9801
84A9366A77EB2FA0E1CC2465A9480156AA5A7DBE1AAD4FCBD9DB2E1289308A60
706034F1B137A05F4A962CF1C22D83316A517000F1073FEBDBBAE2FD98BFA9D0
8818AF6D6B1C17387237FC958B93C71C4811B87B71B83887423C8EC095EF9E42
8F956DBF5B86F15244E8940C2F9BE4BDDA2E4322C052851677B2EE5DAF403311
F039C6218F4D2882FA95447F839D92C164DFEC115BCDA359B58305C56E941651
E322F61EAAB2F0BAC298957E4172F101A12BC5F2734A28F53C105348362C617D
60BA3678C8215B9F542D8116D8DE31DA02F9E80970020F8C4C9D94ECB95428EA
06164D1C97A638B4620E485A996CC84306CDD2D6B4B05BFF7AFE7DC3807891D0
39AECEAC3F500A09579E6559EF6A8492F020E67407CF321E01EE8F2811A9C0A9
32D2107D819094CD8E14744B571776B1D9BC9C544058D99200132ED94495BC18
92BB688C4FF28BEFE9079DAAEF7187DEC15CC897C563DC4BDC3F482C8C3736C6
7A14C6F913E666C27F082A4720C63E0B47C3BA1D271E523BCB1AE8B9A31FAC39
8FB4643E2AA1E3A0E850B45EE08928CB8BF491119048F4C4CD320B25BC0091D0
4ABDE47EFEC71E4973F629B392CE3475109E28E5E695E526BF8394BE7D685F4A
E35AA17151913D70E6CE39361C97C925E515EB39632D220FC1BC93C072AD07C7
DC28850415D9AFC1C8A868801B990CE2D26305027E6F9C6592605A206046CDAB
D9D54EA413DE45322C948CF1656FA97A05A937A3AF22EA39978F1D7A44869AF2
4C16FE3DEE57917017C65752C45EE8EE604915C3734157442A161BD5A9818A95
AFBD19A4965831C6C0F2D5F535AE93682E855B1BDD6CE955627289962B531FCA
B29F4C8E7D591AE0494A4BF14767F03C210FD16C0FC15C0DCB4C59BBAE3A0C3B
766E84C5161C8E9A5F8178D528E7E6BA5DEF6EF5B452A9C57BE8C953823F4F7E
DDA13852C352BE7DCD8FF3A61799DEB471273D0BF3A3C7921F473013C85B689D
316D3D3D9C3132778EE114FDAAB496EF36E316D1600D7F62294E1C6693CEA46E
F483D1046E1A9FE6EFFA27CA8C92B2697D90CF0F8A4B01F9F1848E690261A5E3
7FDACD20FC158EC0CBE445C9127E26A13D3A8E987C451BBA3AE29A437B17993C
173D78CA380FA824540B79150E4DAD1873A03FA57080AE5C40688DCAF754A276
F0A1DE4CA0F26D46BC83E8E043427C28A2401F5ED30A4C2578F06DEA030E1B6A
6C1F554FD4170A0A88E0F772699FDFB1D087C68F89BC0440F5934ABBD4AE34AC
857443E951A141E4799181F685FFAC786ABEAB809427D3C924672E4183212C2A
42C02E3D1C41FD46552E7CA1B36B02C66505D76EA273AACADC529A2B37845CAD
C5D1C00E25927E85246EC3A5F3712EB3029E680F91DC145A4F7FAAA55410683F
9357CB16B5DF771D52B18ABD206531B6B4968A4658C198C4CE1AF752E3A7B6DD
E7BDFFD0954AD15D9D20849459332A80CA5C31C59381BBA33B750675786A99B8
9FD29446968514D49014716D5975AEC37D2CCA662CFC64BC49E61D8C79F8DA26
6F89F3A0DC02BC6DA849100D476106FFA457F1244C6B5E4238967370A588E43E
A7817D9616DF1BCA43019F62AC6FBAD2A4F2C83E0B909AD58E96AB699701FC23
93E4C219296AE558CDC72D278609DA796ADCDE4ED63CEEB367F9F821BC41A7FE
B9BF2AABECFC863DA7CB1F0514DEECC225301813E4ECE6D689B0A3D3E5C82234
27699086BB41DC31C235D20B206326C7E4FA975CE6DC91D4F8B7800A05DECB30
0CD7A8C38D774C162D470D7D7F201AD2A486937EC5E0331D522494F1203668B5
BECCE84F57DEB5F09D18EC72724D2DBC00F280E4615319C2C9AEDDF9F3D98900
FB56F5CE2E7B2B310E2C670F64F18D7164BC597A28D5E06E1A1833C74A1F0688
58A412E79C08908A0030F94AEB435C0C0C42BB0FF97EEDDAD8A1324574CAD1FD
05A37844799928B4DA7787125627A93D8C76370C87943275C36814C460BB788A
0CFA4E01AC7AAE77183C14FA5B76B08C3D154265A22CD0D22CD8175CAF404032
DF21CBA457DB65770C16EA31C81AACAA1ED3F498EB33F599A9B377084AA5BBEC
4DF7F762560C3E1F77717FA3924B7B7C32F3D4A9CA4FE72E6AEDE423CB9AD2C2
6CFB2671B72D15270CD8CB1D59CA257AE516E1F84089E6E0A57A6AD525B4FB46
9D4FDF87EA7CFE1F5F5E1CE7CDCEE753A4F34FEA0B2C6B2E0B3D185B640A4CAE
D3CA557EB3AD75BE428A088081FF6E74A342A0FB9DB4D49F3FC041809ACDA455
C62A76B51D730EB9EB411874BCEA002D2EF289BF18C8EBAE755857D51C8C2E7E
A777FFD62509810B87C55246B60391D5CFBAB38D70DC714A6C568A8CF7E44896
D8A92F20F315D8DEA9D91C31192D23878E807AE0D523F99254773C65920E5805
03F5D1F7562F7991F7FEB5E602BC71CFB91E4FDCA39A1F5578F86FEB25C1ACB3
94183F31D783711AE45C482F72F7132FA8EF7281043D30DEFD2C68CB4E6F0E24
94B552180966B29031A79FE3A1CCDAE03EE8CF0E20E7D2C8C880D725B3C0CA98
68A1B4B066C40F22F2334343E4C62E28746BE164AFCBF8F5E8058815645D2180
D8C1993DC7EA8976F522C889AA3F48827DD9280D36D6987358A375A8D5E57FC5
0203EE6EC6625ABEC849DFF88D61ABBA017C56AA3C9B7FFF11E9378A08B9D0AF
0BC5CEFAC0C7DC2D83EE0CC8AAC15778A233397B42D6F3E389C51A1874EEA674
5F62F0715C865422128A163B6C6AE0D989069CD254165ADC4C980F349927924B
24C1112097012638CC39A05EFD065090894BC8200DEF93B057C7F66A82B3768A
986B66DDC9D43486DF7BBC05B79A1E96F4F6F4ACD16FCE28DB743BC92B2EC376
370FD355FA08C74EF2701ECF0C423A86C57CBAE8F9F82E65EDBCCB17469C47E7
B921371432AEADF3328894170304038253421DEDED8FA6A2865F8267C8F1756E
5F84C7C95FDAFE8ABD88CAA7ABD23DEBD7FC535C46F77718A6955F9C81401F72
1381B8104C1D3FA29B837D378BCF35DB43628938193BA990F4F6D6B2EC17F6A5
6159ED98B450806EC9100A4188B569CF7F52E058415778334C75C7ADDF2B56C0
66ACEAA31911171B2040FB6637140BE927369F803A4FF311D78D7C8BF0DECC07
116A05B5D6D42730459DD44EB86040D1DA57226948863D5402710A02CC77A984
1880181CC631B7F8795A88AD6FBC2E709568E556CB4D1016889B91D677E0E00A
028B98F990B4D015153CCC2E1853473BB9B37E80C942FE914BCA7ADBD966AC2C
2197D2C3D6D00105F02425A26341AA5AC2DCE2E64092DCD8A43E34700DBF6F64
68BB98385F009C20BB8434DAA8EC8FC416BB46AD08DE2FA190BAB9326EEF9FE6
A563644E59B5BF520B31ADD1DEE26BADE0A64FB79CF0E0225EA401DB454BCF25
8EFEC8BC27F761240BE476D80CD1A96A3131E15A75FCC222AC76124A59410EF5
1880CA64BDC73AD1A8116CFD05CE483ADA65B6260F0EDFAE9F825D09A330FC50
A95CE3A4CD41C1092F4FF2D03DEA8AD588BCD2CB6D686E602A176E5B00D0774F
0BDB3F0E22D753FDC635611ACD4A2A176FDC196FA9834045C8D38B430615796D
ED6C730C69FA2AC17072EA6C9F52E42816C85AF34C21215E7738B52F5ECBC9D3
2FD482C74A5387629E03895C5B9462CA49DEB32E539CD690B41B639E21B547FC
F698B77B1BE3FC7BED9BBBA6BCABDF0F1771AEDE8BA1D267A8DDEDF3A34D91B8
C0B4B022FA0CD8B0AD48BF97B97292A1844639B857E80BB677C002F5B67650D9
D434956C7787AF25B55AD2472AD6652A1AD30C39ADCE69EBDE3AADB1C5F07B9C
B5032F44D11D72BA01798903DFFA60F6AC177C9CF8D4C7CCD9314923F532E28E
DC1F4EC3D0E698D82356937143EABB7A16445864494B181A579D373539E8AFEB
5C0C8D10D99B443B1CB9294FD84C265B934A0857ADEC127AB718101083E94631
B8295834C8C3BAF1CCD316F4579DC406C943B14745C15A208A90BF3346BB7DA1
5585CE9EDADC2F0A01F9BFDC190E29BA33396FC8598E50D97955379066FC8C4F
948986B1F80EFD950B74E614A03A14033884FF18C918F7956F817281F619F322
A3635E450CA14DA5BD9E017D60FC01124BABE23FF62E75FCA079BB7784C67E58
AB7F8DE615CB09E909AA836C2B4F5DE3A7745FF5F02CC49ED6DC4918B6879A73
B9D49874E3AB34C8E233CDF3BE813A9E2555122B46A03394E8950E47C9EA380E
995D1CF13034430EDC64C56AE6B807FEA19738D8FCD712D9FDCCC6E94970DA68
1DA58AA558BE6EA96D70774BFA82C7B080BC0263B2EB7BA006F1E34B5D2182C0
0F9F95D584C11CF6B22868DB73DDAC0762468D94FE49C20E931222AC23981CD4
B7B279E3944C8D5D57991B0662D1D1E9C9DF1DA7866A772E358CDEA9FBA4EC89
4F5C47C34D835DB493AECF6389494276FDA492539D1D4510456758B49C4B75E9
7026A70A7D06D47649CBEAE1470E7DD748B8F839254BA9139D345103CB03226F
4FD27090A979C3E5F3CD8A5CEA478627890536251C4C151A7BB1419264F16AD6
8DAB440F5DF9902E8025EFB02F063560D57E81C232AC4877088B9B8443238399
7DA6093FD9E0815F9DDF6E6A7F3179DD39B987048E8FBE34698F7BAE160CCCE7
94DC4B1771EB33E47EF014766A31E1177FED4C6C8D24FC15F45E59E4A45CF948
BE6E8E6E1C6B6C5804D168924FB0353B91D6BC325A4A9E2810156BD81FEB2A9B
FF8FFE4385EE66BA2446568997D1B4E09AFD40BE2105B861FAC6C32F1A22162E
24CCDFAB3BB1C76A4643D7E398BC25405F561BD9FBC456DD7C0B1A6BD5BF1F8E
62D380C7849CDF06492BEC78C971F2DB6042CD991A055D41BC77DA4210A8D394
ABA1B3FCC50E357D8145A1FCCBE19B1974E7D188BE0FB15BB46C05DF5CD9FA03
668530FAD2A77A5EED85C9303C4F67CB67CF9AB504CB4FE1C4F7A53B8EC2FDC7
614E23F7D32B7D3AF2D5FE30359E7B394A3C21C0D095F94F3315918C93F453C0
76341D757B09A3E3EC6954EC35AF45D1636DBE4D5EC219D9C8CA25E69488DF64
1E3A087A0EBC9654A42954E33896A851344E2E55ED6C20C0FEDB79EF058B0008
9139883BBDE13DF3AE05BEC1771EDDB9B003555AA9C5AD7686A3C54532B07F88
56E3D629286E320BE4C131762C88AECC3367A8436F035D79715C69709BD5C0BC
AE95C881C3D8E85B76FBB10040F0DADEE5ACBDBB433612E222D09785408DF04F
04C9218D31ED24A5AF06000348DA2F08424BAD2A76790BBB18E9A73A3AC40F56
8487AE99F4901504778CC6CAD142D172F4DAEC7BE571C030BFE61F232CACF286
7E6F462C044BC20DA885EDCD4800441AB54292612529D4FE44D231A37C2B30ED
B15F6F276042678D1699826FE8A7CA7FE321AA97994FA366628CE63447B57EE2
8268FA3F2101AFF38BA1917A296C2BA338BF20A0566AF29195C653FA085F7122
58B8A1B9AABFC58AC7724296419D91D7204489394054D1FC534C1F07DE2CCC75
33EFB892191B63BB1087A81F73D0BE06E4C49060E599A5E23CC2A3BB44438C74
1B79546B6FB5CAC638C757F60B0D5EF70270B40D4EFDAA421F4059C474F06764
7464A473A7577BA18FFC114EC9B4A6D30EDE8AFB6BF71E951EBF31F8B1402F73
62B2EA5FDF15CCC34FD35AB1D04FA90E615D06A805EF2EA704243FB382621C00
57C39343CB1551171CA4E1EDC85D3D4FECF940251570F47AD369753B77981AD1
1AC315AEB0294B62BAF5C7D5678BE784444A8879B3E25D0FCADD4C7520B11492
D5F17F931709B4EA0F908B64D5B0ABFF06BB47ABA09AC81048E55F06D14E4FB9
6F0F69193E868789380DC127C1A6CE4295E223ACFF1EE359821663C771DF990F
78D69353CE538FBD1D9A4A207B4E0B90F571ABF9B761FAEBAEDAB5B6975D523B
7CFDAC57C03F5C5296CE274C11555E00B42E9F3A9ADCFCF2099128D1C3565C6F
5FC2D898DF5C128A1196B77BF70874462D6D951BC54D61D6DEF2B38AD6B8E6B6
F2583055770EFF67496C00AFD0E4B4C9307AB34201AEB2F6F8510242AF91BEDB
6D70B1A52B91FB3D1E4BD4E3D1F8DD43E4D83E0EA1EEA217BBF34029D1B0F6EF
FA7297AB17B4D2307FA2839FCE196D5BD93BED464308DA8454E8D690A5C6425A
4804E4D928015F2C12AF636138DA50EB448DF2CABA8C237022C0FFBFCCF21DFE
05DDDB57C9E529732F99DCBF7C75826EDAC8630477C415492F8A56C95877234F
9FD6BB97B3AB5C0F27DBD4DA64308307F90041D351B844947C40B5D8C75ADA3F
1A581F1708D7FAF7B601661B2E2B92D08E151289F0E62B8EFDC4A3A06DE22FC1
FC8C4F065447F5AE375E90AB1DBC39EC9D2AFDE7802DB04DF728AF5D691124FC
98065910861FD2B802EDE74ABE7055F5E16396DBB3F64411CA137DB90C3AF5B0
10131BBD91387BEBE127FED3E0DAD612ED0A701A10570D63FA6FAE3C75627720
146C67EE26A0C7D3C07F365BB9B817A766BEC0F198937149ABFCBE49B1AB8C9D
1555076F312278CBE2276D9B038B151CE7D80B2B964B332A89C5DA71AFBF455E
5A68FDD4DF74A8F4E61D0746BD0A86AACFEC7C2D4CCFF39FAC7EB56BE279E1FF
B563D1D646046174516991A196A915CE6918CEB96FECA94A5F932FCE2CD96CA7
03FFC8167C703D76BE94CB9B5CB415F1EC1B57DDF194B61D4473594BC46DCA84
D0B0C6FF837473C372E70836D4C5747C4EEB85DCCE95E8B97E579DA191A63FAB
427A45CE4DB5FB80350DBBB23548CDFA3844078AEB61E010A7298BAF0F4D6E3B
6C498715759C1D2CAD099DD60AA7BFA31435DD57C23D90A89B5EBFA7E3B2B839
838BB87C04841CDBEE459B73A91D9F6E66A36A5D81BD0FDF6E2F6A544CCFF36F
8AE899766CB704A3C238DCFCD3AD96645559ACA5056F7FD695D41F517C118EE0
9C0DFE3D3B3B0BEA1161BE49E96DB2F80037D46C98367C6FF13C336537459D25
0E5656E7DD6D99FED88B1EC393EA1F0B6AA0630DCBC4312D0BE7AF5D13CB0500
106B9E26DF6765ED81EB54DCDBB4ACB292370C11468D76D283ADD44D7C897651
D81D685B49718875A21A1B03A82C54F7D516C9C7A4A5AF1696FEE4BDC1B32582
1658DD2FD2D201ABC2BC9C88A4320057F26DD26FBE057235F1D6BA0524B381B6
23616474EF8A10E9811B2898D889A581451395C7C58186048382FF51491D1A57
B150A5B386F7ECCC0EE8E31695A336BDFF6CDA27795EFE5F6E32A89FFBC59649
CC759617E70866086210060F6439E9CCA612DC7ACE7AD12F478F25D405765924
5BD5AA1A57DC0E956ADC19E19CA5DF2F8CD8BA46E3E872BD8F6DAD70F1143917
DB990826700ED99EA5172A1047B5E8CEB7F54E8E4D20E485B5D572F1CAE516FD
9A45ECED9B0651A8A70127A7B6D6928D6393D851580CE7EC27EA837EDAF9DBBF
7EAD3B2858BCFE820B40134A1B0FA00E3C4B798386E997BB6A8F931D012BC2C8
5D63422BCAE414F6A7AAF7B0B472230CDA008F37FBD25D93C832D3A03EF24ECB
073936A0C035ECDD9681A5294F393500C656827B3B49A5F4F7357F9C88B45034
BDCA7B009F2C7C5F905227DA1EB25BCAC303AC954222B4F03DBBE55EF1B41BDA
01D7778687C22CB79310A9000BA9ABABF2259E1A12F791CF64CF7BD79623962F
B0309E699D08AD69160BFBDA23C2D29311C4F82514DCF27C6B9609E848D22E71
F0F57E906AE3F15F062CA4814BEFA3FD5760E0B6F6943A992E63C0D48FAA8972
C660BAA4F79A4817099FB5F3896887F0DB0C940BD5E10A5FE74E6494B8023BB0
7BED25AE3BB9AE7D89470386BDB6CD26559C6CC16BAB9E9909EE52CFD9DDA56E
43B43EE27728E645A56F836D6598FD8B539BDCA02A0A1C3058ABF110679CCCF1
D899B4D1C345C18970019E0686B41219E201FDFB104BE61987035623AB8DDEC1
01D55543FB93BA5928AF948442A13927989ADB385BDB052206F0419C55E36B49
17E2A163C5CF1C65DA4E6C2DE96F10CE5A5BD760D3AC5545ABD01D6955B0F8DD
AC8BE19EBB36D94E529FA6053740B36F01C6710BCC3064B3896E28AE7389D260
CF027F5992E9E7357B597236A903ED35AED9257EE677F1F5891DA063560BBD23
3F454642213EBAA20B14E8FB93D86D72358F53C5E12348ABBC612B79EBED8E98
A4C8A67B451B6C1403F268610EE8EFD353092B1A2E0FCC48AEB365AB972FAE3F
56E11B34BAAAF9BED516632748F5CD6015AE51BBE819F2D472E963C4F9FC81AF
3851887FDA4D03F83EDC6F2618FCC7298239D4A6C4FFE0C1EE9442889AD25165
226B49D7050D44AF0044A78E045FAB03CDAA01086862BCEF11AF66D26B9A0BB4
AF1313A2DA7B0FE7F97A0B8C4F3A07AD6EA59178A1B71B05091A434A3A19CAC1
24561650FCC4B0F0FE41F079E26C34676C1A750B344A8C867D0962CD51553F25
9D213E48798F2DC5C97E84D644F4B693E52269A32FE0020E9959B121E14C0839
1053E877B16293351E692791519F0B31BCFEBE729C666E929DD2CC04C4F66493
A56A4FD689FB6BF169D424EFB12A1ED6ED2383C65FF6ECDF64EFEF2038CF6194
AF036EB3090451311D2E0315E7E138A9D69DFF60701F4F7C66B61198F8066DD4
93031D1A5C01C0704166CD3DD128179D7720635059049FC2FE5181FC70F4E196
336FB352BF532FBD0172B8082239DC409E8803FD399BAAA3890E4F95DAA83D88
BC9BF79C0F2F5CE3C8FA6BA49EA0881583D592358BD2E97DC820D7C9137F53E8
335042BBEBC8DCF193CA3D40E5337359272C8BEF75D03C6BF5FF5AB60CB740C9
C49ED9DEE46462D60DCFFA859F2B46DF97AE05915E791F1CE849154C53C441E9
6B20B663F5490FF79AC9C6851E779043D6DDBCE846272CD09C3DDB7FC6A25976
EC69FFF9B117C01C390C300B3AE440AD490C5F12862DF943B06B1FEDAF188610
CA4A9B1C242D395273D98D7A005395D8821E2A6B0A654C852C92F74A378B308F
05D8E2964B470316617538D36D4345C40F9C260A53DBD3433E9BA4350E69BFF3
85EFD4FD5CC59C5287D92E1A8CB5A195036AE42DFBAFB1E188B909F11CA9C72A
278C045B1D2572EC08DE1424D2420BF7B4F61077B30ED892FE8D7940DE0F7D05
AEC38EE03DE24861F1909488B3C1295FB381FFE037D9126BAEBC8D22838BA091
9DEF1D3F443A32A724A003C23DE44D0A120DC602E8E3AAD1DD61DADD7A1FD82F
0C2E744CC3B65AAB451015251DD086A8D2A91C2A290F89A668E456DA36AAE007
CB4E8CBD1B1EF055DBB7929E9666F5390798470FC470403230C4E7527EF177CB
25E684AE7DD09D090EB80CFBB10240A344C911FF165960436A8BDE59944B05CA
A1B1EC678BB3B45FBEBD4988B5ACFD71B15DD33ADFBACF2EF9EB9AD584935A58
676976DDD2B6E118FD1D44EFC10A30FA083F2C0EAEADC517E4217484BB975578
CF289DA1C113BAB6AC38D8E043118CF1325D3CDE7E1671BB9371FD1BE21B1AD5
042B5AC5A138AC975E2059FE4F211902A882A57957CF45F4702A1B12C6D0D4D0
6D60DB0F2CD09DBF020D89506CD1270C0B3EA235BDEFE3E245D2018377117E71
2D0EAE7E591BD4E62977E175518181D7F09F7E0D39884C8625CB19AC00356E03
0FFD1FEABB6C3C9533448F2FD46C3C3C7017FDEA8AE2DA33E7997697E1AFF4DD
D78DDA83C237AF564E874A8CC6004D041D0DBE89C92FC5064818CF1B965DF52E
DCA3C65FBBA6B0743685F2A7BCFAE2C8BC6D9A960E7416A6BD1DFB29EAE0FDB2
80BE8D374A8D48A10B2713DFD32DEABA293EEEAB6677C42793B52B6C655084B4
41198134DFA827D69B87F97996DB1B6A97E165EADC6CE23BD6CB9700745AF3BE
80767D2D78543AAA9FE0BBE86D9703B7EB6E6CBFFF14C9A7C97A82344F676958
CBE764ECABE84ABED150C3C37A17FF4B7D48BAF74C510DA89C334B801270FD3F
8904248D081F67125D3750E3B00171C322102F98DD2B206A1F0CAE1D738C9D02
AA08ABFA2B99CD1878EA08C7B96A995CE3E6CF103794C29AEFFABC3FDBE2919F
D6DED4ED1F9AA2644EC087D61BD7F509234968915C6A9FAB3D2EE99260D1D60B
17DA2A733EA88A189F82702007937C5FC009DB6C5BF98E83DA93D05D9AF0A0DB
D5145F0FAF6FD4220B9D12A4FB00F763274628831334E1E727FEEE084E8A5EEB
F43CA37A12B2E1CD2F18F2D5563CFAC92827D75A3FF6C97A4C03D57349A144ED
9D6D717DBD75D5EA8D9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A0D99D0B
3FE18721C03286E3A95529C1052361DE380EBAC2FB7C7667A58DE4AB7B8519C0
DF7B5A381FF8E1C162534FEB649018BC811251901E41731659C69FEDB4D61417
5BC5CEA6B3ED3261CF7652215E55CAD75EB726F41C9DBBFDB77D17D0D9A6112B
F0D1484EA741D84587FD63D7F5F607C8D81FAC551B3FCB526BCDB745ABA11C62
B0E140446B78E89DD66F9EEEF258E53D698E3F2B7FA842D20F72273C6F5D2619
D655C3533FF17CC7A87BF1B8EE2D26B30FD5D40EA463CEF58B858756B3CE61FF
A44D537C83ADE1BC40550DBD475801848196FF59D705A0D839E3FDD58F87D514
5728C12387213B2AA0570A583C2F9F4CD3727A88730D6AE8D68D1D5B530C8848
68B7868770EF8C48B005E334974DEDC6612AB66ECAD3AF64ADF609B0AD0AD1BC
E8B254341CBCE4CDE08008E366649A77170A5FBD6E6C845E2379D4B42D8D19FA
6D540368BA9F7C6B58B14C7F4FB795EC4D0857AA5D6620C95021DF41F3DBC707
52E5E4D9771C3B3FC8F2156659677CBF68EEB49E38ADACFBFA00F3A9244BA837
A3603450748CB9D0D020F7FC139EF250FC2A6B8179F719AC6B30787677BDBE7C
FAA915590C8C5A147E34341E158CAA3AB1B6C5736DFB05CD54A65347488BCB94
8F7B43A5193CC00483AD76682D86BB3061C215420F75A9D089C7BCDEC50559B8
2FCD2BFFBBEEA87AB0EB9BB484F8FCAFB65D189D87550A88B80BC1503B7E343A
CD1B94955C5B05BB255409FBC6F9A0BA4543C27621FDBA8095A57A0ED59D1FD8
F749B95B6BA4FBE9DD385505F1A589CDC08A63016F79C7D0E3BF68EC81FDB4F9
D9095FE29374D1DF472DA46570BECC7D59713C9BA8A1038D30AA55C471E7EA37
AB0F48DCD05CE74FA259850D101D84F4CAD106141137C1FD5C1FEE5A97F64831
A6B4924EB4F3D49A5986FAD9F7D46C06C9B4A6260363C23854E958D05EC0626B
D6F367FD211F743A6AE7B82DC191365103F27EC65E777C4FCFE93512721F0712
ADC997ECD15A231C3B5F5A000F610FDFEBB570FBB71D421D3C8CF5D76D071D37
48C32BF1C779E91313E2F9551EBBE8B2E16CCC5EFD174057C781DFD270EE430D
137E0A8EEB2A4D518DF5FE373DA1264FA065C0B2C805B2C2557C27033737A162
B1C30CBBB59EE0981B0F6D25CE1125C2B0BA6F1413D796C008A2ECD55E062CDF
DFDFFEA220503E9EDC623DD02C323D7064944D89EB2E6D53B35C299A658F47D0
487584B1F9E7DEF39AADDD2123AC48BF0E3FA1B3BBBA9B8CA038F113C57B5B2D
FA65B985A691E71F4B71945D3F0043F27F1E73B67016A5054D9FE666589C6425
9AB1F7B4D89A563B3E7BBEB30BBE1608BF58542C45F05748B1A1A133EC7DFFCC
255E05EB66D490521DC79059F70027162B35F7B2C660A6C778D18E1B5567997D
FA2EEA9B7EE86F7FF6398C06F8F578B49EA6BAEB6B09E9A78487CBC560408D86
3B9D17F62B1EE5EBABF70F32F4D03BE9CDFA1C1AFD08F28E4F0FDB78E5D3C0F6
769F21B3552E00BF22AE6D0C759D6FE457350DD0E9F7637C9BA48F730C2A8CA5
441A4B7ED06EBFC5FCAD0305A9F537DA7E77180E3F45775EDB72638D3F81F113
AF59E3E886BC531628CD9FDA87188135B3D6CE0F2A69E88F601F6F8A63D0FCF3
135BE7E4461907C8EF7DCA53FF6BBCBCAB0832EF073E3505C3EBA20AC324DEB5
64972CAA66E94AAFAEEEC73F2A5106CFD4EDE8ABC0A239D6355AF506D88E3237
9E2C8F02E1379F36DB5250CBB733930F2CFAE1111C8E0CE9342B06AA7C8A2659
1C2580F9C2C457B2B4B6AD53D22C67800381C5E71D4CA126DB05329F302BDBA5
7DA671A26A6A2ABE9D3BB94C8169537CAC9F0286C64F328339EED21D83604BCB
1609A792621C246F25BAC550C282E77B265156DF6B789ECECE1886F8E04FA0D4
8C8A3F63ED30CCE41E5BB788B2873C2585953F735838A7FE08025B5CA3639451
BFACB4AC69B3DCF98B72B933865552B6B9F998FF85298CBBAC78BBA0A48C2CB4
374636F2E5DB8CF80B65E415BDD44B433185E343AF79BAE54B4E5F84D1814759
0E054B70E3F30CBA51E209F66A73B1D3587E029313665143C842566C031A2A8D
E0C21022F91926361763B86FA081E98DFE93C6030A91B3C7D348B097477DF8C6
C324CCCF965C397AF1B7F54D0A9520A0FB7EA04CC88522F0FFAFB42ABF6E443C
C6B499703F542EEF57BB334A8B9A1D5BB894A0F043F08A8E51FBAD53C403EC4B
CD0B75DF8008633BCACB1FF8C6224B6A9D33DFDC62868861B6EA02DA05D22370
0B79E803D9CC07D307DDBF52E27B75787AE81EA98B34D8DAE918FA95ACACE17B
B106CFB76288C36EE1DD997DB4E2B3DA36FD99AE1170DBDA9AC3B3B72801E011
B0E9D84CD77202E6276B0604E67DD53571A541FDEF7988A9990DC82E2993E865
0097C6F2596885420B2B38DCACB524BE89B9FE313EA573A67B21D64A361CDC50
F0E3789B23C32F233E16715507FAC1A256207D14A1E013338CA388A3A4816379
1C7EBF6F454E4AE91268CEEF58C3CD492EE4D977CBFBFDE052E2961195F6E68F
0D83A62A5197EB748E7F5C82DEDAC7AF97962EBECEDD21DEF42A0ACB73580804
7699EB8C40288B69A9E79012C9C5064D6804B4B23CBBA875ED2CC22B05B89ABA
446304EEAAC280A94CF9CAE130B2F157E170E61E6B7F4B710CF03E37DD2CF0B5
0A164FEF89252E9B298E4FFB6582891F0804758861A204290EC1EFE7E4D8CE5C
9D7EF37032F56994BCD74EBFFA363C7871FC1E8DA934451F045700730153B106
4BCE1E4E1EB9009DC1FB985090CA164DF0AAE5DF997D626929CFE9373D5F1AD8
4FC79DE23E2BA52D8EE1B1D3F8031EBF80FA7194FBBF91FEE78CE10B1283A38A
53495FE8A297681BB032EF0F402ED81971E9FC729AFC1E778A3C0070B6126AE6
231E3C48243AA2E95DF0659993DF1C0DE73B6AC57B2F0CBD35C95A1C147437C1
AE23EB9CBE99311212F2AE5C7A008D5D6D8FB2DDDE41498CC6B6D44366F2C472
C2F70F13DDA614AC122D353AB33D8949B97B1D1396A34B24F711FF571E75403D
111C5EFE83AB5351D0D1367D2A9ABBA798E5F77B8BABBD1B13CFF6A9570EE78D
B3D564334AF337B596E4F1204D41B660B370DFB938BBC13A87C3DE5937D45459
3751EDD711F21B6DCFE6A025E017AB457A7E88D94943A49C2FFA892D362C124A
77F8BC675793174FDD8FDE863B80121B24EA380C737C36E1DF993BAC7CE1DA3C
50B340864B2AE897B4599F155B8D280995C6807B6805524A6D24289FF6CE2EB5
0AF4A1DA23372CF172D46B6B94412E7CF8B2C54489E6D6A8959D35D46E2F5AA2
BC7C534357A65C25929B54898BA9B645A78A4127CA7332E5039A2A7E32F23892
55B0491050D422566B91425A2A65C07D4FBCBB8FB94BE05DFF2B3ABC6B2DB496
C9CCDDD789D38C643B17E3100DD9DE9BB21B0FFD3C1E5807203C5389F960C226
2A263D11F3C1C19DFBC6D349AC9E5CF2A8148DDD9C526736B990180F6EB9031C
A3CBAF94EE7552736029B38142005DCFDC0DB997FDFDBBEF4498694C0884FBE6
911B1ED7148B9DBEABB4E1273F7A28A16A343214089692C8B5C2BD542B3D46C1
93513E88E545EAABCCED3515E2A2CC45D37C587DE7499FFE95EDB9C23A24EF78
D329E59D6881F3F7FFEB6C17888D4C46C3BB844048F77805546EB5A300E041D4
45E8896D21C498D274ADC1D97A103530EFB969DD8211518BB3D1A0ED127FEDDC
4387DDB2E10EF3FA3985EDC86D9E9119F69E6331D554E6829242F1E05AA1A3BA
678F455E75A6C8F9C33E90BD705474E6FDFA990C996F1A54AA9060EBAF6E9A2C
69F153AE233488B2D41B812A11DD562947DBD11C722468DBB472370CF01EBE44
062A4CDE2D7BADE132AEE5BDF71E90DA34D547ACCA61BE6D41EC31D89A9A5998
9A73512C3580CCAD46643456AA605311406A9C29B85979E878C00247A227893C
488185343BDFA553A7827F8912C3DB8063860692D8A40F41E91238E4D606A760
57255A7DF6BD8BA147130E2A1A77170EE1A71B40EEE8E4AF40F73F7C7BAED2D2
F3FFA02D3F4C69964B22F51C5F5FE5DA048E15F885C0A3B24E090B54A955B236
8A0E36344E84B603738B2776D1C11C1CA08BC250CBB9F41AA784D08CFFD37CA7
DC832D75FDFAD81AA210A64756EABDD6EA2816A459C8B82D140344608E6AA957
8B27E2772F6385CC9AA8C7C3F9F0BEEA3D102B9C65136562AD50C6B4CC37DEC8
CD522A9409598A6E3D04FE29E2FB41031587F481A0F146C6ED6F3F2957FA1947
7F075B8F67D4102FA9828E503D2F5760E144A976F44BAB926140B937BA7966B1
A383BCC2FD3CF4B5E526713FFAC8CA4D51A36AAD43975ABFF9D5FE2BD1B4CF41
9D4E5E8D77EF28D6A95599770732EBB5A44792004E125FEE4463A4AAD95A836E
D366963BD57A5FDDECE89ACF7D2EAABC3BB4BD85740A4DA7E6EA76D91FC2C5D9
AFF98DFC652FAAB2C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE03AC453
3C0356C7D6AB6BE4CCF1C2A978C9A8DAA2BC5573C35CDE681DBB192993B55304
8C58C55F0E420DCEA02895D3FA34087DBD5DC869DA7E06851A91F7E0336CFB8E
9A518FF0C15C4187B5842159C81908B75A212B0C9E220833F5289EFF0E144901
9182C7C6A1D52CFA76989C6D6B7B6EC1C3314567C88BE2A4333B1E9964BDA8C4
6FDB76C41E3A930F7D96A3F7CBBAAD1697059C16BEC4983BF3AF52C20A9A19C1
6BD126202B3AD48021700C552027C39AB4D09B1B62C862AC020C1231C3E51CBA
201E13D33ED2E252BAE9299E709FD22DA1E8E2CD3FBD3C82D6B76982B87A03BF
1C3904DF76D09C575A27CD28508B57E05D8CA090E60C409D96FCFA4637EE0055
EB8288CCBD98C953824C6C5452E34A39E05BFA77CFB2AAFD32A72D2A30B523A2
7F53933C6B62D8AA75F2D6D1DAEE7C76886DAE246BC8CC7D99C4240559D1D2C2
B57D699E5EB82D1FCDBF53511D26FE98C66E17C49C6AC5B8EBC8C27116895309
5C9B38704024072C5FE89BE9DCCE26E345425E85F7A3B18DEB2BA9A1B4B8D8ED
F6B4C901B8CCF101CDC7D18B94AA8EF1F5AB6E3DE702D15E3CC75C455193EC9B
5B2BCF4D973B036EA5FF44FC25DBE8A7DBD18A8B9AB475E65CB9A2FFB4CF40BA
BF9AFBA92A0C51AE000C80F8E4E1F32E3F90B51313D7430BE1825C90D88DF40E
71F25686927A0A136D522889627824ED0DA1BFEA292DB087829D8E9487FFFB4C
55FDEE648948F92CBC5FA902E36720327559465FFB90BB57BADF1019900BD7DF
733F0126D1657B5FE28D7B390007124F787E4BCA6DC9DCFE947958984FEAB4F5
19600668E48BE0C7A590D6C817424EE7495C5A20DF7A300E7DBA6370B48142B7
47B4373D2FB32CEEB6134FD6F15A5A9ACD38589F75C1C940C0650A9384152737
34AF782E067931074A6DCFA5D0AC6373FED9E7E9DA87C76277F092BFA21E98BC
014B32DCA80DDB7F17E6504A1371463674793EB4F5D24B8734863351AE6C56F9
5714D15C261A3AEB187BA1DC2BA013A2DD21516A9176D8D365CDD8FF305059C2
E913B7978671AC30C918B5CE70F9F9E81159520DC45679D35E06C8A1C712F6F5
12A2B290053C9BD61070EC189794018F1B9C56504CC18D769D9E25F7D20104D4
A69C2E05352428D4C5BDF1E3A4454935E38C1FAA3A2254B70BAA79EA27CDA4EE
23767DEEA1B900DCA5B54A71495EBECDFD0353655C34F8701A6CFFE2D1DE3A9C
4D5F986B5B114CE454186605D05B599A7BDA3BFB7599B02E5A127089473EF2D6
2241601E7A561500E9ADB8BE5D338698293881FF237E9135E51F9AD3FAE75852
C3BC7CBDBB5EF23FC98FFDBECC7BF9D6789E307933FDFB4E9E1B6DEFF59372DC
C9947F32A40D6EFEEF366F2F37CBA48E2A26DC6CE7C3F1CC174435E6D972C838
7BC8E9C7F62398D9888FC47F9FA03C6C4E4D8956AE775F614724D9CC2C2BC269
30FA961EE73F53AFA2D4EB49510DB2CE5AEC31C91E211F0A7E41C25DACFA80B0
1387078AB900626C7488A61231C7BE4C83A074F3390D6677A1F2676225A2299B
C2E64FAD2F51D2218D233682F2F6B0E45E4BE3E27CECE324917C5A99F4A32057
F5DC528F6A3183BF1695FFCA78165621EC8AB154572C28145C3A7D01579D8C6A
3376B918772D7F77F992B88D5901DA3DF606E424677807FED414609685E97567
0E64818C9B2131051DBED189118B9279A11243BF0460999720F1173793087399
AE2CD42EA3950E8C685E163317BB78A1E5D5E4B896D55B67837FE1B0D9EDEC97
11F4EF52D57B04264069FCE544AAD5E290723AA35FBB650B13EC91A5CA7EDBB0
0B60E26CAD17086C48CEA3FF695D5E8F038E3FB836825ED1A3B5B8A045F07CC4
CA3AF0C95B76172FCC451CDF5508519B9B58B5BACA7207A8E469C14DFC823D23
5D1907954B8F5A30F6AC497821DA8DD734F6054C50D65665E065DADBF514DA09
934CD93AFE8107E31C8093FF5CC9FE8D9AD16D04DE108727FD7C001FC2F5B3B8
B90F5CE713C315E6E103561789BED35DEE30BBE6E9F9EEB803F299EC1C19CFD8
31CF7C554C0136175FE9EF00670E67B8FE790851B16E71241433FEA5650A3F36
AF3F50FFF083740C18191F515E47FDD5BAFB1ACF90D6825DCFCA5042672B00A1
79A12515F69D54DF5BF9961800E68A7CCB8E4EDFC64B53FA54CE628FADB2EF29
079B9376AAC80573D47C104E1B561FFF5C981D0DFA681AABE3DAB55797E0C22F
0D1816C6A53D597B8FDBCFEC3F68759B5E7AA31488F26A55FCEAC0A002FD0466
5BF72B84C45F40AA8A97C2AC3C9835C5AABC89CF69A28E696DB61B3D29ED21DC
DFACF95BD061D4DF95E7BC56D1A9A38CF97DD87439E7874B1A3E92E6E5BF2EC9
0FDE715D61801FE189AB7A7530A0C7C921F7D56038DBD1E11BCB2E5323B4D8E0
8C2E56EC2B520F09FEF8AF573A9C560C53F4EC10F01B24BD3061707FE66AF38F
B706DAE2E1F2AF632754B587F41F1228E2108032932E85412A6B40EF8129335C
9340BA899EBE5BA3C094A89B2E862434D6CB5D80F69E0010B97E1A371ECA95C7
D471108A5969895654C00A5F30A5F801DB459733371C704018A015FC84E923D3
72C66C011F8185503029B9A3F31A0B04884EB55F2EA19B8C272B6A0DD805B933
2C69A32C5C78A6FA89D6C59AAEB45CBFEE7495F8C6A43E30F8552B9FFDD54BDD
8C7F84484031FFFC0AE8932A64567C89B3F156C524E15C7E5DD01D84D9C3FDB2
1824068AA901ACA6C99A0C9920CE6B42AAFBC28BF1A25BB7E76BEF46A38E88BD
CB7DE042AA827FE25755A8086702519B9B49460A89B31933D20964588C89EC9E
89534F6EAD9308270D9BFAB685D3C7146235E1F75D2D02D9941A488C89411344
E414D0D88A66D6B4F56BEB9360478E29A025EE1F495E7F26989BF6328610AED7
8D0AC8A6526EA147776558654C72FBCE10721C2B313BF29892309217E4AC0750
488A18E338578927CBC76F06699BB084F049E328DC899C7954B512463A86B162
3BD5433F6551DE2AA71780DF5111992E516453EC5F7B220A0338C7ECAE46C729
42FB9EE90459E00A2F7DBF72B2191F8A281E6314A3698CEF408AAAB31DEC78FD
B04D36F53B8FA747C6D9FF8848E231826A96B840649848D40574931AA278F716
A9358B4B57ACF1AB49D651BA461A600C56EAB620D9380D5B2DB89069CB12B66F
4979A1C73E9CE4E8B2ED99EB20D84F8629DD36C8D4557D1CC21A3B4BCCD2A598
4EAF9D2D208800A905E88E03863FA67D3BD8E03F418C44A895C03DD46ED52734
D447A5DF73FC46E9A9704144D16D600380A00AD3F431A4B0997305F7C70A208B
FC470AB52A36187979FEBEBB6D10180E9B5F6CB91C8ED4E24B5E8CEF8AACCF82
B5AF1E8018900D500C4CE3599A4B18676163EC92388711AA514EF8111BD249F1
4C41BBB36ABC629313D4E1161B20F3AB5E3A7507F25CBDE0504C023A845E0734
05EC5910846946C8345AC821A323AC91474BA2A55D104E744ADF4A633D9A2577
53C55B22E5A7D1DABF799753D0F58074C2F7CFD6306262CE03FB181CF1ED3A08
6EEC4F7113FD6D52BEC23C21EC0C0FDE2375719E962D5181AAB0FA6181716DAE
F1BF8B103EF2EC117B7B970B63FBBA1A6971678EA3492A1641851FF8280D2C1B
DD3992EE514E0ECADFAEF80EC2B6173E40E41727528710CE5EA08AF74F6FA4FD
574F36AA2E64C6E1AD1A4021E7D52ECC3034F758606E5E751C2EE2B67447BBE1
7AE78CC149A32A948E88B3B323E0DD7E5B229A8753CEACC461027E39508B398A
3F149B2EBDCB7F957E10B5E4720060CAF408E5C3F58B3EEAF656E361942F5BD8
DFF8B5821ACEFD2A2103B3BC5F55E235A90201A826568CF2C21EE1C05918C332
D6C13A8A7B92514B6CD803081AD247BD97F85BCB75CCEE298E96A59755370E74
6320CAAA9DCD5DCE015301772C32C2B6183CA0BB5DEE4B7C3C8F0D77EBB0A609
3FC132DB99C17A6E747D024BC3297C403B5E2706714D446C77F005D897D94425
1600E7A6B304DD76E08A4D766E30AEEAD8CC05C552782512386457BC43BBC3A2
F5D6738EB7D296FDFB736747800773AF74ED5B7B4E0D75EBB9592241DD136479
A65905FD0062C91DFF734980E30E3044307C394E1625F7E68E8C0F370D9352AF
45715ACB7043095C0B6CB35488BBB26C9E45BA433E59C6AE7B1A8311D3B66EA5
B930BEA6889EC822D3DE1DEEF5C811262A15DEF29A1960782B1A84FAC042C7D1
EDC507DAF39CB0AC59903ECB6627973FB3D19AC0B4F8781E3DFCDBD228938986
8FBB2765D46E6C083F24CFE6F8EA741C93C304ADACCABE3D5AC2F814D8413A9C
3C1072C81D7FD0CACC91A2805DE4D0637913EE6EF6D06F8E219B54F56111E140
15A5F973442115233BC3C35CDD9C1203890CCB9F0D971C0989EC7890CADAB6C5
D8310B1F73333E3A3FEED012CBA4321FF4BEE1F85ECDE5A52A19CC220DC4484E
EAA2F357FBF8A5BD6DA67637FABD1965E181453C57722A7FAC52BA1B67DA2B71
14DC06904F06877612568E6CABC01F5F358F2B05CDEF065A425583E663824864
F00DC7B8213D06DF77BCFC05045C8410F9F4C649F7C0C4FB4F8BD6C351707A52
4187ED4C6A8323B0659F932E80E84D859005B46DE826491E802DC10AEC6FD4E4
01E718056EEF9D1D01CE2755C4B74383FD094BBB23D3D05D9E066031D4383B22
02DB203886107AF158F4F811F7EDABB511D068C9183BC01DDFF1781BA4CD3A2F
985D9E478ED0DAFAD0958C9C7A80E665F2C00F6E192B9FA7BC4BF0CF3D03C968
3B22C4836A06ECAE805C291C43E857E8029150725BE7AE9D0A22F28ED05BDCCD
6EC4A589660AF86741D4436FDD2D9755461BD360D2D3A2CF40D870ABE7F97CF8
D7F3E36B58DD3E802C89472529D7F42D434F41DCF28BEDEDA81A4DF29ED7C8C7
FD903BACABA7EA0DAB99A669F70EBC4901DF9C5469C868EFD49271B1B3920A54
6C3577E87ADE936A6A10BF199A9527D50927E591026982512AD84206EC1ED85D
D0A6F34D79C334FCE4343F980BA1679515F00D8A162CFD5E33681FDC92A49749
71173E8A833359F48570AFB66310F41FD958234521D5175E66EC9D1E98995562
DACE57A09F962CEA19B46B72F915E90592641FE99B4D86F2CAB2B61F652CC95D
903C451C05BAEBC80F28B6AA7ADD62D4FD87AD3E85A836C81E373C26C2B8B8A2
A90B6D6C9B00B56052E8DAF838EFC594B1438B4AEB72DD3680CDFCE4008A7DC0
690988AEA803647789279AF0D74E1F11FC8D595F893768EDBC7219595A46DA8F
DDB20819F2337432A326ECCE7A6B2FE4E636DDD749286B80A5C22474B49FC5C0
93A8264DB6D40010E62BF91E5F195DC0623C166172A1F73B79F4F8887EF65595
B67ECBA01F813A9678108178F33EC4AF4D6753DCA4A6667BB22C841A91A8AC11
8812C9BB0B6905D81C1B72EAC3CC98A973EAB1FB9DCB3F6FFF8EB6ACC8C849CC
0D1B54E47D44B807D264B8FFF9E4D785C08A0165239ADB5D3E324BD820BC6449
A228E70E9C8B64AD5CF68B18E01A3D60BFF389BE97B750CD4017C15431904DF1
7763694941FB4E2282F97FEA50082B956F14500EE7C79DD1C5CD4860749F8219
8FFFDAE1393586EFD1293A68909178D9A544430CFF9BCFB9246472A47BDB5023
0A341F8D147A88D61C5990E609001B853B273DB144E075AFBB26D61E5570EA40
4F52028ACE28D99D12CC60A63D2FC54ED39CEF3F9292DD0BCCC266E6895648A6
6782DB956486C96942AD652B9188F2FFA1495493978227CCAD552FDB91D5D4F1
987678DA410C2E3C014372A8228CEF42C213CB237B187A7B54F41B54433526B5
BCF13F82B74152A2A6292F0590D6F87622356938E8367A8AD9E57201091DE33D
6A472DCD3084B026E49BB0BC85A605B30D0E1AE9E09BE98DA43549127E31A4D9
C996E3FC2332BC20A28D40FCD6D9B321855BDA608E23BD365208D48DA846A067
EF4F5587DDE44F3238540F57899B311D56DD3C3D69983F4BD65023FF7C9FA782
1E5C552F14CEBA3F80B2C998AF85DB5EBCE675FD54311CB1468157175135623F
7FF162F64ED65962C52C7A22BF7AF3BC490D267F9E59051FD85BBC6789FC44AA
FA6D3AE571FB0750B954D0F82AC3089F2C51AFB51ABAE624EF50E7F23B3A40DD
21D6DB1C2D4250D3FA4115EA205406C0316645AA6C928878E8A4F454633B52B4
45FEA99105FB0699485950DF796B869F6C929ADFFC2F1C50DEA895512A4C1F23
D7BC381A6621A2C89D464D9F271C2AF9133ECE53E795BDB49E9A5E06940230DC
D7ED970C8D7911DC00DC459B6C86591A47585A4736B1045640800B0984898282
CB81A517A087161444B807727C458C2826A13D38F8908CBB90233E0054B7EC46
C10CC7F79152DED9570B7F3A70798581BD1B76FFBE7180B2E3DFE45A76D10B7C
0888F4FED850AD68BCBE2C4F28F49F023763109ABA63C19FE12602155D05993A
42547F2E2696386D6580B3D7E8B1A8A11F05248D9544FA728F9EBE1D5F1E41AF
87010B700EE352DDD8F6C69AD7377E3BC6FB5F7C733B68DF793BC4661791DF29
193741C118276896BE81D3A30F918C9EFF269C4EECE035BB6FFA557B516510F6
07A4139FF20EAA6FAD50724816D76FE68074DE4EB630D529610944338E20680D
C1F1C80CBB6EEE4A1BB3767417A353BC475B59116D38BDEF3AD8BEDDD5E85DAF
C4E6F63A24B5A2CDB4EF4032DCA5CC6D1E11B9CA91156CD7903C1C42E115E9C5
203037C808BD29519300B4EF59E37C2175060C6357A22ED1A48386D9A9DA0CC6
58D418A6A0E8B94AF8DA3D8B79614E1E029C1B5EADDB9A2846C6EDA2A2DED66B
F5952BE904C3104E28F1BA3ABA3613EA73BA2AAE3FCA5D2E78ABF50BCFF51317
15A9047F579C8A4DD8D901A5B598D721639E2A82FC866FA03DF811A9B7270AC4
A6F7CD311C5443FB20CF288B167E85AC8C3EAD6F518231408EAEF5070BB95F0E
F5022696A226019EAF34A2B13634F55E964F8B7C21D9373103328C38894C6934
1DD02AA491637E24F116AA297732D450E52D984CC099AE441600E6BF37693F7C
1360DD9CD89901B6BA139A251BCF348F2A19EDEBB709068CE06693E59F3F8A3E
FCF2FE109A30D87414ABA2676B03B3060C3EAD9A24158569F13BCFEFBC700CF3
DCC7585F894579AD0B72273C6F5D2619D655C3533FF17CC7A87BF1B8EAEE7095
4145975B2DD760BC202A2300B50392C923A50BCDAD8808B0AE054CD40FF05C07
7FBDA7E41941A3FCB6C0825433D845EC970C7711DDE28B2A220EEEA74FEDFE4A
DA2CDCB2E8D3E620718FB4505370A82855EC7332D29A0DC0880C2DEF08A6B185
F274EEB557DF134CA24FD21459CF90CF47F56C5D0F76AD6FACFB4EE3207884A8
5C4CCF1A902897E97404C39FAC60887421339F6D451A540CEBF3AC649FD0A0C0
9F19E9C0302071E598DDE8D624BE224DF89B6FB3948163350E034A3CFA568DD2
6363EBA271111F936A36E33A15AAAE3D4A2A56DCC2A73404EBD4847725B4F629
671C96961BEA8F3C44C56A09C74FE8407E655A60AE68490AC4A06DCDB3A1F323
7F7522F406F8A9FCF66BD9DCB19A5853273485E72F65B9817B90D673AB602213
910769678FC5D9298ABC4CFF152CF16199B3F2923B4AD5A565A0CE2A54C2C36E
0E4C244F5009C4F8EA0E7C610D9A89B7ADF6155C16A31569DDF8C689DA7A3EC6
DA1F5C2457646B89FACAA3DAC323CBE5BD11988EFB6D1471BD987CF42E70D2E0
530BAF08F6D77F6FF76ED3644FD3D2BB9CA886B8F26199B5ABBEA21243084ECD
3A040912AC4899921DCF8300B818383FE550B3DF19AD8A354FC2844B75D06288
0309987DFE73C7357DF3C02C1B9BB873C101262A711742C32F3F5A1C25F7D6A8
D961E296D887A09306545DAE42BAA134F0D1D50D98C4B17E2B642AA817DE4314
6AE4E04FA79AA91C814B18ABD2C55F14A9715ABFC0A841256CB0CF6C3BB7835B
7879610B1EAC93DB7C4531253BFAD3180DBDF8DEA31BD5BB3282B33693EDDFB0
64BB5E6F16A2C5B87A779636760C9A55D6BFAF3917128DE2205D27D2ED7271F1
6CE4826618615E57FD93F08C5B690EDF00F3FE36C9CAA4C56E41279AC23A197D
B45EF620469675DDAD8976DE4CF47B93FC6CD05D5E7E6DFC059ED1B7F70513D9
3F7759CDB6B3F043A91DD51B30140CE83AF772E98E8CB3158C0C324C6C762F6B
91F887570B3DA85186B878777DED4FFDCC47019E5CB0856CCD747FF301150AC5
0DCCA3B1678E3821635D8B1E222279FD4712E7CFB1554FB459F06712270221C5
96DDF36041CB1AF30804A3CC34C06C6FBA8AED58221574ACC2E14B9F6330FAC9
972903C2C35C5D1483348AAAA9B668EC81FDB4F9D9095FE29374D1DF472DA465
70BECF8F8EBF9DF7C77342796363A7B6B294CE26DBB9179DC77CDE1B8637A7FE
55DF98DCBE9015D4A4D35B006CE68E410756507544F5B8FEEF1DC4FE433D4881
F0977C9EAF32254647AC1D5FB8AEBC6481A94C6ED5EAD2550500055D83893A90
8DC4D0DAC6FA6AAB73CB8F02BA4A00DF74BD023D88BBBFA3DD28BAFAEF400F21
A35667DC620502E6F46B020BDCC75B131B92A963902D10C5468AD2BBD18DA2E6
062C563D31E7FD87B97C86E430CDF1CF6FEF7D26454E6C96B9741D43C6631805
B7A26AC1D3470F5619FE35888C05218DCD8124F8E93E24F05AB2FA84A4AC476F
0B453CE6FF552D7BF0BBBB51D104136DF446974C67922C964AB2BE5A83FBE336
D8C2D1325E033E6CA7B01D0046D8AD0BAFCF511263B3A79824A37390769F2EDD
53713F596193BA5C06EFAEA6313E62E70EC9BEF8C4560BA7ECAC2B6D64A6930E
F0F1FA9BD328DA2BE70941CC71CF63C2CF29F74199D60E0EDEC2BF9E3D71D369
639D1C21C7F976502D50077BE9AA1668BE627189993779AFE9E9780984A69B07
B477D8BAEFB53D58434B838046CE426B4B3E70CB6437C18A6FE63341D099B301
91D50286696360B8FE78D5C3354C17511541D364CA8C1F2723231F5BBB17BDE5
39B8BF0673882164FF2F57FE5DDAEF20A6AE96EA790F7ADCD10E8F00818E3820
684C365F7C1F778F97E2B976475EC21BDD45AB06C9F56B7FCF3F808395CBF95D
3D653D3002D39B43809B5B84D1712BA7193FB92D21BB87ED788C589CB8815BBA
9798B96FF071BC1C3B8023F9F47A64E9F02623E0997207041A84C068C7968AD1
6ECC7765C4FD0F70BEE9E7C5EAFE8707A9105F1B664619F2F0828BB054916D49
D69BD1D90675F1D60FCFB1B6D26AA24377760FEA6FEE94F7DEA0DEEBE8D06A55
5B642D686CB0F0DD3CA419BC2D39D3DF4AF2E9B350DB04B85024823654FD33D3
C4D429D9140E62164110F3599D8E6CB9E93D141668D361EB44368ECE9BA997EC
FC11B62612EEEA9E08BB45A93A475EB42E668D9C930DAAF6848E3A72DFD018BA
844429BD3B52AD1FA128C91C36EEE43CB41592BD13837B9EC973599D0FB2323E
A586CA1B50B9C689AC813A3838FBF0BD10AE2E86E4874C1052D0EBF84B62EA1A
E3A900879B375DF342C8DA719845AA9C4BA8AC40C1E24DD4CABD064949FCC2EB
C46B11617838874E7F840DAB45050FC413A5037A44DFCA63954C0858B48FAAC4
2A030D7CAEEB66D566C4D79CD4AF92BA5D627FA697E110BC240CD8069D8039D0
C74763C89CE51D484F7E49765600A125D6DD423540B6DE0F240F532087DBEF11
B1FDB1281D976A2120A6C463E4A5B9614ACB308AAEE242535AAB0A8E3EEE44C3
C85AC96CA71466748187222315252264773FDAD954D114059B51EE7C24B660C8
3D41E7A8B82EAB6FFE9C2919E4A0DF331B8EAEBE2A5C045F15019BCB7289A516
05671FBAD818268DEAF39F0654D590E6E8AC9068E04A0D0262093465556B9279
FC9194E2846675A21436F96354CB974D6D7F2E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01A0965A0561E63D83817806E2DF65E941631878B1817EAB3A23D06
F0EC8452CE90E89C362E554C8E32615CE5C062473B7609E685C1A00D822718BB
EF12CBB30F4304F7895FD4496A5AE7A4F756E3B44D61CF6D96EF68407F3B1F0F
F7FC61D97D8DB121DF70CF32BB8E6121744435AF0012EC929FC657A99A86DEDC
1737FCDAE025AA14564DC1D9CF1BAFD7B886C67989542394C22735D4B0620C7B
BF790A2A8A15EC363DAEC92DC7E8BCFC67C2C33B0C688CF5E8401D3D7510A603
C11F10C71B0B547B7C363BDCE6B00581802EFB8FBD6FD2D909977882A9A1E80E
FBD64E8A307367F5F9AC09ACDBCF4AACF533C80A39605C9AA8D3A136ACD1C978
0AA0F25FA907699A94684125A38EEEA4C4DBC2B2F72F6D19FA0C4EFE4E73FE96
69F35AA238FBCB8EE7E0A553ED1C167611B98529389D46C775E47869EA1A7A7F
F7F93ABD957389284A9FCB3E8B92F3AFF3CF48DB26F515B6576AE85A29BA6511
2121E1DEDF883B4D836A645D52C01CE8C7FF03578C4859B55B0365BCE5CCFACA
0305B27303AB8B016B22376C8C335B8BBA07CB2B623B7F1CA8D7E45983976ADB
A0F5A42385E23E75C21848346D2C00518ABADDEA6ECD7A1713DE7AD5B634ADB5
D1D1B0D502750247BB25006F466250647F37A3611AEF33AE15F8406C71B24055
22123900F1EACF0056EA0F51A0F5F54B21DD7097DCBDB747D975077B37CF09E6
16C0D437A962DCF0CEEC7F65AB8458CB439BC970F97A695E21CC9BCDB0162BDA
EE9C327134B56197C411E3E84AACEC144232B97C44F4B4D626E605AC83EB2C6D
080C67B0951A7063B1F2970CFEE5429A5B40AB52A3B20DAFBC8B1580A4431461
06BA16C420BC0AAE23CA0847D6AB8DDE33777FC48934BA12F878819E054808AC
1511AF7F9B823AE436DC4ACE2F11537D139DF94E70FF842306ACCFC55FE279D4
08520465B4993237EAF347E7EF9662AACB1C7BF64F8FEEA84FD21F52C554C527
C81CCB2ED43F20FA780B0461D49B390C40870DACD93AFDC551ACE51972896F01
D56AABE556AD9632D8D8DC72B74618CE98CDBA228E05E76E5B069AC135092A45
094617BB0EF9807472AFAB2B1E7687C85A657218BC16C09A9B6BF12CCCB80759
78AD7836CF7E71139AA6EC3C57B515D16F841113DBC130ABA38D6C47D7B92E26
BA98E38E65FD0B5C4FED24EDD169B5315A77431AF0DCA07F26E54086D839B056
3FFE89E6DEA8FB29AB75CEE9A4A0D575CCAD5FA2CD9E35986F1F45C89BBD20A8
8CB9569370DDD377E3D7CBFEB564966E7A753588E4F29BE207F55AF77D9E39D8
21DC524BD9B0DD6DCAED7A7571FA46D67FDC89524F0A3B0253BB636B8559FE3F
3CCEF8B46FA9C6CD3C736889A058EC0F8CCFB7E0604004868099FB008FCAE7F4
9006DF7AF259879A5637D442898EB21B002D3BDF73038309E5D288CCC2E46FFC
5BB413AF6D9CD3B471D86882C2E9EEF701CB61929087C01AEC819C68AD8B95BC
A71348491738BF4E8590333FC1C9D0114C8B4987519683432C7AEF8073116FD2
ED7341A09F81B789B45E90B1DC02692E6A6C24C15955526E4056E5203274DB31
F8053E26C85E2561443D9267F9CD881138BBC05BACC4D4821082E64D31D2F013
F96C324FF29557C983A8735C681B6ED08C17C2275585E7508B2F34EE81DFBCD1
A8C97D63F6045ABA78ACB67B0BBF26746D6159DFED27DE71F3B25113663B90C6
1DE1335B603E74896EB26F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C38B48C2012E0EA
444924FBC760A5E32C9378F20C4F652DF6A4537FC25299BE55008332B6ABA853
046FF3647FED0AFF1F33FB13863341D127CEA81A0F8D82CA44B3B19D36FF290B
4BD1B807749BBF6077B8F99CCE03F54E22E2B141D5417FC4E56B370A532044B4
4E8770C72E6CDA1458BC8D2C258ABBDAB9638306F1E4C6D8B2386E52CCE80CD2
A5F47EAB3653BB035A95679F52ADC07C1FCD50B0605AB38637ED07E3102DEE7F
67FCEDC487CC1BA684FAD744DFE06470630DD70BA62817A18843C3821806D490
FAEA107416545AC5106B50E0674260A62A03E86241BE8CC3D19649FFDA86260C
21FD2108D74DCA68507FD0943782A49FFA176231A70209782C28C2FABE2E9DC3
B5FF5FBCD73D4CDC35C51C1A6BF36DB06935B7069D631047678177A624F39326
6C1FD8A746248968D67684AA008E584D6F6EFAD0CE1229FA6EACC8F803B1BAE5
50E3DEB059711ACA4063BCC8EE90ACFDE2BEEBBD6699604F3C012B354AE87819
BF154809BBC3CE6504AD10F5B9C5BD3403303EF07D80812772BDE4C1AFB1D023
950AF134BAE3E3C4B11007ABC10394B4FA2872BBBE48D39FBBBCA36A4D7C11D8
068C99EE9726665E86F2EE6166E06C03941A02188398A05286EC92783222E0FD
1ED8BAD63471EBF573968971ECDF016A68818986CDA033D76A713EA21DF144F5
84D4AB7037BFB8996FB36BA4C6F6D139412F5951647E40D949C8DB8A841503ED
4A0474CBF4267E477D5C17989E85EC83396E071743DBF1D248447D5C9DAF71D1
ABF2DBFED07EC6926F4D2B1A078D8EF1B99A8064B39F1F1F0A9470946EDBE4B7
2CF79DBBE947A92F42D9A4270E489846651CA7BE76E5952DFD2734349801F7B5
CEF88D4420322CC102E2645204DC13B7A3461D9310DB7FAB83D8D5B8ABAF9BF3
90568077D6E744788A58AF6A0A2C3A993B23F70434A24943960249A1CDF0347E
443C75AC2AB35979E77BE73F97F1B7E263CE1829E185530C74335DD1EBDB3289
CF0E62B8B7E7EF1FE7A49B9AB57374B0AC2A1A15D18DC07890F415B138D1134A
F7BC1C7C7E9C778C1A81865EE55FAFF62D528A85ED81689F4BB260FB110EE074
7FDFFF3A38DB1EB410B3D9B5017A6A3692DB
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC8B64E3DB194682A30A31E9D23ADA7D5C0259E2410A72
D9504CAEF21597965D669100E95B8C450A3845A54352DFA15984693F8721BE6B
C8436111546A70C5B35A2390E5D3C43E8295CF922FF601D611725D0D5D9EB2DE
CAE11F3A66BA22F94DE028A8861FBCE564DCF89B36A5F1C621F0088A5E41311E
9B82067883EDC8BCDDDFCB6A87C2BCF37B79B1F65339265C3BDC27CD99AC7D74
8CF26DF4B25B62F3A47B378A341378AB1E9AAA88112469298B36645A69B98423
DDA04A18DF5410EEECE859A081B2D1D4CEB9E40FFAC6BD2F8303F58AD7686B3B
2D3EFDA6667CFD49D2238D55D45C48100D47604525BA0852326DE98A17CA12A5
67CE98C02760C521F44824D1B8EA2E10C8D15A57F5E7884B1F63ED9B541446E2
14AE6FDA6F0EB66522C36B257335EE0539B9E15D0BF27D8D2083E799A8BF81B4
D1FC7CBC756CA4ABE99BE732D6518A5254C69BBBB3F049FE4E20CB2F1FAFE9C3
D0241E821EC6D5B52F2CF79902518AFCBC03673814866E05C160FADC9454F3BF
6E3E3E92E174A38E5E90E92BB23F551378BD21CE4AA6E46E93A632174371F4D2
4CA34028E7E245CE29927792706083F71F6522E91D966238950085518AAA0A6C
77F1D73101EFEC62A02173F4B3083061F6C5D173F798C681162376BE1975F52D
FEB87DEA1A015E25A1AA8B7DC360D7C8B052084E38096C14BB4B9154DC2390AE
007997112C2439F802FFBAF49C2B11C7EAB916A06C789EECAABBB47463F68D4B
A2E236E86F7EB82F4E82F509E65DE3CC73F043EB73E6A0511F1E2436CAA714C6
CBCA239D767CF4280546920E71CF4320522C72687C907279229208B530D7F60D
498C32F811D06F23AB577FE17A14ED94D6D04C02C422A2941D74F22C4DA4143A
4E0FBD7809BE359831087184E497DDAA58997067F86182A4AEABE3236E08ECDB
D0BB6149FB37E848D3BEA27A12BA5DFF69A9FE2F85FF5A02C748D74E4DEC42E4
A8714EB6009A9C06DAA1F34B2A25BCA2B4E479414EE4BB3BD2B30B1BC53F1AD5
0A250D5A6AD917CE070C5FED2395FA879EDDE65837A897B86E6A3CEF42ACA389
D22BF8D054831BA1179B2EA3602D005C3205DB72BB08EC68B2FD291F98C0B5DD
F3DD266065FFE66DE483011A4F305AB1796BF596B27229625051CA73EDF7798A
4397FC6B28F7DFB72F5895A6B85C3280E59E14C1F64C508C3C81BC1871607DB0
2675B489C8AE581CE6668FB9ACCDFA2245364CCA1664390D8159F1B621D02C36
E94ED8D424F349EB17075D1D5CEC5F9A08579D27F335986C2C196B9EE8B06C06
152E89B892F71298B6A6D22A71F09C054AD7D836AD02211578672376E2B3FCE6
3EA618888E48B4FC5A91FE145FF8C4CA9DAF7F285A012039391EEC60D8B24E2E
C871793C301E1FDAC3E5BADFAB93339EDF140514463E4AF6F8203B584572BFE5
E7A4B85AE224C2C68C1A85D18199E0C313BF1E3064C18D282D3CDBCF7C83ACD6
2213BF6D8A8C77FE8B20616550290D9D4477F55C9A2AA048D876BB4E42A60B22
936AC9320A668DFC4ABE339D35732FBF0084ADF81DD951C7B0A8F7346F94D014
44C4AEFC4B4B7CFF7906A7E6272AF0D3EF5B3A2E8B01D9E3FBB3060FC8F945C9
3CCDCE0CB5CDFDBC53237E8FF73825CA7CCF57F56D75F752664F2493F2B3D114
06829AA95AED21E001E9AC5C2ED25F6279BD633D7B13ED9CCCD3D15003A3445F
E480626CD2299D753EB3C576D14CBBD7061545739A05509536D9F0F1AD43A57B
960A6634396A29633D98335DCFAE0730C353CD915D5FF137B6603CD06DA0C7B3
C3A6249137E04C2E35299B9F92D8DE3B2247144F40839F55CF00159170FCD754
33075B3A0B3C17EA14485FA723357894FF3B5B9008A94782049ABF2D1817A1EE
1F8EBE85D377ADA981C0DF1520B7A1A1B192D75BAF4EBF36D542813232C3DD57
41DA873B789E6EB1202C474A582966C154B3D51645B7E6CAD9C8CD74601964B1
C3FD71ACDE9ADB38BDDA6CA5AF24A1099C70ED228EC4F756A0974D54C9104252
F1655F217F089100684468D15F55E3340A1D2B48A79A6D3D0CC366AAB3DF4B8F
5810A41A8C97C29950FB7F85C494586224323724CD6FE435A2B184752D1C2706
C535C2E88430AC3514E49797BDC7F0ED539636D9D966079BD7158817AC875C40
8C37D7DE335ED819E66F517E660CC6492A50FFB2729BCD838D587DE4A243C404
A613584C914C3AB7088A7C81882BD25A6CEDF3203E691E4470D1B67FDDA1D109
E329D873D3C96CC1EE1D72809A3440D6090AEBED6B15E86F77DAA470DFC57DF9
FCF8EC0002DCBC906E49C650B667EABD71676155EF3D4FA7693621B4F629671C
96961B5C839398E03614672FC9E502F360A17385A0B810BD69E923072CBF0152
E4B3D3507CD4305998BA34053ECE32036C898EBC0810ABD885A1A15EB98445E3
3F9DE09E27618264909D03908AD88EB6E2948D4CDAA380CE10FA3CDB8A93096C
E07CAEBE1B6B1446CBFD49DBB9AE99323C49D9E87211A0017659F32337A4F682
3D586B720E66465FBF2B151C9A16DA891583A75508BAE882F68D32C2EF7C7327
3633B0CCA4B5EEC3B3EE68A110AE2549EE1CFF396B4068A9B5B65C54E2C513A8
AB61FDF309DCEB943586AC4AD3570A3BE664131A72A3BA96A52E1E129361F3E0
0AAAD1541A3BF19997108C92435FA16042CD272CBBEBB5AFA8B7C6AACAD7C3D2
F7772D3A93786FC7411FBBDCA9FD280D47041790B74B11AA80FC791817EEAA23
418EB982C7576FDA972F2ABAD6698041D2CD57B21BDE9A22D711CF766612026A
0C946920752A6C93B115E4E8C57456F6D67832929588A04DD0DA17D944761BA2
C19007BF8268E64726AD4BADB461C28C95B5477931ADC1EA5AA3C0378819A646
2A9ECC1609923BE231335669907AF0ADB01542E685126C9CE2B58BB7BE715B1C
59131CE14E959027BF8A95343BC0F1527D18DA1024A324972FD125F090294A74
44A32A1FB44971A5F44B11D497F7055A35313E7A68CD60703FA7A901D93CBF8A
C76D2B14639613D3DE75423FE657E5834A69908D603D43C0D17C947D7A582C02
7250F12E42CC2654EE01F0252581E0C845517B03EB174C9C23EA88C6EB1B3737
E1DF3CB7D04DB9D97CA5F94E120BED244B3351B9191D5BF9CD3EEF70147CDA82
43508DC7FC4AF32628159DCD10C888A42EB1F03CCAF62869609DF095716AA2A3
775430E70D41BCB7136A0FA1536E9CFB3007AA71653082E51698B68BD116A5BA
95E000B175ACC6141646B125686C5173B302AE338D87DCDA536A5D54CBF030F8
80B315A06D601B37235FA402F2C411D78BD4C72E6E6CDA7F192F64A55F1C8AB7
58D02AFAF7F4BE0D29BE767B2405887367CB486C0AAE941225028AA8328826A8
1DE3C364C8C23886856AF556102333C67F1ADE0B4A834AC821EF3C032EA62AAA
B994F869CCC6FC40AA638182F605A34559A78279C91FA42C39801BBD0A6D50F5
91A00933470ACF2F21FA98ACAEBDD916FC673C6558332A6306284C6577B4D2D0
0D9E2E6A8FA8CD7741708BCA4CC5C5EF58F81E4F96FE0C14C6A2B2904B704470
9EB07F0F92AF4A22873DE69E5B66AA6A94FE64893942CC0DBCB0596118CE3B5C
34D0406AA04ED3009F20BE2F0E268B9B38FE448F92BF693F9C26DDAF9B52DB3F
3EC7C7EEA540F7F768FCE3F22AC8CCB381B948BED65CFA64C9C9BC4FB480812C
881AADD3131C6D1D4F5F59969B95070C64874B2D985AB924DBE1E554CED5B56B
FAC07F1CA15D1DBC538489263ED51706E7090BC2CAF92BF76D7EA1BD5A65901E
270DC4A6CE3F390243AF1236E2916989E5F312640242A7F92760A1D4014A2523
949B6813C7BFBA5B6EE165DA3E3F45F831675A33B4E1C917D794A2324E7C7966
3318E9BBD8350B1EB2EF72A75793DAD7567F89030985C738357CA9639C750305
0180FE6E63F128ED41907E1D9105CE8DEC4455CA91C26641AF4FB38A4E261CE1
64CFB58357B916A3E13042CA7841F6F86701613882139E197187A0C2BA3FB206
54858B29E295961E473EEE3F35D1BA59DC84D55280BCDA30F9E9E3CC540AE57A
F15C728BAFD63F38C834775E130534F00E019B024FA61EE621082452DA1141BA
E3B58A4FAB7B4256B3D7E90294A18009C84643DCE76E051226F3DE7EC7F6A585
13255B014F587A1F0D76A02996FDC12AFAA6646B79423BBB2BAEA13A3601BA48
FD2496A746E51F06A15835F64FCF77AB937841CBBE53A88E3B61E95A46AC06CF
4A884FC859A4FA50B834CFB884F0AE05795B085EAF0AB9F8D83B81478B5D59E0
B2E866CD2968E21F31602E0692D031E1C5BDEF24856DABBE5CC3D2E368FAD2A9
2795BF91272A0E02CC0372BB6BCE874A74D13F74E00D275D9D15099F4CAA9553
5DA02D947A8CE50EB8F5409C8B042D4EC5BB79C485CB612A5CA1FFC0CAA640A7
16B23B4306843FE390BC6DAD3FD2A5380631EC016935E159B564FE1C46744362
BF43BBAC0720286F542AFE4286DA91C295C23CED6CA2ADC15923683D01B86EF0
FDA4D35194EA7411DE31FB3E1463938CE98E42CE0E2B3762BB6FF493DA81DEDC
5BEE35735EE398ED381B09397C0E6CB7952E155BC07C60FE6498A91DB3956B06
E5B0BCD75088A4C26EE8F2046205E17D9CA65AF67EF322D9BBDBCC860277088A
6019A14F6DF889CCA4041831867320D42F9D9129E32ECC93135FAACF1E2E8F7C
A0BE9DC1A3DB6887E26324302EB54FD86EB6A2DCF7D8C992D83A5DB75996CDF6
7DA1D968F18FA726A8D33A633F6621B412E2D6887032716D75E0762E66955387
97AD5114CDBD61CADB01C388C55B5F7A631715C45F266D60AD15CA2096930B00
0122E2AE670357D443F762F03F3E99A8BCD84975FB8A485FF37516A69379F2EC
95F000B3D568C52F02FA778E1D6B354F4371CBDFF7A6809848BB5A3309BB3AC4
563D3E778EB14F13715D919672C75A67C96DFEAE563A1E010E5F2FAFFDD1FD61
A1825C82D8235B4274A306EAAE892AE72E072F85CF97D4FBBD39469FD06E4F13
D7E0E955AEC913588A9E5705F1189340C22A1DCD011EE49F4A675B4D7DAAAA82
EDBA00703B00E88F62CCD683248535F3AA64808371C0FEA4D90EF380A36DA90F
8315ECDFBDC07955501620A69DE201B51C622AEC748F55812F9A7B53B1A348D6
64D94D8E73C8FC00EBB823AEF3C60902B8162A8F52019163EFA23820276E3FDA
FE38C10A2F49017A21540296F75F63C1C7EF09AFFDA4A9984E114BA647F7A166
76ACFD0A38222C89FD2160423A668C010A4B9920F8466080CDBD4E59E5C5F648
C1715F536AE570674CDD2692BE5E26DE0A6E65E9FB19CBC6E6EA3AF1C2753678
A99AA0EED4AD36C41ECC537935940D96BA3498E2886485839DAA83E552A29FA2
E6C7564751E17C1B5AC372D2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBDF6B6D329ABCADAF9C19EAC5F36E1D210044B6EE67
81817CB502BE94904916531564BAB2A6BEE21B8195CA8C2C239AD3F5E6367118
DE229885DE2FF1F9AAEB59A728B7F0E9CD9B977E0FD77C2B28FD79C68B02B494
2C1BB525143CBC8BEF7F9831A0E0A137ECC98C66873C49DC522636D5B7FB6EF7
64097A17DA725C3AF90CF297872CFCE56CCE1582A3A05CBC51647CFF73CDB3B3
8CEDA174CA001B312141BA6CC5B99C850C4A730ED50DB3F2F775CFFA46A74C3A
092A7D5B7274DB52066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0E0AFD87C
47C937209B3DDB4F2FC6DDE67D9ECDCAEB8255FF96F06EA28A98D40DFF9A4EB0
9326163E0BE257546798FC4EF75EA4F294EA8496D032ABCB2D78109875A1E454
EF28C6D432330FEE56133F3C323F865B46D03457D17C81740DAFE000798A2787
814333C50AABB6966275AAE8D8CBE9ACD7740ECA4A47A985E2E16052A8C0A764
66650B00DCAF38B8C9332CA8DC2E6F45197653F5A7DB9D25F0BA34EA859BF991
D0354BCAB97DA3AD0210C33F871D66D40597E4F20CAD0CC21D2C3A11820AA663
1D8DAA61F415A48B0F77F4A231F76CF009FC101B4A0A95F9E4E435043FE03050
AC8844641B1DD28CF1325D3CDE7E16731A336535A8231320B310E52436CC4611
8131021402F19CF7286586D1DE7A371B537C1630B06C33F7273ADF8801A3A75A
21C5E44E033F2BF6960992A383636F6E73AA9410881AB9BEEE451A3871DE4536
ED469B863B655F084C94FC6DAAFFD6FC5D5B523FBF1058A8907ED4383E343147
A45701BB16F608B9148CA790F2B232A67E71C893B96FE305B9AAE0C5A246A6B1
8E275EB0CF680A06BB8AAA21828F98DA44728B485BE2CFB3AF841623A121D2D3
EA73BAB53FFD35C67AC9C3B91DF9A4D1BF35CA6A8CB8F15F9144E36E456648D7
54560459B7CEC323F8B488B6F5A8EF8D69FEF91E13323FAE6EAAC2E5ABF665AC
E1585E331A8F8B5AE06FF085C1F349215582AD71679D4266E65DE1A3A418E02A
8BE169C5D0B120623BDDDDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB723
ACE8B379456632E7FD1AA490E97EF1BD458DF08168DF0D73A1817FDF25DB83B2
72364E00602BE904C3104E28F1BC97F954526ED470061A1D580BF1F0BCC7FF3B
CFCDA3F50A2DCCE206FD51CD406098F09718B87F4D3D2A68B2366102ABAD3D8A
BE1CFB0A9DE45E663E52C1F8296D44549A5ACB293CCA55299C1B7FC3CF0FCB89
4D177FBBF1DA7D23111F9CE050A46D17DA14ACDBCBB6E7A547A5C29288C628E0
8F20AE2DDC41E023D259FAD30150CBBFEB1D3DC912991825B88393F92BA66563
61B8B298F5AD8541C707E88C117DCC0D93D513E3EF946D3FCA5B2C139389EA1E
17D5EFD54A58829D95A66680C9339C7F2D5A32252668776C2D25F4CA2B2F4469
CDC1D3648EF2F9569EEB91A95B06AF1B105524D0399B1BCE69A7FC64C0DD2326
B351F08CCB96F77FFF1961031A81A01220F86251A0A0C857CED149B20C1E9544
784DE4B5CA81DCBE03C2521964CA6D2D249929BA4C2D6643EE070F391890241D
7561153358E44F4754A1913957458FB78C6ECB6460A281A80F502523BC02292E
1D0EA9D8964E0ADE352E5C7E82DBAB63CA3B171E6A9AEE11257AB2DF361B2AF9
5849F3AF9E42B66361134916C8FC32E3D7CF21012FAAAB5E2837E315B5547BD1
FB64BE54A05ADE88FBF2D6B94F12E4EA3A9BDB285BED8323998156DAC28DD4FF
A619E7126B864943EF75ECEBCD0033111B4451A9ACC99D10B2322E42089693DA
081DC876A8168186169D71BB76457D1ACE41005A314344E385DA423BF8B104C4
3A87080E37D1D7305E7308D2A3984290DA1F431FE391C16E60AE53C9151DA7B7
2ABD919C5BE2F0FE186BD6043C9CF23B9B6C2A6176056CE5DB4AAFD345FB1CFF
4792BD162749C3142978CBDFA53DFCE348FE4827947CDD08A647D93504EA067D
21563F33124B63BC44D8E6C03B4E655BF2A7957D95FF01CAE1DC020E577AB8A4
EE680C5ED8C8CB4191E9505B336779DFD40DDF62F323A4622EBB2D09BEBAEE80
31B0CFF132F8AE3AC666C85D86A25E591E0531A442F63B6D86590198C5957330
A3FF5053D505D1698DB2175A63130FCDF172B811333896DC81CF23FABAC0975A
C960D4C07E4AB64B360AFFA4B589793BC051BBBF440365B4EACB0932EDB316D3
52B4D816D717AE899B9AF5487B7FEADFE2B7D651B09FADDB2CCB10424212EA90
16A34634CF88893EBF53D8D282F6D8847358A6856E3D6F3B11C1F343EA1AB3E5
96E20D67052F9107F2A18F70ADB7D0125C7326058030E2B5A9E5CDC20F9EF9B7
CB7F1D174B2E94953F541C3B84D43365C11B5470133F24B7EB6B0A4C88BD415F
F70F0BF5813D54D384CF892AF4BFEE6C45D4349305256ABFD5523A0CE70C4E6A
2E6A34DC95A52D4F1AF404E211AB3D3362FE2F81A38F80257890A6B6D9CDBF50
68CC6B6E5CE804B7463204E9EFDED7776124F9A2EC8C8C2E8D9D06EAD8954E85
D6A1E672DD1096784ED2206D80192C2787656B2A83D7D667D4808E9FC8F28213
E5C3BDE4B43501482B50DA21111B76580BC4A776DD86B46D526B0F88F5D96B30
B607DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CE200573B4F25EA15E67C07A
4AD81B3CC862A675AD5B46D2B03929758B9138A49391D6F9D2F7FDF792C5C06C
1E530E96FAA85824C39E398363346E7C2CED3A99469BCF9EBD0491F249787F44
18A4A802B852FC51099532780C8F8B7409E940831CD6D08A28C8C9F9EB2C09ED
1C38C34B695E681E57BFF5EF1088EC186353B9C4B21D7A86F61DC5FBDF3F5EFE
F44E17D7E788181EEDD08D432C97B7CF7BAF9833CBD71A5C9C8207965CF783EF
CD286C4A69B2D48512BA6F67ABA560FD903432A3A9A54A710D942F8A6C4128F6
5484A823D685E103F25E1F42FFDA16D4A3B4645ECC5F4CE312311B641EDE7B07
C21A7FD2CE803A205B482B03FB11F795AEE3DFC6405AD73520B4A78AEEB96AB6
B0BC37A1713625FC6FE892E4C2476717C6A77397FB210D86CCFEA3718EC6D982
C26C96439392577194BE04D971C721A76A3B09ADF83D6F3FB82AB1D7E7359826
4523AABF9FA7B177315FB05E8304A43319C50BC682088D57629592378E21B17D
D79045D0CB167BEB8857F344D54EEBF46A3C36A4C792D1685C8D2A2CC5EB8C06
D81593CDD9FA6B3A09E4B3F5007A5C4CD14DE469F38A261A3524EA3A004092AF
BD59A17235FED8AF06393B10533A8BE1080729D86FEAA2193FA6D6C344261D36
6F6AEB1AF7C0FB74BB319092C47E4E252129D50CD773492BC58C366F903F717C
1A9A37719070DB1E3408E476837A508EBF531591F1A56E7D1E22A65FB87F2748
9856095D1CA40B9417A1DB1BC9CFD7A726E5853FD36B3297BBD139D828045042
809BA99DD7B637802D663A875D0D5BAFA7892567BEA46F08D78E105FB10252DC
8E0885027AEE9ED51D2A2202D7308D138F49B6D1247B02D6E63163B5D810DE8F
57625819D86D7AE834D7135E30F2EC0D3290848EF811B4AA5D159A2C5B87CFA0
9CE0CB7F7C6B99BC3B1CC6D379B05809BB83D175B1DA90C247898B7024A28BDC
18C55D2EE0E6DB45B034F1FE61E66051ACC12EFEA6D19ABBB21273D4C40A2078
40D6DD0F833F85B67B8B2E5F4F1DB0BB2D0B9A365F6A749D3E72C03007E0F0A9
2F26505C43586781B6BA4A1F3BD1B8490BBDD08C408F56BE5DD221F4E05D8C86
4F9DD3E99FF86035A6A8C3B72C9EFD891CF5AE0787282ECCC0D9509A901A2644
3ED356ADE5722268FD35BA41E530CD238D7A64A9301D37451FA52DE4882C050B
405C91A8F40FA9B3657A45E2307B9E51498265119F9D2F3F9ADFCF3F625B8735
849167221875C14EA3366EB3E54D34BC73F795F8C1C099587C404F26738DB2B8
A6E5058BE0F60526DBBE8E0A78AD30D7A4075E0BC6F094E9ED5A55B9BF4AC2EE
65D7F7CB36C6000BF23A56FBFBFE8478F1CD00150EE39F09FD31465393A7DEB7
DA08B3012A99FB2FC7F6FF7AE5716D966685E0AAD3A215685A828CC8BB2BC61D
42A9ED9BD8AE4D9570FC82B6D231B37E2AB7C7143731A8483D8C5F400EDF20E5
332262C12D8255314897422139DD5CB357751D9C3112888B1EEFA597E1927F24
50F5B23851354066C41D6F7BCB1F1C80924E1442910E3687052DB96D3DEE126A
3D2246EBC69353B0708E732FE275CD0AEB577E45A45DBCFD9EAC4540908FC7A2
2B23D2574425D4D3739ACE775C6F58977183627CF3CEFCE0977B68BBEFB4BCC4
737336180EEAD6039F9FA09CB534581ABDDF50D5941C63845E8C5B821F544660
9921836DA8BB5CE31BAA8245F4359A2F49962C6EF58149524F7B9E311041E085
3B4964166AAA403726D953F27586F8CD173455B332F55E932F1B9CE429F3F1BA
2E548B9C71D38A87759CB1A8F032A9F6C8C98511EC1E2A0F6606FBBD715C1314
35EE885780EC50DFD4D90B568150B3C9E2A09A319D14ED56EDB05D50EF7E4789
E68361DC12213CDBCF7C83ACD62213BF6D8A8C77FE8B20616550218F8ED6C018
4D558925C941EC08C8301EB6A81029F6C824CFD73B90688BAFC791B2E6517A4E
1BA2F39AF2EE09663BBA2AA0C064D2781D90569A2444285CD25977A3E46AA050
224AEE1BE9646736CAD15214654422D7C885631AD6AD5984693F8721BE6B48E8
2184EDC509992BB0FE7E9F2AFB2FA1DBA5FBA7F4F47D84BECFA8DB75819EEBB1
81E75311B3A13BD144BDFA2AE11AD714EB1D9BE59A299E58ECEDE8173B87B4AE
6977DEF6AAB7983BF339540A8DF6D404B8549D03AA8DE024F37FEB469F476060
A6940FAD253C76681A3282F7FC211E17FF750B069A986154E767F4DD7380F76B
06B7AECA146EC626B596C4BF214AEE075D652C89E288479664226DBB6F1171F9
EEBC7E1273D35521CB133A407D1599B367D46C34D3F5936C49BFBB74A8E2E732
1DF112DDA778B1E50BC3B744AEE2F5C10C1337E5475B0936BE0D460129D423FA
B61B1D49C8AE59C0E230BADFA0C6E2C7FAE2B6477320DAF01FC329D22DD9F36D
5B91D5043DF8419DCF881E4A57135CE1EE3D8A68B52E296CC34514D95C71475C
1F8EB959566A758566F65B03C2A2D5F9F6C5D3CD3A1E7E4AB8D22107B371CE5E
B18E64B4567F289298A69F79F6981B190F26774B50E37F66D5B800687ADDBEBE
CDCE5D5144613798CBF687F7968442A13927989ADB385BDB052206F0419C55E3
6B48646699E907FE5C491EDD336C6F661DD25A5D56725C74A5D1727C9AAD7AAF
C99AE3D414FFDB8C8C9068C034B9311386848F65E6959B89B65A3E416FDA65C9
990DB940A5951BBB6FD4919B97FD653F0D102D2B79C3796AADD16EDF3BB714C5
A037F58DF43A39DF4F494133E4F5E41A104221C9323CDC0D03B79E4C0CD14763
A255D38CF495BE97E6FC940B9B2F00EF3607EF9D22EBAC51E4D0BA8720C1A793
6015028480F2CE7EE814B92E5E0D6829FD01407126D3973FE22CD3AC4F6FBB0A
D7B96CD303027F88FDB12EA7DAE363C08980AD0DE870319D036D10992B224551
5DA8BD6974D336DA8E44C9BEC89A8FF39084FE111795554D64109A88343B37C6
30FCE3E6E967043F9162C39D9F31A15FC937EDC90FC7F5D9C04BB5B655DBAE33
483AB97EC8A181B3F44ED7BD070FDF39E6B05258DAEEB7485BE7191290BA5F59
BE94B118F6FC73B6C0B279D81895CD2D4645752639F72376963887887D195A1F
E7DB409FE231378F7CBBFA3387FE25CFEF435292714A8F491E2E3232FB4DDA9E
1BD3A55C4D59BBFB7F5EFB232FCBE3C490AC933445AEA45169E6F0C558A7C767
03D9959B4260C110FA2602C71401F776BE0D9A35E67F69AD6794433EAC309EDE
20E41F813357F2002FD7D3BC2795CA29E310FC6E40D3C144723F5403453E9B17
6D8D68FD62E9FE751538D2E609646B5917DEE430E079F46889624F7D704EF0DA
E2DE91147FE91F51CC413D1078AD46A5E7B7BA4F7272CB031B993103C259CF4C
774C9505F9C992FEA34668C298CB824BE6E3FEDA248248457A91624203BC9935
CA0EE0F8A0DC033E93B040A6121DA499CC2DD64BDF07053A94A8F6D2C97A4145
731D81485B19921EE504EF3C84FDFF4724A8BBE1392FDD6F261EE615054441DE
AF6F903B44BB85BC31F795942D5D77E3AD79EB3B6CF717E41DDC463EDDCD1BC0
364A289222E6D4251DF41E0518AA4C9C76A9C5EB6A15CDE8D5992255C8274937
0F2CDA21E6CD0B1575FE3C1246D1C4905B82E9D446F1AB2C3BDFEA324017BAA3
9283C14E3AE66A14DAFFE2CD8748559915540F9E30B9B61C6C54309BE136E27A
372AF4CE5A65140D9F2291FAA610FE8C4CCD57A7A8C9F5071193E20D0CFC0E84
16824E45E6541AAC3BC7EDF542EB98666B633E3A71D3A53CA653BF2735125CEB
2D1605B65B5550F50612EEEB2495BE6DDF7C7106C66F3EF6A89F9D6EE685AA11
5FA968D454AC3CD06F4C079ACE1DDCA6F51DC6F1959DD257CFF8AC01064DC59B
43DF12DCA626F8A2147CC4760A2B0B8180E5389A54B85BC69FF37B8CE078CBF5
6DA6F94610938B3324E67788D161149CFA3A72F5176EA926DCC883EC46236344
82491DC499382C97E10A7E029F48790B9A77DDAE81AF61E2A445AAEFF723D27F
B37B08E03DB3C1F98A03789B31610B918ACBE64F989F5A8E62A0AB4DACA1F89A
15DE3B4654B265ABC5E4FDA2D8193F43FF146ACC2771C893B96FE305B9A9354E
0D4A2C4E81DBEE2C34418B805EF51C5C3F8184C1A362BD60C6E84B9FA28BBCB7
12C15A5BEC215FD698B7E7819443CA79335DCDCEA285804E46661FBCBA022551
87E2D9102C08C8FAF1D2CAA3E4670A248C72AF4B9FF4E6338B9E18F720457A4A
B35C68C07865063A2AFC57C6B70E09604AB40535E4200380CBDCA96015D3822C
F627E342EE919B881181642CB1F6C34FF817FA8E8118AA59340182ED03A0C89B
0EF64BB3DA65F519DD4924475D42CAB7ED016C2055BD2614468625F83C2732EA
5C7722C62D51A41F58BC269BAC8C5CEC0CB4D39B394D5B99D46408CF71BB6CCB
2BF3DE8FCCEC8F095F164208E827A9C73D7702961B19DDD3634F58057E38B21F
897429B05E20B5111DCDD8E9C0A421C180606587813B4F7C133E259D5837ACB4
B0345276798F1A8805EC0D382BAA2D7CCCA16818311B641EDE7B07C21A7FD2CE
803A205B482B03F883D13E21F26DBAE2550DD4ACA051EA0A00301076763C008F
3185DEC6C4F8EF454A0A41DEBAE7BF7A16F17D74E6439200E5F7A3C35D2DAC2A
D31A4A8FE8112B67C5D1DC9A7756693EDFB240D683186F44C2DF5AC7470FDE12
8F4FCC2F01B128F18E1616DB2FBA7F757259A5D32A90AD3A6AE9463220934652
F1D05BE0E19437423672A26B560AA588C1F1CDEAF6FC9BB1FC8FCC9E461E1FA3
7CEDA39B40C3291F44280562B8F52438CCC1953B78E7D9D431A1B5A04A73AF4A
83C13155EAEF9D3EE785E863E59BFA94A109026D51F307D91E78F68FD0DA482F
E338FF7162B38E70ED0FA6771E3F84374AE7040D28E2027A98BF9148F4B11181
79748A738E46EDED17CF6418C4CA1E6D3F2F99CAB5906B761B5F5867685B5366
B9DBADB6AA3FD6E9FC23E36D559E4FAC70C344B644EA7EFCB02B512A970E7532
8A677A7DCEF94A23B88BEA021A8F9C69F0AED078B7DF20965C5833872CDDCD7F
E113BC618D2B53E186AD5AC315BC0EC15C4C40925DC49A87F38B819021DAD91A
16515E787F70CFE5A0A007A636700139BD2029D0E69C220DE636E9F380587919
A086A1F1FB33869A00CF375B55B8906C9A0AC65E5F6C3F92A5534030BEB136E2
DED01B58B8684AA0C7CC2C7E258400BCE4FCAF84CD0C31F145EDF5AD4A686AD4
C2B3903E361DAA5BC1326E0488726E2D6F672352A15C7DD23F480BA555064186
D54221F9905123E9C78A275D922ED204C9F508DE64083AA7CD0A8F3C0EEA6E6D
9A0477DDBC8C59DE0A5C01FE0E5F3EC7EE6E6540D5A2602E62FB13BF6CBA03C0
0D2BB80CB291F8E334678484A16F9DE661DDF52FAD0AB9815F70E9FD168C0285
1FCE51F7AACF05E96349386689386BFABA5CFC0CE6369C638E6B35EF42C0DB0F
F95359E700BE2DC30F248D1BEFA38DFC7A29E4B6F41316B3B768C81C0CA3DDC5
7409B25DE98784EEC512CA317372060AACB1AA7D7D6159E8D91210F4C4948292
7DF994271B1F39BB29575F0D72916AF4B38572AC7FB0E5E81D3AC401C2546E53
D9D3DF896FB2B71D5BABFB90C37D73638049850AD019D2BFC45ADBA046350BD3
DE649F4F521C20F6B6AF7E151F7AC33A81947FACD702AD9E14CF669C7B38CB2D
16EE53FCC59444A3FDD927D615402B06C2CBB2CB91B45D00DF27E5A47692A30A
764AB33FFFB35AD715BB0DCDBB2D35B51730CB8CC9D6B616EC929FC657A99A86
DEDC1737FCDAE025AA1456467E9C8C35CB9F5B9A26DC0342164CB04216FDDB33
7476B2ECBEA662B5BCED70A87CD0D4798B97D61B2BB33D70370F53471631464E
CB612BE19C84213E7FF228B69E1CA9AFD1DBAC25E723FF843C952911FE17FEC2
FF13B69127484799E6B698898B8C456B76FDBCBD7469CA620A3762D65E0495DE
EBD915BEE2AE4770ED4AE140F53F9B36D7DA980C81000E8E512EF9D135FFDFB7
6A74669C7D9712D975674948A0C76CEBDC6D0CEE9260794F27F5B212999D21D2
3C50687F8B8D343063014A71EE161A563418A13D5FEFE84F45AD559E5FB1691B
F6637DE340AD3A923D8C7BCCBE3D2F962C2514671FBE449B7219C7288E99872B
907D5AB583B082EEED8AB079C4448D14738D19260E8053E9729ACBA338A35802
25CE02A8511CCCE5676F5FEC5AD00CF74808248E7CA630483A1CCD0392167629
00C1A624AACA506DCBF9AC0D226D76E73C0D84A41699E520700C5E54DFFC63F4
4C24F764417AFCCC4CF3281A312EEEF077C86C3D5EA3A3A506531CB503CE1EE6
302C0AC1C7CA421B81B6DDFEA56902F01F1F338B691B62C6CE8209C642C88F64
2E274124FAB712301C3BEE72F0D67A10232543AAFA3E7AC77E51E1E4CFD98166
6C72993BF21DA93935F90595BDBD4D274FD4297E925C11372129C973CFACD535
CF89A430D7C3D779DCF3144629439E6B8AB2B752FBF5AD056EF2A9AC6BEAF1AE
58A02BCFDFA7B2AEEB52D242448B756464160CC709D1C1A9B17C890909711923
2B3876EA03A4AB8214ED1CC3921A1B884CABA6261D560571CACB5F15D022A847
2E8DECFDA94D06EC532E7F720BEDE2D292AB7B01E971280835D2E656A1292F72
051FCB9B24D117ED792DA48B7A36D5E033E35DB499AA42EA63A8CD56AFC62B6A
88BD1D5396FB31B2901C8C2DA92BEE9F27728FE5F4CF00092567B0C62ED755C3
1CBDECBBB7C3FBCA1B459501F78B0019999A8F17CA0C871AAB3CF16015E2B178
5CC9CE17A5BD2943FE6A4FDF441EDAFDB75CBD55CE9295AE76F098F1810D0E75
E691EC815A22E4F06AC52972CAAC14E86B38C936C4BBAEDBD7CD236E6D2E8F4A
0A24C4BC96A1811C5A72169D6BA9283C269D2EBBBDB48B707EDED071F9AD75F2
C8D15D47E5854CAB09AA63DB233A29CEF4525CC742872C73287CCAAD11F95643
4F930010F29C0C9BF088F0A86E62886E826B1E34FEC34A90D3FAC2AF1FB27746
8A4369F48F724023F029A76848503FC039FEB875DA38FE3F4115AB6ACFF86C5B
057FBA8A473CF7B639728E48C2EE2E1B9617F305CDE3E7C4ED843CBB2EC1D139
2C0E6A07B11A2A76D8695FC766529FDF04B414323D1272266CB128B1333C3AC8
C616D3E3A0163ABA54C7A51A0CD2F5FD741603D1E0E18571D3DA62557A0376C2
E716264A2CF818A0E08266A2B60C9C0902AE64276F7A1C6D7FFB1B82B53CEFEE
5A5C18087F2C3B28BEAF58B3EDA56702C92EE55AE3ACF0B696E4444DE0BB3491
FE84A6315AF0F87EFFEFD7F25BD5978E7557824AAD36B6349FADA1AB915CE265
F1145D3B1428B90D09A2EBC928A7F45C2DB6B3E0D06B1227BE09D28A15D53D2E
F768BD776EEE1CCD5B63944C672E6EA73115DB6D6453764640990DA80C952578
C426F710560A9BB88DBD9146F1A6FE3EAEDC5C4E55AE4C8E2478A28257BE4461
BF0D5737FEF579DD93D04BF6229A697E94EC4C8947652C9AD39BA6167EEFC32F
0AD9C63A53C7D8E3C246E698C6593F110D2B1C364257D1F549B35B6197545473
62FEF57A6FB752A972337CB2EFEF0596D5BD57D23639B1D82F04AB2B64EC307C
8C10E00B89E6C76EA6E4A377AEF9264FA03610C2764987AAB7E6E0F98D758E1F
58080B91D193781C39D765EAF561CD49336D7CAFB9D8C0238645C253E713E1AA
BDD1CE4771876ED88EC52D2695B95E8EFC1512ACF21BD0C301569A579CD2E006
4E5832E860F937F033783A4423219096AF6991C535B2DC3A08941A00794AC61D
21FC4BD8EA453FA8F72733B7F3B44F48E78519E114A8BDC93D400FF71FD7518F
DA16DB9280B9485C4867644D32D0D9153463C8D2F8B02F89B429212C584FB946
1A52DAB14D19C7C998C0A457F1244C6B5E4238967370A588E43EA78178AF7490
AA7DAC6B285A4CB0057689E72DE1D7D5770F0CE0B694F344716E2AC29402824F
F967E18EE39082BF837E55C109EF02499A9EB93CA71FC9C0D3222E949E21E431
812481BCFBB63EAE33B6E7DC3B63E29661537A84C874E1F079ED74DE89177FB5
25B2DFDE08713B8F3A5B71EEA94C0D2D9D5B99DDB20E51F6E1CA132E6CB4FD94
F67D9CFDB2F7C0EFA1E5377DEF19C99195A6646B1336F0B0FFC9E366920714DC
A45294D21EF1B3082D1590514DF5CE9343CB1551171CA4E1EDC85D3D4FECF940
251576A63C7593E7F5A0D4B7460BFEB0A6E596B32BB3D9CB62D75E9C00516C84
6CB94CC3C3D49254DC87A9C81E9DAA5DDA2083040BF71A9A9B369976055E2BD8
0245F249E9CBE0209B5AAE73A04E1194CDEBD673BD2C25E90644683417E1E902
D53E24B71DD4F1CC13482C48FD1456BB3E8CFC1AA195D9F12E03463930D05A3D
71E1E9830AC1A26A506FE345B5E929CB01DFC6E4AE406203A42C91FF4A99DEE1
2AF914DBE32DD3C1292D965AA7AEE47502E9292F3F5CC023E733705B97D3EFF6
C89BBABF49EEA8A49D2FB4DC9D691FF7AF4A2438EA64D80941119347496ADEDB
654E659F4CBCAC34142F4E33BA61DA1E50699E9F9B69AEA40D35153C336C37E2
1E3E82144C358B1B12E25265F80E9BFAC42105EBEAAF269711C0CE1EE92FA7DD
BB13EAB255B43E04EF1076D4422E27F4227102CF7D5685598D26A3FD7C28917C
FB4D3B4587CBF59A38C4418DC04BCBEFA673A3FFB3D478EF32B286D1738E60C0
74C6C7BD24F2BB04A721B6B0C7DBE1AA6B43B597550002B275DE13EC9360E9A8
E4608181A825001EE60736EAF6D1A1A932617D22329EBF716CA77729C6AAEFD8
E6ED3CB140D150777E2FFF6F8BD0DDDA24F9A1F4CC349ED95F66B66DC05F0CC4
2F01AD47430A287D7D0A9BB561FBBF414956EB9261524389E71CF05793397E53
B02B22244FD5022A08AB40A16786F6245A907E7370EAF4260A698AF73AF00A37
F9582F33B2E198934294E52A2A25163FDF224A6E03BCE713605BFA7214E9E629
48C52E4564D9AEF156849AB1D7893DF52D57BD6C1A6B744024CFC65AAF320588
6CEC807CBE1B898832903CC74E05D7CD9D62CDB0E1D4418A89807B2461AB5288
777DB575D01AA80CBF2A6B022DD4809F6CCD8766C637919F05E3BFD1EAC2B12D
9781AAA87D4A69365579571DE66F500A75420DCB24BFED41086ADAED535A8E13
0B46D3C97F4DE0BF14EF07EEC57B37ECDA777222349B653BB04139673BB3B8D1
70F09B8143482CC6AF65E421861F921CFC9583463AB935630E26CB67E856CD93
65B3ED23E58A1E97A7ED6C707DAE879F865D7E55560DB1D261236A9754D3989E
1B31830CB99B7F7493E891C5726B66D279E72D5BD9FB1507ECD23359297EBA54
00A1B90902EFE6792F207136E1E16B417CDE0F3EECEB207CAA1C2C81ED825DC2
E7EEE6D14EBFB58C121CB99C68581593A6CEBAFE9A9136C3AAE071B00BEE53DD
3A5515AC21C4095336244CEA0DA1EAD35032A9225804D7FC78F584294508A53A
987160E858F76C4FCBE0D57EB716ECD75C6A6CAF0F0FB5F6A73A47FFFB9D62B3
E0CAAAEDBE98C69F89E7E71474CFC7515F73F86726975380832196D27869EE01
D169FC58F743CD16C8F0A0FC17240463B37B84ADF9713EAB43C23369EF2AEF19
2274C134F527E214FA6357E9754F125FA40C3BB93408AC8970E98977914082D8
9337BB2B8EA2141B1DD5E631C824968C625939A0A69BE82F083BE7E00E79197F
001EE81A358A74072C9B27775BD49C83E708C80D31BAEBDBAFCE18417028F03D
8138000691D077DE4BE964AB5C97C7482E85F79FC85E67561B3C73B9D2DB0F8C
6FF6FA866DA6C2569E0B58AEEA746AA0E2543FF09378E5799447FC40BB5DDDB1
F2F0DD388E0CED067B792A1170A1A5CF479ABF8B1A8430F7C7563E306B853097
B47852B119B42DFECE3BFF447255A99CCE4EC0E8B418284452650AC9F4E1A7F0
D47E802F698295CA19AD813AE552E8DCE8D6F237E9AF884491251E9099681293
009DFDDBF03E92CB2076732BC018EDE986D00D3F68C0CBC50521346A87A21C42
879D89D948BE347FB9399A53FFF0065CBB51A3A16DEB04E96851F00D02454847
32D41593C3181479A7C6A626EA48BC7433F828DE8110D50926E8D85CC53C7802
DC67B6ADF796555F5D7A0EFD90C7CDF19E831961AECF14FE747F3B38D6F064C3
BB1A93A92F1265789A71E5E9E56A8EB10A9E09D504E360902F0680AC09575B8A
D8AD43E450C01117E45F49AFB2D3E936B548CD78AA6A6FCF0BC9EEDFF165186D
73C5275BC9638D8A733D3E5905EB66D053F870A1716B4DC3D868BDE539079576
E5CDFFAC3204EA4E1C481FF3F7E0CB583C8605FB1DEE02FF8723802B219ABC3A
605343DF722DCBF1C27AB8A8026A725FAD7A11F4FBB1CAF8E7A179628E590256
5EE38D5F437D045C3D54F89637A3099F1E6F704C5D05B3DE9003CCB8796396C1
9F5A1EECE62DA21DD4CA42F753F03FAD50F5094AA58E052072B433E5041DF32C
69E0D4F050660F5163E0706DDF97D5EFF51E900914122E6F7F85C21F70401194
92BFC582EF3A79C9F067B1C1D5C9E915592F7FABF0C3906D3A3F44355460BE4E
0C5D8735DB6A914072FC4480A463ECD6F2DF0DDBDC407F19B2E0BF7D9CE8C6D6
BF74B27B7BACC7B063A1C7B81826CED313F9539A4C62588FE9973330B2F3188E
6EEC9CCE0AE82B67378C8B9F54E48AB9368624EF3AC9136DE004E338EDD1D870
2763BBF9B384F4389030D74431252421B3345480AECED0CB831AD99791EA7ACF
0F0FFD96D3C1140BD07AEA3B644F58E99BFE56552AFBDF4722597685F0FF8D25
49A00BB3CFC284D2C32A99E7817DFEF84FB08AFB1989480332C45AA162BADF76
E107548B20B891BD8105CE7A9DCB2CDE98D9F94D6AC187FD95580FED59E4262A
C41B28F893AB0F40A90B384CB3ABD633BF8EB26B5A55EDA7554FA0FBB6EAC510
F4392806543B5D8FE0FC445E9B4DEE0EB997AAB57D5CA5C24129E7E06C915B5F
01ADE72B773405E782805662C78D8064E271296F137EA1EF7500D49894D546A4
79861C44BFA1B72E5D94968DF9552A3E97EDACC0C5420FF82B6F22EDDFB553D3
E80930998AF735E85F43DA414C2CC5424CBACCA45D8057567BF58497ECE9A391
4678EE3A7C7BE83582950AFCAF1FFCA970305EEA1033446DF70D49198707792C
EE0206FD13CEC599CED53D909B809EC3B02C33294B64677FFAE342E56320574D
03B41934C45402AB1736BB9BB00BE9D9A210D3ECA477583A9CAA779EFAAB2CC9
2E31B46D181DE6635520FB8D80A4E47BC309F257986B0088B6B5C25C4D649F81
4608AF496C93C9DCAFF7316128ADB2BD7156E88685E345B17F3890B82A9F03A0
DE4A201A150213ABBECB6E613AFF8C32B8224C48E5BDC02294CDD1896E3E2B22
3021BB352C68FFAD1BA378B23B136651E444897708CBA8641DCF1E2C5E054AEB
2AA7EFCFABAC436AE9E09D4179184078240D5E20618EDCE9590FC75BEB4C10C2
5DEB8C98A9DFC76605CA546268BD2F0DF7E80F64449B7DC93558EEE55EE27B64
B4AEEAD7A4AFD1D09C997392353A93B8AA99F271FBEC47B3F9BE00BD91BEC532
54E26A3FFAF4F111770F556C415E592FE5EEA6A7A4CEF924CD0ED14C095E8CF9
DC1D2876378F9A4FD2901CE0960C42F7D2C78D3D573D21FD0B03969BA7F048B7
20E8DD38E27D05E801B0A19AE1B5998A9FF51FE3020BEB09B05DB3F8DEE176DD
49221B4CF6C04902CDB4A4A0FA6BBB20F0DF2534AF569BC8C28B4B643B809868
009B6835A81DF4CFD34F44C745F6C995009C1D9677EE0715BCFE19794620125B
9B7C3B2B2518E259184754BBD767A1C07D28C599AD752B2830FEB9304149C7C1
DFDBDA8306F37014130CFA26BCF90A49A5EBC37C397CC54966A72753B1B79E66
F86E5F6BBDEFEF371082BACF84BA61F88464DABE976A730BB6927484B55F76EA
3C20454A2D07BB348385F4E0C0298807A67C52E9445D0EDDD76C6E509FD964B3
ED0E109566DAEF6EA4EC7B033E48AD229108064F274764C18ED3C750B1F6D3E0
B88D6018CD72B13646E1E71D8741C3D477E0B96A037CA4F709CCC02049C86334
99C715ECD7598767765B01AAFB04FBDC7B4B8770D3E62C7EEA9759D337AD442D
8798F967CFA8B089D94AC2408589470F0BD1E5BF0FA00A685A36EF78429A6C1D
A021E9A586039F144392D14F35268AC1672891796C0430EC3705EE22D4D9DD4B
C7C8C25A4190F72FC75DF965A60DEC221198ACDEF711EB44112DADFF5078AF3E
23EBFB3F3DB5A80CAA29857A37E44ECD55CC206FE04294754760EFF5058FB646
A08E30993C9955D627755EDCEBE41A6528A4B748B1E12462EA7D38726F2A1891
B4E73762EC8B2E9444045019BECF2A41D9B64C69A8A8FE60F32CD9B34EBFE7BE
5BD2A76368D95591EF5654DFD1E105713579240DF39A7689AF4486E4F53464A2
FF483A216FF8A5639374DE717A1D985FB361C752DD7A91A34A13FAB8F2B2F413
CDC0E522F548594B139AB587558FA84352CAF4101D6D375754F1379A574C12CE
788F1282A47D2DB72E81E11CA7953219636DD7F1B78D3C62F09DB17818A5F1AD
15C37D3EB3C32BAC5DA1F237DBE7E9E01F3713A969BB9DFE862B2AD691EDD3BA
865B757E8A132763F637266B57E210657C689498EC484577AC6B2EE3FF223DB9
2A482534A58D7FC14E08D8164C2433F80AA1938F035390D23EB490F783D35B2C
35689BCD9E61D07D3B206E57818D664401D738F087EC0626592E204E8181913E
BD7358E4805A9319488AC80CE3BB4B7928057EF93827AE32EA5825B6005F1BB2
4CF46B140AE0E835CDEBB0DD6BD4A0C50EBF6D01928FCE1827E18DB89481DE9B
88D5479B72012DAA475A156096793EF2CFE2DF50FBB44FF8C272FC1493F1A99D
DB2E1FFE7A65842B6BCB026EE9EEA1CBCD4AA143C9D5F48BC15D9DD07E4FDBD3
E17315E1E0A224FADE62569408F6ED842CA3E9BDA74E8F1B149070025A12FCDE
30C46E8B9EB903AF587DA259EB242550C98D109E7D57E0470978CBF4A617D88D
5C72E5784FF0331595E6D1DCF5BC961BAC80FDBA42A1689249EA85AEEFF098FB
550DF3DAFEF395961CF1DB6CDBA7B4D72BB47256160E5098530FF461F2EE6440
DFB7B4DA9F988EE9882ECBD0F3215432B01D84A8D9CB094341CBEBFA5F367881
6383F854EDD2D643142F337CCE91F611F61ABE56176CAFE0219E41C829CF2583
593E3E10DE25AE1908F86723079DD6AA15B6DD86726F1107016FD88A03A679E3
39315670AB4E3C9DFF0D2BB80CB291F8E334678484A169E88B91BDCF0E009CC3
8FCBE921D7D2D3D877B0447941C23B35060219D48D74707A3FE0220354426488
C60CE48169486E3D53F816E6F8A47E0D23D5EC92B65FE86B29BE8D91BF99EE5B
EBDAB792489E6A6A440C2E9059B6B8952E497CA1C0A970635D230977DF7FDE6E
807B2DDAF363FFB8E7BC3380A9A5F46B3C5F9B00D3B155423D6417E406E44F6B
DC0388028087AA0334D2D2192505B333D281498766CB4FB9A4D6BDB195AA3DB5
829531FB2A32A4C0367F3CDAADB9A370228BDD7615A1E3D1CB295CAD0B414672
9585ADF8F6234070D43362D75187F4EB28D6D015D29FD90A6F093740BD357EBB
E03E341B7944F2AF42E0E7C715D35554FF558D5F9247377A6FEC7AE093E09AA6
A0A57A68190EDD31D51F0886AB02751CF38CF8821C8D397533D8E873C34D60CD
4C0217C81B1EF0FCC27DFE0ABCEA24D63DBF700211FAA3B2D4B1CD759E02FB9D
9E74F41B61FFDFCC388B6809813EAF27D51349DE00E3FFB283B1F17EF146171E
BE69B19DECBD09D239CB562718A47A2340E21AE064E84D3ED8950B75AF0B6BED
FCF429BEAF8B3559A6C0538BF131570291FCAC3F3D0184495B7A9DBBE7CC9E48
088356FA742BF646D99A2170D2A1039AE3C560A2AF9E154378D7DBE534309592
C67ED954E6FFE7F8CDCCA85F868B43732B80B7A16D48B423AA62E60FD2770A85
F47380172E80DD2D3154E11A6F478489A2DF218FA9F31F73097E42DD1FC4ADB2
B2E2C1365C1F284515BF29E6AA27D60D14AE4D6CE23E432C610497D442E859E3
F9B037A7CF5B0F58B4C250F283D739C2D2D12DC6CD0DD72D31E4D683FC1DCADA
8C9F90CBA770F6B6A655DCBFB9B433EC0000644D679B9F17FFED44F44192525D
19AC510C8DABFF32610EC4A9784201EE843B9F121687BF538CBBDC9E20AE49D3
FE7B47F0B4C5BE36297E9DA5DB6CB55F12CDBADC4547911BFA0D2BC589186D24
D5FBE88965B862DEAA105FCD48375C11A3207B5A381FF8E1C1643AB550DA83C4
950EC394D6BE34C0EDE086210A850F5323498F612FA4034A7A28D3181D34D909
D69FD726145CEBFE95F66C23AD873D28401A00D5A0EE526AA4E1314595E994D3
1E1B3C51AFAAD2667CAD12722A8747898C880EF4B87AFE4C6EDDF27885CEBF77
054E0F3016F8A17574CDF748783102A4F0C97BC590864BF6D6843329B909D174
5EA257A5942435388ADD4BDCA1CB5BE227BAC4EF115AB6116957DA97DDFA62CF
9AC0CDB415BB8DDBF3A89D699C1FA84E704B02BC85D61ADA5A1A477763160F3F
2AF7CD40352982F402E135F41F3D4B01AD98EC8C4702F89F660AD38ABB9AE811
E6C73E3DFD1F4DB0838500B284B3CA2F0D601802F984D0565C0101F69BCDBB0B
03AEC4A4A1155CD932A5D27518EC1912CFE1B27C1D4067EA705606D6F3B9495A
3C9A4C4D322ECD2C24DC939653E9F18BCE96CE80FCF527A65BED725695803EE8
49EE347799F48F56FFDD996F15DF8090C8394A08CA0C52B6AB83C52D6FF9DA76
688D87A1CD86B69CDBCE05F0733AF96E3A49D0FCFDAF94729DE9FEDEFD67C658
B78321BDB105C07E1863F122567C47F8A5C693FAC20B264100BC66B827CCEE4F
BEE695BF19AB9FB64DBBEC5AF73DE9220CC99C07C87094463346DB20724A6E0E
F8F6C0A68E17AF5B622B2E5CC80FFAA3F81A0168B2A1FFF26E9545B02E463CD4
BDC297B8E1C0C31ECBA9B231B1985C61FCBC32DF5AEA237767FF5033DBEA582F
8B401381B9B86AB1E1B7E0C048E105F944E187A0B1D8A253BDAC2DA7CF0F0FA8
B55B63285DC739DD4CF056BCAB3479392A7721C00DF0B51D5E0EC0230D40D430
6CE9889E081505E1199ACF7403BAE90006EB0C0F6C0529533EDE61D278CEE651
C68CEB762AD79DC3F0AF2DAEE4A3A26DBBACA9F916A4E6E225FD7B72961F9AC8
085D7607A1AEF53253549A5BD51E4780A1915DE625D41D2B5EE0C3F04E804279
688CB06DF0CE5531024B5C34CDE1801331D75690F9BFF3719EB8BB89E5DC335C
E52E2DF1657819A54FF492319B81141CF9FA0509F366AB4DD498B99F76465E00
2618C2840611347402CDCB0F742B34E25118107673593EC6073B42527A259D1B
1C6783CD2B9D46C7B5F2554722439B49811E89B5CEF0E2DA4C842ACF7F41C467
BBBFC4E36F50E0788FF62C1E0E08172728FB09E08364E51A1017DB919CEAB585
B907BB47E6B700F7BC149A0DBF2E3CAE54D8964596F1557D94516C11DB65D76E
E728F4926999D6AB0DAD0A8BE8821D7D5185B74C47CFFA23A3FF1C0328F6DF8A
7BC7A93C61B8AE6C2E09AB099F53FBF47406DAA4AD9B62E38C3C199B1D033DBD
C2C9AEA2C3B81BAE28F815A26AB905E41E02987AD13A0209A2CCCBACDAD67D5B
5A5D82DBF552996768AF7FA64B863164AA90287EF4B50BA78292EC4A87C2AFD1
9F1F2B77AECBBC3CE77CF0F04476C42C0BCE3308F1E5DF5343790F3E7E67DD4F
E258C4D983DD924FF553E5B12C707C05D2FCB118513EDE8B5778C164824B6E3E
3C3EE78F1328388F3DB5478AB9053BBD168329D25D0CA21463890C2AE1A7D757
A2002401332EF0F8AE88AD09BF0499AD922A9DC584A5AF2B9545E0C2E298734B
97CBD1B92C1D808625A19442DCCB8A5AAF376EA3FE205165E77B18AC02932D84
F92D170F75CCB418284452650AC9F5919EAABDAA73D54689812279C95FB7A4F7
E840DD53DB50B7B7F67032023DFC1D7D4C4F5F52272CFA6DCA3CE885CE6D3F20
5E03953BA2527059C124573E0AEE9B33CD2C6CE81E95846C8318E58A63F93296
DCF1FD4154D2B8860BED777F889A52B2A202A734A62353C6E55908B149EBC1EB
B02C33433B58B67B9E359039CD693DBE120E32DC6B3FD9BAB56FC59FAC25D5CE
0654C12ED3C5749BBDE7A4FD54E9D13F17FF37FB5BEF0784B30392EA70AEF0FF
259D29472869DAC6E8EC497B28CF1A832F8D460678FEF6BE39286D9C9C9EA635
10F1C024FA4FB51D5A950652B335D4D08037BECD74C5BF01161D6D96B8C0B4B0
22FA0CD830D1B73CB04C0C2598B77600BF060255ED9F84047A51108996C8E5F1
72ACE0B317317C47663CF5C7DBF7229448E1CE03AB6FF6C118CAD21FA2D41BC3
B59F961DACB348FCD4C3B165C45EDEFACBACF69FFDB0952BE3B166C20BE705E9
DAE32D3C3D1BA73582DAD4BDE5254C4660274462334AF71A1E878815B9A1B9F0
09788DA6C2B8989D50AAB6F6AF2CCFA97B283AF9F0C25D065E868875B28DEC0C
BECB0A51024CB96CCDDBC8A30EFB906A50A09AFF80614C94CF02C79697965269
297D89580FF0D9E81B463054E122389437002BF94101A9F7B88E15ADC59103F6
A71B686E1ABF47D5BD6C8E0E36344E84B603738B2776D1C11C1CA08BC250CBBD
32154EE6A0693F75308FF5FF4E093940CDC2A9A56120FABA9316F748E8F83965
521EAF4D57B5A020B9269728234F68897EC3619E9B66ADA85E254EC14837735C
DCDFE410AC74E817888DCB8EAFCDDAB97230F1F85044E957BE1F066B2A03F03F
5CDC3DB65636006B18AA8635BA775914C97D49BCC12D19A68DA2DEF34687E49F
2E2C970B062246DAD57F32433A4ABE51371273DA0464EC1C3698772A1ED832CC
A1254BF2AE6BADB1E737FC1611CE473FDDDCAD5EA63FA2FA0818021B07A5FEFD
ADB2B52412119358A648DA8AB65F83C2C2DA8C44148B8942886A430E181E22FC
3B705E5CA66FC398280579436E02F82D7BC7B2FEAFC4A75227B2D6DDAE4A832F
D0A8AF1D0401F06C442735C4A7C50F7E2D0A5F6F331B1B76B321E1FA950FB751
F9EDF32A146A92B5ED12F718B5D95117D4303EBE3272D35C4D32534685FAFB8E
2FA3BF54BEF081A0222207E864C7F39773638E3BD2FDDA16CC84DA00FF11BFB2
05B9A42EC1F50B435E4D44E14E25A8A57C006EFA4A697DFD000706D74F17037C
DFA5ADBE081442218B4719E6587FBB3C5D9572752596C5ED5967F6DE1850A7EC
0A3D8CB2892E0F560E89FC98710C3CF9678CC52EAA41BDD09D0BDB7AE41135CC
85EF1ACFCFA1FC4ADF8CAF6613FF12B1D9AAB05FF1450424CACAD0808FA073FE
1026E299D834A24F34F61602ECF3FCD179B71EC6C182D05B0506C15F72087490
2B6EB87D3A7155DEACA8B936CD0491B1252A876D892DF04F833150ABABFA938E
E5388ED8313F99D8959669EC1DC36B37F3EF31DB569365C2BC61DE554FC2C2DC
6EAA6FA8570126C1677887CD79AA1D070B081A19D29EF602A9914E755C6870D2
168A99303C380AA53722C7FB23E035D4468AE5C730B89A6D96D15353E18A0A16
7255987683E8B6F4F9720D41F694A973EF85CFBFD6208E852BA4A2A57A070FC2
81B86B7AE8680D866E65AC2488CBD7CAF142AEE29A376D2B8B7541B053534CEC
12FBBD1861455FEDB2FCE6D8BBC1EB884FD7E503B9F05F9EF206520D6F9C1CB5
7CBC6FBF2402581F6F84BE8AAA3CE7A906C63EFC4CE9682D4DFF582F813D5239
2995D75B70F69B13BBA1A523114C0BCC3E3E57052444394E46201B34B583A55D
565D30D5A82586B006A01A109A8C2472A167232A5C3E69EC1BD2A55E45999C16
24E9ED303EB0CF034D3EA181090E934BA02E05B02D4C6603B5D62633D4DC6CE9
1B83AFF24BE3B17DEA84B0633460821B88857BC62232D4114839B9748365EE6D
09B687A7BAA7F4034FF97C512C2C654F7991B4EE987E91F6CE46BCB44E65EE64
8E62835F727D9F0CF981018C0F905E966AE52907BA7ACD485CE93DEBDEC27506
935851FF733C84E7EE6FDD07BC81CD61FD50F2B7D16DDEC01A481790C733C545
EA79BC7A85A0F914AD0DFD4011244E80C175BC99140175E35C32862141083A67
AE2001F137F7BBC1C5B6821791EF453ED09D98769F099C8FF9B12A99BB88B018
D3A3F972F4B6269854BB3F271F2DD86AAD6EBD2BC01221F7E794E09F93B65E32
8BC84527AC936AB56072F0A343B79E1A3E84C97FA6FD2DE5B292D97D0335BFC6
90BCDC1C26A61B12A41EC3DFB3D0E6ED4EA7270F783D6D43AC0065C00580646E
FDA7DA8A66AB020E97AAFD73BC85B6D0065650F8A3E9827F6E4730B1F9745DA9
590BA94CE6D34118E8B0EE5F66E30EBC30C6BD031235C8C2A656A6F43DFE3ADE
3CD408714E8E7C016ED719D6A4D045FA24AD86E5EAE1F6647DE3115C32E72A11
7ECE7782B2D44AC5ADEA96F837A3A2F5C501AF422A313B47DCEC7A019705E601
FEC85EA632F544082BBDC9B77C55B4D4E68066D9BBEE870B33B226AF22FDBB02
30720CF27336E00D98D131A421C11D46982BC42D9DC23475C397D456E05B2BE7
BA7CF0349A5D4010FC280EAB2918453FFA69568CC5E3FADFC7F87B67EAA2F8B9
39D294CCE1D03D639D0BBE7CE12569B0C14246BD12C9EA5124B66A962B863E62
94A2271CD5DD36DC65176AB9B8ECF42FA5581FF50B55C920430B9B73AF085CD3
08DE598078BF655B03871297722398093CBD222B559CF79371B1A4373E7164BF
B088D157388E7C54C8C90CEEE5A3E69465E58CF738B28A15553FEE84B6129077
0E74E925C781082148B56A52C00D2B62915AD608946ED43BC04E93424BC4F624
E8A2423C3D08DED3FA54198B94373C33D1211328BCDB4960B62DEE610498DAAF
4782CEBDEC096937CD291CFAACD7F664D76D3347216D84228D0313BE7D3D4B65
36C7A01797A0B9B985FBF62683B8E104DD53FB2EF860800B6771665196B5412B
7D3FCC641CCCF5D69E701B20E6F18A7FCBEF07B3B447F7AD41380540B693A873
A285371846079E729515FF910E63CD9EFB10D7A7A77C415D05122439FC3BDD16
A69CE12764541B4A010CABC53339E8CDF172B872311C783A8F2BEC4B762531D6
C664F8CC76003C390E4C666D8156FAA3F1F7C5A82DF0EAFE9AD88A24905F7DB7
DC8097C0D9B0FFE67216CBEAEFA6A8006F34EF3C0EFFE15D0917BB65CFA1F648
EBC576E16E367D09E7F61B5646999717D017E859DB16E97039C5B076F16A3A64
11A3D4BF6AB784505F717D99EB8C40288B69A9E79012C9C5064D6804B4B23E19
1FBF40FA8A4A7B8320210619F4FA4CB8003758487BD6C7AFF197A1A15D808C23
C2CCEFC47F315FDCDDFF9ABF2AC2EFE10E89D05F1F9FA984A86171681AE20F7F
FA71189DF6625BF822E253DA79C0C9DEC93516C641E07B5421CCAA8FED23BF08
E4AAA06C2B4D0CA7D89ED2F81B910DD525B0F7E0E5FD35EDB871E8F1802F1E7C
6584E9A4E88D2F7FDF9F26AC92285B3B181CAF04E8DB2C19757A43E9862B429B
1AFB33D68B3F2DBA2A6432B17AF12D49EC4CF15843A5229308D09F792423F48C
9DE95A4E58E164715ADFFF5B8A95433034BF1894AB2E904B36287A468E7D3B3C
9B12E4CA617B9E513973DF94CC2D37694850ECE54C80D2CE7E3A872EF579A535
CE2816498D130303EAC1F42151470124D0D49C3B5691C1AC279E11EBA4285BA6
0DAB3979FA83A3C3E0FE565DDBD45AE467A782725D8B3E30CF07907855C4E828
D61D7937837DF89B62C6E21AB81DFA802F2193611DF6016684158051E5C570C0
040477F7C982863019DFED677569C646EA23E316AEE1EC29BA8D4A7B9142BF98
B463135BF116DD8A23ADDC2B14D7BE67D0A8857936027D521F0DE7BAA4B6559E
D4A11721F93A9BFAB012A835E2A23D52DD29A0757882B1F0FD65BC0B3867DDA4
56E1B85458CBF0DDB3DA821FD33EE749DE361BDE4517D2F4DE84F7193A22C569
416F518B0DC2544728970F7C91F092B209AE35C91CA49AE879DDEB6995E0C9CC
EF433A7B79F436F6198C45EBA3F826EAAB82B2088A09C19768163886800B6CF7
0BDEC4EA269D4F86AE0CFD6D10B4A8058017BA6164B9C394D2BE949439027BA8
421233DE6FCF1820604068B2844CF2550E4A80236EB3D364B6A933234276082E
17993B297043B2F75674AA08FE94232EB2DD1E55E7A513EFB42533CC935CFEAC
4A2899F040194F3B24A448FD463A151731CA30351100EDD26BF187FC0A606520
E44D3439BB8999E09B53EC91C33216D1A001037918C9F3EB2C14BAF1341B6963
796D41E197EE9A2206BAFBC435DBF4E63A46EF371184079068484913B4C36C54
C4A83AFDA49158519526B5ABE7CEA89DE0C6E6C80B24CBF5524CCF4D7B6DB8C4
7F05A7BF18A42ACAE7F728F38451A033515C3D4FCE98DB7838EB6463D26B5B81
0F89FC498C5E387B4198ED179BFC6902ABB4A3BE2747DD6217E8A5F0B2ED9916
0E3E7539B857C6625B1AB3426B888F236D57DB2F5A50B37FDF45A0D0E01C25CA
3751047547D99EED11AEFDF7FE421A91A5F70B7ADBB35E0F1641F668817E6448
1B4479C73D66D7E1FB0FEBC593B844B77C34094AE4C5EC0870F32C649138D5A5
B0ADE64866A89E85A2EFC3667C2D73E4C3D513221DBA36B22AF8F9079226939A
DBD0EC4DA86291F975CD8ADBE47F6AB1114C7E315ED2AAE351AA5C1A5E25A3C8
4A4947C47C9FD655E0C68C621B1B388F67369B5C291E388C97F08F5B4CAB9012
AD41F22FC9D221398B893E7E5911D8BCC56F8A2A99AF870CA63AF5062E2FCE17
0211469F75EC2EC5CF4A601F06E8F036FF6CECF6FC9521C75DC8563325A53764
FC3A023BD64019F5C86BBF4DC6C0A9F08FCC3727D2412AB1C54CCFAF2712CA65
77A5548AE1EA71F6E0CB7D06972CF268D86A801BCFE9AF58090CC13DA30697FB
05CC8706AF26D43F2D092368CFC4E14862D0B702E894290BA79E2DF0841A953F
1BEF143AEF548975B84E5FF543815AD8ED148F6CC0DAF0DB47916739F48E2433
1F5A32DD3BEA8687392D22FFE55A492D7D8C9052B7E802445AA7F372F527344A
B7B4970CE000883EFA3F700C008F4FFA8D3075639729496F347B554F7D002571
9F2155DB536C3F1F6ABBDED54A8059EA13104F26F68A93B03AAD46E6D45EA456
7FE859EBDFE762780C9DBAB8682DC2477EFB73DB13B45BD482CDDFA1C4374AF5
65FD408DEAEB5EAB6FE08372EF4D4C1E27E7E98BF0FD08BE34848FEA0015CC28
BA9335A593116461923110BAC758B30905B56CCEDE37F37167FBCFA2CC9AF124
75DC74CDEFD3E5D7C8FE54C9A6EC3722200E422953C06DE3E5417D1B42DD280C
1FF9A88656A37EC8F5AC91B076B37F2088FA9735C944C04B919B7BB6A60DD4DD
FB93B9F89FEDCA6F80E6E4D69A0DFF99D86DC88F11FD5B628B7F0C0E7F16A7D1
761BD80997CAC753596D23D819D8C3CCBFC37A265AF506B75CB8F498914E17C8
8A931009B10C8A5BED21A826EC20AC4384A8CFF8CECF07A594464137048A9DE5
4FE6BB1E52CA9539528886456D32AECFDD9101F9B45313F4445E16845B7BD490
FDBE2C69543F130F9658D787D463ABEE52C0800761A6A974598AF262BDEE5600
6D665A1FFCFA9D905201D0F89EFFAEC286D30CEF3A713212FFFD21C3D47D893F
2AFEDC6CB3B1561915FAEC2921BAFBD8688016C182138D141B14BA3924617565
D1283309163B5B3D0F14010416CAC9A18EB97969E7A4EE01F5C07DBE25D8F12A
A88362C0605EF3A88DF111003E63EA4E8D843817DAFD6E9D833942F5673AA3AA
DCE73F5F0181BD8456E553AF718E0CF6AC6F13D41F45D03D5D37D781421DC5CC
BC42782E8F4F5E0F65CB3F02EA2E6627C292001D28A40628F89D0C92DE61444D
0A19E8CBD37EA99E61CCCBCC0B39312F234D4D06561F565E8E1B01066BA36B19
BFD653C79335536CB0CE460A730166537FB56CCB1CF8B6FBFF999F76BB2CD11A
37091E4FB109F105F5C3579801427AE8E52C70131A55B77E3CB0CA12010DEB5B
132FD4C5CB8256381DC0694534AADB7CA1C907C3EAD979BA7BFDEC40BD0B2C31
C85BD020DE6C908984CA78EA9E886437CCCBD4B6C61551510294DCFD5381FD37
1DFB14A03542DB952FAFBDD61500572AA14EE3DCE693612300458A151C340C55
3705BAA2482F2E48AA56435ABB8D0111E1DD60CAB5490C1F81AF3098FFD15F49
3684CCE86A55DB7449333F73EBC1D95C470A69CA2F96D13EDFF06157BA188657
5C8115796C7219F735AF8814824BFAC4844A59841C7C7682105E23A374BCA918
85E746732E232F5FF0E1568319130C8369A3DD42E22F5851D76FA91195B48B85
68FD9FD11EDC99325102F07E88656F3DE4DAB83C34AC97C66C21F4CE4812FA0F
007C12820CD0F29E04FAEE6653798941795B253A86C73164C0B2999D2D4C55C2
F8798C93FA35EBF0D886D408414EE091169DDEAB54453E6A4C7B7F667C14A284
047744C14EDA38BBADFAE90AAC299B0A3174D32B6A82C3B240CC99E5EC9406AD
9BDD2B9ACFC3FF359CC8667D7887C9BDB503D1E248AFAEC0CDF1C92EECD88D1E
BBBB28EB9B7B9502C1F0568F788514EB73AA9958C9B31F35AD06648D5BE6EB93
B9946A386CDFE1004711F8AED603AB2DBCD015EC7380AAEA0E342F54E13C3F48
84B9E2155E70BCF5C758071838AF50C44016FE62E8E24599929A885A0A4AA26F
19F8348EC62189B42297868AD555C394A1C2B1A9AFA9C9DE44288671535D5FE7
CE88C9B14B6303D845B1296E47A30FC0E49E14F27AB5493EDC2ECA0B7A027A91
E51BE83C1E887182873FD7866F5F8415EBE92E51E7FF064FCBAC614CB7465B02
2FAA7CD29DA0F0624AE6119641B026FAD9FCD676BB03B407AAF88101D7E9CC89
CBAD30CA9892A95987EF3F0C71E90DF4B27EEF84A36EBB74CE5C725EFC9B336E
15E8EE3C004041C4EAD85D6E7D1FD1EFED9F714165D136FC4F83699DEB28DC00
08736A49D1FDC73CE33C17FCFA759A94FD7AC95E93FC68EC79AF7D8E3793AF34
91CC68D7712A43140E2D2DE373E3F28B2E4A18B37E256379A863677DCE24A14B
FC52E9210C8A69223A9EDC6A255BE6483A3AA13B3ECEE040DA280902D3F42501
DCD09A2A4F2CB04C74B200EE87D92C452F79B85262A39B4AAF1EF7B066D04982
2B405C667ED8305E2C63E8382997474241F59317F44A60ED73DAB72A2F1AC1DB
DC8788AA8FA5A38A2A7BED7CE91AB3830B6820671811DB24ED5270A2E632D36C
86B97D084A83A5A0AA4B9C10A4284D49E3DB83DFA942EDBB45A07A97A220217A
25720BDDC2198D16044BBA796678C9ED23D6194A5CE79417FC1571D8D7F49E99
A0F145F0655236CE00D9AAFCBD56F8E35CD120C05FEF8BF68D616615D01C75B7
972146BBC03F11A4730AC831DD7CF66DC2882CDF9610932E45FE110F0B3DE858
2E22D221142CB330B758336AD62DAD8178B063615D5CAB61566957AE18AE6ED6
C800EC8325AD8753AA81DF891DF490B9ADB6AE50712D0840346547B06CCD2365
43FD33F885D1054A54F70EDB1BC66DBC4F4FE2EB110DEBD28BCCD7B42E245579
D29D18D7BCEC0610CC87C7F57B650581E5A7AB8D40EEE7FA0C9557FEFCE7244F
30992C63CFEEEC12351CDBDBA681A50CAB32A51314A8042FFFFAB9F87D081E0A
708692CA657C5DDE3331323D5C9A7734BD30D6424C17BB0AC7A9DBCD4F4BF670
E36429A662730CA3AF44EAAC3063B0E652019DA8C9A7838F8B09006C47A485B0
62196657C6B0CA8422DC11C6CEAAD6D0D1A30D35C693B9AD261C3CF603FCB876
51205D6CF39BE3AB3322A727A6A32D5E34FA090973057AADC1CE933DE6B61503
08D14DB5529E564854F4104FD3280C18713E430EAAFBF527FB93791CC72AE67C
DF24699A63E8BEE9CD4C687B2880071B26EB400E155A92A4F88A81371947760F
1916817FF8ED4A4D2A8A6162B4DFC3D2A17F3DF42D950DB053BB719CE9B2D2F7
5106CCA90E75B2437FFA26C658B30905B56CCEDE37F37167FBCFA2CC9AF0736F
AFA57DB618B457D710C2B85CC5551D902C6D0B78C6A874353DFCB8FFCAC308D8
D424862204E068DF816983D1F2F5072160BF89FE798B0A5928F7CE466BBDDA81
86563C7F08DF8C5A32E126DE6ED927D9F96549F4442D0D5BE935BB34211CC88F
0595D6BE89E46F5232B759A4516C6C2BC8BE0557DFCBE08D7F586D9484EFF2E0
90F2B7B8349B09088D655A8ADAFA9928106AEE7655662B6F1658F14B03035344
5D7F23FA6CC431D0EF8DA2C258BB069706D9CFD01B8644456D6323286CEB879B
3BDB928141D3E546D32FB88965B8D22AB04A724DED273BA060E797C1BB765ABD
78F890210A54F7FEED45331ADA0E610827DAF898C587439E81D62EC74FDFC7CA
0F6212F581F6AA50A54D12B558A729B1897F3C0B2110B2AD83F435FB4F65E8BA
EE2B0A2DD089DAE985DE052358454F10A6169F216684A46F90DCBAE8DB96C15B
1848292A21D7082423D46EB801F8502449684418493C3E04D758B99270309E2D
43856E96D81D0F4AD9737F291F0CD4354C7945CEDB1AAEF299CE6E4DA275D8C6
F885EA2752640F64F18D7164BC597A28D5E06E1A1833C74A1F00D19B0778E209
CA3023378B9EB6CA3763F99C29C798D74142C53041D950EB67D443394EE13FD6
92442AA9A3BC8AAE73B993A7D859AC1BA4016CC508C89F64FD88EBB59D3EC343
C5C40112DF4690D60640977193CF278E0A59282E4D69A45273B491FD52EFC98B
74F3FAC859EBF7D280D4CEBA3BEE9409F87C520180CB467537F2D7359D881F7A
FCCFDE78C4D950AC4F5A16E348ACDAFB45A2F385A84BB64B27DA576A7BD8350C
28609292C2A484DAD8F20A89703DE9CA97EF19DA6FE918E70D295CE5808EB4EF
66BBC42389F67D87EFC1E935772C9474A0B08B3C2A698E4F95DAE539B5E403A0
771421FBB9075FA573546B97FE15F640911E342A125982936B54E14841AFAA79
DDBAA9230C3B2CD654ACA8A513F352B24E7A9B88ACC23ADF1096031DF2400A05
4E10E28F8BAAAA3CD6A9E282359D114C1015DECDE764D6A2B3B5DF5C48B1CDC2
BC5E00D557B3DD02C287E5F13AC40D33519DB0E5C0659928330F5052B43E42A8
29093C1C46C1986FE443D34539FB5B57A8478369AAD2ACABF49D58A04D880971
F6960FDE56CE9AD3AB8669A69121B16C33CD949DC6E4C61079A27A7A281D007F
1F6EE3CB17E0FDB167D05506A9695A9A58F0CF991AF88820F1237A88AD72D895
3E25AD52C8E23E82878404BE7530ED3C037A517E7F4D92C7AB797F07E98442B3
B12A017B1A07A9612E0AE4FA8ABB03A2F3CEC757B0FD0A10AC1127B4E7D18ADD
EF5FFE63A9BD4649193197DD6640CAA6F371095A260DE5DC01B8DEAB38B8841D
D7E3548148CF0E31AB988FF2A7D18056EDF632BEBE183091AE4127B420B21393
859EEDC1B145E23293CE6EAE85CBA7D0FCFEE888CC7FFDEFCBD573725716BD88
A1AB5E0FD14B7DFB4AE346574ACBE4333E0446D6199D58F0CF991AF88820F123
7A88AD72D8953E25AD52C991481A2F39AE8C789A6339F7ECBA8E6803ED6131FD
DA3EF7AA758C907A1357256886EF575A53E8C22402CA313F30CE2B5AAE9C8622
C1EE49F007589A2A08193C1650E33F3DEB39FBB1551291A2088F1E33C530FD50
4D95C934345AE3EE266FE99692B0CD741F65C8A9F3EB03F1FE0D9A547E37C044
FE522EB804D730D19047FFD0E565FAB755DAB5D725143C6C5EC1AA6651D18A64
4CD56694BE7C79927D0DCBE45A1E7F863CD1438FEFC7DFB11912750B989AB266
2AB55A70BE52BF2BA43ECF59AA38B2FEEB448B4CA0C8726ADC87E473C7409896
677E02D47DB24D4967158F415484BF9D6A2AF289BEA4A518CD5875BF2C0CCF80
8D15B325EBED86B1CB958B87B237C1C5D37A94279D5EA776EE24A4CBB9A0A692
FF4D510A8181C171816540E61E5A2E2947957AA9A7E42EF361078A9CB36CDFE0
F56146DB8A861E46E024C8AAC40422A4362A89E46F7DC91B557A4C8683B52955
996E471017A9B4017D9A660E62AEC1DAB9EAB21669397C33CD0145CBCA745791
F2A7410DDABB73F0767894474CD379525736974DCC85E7CAB9173DEBE09BB23B
6885F69572FFAE0685C7C24E70ACB8564454277C41C28075ADB399B294A1C4E6
CBB8D8C619AF06231904D16DBC674A1B1B37145BB0A4495F535D726FD1708367
3CC00C8D3B701A6F2D32A270159C138B2409D3A79E946E56800420D098A4A325
9B2FBC52122E7974849DD398C044CB32FCD12157FFF7AF3CDADCE2FE6D5B7E56
2DBDCF13F0603F488850986EE2EB8262B9F8853139CA74FD0FAB68FC7F7E8DAE
79EC78DCD296F5F684F26A58242F51E7321386F8397E01A0FFB1DB0040AC5876
B209A2D6857D7C042A560349F503A885E1179E5D7D635A141E3CEEA98B6BB520
45E2C3FDBDDE829EE2CC62923F5C997211E5081EBEEB85F83A2FA271BEA80089
069359381FA4B6C81B3DF9397F62FAFDBE73F8F6F99550EAB6973C075EA14B30
5AAF7A1E4E3F32A4B1E22FEFF347BD3FDAC64590A3E6A8F28F41176C4A8719DA
2C75A3CE10FCC29EDBE9205C3838469BF2B1CFD04E1F92DCBA540C6A44B3025D
A828E2DA008138EB66FB67C22587FC14898051C4FDE207F01E1FE3C5FD3F2592
5955F36A3BFF3454FF7B226C0F001B8036DE6E4E027CF555018F191F3C923F54
4E8CA05E5A2F53CAE5E580CDF8E9B9EACFAE3A6CECAA632EBD3B5D42B3CAB2A1
DD50A23E443D8A30572DD2A12550B2D61EE251FF608E353C2086E551C702FA96
8B7266DC14C3A17C02442D50A1C87CE295F63B62872BCB100D4C990526BC50F7
AB86A1AC1F7D05D239E679ABF94614CD559F65B1728DFE296E81E37C56988B25
3789D16A1E871B9BB279A4E8F93C796E4644E66664FA5DBB4BC016D836AADAE5
65464C14D4999488D6400D75DC7E0F4D0D4DA2D54A933E153CAF3B0D753BE919
95CD7EB3BDE86BD0251C54631F388B1327B678418D80A8323E37A3F19B6FD33E
278174AA023F20A1906765578F78B0C5AE7AA094D0DF4EED29342DC0DD0240C4
5E91D9748EFE8F88EC97AB029C10E81AE9ED44E12A82F688872033DF71131FFF
47E453BD7AA964B445E0795717809024321B3849E1959EBF03F5FA2D3E37E8FC
BC860588B78BCDDBA21E9972A0116178F6EB96BB55BF51575E3D86503FF86B96
518666468798027B38FB5441C9453DB5113756B33D388563FEDB8468CA1A8CAA
5BB3F59FBC5A6331B438682E4EC7F21840D90D19A9C6175486F899ABDD8167C8
03A5534DD5068F75090D81658CACB27F5BC3A2970279F3D4B72B248F4F58B1A8
4908F590334F81BCDAC5C5D7CC0F735253B7B1D2D7E875BB278206DF7987E773
F5FE52AF35F13B91250CC5C7A59B86DDE788758EDB859354F199F2822361E3E4
443489FDB00A1F9F47838456240CEA1BDA9041DF5CC87CF95FFC56CA87A3B7A4
162191E17CB23C4A80E440BC429146F0D9DE2A36056CE4FC5AE521EBC6FE5460
FFCB74C13AA5078AFE6A306D7C5AF14FA6AFBED4F86F8B7A33FC9FFE0ADABD17
9585160FEB74A9F436700B206DB3A94F8737B415A02075E903630301A0FC9381
5CB4580CD67041BC9651949E860764A3AEDC7ABCD09BB640A44DBB37D35F6FED
3F429D83CD9A7BBD766EC81873BEDD2DBD12CBDD7E282A5FE1B7CB03AD76B0C7
4EB5165FAF23CFB7923E942CB55CBDD122FF84FB24913562F3ABCD8DBDE6F225
0163D7CCA83C4A2010D694B95D1B242324FFF7EB56AF63080868B4374A6E59F2
83841B723FBC8C62724E6A7662499EA33446E24ADC8DC8E62C2A381B29E8A749
6B6D865F268247EF26E5874A1B675740A0FE00680F799E5DCEC610A255C7F812
D396DB0890E5BE06179263564AE3BE782ED0CBF24A189A1DAD04422F60B7B5C9
00A47767E79440CA503CE99A5A41EBC0FF0FCA55A07529D4054282A46FB08FD0
F3114A136084475DFBCC3BD5A59EA88607CB79005C2D39423834AB527FB323E1
0B2B0F55E1D6D69A75F377FC3F937582A1A2F8CF76517B6516A64FD967909BBD
1AADBAF01B92DCCB8B920EBA45F18205001799653AA56116D5A8BBF4061F3B87
B4B9FBC897F01A045A7EE436FF1BD253F0CCFA2BA8878DC9DB24262FC4CE8759
7833B7194FD9F3E4EAF47040F701D96982B232325389066FD2CCC72B80D77FBF
6F377E25D2EB680D2B4514894DD9F61CF8127CB486743468F814A915562388D2
5E0BBA4FCA8BC0A91867D9BB419BD88CBF1A9203675ACCC9743B487F6BF6B569
17454ADBB7CE1E21CD40F03B378CE2BCD324A7BDA4AF4AD4A3D4BFF97F174670
8710A7394078F7137A47D2475308815C5B5497FD090012360044745437D6F404
3C19F5648B1E7F22CDA288CFB86736BBB09EE9610DEEE7E00F0D0FE7D251F442
02AC648E195971090440C11EA9E5BAECA0D7B1F0BBDE4C21E3DC8C570D3C9531
7E68F5C8DEC1085654B67384E9491AEFA3C02DD7BB8C1F68F94C349A6E0AA4FD
00BF1D446F8D1A112381C5737BB5FFBD1ACAF29A8BDC2B4738D948A300FAC3F3
1F6218D2DB9CEA4707B58541BCD93B8C6E3C50C81AE12E05BB48D313B482D0E6
116091A111A8F3684EFAAD429271A448C5C6D7D0F4AD171AA62DF56DB3E949AF
2F6070AD22515D069E8E22DA8D397524E7ED081AA329D2AC1FF8238D77A536B3
786D7C440E9D4E9A5B2B808890A48128C54963EA99A84ACA28AC8F0B35C46F37
29555BDB3E788CB93EC264823E4DCE5C273EB7D8137FEC297D60FBA452AAAFBE
C02E1AED13B69D1CE03D435D01FFF15EC4CD2F0EC873ACBB49508AD831253656
5511343427CE4547D40ACDE5B067BDCF438470748F612396EECB16E27C8D1ED6
19F43D360D1073A853DAE9E33550ECDAF201BBABA48AFE8D2E95ED256B6C928B
FF8198A23AF5B79D15836CA528392368D68C28EDDEA1DEBCAE5245243F0194FC
8764B417B830DB22C965A918881F944FAB591CCA37ECEEA4AAF6FC7C3258FBA7
9E7AD34054EE5D224EB0E5364AC045CB1EA22C764E0B6B984498AB9405B87D81
EF33CF26EF4C13868D670F64C08A2D32955BC90EE29DEB3737F1A2764EBB0271
07BD29EC4A56E6A9A1C0963C42F5804346C126418F0954AE8028653375B93DAC
3D87C04C2961E747D7882E5A9A8EA08171D1D7E7171EF28CA37A2EB7E6A56BAC
B089EF1C905F0290425F4DD6C9009CE17556A7969AC5CE4460B61B7BBC282C8D
70561C03C059D07EC2435562589E57AC9227A708419D92CE176441856CE47EC1
9D53B072C61D7947C49168E23A66299E28CF21F21E5720FDF389CC0A4BA5C6C0
CE3925E7A355BD46A894D29B16E96DA7723C8E672F84A9CEBC53963A99A65E0F
8CE124E9EE19F2A24E9BA99D908C781E5B3208EBAFF2BBEBE0A9132417C0BCDA
20FFBA7CEDE58FED0AC5ACB93C124BDC00517044A473BA7577872288744F6A08
DB75FFB87CFE40FA33CF0EAA7E3364342304EED204314DE7520D56F0975806DD
143C1400BC920379A598DEA1DD7B31DEF3B83FB43B5395B12797A2F8510658B1
F6BCA93B92DB269BD944F8911540AF73159D056618C73F2A1ADFEA95E42616DB
1BCF89547C6513505DFB80E8755084CADDF505BCDECA12D6B290620E81879158
00329CF5DBD8C5090F061E47C788514E545F8E4565F7110CDAD330AA662E7D99
7AF5C184B5191DBBDC866A82595B94AFDE43E5858C0603BB5656C629BF8CC593
850792DA5C8A7A8E5CF8116FA3E083B72CEBC920E02EA4982650B1295352D84A
1B303BFD56623EBC21DB49D008F41FC702B0259EDE05B834EB53FE626F48DDB9
9834D0EC38CBBB42520482C1E1F1F08935D6339DA03C9D4EDCD06141EFE00F72
F4CC90048323C8A8335154E9F68376B7F639749A939D32FA1F1D5B4133DA7D05
A95E6AE93E9C43B5A33317EF0075595122F0A06887CEE87659B934090C0DBBD1
32D12919CC167CA4C2E6D6CCB881D8CDAC4D7F7660D263D11E99EBD0684C4BB6
E2145C2780FCE377883940FFFCBF4181A86F0AF196B2EA385238CF40E13CAB7E
71AF46AF39F05F44F13EE3CC5A7FBCDE46F1D9E6E73BD9E3F93D0990F28CE40C
5DE15C1C7E0BE0B77312E41C76777B2EF6EC79529F9D432CC3AFBA0E3B968764
4C0A6818024B96C26CA80FD99667CFECDE0597CB579BAF7F5DA4DA783228AAE1
6D058132947D474206873A7C7BBD667C2CC17C8C634B69C6558AE5CD2BD83866
BC2BB9D734D4C4C244F0B2EA9B316A57CFBE9A673770925C863AE79145BB1347
29866EA2AA1B83E42C575650FB9075D63476CDB2ABF14F1F8EB4FC14669A8943
B69467731F5E95C819423421782A2B6884904E0242D8C45888D4A0CF8A57B641
D883F4ECC1E2CAC88F6C495CF574E490BABFC6031ABBCBD5985E57C776B619B8
36524021701E2C43EBB1A1303E87203FCE7A2F1EFB677EAA306EC495B7C5CB80
DE7BC6AC8E3403D78F8ACC16D7901C0039DC3562E98A8981E6429E185569250E
F97687B110BD624E2BD31867230FC7E45EA8589B49C7AD974DFFD97C21A534C8
0FFD5F6635DE8E309B4C4AA189BDA14DEE21130D47ACB09DA29988D7348A4A5B
D75CA2A1890FF1FD17CA2943F1D42AF3DB863DA4988E814864D97A5B9EB2A56A
16334B2551CFC7F3985DAC58095F0685D780AD903EC4D8F60865A385B898B5B3
11B263480BC0B0703F1CCE744B1AE2D256842D9A01A315B2CE87FC594F88D5A9
292428B9368284519BDA91CAB1F79644CF5EBFFD6845168A4B044C2832924F86
F4921442B8FE7B163E24C8774BF2D0F797AF7B52AF7D61F5379B752EE6FC6CF9
E6364B775524B4BF109645481EB11AB69F7D94FF33EA328166E7C20D4FBF03E6
F4575F8130698A662CE3A302AA0539C8740B5C41C68C08ECEEAFCD88016EA367
E533FFBF8166DCF9EA96D5B3DAE2BF360C25A30DF623CC217FB9F420969B5D8D
FAD0E667B58C3CC40FD6C35338EC9EB2ECE2B1480D3134FE5A629B0E90DF2095
0F98F84DCA51D6C1804F6B3F5619E6702A5FE2DDD9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra un)
@start /Fa 188[969 969 969 969 14[969 969 48[{
 enclmmathex ReEncodeFont }6 1106.96 /LMMathExtension10-Regular
rf /Fb 183[773 733 595 690 772 671 710 705 65[{
 enclmmathit ReEncodeFont }8 885.568 /LMMathItalic8-Regular
rf /Fc 194[1012 2[361 650 650 650 1[650 650 650 650 650
650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }14 1328.35
/LMRoman12-Regular rf /Fd 184[869 5[830 13[553 553 3[307
46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fe 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Ff 175[640 9[614 70[{
 enclmec ReEncodeFont }2 885.568 /LMRoman8-Regular rf
/Fg 204[470 470 470 49[{ enclmrm ReEncodeFont }3 885.568
/LMRoman8-Regular rf /Fh 149[369 64[1328 7[1328 31[369
1033{ enclmmathsy ReEncodeFont }5 1328.35 /LMMathSymbols10-Regular
rf /Fi 133[604 634 739 21[553 683 16[838 7[1078 1[842
963 1080 931 988 975 5[361 59[{ enclmmathit ReEncodeFont }14
1328.35 /LMMathItalic12-Regular rf /Fj 3[723 5[650 17[650
105[578 2[939 686 723 506 513 506 686 723 650 723 1084
361 686 1[361 723 650 397 578 723 578 723 650 6[795 2[1336
975 2[723 1[1012 885 3[813 1011 1[469 1[1021 1[885 993
1[921 975 6[361 4[650 650 650 650 650 650 1[361 434 361
2[506 506 6[361 3[723 723 28[{ enclmec ReEncodeFont }55
1328.35 /LMRoman12-Regular rf /Fk 27[1046 110[1196 837
849 879 1136 1196 1076 1196 1793 598 1136 1[598 1196
1076 658 982 1196 956 1196 1046 10[1625 3[1605 1616 1470
1616 1682 2041 1[1685 1[801 1682 1691 1353 1412 2[1530
1625 9[1076 1076 1076 1076 1076 1076 1076 1076 1076 598
717 15[1196 29[{ enclmec ReEncodeFont }48 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fk(A)-60
b(G)718 b(3.2)f(-)h(1)f(Kr\344fte)f(-)i(O)-60 b(A)718
b(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fj(1.)p 0 TeXcolorgray
651 w(Zw)-36 b(ei)413 b(an)f(einem)h(Punkt)f Fi(P)594
b Fj(eines)412 b(K)-36 b(\366rp)36 b(ers)413 b(angreifende)f(Kr\344fte)
33865 3893 y Fh(\000)-993 b(!)33865 4800 y Fi(F)34707
4999 y Fg(1)35646 4800 y Fj(und)38226 3893 y Fh(\000)g(!)38226
4800 y Fi(F)39068 4999 y Fg(2)40007 4800 y Fj(lassen)412
b(sic)-36 b(h)921 6792 y(durc)g(h)407 b(eine)h(einzige)h(am)f(selb)36
b(en)408 b(Punkt)g(angreifende)h(resultierende)e(Kraft)39420
5885 y Fh(\000)-1033 b(!)39573 6792 y Fi(F)741 b Fj(ersetzen,)921
8784 y(die)433 b(allein)i(diesselb)36 b(e)434 b(Wirkung)g(aus\374bt)e
(wie)23885 7877 y Fh(\000)-994 b(!)23885 8784 y Fi(F)24727
8983 y Fg(1)25686 8784 y Fj(und)28287 7877 y Fh(\000)h(!)28287
8784 y Fi(F)29129 8983 y Fg(2)30089 8784 y Fj(zusammen.)921
11330 y(Gegeb)36 b(en)434 b(sind)h(zw)-36 b(ei)436 b(an)f(einem)g
(Punkt)f Fi(P)616 b Fj(angreifenden)435 b(Kr\344fte)34540
10422 y Fh(\000)-994 b(!)34540 11330 y Fi(F)35382 11529
y Fg(1)36342 11330 y Fj(und)38945 10422 y Fh(\000)h(!)38945
11330 y Fi(F)39787 11529 y Fg(2)40313 11330 y Fj(.)435
b(Ermittle)921 13322 y(gra\034sc)-36 b(h)433 b(die)h(resultierende)e
(Kraft)18928 12414 y Fh(\000)-1033 b(!)19080 13322 y
Fi(F)768 b Fj(als)434 b(Summe)e(der)i(Kr\344fte)33595
12414 y Fh(\000)-994 b(!)33595 13322 y Fi(F)34437 13521
y Fg(1)35396 13322 y Fj(und)37997 12414 y Fh(\000)h(!)37997
13322 y Fi(F)38839 13521 y Fg(2)39365 13322 y Fj(!)921
51889 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 429.63615 a add def
/d 0.0 a add neg def /h 322.08481 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 51889 a 7346 41118 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 371.59276 0.0 -58.0434 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 16
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 224.77649 0.0 -97.30832   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 -28.45274 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90549 85.35823 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
7346 41118 a
tx@Dict begin  { 143.97081 -34.1432 } PutCoor PutBegin  end
 7346 41118 a 487 x Fh(\000)f(!)7346 42513
y Fi(F)8188 42712 y Fg(2)7346 41118 y
tx@Dict begin  PutEnd  end
 7346 41118 a 7346
41118 a
tx@Dict begin  { 30.15984 90.4795 } PutCoor PutBegin  end
 7346 41118 a 487 x Fh(\000)g(!)7346 42513 y Fi(F)8188
42712 y Fg(1)7346 41118 y
tx@Dict begin  PutEnd  end
 7346 41118 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62195 56.90549 56.90549
85.35823   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62195 56.90549 170.71646
-28.45274   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 227.62195 56.90549 0.0
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  1.0  3.0  5.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
7346 41118 a
tx@Dict begin  { 112.10387 57.47466 } PutCoor PutBegin  end
 7346 41118 a 1 0 0 TeXcolorrgb 487 x Fh(\000)-1033
b(!)7499 42513 y Fi(F)p 1 0 0 TeXcolorrgb 7346 41118
a
tx@Dict begin  PutEnd  end
 7346 41118 a 0 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end


@endspecial 7346 41118 a
tx@Dict begin  { -10.243 -9.10507 } PutCoor PutBegin  end
 7346 41118 a Ff(P)7346 41118
y
tx@Dict begin  PutEnd  end
 7346 41118 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.71646 -28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 270.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 85.35823
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 90.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 227.62195 56.90549
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 180.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1 0 0 TeXcolorrgb 0 TeXcolorgray
48480 51889 a
currentpoint initclip moveto
 48480 51889 a 47992 4800 a Fe(___/1)p 1 0 0
TeXcolorrgb 47990 6792 a Fd(A)-31 b(G)369 b(3.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 53926
54804 45 v 0 TeXcolorgray 24746 81281 a Fj(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(A)-60 b(G)718 b(3.2)f(-)h(2)f(P)-60
b(arallelogramm)717 b(-)h(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fj(2.)p 0 TeXcolorgray 651
w(Im)589 b(dargestellten)g(P)-36 b(arallelogramm)591
b Fi(AB)67 b(C)95 b(D)625 b Fj(teilt)589 b(der)f(Punkt)g
Fi(F)770 b Fj(die)589 b(Seite)f Fi(B)67 b(C)684 b Fj(im)873
6792 y(V)-108 b(erh\344ltnis)433 b Fc(1)369 b(:)h(2)p
Fj(.)p 0 TeXcolorgray 0 TeXcolorgray 8920 23493 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 261.76514 a add def
/d 0.0 a add neg def /h 134.86572 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8920
23493 a 19944 23808 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 28.45274 -85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 113.81097 85.35823 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.45274 113.81097 142.26372 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 28.45274 -28.45274 113.81097
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ -85.35823 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19944 23808 a
tx@Dict begin  { -92.18704 18.20973 } PutCoor PutBegin  end

19944 23808 a 0.25 TeXcolorgray Fb(A)p 0 TeXcolorgray
19944 23808 a
tx@Dict begin  PutEnd  end
 19944 23808 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 85.35823 28.45274
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 19944 23808 a
tx@Dict begin  { 88.20367 16.50264 } PutCoor PutBegin  end
 19944 23808 a 0.25 TeXcolorgray
Fb(B)p 0 TeXcolorgray 19944 23808 a
tx@Dict begin  PutEnd  end
 19944 23808 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 142.26372 113.81097
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19944 23808 a
tx@Dict begin  { 144.53998 117.22516 } PutCoor PutBegin  end
 19944 23808 a
0.25 TeXcolorgray Fb(C)p 0 TeXcolorgray 19944 23808 a
tx@Dict begin  PutEnd  end

19944 23808 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ -28.45274 113.81097
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
19944 23808 a
tx@Dict begin  { -26.17647 117.22516 } PutCoor PutBegin  end
 19944 23808 a 0.25 TeXcolorgray Fb(D)p
0 TeXcolorgray 19944 23808 a
tx@Dict begin  PutEnd  end
 19944 23808 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 104.29735 56.86163
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19944 23808 a
tx@Dict begin  { 108.1205 45.52455 } PutCoor PutBegin  end
 19944 23808 a
0.25 TeXcolorgray Ff(F)p 0 TeXcolorgray 19944 23808 a
tx@Dict begin  PutEnd  end

19944 23808 a 37897 23493 a
currentpoint initclip moveto
 37897 23493 a 921 27145 a
Fj(Dr\374c)-36 b(k)g(e)434 b(den)e(V)-108 b(ektor)12030
26237 y Fh(\000)-628 b(\000)g(!)12030 27145 y Fi(F)181
b(D)469 b Fj(durc)-36 b(h)433 b(die)g(V)-108 b(ektoren)25874
26573 y Fh(\000)-1033 b(!)26197 27145 y Fi(a)692 b Fc(=)28952
26237 y Fh(\000)-331 b(!)28952 27145 y Fi(AB)501 b Fj(und)34018
26222 y Fh(\000)-1033 b(!)34405 27145 y Fi(b)757 b Fc(=)37096
26237 y Fh(\000)-657 b(\000)g(!)37096 27145 y Fi(B)67
b(C)528 b Fj(aus.)921 30775 y Fh(\000)-628 b(\000)g(!)921
31682 y Fi(F)181 b(D)405 b Fc(=)p 1 0 0 TeXcolorrgb 5007
31159 a Fg(2)p 5007 31372 471 45 v 5007 32140 a(3)5610
30760 y Fh(\000)-1033 b(!)5998 31682 y Fi(b)683 b Fh(\000)8562
31110 y(\000)-1033 b(!)8885 31682 y Fi(a)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fe(___/1)p
1 0 0 TeXcolorrgb 47990 6792 a Fd(A)-31 b(G)369 b(3.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
35616 54804 45 v 0 TeXcolorgray 24746 81281 a Fj(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(A)-60 b(G)718 b(3.2)f(-)h(3)f
(Resultierende)e(Kraft)h(-)i(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fj(3.)p 0 TeXcolorgray 651
w(Drei)491 b(an)f(einem)h(Punkt)e(P)i(eines)f(K)-36 b(\366rp)36
b(ers)490 b(angreifende)h(Kr\344fte)34233 3893 y Fh(\000)-994
b(!)34233 4800 y Fi(F)35075 4999 y Fg(1)35601 4800 y
Fi(;)36183 3893 y Fh(\000)h(!)36183 4800 y Fi(F)37025
4999 y Fg(2)38042 4800 y Fj(und)40700 3893 y Fh(\000)f(!)40700
4800 y Fi(F)41542 4999 y Fg(3)42558 4800 y Fj(lassen)921
6792 y(sic)-36 b(h)632 b(durc)-36 b(h)631 b(eine)h(einzige,)h(am)g
(selb)36 b(en)632 b(Punkt)f(angreifende)i(resultierende)e(Kraft)44568
5885 y Fh(\000)-1033 b(!)44721 6792 y Fi(F)921 8784 y
Fj(ersetzen,)490 b(die)f(alleine)i(dieselb)36 b(e)490
b(Wirkung)h(aus\374bt,)e(wie)h(es)31640 7877 y Fh(\000)-993
b(!)31640 8784 y Fi(F)32482 8983 y Fg(1)33008 8784 y
Fi(;)33590 7877 y Fh(\000)g(!)33590 8784 y Fi(F)34432
8983 y Fg(2)35448 8784 y Fj(und)38106 7877 y Fh(\000)g(!)38106
8784 y Fi(F)38948 8983 y Fg(3)39964 8784 y Fj(zusammen)921
10776 y(tun.)921 13322 y(Gegeb)36 b(en)353 b(sind)g(drei)h(an)g(einem)f
(Punkt)g Fi(P)535 b Fj(angreifende)354 b(Kr\344fte)32832
12414 y Fh(\000)-993 b(!)32832 13322 y Fi(F)33674 13521
y Fg(1)34200 13322 y Fi(;)34782 12414 y Fh(\000)g(!)34782
13322 y Fi(F)35624 13521 y Fg(2)36504 13322 y Fj(und)39026
12414 y Fh(\000)f(!)39026 13322 y Fi(F)39868 13521 y
Fg(3)40394 13322 y Fj(.)354 b(Ermittle)921 15314 y(gra\034sc)-36
b(h)433 b(die)h(resultierende)e(Kraft)18928 14406 y Fh(\000)-1033
b(!)19080 15314 y Fi(F)768 b Fj(als)434 b(Summe)e(der)i(Kr\344fte)33595
14406 y Fh(\000)-994 b(!)33595 15314 y Fi(F)34437 15513
y Fg(1)34962 15314 y Fi(;)35544 14406 y Fh(\000)i(!)35544
15314 y Fi(F)36386 15513 y Fg(2)37346 15314 y Fj(und)39948
14406 y Fh(\000)e(!)39948 15314 y Fi(F)40790 15513 y
Fg(3)41316 15314 y Fj(!)921 46157 y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 433.05077 a add def
/d 0.0 a add neg def /h 270.30104 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 46157 a 16480
42000 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 292.49416 0.0 -140.55661 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 16
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 232.74323 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 113.81097 0.0 28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 0.0 0.0 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 85.35823 0.0 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 28.45274   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -85.35823 113.81097
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 270.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 85.35823 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (u) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 85.35823
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 180.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
16480 42000 a
tx@Dict begin  { -67.14848 77.3915 } PutCoor PutBegin  end
 16480 42000 a 487 x Fh(\000)g(!)16480 43395
y Fi(F)17322 43594 y Fg(2)16480 42000 y
tx@Dict begin  PutEnd  end
 16480 42000 a
16480 42000 a
tx@Dict begin  { 34.71237 6.82881 } PutCoor PutBegin  end
 16480 42000 a 487 x Fh(\000)g(!)16480 43395
y Fi(F)17322 43594 y Fg(1)16480 42000 y
tx@Dict begin  PutEnd  end
 16480 42000 a
16480 42000 a
tx@Dict begin  { 76.25314 60.88884 } PutCoor PutBegin  end
 16480 42000 a 487 x Fh(\000)g(!)16480 43395
y Fi(F)17322 43594 y Fg(3)16480 42000 y
tx@Dict begin  PutEnd  end
 16480 42000 a
16480 42000 a
tx@Dict begin  { -5.12128 15.93346 } PutCoor PutBegin  end
 16480 42000 a Fj(P)16480 42000 y
tx@Dict begin  PutEnd  end
 16480
42000 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.80966 142.1834 0.0 28.45274   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  1.0  3.0  5.0  3.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.11493 56.87813 85.35823 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.80966 142.1834 199.11493 56.87813
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16480 42000 a
tx@Dict begin  { 149.66127 28.45274 } PutCoor PutBegin  end
 16480 42000 a
487 x Fh(\000)g(!)16480 43395 y Fi(F)17322 43594 y Fg(3)16480
42000 y
tx@Dict begin  PutEnd  end
 16480 42000 a 16480 42000 a
tx@Dict begin  { 158.19717 123.4848 } PutCoor PutBegin  end
 16480 42000 a 487
x Fh(\000)g(!)16480 43395 y Fi(F)17322 43594 y Fg(2)16480
42000 y
tx@Dict begin  PutEnd  end
 16480 42000 a 16480 42000 a
tx@Dict begin  { 38.12657 110.39677 } PutCoor PutBegin  end
 16480 42000 a 487
x Fh(\000)-1033 b(!)16633 43395 y Fi(F)16480 42000 y
tx@Dict begin  PutEnd  end

16480 42000 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 199.11493 56.87813
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 180.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 284.41975 -28.42668
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.80966 142.1834
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 270.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(u) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 48858 46157 a
currentpoint initclip moveto
 48858 46157 a 47992 4800
a Fe(___/1)p 1 0 0 TeXcolorrgb 47990 6792 a Fd(A)-31
b(G)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 48193 54804 45 v 0 TeXcolorgray 24746
81281 a Fj(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fk(A)-60 b(G)568 b(3.2)f(-)h(4)f(V)-179
b(ektoren)566 b(-)h(O)-60 b(A)568 b(-)f(Matura)g(2015/16)g(-)h(Neb)60
b(en)-60 b(termin)-2438 4622 y(1)p 0 TeXcolorgray -741
7929 a Fj(4.)p 0 TeXcolorgray 651 w(In)390 b(der)g(Eb)36
b(ene)390 b(w)-36 b(erden)390 b(auf)h(einer)g(Geraden)e(in)i(gleic)-36
b(hen)391 b(Abst\344nden)e(nac)-36 b(heinander)389 b(die)921
9921 y(Punkte)433 b Fi(A;)221 b(B)67 b(;)221 b(C)530
b Fj(und)433 b Fi(D)469 b Fj(markiert.)921 14458 y(Es)434
b(gilt)g(also:)921 16096 y Fh(\000)-331 b(!)921 17004
y Fi(AB)436 b Fc(=)4701 16096 y Fh(\000)-657 b(\000)g(!)4701
17004 y Fi(B)67 b(C)464 b Fc(=)8531 16096 y Fh(\000)-626
b(\000)g(!)8531 17004 y Fi(C)95 b(D)921 21541 y Fj(Die)434
b(K)-36 b(o)36 b(ordinaten)434 b(der)f(punkte)g Fi(A)g
Fj(und)g Fi(C)528 b Fj(sind)433 b(b)36 b(ekann)-36 b(t.)921
26078 y Fi(A)369 b Fc(=)g(\(3)p Fh(j)p Fc(1\))921 28070
y Fi(C)464 b Fc(=)369 b(\(7)p Fh(j)p Fc(8\))921 32607
y Fj(Berec)-36 b(hne)433 b(die)g(K)-36 b(o)36 b(ordinaten)434
b(v)-36 b(on)434 b Fi(D)36 b Fj(.)921 37145 y Fi(D)405
b Fc(=)369 b(\()p 4293 37145 3150 34 v 3149 w Fh(j)p
7811 37145 V 3150 w Fc(\))p 1 0 0 TeXcolorrgb 921 39558
a Fh(\000)-360 b(!)921 40466 y Fi(AC)464 b Fc(=)4672
38185 y Fa(0)4672 40178 y(@)5972 39536 y Fc(4)5972 41528
y(7)6955 38185 y Fa(1)6955 40178 y(A)921 44185 y Fi(D)405
b Fc(=)369 b Fi(C)390 b Fc(+)6547 43662 y Fg(1)p 6547
43875 471 45 v 6547 44643 a(2)7446 44185 y Fh(\001)8110
43278 y(\000)-360 b(!)8110 44185 y Fi(AC)464 b Fh(\))369
b Fi(D)405 b Fc(=)369 b(\(9)p Fh(j)p Fc(11)p Fi(;)p Fc(5\))921
46731 y Fj(L\366sungssc)-36 b(hl\374ssel:)921 49276 y(Ein)469
b(Punkt)f(f\374r)h(die)g(k)-36 b(orrekte)469 b(Angab)36
b(e)469 b(b)36 b(eider)468 b(K)-36 b(o)36 b(ordinaten)469
b(des)g(gesuc)-36 b(h)g(ten)468 b(Punktes)921 51268 y
Fi(D)36 b Fj(.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fe(___/1)p 1 0 0 TeXcolorrgb
47990 9921 a Fd(A)-31 b(G)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 54743 54804 45
v 0 TeXcolorgray 24746 81281 a Fj(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fk(A)-60 b(G)841 b(3.2)e(-)h(5)g(Quader)f
(mit)h(quadratisc)-60 b(her)838 b(Grund\035\344c)-60
b(he)838 b(-)i(O)-60 b(A)841 b(-)-2331 4515 y(Matura)717
b(2016/17)g(-)h(Haupttermin)p 0 TeXcolorgray -741 7823
a Fj(5.)p 0 TeXcolorgray 651 w(Die)409 b(nac)-36 b(hstehende)406
b(Abbildung)h(zeigt)h(einen)g(Quader,)f(dessen)g(quadratisc)-36
b(he)408 b(Grund\035\344-)921 9815 y(c)-36 b(he)575 b(in)h(der)f
Fi(xy)48 b Fj(-Eb)36 b(ene)575 b(liegt.)i(Die)g(L\344nge)e(einer)h
(Grundkan)-36 b(te)574 b(b)36 b(etr\344gt)575 b(5)h(L\344ngenein-)921
11806 y(heiten,)518 b(die)g(K)-36 b(\366rp)36 b(erh\366he)518
b(b)36 b(etr\344gt)518 b(10)h(L\344ngeneinheiten.)f(Der)h(Ec)-36
b(kpunkt)518 b Fi(D)554 b Fj(liegt)519 b(im)921 13798
y(K)-36 b(o)36 b(ordinaten)-36 b(ursprung,)432 b(der)h(Ec)-36
b(kpunkt)433 b Fi(C)529 b Fj(liegt)434 b(auf)g(der)f(p)36
b(ositiv)-36 b(en)434 b Fi(y)48 b Fj(-A)-36 b(c)g(hse.)921
18336 y(Der)434 b(Ec)-36 b(kpunkt)433 b Fi(E)511 b Fj(hat)433
b(somit)h(die)g(K)-36 b(o)36 b(ordinaten)434 b Fi(E)446
b Fc(=)369 b(\(5)p Fh(j)p Fc(0)p Fh(j)p Fc(10\))p Fj(.)p
0 TeXcolorgray 0 TeXcolorgray 13431 47958 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 180.27219 a add def
/d 0.0 a add neg def /h 245.60287 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 13431 47958
a 20221 41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ -28.22307 -28.22307 43.14235
-28.22307 43.14235 114.04063 -28.22307 114.04063  /Lineto /lineto load
def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt {
n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0
ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add
2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 43.14235 -28.22307 71.36543
0.0 71.36543 142.26372 43.14235 114.04063  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  [ 43.14235 114.04063 -28.22307
114.04063 0.0 142.26372 71.36543 142.26372  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.14235 114.04063 -28.22307 114.04063
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.14235 -28.22307 43.14235 114.04063
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.22307 -28.22307 43.14235 -28.22307
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.22307 114.04063 -28.22307 -28.22307
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.36543 142.26372 43.14235 114.04063
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.36543 0.0 71.36543 142.26372   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.14235 -28.22307 71.36543 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.14235 114.04063 43.14235 -28.22307
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 142.26372 71.36543 142.26372  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.22307 114.04063 0.0 142.26372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.14235 114.04063 -28.22307 114.04063
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.36543 142.26372 43.14235 114.04063
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -28.22307 -28.22307 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.36543 0.0 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 142.26372 0.0 0.0   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 113.81097
0.0 71.36543 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ -54.43645
-54.43645 -28.22307 -28.22307   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 180.87567
0.0 142.26372   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20221 41337 a
tx@Dict begin  { 109.11081 11.9006 } PutCoor PutBegin  end
 20221 41337 a
572 x Fi(y)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337 a 20221 41337 a
tx@Dict begin  { 4.9754 176.9457 } PutCoor PutBegin  end

20221 41337 a 572 x Fi(z)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337 a
20221 41337 a
tx@Dict begin  { -46.11023 -50.97363 } PutCoor PutBegin  end
 20221 41337 a 572 x Fi(x)20221 41337 y
tx@Dict begin  PutEnd  end

20221 41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
20221 41337 a
tx@Dict begin  { 2.5194 4.04153 } PutCoor PutBegin  end
 20221 41337 a Fb(D)20221 41337 y
tx@Dict begin  PutEnd  end
 20221
41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 71.36543 0.0   false
NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20221
41337 a
tx@Dict begin  { 73.74416 5.02403 } PutCoor PutBegin  end
 20221 41337 a Fb(C)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 142.26372   false
NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20221 41337
a
tx@Dict begin  { 3.50145 146.49107 } PutCoor PutBegin  end
 20221 41337 a Fb(H)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 43.14235 -28.22307
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20221 41337 a
tx@Dict begin  { 40.34206 -36.72859 } PutCoor PutBegin  end
 20221 41337 a
Fb(B)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 43.14235 114.04063
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 20221 41337 a
tx@Dict begin  { 38.37708 116.52747 } PutCoor PutBegin  end
 20221 41337 a Fb(F)20221 41337
y
tx@Dict begin  PutEnd  end
 20221 41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.22307 -28.22307
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
20221 41337 a
tx@Dict begin  { -29.40918 -36.23756 } PutCoor PutBegin  end
 20221 41337 a Fb(A)20221 41337 y
tx@Dict begin  PutEnd  end
 20221
41337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.22307 114.04063
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20221
41337 a
tx@Dict begin  { -31.86519 118.00099 } PutCoor PutBegin  end
 20221 41337 a Fb(E)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 71.36543 142.26372
  false NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20221 41337
a
tx@Dict begin  { 66.37613 145.01755 } PutCoor PutBegin  end
 20221 41337 a Fb(G)20221 41337 y
tx@Dict begin  PutEnd  end
 20221 41337 a 33386
47958 a
currentpoint initclip moveto
 33386 47958 a 921 51943 a Fj(Gib)433 b(die)g(K)-36
b(o)36 b(ordinaten)434 b(\(K)-36 b(omp)36 b(onen)-36
b(ten\))432 b(des)i(V)-108 b(ektors)29413 51035 y Fh(\000)-580
b(\000)h(!)29413 51943 y Fi(H)103 b(B)500 b Fj(an!)p
1 0 0 TeXcolorrgb 921 57344 a Fh(\000)-580 b(\000)h(!)921
58252 y Fi(H)103 b(B)435 b Fc(=)4906 54975 y Fa(0)4906
56923 y(B)4906 57588 y(B)4906 58252 y(B)4906 58960 y(@)7270
56326 y Fc(5)7270 58318 y(5)6428 60310 y Fh(\000)p Fc(10)9315
54975 y Fa(1)9315 56923 y(C)9315 57588 y(C)9315 58252
y(C)9315 58960 y(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7823 a Fe(___/1)p 1 0 0 TeXcolorrgb
47990 9815 a Fd(A)-31 b(G)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 64384 54804 45
v 0 TeXcolorgray 24746 81281 a Fj(5)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 4.2/AG 4.2 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:33:45 2017
%%Pages: 8
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathSymbols8-Regular
%%+ LMMathItalic12-Regular wasy10 LMRoman10-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular LMMathItalic8-Regular
%%+ LMRoman6-Regular LMMathItalic10-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 4.2/AG 4.2 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0833
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55E4862F1672867A667D1FC762960C5903BA3C93DD3ADB2
00C6470F2BCD399A692C06F739E404604BC4A0A97D38FE2A79EC035DDBA628E6
442B82421CB135EB4C6B64E5061A44AB6031EABCBCE4FFD07C21B040C4A7A9E5
DEF03CDB67F492CE5721CBA24721E4DF7EF63891D98E4EA24E48D4BCF8AB4CB1
4661759C675824F94CD151CD192E9DEC7BD65B80885F9C3574339A61253C3234
BF4B9CEB8ADF3FEEB11F09918F66D3E5B19628F781B321340E3C283EF9BDDA94
48283E6E547DFFAFA5F8D00297CC6C8EBFEA08384809CF652F1E602E7F2F4F36
127A3C7B726EA6A4E12CB39087EB7F0C52448397F2C011BE5763AA6AFC837716
574D27FCFA754D979359E3D0C3953C9493D87F32088F1E8A02FFDE961CED9274
0DB33CF42814E8BC0DD63A04AEF334C2E137E6BF00B2D44F6D7A49E4478AAE78
60592908399E8EDACDC6168BFC7F8190C323E5410960525E6B1B6CA3D56F1913
C33C63345148CA672716EB8AE8B8511F987E96279E3AE01FFE68E34547E71890
33EB001C3B895E824DED43C96305B0D042E6D59DE4A9284DA0959261F9098B70
87A62D1C0DEA639A7B4C73073F31E79EBFF8CA61F8988B81DC9624F4E2FA129B
4A1EB12A7E1AE4D5596F8B4D59DB2F77259A4F8C7BF050D96D8F27DE0E26E164
81D9E883B951657B8A929CD02CE0F5BC337C53E57106BCFB1FCFB2CB1DD83788
5F2EBA1DF6647BAFD829244AF2BC290824B10C3779A1D30350F3581FAB9FBBE2
50F5A649FFF45DA2C8C78EE350D2B4C4E35656CC9F8DBC6622F6729EB829951D
2913A449A25DC11755A2A3EABAADE36B0EE70802C43F5EA3E85F241E3F8F815F
CE7C8E07C2A4258E17D658258510BBB651EDE7B5DF05C844D3978F8A4FBCC99D
5B2C94C35A36853AE144AC5AEA6395A2CBA52FE80E62DBB4C6DA11F0F93958C2
F72B64C2FC91D0F560ABF1484A7E2E4551DDF8447E28508595F4087A03E93194
C6170DEF38C70E796959AED836484CED4161BB7848808C81F934C2A6E6B0C326
0E37CDE4476F14AD67002D7131A70F0951F1C3115139FD48FA16BD52BDA1EA2A
6C44CF835B0DD4EBDB97E64C634B8D0A9827AD618BE97E2A8A64D56F9D6F55B6
C5D18ABEFFDB177930EAC07DB7BFD9346A34C259E731AAA4CA5892B1CC37D90D
C0F0C205CA723D1193C055C895506371993B93B6C29AA1162026831186BD404B
5B473F12B9A1AC6ECE40504152487FB5FC66494E58691877DDA00E782EDBA204
3646506E2528DD4F93ABF1DB4AA95E1B63BAFD6C5186BA5D8647FBD82C55B6A9
E05286E9C8430FDEA65522EB411FAC22276FBBC882D37D178E08E28D8B46B8A5
E9A311911CD966B9C01AE7DC9AAB924D6CDBD38009184C122EC2ACEC0D9E24B5
32ABE6F480AF83598FB8D11ABA30BFA0512A5BFCDA2B80CE90879E1206F66F21
1E913A8CCB8C84C2EE89ED5B84D7383A07D9E397B451CE4FEDF0FA459E879033
1419709F3A0C8A457AD3407CF00117D9187AF7DDFD8B50AF3BB550E19C3A1E82
501B641E2E5F277FA73D4E700630CFFF16DBAE0E9B1A488189A2F6B1118204C9
0EFED4B722288EA31B6BF0D68A1F6034B17343EDE0568A42769F5F5B2EFBB233
B8BA5AC7F2DF773569972928D0A234019A034601C1981E6326A3D123C0703F5D
F5E6A80D1A846A8CCAA02A72BC1095258F30443FA4F019F72BE684965CCB1C23
48EDD6DF15BABA76230227A125833B01925B44199544BD1A61472723196DCB47
7067F519FD51B6B558B4AFF5EED231AEB8E4B2B968FFC81A66E2ED796B5010A8
C5F218DB978A4065E940EC43092003DC0972D8AE93AAD76A1C6689B7227B0C4A
7994BF7B70393842B31B9A72DBA3623D26988A0B4E873720181C708DF97C4322
A0BA61AD92997BE01D062B1E1149227B0405EEB79B4880CACD5A3CBA33415E02
A1EE9E77E73799F5751CB3D82C4D586FE10158D04C5FD86BBC4BE0196FFDEAFD
10B6A7CFF5449D1AADD2BD
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F636D647F334B648E11C3
659BA4FA71AB8342608C30E42BA95277382833BB9C14C6EEF11BFCEAE9139B89
256D5E8FE9B80F6DB3179657983AF5CC8F3C7EAEE084A74558304627D0C03A01
2B6CB42DBC8EEF10FC8E83696D58F0CAFCCAFABB836E9C1C7887C42265DD4193
C8618501A7FFCE13919D15CF5F00684B37087F633AB4C7B25FF2D7D54B31D2D6
96DC1E52C828A7A1155E6471DA39E1D47F152AF583CAE41F7F7FE0AA3F1F7DD9
175A2945C257765C4801FB768C6188F02FF2328F7D5B493D274CFA840BDE34CA
C6B57A04D9EAE9B90595D133E0CA2A3AF2DD6D4E50A9FA8AF67CE3FE823A4E3F
9E367C4D358692A287F5074A8C01BA5518911789F7767BD01F00D086DF326D7C
A50C1EFBB3AD48F21DC7670F524682E7CE6FB4EF66525E8F15F63E8A9F64DB78
90533FDF90C51ACDDB5CD7B1CBFAF76EE833E519C3715CFF2AC7C25F0EB8FFEA
273601D1E82984B8AE31AE343F37D03920CFB83E2DEE7642AA85B1615F9CBA1C
3C3197223C9F0D4AC9F585ACD311E1BA537EE424CCE1F22EBA8031443AC094A0
7EE8CC94D559627274D5026EA0DFDE5F67ABF5E84CC6B6717E8B794AB2DBFDDF
3A89648C906439A91CFB1AA195D9F12E03463930D05A3D71E1E9830AC1A31C2E
35BA7B396815CECCA18146C96709CFF862E8552E4FDEB7767292AAD81E5B4186
180C7D70697B73BFADE926163A5780E71276C60EAB7E25C124964778296D06C9
02559B89DA648B919EB362176B83298EE2D8B405DC67F2F888ABC36137C2137D
E0D7EBBF2323C750C674154FC6CA853B13A2D88CB67CECA9A1D3498D569DE012
062C1B959357A2A5903A5BA40F8E6CA80916037DB040BCE705D91E61D6FBF089
4C659A61F005C6FCE1A0E9700362C58C9FABCC46D24DB46E33983DE9AAEAA7DA
FD44C991F74087597F21C39DB6A2CA7C80E5410BFF7EA073A18DC2F6999DB161
EF7DB88DA4B0C592385D35F705BC2A9B1075F1B1568CE34A4F7FC812BF766372
E6F0277D8604E72E2594DF545E359F2932DB2764780688C794121E4A50AA7CD6
479A34E1B75657B41FFDB8AF1C9E3D3CE95EB410E74A1A29DC16D7FC12AA69BB
C23F9C6C4B24E6F0331C3747E378ED0C634370C3BAFFA2F1F9A03CCD801C4E1C
6911750F761F9907A438DDF4506C6ADBAE868F8E3D97C83E366A89B60E01C8D8
AAABC217C07193F92A25135331AAC542A41BAA9D9B246CDCDE58236DC29CD0BD
4C7842713E95F5CBAF73AB6456DF36FF580B2F42E21C6902705307EB16D94092
A85D8BF6BD657788322EA6A7F874F53F5EC3D5A4DFBE35B5911AC6E218ED62EA
FE23AC78C1FD52C0591102D74D3C6FDD1935694B7002E61FC34AA828BDB14CF6
B81946BBAE9D2B044B3F72DD84699E5735D7A8A57091D3709FA9D5314AD7FEBF
0797C5693895A99F6E03BF0F19D8246951FA87CA9FE08235526B59964E529D71
4203D3849619EB4D842660AEDFC5430F81C552C6AEA6BB170154C777A63D6404
15B9729D98238DF0E36467F8AE46C4A0A633D4B3F8CFBD1194BA8E3B5F981868
3EA2F04EE0AFC3AE4DFA747A1706F7FB6FCB5378D992B8498043D00CFC47D2AC
1081F1A0B01B07A92A8282B3EC6B7AB485F98415
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6A6325FBC87D9D0E635AC2EE5069D7F11D65E7B61E
CADC94CCCE89FB906FFA6E784E7D58D0F717817F3007FD7A87F53AB40E03103A
5A994EF4A4B82A4CD3AF4410331B1A4F64E4BC682C4552ABBB7A7AF1BA2BE1DA
62D42F448933911C81895DAD7D74B8182DB648FC01DE11C0F21F65DBB26801C6
710BCC3064B30E965D86830EC06710E51FB6118C9837830D08097991F13B71F5
27D4AFA7AB8BDAF81A5EB6EC214568C151DF6600F13C2A116FA1DE50F091334D
ED6FD7D139A5D7613AA7C519BCE1EB81A49B39E6CDBDEF97CF21A4E73B669C2E
DB5E0AF2E3976B8489770DB1E286F8FB8BCE2BBF6FC536B23898EAA4C17D53E4
CFC681A17DC79899EB338C0BE0E543E16D028E46BDA9BAB2618CAEA3A6093175
CB1F4943BD62EB9AE82FB51E7BAF5E238FBA0F2774FF698762CF8FA6C070280D
10B1EE2AE166B7E7B576E784DB10B59BDAECC087BD368C95A8DFB961D6BFCB19
004AF9F64C26F7391141D5DA65D5503775BCC2EA7361D13F14F8BB68AD00A6B5
A33F23AFD814A693886FB3B3085AF5F34B3077294459484908FF78EC89C3C5BD
E3D78D903571EADA796A069A0F2C95FFBA2EDF3A3A3ED644AAD6635BCF425AC3
A1CF01BA22B5D91622310AD28DBCB06CBE9A38825E9EDE6174FD934D0438AFF3
C64D29B8D5383AA6DB86199F71C9B3616A0F01C173C27182AAF9E846FDDDBD50
E2956840E97771447750ADD17DE0C98D06D4E853A24673CAC2BC653E28E3CD21
76792D32E6C684163C775B46790D67CC0E5EDCC6382F1041168253BD30434BFB
A0EC53913CEEB0CC8B621B0D8D5A8EC2EF922D917CDB0ADD125F38A3D3F6744C
6E2D6347C8510AC6D67E95F207726537EBAA0CB0ACC846F9D65187171002AC31
193E578D76E7D52609F10EAA7620CC6B87B5719981AF8EE6A5949667FFE6A05D
CE65C7B986CF466B6A832F1921A69497E8F7F8D8FC4782D9F7D8B81E7ACADA35
9FDBE29C17FFC7E62A4083009E92B5C23D1354E483B0142028ABA552456222AA
D1A3AF569EA04C4F08B194F0C5A0A862312519A5006A049FD3B35074D85BDA9A
615D5C324302F9C52CE047DAB64EBA1EEF23FDD6D15A5E4B14C74D3A205EAFA1
31A73808C55EBCAE3C413ABAD61C11EFF1AF80802EFB8FBD6FD2D909977882A9
A1E80EFBDC66943345AB7BDA1DC584BF3F662B3E1C1D25A062672F7D44749277
F5D4878326B60868334A64F9378D1FFF73A7B37F113EEF7A042C0F937E179EEC
FAE0301DFDA7D26E3B5AE6BCCD2299EE45743658D8D43AF001ACCC0284EE83D6
B900DDC00EE177FAF3AAD917E7F290E617ED91962DE2F90E93F9691A49C4EF75
13DC2E2948F65F76672CC28E32D137F63B3A38EB352917C846DFFA79CC005270
A3D6A59DDCF97BF1326274DA0FAFBBC62EB4C344B849938E88CA613037845200
B3F0C08788774D4D4ABAB9A5998D6BF359195B08716DF72ED7E94A83904E0CC4
911932BA2229C8B0D4A9DF0992A2A238B73C8739A0D057B417DC72B0769FAA9E
5F1C8DAC260627EEDDA807B80C88E1A3B6C39FB347B33F62B222F6C5EB82EC0A
B0A23FFE31B77BDDCCB984C390C44D30789F04667EA6A5552590C0B367060BA1
243D62C94EF26BAC92944A09C5DD61E1ABC5AFCE0DDD298C68E4AE344DD577BB
0C8235A1967439CBCA9D382AD48843C525F7451CF7ECB81F2B8B9E263BA23B21
DE5069B42840DEF36C2BF2DEAB84A6A67B82331DB9DC8DDCCD07EFB76E555740
FCCEA963BE2BC9D8E9A0CC73B5D74BB65F610F80690E1C479F9B7395A051BECE
0E1A22E5CFE38E66565C66A79E77D68AF2A429B909DD222A02A317B6CCB7C2B3
1ECDE237B583496F46681A895626FCE0E73BE008E8950FE22F142E6EE62D60D4
AC97C049341A8E299AAF1496271698DCA73134619CF3333BE945AFFE17DEE95E
A5860BDCC5A233FE4AB2C6596ABA6FD29A727B1B05EC92048AE9474EEF8B20ED
E03B7134EA3E03B1DF94857805DC17319B1F286303EB0ACD9A00443BF868B171
EA658C08205D1646990104D57927AACF318AF6EF009636BF4557453455885F4B
FF890760186299EC8A26431D97A079251DDF657D535934D5D6240E6CFDA78603
B4DD2B2E570E8F77219C1F6DF801D778AD70822E94486E3256ECBE5EF6F5A476
9C5F4AEB830F32A05BD5E8D48C9338C33095551EE891BACA84D6754B6A483E6C
C840A2F3E144F14ACCA69B8825E76FEBC44518364D07D07390B1C78969C68869
E8999CEDE61F55791861511F85A70F6CB6EC7D44A447A3675202DF08F382112D
7B1126AD2ECB46AA1EAE38561C06F92155BD2461ABD0C328B0B53944090881DB
2D9C0D59F2F968FA89582AA1F5216A0789C2767E64A5F7E5538538567FBDF6D1
DEBFA341D34675448A5AFA6648411B5DEBEA08AB1FF612E6CFEF1F67B5AA4E89
D418DCD25A6DD0374178343C14340F779D1F7EF95E7283C2B2D32116ADC8FB70
0E3B6986862C610DE8E4DCC9A2FAF21724035B6051C7291C002C4EBEDC9474D6
7FE1F4BEBC7B0D19185D81CA234DD9AFDEF06165995695F564F91F3F835A8891
DDED0EC38FB38CB93827D02D1190D6F4861C499967E5C3A189326FFAC05516A5
EA41B0D610C584274E2ED49C4018B501FFB1EEEF6ED7CA7D3EDA1E8ACC3588B7
766F86D98092778DCE872187483A9F296FE1204418341ECE962F16253708616A
1A86E6A927F0CE0E0B1418F8F01CB3609BBE7B6D56B1FE572C4E32639CCEDD4A
E131D38191F932D39F7A0EDA75961C0DE25C7307D1AD8EA95470A44C7122C136
BBB1AA140D60BCE75CC544A647BE418E9DCFBC86DBB0EE276511245D73ADECE3
1E46D4E6B7D21D272A683807CCD3B679AF213A6CA3889F2E3E16937D7C821B52
D1499F024525271339746C908E7D7F5DEE521990DD66B8B76C508A6ED656EBF6
F086665D86CC6E39D651B1DCCBB8222C4EE9B24A1707AC16E3833FE21B61C082
A7E22A0ECA2EEA73FF7D4AC9BE79F144704045EB065B1FCD7983F7C38BDEEF37
29F48584AEFC9DCADE865DB4A133E6F8E8BAA84A99019D857C7452614C80BE94
D5D24DDA92869E5953E133291DCFCF3F6ABF6373CC7E213965DB88ABF1137FAC
5CEF57200F2A0A31DF462805CC82162CD9884B30909DE87BE8E46C11BAC0C15A
E09CF9271EA67108EDFA52A9FB0DC8FB7D4B250B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E9D7A0546E34F8BF633F656FE32F1FF453232617FCB7419
0A46165FBE654065FEA56AD83B17114EC5A7245AE7D9853223CADF1D781A7E4D
07DB3D4F16AE25026F52A8DDD0C9028D5B251EF32A329A624148C46F02C06DC0
6EDBDF4FC7DE2392905875FC28D07872F48FED6ECF7ADFBA23B66124203536CB
04FCAA433B9C6D4683C6C6B46A36ECA3A2B2AD548B7E6BC11F3404DFB91962B6
7EB0838F0E570E8CF04E85BA16BBB3123ECF3733A72A52F7F904C17DC217C7A9
CA604CF8401B289C1AFE778297F5248A37F2CD354ACE5EFEAE295973F7FA2EC0
8BA400C2BBCF8152ABA14FA9FEC5040D1B278B4D30DECAD8C97075573080E67A
B9F074981BA85FE7B19453C2013BB61AEFC3A15FC3CBB1E614186292D44DCC6A
69F94C1E03F1215872715967549F665E4D31FA89D07F9F7B71AABA6AAE1F3C1C
D65F797C3D02191EA2AA3B8A85038832720291FAAC68BB43B9A09A43832B289E
C07FF27F93B72A12C91CBBDB130C200349628F5956A835CBA540866CB82A2248
4EBB508F45A2D621074C5B93A4B520F1284E1B7C5D8474A5E521E7AD69BCB87C
68F1DF66B627B992C83E67679EA3C924E8517AEC1141FEB78E3658C308139AD4
4F7081DA3E8F839EECED8A0313F0A6DB604D39EE99D02D3FE7C02D0BF476D768
D438A2C24653F345F4642D12EA28AFB297DE661883CC13A06C3620FAD86F61ED
E3925484E3FA45344C7FD3D4D3A68B7BBB2A964AB2BE5A83FBE336D8C2D1325E
033E6CA7B01808D190FFC22AF831712233AA23BA994FB0C2B8AD99539008D50D
C093C9E693265E828A441345EA5C4EECC58BFC3D4AFA6168B74E2261A1B0741D
368D2D66F5AA22A1627640EA969285AD222A233EC61899AD22102AE68685A0E9
78D4C5714622E75955FF3E78C4575D810E7E050508B476A385CEC705A2EB89D7
F32FBD60C08B86A3021A5E482C8AE579801B110C76FD7357B8B0659B1BCD7335
D0A83ABBAC55FD47082DBE00ECB6C5C0F3CB6F2433FA52B2594B85C1F204B650
9D5201534954EAF50FBA122F4899016E04B4623EDD9332FD97D03F0162CC8BDB
0FF69CC3901209AE676967CFC73A878756C67A46AE14E613A8B3A93323427608
2E17993B297043B2F75674AA08FB0BFC904015AA56AE725E5AEE820FFAC05686
3E893BFF7C0C4F83D0D961AFC767E7024AE30751F349735B6CF6543D1067A9AA
939ADE975C80C4626D6BFE9FDA94629DB2CE69239856F03E138D66F8F733E229
271102112617F14FD5C3C6C486658937E811DEC0282EE3D0E3C1A31B94D7F13A
33FE49FED460A102B225FF51C3CAD527A8BF9BF8D495F7B532647689F1F21366
57C025AD24664C9C8191484D5D8E1304268CD4715C7B381ADD4976C0C856986C
FC6730241A41A2AEB1DE5FBA892DFACE7CBA94036E7A98F6B77F65031C7D4F88
38154177B46BFEC2D3481EF9EE5D5BAE73131662CFFF5E427A5F5DBB56FE1FC8
15414798C06E05F9BEF1443CD00570B204F24BA7D6B2F266806E6B3FD434FDE1
329BEFE5A0C84E3977329139F1192DF3F9D6BDE77DD5870ADEC8900D6346957B
84C8C7258B552DF354FC6CEB056DA1B1163C274D54F1350C83A736479DF26E8C
FF16EEEF9346A156B1131100E3AF27DC49B4DA067FDF88CEF019BDDF15F1864F
5406CF60DC00C440EEC436274984B73FD1A0031F824B4379E2E62864039797E5
87FC41E5C04B4690A2F2526D0272FD1B8220A2F5882788FEBDF78B312FF0A732
2C021122E962CD756DE48DA93798FBDD034F46AD3FA9E8C2D786CB4E75B9CED1
03496C03093961B8215359D6875C634D9ACEF68ECA80DEC81A3B612DBBC52B97
CEB83FAEE7B897F107662E8467FAC8D9E2AA0F906E7211622FCCA2C5462EA92B
205DD2FB6D547ED3D559005ED37BEB1ABEED9E395F1F1DD95ECC8B4432266F91
66273B59935B388CF75B423EDFBC4680B3A107EA9167B4A22855C1F6110A42D0
F70DAB4D6B7E2187A3BF218A6457C7CCBC0B06CE3AF4C560DF495B58D53E718D
89741F32C6351F8C78E4B9A0F49AFF1B3302A64232D15AE1B845171FD57FBC1E
6470FBE00FFFF6D3664C5D0355F8BF415C1A47585A4736B1045640800B098489
8282CB81A1D8FD3B8EF85867862B8FFA7167A39E37833AFDB4BBA8D5D855EAE0
0597C351139020D27A614DF27C3A72B169AA4B53EB63496BE00FAAA681420DA7
DC25AFA04AD42EBAA71F635AD4656A8411543FD8B3DB6B7ACB32CA6E4DEC6127
A633D126CD63FDEE48E210E261C16EF1A0236360B2A298C718416514400EB47B
86E2FB3F8777BA26C0DA8D6350B352014576858A26DF969402AB30E0F9C56CAD
A5D9811D78900B7D347046FF9C2A9DA7AEE1F42E318FAC7813157D0F0ADBEC73
9208D41C02C71A920C9DC8CABFF7BABFC41EEF179A9E95A7B2A70E3A9170C482
33DB00A098BA24A0C4A864AD85DF65F71B56A2E8BAC52A17FB2D357BBBFB0E12
CD481F96252AB7402213DF9BB57411622FCCA2C5462EA92B205DD2FB6D547ED3
D55900582DC2A7C10394B4FA2872BB77817D1E2258EB8E4A109699B8A1F921BA
F0ED78D89F33F144043D0FEE36BBF30AFF155EBDF9AB2A053F432A3149B7BA16
8CA488A7CCCFF0B23C07EDE4EA5BEC2AA85224F7C29A671F032195D9DDE7F51D
D5C45AF9CB8A6362CD7F38CC43C354FB4992CA8AA113256A370E02BCEB767B25
5C72846F1570C10ED164D1841B2FE33F3DF5262A92E98F7A5873F70B91A6C6DB
6BA74C7DC0D0D0A183BD254DBFAA7388CF2CBBF3342BE2E7EA49AABA75AEEEC5
DDE1D8BF68483C3D2447F4FFF02D0050E6489C4957F418895E6576FD8A8492C7
E1AB315D335B1A481FE3DB344A5F50DA95EF3F0F93CD2305D67A473BCBE4830A
B55944F07DE38907B58D16FCC2A074E4B55A869C96FCA78117347B9CFA480FF4
A19B9C158291D7F537E66AF56C22A58D8D35E53CEFC1C884F25A63CA278DCC38
682E1BC6D134930242730DFD156C0584682B19C3799784C1394A7F95FA260EA1
3D49E335E7800708D97515CB6CF112C2A89D2D44816E907417BF962CB750BE2E
146ECBDD16A1584F3EA2AB3D9A37867D85840C6AB9269E1FFD3D6432231D47B3
729F7F9F81AEE979C967DC7FC302C4D295E606E3BEB5DD0B068D6EB99F5F10C1
83245F1B733C17D3B854D53BA686CF408A174C4095D3732590B5E767CC184E97
59AEBEA33FBFEF7360758B40E87EFB947F6EF31DCC61CDDFC39A2771827A03FB
E2486B329E785A8113B00497A08154752DCC693ACDBECD3B9F74A6B21D04D33D
8D6867E328F1F84E503918D4F7A808F1DD37AAA08EF4F57EA64B4B227379834B
494CB4FAD1E78E9C6871F23DD7DEA7C7D956560D8BA51ABB82EF2B3AD0DC0EDC
D1DCE78055807A3A8E822A31DEC6D989490ADE623FD53D3DCABB2ABAEF03EE07
C3EDE4F0AF6B7A776C63DADDCDD47EA7CC5A25C793F813C55BE3B470A5800B4F
EDC4A99823CAFF87E567B96574144DFFC8BB0B9B743486E0A343D68682DDD7E1
0A9FB3BCBD8BD4D92DACE0A7B4068772E5278DC12151835699EDADD87DC8C632
5F0460690BE677AA6DB7E0250B5194D04A18A3CDD0D72D52948373E38251C508
E4505E845177AB715C3E6AB79D37E3F452F951612427A24B996F9F170CA2D76D
94BCE9E2F06F49A6F65CFF1A4F8BA05BFF847954D298A39FCDFBCB88AC0EA6AA
CCAB081537DBE4849DE52AF793A4937CFC9E9ACC236CE307310AA50B8A67181C
0DDB2999F26EED9D32C373613F2E788C56EB0FA4ED1F232CACF2867E6F462C04
4BC20DA885EDCD48017EB746DDA8ED86888DDA3065C5091D99EEEAC430924707
3044D4B1F6F9AD92CDAEAB2DAEE928681EF627A2AAD93DD3DA2A47FC87C5E3CF
18CE4227ED29B9A8CF29DB40473AEFA67EEF8FB207ACB013947A866A8ACE63BB
825F4B0F36E5B0018C20AB43FB4C215C95659DD7D7207F8C04C021434CC2FDC3
5A4FDC88E365F40B9D576708B6B6AA87B5EBACB8F10A27E2B97314A9BFED3E11
45BF128BFD65CC057FE1DB587C8B2D7A74FCA897EE756EEF785C969EFCA683A8
3C9AD337F4726906EB3D588F93D2104F2FE63F810E6A3000E8960E71B73E9003
276E22FA42881EF50DFCF371A8C762AF5BD7C49E875699AB0AF95891548445E2
423C73FBF82E9961A7926D1A05FDB243631EFA7025B92E55DD5D5897F13EDBB3
356F9E2B9DE1FBE209F9CA03F6B4CA4588D5430DD9943FA6EE299A4FDAD6B1C6
2ED755C31CBDECBBB7C3FBCA1B459501F78B07E4A73F5DB00C952DEE1F6CE6A0
752411EC61354347A5FD43D296FC220C6416877F7F1995EA262713DA7EC6ABDB
A76084AF0E901B4CB170B03CC44F6B34BC47F3A3226AC68289D2EC32B466D21C
9B802FF1810458E2756AEF02A8FD4A64972D941EC585207C0E0AE908826A5894
9611AD7ACADC778ED2784B3423154B7FC03D43F47C6F5546EDB0EDE9BC6DFFF5
67025D6E00A898F0FA2804E0BDA68B696F299A0821E42C97CC50E6C4D6C1ABDA
A045DF3C2F7F9F8206F24A189E57A0B5C178B7326860AF2A3347D964A134CC09
9A59CC5126F95FA957C3CE225C0FDF7C0B02C3678DF44F20E718545C2F6F7E7E
A4526FBC431FA82095A39C74183F41E46F2C56BCB59CE6AEF7E91331ED5D9A4E
479C21D6A7DA9D6B0B4FF494C2668BB221AB188DC03492775B2B72DAA50008CE
4A663353A1DAB9DA50258300B9BB455AA872810C7948B1EC866883E78A3F4C74
3DCDAD88BEF8B3F7104BCAA6E752EE90D2B38F2DA6707A896EC55D98E82E3417
677CEE755D41C6192B100D56F15192E10DCF5EA55C12219C8AF09C7FEA6FD001
3BC73E02B5065DDE064D64B07C5041BDB97BAB801A993B33CB35844961E68842
CFC30E62F392C5C166ADC35156CB090E79A5CC212295946E98647A6F5903A6BA
EDF01C0D83A41379B0ECFF59CE398BBCF79F56450208CC12BAF282AF59619638
A93EC62A029471B6078CFFD8A93C63A2AE944CDEDB8CB0483DBAE03637CC4C30
DF26D99F628D62581D54A0EADF9DEFFB3DB34A9F052BCE33D0F67FAE47CF016E
3B3AD1A5C090108D4964C7FD5E57B7B839E058C6917D4D2261EF3B27F4F84A27
603543947A1C2DFD3164CE25F9A19F120360F93E7BE38AFBB5932C570E8F1106
F98799495DBB3A05C04BD649053FD29385E9D3822007395A5D78C698C7366C1C
453FD7CC6E94C29F597CE7E75A8F7613805064BA22FE6411CFF2DF50799947D6
5414D629B139C0B3C2BF3D2905CFFAE9EAF0BBF3A22B3EA98F5ADA485A644A34
CD0F70B5ADA7DCC9E4CBB91AE2FAA8D878652A4CAFD1F9EB162702D1F6805D85
A8216B17742ED304B2996DC77BEA528DD00039AA5387ADAC3617AD77C899FE86
E54B8BDB1490AC76FF84E5C3FD68A234C9BECC29AB2EA93D4D4B5A2BCEB8AB14
CF291E7A18859EDE149FF3F07B59EDA5362CDECCBC03A19FCF1125C2B0BA6F14
13D796C008A2ECD55E062CDFDFD9C0C549CEC434910D8AEAA207BEB7A8B22721
7A2570A2487847107009B163709687F03E8904C670CBFF1BC60D1A07473EB703
C2B27847402CA4B685827479170AE5F99FF4C1D98BA42AA91660B2AE39F7BAA5
A9077FB463B8C35CA96A594D27DA3C1237C61DE1A5F5B26FC8966F17D3D545F7
DA471CC77A08633A53B62B760DF589FB2CF3EBA2F6AAC3F6FD242C25F6952AC5
5C24ED123A69E8EEA7221CBBE91BC55A81CC89FDE91EA283543BFC3DB722C5BE
799C9F485827AB10332BFA0505B5EFA4F5C59B381527B753DEDB0BBB7D3F0376
8BAF8691733BF48669EC0B1D817B4DB795BFBCC80F4EFBE3D7E3776948F8D116
96805A94EF9D879BB2E5DF7188DC7DDF4D7C8273211809C8DCFF798F2ABFC4F3
539392985C4CB324B0007E830B78301A03015901FD3A2CD7D5958BC9670F3722
5555B3B50E5204E612A84E61DA20F004DDB1EA743DEAB15756522DE65BA32464
0B70E9B902E9FB32F894C4CF451DD10098E54CE3F758E2C884D6830B00E1FB1F
743CA70F98903806F30AF37522828FD5DE3EC220C719B63A95EE943F25A823A8
8C7E731F647895CECD96CA4A2FB08545662DE0616473D1DD73635F2A6D25FF8F
941042919BC8E49987E0A462594AFB132AF95D2C459ABFECFD7096366E004D43
6C27CC46EEF80FA1A05AB90D788643BDAA80A3358D068EA5038FAC8EDC241DC3
360844AD12B1FF1DA78D51B6F3880C38FB2349BE51D981A08AA153E57F9DCD40
430507B2814046F5F211E16EACD389622F0C6FABF465CD8674717E87E6481701
FD1E1B8705C512C0108055A1BDFD83F4E6FB7C769819702617D08C10F4DC99E8
0028ADA6938F1BBF331D54AF9C627586F74CA84272C6A6AA48D9FF64C0A8959C
2DDC8B5F4F725ED7106CB261CAB582F367CCFEFDEF1C42C612D947DF7BF71424
AABF005BDAB11CB8C655A72354626722C510D6E242E10D29DEF786D7BBDAA2A3
5EB13FD17790793B2B4A9E06A916D8C6A93A6C0E4A2AE7B930B69005A3A2C122
5FF0F5DDA04B584EF886716F299981EC9BEA227BEE986A9A0D47A669C20B732A
AB2589536FA3B43E92840BD29870214BA57E5DDD4315463D662B9274D2E29312
ACAA9B901E3CC8090E857AB029E6C75123998FC42D3E0C3F20960AEF3549801B
F7518806C6D295955BB71395C43390497BB8F03AC4B9254462A42F410D55B6F5
4027C1582963712777AFB86E4FDDC0F31F92595FE56D439417455C5DF15519B9
0355ABACCAB80AFEE37A412B255DD542E77E5FF7E1744D529624024E35566FF0
EF71D60ABD9581F43AFC4A1BD1D7AB84C2DDCF5DA974B2068488AE47A9F07ED5
EB4D391DCD5D08268EAB44BA2650CBFC0CA9B55CBEAF992D7C9F3D4C2CB294E4
4361808DB41180D66B2A43973F90045EC2A8437DF5F02A69E236E3DA43171237
1A1D71BCEF8BAAC89772FBFE65D33E336D9595FD349D0874D0203F8C21D9CC04
E187BE53F8FED4F33633BA03A22DC683B3C8533624EA8841787FEC863F584F1F
FABFAD3A2E6AD0F142653DA546D27C470377E95C9B1336AE10C98008512E1E9E
B36A96421288D8A846DA9F3D3B8DCF710DD336290176B3E0B546698B6A12F524
DC97030DFB981F11116C45649029E8664B1EF5856534B80E1124ABC86D6376AC
6E3F7414E4A017F9FAE43F47C36E5544A0C54A415C5AB2A72BC3F9A63FC847DC
244530BB6D83D8495BCBD805D3FB3054DFF46F83F65741B1017E96CC1AFBF465
C25A312852770DAB7D39E1217619DADD5A529B743B0977263E4EB261F6718EBF
15ABA15B45CE0008CF15222103B3BC5F55E235A90201A826568CF2C21EE1C3E7
45A96B9D1102CB26CBE3E62D0410DA79BAB5DBE07DEC2628A57CD458DF6ED9F8
FAF6B0A70F46877976C12FF9758C0625FAB1DEA0D55F11A0674E11C30C0E964B
009A0D5AE5DADC353EF52CCCCE5A99EDC232F01C9EA889DA4DAA4227182ACF45
5865CA526CD0C3AF1F22BD3E3ED3DF208D3C2EAD0BD5AD97E55CAC100AE56356
4FC1EDA0CDAA94F414ABCA46ECF689BA685F1BD831B4271EE6BF93276CC51C86
FEBB15424B17BAACFAD06CDD337834C067CA415362050ECB9A7C3AB8AB6C697A
D5845D58D9ED8F00ADFC43DF9A0143E2ECED58D83420F4B02BD746BA78DA8CBE
C2E6CF74853B93B427A89089E953E1E2F0364B9E535558146EA08DA0C652BCE0
1A9FA4A9F7E83E5A35ECC699EB8815ABFD76B252DA958829F3C7D61F31822B91
9195B5862C96EA1243561331C2D9EE7B65B82582FF665721196CC9E9DE49E5BC
7F4070BA732D56CE2A0B7759542BA952A714D454416CB94A007509B3DEE24837
AA2077762F4B71862C04384D39621BD0FC52CB938CB2D6250B9B5A29475E6D8C
7941A079B1FD89BA0DF0E23866F7FBAF466136460A8ABDC4FB7A6B0BB95D213C
9E844A30EF07FF70EADB5D360E52B0879E3FF37E86E0541451E2504DC6092E53
F92783E0AF62957C5F79B80DA6F7A9E9B5ED66F92F3918E329298D9F6293E861
4966D4EB74CBB3229F32D00F99B504DD1602FBCC202CC8046D2C6F867D0207BD
48FE8067168C4412FC80CDBA62F8B5EE4799A66A432D5FA8044190358D9A42B0
2D8D79081DFC1266E398C58FF8074C8E860FE132AC46A5AA4DD33561D6864F50
6D98DAFC5178F2888E87D68C0B8C9CF3C303218DDE862922A8F80A0DD8B36675
E83371DDD0804521CD931104741A6C9845338F0D171803EC04C9534EA7560311
2A781CB563378D8C5CB7F8729D436B65B80B3ABBF6F3A7A5FBADAB4FCA85D1E0
E9149E638845279D7D1882C85174FC32A61B787769985079D60CF71131977E01
B98BD4D92DACE0A7B4068772E5278DC1215183569F9F606219F17E801AF5F306
13E7A2C3D32301ADBCFAAE454977605D7A072513C78F710DC9A54F1891759DBC
520CCFB55CA9534511D08883DE4ECD76DFEF5D26165777E3A6AC573D7380FC35
63D88AEDC9A339CF931828B48A786E23104BF1F2120197E9029CCEC265896D74
07CDFEFB4F82C7052CA4B6D9562B4D49DEDAF13B1FAEA97978E66186A98D901B
B47DE5D3C0CB6239FB2D5B4AE3224D98927206B1397E32E2D63C350442E2115B
8D8EEB7C04319771FDCDC0F19C8D0285CBCE07513C22253B9753998B172BB857
A128D43EC71195255DB36DCC13A89DC815DEBD8D82FC9AAF598C88CEF2A15D6B
13B95692C2467A80D01B800831E129F0DBDD7BFBBEB8C1E91EDC4F4ABAE63F91
79E939E8E50F7BE4118ECC2CC40F691AE97489E86F730074CEF8E44EA7FC0D28
FF3E8AD35CF856DCBF0AFB088AEB39EE217541A4C17DF1A012D2896DFBD323C6
1060D30B9407C3D09FFCAD95A1C64FFBC6312A96DFB2B087FD918D3B0ACAB4DD
394F6FA4728AF2CEED07C4C304955D53D70756AFD54C0DF38C3D61071868A4CE
3EE4C9F842EF5F146D57D0287D62D1A34793E173D032F164360D643F1880D27C
0F7D73029F171028FDDF8B55093791EA7C2765D1983BD77CC4F02023B383E397
12D0264CB3CB960EAE6489CD6C8FB1F1FE5D283A981437DA8E17399F86CE048F
4C870A446EB3E06BFDEF95D17AECAA204ECC569F78BD73D380C572E5087A5556
397E485D176692361A09B1D7853518F8522B9D21C93BEA7C0092280431577112
645FA4CD45A4C459D5F7693C618A5993DA8F9F0E434C04CC0B14B0B5818A6680
7B57C9DF5BC56081F75C01250653512530A9EAA3BB232362BBD54993A73001BB
38598B98C22D00E3A9DABC4A0462936E42FA97182259D06005CB78305087DF37
9612E501BD37874E1B97916A78683B9A3AD981AB1D33B3D8C3BF7E8C5A4CFA44
553B25512B68E1F53B4321870D97750385866B1F923D80B19CCF78577C8065C0
08159E38B52F54B227A0C18DA8A43ADB7593E98E5E0C7519713F452774D1DF23
5DE89D464EF44F2C9297ECBF2840EC675E1354B3A8B9591B661400E4F79E0702
2ACDC7705AF6EB8DA3E68A7D3D06321D6DB80CD676DACAB1311AAA28A04F8FA4
3925639BEF4B041AD7722616B477CCFE4F4E19F17749048BE9FE976507B85FA6
4C9620FBB49FD4F24B11E7DF3C07DEA3C6E6CFB4F26A4B2603990736834B84ED
6B5720A8E52BF72DE7D89B9478948503286711952C3D3F4E83A712EE63AA3DAD
FD632A9621D26B4CFF003070037CBDE5793A1BC975B49B183F007E81DA9A798F
7F062708C79884896B537462AB0B27E20C9D3CF8D27B81A55DE3F509791369E2
E54C06B408FEE2918DFD868DC4480DBD82F856D2C05DE5DBADDAE7385F404488
04C7541E751784D52973F89341C7723D718EE15D3117574C43A8A8D075F4FF9D
F5B1BC2E13055CAED61FF851067307FAB0ADB527A5AC8388A0264C6A7AF6071B
2B9AD4A7D4E71CF7EC55A51AB1B4803CC515471D4FB80DF03D2BAF5E8AA097D6
A86EF230A314B3E55EDA5E61D1A1451EDD31135B78B03216A0164552AE036D30
935949DB8929F2E389124EF7F7E67189C32D8598046EF67D9CC27499F821BC24
5B3E266DEFB69FE32FC2649522985C27941C58E4F50B911A6C11B7F5F9B82BCB
01902D82E4EB6BC1D263A3F79FF9AA614BC64F3F70591B8E9107DAECC5D0D487
96C4835D63317559332B34FB651CC92781B4882D36D3C1FE65B2E5512F6B53D0
AF465F7316E568E305EAC163090F36FD0CA143FBA1C9F662A35F3BEB5A529B51
2E85E0C643C2F2B4BA15AD718CC5E605CD6C3C5A46E851536CDDCC32B1BA21DA
AB34F2A1CD801662934D7876C663B79E1B46B00F5554A12B671BB2CA1398F65F
D0A764A54500F0429E0883F53F8CF6F267B35795C7626A32B6E41849E355B252
1787F7A76DD68F7E5D640C87FFA05C0EA432E61552F957C636987F2ED81971E9
FC729AFC1E778A3C012D1B293C733E90B60F0DB14D360264AA4469FD8D653C28
D36EA55892105E54929F64A3C8A01C8DAA5F5DCA27C71ABAAA2524F7D33DE2C3
F202B96AB0C59A00DF442CD1F50796CADE8F0C39DF8F351E153B539BF8237387
D882F998D969E5996187EB83174F748F9F5C6E7C9E45C5DC39EE11FDE0AE7493
6FB0B1B5F204DB89A8805F8D77A933DF13534861328A5E4673A4B180A8AE1BEA
97194BD2AF25F28AD6A30D5AE7013F99DFD464CEA9BF8F1548BA93FADCA29EA1
31D482990CB64C201664D2D13D77711369DD518B9E0DA580DDEBC4B9FC00D132
8949B97B1C65115DF384C3FE28C017EAEB5CA8EC4897901FBAF7C899327A4C80
ED8F1CDA2D49D7672E195B09727629C1A5EFFDACF4DFEE91E68DD6A7471F79E4
C7B4BEA87D0B1D848B21F9B1A024989A6D9109144050CAA7960FE9A98FC87335
2781B18DB090FBB6D3FC3C71E67F46782301F01E3F4891F6E169747D0AEC4026
7FE1D3FD77700AC774EC43DBC0E10C70B7C2F14483E18E99BADDE9FD1364F008
8C1A95CED5A4D2401A80CE247323CCA5752AAF92BFBAC68A88FA66C49E1490EC
01C9401D25CC981E526F1D803C93B2A2A07D4200535F51B9CF26A817DE43146A
E4E04FA79AA91C814B18ABD2C55E639C1F80068C9B0AED83074C6270B177BAA1
8F1975F0E5D759C51EE7A31E4510F5196DF93DC22D53B21CC59EF1AD25F28AD6
A30D5AE7013F99DFD464CEA9BF8F154BDE44B33C06F6E50CD5E02F0313BEEF10
80B8E63CC100145EE1CF2600212964DB2ED1CF81F3E927856884C3C1BB65B5E9
E1260F6699D945A611A7EA348DB3C86BE4B4DB0FCD38B5901221B1DC3066AEFE
92E3FBB7E4176DAB13FDB286FAC18078C9EFE517926FCBB34E12E947B5120A5D
9397D02D7F1A024EF4D18D753C02DBB7AE3EA05189872E57D5B88BB9D233B5E4
7EEF26714A4CC8923A9136F58AE000F3E4E56446467C09F885630C7E96643BE5
3D7E30FF26A1AB03592F9372AF27DDEAEFF8B80E1A4AB3834143055A7ACDAF5C
195B4D4014AE118F07B7C4C930CD757FB28F8FD39312BA79A229868F2C81C2F4
55F4721435DCD24D67DED3C5ADF52EEDE57EF3EAC944D970B725574EFD751A6B
7C9AFE6196B3E2024B31F85CCFDCE8FE66249922A5752F68183CEB0C0D895773
952F4CFF196A41313B2A3FE4B50F3B2D61230D26B72776C9E82A61C7D79481D9
1814C47A0A3BFAF7465542D6822F564EC4B8F282AF59619638A93EC62A029471
B6078CFFD8AB99B3B63D78163F227F1385113B9D2A2F0C56DB55B7349E7CBD9D
F99EED9AABA70EBC005B7E807A854FD70F23244F74336231E9136F61962383C6
5150264A443188410F1CA9AD8CA4892D103A1F8AC88267A1B6600190E9DFA00E
D203C9F199C8D54B46606807DD209828B487303573B0D237AB3A9CE8C36492E9
9AED33256A1A6F3303F7A87BE1741043EB837C589B4CEFAC955BD04F4BCB9D5E
DC100A5DCED9628B01EC6F47232DE5CB73A83C1B82D1CEE1A00BC42B92571D1C
B29505E041FB5D15E78F084A1B9DD9F45F7F5D8BA3FA244C616DE064162ABED4
300BFF344D46262F0331241D87492D92E8936325CF2A102C14A0086A3A824777
3BF93CE143AB03DA13405FD339E7F17DE268E380CE610E6D9D1972AFB8659527
3E193C824705366A2DD32C0F4AC6CE4AAFE63836A1EC53E443C157BFFB7B901E
2D1CE638FD0D280DBDB8E20C47C7832C9671E04C9E37D08F89E84B1DCE7F2A0B
B0078EB6BC83820C06862DAB8EFE4893B9AF7EC84F69B0C95D4FB120530AD2DD
9F52E223FD098660B344B76A7FE3FC83B58C2D1E30248B5410C7C68DC45383A6
470A21648D9F06AA962C29680C0EF7184211C879D1CFA2AD39885649818DEBCD
A7CA7D3C3A6403B9A7675DC69ED861AA0478A60970305CC39BBC3BA6A8099856
FA043E143FA1A5B5F00968A8DA48E5ED3A2BA43BA9064D59C171AE87BB22E474
4FD26EA55892105E54929F64A3C8A01C8DAA5F5DCA24A7B4E52F30E55B902ACC
35DE87E70DE8EDFE7D803CBEB9E428E2E96E73CD01019E64A01054E5E94ABF52
DD9EFF0427EBE3F8C28EC36BA0E331071D9B11BF19F5E6E01322EC7B74F1E8A3
69DAAB3305C440A686E566386C4BC20AE0FE9CF57C6AFB258F73816CC190CAF2
5D9965C88F9594F80315901081B98FF3AC06F5C24B6A33DC92C2261C6222A84D
10CF5EE66EC13A71302C6786D05D4197E95ACE0EC7494D4247243DFA8385DBC5
760B397F0EFC6780ECEC244A1F30330B1C2495DBC7E205C4B0C7F6B19DB9BFD9
6112F27F9B4CDC7DC12D52AE6A36620F4FE5B14CA02F60B14F474E9D6CC7C87B
4FD6EDAD6F6F8AB10983B65326D7E2B9AC32B3983D26857286BAB3202D09F51E
5D893DB3D468C38E8FAEC54B50AAE18B4653555ECF1F6CB580E5E0E90F580B79
54B91AF65067C3C491CFCFC20F9EF9B7CB7F1D174B2E94953F541C3B84D43428
6DD1B5C4C56944521E76439B5DCA7732A29F37A08F1A2A1FB4E7A6CE89EA7C92
E036C703AD5C787C37A4430828C44D874EE1812B3F153E63FE095A87CC113B93
0D6A0A90C45CB9FB0D893F79F3230443D11313D6EBB9369B19CD50EFE1EDDF11
4903155F14A3D27477386B661C6459EF6A8492F020E67407CF321E01EE8F2811
A9C0A800303F0722046046DC94B5017D456E865FB2E416C4EBF62D87CF6CE663
57C4904B79B704C799AE090C2E12AA3667DEB5AE7DFBB73FD1A0039F86E84890
03F84951D87FE955B227F74202FAA42ABCBC4C8F87471310CA26AE9429BDAD98
8E5147C913B2E2A96821ABD9CC0AEA383EC8ABF7DE287FA97D0495E28CB8E2FE
2A4CC0B9DE515F7639622660DBAB749090871FD2316356C3CF06A91C423E8BB5
CCCCD5FD1F4EFDE44CD22214DD1C4B36E9D261249BF3BD8484D4C450FD2CC53E
9D5D933D8D348873F2BC98C00EAB746B3E6A119B0E7CAE91559DC6A5B3BAB60B
7DCD5F96C0B1D41127FA6FD0E462D586D2298E6DB61197605D6577A03DE99BB7
8A0AA1139DF5414824E7D72B4EC7BE92DE482C8FB5537B85222094CC28A53CBD
90FB755F36FB252F0335FB50B3370C94D0AAFC1CEE5C1376F02A37C14EF4FE41
6F8FB3B918C454BD5774AAFB220D5022527EFA589455B7C07547E3BAAA4AA7CD
8A238456094C22BE50AA44C469EADEE3FE6E519F3DF7A42DCD24B818942E5AA2
C99D424B8AB1F5A341530C88F64248086F20B663F5490FF79AC9C6851E779043
D6DDBCE84390CCB304E5A7B771CDAF55815279A3B8306D923FD97B222C97AD9F
6A941E5C554000A47EB5D9E377BBC162A89E871A00B9B346B62199A1AAA40D8B
35AC2F519FA7A9123A70E5B8F42D90434A48E3F4993DDF5FDF93C9E21FA1EC0A
CB4D27E6C934A2155DC2E79631499FB05BB37453FFDCF3EB4BFC854048483532
3410B2CF4626600B1F8E8118662259AB0CCC303901A207C83125D327B2769542
A31B0BE8A05CA56FE842051FE87EC913E4094304B434EE7A5DDFC7AC37A6D9E4
9F46CA0B3AAE98A934A36DFD2240493803D47C96A2745580EDC957AC4291730A
86EC4A4182329F95AB474108A296063BF7B01D5F186B2E093E82F0712F57138F
D0BF4DD5993987EDFB19660637741BE8D98416D772984988C4219051A2214B3B
FD198AC85850B173C7EA7ED2705E70F62B7A1CFAFDEFA9CDDBC45DDDF5DEF3AE
D93DB4833D4DE82386676CAE2D18B84333575A237C9637BC3A58D7BB96AFD1BD
3F1808F701A335B9FA7332AAF569948EC55BAD355BBD85D66D6166F8D6F0929D
5D05E540124D1983CF4E2EC062206BD4502826B180CC4F6E2E9E73D5148A0EA4
3D89ACD8EDEAAD8234457C149A25CE9F8E3F4F73415A620F8F1D9563FE9CD897
B19C6DB033B5C6294AA6F5B93DEACADC3D74931DF11F8F2DA6B617473941A1ED
19DF2F6C55C067882371B36819ED22A9E83B7C851AAC3FB59E4C7FCDCD4BE637
C8597EE5FD1996F8AAE791FF65FB53F78C6F639F55A1790C3635D75B805B4F34
26C6C6E12E081339CDBD461E5CCC80405EF270A816607F248C5C1D5C56035A8F
FDC8F3DE95F1F507FEC112903F2439C1E08D8924BAEFB2D1BECC5EA35F7C4AF0
39C7D12B6BA9169218D70EF879255E6D7B0D4E3F7174153A5D789E88984E0A07
EE0942CC8CBC6DB7433B1B871A62E60353F613EC6187DCBF7967263679C8C367
5A673E6E6554D774D715491E2407EF7840DEBD26DA522BF30ABD1E551A9276EA
210906DC669AB337A41767EDF87245ADDCD1E94D2FEE120C7BA60A464E7A72FE
D312680E7155F6CD439AA96488958D280DE6EE3E50C07073C5F650547746D396
93734B16AB45A183B45857E4B8F9D6695EF332BD3BAA9EE551A4B142D8DE6DE8
9D1BA848F9FDECC6604E7D488ECF152B69493A9A0A8A7BBF8E4801DA35056CA0
0B0CEED0050C709C5F3E7C53FB4FBAEB6078B410935DF7D6D5064271899310B8
7CBA63800A37B6EDB5E58E81BCA267212F3D633FB8598D3F2F175BF705D4F708
9B2EBFFE432B337B76C0863B38A3AF14DD0F6D8741C2E06E6011FC30FDC6532F
CC7F3D2A58DF176667500E58782156ED773734596699171559DFD21DBE1EB344
E7ECCD28B98FBB721C2095CA9DB9DFD4673958D4D4F1CB3CD4D6AE55A5C48AF2
6AC803908EC18704FB8322977A15C8ECDD04BE95BF3724E4764D041D37D1EC32
C188F311A107CC79FE5120FF3149465D40C2834C6D68F3A0B7F152A9EACD5E0E
0D21CD6BEB763CE338A0A9D593462CF91C1DC3D228BCF7E99F93FFCA6A27BB12
FF9B399DB1AF4BA9A5705502F55E4CCF721BDCB9FCF3DD9FEC9D480599090307
21E8CC5D32447BAF3896E4A38C1576C9EE90FE9E0A9F5EC4928A31B813890836
371F7864291A3B3F753DEF98426130A132BE546B05E234E05E9C82777BDE4191
AA254EDA92887905BF33AE9FD2A364E65BAAFD767FC8DAFED6774B61B7E0366B
B5132981E7111A7668EB5E73730A4F8DDEAE362896AD30511AC6077F046C5DC0
D0400E1D29B35CA24FEA1E4C71D8E14AED4F06B3F1FB4AB16280601D4308FB33
E2B90CD3643461C090498AA7064CD84DC256855A3DFCCEC584E60274C80FD891
9AE84F31418152E3EF415F3BEDDD35FBF1B082396A17F0870204E2DD1FB9EBC9
448B8D0AE4D2F2BEBE39239ADB477FBD2B0D86B7025004216F6017E347DE8BD4
C3C7EF12F4BAEEDA8DD594F9FDD3F0341AC33F871D66D40597E4F20CAD0CC21D
2C3A11820C06B89FE882315994E7704F256531E5C82CAECA85AD750840174A99
A2367CDFA06D801B1588A55CD8FBC5B1A74A1F90D104EBADB9DA093211734428
05CF8F8F6BA06F1B6C9373F48144954ABF8991B61F0FB7E95ACCD3BBD200E078
01F2A7157FAA847DA5E22F00136F21273615D1D75B730BF1D7F063A8419830FC
907CDEC4ABDB74182DC5FBDD0536E7C70D3AC58AB2DFA3EDD496C18C8974E85B
94484D5D8E1304268CD4715C7B381ADD4976C0C8525ACF78DC7D453F813638EF
A565CADF3958184CF236FF2FF91DB2687D13CA64138054D591B1C7894E2A0D72
4995EF08F00707EC53E1CF114795631E3B14687B9E35196EA8C1CAF14A0F0128
05FAA4DE2E937E03744732E3FC287CC99ED39EF436CBA30F8EB1A6E543782DAB
E3FF83E5DE856B2386B006A01A109A8C8A833C61B9F1ED687557E2449DD0E8EC
1F8B9ECDD722D466D2D453E1F5D3C9F3C796CF3BEBD5F6E892F91A4B3291F219
0C5E20A58FC99E7B93748B7B0B7D5F050B809C36455121145BD772CC4C3ED8EA
BFF2230567998B58154582EE093FED8E2F79999D0D5FB2D1F10866FB55664AA7
D6B6CA4E3866DF6F25481C94C0C99771491E1E13819CF6A11897CDBFC25ECADA
33E3F6D66E6A404512EA065022CB17E62FEB500C2C5AF1427197EE6637F53912
3745CA88458114AC473001A6EBC721B3AD347F9CC5C2A27C33990101BB5C18BF
8300E8B9ED08ACE959392226C2D9AF99686063A3B951E33C7EF5F1AB73604DFC
C2AAE3C9DAB2C3FDC4982820B11EA1FFAD6406F59A25291292BFF6E9F09C4DCB
F759C9FF16A8E893C28EF549CA3C0F7C816D19F4AD4A5C73718F38A4E67E61CD
7A1713DE7AD5B63B0A7BA50A40B29FC17AA00DB566B2EC94DE5934CE2EF7C23E
C45EA8B7525DAAFF7B70A5414E182FB7D57AEE134DC3F9A71394B4BFA8CED0C4
1664DF7B5BBB015C15E90E9C96373CC7E6BFB2E25C8E5EC1E76C9D065EAED9F8
1E705C8136D99C5BD8C57AFA1EBD9AE6E949DB069E5F8579D27658A448FC502A
8DBF8D959B786221774A27EC6476C296EE579D2F20575F4CA3B9DA9E2DC2EFF4
9CBB4722FA30319B8C68F8F7DCF39E5FF7ECDAE3884DD8E0E9C7A5FEDFE41F81
3357F2002FD7D3BC2795CA29E315E9397ED241D48F5DB2174A712F0A1E33ACFD
F4F850DFBC68836D6598FD8B539BDCA02A0A1C3058ABF1106798FC39BB81EC7A
1CEB5D36BF344354FAA9B291ACBCF9B740335802AB247E9FD612C7762E866A6E
4C83D0AD28B3180DE0FBA6D2813AFFFB6256C6A72975F6E5AB21231E0E136B9A
315700669D9D8A3D985F44DE6070E8E4AF619C8A0463541489F56666025C854B
28533F3D64DEFAD31A1BEFC3A15FC3CBB1E614186292D44DCC6A69F94C1BE958
8697B33CC8C54E71E075F1693EFA5483DB7DEBB520C7BF832196D27869EE01D1
69FC58F743CD16C8F0A30C58416EFD2327DD0406D7E014791771EE369B64E66F
AF661F75F9A9415D03C8D92BA72C28C2C148FF488439DCF5AF83863CDCACA331
175F46778C3202D3D4F36FEDCE60AFAFB39332B22F2C43C3AD99954E96E39B52
434D8FC25A26DF835CF0A83D7BC91AD4E67CCE7B5DCCEE35431B1144E5302C58
4C766900ACEEA1303B6B7283508FD953752DE044C4904C375AACD66DDFDA88D5
3E98FE28B70E43B7C69F2BC1FA11191A2974874205A7DDA96A42B2D492847AE5
7C85675CF04BFD1410B56E616F68C39329AC3301F7E9DD385505F1A5891D6AD0
D0E3EF2F19C66D2509FEA05F456DB473994314820946309081E82621D1B79F8B
534954EAF50FBA1224AA3BF50544122F3662354376F998E255DECD92AEAF57DE
294C3A61A645A681C23966AB83B4D93D4FC5D149AC96A8331BD6A50B93FB0806
43433A0D2F5AEDBBAEA7C0A6D4AC4C90FCAD1A887E071087DECD4DB7E551DF70
32C9C43CD09F534B07AB5996711300B4E28756F69F8B6933F20AC25471C19ED3
B2D16493293F09EA311F4929581D3E2EE1E2B00C53DF9788B45591972391929A
1D45F27E3F89E4F8417201F0D2CDFCAFAC06766BB5ADEA1F62D09802F18C584B
F5F2330AFCE8FF92E2DF9B35F469A1D1AD50C3314D6CF5FABC872BB7CBADDD96
379AAF858D42D31AAC43F4EC19D387D38B78DBDAA0645B2FB1C9E3245ADA5B7C
80281E3B8177E30458C0E8F57E41C25DA1DF67A2DFE5DE21E630125AE03ABBA7
5B3C5272D5BBDCC972845D4664D911B0E64203574E588A6F1143DAF2573A8474
5ABC6D79FEC5A3BE33A9A0285EF5BAE463184E92A24DC07A7026EBE9E2D290B1
EEDFE0322838AAD2FB6F562CF3FACDBC455F5007030A8DC866FAF4CCC70AA1EE
4BD71E5344F2DCAE69E08F1BFE2F05C317E60CD87D8622BCFBF2709E1050E430
19FD6819999E1A5C2FA63A47940F5252385EA3E898611BA9C4C8A5E0A6AD4E40
D9A928D09FF6795A31930D91424572A24EFC245742B434A82034432EF4A7BA26
12F343751A68EA6CC4FD5FC02C703EDCB1F8AF334B793677DC9D0D6B2CF2ED2D
D230066CF987003900359010AD52472E97602424CC86C8245A33F617C5F28A57
87ECF6F5E76A133661B6DA9143D448C59D4A6E1D3A4BD9F0B7E0B28447E74136
4E315E7A1509311548A348C48D19182D79249080AD244A961CCBD0A6C4B22D5C
02D1E02E3603E885A6F4C9949F4D5AD4FA73204A4F206B13B702DC4E76A76885
AF0B09EB7F8774273C9252B73F1E4CDD4912B3995A7DB9B4C56C828F8583A979
A4821E48802F50EAC63D9917C10E24B9304C2B6E99BC9902242F0363BD8FA398
74B38A5773E6797686644768404F6882273FB569F825C8B5CF477E5A66AAC618
CB79AEC21E85BF1B65FC6300B048FCCA5DA7423FBC722485BA50072ED2124E0A
769E95F93F6629DAE30D14F1CB9EF1056093B854BE4DABB07F7BB64332BA41E5
84EEA50F61F4C70D353CFB11A82E401A42DF13634343E4A666C7A27E6AB0968E
0F2BFB2C8381E13CB69A288CFB8408890ECB590527209D19DA50258CFA1F636B
0C9C441A03AD99788F2C055E1A5AB5B114CA693BEB196781C04C0A6EE75D2746
E69AB8C4530A1BE5182B4F95B4988A9F5E686E357923D654FBDC140AE17DE962
63A6CA5338F0545FC28B003F1AFC72A01C5800D5233F46E4D3D830E9CA83BABE
9291E590F24481280A0242E823E22A4E32669BC829EF1B7584A7D1DF64C6AE6F
BCFBD9E9879DE2E51C85B3597B747E2F440D7F364C4030648BC39783FD7AE189
510DB5788EBB13FF9A22A528922308C00CCDEBCE60D893C887B0F2FF4E4A58E1
7059A66A66132D35680501A47FFD3C21C5FFA47F843A6972A781290D136A9B5D
69A31D428F4F003487ABC3D34172433CC652E9B2516AD0EEC9F4521A273F7328
F6F57B13A373A9E0DDCE6E0CB2008467372E0C2077B037B0FBA022555B0FCC14
21A0B660B7381800B7E7FF1754D70709127DE32FE92176B964274E37B45C5844
49B7B4737AD52783C5737C44F9E81FD41745809A37FB996A48A34BDAB4CA6460
6FB209ED35980DF79F5089C10E826801F1DF4E6A66AE2E78797E9880AD30315B
535018417C37FFED36B95995F7771FF6012B974D2061E7418F3B9E0ECE8D06DF
CD70D82772F56C044FFCFFE868A68E84D25B66B5A129C6EB45718D8EEBF746DF
1479C93E4BB317BFC633E3FAEE0C43A403D675816A95031288ABFEBD9868C847
F2EF773B62E31DDDBC2AD2B526C64DF8400A1782A1086F10E614DAB03DAE4B51
0B39F1E3A64CC661DA200D9C48D979929FCFE04D83CF33485A0ED2DDBE19EE90
B055D664E08E4D020527450B43705983772BB89072B23BFC19B9068BA1AD4B50
D9D2E025E00008D3625C1A4A9B9AE2DD4A7E15B5E90E5DFBC1A171A728EE77DE
C4295E388D5777C3D652C5C881935DFC736CF5EAE91652675CED53147A5A50D0
7DD67A01D90307D763884329B91924AA554CF3CB059ABE0DA5EE7AE080F39D46
61D4557C54BEBE502DD1C5907D7426961FA71506FD3C7D8649CA54D9A85449E9
CC3291F73F466C037636DD2F6365BFE35C63978876D8DAB0C23730744A2343B9
BE781702B08251805C0B8A6598E644F5A83218FA43C3D18C068FA8426914708E
4F8A9BDA0BCFC2F517A615D9C6A247BB6C62857312BB017A3FD3BC4A69A375E5
B63D5A2C7562A335345A58B383E3C1E375E92261089DAAA7D8550343C3BB9110
7DF7E3F4EB1F65B37D48932FFC8C217849C0D6EFE49E293AB82742140DC51CE3
BA7314B14B8C7BBED4AB2A74C045E988C6ED47854597
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245AC583FE784CD69B918457FC63ACB5FA24E41
CAE39AA9386736476F5C0BD3D01ACFCABB35BD346B884B97EB5F467C93A2FC7F
82A0B3682C1D7B0CAE0165D6FE43CBD8FA5C85EDCD122FAC36F59FDA7CC4EFE6
1F9F8E88832737186037F9E5AB161B8A2090F5569529861FAEFDC91E823E0A0E
A92E7F1118BCF413BD355CD844D0F88C47B267EAFA1585B4ABAAAB9BF885D233
DE4656E4CCC1AC1A5762BE48F5FA88A0020AF17A438014B5902A55EE220152C9
0348CF590A07761415D2F53A866C95D4A6848E2BB7970D176670F9076591C0DD
C1AC4A2265D14B250700BA8C090AD00F5234EBC77E5F47AAB5DF5C1A7A846D4F
09A471B3F9DF5E867DB84FB637BAF593E5363FD3ED2665ED1B969FB0B6CDAA44
40058F3464EAD10C6F0DDF513A630E0133FEC808630E4B3C9893C7B86193998C
9AF6B6EBA334E42E05C376CB74FA40B7457C36BF9A0846A0C5007E8D72ACF2D3
2D1844D17A9535FDD857AD224A2DB7270781DAAA348B1579564170C92D7236CD
1D190811A5415400544C7E063225BCB091DC2E115B55C63BC441A7E97DAF84E1
432877FE98804986A69589FD6AF78BBDFE0C6E19308A76473E6FFB4EA96FAC4F
BA9D76D03499B94CB858B497EE8159E617E3588AC72CA4B5EDA2618657020B89
C6216D260DB857CA4BCDE16CDE2084EAF7D39C885971AD19A9EF5780479FE543
0717C47DDB32B6600FFD02AADAFDB1EF446BC6A93B93707A97E5579627E5C5E2
BFFFE810F076D007D8F6FA8D679A369F3857F4E709552A628CFBA4D8C45AB8D3
592023FFE1E39D22A289268549F618C4B15DBAC1C134A9070859EBFC087C6044
29E2A0B278ECD257A59B4E458E2131EF1A962D7C9C2C43FC48A8F1B150934A2F
295E014E16978383EF79F5DF6B0C7E5429D85ECB4657721BE3B321FCAEEE0AC1
EDF4DC2F53EF6EC2FE4991310450B9D3D68080C34E23E7DE23E69F5BD54A63D9
B3624C45D763B5A8B1068D6766ABE903AE631A0C3D6DE09C5544E3294E390A9E
F3FE4FD76C7FD6C9FB948A9C91DF338940CF6E02A56692EFC27E7EF2B30143A8
7AAB924D5A00EAC077C3625C60B6673B52A3B0A1B1D701C86A36F01A55128A9D
8C34A481CCD23FD730BDCB590D2800BD021B677FDEDBA58FAEFA4AFA7E6E5942
60CA8D49F7ECAFF0CA3B0D4EE67435F88B87623814994F87DB65F4634D0BFFC0
F7BBCC1241D9052D11BD7AFAD195A2FB52E3466BBE1B700BF45228718E472614
B3D22CA068D341D5AA9FB911879F9EC550E72817DEC0545E65168F9D7617C266
1F71B0C27BF0D65129B0BA90B4950CFD036FDFD596561BBCDDCDC939CB6209C9
D92CA4F5FF74C9D645DDEBC4B5B31B045C71E5409303B58636EC6857FEB79E54
7AEEE4E80F7679EA6048B99936B703EF83D06DF564BE2F8B49B9CD2AA34D14E9
57976BC28B65B2AC4D50AC184B8A9A4DD9639777BB4568155E96EE702F6EE8CF
7CABDA4E196466429F975E14C3F96DD5715450BBD4A8BFE0D687775CE38BED46
2B602CD06C826D09FA723FE91CD555E64B9F14C2A3CDA46149C9E919574A2A78
497226C7031AAF8B66E896C6AB2022D22447C4D11352B6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE27995D78FD99C5784B2B7C7C509E9B93BCC29
35CD2714C50B246A7DC70C99B7DBFADA1E01B81749EE49A70853CD45FC323019
A45BCA3DE39C3E7618C6322D264556FD657D9270933D8B167D2575CF146336BB
1C76735F3B09470E40B0624E52F21809704749F6D81E3B829D163D9F61E070EE
D8CA803E56CF227F71EB8061B83E035C7138A7CFB6D6CBAFB766754C0E8934F9
AB738930EB75A2713CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BBFBC61D7D
25524B08C70599D58E7521F58D26AFECE212309BD7BCF62735379ACF3309DDC5
C3F30DD7D3A37804BB23274D7B30DD69E1B2C3CA70F2F79FA29543F526BB808F
04609B43776382C4389362AEA7FE4E03637B4599D176F103143DC04D5B5E53D8
568E7911839EB05C8F4A9E9C911D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D4
7450B1FD87B119E547047F43E9CCDE1C1F8645DA03EEB02B27E36BB6C87F39D0
505579B2D0FF4DA9D4AA971DB4C82693DEB59FAEB3A14C1547C6C46C24FF3513
EBC97357AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8330499FB4803EAF74
920BAFB89889071729076D755021515BD8DE5177013854B10911605F872456B8
F504547AE968C323B85DCAD9AAD5FC33F29A921D427EEE0E098E8591EA7F2D7B
A5CD8A91C01AE80B672831C286C900AD20776B50D4D2004F7295D860A2974B73
A9E8B594BC8BCA8356DB43399E6A6918A887A64B2EEE98060E47C0F371681713
13F92A306D1A7DD5FCA29CE223138B98E6C6BE9F3B305E2E4ECE098AEC270F11
2CADA74CFF4BD78C5DEF4354211E3953CD7AD90239C1FFCA061A21652104F54D
4CE1C6B388B901F937A299F65C3217180D4BBDA87A96F4C31014265EFD9206DD
DDD45DD3F56823BF8236F0E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0B
1D76EFC8D22A8E991888FC44FF9ED2954B7A9DF5CF6F256C8A86C3D98CADF1E9
24E6C6725EDE1262199758B2B070504BD81147F35D8989D2CA44BEDE6B8BA09F
511388851B9D9865887D4EF8AA7AE6AB234B252A506EA2EB59B1AD40A04BA972
EC6DC7C9E4ADEB7E40045F10F38E0C8D50CD28D96A028BE7C67D1CD148404CE3
0DE9213AC26B82EB823194818E6DE249207343C37BE9B926EEDF21E1D52251D4
37D555CB1FEF227CD15A08CA2A245C3C6508DD3592E809E0C72380B92F4B946A
7BAF34835CAC375077A843F61978AB4876871FBF42DF8EB5F877033452F08D41
970883CD836D1668B85BD642F7F50AE117B3ACD1A1372D5D4D2555A2E8E23E29
D8C8C5F39807B5A01188DBAA07A27A116C80E837DC740E86068952F0A57E9027
C39A603A4886213EC782000DEABF71EAE1B8944E2EEF19E1F7FBF442840845EE
D13FA9B4C5CB1FDE6F0DE20AAD69160BFBDA23C2D29311C4F82514DCF27C6B94
A8E727522E182DAB2869CD2C2B0F39016EB778060F35A6FE085A1BDB04A65CBB
6605D4D72E11338D87D5B0283A4B81EC83D03F502E7DBF202BA558B4EB271C57
922F0CF3980A02A40CEB2FEE42B631C999B71EC234FED7B269E5D91564F0AC54
D70F8EFC63B94F73ACBB4CD279716F68783C493794BF12502E04FC52064E63D0
05F2034A1E7E4192D1193BD94E99C0CCF702D9EC100066E1490894F5ABC92A92
C3F42F4101AC88024884C018C7D0DF65F7CEBDD46FADABA26B5433D34C2AEB07
6031841EA02F1C9622E0B64CD190A4AF3020654123563C5D6ED62F112077A1E5
88A8C8499A8917CAB23F00BC124FD93096D2603BC6C1734124CA3176AB14F488
26ED2E56C67571DB18177A07E082CB873440C4648D3FFF06A1499A5C7EDBE172
1759C1BEA3DE43B426C5E175B059005BF2911E685D076FF12D01742E9AAFACF2
CFCAF0517858C28A24FFEB5A26E46BB5B788713FB8009CCFE62C17E001C96636
A8DC58B71D4BC720F615D2873CD11E06DDB3A7788888A8E713D0E82FC861C0D9
ED98E873821095C6BE6CA909BCEB6C9BB1B0730BCBCB20E22D06AD1AAE225D51
25AAA901A78E86386D29A7CCEFBAA8F35B4813CC9D289E5244483DFEC10FF237
E38BC8E19B81502A19E0BD113AFF02F4E365A4708189A7BDEAB2D32A6E464AAE
B3505AF669EC3FE5A7C9320D907438DB23A82D8CB9777BECA40890C137564EAC
CE768714D7430BE1825C90D88DF40E753607A06AFC0046335F97A2FF20EA44F7
94C1DFD6B105FDFC6EBC6D5745C10D2C3BD560C939B80707B471D13D7A910F23
91FA6B63F2E6A01890368EA8F0D42E7A93B343C664BBCEBDBC0C99138A50E5C0
F57977D929DC9CC159568FBF5523D79229E9BA352E4193A44EE745F76035DBC9
34588B2B8FF44C8368C9C69AD17E91BD78559AD4BE219C8B110472F95FD5CEE1
A7EC2A78941AFD0B102C6CEF9D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF
9FC06879D91DADEAA25F850083BE6CC26AE7437664ABB66CCEEA19D0BDE898CF
328861C3CB4423FD2C0C1AFA95A6195FEF30511D5C87876C863364CE4B089A97
6F9C29A14A61785C42D2C746A98194782D9A504B2A0A92D4E4B5062855A33404
2E14145F4684AD22D461E740FA8DD232D18E559DAB50A977CF474EE1410D7097
785D120CA5C6E051D096CC40E931BEB074AA9E32BBFA361593C78D0D2EDCB1CD
D560A14E93017099D24663633B06BBE3C20A2718C044731B6DB8007749D1B605
F397413DF968722DC03BD138B0559D3E5887B7EA9C9C54F8335F55CC3F1B9135
C70CD0214CF04A4EC5AD120D492F25CD6E1E80CE87C5709112938ACF9BB2E011
87FC035CEA0FD5C1147D41630F1CC9B82B395BDCE1885A1D5F3441B03AC321C1
5CDE681DBB192993B553048C58C55F0E420DCEA46CD16B75173C5D37047E511D
C980EBD803E01C35504C4092D93AE476AB15324149043E713261671835DDF160
4B8DA000941FC5F85C754D5132402A0A94EA3D0E37D6B9890461CF1C65AB7C2E
E42288BD17DB983600580BB1513D30983C4FCDD1836FEDC80308316401D8B181
EE2A3B114F68DED3488EB9ABDBCE6E73EC5A0AD42D7735045D594C43A33EA29C
BE2AB98CD0305DD935D8F0F5EE3205A7576650887883B3C9AC23E217F48154FD
6CE1454F09486B47A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF8B10F578B9F
F66D78D738FA85FC454C23236FF4B665EA0E6210060F6439E9CCA612DC7ACE7A
D12F478F25D40CDF7D23E3E543B75A97A7BC960A7F742A2C89212832C36801A4
C384B89A91D53E0CD886C7BE0692CEB0CF29D9B4BD53E08D9FC1A863599BCF9A
717F4DC319B4B59AF009C11A91ACB087542F94750DC53232E62ACC3C660965F4
5849011BD76FF8489964A7848FC6F3CFA44B7F502649EAD20FD32FA1999CB88E
A646C764BD2088A3EF00A4F1862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57C
EC6D4CFCE0ADFD99BDC3BE161F4C1FBA9B854899BDB7E9D09A1E25A95E9789BA
DC6967F96E550903DF9B81969E38FA3DE2A058EE2076C77C33A93F2FBAECA0A0
EA98FA4C3D1F8700B04CEAEA603A0833E91FB4A44AC83C4E86308B6E89C99A84
8AAAF1BD143560B559176CAF28B1D8B2C8370CBAD5873329B24AD4A743F2CFD1
8B26B1128AA48F72767FF2268BED8317FAFDB532191FA35C2984AE7C50481FF3
126BAE5309893814BA28263EB863D5E6F01C423E6C5D3289B152CE19FDB55A11
282FEEFFF3E262F26041CB1AF30804A3CC34C06C6FBA8AED582215711B0A17F4
1B505FA0B5F906C537EFCDEE4C69AFFEF89B74C5B83E2DEE7642AA85B1615F9C
BA1C3C3197223C98A1ACAA495A6B8B8F1919AC158DC63FF4600FDF993CE8D2E6
3DAB7E352BE200322BBAF6DDD2628694612A7790EA8E1836533738405E9B7AB6
9DC77FE9A283B3A8C6A3651DE8AF71499D39CE0567AEA286091BEA9D6A443A5C
D35747785C433D4E18A02ABA38F55742DC36E4FF07A656AFDC3D0A32CFC097B0
5F9D90CC4B614AE7F58F3BFAF22EE6821291164B14DA11FB16C0E671A6104082
94D05830E44ED3E9908B59DB3B3506C60D3F766ECE69AE23369AAC3B5951B557
D62C7728D6E3F13BE05939C2A6FAA336EFA57001DE299223DDBB333D71003681
B4A816B378AFE37543607554F1F1B427784EFB366CBFF1CD7CD5FE3CB61842EF
56F134AB25DCAD2BD08AE61E233FE6FA79017D1883C61EF0334681CCACC5D024
F39309DDAE717CDDEBF80C88974D717C4539732DAD1226FE504620FDEEEC6266
41060E55159270B4794F9C0945FEAC295D17B4E252D015910B847534A519CFC3
2D52169510940A9E9AD636AE141331BE35D1D5308C927BA3940B773F20E5B3C7
813663D33205454A1A4B2D9173D593615C4459845E1AEEEE1ABCE3E5328D3F81
11610DB32C86FF6F9DBA1B8D6BBA3C4AF64523F37F176F3256E298D22DC5F1CC
F1A67A355219E2EE13D5D6369F656836EE0A77206E8236649E81A1F0E02D8D3A
3C8FAAECF7839D20329CBC5ACB43482D3A3A1E9C3A426BC7FE406E89FF25FEB2
34CCD7F3FB3C608FF37988C7DE6A41FB1020DBBCC762F2BF24BF424BBB2D3207
9DD408226AEAA0C4DCB8DF16CC6767B0BC73EBA052FAA5311407ADDD4BDB1061
3A860B10D2C219E96E61050B98FB04425912F484F5B79B9C0735F92C1B4353B0
76358780D1547206329F302AF6853E5DCFBFE199A76734AEC487BBB103A8547A
0090F0342D48DFF9EA9821454CB759B3D82921AB4B9278E652C2F30A8A121781
8CFD111E32142FFB160DB6422A5884151A4671D631260FB1758BAC67E14234D2
5747F1E68E0C36FEFBD535FA5C64B046AA8835817140B76DC22B5453AE8F3F76
C69B9F10988BE7D061F539CC8711030D2483F752706E27D43E3102CEC57B8A58
6D3FF862999D20CD6BBDB23762249BA7031D4D97DE2280C10756DAC422F0B747
E427E5DB0B265FDD57193B8E7F00C2162FB111DC4972B51E59320793EC60AA3A
F4A3F68AA5E11F657F898F59F67E0D285167231B9F444D42F17CB182EE584117
FC81DDB5BEF8EB957F817C5699C7293E47DAA4EAD6D47F00FC6443EFCDCCACE4
627CFE80E82179579BFE305B9AA1770E8E8970E70524F9F7AE081E64AD1F71D6
CC6FF054661866B68CCC383E5403F0A734ECAD86937D32FACAB6B04F3F9ADD79
94C11CE94999A3F38C88115D6082DECDC2125A4643102DFD0AFCD8682BE5CA11
AABA54285DEB171209CC4CF8879A65088C7381B9029B67CE9029093EEBBAEDD4
403C382D29751340F63D14C45D0C8ACE829FC3034643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256D29AE0E789DBA81CB4DDE7D4A970A3162D903EDE2880C20DD
FCB205309DA145A55A2C6763E0D8BC8A0BF42461DCA1CB7E613647A93FAEC756
3535886E28292A422264BAEA373D5F1AD84FC79DE23E2BA52D8EE1B1D3F80318
8614D6ACD81856288366086F50154919E5C99CF62A7700E896F5B69456110B9A
8BBCDA8551C3C14F979F3CBB597AAE41210AA7A444428DD055DD35D91A1DD465
3800988005F542BD304D2D1798BABD827BC8A689C3C35078CC3502DEF40DE082
B544B4AF7127EA6D5B8FF5A0735257BE29E36A29B707A51A697A4D8A360D4017
19C5FDD791A1C640D47AF86948448DD00039DB41E9C5BE1A7E6BB48920932280
BC552ECD04E2C33B76A0F6172098AA76CD4660980EFA1C84D5348740B8A4885A
BE1FC79E81913524DB238155870C6B9819E5842664A4049499CAFA7351D3D3BF
FEB9A51236038D4452E44A34F25718B7158C40F12ACA152F1EE78072533F8900
CC3A1869BE48305DA62447B28A45D6F516078C72A4B155A2715B713EC359F680
FCF2663644C985191135F0156722F0BF1DFACDE42BEFD5278ACEC4A55F1A082D
537B3C1EE890A6FD2ECE0EF3999DB161EF7DB88DA4B0C592385D35F705BC2A9C
CD7351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0AA69918932E563C8827CC
340AC4350DD2FF1A3EA9F8F3711A16CCE9A37170F0C02A9C7143D722CFC08677
6227901157114767FEC20D2DBA71C87061EE8BF523D591180D29A8F8E14A7959
731A74DC4B215D7EC095EBE86A3CB7C28C2EA7E6A19A68B64EAF236A3468C0F9
453189A1DFA55A9459D1C5B8CDC769D992269E6EC4631B1B75F7E6A511DBD978
F3032D2FC6BD54FD7664FAF472BBF13AC7F619FDC4AD5B38CE04E4C555757F69
C669C5EC403770F681C400FAEA98F62F02633E0F85A780A61DF255239F9BC3EA
AD652E6D5E754B9ADE46841E52DF90C3F0D7CE5DD684566DCF0B43A0B0F975DE
AE2F7601EB63C39D6EE8C54611D9D515EEBB7192C63D22D02BB2A5A27270225E
C95173C09068553725ABA9423F4B268C58072241D2DC5C080E7881848222220A
63605F00205C205B35DA93F4D000126B2CE72AC322B4D962537889CF225B3381
6EB449BF2C28599EB66F071FFCE3410C547A9B74D216032B72854A0B8A6ADE15
EBBFD5CD2BA9FAB7E75099FF1B68329B68A2CE587608555325EF062CFF465B6F
184FB4C37A50F08B2F1CF6E09E92D6215A5C9BE511CF326505FC5EF2B72DC40E
3350D5D5358B49CD7A1713DE7AD5B63F462A77B6268B7AFB245DE6EE02BF2A97
B0542A5CFD6CAF309B7E10ECA06B51C2717DB5BDE8E80D6F29B33E9FE12AC804
AA0C6670967F6C3C2A7310CCC64AB48219EF140A1D9A942543FDE90924C9DB3A
5D667E0AF18066F4318101305AED22847F855960CC952649426FBD46FBB5728A
CA73B436527795BAA59086831567FDD5B3BA6931468115577ABD8222985FAED7
B6A1CC891D07185666E6E74DE886BB13021AADC9950E2EF1FB69E5350B281CA8
F05E2830521A7BE2EF1D993F75619EAC1B3A7A437612AB0E8513DF8F0F44E933
75553EA81965C83F6CA655BBD1410B7E8F600CA820DF8B4BAFE515BCC974BCC2
8E06AC06B07BB7E08BFA5CA8C5EEF8386971DE077781A9E67359AD8E75DFF208
727DC428911CB820B9211D2A3C6BE6A3ED0A5A2C1C623A6D6615F24FED298A68
097564A8429CB235119311B9888D0BE96AC4BFD340BCABB8EE589A69F749B180
3E3C1EF42D935EFB4AEBC656854ADB4AED11740BA3FFE21D9099979EBD752E36
A8EA33F541256C368B3217E226202117CFBE3DE2C6DBFB0BB25BB138BBF69BBB
484DDA6371DFFA6222F88F0886C7F8848E932CF0D89BEC7E504189315DE0E931
69236EEC7E3C7AD630E43CB5B3540FE72436B7BDC9E33F6D4B2E9C167ADE4932
2A5AA48B228CF68EE0032B1968EB88119A375D4DC1AF6E4FDBB4862DB295672C
BEF8C0780AD1CED1352575A76E2FB6DA0EA3472267A89135EB528CFD0877E8D6
E31A02A87587DC7D4030E320C514539B504A31AF3D7A4DD413750FA4B723142B
B074DCC9B55E3A49B384006A6320B55B1CF4B2482D465B5835341350E215B0D5
5DDC1F173119E073DB7DEED7DC4A04968B69F792644FA8B0757303F40F4E3D39
ACE81E6816449AA859A9754CAD99EAB3F59EBBC14ED7BC71D669091521BF6739
131AAC92DD77A116EE7E81836676237F88C519F8DBF39EC35FE36E3D2577738F
553F81135829F9118F4BFE20CD51190F2806A37A4B011776C7A572D2FCF18871
BB569C2DB5B9A3347F911C34150B85ACF4262B137D9E0FAF538F8838EBF6E79A
1ADFB94FEAEC654AE20E3A693C2D57AF9597BDE85CA476C09617B1CEE6A2B48C
DEB0450B99E5E00DD9825D72B3A9D95383171187CD0E33C8CD308C436B64C763
C407654A8C311D3B3C8F5901B2AC785B222E5DE6A3FC2A9B0662335A2DB9C80E
B7BF67101B1F500FEBCC23AE484F2222BFD38455BA078A1A500CB006AA6A7D46
70530EA460E36E1FCC24D0148C458B745876A5FE5919C3C624E46C02C72E1368
8BC50A383020829462604E0B5B2CDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942
D6C7B09C6F75C799F437E74F0E185AD518B7E446C30415CA18B5F59F3C4DC209
7CCF7B2FC2F789BC49E4AB223FCEEAA22FF3F71E5E5E966DFB605D18E4B1CA2F
59697989C41141C74CAECABF8616AD95FD9ED3B11C918BB38D14FDE1FB20C560
4C70DC9E98857AA358B5F754BC18087F2F7BC99B501F212C04DDCF148251E923
37D102BDF468038B07C256081F5B8F3636CCE0A293F905974A0B37050C2ABC49
F5FDFCA8BE38549AE53F72B85A6F03B58AE18FC178D906B9BF3D12A818C8EBD9
90E7A12A38A89BDAD7E6A192877F8F9B9C3E5BDF412BF0E8C92A234BC8049091
778F36D558DE72E0CF1737994854EABAF8C2D221E0081D853369B8ADE0B18E8D
FDE785893B5EFD6019A709D99989DBCD244F0C11087A077D2103E494406B1DC8
1032B618349FC6ED24879F02A9B2C2924CD9E921B84C4E6C0ED0396E44A5667B
7AD3375595524D22C358B73374B5E7C4F285F9BD614A00DE6825572189A19315
AD3E7E3EE742E2EC53C778F677810DAD0C8F97E6FC8724E306E2E37B799A57B8
009493929890EBB3F0C168479B6999AD5B3C3DFE28AC43FD186B6BABA7FFA776
83212C8FAF6DC682C841008292750A376D0398DA95DF8AA168A651403C2477DA
990FC58E46BB65AB0676A40A8130F05A6CD8D0A2713820D615BA8AE46DCDCD93
BF182F0D752C9EFA34692B1E9877D715480B2CBC1181E6A95B05E9285F173BEF
A5424D243AA8BC7E87176773002363255E70443F86B6EF38C81511BA8FF4887F
3EE4357A421575258AAEDA4B5DD9ED6E3482283ACB506A2D6812D4676F3F6464
94832C8EC9EDCF022E141A5DE5496F54EF7A0050C0D1D2166C4A311A0C52ED00
D2305C70A416567F5EE877F0D165C4D4E6B00BF84FBE6428597412531988959F
3897745D7159FCDBB10B6459273EFD03520F2483A9E7FA0938D162FC5890998A
99BFE2406581D64F49F46B2D453844BEFB1931DD7E2CE0E540A398AA83F57164
3D64D9D9B4DAB92AE722C326065E48F4EC7FBF2E1158F0535DFFB59313804D69
60AA6F0C136BBED6E020CA50ECC4A6C90A628121B6317FB8E40E11E48E61DC6D
B3FD911235DC5A823A176D8387CA420A441980D3E8666043259B63FD3CE13E54
945B0A6BCB5633B1D580346D913BACD9742B308D575A409EFBAAE5D96D65773E
BE8D69A606A70A06E230290370856A89FA8D56529F252E7CC538FD5673744947
AA98663DA46206E7A75B1E7AC0247834B4558985AF6894363B2114294E668644
46DAA5CE2591121519A4117747BF9CCB78F9F8A3F5D44459BF81997F9E7A34F8
122CF87CF933F558E4660C9FE5D440B33AE6DD4220A093310E3E65B053A2EAB9
C183BD44FCF0C480796469C934250A5CE240A1171441D03FD75811F371B3895F
AA14A75448ED483C51D41076C0FE99D988D612DEBF78DD7EE23922F1A25B3421
F4AB7F9881955BDB0AD3FDECF4CC3BFC8CE815CF8DC0CF6D4C15FC110A14C6B1
7D87AB69D8E840ECB176762EE87EB04071EB8061B83E0359E6BCF317360AAAFB
7C198CD8DBE03A3CE7728D8819BF7826CFD7EE20738DE07BF2CB6AB91D17C579
3A8F9EDA9EEE6F64F51F736877EF6935ECA18A5F86EDFFDAB7E32A239E731333
107A831FBE6A6CAF1BB6D934295DDA357EB9FD1661523AE5AF8DDD8B198AC29B
D3B8DD91D49CFEA23E7D6EE63090EEC569D8FBEAF4E5CA52AF81F8FE49557D75
B147C85088703C68C018951631F2EA80DF28F24FD71D502A040CB4DACDAE1FC4
F892A2F092A3E45C31A6DF9C59631C5811D0CC79DCC5C2D73915AB87E8E31B37
12EFFC2E3FE1428B2DAA1853FEE27EF30CB0A494BA6ACDF6788877A3104070C2
23170140A7516D83EA6A99D1E4F756CB95EA4C2F9F4541B4ACFE9CA666C46C7F
031C67944AE235F4F872E636F24BA68ECAFED13668242C92CCF7FABDDB6C50DF
2485AB8138E3D841A9D8F9F80AC1BABB452DF2ECC9744C9C500556EF9EB6764B
4F8134DC429709776F04C4D5E4D04DAEBF5C475C7C3EB2EF7E035707E5A69C6B
F3D0C6660E636D6AD25B03A443509DE32694DEB838C8B360EBFFB8D45798018A
310214EB1672483CE4272074EBD88C9DCBDD1E51AC1353F7C1C6F691546B9315
12AA015585BF3EE444A7F201B20F79ED641D0EE7473C6E028D62D173D45A6D17
B4A1D1D916165B0BFB018964439FA7B3877858BBA8A26697C5929DF8B06BE1AE
01528C75262EF6C5B60BD81D2770945D3D6BB88DA9FDDAC13FEAF57217EC230C
CA301F89A1016CD564EF2EFDF0BDB775895C4746ECF87F40A23A8418AC968F2F
B30D5073CE2A53F750B082C4A6590AD501BDF6EBCDC02B48008D082AC5C1C042
7AD24E2C9976490B46BBC2187317D00BE0D30EB7BD4463F7A542C9A7373C3A43
39301CE2F890851EB3E99946DCD9A40E25DD883D396E1B7292137CEA7B60FAA0
52E4E631CD7AD08606E816F3E54E20DE4C1F23B16A9440AD00F6BA5601CEB6D0
79BB75886BE988058F4C5A79047AF8C75EEF3919EB6C5639046C6371F2024871
88A7BAFAAD7699E573E26B49D2D3520CE7EC27EA837EDAF9DBBF7EAD3B2858BC
FE820B4633E69F61EF0A9659847F8BDCD4238F576E09B591DD088900D4590818
6740C9412068CEBAB515DF56E83B52503F2A044FB87D284384D6AD0810B5407E
1085B1D5104BEC91C4AEF5E1E1F02AC9FCD1D87929953EE6CFB6C2FD8FD23C18
CA4063BCC8EE90AC1756B426A936BAED123DB1E3297770D868CC596E737A5234
E91EA9C52A86F396EC334621CC131F067BE82B7A00167945245303572FCD07DF
901E78AA828FB9ABAC42443EFEBDA80787A0F0A9682632A59B9D4E948DAFC6D5
74A33B9CE67A5639E34DBF36BE9F30BE03B0B8FE5F8EA006251B9E33FFEBB1BD
B2FDE76B58AF101A0AD64320E0217F90916924BEAA08BF7FF02DCAE8484C13F7
C5DEDB4EDC72B4042D30D14E8F4D415C5AB2A72BC3F9A63FC847DC244530BB6D
83D8451BC66D90AA787A9A653A4F75C63447142226B4AD05ADD80A9D7DF9C7A1
817250E78AD0204C9DCF16C79410605D4D744BFBA60FC22E964CE10AF512C228
F4CFC3DD85AEE7C9E61D62CE0FCACB72E14C2FDB87A97F47425D7D53DBEE6D4A
863D81138795F521C6A95DEC14BBB3E5A8BB3613EA73BA2AAE3FCA5D2E78ABF5
0BCFF51317165C88BAE59023144D99A71EDBB90FB84380ACDDA68AD46AC7AE3C
09162E8A4FC6CD4741B38836CB599DF98A21C5245BD1435E23F7395871AD1115
8CFCA33C04ACFDA3F0707836091A6260F217D91D4EA2F2B6FB87E2E004C0C5AD
DD2AB665537FEBACD5BC7C774D53CC63B57F7C9A28A5F0EA14F929D5598F4437
AB944A06B5EEC3343EB1EC04DCD09A2A4F2CB04C74B200EE87D92C452F79B850
8B5A3F364A4DD82BA880A7A5CD59F8F6000E1978A9EBD18D33DDE269A3E70362
6A0F204E36BEB8606041ED5927BF69A367EEAB44967489A34B460172AB269789
DDA62F516CB7FCE827E8B6C453F843B10EC212D258C3CAD385E8512B667AC78A
09A780813B1FF02AA967B12AAFAD9ECE68CFFB45E6E44703FC7AD68DBAA09BF4
E38DCE8FA46EF5CDFAAF3113D089D7C85E5859F27B8DC4C5D864F41B8B3B0F66
D6FBE907224496686847529F68DEA6FE86CDFE2FEB8DC3AB2D124146E08DA532
B277C8A73DAF87129F39235E00862E70D7E93430EFEEF4CA1441C63290D48E72
84386F6082C2362E4CCF3E66ECC33C744621B1FDDBC9F587FA9AD60FF1DD01D8
20488450336225C64FDBE7F75433FB87932A162CCCA0114944A1AC1E57C446C1
533D84AFF286AB0086008147E26E133E012707E204F21F5EDCA106FA0636B029
F12E6809CD8308A1512A4F3BBA0E02AA42C71D9E27302A88E52BB8B1924F057C
43DB0A92111ECBF02129EE8DF16E063B7BB9D34606831C82F4954E3E9F458653
B6CA43CE1F9164BB0FE39FBCF2876FDF951D8F9ECEF97273B7554C01E0528548
562040B9FEDE9638C09DB8EABA360ABADCD32C16E9F72E34B4CCD3A3F1A87879
31F61A705F34B65A7D17B8BE932648CE9E0B7240BCC29C59A4D84770FD34E97E
0E6CE2C95CBCD1A7AAD2312A280F0C0753434F33D438BD8EED69053BE9CBDC74
E87B613542F58DBCA1007FF58CD1A3F9D87400FB8A600F088414D8992ECDA0AC
C39AB210921E327FD8B10856C476FBFA10D11E87A61DFE3103AF0DA9F627E710
DB3D3C578C86CDBBDC0A2BE5F6D17EDD30DE14918A2AF0E1ED9254513D2002A9
CCD73361CC952A8238AF64FF352BAC31D36B071C4B68DF8BA0FE38D3A0188439
4AF829C39DB36BFA67124053D79DB19F848987C0F2E57CC79D75EC3262338CD1
3F13C659D762DB6199447516E1A5D4B3326832B50B45C50D8F3B912D34199D95
8BC7C6ACBDEF8BA575387DD0D73162CDDD96166F795C46B8AD5A7ACB5C30A9E7
9E85CB8BF53846F45871E08B42AF72B3F3760F5FA35BCD767FEE4E9808EBF054
38BA865AC5CE19DB05CF529A5DB0DFA4F1AE311FF2EE1311CEECDC45A5A65A71
E268231C07EC0F3AAC2337536495DDF6085A1BDB04A65CBB6605D4D72E11338D
87D5B02C7980703D1DF07EF2E12C9802AAB56426BFD7E71A8056C4D40E53D42D
AF400AA41C55881CED39A6EAD01854DB545A7D0E46716D81039491DB446916FA
5F10B5FF1AE36BAAB8A07828702857EDDDC1030D19928F2E260434DD44D61B33
1A026E3D72A9FC0E15EE51F97141125A74C5BBC35D82385C083D07AF133BB1BC
941AFDD9F34D5E0FDB49915C613B9E6CA03E2FAB053421BDE071AA7232D3FB8F
2F4E2C4C544F441AD84AB5DE68AE07093F707C67DB1DC2AF85CBA7D0FCFEE888
CC7FFDEFCBD573725714DAD9F6D32D04C681C42D15D8B8DCDEF77987C808BF0A
56664166455D888CA8A3B820DB6BE101296BDF05D296180E1F0068E431EB425F
A04DD315AE10FD3A72CBDDE3AF4825F7C3B591FB74909EE16F53AB0F444AEC23
3ED419193715DC8998AC0E556F16DB74C13D05E062FF908D37AACBCC9086AB4D
09E359B41CF74AED5B75C01085EEE6959AF5B321D1550C15C0E4AD2245D110C2
485C08BA84E13D79C4875E249580B771CDADB22DBBC1715016A91EB885A51BA3
F73CDCAD65BE718C0072A840C5D661E2BAD9236D480D9250A1EEDEC54A0D75E0
C853808E0E457AC644B40C5D496DCB96A463116389EAFF5982413681C556258C
6A96EBFA86A669F671B2056B5206CB2889A999E7573B012EA2371452E23091C6
5D76AAB3B0B47745CB8CBF9EFB538C274E3C64685888A61CD2FE2A3912714563
19C9B1F9D62740A6C1E4ACA130DD76A67920DBB1EBF803737388C01B84BAC1F8
C5D2AA3A3E6BCD63BDDD75FB5390E6DE2159D712C43EC39112935BA5FBC2D1C3
048DD4A16B2BECF9DC186E0B3479EC564EB9E63BE5C92779434A3938E1970D8E
A3CD40C7B8FB442058996268D90BEC85B51D5111091F54823FDAAC9DDFDDFCC6
DD12C114B7373759BE4A62F1370FEDE056CEE265838696FCEA5BF7EF4865F3EE
0054B00A9EF36E06722397867DF4DE78492BB8EF96B9D0B8AD794FC37229A534
DDDB4A69FCB5E94DCD2FB69D65D8D970C3C755E6F464E23802978FFD29A0F681
BB7C42AB16F3DC305839233A6D79FF1A8152419BC99C0B233ADAE39DC533F1D1
0843067264DF39491C34CB4BF88039971CBF0B811DA5D0453701393BCF3D6251
E80A93FEA61864BCFA907DA7513A5D5AB90346D805E2A2205BB410B3E1317CF2
47224ECF9FFD37BA6DB7283B75010E5542A389EA2F787A4693E254921B8DED4B
654A34C1C67C390186CE712378CC6217567E4233AB90D231BB07679EB2ABDE89
5E12261315A776E2579686DB956486C96942AD652B9188F2FFA1495493978225
54956039FCDFCEF8BB4382003153E604C23D313121A31905074446B1B55348E1
E2CEB827C74133EF89CC4C0E3BC93691F53282A0F0627B5C2BF0D24FF6B79AC8
74474B73FEB6FBCFE8F5D07B521EB0F086704D2F749380E92B97B1D4D15A6A6B
4A8E7F107E2E4ED3AF0A323F4ADF5BA2DBAE0C452EB77B9EB60BC8E8DBAC5E44
24AAD00B852219A60384F37D44F4096D8AE632FB2EBC0DDDFE6674552253C086
45F0BE1E25404BF8131379A057266485F454D5AE1081304809DF523EFE64D400
BA4D22773664235629410B1866D7A52B5AF7B22EDF4D13C1A0F81659D7C22C7D
D495DAEDFC651D4A939CCBFF875032E159EE437A2F68FBB9A796AD2042FF89AC
01843A0B408603CDC4D27FAA68D7A5407E0BA263CECAF34FF58FCCAD408B8B07
D84E95D6D79E0FDB6BA53C1C524097F7E1070005FE0374ADBE880B8E044E4662
EF0AF221544DE5DDC61A54CA0504D9C77E08FCF101D33E908A71B94B57A71E99
C8E97C95D6264824385F1E9C6AD73172B8777A6A9C884E2131126C9A2EA19A80
074BCB3432256BFE41FBDA108B3363B7102FEF09C25D849D7DAE91025A4C6D38
DB16CFE8E67900498C2F9834799128DF2B034852C673ECC4B4C9D77AC775F945
CF1F96E80E3B5528D4D09E1B5E78B3E352007805470CF8FD960389A736A651C8
E9877DF4A9DE3457D17C81740DAFE000798A2787814333C50AAFF69C863ADF81
27F1FC35DB9CD34EBC684818AB259FF8F84FCC533000D0E1E9DACA45F94E8282
61BEB551460C501428C4BFAB2B6067BAE1E2D71CBE46FFDE38A25CD0DA603BA1
BDE6BC382D8DB22A52CE0029B573F9F5F2F99F02A7E96171314C00E5F85216D9
9E98CE869F017082FB4B0C2DAEB278ED1C55B16BBB1D07807CA3D7E9844BC82B
B1B2426ACB9FBF557D742F35A403EFD9761F38E63ABF21DE56A291D2DF07EEE0
4F70626F4C73D605F7E228B23414CA58006F3D40E72FB71FDA23113D1B0FD21F
EF5897DCC7EF4C2CB4B9918C0626FBF8C4B10DFE83AF257544C70A57AFE06F7A
0B5F072E7235E9B1BA19B953CE9DE783BE36D5CCDC4C798C8CF098F26C8AF48B
458803BB26487C1396A12DC36FC9583A048A83F68049C707E5FC1473E7DF92F9
D2E2B830669F8630FB55709D85C29E7014A84F5920F3D806AF76ABAD9FBEDC38
8D8DDE6F49CA08F4FBD88644E60BAEFE49E53B1354C807588476C398F937F142
69C0E5733E34BBF9B416E034586C46E8419A975C8D37D0A16E6E3B361477A079
0C7141A679CF5F95FB8D5A4E24180ED6517E4F0FEDE76BFECEE5BE55608AC296
664FA0A919782A6ADDA23C38C361874254B5CEC048F7E120356772127F589F03
18D086E59953642D6C2D23CCCF3129CCBC9A3C3E966D3F3B431634B78DBC70A3
0BD571B782F24BF7ED544AE148467180DC2293FA812D817D2E5EB294948D9305
B66F6DDCD13D1E9F158AC88FCAF620320B38C49770AE23986F8CDC1C1DC9E4C2
14326056CD0B162BDFAE809998E0B6C0032CF12BE89CA00370A27B2EA0605F52
353E6ED578ECFA63DB3C0ADB530BB7A3892E86F260E98F07D4B0FBF7B566A425
0A26B464945DA4ECD72E3FC98843DE4A57191E757C5AAC0C95D8199C8DFC3F17
8B8146529528947283525EDD4C591C6FBAB65FBED8028533A66013CFC399D751
C897921E4CB9C904C656044DA384E4836D27E0AB3B8522892F912C82043AF80F
61A293D8E4663948837A9ADA1FD2D967EB9B7F6B389EE22D1C0802FACD28F8D0
EEFC185D96FB5BAFD9B0819AB0E0CE1270A2FC838D91B4DBD75886A78D3A1E0F
A45D5BF75C4A7A9C74D6A173AA1DE7E31F9952F450564F06CAB105AD6F4C749D
FA3E7C7E970BF81334F2F843EB703B00BE97F434F30C3B3061F046F959CF3B5C
3CCAAE1E43F31B506CF77D970E10678FBED344CB30F555634425B334011FBBC2
A5CA7AB2EFEF0596D5BD57D23639B1D82F04AB2B64EC307C8AB5977A6D0BC305
BD5820C99145AA7E7B25CD2E2CD662E6FED58263E48108AE87023FA6C0681659
8772E12C1DF1181D62DA31D6CD94A54CC5CE59292C6E526F5900522F2ED1F047
911BB34107E71F1884D692FB4BFA8E2E4FB7416E208F20774549A2D4DAF2AB5A
C55D031A2A37B5AE06DA85877AE16BC30D56A0B208DA546903B801BE43AA2F45
67B73012B130536BDAC1CCBA0D791A5346DFB06D3C7328F6F57B13A373A9E0DD
CE6E0CB2008467372363A11AB621533F6A1938E812BA39E0756E167FB5AF52DB
B860630CFC576339091662B7F1AE3CB1BCDD4120E4D959B5009F45AE06FDD46D
CB8CFB0F96E0D4388AC848880ACD3BBBE679793092790055198EFCA05EC6C3E0
C3E8A1D8AE0E1C9828C293837334C0BD8008943710FC64952B19748AFC7E5D30
5E31B0F2C34E70591A1A14D96EBAC344B40C5D496DCB96A463116389EAFF5982
413682F586CAAF26B0F6849688C4A3D83CD75A59434FB3497FAD3848CCFAFD23
92C817B8F7FA666FBE36129A36419F6407099CFC3E1E4DF8435E646688A6CAC6
190A493570BB800546CCE3F55865F40BD116188D97D419AC2486AFABA6EAACB7
2F3FE026E0D86E3C761B8BE4A0ECF381E24412BD75B140740AED1FA5436E30E6
1BB7830DE5CF662110A128FB787A23A118DA4F02D998FBACA1A277A320248E68
9B9827507BA52A8E4EE88E9D997D74BD10806BDFAF565BA4F75276379D869BAA
69F4337EB85557361E1D6F08EDE1F7B4AB479475A6BA6BFDDE42FE0BF382AB69
E8E6FB2466ECA14A68AD50724816D76FE6812740F284E22E30D2B418CAE285AA
38F9FB436D3937102178F1D6B50DAD534D89F7063E702EE6621E0AF8522972AC
0CF27C1433A5B21C85C42294C5C5DA468B5307F1A0DCEE5B687455A5C06FA9FE
941781F0D9835D8D020B175D1E1B78FB92A8A32F408CD9208A66A14DD2BDC5FC
0972D5DDE69392546A9760E5EC6A13C77C0152C719D270CAE13D87FECAB68D88
159FCED051ABB623DC081C31222774290661A118D9BFF68622BF768AB77A94F2
632935CB7E8703151C32F9E4F87E81998514EF941794FBCD5FF3D34244C2FF31
014776B3EAA1F66C9D322010950F09F9A3F4535F3093FBD68E47B44973C71CC1
D3103066F6DE77BD7D99E0ABA1EBF44D7D7A4138666C7B0A7B10F10DA7017B72
F57DC4971A485AF26E15DBD7F7BC33B34BF3EB64D8B41E63A28E978DECA91038
EBF0AB1F2B5C97A5E4D6127212AB225F2857D3AFB9B11B3D0DFA60D4F1FDCE6B
39387CBE54C520F449FAD1B238019816463C0206918EE55F76AB2428202F6A18
5B283005D97035874D2B9AFD4D3F29B4B1E6EDE308D685BED6A5EF82D27AC66A
2F6F91819A23E4A229EC83F57B2AB218A0D298CD90EBD495E25C073D0D16E9D6
F3B055F4B9CBCCADFF6803B31EF9A85BAF11F98DF053BB811AEBB91EB3CB214F
4F214DFD130D697972BB11E9F43A39C5EC2CDDA3AC6C0C12D644B9FB98967411
1A6036D8A6614941E5A2F473A7FB099D3D51EF85BE0B5CB46B2FBC9FB9C1F083
274F2033FCFCE759E760131E50759AE6C73C023951C59F3E09157F87CA9762F0
0A7EE36054A99A9D3BAAFBA2577874822FA06852EBDFC8B36B5101F1290368C6
3A0FC9BE16947EC364E70D5006C9511781D28CC30F9DC21D974400A8C2642147
D4B652A8F1A7E5BFF54727073E848B2EC0BCAF7A59308F505DBAE59B48967F9F
45E94CE0A3DB78E8BEE86BEC0C9B755750CE15FDCF5CAFA6ED87E41DD3EE3DED
90C3B3F8A39F36447CB0BFB14B8D584BA7468DFECCF5BE1B12A00F107E3B12F7
042BDDE741CAD677367993F1B4E7756DBC96D8A865C84C90990DDC70334FF6D7
B446F67BF70AEBF35A2AE4A2CD04F5426F7148BB8FA709AF1344271173529372
AB2BC7C9DFB624A248F2B3FB6C70615176F41A8DB91E66493E26989D59C19520
CBE7228870D2168A99303C3809F0D6177CF5F25AAB7D45791021199BE22D8994
0BD35877464F422069E65809B7A1A57F9CC512BDC51EF254914F3E9AEB8BA48A
087BEA2DFF55CF5E3DE25AC0B17B4D61C7C20F9EF9B7CB7F1D174B2E94953F54
1C3B84D4342AC03397338DE5C961B3AA70DA22E24F5D5F7DF0EE66CBE112FF9B
DEFD1CADCAE9F8CA8978788158CA027DDDF719557A7D64B43EAF4ACBAC482D06
AFD458F0DC3F463DC14E07386A0104CC5ED2C68B08B6321F881E98B4C5193BCC
D6BBCD792189A12FC9366BA7134EFD67A22B4E125E869631F4A535C0ED4336C1
ECFC74F3865CBD9DF468F60436472D2381DEA09B8B3BCB109BCD72332A948490
B6C866CD45B80656513B6871E5258B4F80702ADB06D3B54DAC05EF13006A116C
82E1319A636C7D42C6CAAEA8F7C5FD4CCB61CC8B279A83B37EECE68CE511975D
6DFDA38405815C5B5497FD0900A840A22B15E6DAC8C7C028CE0C0D800126FC14
5DF78DF99D9FDD85AEFAAE39B81751B085054144022BE6620E3BE3BCFF07C029
D465A2D4DD3B158DCB9A85A656F047B16448D99F49900ED5C76681394FCC328B
413F11A3968D9FCAC28875B34AB843A16D141698336E57C3793940F17E797B21
89AB6FA2EF60DA0B46BB86D33CD66D069CB847A315262F8F4F114AE31D1D635C
ECB8442177468B4A69E269481F40D004794CB8B1EB68A0B53C977307CE56259F
F842E91C82E428D80CC1180D34075214ACA3756263FEF0111D389D94D33A0E4B
C981ADF1AA24A40520A6C06816598772E12C1EA044398A029D6D08CEA9983961
D761AB6D4C5759EEEC671B103DA708F2393AD051D68085AD21C982C71F0EDBCB
FA2BF93ACF5E651F75F1C47F2699BD0DA86F7C5E1F4BC6F9D662FC2E59673DEF
563AECCABF724C09CEEB5AA321B91E6F4A30F183A66BCD03F71278FB2BF0C8A5
3825238B837FDE0271B310BDB076E1E5D2187136E1E88EEAA7C4C763218915AA
9952E0ECB9642368AE093CF808D930244D8AE9FFF3F592BB136F41F11AFA8CC9
86D7978861CBBB5978D4D7919969939A14CC93BFAD50E55FFDB55F460212B87A
1528AD133A2681B4DB647B11B570572BCFCA84397F0CABC125351097FD8497D3
BB8E9F0453C2573E0F5A9CC7C841C2AABBFA90CEBE5509654A916A80214563C0
2B9DAB14A41206C3350B9DFC1DEC1CA57233854C0A785600D9FF31D2817C2ADD
3A675E31F93E966E4FD5C63D07B8B577D80F66EACA440D77A9179EFA674FF151
46975C6E920D8B6D8B559E66DF370A0216FE0F4B36DB89474563B87923D523CF
F87D0A87D9C2A2B7BFE91DD2BE7E5CF1C6CDFE4C69D926F9C3A768E5D8E18526
91BFA85D103528A79957F00BF8849A73B9D49874E459B15AA2F7686797569D91
8E9067154248AEB3A2D3076ABE95E8D6625C61442D7AE3543F3EC5C349D20D4C
B77C885C19FB751B46C7972BDAE3C044E0BBD0FFCFB0E5BF94862633F80AA193
8F0353103DB83CCF9143F3A1A7485CD1EC4A3D0035E2A57BEBDC39E7AB9B8A6C
79FE2569E74991C8545446D1AB97E5A1AA8DDDEC792C2392B67C8C2373BC8E4A
791EB854607D62C59BD0DA9C9064035A5623E725D41D2B5EE0C3F03A603A1617
13216AF97F228F9FDB5CBF741CFA9D1CA3196622B3800D5F7DD510624B948E9A
9A7276C249E31F1DB40DF9EBE155667B765931BDBF3A63719D837EB628627743
C1E7186CFC7CBF2517728EB8C9955BDC3C107F352CABDEBCF9A22F9F4DEB3B9F
80DF0DFDFCD73F99971EE31684D721083208D1B566461FE03D435D01FFF15E7A
613EACE41E72B21E95E828E4B7759C944FF72ECE869A601FD898304C6EAEF67D
CCA5FDDC4AEA160F30F006E1BB2E9F3E4AAA7AA9EA4E05CEF9340F82F0E079F1
C7200DA0E6977B036E69FFEC0A81599002E066EDFD837C54B7985532A77E7ABE
60B0CCEA8BFA6DEF9BC50AD354C5F3F0FB85AA51B692CB69F564EE95F42A411D
26C48562C814D59494554390A5B1EDBEA32C7762AC27D37041D63165EB3BE7A2
2843BFF3FDA7A855985C013859445F7EDD89CE2A169BBA8D15F6D8CF4A70145D
467EDCC0085445CA815B0FD701A9981EE97576B9D9EADFA0D51077ACDE9DA732
031E629831F7575539CB2A58832AA92DA5F34F197E3EFBF17115FDFEA98B092F
03A7F6F958B74F4C184A7E64C964559857A63FAFE4F1EAFDBE9FA317C2D84655
C143C4F74DA06D49D1BA01D0E1E9DACA45F94EFC91D568C63F0DF55132EE4BFC
3E579C96D321F56326AFECF8E97444753F21C41AB12796146E427215C73BEEF2
0E828A46681B6BDCE94BCC917528A1E4F90EBE4A58DE01CD82B0B8D1C2699BCB
4576B8626AE3FEB4F127D094B167C7ECAD42D00304D0A253D31ACB26D732FD54
BD83E3C485032A061769D597052A48007E9EAFAFCD3C82A8CA364714F7CF503D
823C6E9219BC87F668804CDB793530EF5B16FA667198CD8FBF4CE8FD1B6D7332
0ACB1F6C267D3EB2DA414FCF741852E2567C7459D83199040AB64EEB27424B26
CA8C69E7988C35184F061DBDEC0C752E863F68177E4F68BA72514ECAE9A68F64
D2CF9B4EE95672C13F4D709C289E543D3857458FB78C6ECB6460A281A80F5025
23BC022928659723AF7B45386A18D452DC9319467873663372C396D65B3C87C1
077A71E5C95228114053B0DE93BCDA2431A3F0554B874AAD2B92245CCA4AFDA8
0D1C7AA14422306DB0B1B4605A00D65EEBA914A515BE7F74FF21BD3F43E2485A
D87BC27392D7A101E273541B8FFD8A9F88AF402A9100A5452C092484FA6FAAB5
FBDEA2A2C207DAAF5700514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED7F4
D6211352ACC3AFE91F9FE082F213C45F0EF13072F4EF9D0E9FB252D7C7806F1A
A59FE77425FE62C24ACF71C7756763FB6FE9ED851FBC93DD94BC03CF89CA2C37
058BB68FA97AFF07FA05D23A01A37B13382227A754C1E58725F7201587A66308
61B8E566A0321256A8E4CA391FF6F8DD06EC512E1E3DCA950F0BF9AB2EC9F5B7
BB957CD0B1A298B9084BBC0CB1E5DE954EE5ED85BF929E901E45D5F90F31D8FB
2B0F91F6E4080B3C6D4A4A49F234733B98F0DCF6CA9C06832E0BCDBD641B9E67
3F20AFE5D66458485FC1BF14B6584EB4424D2E2F37B7FED3BB8E0AEFE3BC2410
5236974C892564D5763D3D5D678FA7AC590B12E41A8C8B53CE665EF5094F4014
E19FF5DA64798AC01ACA53F78E8F619A6D4BE86F4F67B2BC065A56AB2C007E06
6A3BBEE1AFA053BFC3F4503F285F019946616E0ACFDE69211DA05FF14547300F
FAB1FD39409175426EC07FD1E3D4AF398B968C9DFB8B3383BF9817F355C5BA54
56A7FB5A5279043E68FFB9229EC6DE4ED5A8DA7D9EBD72F5C7C882B7BF79F520
5F9E9A1EC74128D2448189EF54C0102346A982AE10A214A618C01C1D84DEE574
3C6697A0182BBED304B28C825FBBAAF61C73D2254EFA2E87D2D217ED437B23DE
309A360FF60CA82A8251BE5674CAC40CB8C0D4B64A6799C8449E97E13CA0AAAB
196E8FB4CAADA4431436009135FFC380700782F7B3423A172DC523574DF9E989
6FE3FF392A00DEE04E3156C97F8C14713390B5E5EF775D62175B6409A678916C
F881217B8782C257F3881F60996CAC3A8DE48A068D1C93F641BA7AED74270D1A
32A27E91FA346AE9C4573DE9A207101BD77D2728A4FBA8DF907229C1CCF68145
0F0BF41741C5DD7F4111BCB49DE285E7CCA8EA2BBD321844409FC9537BCE16DB
45A65DC61852339A38D7BC9D8529FD28B5750E290EE4BD687C783B27501C603C
D989F14A2A0A568071E8F30C1866D6836F5557F484D9733BEA25BAD1C1C0DBA1
EB9EB9C2EF7D50C3A6F64C3784717592A22FE5AD299916489A37A541ECFFC41F
3DD3FD2EBD84B672F4AA14E86DF10954DEDA2F6264B06FE833131E80E20D97F5
FC1DC70FE84E7AA39B55089D13B2897184DFD048A6FB5423E5FF2B32BE0179DE
BACAC5A6DFD51F6B5047857684B6A1C89898662200C64E39E2DE83D693068512
7D91CCEC851E7D24B704DA1DC584BF3F662B3E1C1D25A0626238AE18C8319F95
F8038848C132C113A068977147461241FDF5F1C22E3C015BA8C46DFEA00293FC
A8CAD6BD2C7676D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC8A22BE10001
B3CEBD719EEB38B92EABDC75BFF945955EB80FE358C322B2896A8BB113136337
F88C41B0FEEE9A767877A0CB1994B8B6D5F3B8EDF9D4D1459A3A389B82A6B44C
1B985F03669B546C110680DBC9E1DDE716C4A77DD128B51BC4CC20850F9E1A5C
5856D41D8FB730E04DE248070919A734F426D447CDF8EFDCC1C8AA92340FC332
B1EF5CD9063DF88E60ECE319AC80193A8EDB7A5800D6D8F54FA2527C9F05D849
34498CB1CA294DA6EBD87FBDDC2BB4988068260570B2884738F247821F243E8D
CEE74E32554E529BFFDCE98C901A79E3E0354517C3D95A794B8D6AD047F410CD
1709FF4A5AB714B111D8A8FE826BDFC4834A5A1D1078DCC4444EE308B8A5AAAE
EF347E3328CD6FB58B840C6D14EE78FC84B1BD61C526475C30B1371DC4203744
C86A1FE55F5369B12A0585133196188B469C0408DEC3E57CF0E7EEB0C1790084
2424E029E159D89988E89E0A16BF638A41A0157109DA020A5F144492F8085918
B9123793DECF156F4018399C3DF46C502D96F394B55540E870497A23620FE7F2
1F1CA698A994BBEB24AA92744A35840BEC3B48876DE9EF1C24AD166CB5061F55
7A7D64B43EAF4ACBAC482D06AFD458F0DC3F47EE7F15D0E746759CD77594B3C1
87E1943876B8DC19F76E4796A8F41B387AE7E4D6EDC2658A029D0F7EE55799B3
840F47ECEFA53F6F3A6467C14C2B8315219CC600D3C6C2C2E9F820D2B1C9B159
8BAEF7CE0226917D674EDE2CC71844E1F488FCC359CCF33B52931EBA13F01AD5
A0CF41C40E1B290E073B8A067D595E12E31208F9C7E9BE1BBEF001DE4C2236D3
3C447ED04ACA9DBA348076F8ED9EE5297770D868CC596E737A5234E91EA9C52A
86F39A21F60514F88E8FD48F0B675F296A83AC1938FCE2DF9234A8A566ECEB61
CF2BF6035B98EA90F559625C437D454B18A8F962F7879D063B8B80FF811036A9
9370C24B1E1069108EC36BDB46E5704EA4E95BC91194E2A4F97459517A15D695
F3947BC776B062381C25057FEA90D02F1C479259B71D9E8E5DB24A70752D839D
D4A4F6A61B071753437546DDEE92C2C7EE93E4757C98C5E2C6E2A74BE2E35BFC
875454D0ACA65E00257C0BEAA1EF3FB862F9A3A9F8EFB65FECBDA4BB89EDFAE2
D6A52C31C01B3AD7210DFC42A9B03ED435197A7BA67F9C704283837A76FF09A9
86823662372FE843423B04039E704058DEB846AA6325F09682A94A759A52DABC
55192C708AC32DD4739F3EDEA5FA09018EA13E7145AC5BD6439930D168D60FD3
5362B2F4DA73458BDA9F31F188D5BDBEAF62F00E36C57A35E2DAB8EF45B36F46
9AF412C1A57BC2B045AC90C9E7E3FB7EFDB78E1B6E1C682B930F48BF0A28301B
463A55DD929D54550933FC4B7290C8C71C097F48AB5C03B5D99BC05CA8E92DCD
33C7DD73FBAFAD2A3EC3AD445193B32002F2C1DB42C069893A6C31F0A44812EB
038060994993CBB8337F060FFE21FF47D8FE250804AC5A885463BCE392A70F6A
B8025660CA3EAA7C93B7524614BE7C953DE8E0ECBA619FA6C38D9D27307FAC14
429AB8FA9A5FA8C6AFEADE7E631618F48D633E55A4DA9421AB550DB7FD13DFF4
5696C589BC74CA556158DA32EAD64629BDED74F5002015D3A8B5EA02CD10C450
38FC6C4E8FA08109D677D205E06A9B977F81A7EC21FD1F6781D44DC2D1388E6B
33036354C6BF79126C436F4C14079CD216A6C58EDEBAEC96F5B69456110B9A8B
BCDA8551C3C14F979F3CB16D6EB20D9F9AA20F92F1501F9FD6F89FF265245380
70C420CB10424212EA9016A34634CF88893EBF53D8D28B36B273A01BBCE289A2
95CFD5C2D2ABD635DA7FFE17BC471CDFEF5F67871FAD992447F76CF16F85D0A0
4140BB88279F38A2D283BF456D5D8BFEEBCB5B69717F22A05D4E53ABB0F94ABD
D9C681FE691EF3090EA8853E8A160F7A65F8DE9A74CA226BAD0E6EC504601123
9ED7D6C471496D35CF39C6C3E0846586077E38E1DF1BF4C8C223A06F59DA5AFB
17F821D067FF0B60A68E26EC70B39B888BD9D4A0A3271C6D709209D8E53BECCB
5A4D2443EB3A063F53FA49628CDC2A8FB41FBF08C850C509FF5EEB4E85C3406F
4B62DDE3812AA8D94831947CDC43C756A2382D29DF796EC2A8D2453D65A8C955
256FD24A2E42B7076CF85296A07CD13F4F32038FC8BAAFC17A8E9B0CE1A95D1E
CB13DD58D02216A81D710442253365225052ECAC899BC729609451258BDE7360
066362DB24465EFBADDE9F7EE71C4099C3807A01337FA4063B87047466804D6A
A2CE101B46D6323843FFE132EEA49E11D6BD6E0DCEEDC85B829807118332CDDC
0D88E7CC1CA9CD67F3BF4F3FC965D7F815611D1498D2FC421934DF2663935BC9
1CA7436C54286E4979DACD3F5A953BD9E918D5E46449525A406919F8BADE9EB6
4CA74A512741975682150541AFBFD1BDE895668CEA9C71B76A303F57B244B8F8
8AC8A390BFCBE83CD8A240B48FBDFDBAAD6E3C3863D753FCA1E5A20445E5DC3C
4253C6C85CAF250D58AF5317F80A968AEE0DE05A0C83CB1E8577E629C8CEFB80
51C7A4FEFBF0F7C5033906742D7FB56041D3F61EE0F3090A00DF4BCE5B2D8AC0
E4735C777C6D15C0293B8F417D0BFA4281FD499DDC9492155D645F9221B950BF
C2ECD8314F9938BD2584EC0E32700427281A4D6D3690FA6D96A65F836D46B706
9F980F33D5DAC48D8CADAB3A7B0FF8D8386D6DA6E741A012809B689A9E804F1B
279E6F1C7CCB3413F79EFAC256BF5830A215725CCFD59D2A27CD4FD3AC255968
29FC863FC179311105595400D89642FD878AE1A0F6C4AE843C03D6A768D0D41F
EBC64A0787C7B8BCAF68BDE151C4F529436BD3D56099C67D389ED7451D792451
54A125B43EC620BEE18DAC774DAF30BD5C9B8994FD5CFBA6CF39A03AE5B19FC2
B68E86F97B5B0D1A55372F50F6C04F18EEF894D5D2C6047D5F64C0839943C180
C2A61DCC2CD3D2B646A902FC3FF3F6DE17092C10C539ED46C473CCF6C6D0556F
6B41D85D49D5A65A1BA3ACAFA740260B270B7E301EC799C19A872663BDAFF6F0
0EAE612D30E08F7AE26C8EDB10C271247B5189BAF2FDDCDDC1B5B6B5157C6FEC
CBCD342C97EF86F60B81EE4402018E58B92C74696202999646E6439D4D68D547
2DD3F2E74DA007F26479E06AD855BCCD97B6255DFA09680086F1AB3C9C1E59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B749918950DE
D5B9C221B0CAB9E827E3E8BBEF4018E6B622443A1BE37A58E7D7185675405E6E
483137C610D238CC553011CB35FC4AF557E7D4EFBCAC8760BBF8ADD162DEA267
7D41F7B59C176E41C955A8775E5382DDE5C2CEBD891C3CE7E6799102718D0FC5
7EC5B4CC3944DEB241F1FD9A5FBEE5B1F2620B814FA2A8D26C3D33D1590368D3
2CA7EA24B20DFDF692D864812689634ABD7179ADB86972D7BDE037D2FE70BD94
9A7B208C81BF60DE16EA1F1A13108F28A72357F452A648108433D879F3CB24BB
ACAF20A0F81D2E93C50B04EE5B2AB3B5215DC0CB734AE11B7885E346D8DAC181
EE935FB8157C077A674B82A2EC158BC807019F4015A3C1321D664F163CB35C07
B67CC7F6C981AD1346F84CA786C824114BD6BCF68DA8B78F6C27EFD62EA13807
B5618EEDA211942601EC754DEF7463AFFB588C2F5764FA98B15620CFF5E7198B
0231B1350BD81C00D4BCA2BA332B4FDCDE311F350DB506D131CB915393BE5EF9
9776F420B2935811476FE25201438C563056DDD6C9755E4C126B43A025DAD685
7887D5A25E33D15DF512694AD870304557D3C7117AB62522E8E26E48E8AF62FD
65FB576024A4901041915D6CA8696DD7737230438A2D5182B840D30E18AD05BE
E074157BF72F5A2CA2F78897C11FCA2246FC6726CD002CAD4702069E86E6512A
6F23FF70C51ABE36A0A37702E62B981477F5E81E25DC2B1938C573B40D709C87
C188543E6F5CCBC5780936829A15DE3B4654B265A8B477378B0FB26F46CC8D6A
5018E9E4413584CD0A7633C5BDDEB04079726CA43FCABE49351B4A5FED8654DB
28EBE2DCF6FF7B8407FA24A82C23283890E01BC0238823FCBE7C4750D7693E51
E88F1AE53B00A20CE65EB14C6A0FFF6BD2983A840BEF664D33BCB0B016C9A7EE
B8AEBF10D89F85543474FA7E17362D82AD7804C2BBF9047A797EDDFCD6488200
49B25DD2E901F4C10D03369C3FCD5A3AF0708DC93DD9B043D922DD870F81647B
DD386E6978C54E2EA282937AFA78523F6DEBD6F7330285F6AA484BF1AC65373A
C21EFFFE83AA5BB6469277DA9C7AD4DAACB1EC98E84B61239D8E8052CC15B53B
907E17802B8F1B15359AAAB3F54521545DD99DB567D5D341263520160B23FAF2
EA2E79DB623F01E8860666C0F5DCED9F2B03B5DFF7BD13CEFE7C99B07B6EC0BA
C9E555970D4008CE6305E0BAEE733C4C57410956520F9C16708AAEE0D9AE34F1
06370BFEABF563ECB5AF94AE88F4A6FE4FE745496C13889100E693C1BC5904C3
D7311225F94FB7236008E4FBFDD81AE2F6896603072ADB3FD1B62DD124651496
89F9D0D320F8ED5A787D7657EF5C8AF063C287514708C33910FCB2AE9B3DFB2A
B15CA3AD0E78C5B508FA2AF2488D22883A4EFFF3F10030FFAE94D122D97AAC81
8F26470AF55CDCC25D5B733FBF2761727522272005DB099220651434792E3862
249BA7031D4D97DE2280C10756DAC422F0B747E5C5F2D3D72E35B4E3AEA1DC06
E7F54EDE050EE86D5A07B7093D9CE3EB8C164A42676C4C753AFBE1C004672B7F
599217F589B60404A5FD3E8C1B3F973E0E0420A9B8728BE7045DF33975EC3438
7F5E4BC4A044FC1EB18E726B2F4740839E9FF40CDA511A96571999D5C19958AC
D5F5B248E016215261A9814A8B2883529EAEA5DFDF338C24755DF5753CF9C77C
5EA7C52B99CD1852BE1873096A6B6C6F76EC6C49B29A9F6FCEAEFAD44F20C872
9866C82DAED82098762196E85734DC0E022A602386D2A1FEC72180CDBBB6AB1C
2D00FC1CB6B4B3ADF1CB438D4B3ACC2044466181E05A7718C732AFF5B65B647D
711FA22F4E1CE1B2599309857E1DF54BD51C11A4575A9693793F9BF7FB4184A6
0E7CFDD4114B3F7D1ABD807B031CE329E24C97C8B59860519720B87B9E5125A6
7BE7E27D803F247C99EF723FD034144990FF372DAB191C238157BCC26F9D4CA3
F4B65AA8458D683772220372EC76F14DA4F2B9DF82CA863D82A0E59D746FDF7F
3ED4E28C19C16EC3B9B83449C978AA8ED42C311F0626ED9D2BDFFD58F71EFC2B
C349F412838123DAF13C812BC5FBC7C092A584BDCD8A5E225D29D45388EF3D20
33CB2FD47F1E7B9254FE0F1B82AE1A622E4FB68B09B62A2C8324BFE156703C01
668A4DAE87ACB44DD22DA2F9A0AB22DA8295425CE33D06DBED1101A7C0E662ED
83BD79F30119117E63C7D23D7E5143EC6DD357F9C029B7B7ABD32652DF5EFC89
E27637B01F865D8D79D2D158D5D194933180BC7DD0DE806BD2954791314896A1
25DD7D88D131FC0B5C2D08459212F71E7B6C298E9F809EF640E8C5333CFB7D45
F11909754573801ADC244E6F498DD9554597B2153F51AEC4C4BDBC2AA02222C2
560FC0C02DDF7E5C0ED0D8E1B507E2734E5754C40F12536D75B41E1FD298C2B7
69ADFD72261E9967DBE3C3A0C5B5D8C5721EF687376405097484387BDAF0D57F
AA0EB45D698DA2558FFF90E82254D3CCF2F22D05F713B5525E7B1D6D8D8AD74F
E0F35F4802E00BF3AA096D7797D51052E0A2613A6EC2BB714002FAD60CB843EC
BDE6717B6AE08BB83E7168DFED3440E68A15F5727AC29F0846DC4F20BD5780D9
B99FA8A4A5BFDB7DA2FDE74272F242430201310D1586E34EEDAAB013822E9C7B
A41C3D3A6C4BF82E23527DDC2F5587FF6A10D5E1AC7A009C29A9DCEEBB2DA2D2
8E05738D9150D5D9BF43A0B95F26EA5F41F44FB3B412DAF7B111A33FEA4909B6
426345C5FB5A5EA142BBCF388ECAC70A36D45B1C0C8880C69BFC0825B8E60069
62840098A0D3500E5926AA784E56E87039FB9C1C722E19244E3EC6D190DE63C3
B776CE05F2A293BF3C401C80B033EEBB9E56D480993860832E414C817D54A21F
C6BEB0AFDF9AD2869277812453E75EBDB26906FB10BD54C150C6F2D58E7D527C
767234D4A21676766B9352A8D330DFA844440004967336EA09A00766DB71BC88
35ABC7E5A4F38453D913FDA023227814657911725CC0BE42FEDB008ECB7F32D8
3F5651C6883896A119A97C138E0C834B89CD4F28CEE46A0398C66F5414B1A7FE
9D44F8968748E0697FDB2709C5CF88AF459B267331D2E4749A188B9D579AC889
F3615342A3944DE025B7F3CD340A50D1F0A5BBDA5FA9E7FCAADFE833FAF64153
4B680B98553DC4E1C3847A04943A44C2FC10ACBBDF3E9B23E0ABD66C42F8371E
3C07DD0CCBC799D9DEBE2ED96403A2760A669BBED746BFCE5AF6AE6253173F2F
2F071702BF0A4ADB2835A2B9941D2F36FECB50E264084F940A861C9600771971
2E59128C1C607EC32A4F2309693041E162F30479A592F078A1F71D777C812029
C850564D58029B75BBE6B76BC4C43D1D68B04E12275405CE5176F0263913814F
95AB61B3714EA53FCBE67F1885BAE273119E324F7C445BBD437D12A44BFFC850
7EC1ACC1C33032D73C2364859F685208AAA6964BFADFDFA37D095F9C8BA2D280
27A084C374150B9B96CCE94AB33B4FBD6FD87283E6A0444583C9A4510F72F60F
699096AB8D60FE0ECC3C539AD9F6ED8551410ABFC1BAD90154602731B34404D2
09C11DDE570F96E80D9F9251717FEB42FC85BEFE30B257DD1E27A049AD68D0D6
ACB64FA02DC92245E3006606171F07FF0D5273D0549066DA1E10D961DA33A52F
049B406F1BCD054B0C3BD6F67FCA2BBEDC86D52E39309151982B7B056ABC55C6
B9706DC2FE37EFCC1C1418738F7E6B887898F068B9AF85CC67124098A465198D
1F1F487C916461C5EC095F5ED47B370FEF020D5BDF2DFB7ED339EDCC2A69B2E6
6F6A883381BF923B4E7C1F6C204C6D40FBF059D3FA646BC2A4A5EF19CA1EE4BC
429C2F002769E301829088F716A400C168C40F4782CA0AA90793B55AABF72A60
BAD93A2E414FC4533FAFDE59E5A1A110972807E98F64020F01DD095F951212D9
BA88646FBA51A83C8D42BBD20BAD15DC247FF41708521212B6FA4A5F4A6F2A3B
57C3160F62F90AFF26CD38D56E11799A870B4438E15CB853BFE78BFA77536607
0A9E3DD6D5FB35032A03BF42BD82DD112B55D4C8EADCD3E188F8A3B41A87DA21
6F3E7E51C81C5C48654E7A1029B86985EFD9D5CF8ABD6DABDA09435060AF53D5
7FF39B12876236B72EA5DE1C59E280D734BA46255A84B7F3DF6E4C4CEE20AC47
757F56C98D84A7B5BA7E8B1E5BCA19026502D29C5BF5132B5B485A142D2AC2DD
C0033D035B1DCE0619BC7B5D746CFCF5191B2F67A5D13ADB191DD2850823675A
9891480A0776C6AA995358D11D2F68B792F758004B8079880BEC2DCAA442BC96
2C9DC45DB8679E48744154178E7FE1C317C438C0491C697E05AC6CE2C856FC7F
4B6DAB94592230F66FAC93CCA549A57FFBEE09DB188EC47A22AF10DFA97BDD4D
24341B0F53BC443D55336500555C87B74E181568A10B536F687E25D3074900A0
86F32713ACFE1EB9CEF405346EC2F0E8B21B85516AA20BA77BB4B54CF8ECA82B
2DDAA3171DAA6C74A3E17BFBF87720E15B2ACD1BF05C5AC74FDD125645BD3D22
280DCB628202FF934D4CFFA0BF9A5DAB12AB19848963D5032FD06D3BC667AD68
C401FBD2B26E92F850BD820D668E9F3C30EA26B4DFA73695D8C3D2A9DE7924E8
39BA5C1574587592E86E3CA2503175055F2B8D2969A78101EEC3A5C84383FF94
44281179FF280B0B639BFBAD362573965B4939EB5074FC5673A556AE327026E8
FA02B0ECD27BA76B2985E68F271B4C24F62252A3AA4A9DAEC3604E61866E9A4E
6A52EA7FD6128DBCE0CEB562F9AF6759919B3E54C67CDB8952F59D7B5AEACF85
7B2F096323D47FAEC351C92A43162F3410E4404C44B87899889AC37F32D0F7E2
ED60D0FC2458A373CE5BD519A26968C0DD628702C8EBEF212FAFF0369D44A984
E15D3D81BFA05C17B10DA5900CFB1BA5BAFD50C2345B6A0072A5FFC0D13C56F1
0F0488C1C01F6FD900394C4A6070A54ECB1307D930A93D201E05BD54C3B6AF1D
5457B21F86908067CD130191A28C1C061A0BBE49B60549E915398CF620966AE7
904AC79538622C89CEA2492B45B5B461B3EFB5726D9AB4E4010ACBF911FEF5A6
A65CCF4F1353A0612C94EF60B1DFEBEDBCE5F383806025B33B5F485136A412C9
14C3E683B500A8C0EE993F2D7EA68B9AD3252C0C20D139DB609268337DF0166A
81F8AA9A6A7E8321BF86669789C9EBFF6A792F96281CB22A04A78E5E09CCD978
64638BA41204F4B949EE164DBE5D23F330166CE7CD3947557B6863A73A3470DA
CABF2AB227270EAB432196F9A7AF4CA7081153BA23332B08461150416575ED29
3FD1172E33DD8E8F20A7E94BCF2B5FC19308732F82CE517EF59B932CCE2E6B50
B8E5AB6CA44B72D24C963D1A70A46F7C9E1F4373DCBC0510DEB69CB912761C71
91CAB348311B9CD919CEA95712BBC86C7ED91F22D3C475A0931F635C55AEB3B1
0C4EBE7107A750CEFAFD3630530B2C8468503B34251B38CEF2F9A3FA021C3DFA
69F604AB33DEFE9CA98954123ECF3A4939C1E4DA2F20FC1C00122DD5918FFF74
57C7B802082AA8FA3FFB1E5C92510B874CCFB3380760DA215A43D7E2113081CD
6F7468FC91D570C58A803D358E5B6358642035A319C9740AA395FB9EDF5149DF
073D321B408EFCF868CF06D6A97934F2D3795BDCDA41A55FFD19DEE72D7038C7
FB48077B4425BF9C503A987DCC5D73B6890D1FBE4257236B6B6D85474963FDAB
82A2CB233C2DDC95E15C0DCFDF477E37F353942909AEF7312C1F591032AB9E7D
2D76A12D04440CA425C53260C909BED4951CA6F67E85C8EFC0476AC25771131F
CA33291C923FFBDFAC9F21858954CFC1365D17E503400FC547E1CA70D0DFB54F
DD5071E5B4DD3C72830DBC9C7AF876E9ECCF95209C3B986E415FB4A453BF68D8
54EED7A46463DA1298B8D8761CB9BE6E873666DE01A7354B6E164CADEFB8137F
2AB3E4E7D338302B94479EFB91FE4B44D559331E862E16FB0C172FB32601B6A3
70C005AD333DFB13165E77F0E15FCA815F4E0CBE0A327861CFC34167CD43B9B1
00A03937965304A5EA9BF9530778E47FBDBB520DEE287300E094873A0B88E0DD
5E702908D978949B691A9F203EB728D96E04258E3C298DDFAF4AF1C85943CC7D
E723814DC2713B418856AB9E45136B77D12BBDD9C44059B4523D304FE9FF1283
578DCE016F1773387D9DE12A0D93CA697036AF6E2C6A443D4FDED32B4AE29DFD
EC1D25EDCC58846DFB03FF05C7D41DD75AEF0AD02E844F2A7B9A8EF27093B6C5
458E4C25F2C9A5DEDC168C3B3E102EAA4521D2544021931A71423FDAF2D7B189
BBB110591F5B5ACA551D5B075BEA17A9323D0A49D0802874BFB00FB7695B7D0C
C80F3A7B12C9CFA426B815CC372C6F0C6645CE1484A32C49FD82DECA60CFA85F
BCBF01C52C2887E673B3CDACB647250F020F43A8A79A14F8DD5B434E3E70A492
FD1C821305D92C3A0A6802F2E48E004077FFFB12EEEB88A165F1DEE9A8922E35
47F5EC3717EE38CF5D977312F7827FEC9CD8F17D48B862BA6ACC45AB0A982C30
E7CF43B39FA7C0AD9F05B1DBCF7085EB87B73846E0301A8CC242FDFF30449019
B775AFA3E907990B4A3EBED1B67BA41D6B9065DD7FDAD8918ACC9E597A4EB0D0
227D6DF728C91CFB989758F1208EFBE685E9CDFEDD354748C3C1F145E12A423D
44E14E24E7D00BDA566C03925FA13050CFAC560589CD6FED7623CF75B438F1FE
46BAF500EF5B41EACD765D04D415307A44A805DE386BE93E3D158FD6E1D63CD0
A0843C51186BC695C663FB7A714217C864593936B406D4A043A425E02DC54604
FAD0CA7EB7CDC84DC08589EE37C39BD3BBBE9124D604C413F7525FD7294F96B1
E0C5C2E24B7652F4284E206981CC39AEA4ADE6C45F5BAD96B397C0C10655DCBF
617C06A52792AEAC417B3B82270A09CF4F3B435A4317F19635FA10A8C87EBB66
4B745BB68D58B367B2A6FE0385E4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB68A4B14D70599
BBC56D832892EBE9E2BB72A6F7B956D8D8F257466803DF558640D82C0BFCEE12
3AFE51583D9E576810FD5239C9CC0937BF33358AAB8807108315E38FFF635A3F
57C728E8D8020D71C1703AE469859D5BCC5C0B83DC56E6B235EBF3767BECF1C4
78DE16ABA697C3F18F402EBF9F09621B8C072090284BC5C6F10E7A971B454ED6
62FBC1A91870F50B7B061D00C50AB1B96FE351BA98EBA736BD0634EB795F1750
1A1C040D912FE802B5A2237C0FC412BD538579983D5125B4655327431798BFC2
F83059A8E20AB526AD5D4999C58A0A1C0782F2E8E9AC7B2B9D28F0BBDEC6B4F7
6A1BDFD3D75D649FABDAD2B7F770C903FC0327E6B32F8F7E8EDC599DF9A3E97F
A3487FB4D457846A4CC88480F538D0235E165B29002949B736A96FA16E3CD4F9
47645951A604EBDA51597C363677C3660A9544903F3219947F97C2D266F524F8
B2065A3371FD017DFC7646347E662D295B965F5969EE12946056C2B85437FBD5
7099E203087E40CFBF7A1B8D32E70AF4DEFF446B129C11611CB13E35F0D1E4C3
F14373531204FC45C88441352EC2D3E2DEE9D90D1F2E8EC2C6B9ACCBD83CAA39
88072DA14BFBF33F8BB35B953EE8EA7928BBA04C986C4DB820DA45AFB643074C
70CE6E122A399A92
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AFD6391E81ACC544000E97C2E4598
BC30968ABFE8C2E76FF1EB04BB78E7BB3975C777E2B2B1896643B51D2D25F3DD
96B454547AA6E39E704842B17E1E8EC5B2286FB19DECBD09D239CBDCECBF8458
FF1AD9E18F9789B2DB9FF2CCC0EEC5007E8D72ACF2D32BBC4DA955E93C086058
929DFFAA13FE99C45BD3E6D13E2003F05703B4ACAB454C6CB74F0D9C95D628A2
62AE0E744AE5D671CDB05E4E8C74D5A790AC0553B856619A14029B25D522EA41
1652D9A54F1D1B22718DFD7CCA5443327F61192D3C6863DF4ACB9C745D059C0C
2180824BAFBDE47BB46F54EDD7D7FBE6BCC41760E7B2BD1AB594E30D797581F5
A0E81AB0F7A6DF463EA4D5F9F6C5D3CD3A1EFE3987BBCDF5458684C134520E0B
2FD3B7606368797241B5BA06E19BE70F4334B48EA578982D5FEB53407BC29192
867A19DBBEAB1696E0E2C1186D0798C1C3A319CBA04421D3BBFF8D46AC997C8E
D678DBBECEC95B1E3EB16DD6D24FD2977DAE76EFB3687808DA0E9B042362B27E
CF0A649BF5B205854F9BF1F07A7DB49C5C9C8318DF97F1C3266753287FAA1AE3
8EB626E9A41CDC6BE62BC7BD4BEE941EBE1E65D96A80F79FDE63FC7D2A4A9E53
638F6962857CE95295B3979711C27FEC43D0CFA62423E3A883D850F4F7E5F3A3
B3D2F64D8C9A780CE75C132DE809E78AF0299948B51235A529766FE954E0D7B8
AC10E08997786BA72E91BA1D2759753E96A327B6CF45A9850AB9E8BE225001F0
CB10F8DD82910F9A54FCDDC09F5B3A390C7084BA4E6E0D78AFDB692AB573384C
326BB19FEE02D4F50615AC4FF3F906E9D890A82B2F85F79FC85E67561B3C73B9
D2DB0F8C6FF6FA86602C9ABFF386E03D9C1C9BA3F119A8D3E1CA21561EF38587
FF5DF5F69DCD8FB92B332FB6509FC3FA395199FAE4F3B71F350D5035BBC540EE
BDFBB6FC9E6DD151D12553E0C94AC457D222E561C04CC539C176DF97ABD94A46
BA2F56B6B9F06ABD24C1843394ED90DB709846CC090E752DCD86BCCF1A5F9FC7
A6BC09A67527FD94136DD63F6089023AD8E73A16D9835B5B34D12F4FEA19F844
F93DDAB2A6D61FD316B5BC7684724C6676F8763036C75F1DC0671FE716CA40AD
BB76E13E2AB3AC73CD8196B982EBDA8E422A9550A2E8816463A3B951E33C7EF5
F1AB73604DFCC2AAE3C9DAB4A1AFD62608D532F4F5933A228601B780BA2B6C5C
5400E5888D2E19124D3640CA3A1CB631AFA51A23677CF068DA63CA1090BA2CDF
850F9E1A5C5856D41D8FB730E04B0C87467990C8FADD97AA854076AD6C685EB8
A77528D9EC0E2F37B10826AA7F8D15F5A74F536B4F63EE567926FD80077CE767
994941E9A5D75A8FBBEDA2F3FDF20CF092A23EA9F973E3F4E5F1A14EBF827DCA
38CBF9A44C755FC8A374550A55B6CB4A316825AD743AF24B4870DF468A24148E
19C3E784E53A157C5162FF14F000FB5CDE7DDEC184C8878A2566E91117779679
3711196E420C86AE6CDFA24B5CC1556D9DEDB9A655EEC89BEEF89D26970B6762
81FE2BD15CD1B64FCA55B593E649A4BCEDA32C10C745DCE5FF4D8E64CE7047AE
1B27ED2B72BE916DA31EB63C05F6435F8DC899F543E8D3E7146C9A0601A2D343
E618E867FDA253BF15122A367AB46C191C464B8E3FAF7100C965DD36E4A3BBEE
16617DCB9BC822B7C531B121120E9D0B34F8CD02FA070656DA891F6B6C2DD195
B99449A0B137708F4F07137879C4C63E8464296E8C6A453560E17D367F53DB87
90493D8E3D0F8C57F699009C8D902ACD8AE978F645BCEB0E58AC65EE130778CD
F02FA48E4E41C68624597766D01BD59A8F5E42C59062139575862EDB989744E0
6EC1D1D83451AB93551D51381A8FE29323DA6268F8E9C1C78FDDFA7906F35946
06C9F70AA43390728A701FB14B6B1700AE32B152F9330AB6BC5E2CECD68B9981
B2BEF1AED8D00A3AE7EC05D9A05AA68412AD77CA3723487975E0459FCAFC480C
3D8ECE59A563B4BE5B7CE1DED13F0047C7A6B6CB3E67311F130DEA693AD05F6F
CAAE4BFC1F60C355698E37C3146B9BB2AC7952170CC7C59B75568062E6BDC00A
DA7B900F53D331A0F830B88E3F6C701E97A57C400F062F86CB02BE39790C5565
72C54BA419064E020112C8BA162783B78C83812C1C7E17AADA221C4D03BAA1C8
948ED7A0E9D6DA42978A983DADBA4F728040D2A098AABB7C6E37DD6D1B9DE5FA
B1CDA68C7673B94ACC38F871B2E9480344BD6190F8D9D5E28BE28F1EA1564F1E
C6F3C18E60239EAADD0D24164AC3F8505DFC7A4862BCB564416C6E3B9E181071
101E184E8C207262119E30EB5529B956F65BD5C77819E5D1E2696EE705195343
43E3827B5CB4317E4F57B8E3E7B676414C724E27F77282D8D666575BD484B353
909D7E57B80AD9F009C766EEDF278F26B5D50F9C8BBD47C518375ADE1CCB5CE3
31B5E01E5BF051784EBBFBF4CB698730F542F14B0140956714F9E17000CA4114
22044C538F6BD473E34EF116BDA16A8764526105E28ED129D09E82012484AF76
49C3FA87A3AE44D93FB7A0D1A5CCD0C31707470E0F5DFC1FCD7A928DF0CD388E
D13FB14AEF5FD1CFD2D1F158122A3CCC53DCDE71AED6B5CB449943390EDCC875
FBB7821928DF50CFB858513602958E2780DBE5D8E384CA3C4F4E14B3C9C75D02
7348A06F7E464AAAD46FF165FE342BBCBF05B837E703278B2023FBA2F0E95E98
8114B4AC5E6DCAAE568B7595A72DABEAA29519F59A963E9F90F4A84685377B43
F208A3F33192926C89AFBA4F271732429D0E7D2F25A4CDA2190A7C4D97D2693F
E5C217E4514A2E5238B760ED6CFB322FABE86BE0F30905CAAAB4FFD115846BF9
8CD6DD8CC10E1234F7D0438AA8FBA3B3C81B70810EB0AE50B5A2CA87320BD686
74F19CAB46BEE6168EAED2B0EC9606F6300D6B12BD5988EC70E89A7B24032854
B34F5FFF1B2283621D7F390FF41CA70C6034C319BEB9D85084AA21B81AF837A2
01B8555BA60C360904A44F1D1EC6A33C1236880DC34F9B9A7F061B9FA20CF2EF
B32200703EF58C425B9A7D27C8622F3DA3BE87F87ACE26A40B708D9F5F4CBD9F
351C409B9FA4E10EA00ABC6139496272CDB27D6B56D0EAA9E8BAEC4DBE7679F7
D60AB6DDC04938A42C948093629F5AE9312D840A34635EA134C5F21711AF3E5B
9F029FE21B08EC85B51D5111091F54823FDAAC9DDFDDFCC6DD161AD22440DA49
5102835E4D08CA22463975114BA484DF99286898FB52E8D60EB8F100DC970A6F
6FF1EC54033B11F9281DEB6EAD9EF3542E06709563C206E7044D53414ECD7045
DDEC6576D746C1AEC54ADE2497021A2B138846D1A7967B2433B6BD77628D7DC9
2221438E1C15460912F08C8FAEF2476515A41387CA09174006C8F2125DB480EB
E67900498C2F9834799128DF2B034852C673ECC07FE64FA0D48C8A3F63ED30CC
E41E5BB788B2873C2580AE1EBCE056A0158E03373577B6D2BF8FDC26D77EA9BF
73B4B2ACF8559569A120F9BAB156215EA752F4C5C7C97FB11DFF4721707ACC1E
45E4D50FA5D878A7BD6CAB5EA125229420CF2450270BB75F181704FC3ADA152A
9B3FF30B21AC770E51AE71C71E6B7796B6B54F27FEB1D9F83D35D7CAFB950DF5
FD1CFDF348B8A1F08379922A63753CC04DF36956718925520070ADF1C1C69664
036AAE212C84902D1438E9C14862F5B9D7E218877590C769C117CD8ACCF943E4
38072C9B0E5A5B285AEDA6373F36A7276793D1AEA02C1033D9793F00C5BD05B7
48D1520493631F0154EA2E91D9940D8CA147C1035893E2D1C6AD444BF3463257
D3347370CEC5641BB4AD4AF497130FB3F60215E2C2E237091723377A30F50EE2
D9C8C41FCF68538CA075204E90FEAFE0A407C7C23BA5F5E684764A0FF31877BB
2070C60DF4B6A87B879E66D5E87D245B9BCB889333EC2CBB0F5EE165832AB3CC
BB2ED93304D80108A5DE4EBE46D86FFB6D567AEF67B112126E2ACF3642047B54
B090BFA85D103528A79957F00BF8849A73B9D49874E3AB3D0A25158AC6596F45
656333170F697E088ACB6FA80A0301055D27B9479396116CB75D3735842F6E70
6AEF5E65E8CF221B995527DC000AAB577963DFBC17E9D7D0B02C97A07C671850
972D3CD9AA74EE5B605950611391602D2BD43C8D0B7E42AC99697B4B5BAA4E55
3BFB219E0830F5B6C1A7BE4066E1E941A608D1ABEE882F8B8E7E317521A0080D
2E917EC3E48A45B3380636F06F3DF2CC1242DC67E7B0B3618E10ECF17EE37A62
67ADCB0646D1B018C441E4160DDE659F85ACB1F058AB549FBEAEF52F994D2881
BA76C9C7F25AEBFB7CCBED053E6098E23F84C6D4D85384647137F51242C7BE6C
79DFD85CD4573255CEC49089D8B41B2CB3007AD15D76D98247DE6ED8D91F3217
143E900838FBF245D7B5398124CB1E9D067FE7D92A8CD4A58FDE51DA3B8DB62C
4BC7FC892D6AD62D05AFDCDCE4E33091132D471EDCAE386078D2B2A65396C7C6
2E415DECE0740B1C300F284B0149B168B3EF5D5AB3BABDCD98A63B8F3650F86A
E90725D1E036BEA29CBE661AD52A63710E4F7D1BD8857EC3B6125EDCDDD7C7E2
730D3AC8B2C9AF7C2CEF8AF45192F266386285B652AEDADDC77F41B08C709273
3A204520B476C4E650410D6C61ECC8A1D13712CD001C8E522C332CE0F033C7C0
5662A364F48D8680590AD47310066954EA68C7656C3D91023125015202325DA9
EC74CD0EE7C4569AAC2500673A3B16002BBBB3CFCB08EDC0FAC819F88194DE91
21CAAD682B251DF561E863F939BFBC147491A0EB8BAE7EE34C174E50C7436F83
3F45A3624AADFFC21A7373A42955C7E5688D0EBEACFF4924E2DEB93A1DD1AE51
483BAE0303DB98DBC7FEA6FC0C4C86F21D98814DA3AC435B60A9C2B7BD717159
1C710366EC9E9E9C1D03E2D3F6906D66D0014A2523949B68137F604BA7F1A81B
DE6D8A4BA6880A35A7F8190B6D9FD1922C8DE2C7C501CF19FEB3FFC8586AFE88
F80719C82B41676A4AF3E762FFDD4792FF706AEBA91893597A866F289B75B6C6
23DDC0E21C7BCDF3C410189522F61655505F37D6A182ACDF7D3B172AA1EB3E3C
DD069A8D0083467D88AC57C62ECEF68A2A28D55B10C476E24A4FB28E8DAB6E2F
8437B384E23D006D00EAF98EBD7A1288AB7284B078FEFBECB1DC8F5EFEAC56B0
55B6F1530D4C0E5E38467F77261BED14BB6574E4B3D7E0CA1DC96A72C881E694
C4C5F6A2E9ACDE3B3355FFE9A7F8F5B59726D99E2108E0FFB4CB01CF7EB213E4
175A4C76D86C83882ED85FFB721A5FCBA3AC1C1F757102B677A74AC48E341259
FCDD1E8D932840FCA37270F68F8EDD00AF9BC17825D628B45B690CEB94C518A0
034038946B62705D45C4B5909FE549B79847BE56BF0608B9D0AF0BC5CEFAC36E
C9E2A4721128948A218EDA868E1DE2A3CB9F0D2F744B72F977376A03F8F60B69
97F3DB8CCDDE45B1685F26B3DD3120E618BBA0C7F27CB8B213CCE1380B88213C
308167001CA90A8F9751C8FCC8CFDE3A43467A18708A41B051F31A13C3EA3D58
3D1AA7F8BEA6A316A001EF34B710BB4B0E89898939E1925A0D5AB2B952292E60
28414C7FCAEA0A7E62E4DFD5645313C81FB8C0B376B51523394318C22B863A35
9B68FCBAADEDB10EC5ACBE8B292816772463F644C7D257C583A3009107F6F9E5
DA4BB1AA7F88CB9775ACA1568C8F3B844AD529F957583C923F544E8CA05E5F13
EE12F67D7532E4799F0DCF5DA54AF47F3D786176C921EE175748740DC928A68E
FFBD0C158DA4DBA9E3EA0A91866201E0876E89CFBE65974A04114F3085720C09
1296AAD4A92DB15A78F827CB3559A5FBD2284D3E100967B3BC7F3D6443546477
104B8A2AD392A17B32A6FE5DDA4CD2AFA8D9B404C04C70F07EF70BEF17F7C10D
58788E376C90A7A97D159FA0AD809EA0E1D4FDC7231FD0ECA5100F4FEE50A3A6
E95DD7E9FC49A8557F6C61D3B4B6B0FD6A646DC4EEA7AA9D45889CD4D64AE841
B9699DED46B221BB8116BBC6FC1C6FA791B871697F1DB6E55F2EBB231F88BFE9
882F3847A9C742F7028F75BA990750461013B1D19A1D63FD3E991E663C27FC80
817B67E939CF690133EDE92FFACAE3089C989937701C1041B8A59CAF3791C219
F930FF9F42A78F68FEED6510E900FFFC8BCC3D355A4F3C7BB8FF0113F63BBC7D
76B43450F22F40CD7C3F94CFEA86A00D25806BC2E39A28D43710781EB7D55162
6AF11157521937788322361F128C794D9D6EF7E18E83010405CAA3AF558B233F
34D7C9F87B96477EDD43D102BD91FE9228C8E58E1D387D7D032690907A7C3E85
8F279C4F87B0EF573AFFA92B9C117E8B247BF551BD9FC251BBACF9B45022C212
21E85DF7EEC7F87E5FB5F9B4D986B6E975BF8F27A17CC02DA97FB715F0C8D4F4
78D007CE9EE3809379FAD31898ACD6CE83E9D540C5C7F066FEF89D9F1096586F
A88B7524532B925A1CE2ED8AC7DF3E7562A5B1264DB8729899EEBF26E2EA0A91
866201E08792F03323228B622E3010D6456E208F20774549A2D4DAF2AB5AC55D
031A2A37B21D49F5CA06A5256DB1C454FCDF55D0F95F11AE5AEEE8FF99C88042
C30A58B2473A333E603F36F68AEFEF88DABE4F808F2036FF9E4827B97B3260C3
094455A0EB784DFCAF5F602A0E418100F43B96CF291B4712D56B35AF4D8C01EC
A6189925F23F0DBDCBF69D5AAD409B239F1D951AAF418C77FED6B293669B9E96
83EB4C4567A7BE6F097C7E18B906D915352458CFD5817DAC157E3885B8EBDC36
668933D1B38B4B56A05BCF4D0E881031C10DE091BAB7ECD1831F0FBF5E2D086F
3115B185CBF6F362C146A2D1F234D8F3EDCF0B1F51A01691E505DA03AB3799AC
275B0F9B72A4D4B36D153E5B17838D497D8CAB42412D8D67D1A9C58E38EC9F0B
780C2988095FC3D498C0915BB7CC8D36C5BF1502696A2FC6C88A96AA853B4D07
B9843C0AEE5C2F2611484398B81A9F304CCAD7AAC7DF2A8EDD7329A3A0FBECB0
B08026E3115CDBB71E7FE4EDD9144790043C9616B0A7A154D9577EB6EDFB9F15
7911E60BFC3EF309DFD0995D0085C514658D7A1084DEA5C3FCD95CB185224C85
52D197D6C1D6693EA252427E636BB34CEF62411560A53BAE828D3411D613F0CC
AC20A2E48B37F8BCD9F77FA13BFEFF0A5980FBAE2FE3B3F62F20BF5C8B3FF754
9787E27C22515F25EEDE33457201AD3F671582D9CA9BBBA6B2A5A6D96F9F2221
E85020131163F32645F347E1856DD6F5B16CA72F10CA6258254297216425EE0E
46D2DB3168F736647968BDA608B66BAE07DEC4257E7C6DADCAD5B9383AB43335
9862DCB30BA53A413B5E994450BF7A664AB5EEFC7B820575D35624FAA504892A
BBFE6EEA02B59CA37EEAAF4D84EB726C780CF235C8784D3DFEC956E15ED19940
9B34925087CD091EE98EF7C5416109CCEFEC324FD2DF976CFC21F02925687E06
3EE7BCD0752ED2E819C551F3ACF84ABB0B43231690246CE183BCFF4067FE3858
EF6F031497B782C0B6F92FD9C53CF0EC92000AB95A85399BC5C251127B6A8692
B35C69B87E4289332A867E9DB144FFDC1C1058F4E2F68029C19BC14F1C99EEB8
731408AEB443967525002205BDF49DE4C1B446CBE6683FADB4A60883466532AF
71DBDA671CCABE69652A7A0E48CD62CEC06D0578E32526B0722C162E9587F3E5
7B9104CA91075297030793B4EC86011CB0106EC22428ADA49CAFD61C357CE013
25199C2F208A02EE453F545DC69D66B1ED931A89206027B020024CB98169C9FA
F20B76D6CDD0DBAA84EF5972211708AAF92541E013F4552911DC3FEBE6777D65
051CF35156380D511BB8A9E7BB776B37107CD588225511FEBE1F1657B753C6F1
1D65E7B61ECADC94491C5FF034CEA604CDFE87D8D94E21069ED4EB4830E5E1BE
4EE7195B4650686DDEF4826FEA7D38726F2A1891340BF1DA9F49EDA513D01E7D
400E45E873E7398025B179511840510271C3A7D095AAB41FF3E3ED205BACCB90
673A73051FEBABDEEB2295993C2836FB593DA7C108DB15C18BCB8BB846C142D2
C5E890FBFE5BB42A7150737F7B9FAF7E0D5C9B7C3D6E3EB33C8C802A1517D9C6
FDA3474591F19D573EB051F069386B96BED7E150B0ABC19457CC6C0C6036B152
6E7C786E264D7C2CE47E76813245D62FE866AC5DEC8FF6C3F549915FDA3D82FC
347F0D24314DFB378B7F001843D00E8E5450771F19B59A2760C52C87C36694BE
5257D9DAAD6044C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C4B01717800BE4
F9C7E39DEB8A92EE0816009F72EABFC7F37D6437716B282F736AEE1A4F727344
CBA04D1A0BD89BD91A7D74A76DAE7C2F389F7870B9B4200D72175BCE630A719D
E1E109E5BEFC2A4098E77020110C37A90B597F5A98FD2B4B362D9DDB163B01F6
0CFB6D04978EF48AAAB03C5F36ED01D8955E11C53CA69AFD141242589D06765D
9F1C105B41F92F125E3BEB0D110399CB8EADEC0DA8E068C0D453945F999AB608
2714B4EDAFBAA48EE80BD0A08104021E7720C1A97D522C07B0F972DB969DB770
1C12EF72799E945013469C3DFDAE48F1F131513EBA364E9FB04F46C2A763DAFF
6642ADC1ADB069D7BEB4251ACEC2D7913EFAF442F2AF2286420A0770670AA0B8
4EE33207B9D6F6BBACFCC966652D4994385B0DB511DF9CDCAB49F62DC6AC474A
C2F11808940D6E9AFAA51EF6C23C3949A939D6C253F4D15F219219825BEA0683
92E9EC12F7294EA0D5A8E7FA28212F91D8E6FB8B549C592371331A8A8BA0919D
EF1D3F443A32A724A003C23DE44D0A120AB0B6338D8CF730881326E27BC33436
A35995B50C495CAF8BBC9E92F80B744761290E8ED0E49466DEE887E18FEB08FD
F71933A1249F78E18EDD2299E67BF9EF6CC03919E5C824CFB0ECD63197028431
A5AF088C5A5A90932186AE8F4E42C4900F9BB006D52F401EB1EC420A711AA2C7
3CA4D3738F09005FA73F28E789F3986E99374770DF61DF6C8619889CAA3A54DA
F53B1677441EDA83014D7534582A02C675ECB0DE30DA95A34D9037CAD68D730C
59F8916DD217E3C33D48197648C13FE2F29D25BC8614D6C29F336C5E9F60656D
2F7EA3E49C37EAE812266982EFCC4C3252AAFB5F43EFA9F1D05A6B5C020ADCA1
F99D1C5060337CFFCD39F92BCB73438CDBAA07A27A116C80E837DC740E860689
52F0A57C3C13BE98BF1F3312B4ABDCB2CF777595158CBABDB643FD0DC8D2140B
854F2E7C3CCABAAE3D2A80837BF7F8C9B2BC555BA60C360904A44F1D1EC6A33C
1236880DC34D25725892DA7996380563BF7A3B679EA85FEF772477C10302F33A
32C37D7C00D1EB61E25ECB12B1126317F7EF37F8191D09A98AF806357C6C5609
9EA374BBF2CE56A8B4A8412B1870E9E7453C99E80FBC5ABFF0661E8255BC2F68
45270887C0AC4B0630AAD1FC0B5E43AC491292EF64870919E9E6D97837356B4B
1F29D4B0F67C8A86432A79D72FB989F9DFBA0CB091D4575F9D4EAA135FC788C2
4A7ED698359074FAAC55DEE70CC560D6AC6457B5C52F54ABD9505AB06AB808EA
664CA9F1913F5649AF34F26376D914626D101B4E117C63F2E7A60627DC40CB9A
B16296799918E9E614F8FE024A7C59EC9ED04BD079834D240FF88BA97C63E467
0B912619A20C13063E6730387C5F28E841ECC847467858898AD528633F477B73
9EAAF07A53CD64DAF1EFD40AF797F32DC9655692C15AC45C83A6EF887D6C7BF9
95035406C64054DED8BC381236C47E42BC381CED244B3351B9191D5B4BFC8561
888BACA0E816E75D68403768D472C7A3BF07DDC78A7E0B1B67BB5D67BE7AC71C
C1D3103066F6DE77BD7D99E0ABA1EBF44D78755E6739F883F7465E6C0DDDD897
0909777818CD7367E1206DED7E77A8B4E0B5182C1F9F01C677EE3F7513703893
D93AE476AB15324149043E713261671835DDF16239591041B0EE4D1E1AFB6B6F
A6EFF9D626D24C4FCC9060197EAE6E28CC683E82F754CFE79598457D94ADE427
05631577453A37D1995144AC22383BAD0D43058F54E218271CE8EB7069C9E67E
96EA825EBBA92EC6210B4F111610D39D700E23CD325C78530B4647F4462F88BE
E48BF6CDBECCC7305AF0A4793504B223376B60F8D136DB16A44A8964DB820841
B614C43F5ACD9126970121B0F16E7498D7BCF62735379ACF3309DDC5C3F30DD7
D3A37806105085EF2B7412F43F6225EFD82D88C1D80B65496855AFA1061DF041
7F99C38DC963AEC0363B88C91C86124DED3FD904B7FFBB8A539A5A7870C9521A
69E792093D19E678B8FBF527FB93791CC72A66E417BF6E00591F7826058E680A
84582586E6E8AEA43FD5457464650A7F1E8A5CEF45D3B0D70C6EA483FF99290E
13574EB802422BDAC1D232E9CAAF95CA8FB8D7D6F8E6B1F1470D1BFD1C6F7EC0
06AEAF56159B724B67EB2937B57178972ACEE54AE9FEB9F734AC514A3B200ED1
151418051744E40FB9C8738CA25FC81B91DDCE0CA3E5B551096DD5762189E8BB
90610BA0ABC84FE197E62F075FAEDB6E1ACACED6CCF2BD211D79BA01F71E5648
2BE924C444FEF0F24767A37BE8960795150B4946D2C22948232CC103AE97C8A3
427AA2CDBF56D49CE921742A12D11F083A6DF8ED299BAB6D614B2773BA052B47
5D09EB09469D2BB86F7BC232B843FF79C69B9F10988BE7D061F539CC8711030D
2483F7532C2543F9AF30ECEF0D86125D70BCB7A92B2BE3AF10DC5AC63E8EF6D7
208F98A54A4028353B1C561CE8C4F1CC2BA1A1097F300EF1212A5129AB2E71A4
6C3AA6D9B592AF58BC77A30E33AE9332A79C9DB90E6F6D84076BD9B80C3EF4F2
C664871EB1A07B3A6946D45571FC760DFF6EA669FD45A16A26F5B8E1ABE5009B
D17D8A90C410881D28DFDAA3116D2B7E450C8F7B16278DE567FB37E8F7090265
C5955C8503A6BCEE71DC4F50B5B3B4962E06D9816F948D4550C09E8E89E7C834
710685AD77CD51634BA5A3ABBBBF3C3B3194AABFEA61341C59B612180E4E1C74
4E70C2661E7181897AAD031B618CB8BED3F5BE7F28A0E6091CA24A56DA1CA78A
8AD61511F8DC678BF43D83CAF9B99E4132E2BF7FE56CF6503EAC88E8B4F4DCE6
5154213A378F7CBBFA3387FE25CFEF435292714A8F491E2801D2C432D525376D
EB06EC5DD932D3A480A00C51EDF056BBD177DA5905E8B396E7492E95B9E76C94
149A3F18ABE7147B05F6AB7B9E2AE33CB7AF75D4C6415B9B58B536F7B59F4353
D9020ADF5271790BBBB6BA3D4E22B144ABD8D8F56E7F4C814DF759C9620BB20B
E364F998698EAE907D9E02960F7C0D013CCE063154E006EC3DBFD912C65A85B9
FAB32BCDC051BE4025B6839664B8ACB442D91150E2808F1D8B26E038E11B8F39
F3624BFAB0758A0BA5AF319FAC5C83038807C1CF9869ABAC639B076F95253723
5EECCE5A74D6E6A1BE31E078D0A011258412B97687FACFFD383A1FF88A692FD0
37572E4BD892DA454AD64681933B6D6BE90EB3E92152CC8107DE4A8794E7926B
E08ECBA0D77A3B65651CDF72E1CA56601474FD3DF4947137BDEA68BE33B1C86B
31E6D192C22134974E27D9D89CBC802B4A9D803BD635C0587EABF47C207A5E37
031A4C4A86EAAD87BFB1ED2F719FA25ED27DCC025700000D152E42DB1C1ED509
438C43FC480A0FAF50A76B7BEBA99F7A8167F9AFA37A73A0FB81B4F33C12D7E0
B65E32A8EEA690C33C850A8BC6988EC1D372C33816113602163D500E957D7591
699856E4445454E1BD4EAF1CBA3E0C58A7105830C2BA44D6D06B280B348A8C99
5DCC595125912F12542EFDA897594095146E02E4330AB6BC5E2CECD68B9981B2
BEF1AED8D00A3AE2E48E4FBAEF47BE3700BA5638E8E3F4588E2F1A25D33D2503
70D5990DD9B4CA9726CAC5224C853F2229F0B332D367068B6E7C7CF2E2432A65
BA21DBEB0A83FC660BECE9E678D4C5714622E75955FF3E78C4575D810E7E0503
A686324E2AB57D00D2AB94AC15D29E63BC4D26CE480501B6A8DED24F62FEDCE9
3A17819A13DCA189C24257B5344056E7A1F53FF5ED7B2E617D6273562E2837A2
3DAB9836A9D4634A52602A4A406CEC3E6B836FA313F76E5B5CC09EA5D64B5FAA
44144D1A6F2F8BFE9A6DDE8802B963ED8AE8B8511F987E96279E3AE01FFE68E3
4547E71D98BED65C8B29524188CC192F2D4483E6E23CAB9F3FE84AED886DD56C
D3BECA6BBD5518ABFCE86CC6CAE184B7DF68E004F901644D3A8A062AA13A9AB0
B05CA3B0D56FEE60A75A8C17EE6E339E5C3279B78C4BF98B23BA5E8AC7FF5D90
527700DC510B038AD7F32FF9EC47514E587350C63E5B302FE20C658BE0541B64
7A5B45E0F1378D7F60E3C097236F55AF6FBCD9AF0E167742D0BD0E131BEBE587
905F6824592D05C21DB730478CED9292843AEEA4FBF2ECB0658FF099EE65B791
C63EC6AF40656D93D618DE07AE2DECA9ECDE88EE04FE636A43B6B361AAD79CC7
4E8D663DB06992292E4EE841E84D80C291C9516038B72EE019E08383B6A269D9
28DD94CE748AC1F0E99EB86A7FBB22FCD1AD8EADCFEE7E92637D00097377258E
81CAFEE5C2E32202C19B3221F0282692BD7F55E4A825F190EC8BD9252D68F7AE
DC298DC4F4136B43B901F6B601D390E2DC1104F91B54A06D57CA568AB8B0216E
A14DDE19D11D1B13D0D488BDB61EE45F2D88DA5A8D665AB77ECF4D059C69D4AF
6CA9F04D7B3A3ED0568B4B95D090CDFF8E001A877DD85F70B84D5618E4F42F8D
DC0144E7C1BB169635270568E060AD7BF221357FF9F543805C6423089BBA4411
8BEDB82ABDE31558989588E0613C0947FCF0BDBA0F1368D3E38954279E5FB9F4
C8C391E523EC0B48FB12A98D4147A4AF8F821BFBA1A5D7E2BBE984B17FE9303F
13428A68D6A1959288FFB391985B8E690B5DE0D85B3640F18B169B121155CC01
81DAA5AC848788B84B2F90CD6EE7454F4458D3738EA82344680C9984D8B63A12
D9DC4BE10B98D5CD9EF55CB212E1829D8E474A3945350FD283F04E72AE6EA40A
D3FDECF253752D2E666E4453B5C1488F2AA4E984A613FACF3A4858C0E4B8F7C3
EDF3F84092A930362DD09229C80131CD5B88E28671D18D03697809C66D774B67
16C2788169EAE549930010080C12CC74EB8C5288E168E18C8694A63684507E37
76F11DCB71C93034BC2A99354DAF3705C241312CC4CF7E8DA48AE10F19464273
ECAC6A6CB033D04194944C34C57BAA186858CAFA75BA7DFD613802C1AFC51E61
8530BACF47165362C1E0F6B93CCEBD0545DD357B4B2F8A56C95877234F9FD6BB
97B3AB5C0F27DBD4DCD8F0C6B2F1CDBAC5CBB4AF4E5AB320A83EF5F8EA548466
A659EC1F94D869B259DD936CA24930E7085F7B9D49E094279D88C443C2F89671
38A65F45FA34328D15C8783042C28516C2E73CDE30808BE614B0E5BF6A4BD5E7
E7BBF23EF4950355C7998100F74358174807186A7A1E13237EEB490CC26A781E
84695DC9F8B0B7DFFB1840474F47E33B30161D50EC670DFC016FE537EE59398E
B4C5F16E7D240913509A6A276440F878869A55B35DD3953ABF78EC3CB5A4053C
1C038944FE02F1C43F922F130B0FC4EDCE71E8902DAC3D8A2296B66A700DC9C5
8D128334915DE811E2F560FF07088906B8E9A5592021E20826BAFDB8427B29D3
5E9755F59B301BAAEE8A0237BD6C911EDF7B8CA9B4FF039FE7704B8D86E98096
2317F3E1C259786AA0A81493F176B819E1BB9D1C3874B9C15176299106928C06
69CF10A7C6C3582FC7A5D73B5834F162E013B15FEBFC91EB4F702063C76C0D90
CB8A5443B04C97639DFD5FA9F519E37E4212D77D7FC112B00B6A6728EFD859B2
0F3AD5D17D33DF0B6DD29A83CD8DFD1437FA0CB7C13EBEA190BC7468FCE074E8
0B7AAA609E7680056C9E7DDBEB5FCDAB397C646947BCEA44C0F5D82667F64103
FBD59EEB2136E99281C2CC19B3831956464EC45D1D623E5BD25A832E32970F1F
54991D3B655AED4CF3A1F1F3DB0B15C3C864BFA339E9641FBFA6C29E9729EC7B
DB8323478FC28061CED4C04A4421A3A10007DB1043ABBDC886AF94686A1FBB8F
247D28768F83FB2147C3CB097745EAAE054FC44E34AC1F117DD59C5466DD93C3
AD7C9B2C5A78D610AB3964C8E32CA47B45F24C22C2411E7BAE2AAB9BC394A302
F00613F5D8EFD6A73F19F12D5A8E56017E7187A20D42C55516A9B2051C0EDBA4
84E89D3A3FE292234702C6187D504449543DE64244224AC55593AE70A713081E
915433635346728DCB1693BB62A71969744C46538804E44AEB2C371AA794431B
60F50B0067BFDE426B7ED9A08514345A904A65874AE7222F2C335420119C9151
5AC8E88F3C9DB31933B9826E6322C4D62383782CBE4B01AF33F891C55D42DE69
D2BA4ECD66E376054C3C1537C5640CCCB7C73BB0045D04727B8654D64189F7ED
3D6E74AB37D2C4DA4CE7F7F96AACC58FCD1A0629B9501E1D2577F32D1DD96313
431B7C84EB3D9BD6816529BEF7AD440C1375CAA1BBD14D32AD0A36042DE38854
26D8463258E374B7A0A25B0E1BF02B4108537CF2F15D8E7233F7B40FA129F404
A19B31824526329E1A9CAB58B0FA2A3A97A96FB8429259312CD33AE37FA6701D
CAF4DA65B68814EAD551D365821C92B1E7BF95349E3B7784FCB06409E718539A
8A368389E56271E96908A1BAB8EC451DB2140CAB9A428F23B0F9B996EC30F56B
DC0CADBA83120A2DFBFD720D34888EFA8DCA131B441BF1F70816D27F1D16A3F3
E838A24937F98342DDEE5BE36845C1CDBACF8E63E8D43349D8BC2469E6F68C6D
A92355714FAAC48FB52C672782889F349BDDC9EF8E150A4BB7A629B96BCC2933
6194B731DFBE244CE87743112AE44D04161490FE1E8FF9E2152584768417147F
08AB6BE773C5C259ED77AA0373580EFE9D1F4BF908201D364E29610F5163E070
6DD822C49BF22096860C1BEE8BF331055B23F178ABD4F8C666147FFE34BA7847
3016D22B51479AD818557BB2B9C978E2750021A84B91483EFDD26B95161D6130
6CEBABF2C94499050F9269AB53C7CDB7DED49DAB96D9AB1201BDAD2782EC2B7B
3A013C64825FEE9EC2D167BFC3F8901257FA56D6747EEDAEA2758F1B2BDEB57F
379CB3546D38C364A77EBC85A52ED30D1D400FAD5F2825C8CA0151A3A616B803
DAD575D1C3F6A9E03CF8782516150C7F97431B46C40E3C5BDCF8837CDA8DA4AC
C0A04A2F1844747EF1830DBBCEA5EEDB10D678D542A4724BC1E127D074918CF2
98CE66E65983EA230EF2722AF3C11A75F16ED4C76B94C99F0A33FE83C973E6C4
AEC12F4AE1EA304D2AD666426CDA49BFE1D934F32074A60DCD3986B1504EC71E
58050EF111CAABCD0439F698CE2A02A53248B40EBE9CD56B8F43AE6FFDB36FF8
F86FDFDEEB1BDEE2D0D456531D03E5A0ADE28E5733E7B51F35115CF665980FEB
E220345F83733F90676C4DC5FE06D2486A4C9DAE75C5FCD7D4C9DEDFFDF21075
B5B7A1155E73DE218F7EED186FDF5BBBE339C234B645CC1E8BB7F532C829561E
ABA5F829C4A771DCDE91E4E70A891479CA697C7D164BAC071B5D01C3AE8DEEC6
66E45CED430992DC91E463238A36732C3ADACB0EA238AB8B29F707E6181E8402
43DA435B040BF8FF666F7C91E6D296AC56306512E63EA0E45ABD4ECBA000154A
2E3FA4C0BE4E934B125991A1E468838788379255D53EFA859F8A6C1DFD15B0A8
CEAB7729E75C2D9FDF25E7A880D22300ED71D9C0D23102EE49248FFCDB45A16C
5E820CFBB30F2C28CBEB917A1728AF0405D1D3DA0482B107E0D658D1864B967F
C22E179249E0B08ED0E49466DEE887E6FCF478EB31FF512283643D9BA7BE700B
CB45D764D5754B34ACF93F9B6C2C4DE0971C1FAC50D22F229A416350C44D3C26
13BECDBB2A1289DA0AFA2D6C738C928809D1820C10E52252265C062AA7204F2F
CE481B7FE89A63BCCDD49FA1598C534FA8C661609017D367F053CBA01E86B3BF
5DC56BF06198197E6340725A21D2C11151EB6753ABB6B2AFB5573F8892F82BD5
B6C83A34C78F44E63D5B48E304FEC4C397EF336F53D7D3CA039C4C270E443ECA
7AE5DB1BFCC5AD4B2EDD2BBE65E9D98209EAC333EE21FB27553D9E68FD8E4040
EA05CCC71EE1321603E2DA2759C4D5180F276BBFB65BEFF8284CF9E8F505D5DB
D7BBE242FE071FEA0094A55B450B93A255D2D543B49841D3CAA44180071A4AB1
A4281E2C4BAABD8A23ECB4C310BDF9322778FC74AA95ED5D9F23982E16EBFEAA
55F8FB9CFD160164BBF49DE02B57D4926CC87F84F728D3B171F403649F30E6AE
BA0A87F4C80B9464A607DF18D1D94E59CF80490B80BE95E0EFE4195200C8EA48
1F2751DFA6A44F8EFBC219C7944D9E42F82E7EA543E8E0F9C14F1DA1E8601635
10EF84F392E6278D74ECB3172F52565D2F22C1AE5C75AA37A215135CEB7EB39C
456B9079DF81C6AD88937506530FAD536A884734D1A161ED15006EC6070FA9DD
19EFA6AC8616BA7A90AB43C36211ADECB05FB24C45BA6CD3BC9A7A2EF4C32D57
0D1D28BCFCEFE63E35A77123BFC531A09C22B23B47209CB5B6CDBB42774CE158
55350242A84248959DB1B6C5493D385AC4B2CD858165DE96C97C60AF211519D5
30B295F367F56046D72A851AF70A1CD55C16F978D9D0D88F0B1F82E39952810F
FF3EA86E2B027564CC122E040A0F8D3ECD9BC4AE64D224075884E3CF798EEEC7
C8B998A08E6CF71DC969DD39E8949E608A1CA10322608F91F7EC8D1A1EFAAE77
F13CEE51A25F64EB4E7622B1DF6A97EB5B8CF0D704BF19E609AC73DDABA71876
A64C33752541A4DE08204FF0C454D0EFB2A42425DF9EF769EF858414B4B080B0
ADD272EDE6F7997CDA8358B9B28CC547809595D1E114246049948C187FABF401
324F9989DB792F752C845B235B64B1A23A802278ED6635F3A42DEEE11D41BE82
62AC71A2B429489275571F6BF6F3C4A077577257B3BAEB5D55D267E996FD61E0
E2EA91C6FF86B9C275BA1F44C178C6930361E9A5D82AE8B454483AF6699412F9
6F8B2ED6A79C62943F9B23DB483B51F60B8381D166D0D6F54541374410AFC00D
DF118F4B74C61171FD4F94FA531C9A3698778751B279627D53116458DF41D9F2
78770419F5FCED8C52A95DDADB54D6706D51EDC248670E295524876CCE479433
EFA4EF95A80220FE72248FE394FF0E9CC2AD41ED3D78A757DDC850EAD335A76F
A166D075592A5C248643A17FAE628624E8EC95E00DE8AFBB11B6030A20019292
2A948F450F7282294145369C6561841A4AE6FC17F37C0E9D9EA0E29C6EA7E724
E1D7ECDA3A457619DE249FA86275B6057B6A33246EC97A3FF64B92804DADBE35
1DA49CDF38FC210A784EA2CF0DE96925680BBF73D4E9880CB0FB1AA5D06150B0
411D53BC4FDD03A55AEB8F339676D7BB9AF94FBE12AF5488D4B3F5B529A26A26
5D8B70717542BC10E7F9CF2F5D3F671198B8E1077498D679F390D9F1F4D814D0
BF525146732C6CB852F019ABC50E0B9686C5BFD5E5698408DACB75C3A6A7ADD5
F823AA0C197EF5A8A44AAA592BB04CF0BF542B7A9448B52A13B0746BAA6E23C5
BCFD87119A23471810117C269879FD23F4EA041206C036A69B4CC6CAA6806A65
CF6B1DB6AE3FBB58B034F8E3CBE52FAFE31266C2CB600E2D63BCE0108209256C
30137BD016B23D7D892ED8920583F2BF7C5AB3061523D82A256D4CE0B9893EC3
754C263EE09366605786A6300ED32754AE5612FE8631908690C80050F7CCCE4F
8D114061AB92F640F6BA0A16490EFD16EB913E0618F65D0898DC85B177534BA8
3F97A889F8A9FC4C50DCC939F54DC3F702D657FABE1CB506CBD74059D79CEF1D
6C55B3F1ED51C694C79F3FF3AC9CCDA2418A1C3FA3F71244C924A486B70892B2
89F75F5A81B1E0A3E10B009E48968EC723C6DECDFDE76C4A7E72BE6E9B211DD6
9A2B30D4CC3DCF6B77E9157683FCBFF411E352A81967D679E1525753D9011584
CCEF09EC819C0E56EF90D963E67E26202A43126E049961369E17A9BD2B399862
F515CC7B14C1A6CD9AD329502BB6DFD626BEA3A90068F51F53731DA0C15089F4
10FDA90C958609569B6D5FE25BD9215423A84562ADB5AB15EF9D9AF058DA5260
60B9BA701E8FB2A41D78B13A5D4A79B827C93E1185D4A2227B717D3E2A53E09A
4EFE530A666EE9AE02A506C7F8C598D226227FA8C178C10D90A2F26A639CF7F9
F29C96AF2495402298DC4DEA171EDB972A0C8D434AB2493DAFCA88AD0B4B1298
5C543620643448AD76BA59388379400F632556E58BFEC693348C441ECD0FDFAF
260386FAF1E943B45EC567BF5F19B084E2F66C137A71355F36EA505601E5C1ED
DC1B50085CB9357A8AD43964D36C07259BE8C233B7C9C6B545E8CC88EB6EAB04
2D6790E4D9ACB08703E3ECBB95D57A6014F9498AE848C54A1BFC4DA8D51BDD3D
BF79C49A3B21C51EAA76CA59B104A0DCEA13E81751B8109A6C3A233762CCB5C0
A327FECD72116B2C9F956FF06A2B47EB5B4DEC101B85ECB9753F0D87ED7A5E3A
5FE75FD247B77833CB4DEB51F6CDC5A9325FC7894401874A57227D611215F218
B1A2D47883886AF57E76CE8A5DC70938056EA7B173518D8D97ABB9218EA12590
DEFE71F217CFE9F177C4C2DD795EAD87E023937F05434C812F498AC7D401222E
09B5AEF86092D52CFE633BF6D4DDB37CEA8A97503099B16659629DAC979E35CD
CA7A77BBDB1418952833C946AFF2030C9F2283BBF84A6F288DFE03A2203D06D8
C21F3D4C8463BA798486BAB311615751BEC3A898615C736B55D84EEAF9CD4E8A
E631059F57AACA3C440DF86ED83F3D39BB928CC90202CF18A994B50C18770AA9
C16F54BE4BE182B460E8A7A250D29BDD01F9113E3BB8BE9F2E0A18BC485444BA
B2FDBDD243B1B9E020812EC22D0FD9473C64B839D1798730A1D9CC6BE6B42444
7EB2ED4BA418C8A85FCEA6812B27B133650FD789DA2F68AD32A9DE983BB6B160
30714CBE2602F87F0886D2C3B8531843D22AF6751AC2366302A0EF06E87F1FA7
0DC985FF76BB32FC90195E122EB94F5523CDAB76B1E641531E8476A893400BF0
6CC4FA8AC094691AC5E52590AA6A762B090131A7AC252D8D20694B07E4C1DE24
DDD7DD269321281DB2AB3AC91F78FEBE36B4050303D203FB938CF011EFC260F3
E926AE8AEF36E55E585BFE9A91F93EEDD21F0716A580A7A43405CDC11DD6731F
C67E56D594B8DC3681D1762E66BB265F6B6FD5DD035C661189F7EB8082AB5478
F52F91B9159FFF97907CEA32EAE9521A50C5C97F75D3C934642D41D40F37F397
7CBED501E2DB5A98C34FD1A666756686959E4C1244F0A9B1B8D8D73FE27462A2
5A1C1A58F2A1387A78A9997CA914062346AF91627D7A18371F4B613C23F14D85
9697C0C2490644338916EF0E196EA879705A829EBED11D075FAA92927E1E8719
C22A73B9A4CC06F594AE6D616E7D8E880D2F68D8E1E633285E8E29CD7BA16CA8
14D54ABDDE4C12F68B34E5B295E1E2D241DFF269482F71C1422846FB53AA9460
DC6FD817003C6A1B1762639852542D9041F7F6EEDAD25131AE7AC8E5B4F0465D
0868939AC77CCB448D3F583661A0363B421BB8AF0E7365683A159EAC40D59B99
666C58580872577F941648A1EAB4225390F130D83BC8D134CF281E5578F86FEB
25C1ACB394183F31D783711AE45C4C67E45DCA91CD03E726B1EA1DA0D2D3A0C4
5ADBA04633AE1147010D307D6AFAC179F40F6471526D408712B81393D0B477A7
342D64AC059315DDAD1A2FA1F4E8CC696DE375D4F2E9B67265585161DD46380C
AB79B9AD376C9D8F241A651C96948C616670EA0FFC9EBE3A07A8B451A7E03C38
DC4872695B0AFFFA7C99E79AD09684022DEBAE67B54BF691B6EB2DBB804209F0
64AB3D95136F07ED6A4AF9C851B8422873220E7772AEC6B28A40D0424C2E2089
A27762BAA33DF5D28FD6296AE76BEC4B0044AC2984337F2EA913D4B225EBE820
5F2653C608EEC3D845B12F3975C5EAFB9229BB258675BB916526A7CB9A829489
CD32DA16FAF0DCF2DFF10B202991D7A8D0BAAAEAD0AC6D1990E36E67ACA836E7
9A4804F77D281AC52148E7008AB05B82AD0DADDC8E20867F385DE0F18CB55545
B5DCE5E4A309A5BA0135A41EAFD1E101460A8E0068725315DAF5CC883435BB75
5768F7A33721F57F292136ED2C0B504297805C6E92BF1D4C44ED416C2F5276A9
841D758081E6A8BAD4CEB4CD2AD501C898806ACF72B9899B4E917A6BE549BCE0
A1E0894ED0DF4C04CE018B62DEC2055B3C60AAD48CD89DDD93110CB7A4BABAF6
7AF74894DD49D42B406D2B998DD41ED846ED9C413EF195DB37049FE07FEB10A2
A8A57A14B7F254F33A1A41D1593BB59D3E49F6F897427DE69D9415FA2927F941
0A91443E50045202EB309FBAAA5AE7846DE463473DF31F58403417C2EBEA3BF3
D8E04CD1D13D7B20766ABCCEFF686A08C7A78260D6F2FE34C9B2C53A3A04CC94
E995122379B1581BBC77B0EA94BCDF96338ECC499C043E34E06CA3E5F17F3728
E5BE7F02ECF16E677EDDD2BDD2C28B6713AD6094313A922F25812510F1360B9F
AFF1C9270A7C04680361DCBAEE76EB458063AAE9C94798698F3AE6048F152547
4A2FBEAA9618EBEE43C1326791AD364EFF3534CD2C1098AC4428438185BC20D9
F8D15AC23A02A05A12865BBD9A146521D60B7E1633F36B0D94CB7766E8A5AAA2
CEDFA0BC991A77B6C1D6D521E9D0A70DB922FDEE9016FDEBA38C7E61D344125F
FF0636EF9EC9B6545083F1577D5623AC7F31804151F3986C8D3A610E218BF067
6978018ADCD60518C629F7D6B8978CA999A196863D8BE59D48E359DDF637A6FF
4C346A441E0D4C268B79BE0191A11501ED68DC615750C28D1FCF8B365CF72AD7
F1539D57FF0DED6661CA21F0B23F7C0E45D0EBB8D0A9B72B8AC7A013C8F18B2F
59A4B0BF5C05A8B7A083BF2D7314078758BC4DACA866D94DABE8834640AD668B
A861C69E70E358AB028917197575ED2B2E0A0F1156B55DB902DAB02D29535EC5
0DB8A71D018B96C22362CE9332E3817A631A82C0F57977D929DC9CC59B3AFDC9
3E4F7F38F5287778DD3A5DB8E6475585DDA1CB267F913E477F543893AC88C9A6
753AB8905A0E9618D1AFEC7E0CBE7673135DB223D58BB8217872E0083F81E661
2E1808F010C4D43ACE88F3E4DCA01B4828AAC31FC619646A733616F7FF19734A
748F01A1146BD8607523505476CDE72BBBBAC6B6F48D530BB6910DBA9EFEF377
E49B7A134356A0994785F9078D1B8AE34F225637946F0C146B9D507E17F8F3C8
9E4EC5E1A4BB0F06662B2107CACA7D37603AD50EB2F85C88E669DA528DB0B8C1
C0C01F06ADF3F34A497879749192AFCC46E733295C0B81402F468D1ACE9FE53A
FED42EDD48B5C564EBC0C82044B5C67ADC3E7CC6F7C41991FEC178B948104127
A22B60F093223A64804E46E6C654BF07FB852E0A92ED6D704F15FF0F863528DB
72EBEE7C359A4ACC0C07337E21EF5C7A73B4DBFEBEA2BAEA4F999E11076BCDDE
84217D503AE4ECE4B6227A60867A92CB26F39CF3A0198486A537771C4A51E5BF
6FAB72FBADC213006971D1E70075140E83AA58B9A5A9E76A2D76CFC1C9EE50EA
9C81F0B0B5FEE06533568AA05A29183D33FD627F1A45160C5328151531E2ECF7
16008770BF4D50CD1DB19AC018B54C95B1FAF8EB6963E208E343FC763A431C0C
7BF19BFDB465916EDD45A2BF0EBFA90F795304B29904E3FA550BFFAD61016C47
8380C94E4A099B74C8A321F177FC89A5AB13A7C2C1B6E6244E5CC893BEAB5212
75D0108121C2D778E1BA6388E57AE9B7B392D167B63BFDC1102565649B536948
A1CF82672026B3122E379A0012322A325BEF16B1FD93A9064CB1867C8B7AAE57
0571179B506A34956E39CE7DD663FDB1CE3CF726D64933BE3E7B9289E87FBBEF
B1F12BF6C30F8FEE5DFC7A7593A18047327A70393F396C0BB2B050C5BBF86646
0A76DC2C72E901529A0E218906A65D5A1DE4891339E283FA9883BF51842BBF8F
642ECA1B3E6444C4287A28AE09A08FBC6625FF5DF700C965451C2F5F9925D88F
2F383141F8B8308BE6DECA5D00BA874DF2FD541D249566FC5EBF0B1C1C890AEA
87568BD441EC92925F8E604983F84E3E0A86982FB25F9D755D1488BEC4F7705B
0545CD0AF33AE1BAB0B8E00283831501461F86A30D5778B6B8C0B1787B940458
7266A840D345986D96B7A1EF8450797D6AEA1A9D7AE2ACB5ACD2E5B15B0525D2
D8E64C3866DF6F25481C94C0C99771491E1E13819CF6A3FE6C5555AFC759E491
A9B56937CF8BA7841A58D7F3B9D9023F70BDAA74BA5E2BAB2689EF5F8234DEB7
5EA20086506675A734F2E4721E7B005214D30C9ED6B4B91134B8F2DF83040BF7
1A9A9B369976055E2BD80245F249E81A4F359A68C4D4E6B00BF84FBEEEB71FE7
F42E0ECD7F18949A28A7B55E94EAE19BBB0C6FB25CFBC98D1821A577E8627707
215D5C0B245FA8D15B3D0FC2964E51962C7C0EB57A59B99A67465A9F8005261A
A96C0193B195DEA33659D1723F744EE4026026C67B2E10B620750E2C44E5CB9D
CE747E296F7E75A6DAECDCF84E47010EA3983525CEF7D868B1A6A62CA7725D63
95CD7C83F9931A79990298B08DA5149E3FD6CF220C36578304F71C1FA2FDDE88
E39346DF44036D0E13E55C648E1C3D766B48121BD204F4223646BA2912483976
AF0F8C8CFEAA802AA756D295E404B2B331CD0C7DA2299171F12B4E8236238980
D919C3D1C16788940C2E97551D293DF5665A9EB50B630301A703DD66B7CE29E6
4009D917C668836C19B7E9E550F0965E0F9442E9DFCA6F6E44676E014BE4A987
B35AC1B97C8541D076DCDC06AF64EB37F39673C4651CE9497812F2533C0850EB
8B458F86BE15B612B378FD2E6C416866064CE0616AE07394471C82692ED7515D
1C042E2D54D3EEEEE387DF009F83F5B95BAE39C7407581F5A0E81AB0F7ABC3E7
0B5ED18939D5E1F82A5D77307D4A5F24E61DD2C302F90FFDA5E4756A2D4B952A
209C4A54244D0B32FA23DCEA3E8050A97238F88827E75E2F51339FAD5776CBFC
AD87767D2D78543AAA9FE0BBE86D9703B7EB6E6CBFF97B59CBDD30F5BAB2D6F3
B11B98A43210DDE46536EAED0D4306473F525372BDE229F1BC277751454170B6
DBCB3ABAE6B6F2583055770EFF67496C00AFD0E4B4C9307DC5FF39B1FEBDD9E8
0690D779E5A9A4B01B3C370E48F0A3B0283B8371836827211B879BFAB9A44651
374272D29AB158426D4DFC7FFD2A9DBAECD9D789C222EBBFCA6F1959FA7F6164
418841D9490411CED8E702EB13758E815A29602CC2CB6A83E1749FD9D2517D12
263E3152BB6A3B39A9F75849AF4F769944E55576D0F5393DAF1D8A790FFF331C
A9E4C9DEC62FDF0CA5E3B3211E20F739789086EA4BE455FC5FFFA1CB620A4FB4
21D079F3741B296A58F0D5B4E47DECF587FE70AD6DCEB0ED314523E81CC6D010
2B969D7751807CCAFAE81393DA14560C1643CDFA74C575BAA216CEE3C1A73BA5
E70ACD844E3367DE4DB71312CBB85ADD21D5A53BC6B25FC7BC9598A1164C54C8
F85FB8A8EAA19CD84CE60230203EAF1A51F32283178714488E473F8102779CAB
D738394A95CE2B2ECAAE81F3F3E4C2A8567C76381B18028A97F75B9807C8A602
96C68852909592AD291A3032F4198B92BEB8D4E568F0336F312C7C82DD803178
B683130E9184FAA118F1197BD072AED3C4D9F0D46761F3ED1685661A3116E65F
071446A602BBBE3706FB1C83E14DFB00108853D90DA82647B305ABCBD6C49ED9
DEE46462D60B66D344E39D3CAA12C0B5F0EFA39AEBDF6F391E16A04565746544
3ECA040F54A876DD343BF69D7B2F16E43F5D7A1CA971B15405F9571594723A08
DF1B40779FBA70DBF745F0A0F2092F696EBA380264A069A6E0C2FD352A012AC6
1262EC66286B40B3EB25E4916B5C8E29F71C9EF54CF0422A0ECE784F633E3161
FA6E6452ED50E045481087D4D3DB30E74AA817B8725BB7CF74D4A89FC82FFEDF
CFF831F8E3CBE52FAFE31266C2CB600E2D63BCE01082092C369EDE20E41F8133
57F2002FD7D3BC2795CA29E317542AFFBFDBA7F016221CB34AA45210E135C5AA
BD556BF87EA820CDD05AACC5244AD6D900638FA98C00657448754672F86627EF
E71B121C38F34208E209A1AD2192CE205AAD5BCC9E867048689DDE2529BB2E61
46AA109B8B0856AE1E83C41C6AB175C3200BE7F1396F9CAF46C80F835B24AB76
A214B401F6E1DF2E0F680C6DFCDE0AE9FFD30B0D564DEEF192FAEA9E38526339
E80F9287CF3A25B5F861DABBB1CDC09CCFE34F7B7B86BB9FAAF780362EFBEB4F
7C40E805BF667011BC3ACE05CDCE2FCDBBDFF1781BA4CD3A2F985A716F14A7E2
6D043300B9628944E210E2BA4E584D13C2C4496C6697F6664AC6B6C1F5CB0972
EAB3489587FCBA27CC9D1B618F0BB703078208FF1868B7173A307A2614CB647A
00193A77ACE47CEC44C5BF3B5809957F63740CEEBBC4EF8BAEAB6DA23FB3E8BE
62FBE561725A48BE728AAB48D8D37D238A935D5742BE8321491A40E555842091
400185752E88DB77056FFBE0D14362485E4DA48D36959C47B0218392F24C93D7
F9FC8D64DB3546C8C3A9D70992C1F31DC6753222850ECF459A7BE82C71752435
B04A2885E1BF5F7660FCBD590ABBA7581E544EC9F40457DA1B8BDFB99D880F1B
2612D509E1A6244234C45C7158D89312F84726F3677654FBFFA4E3A2637AB388
A44B23A3F56EBCD82E0702C4A95FEE93D8A53665F2D000A00D9B23BC937C8849
B501D18E1198602B02B868A2AD892D1A5B12F15CA11F95A4B68CEF881973B2E6
8E437EC279AAF6F9FB94927A1F3E75C4BF9FEBD50B989F1ADED6979456437520
9730D94F534BB50A883C9F2729C7C46CEAF94CF4BA24FA7BA5BAF99675D4AE97
6E2399DC0992D78F7634C7FF3646EEC4FDC6B7CC3667DE625C3846959BDB84AE
87E5A48AD65467874751C0C10A016B2C70437F6C26780677E2D271A87000A793
13814D13D68979B6698E481F0CCF2BB9DE8B9DE09A67AA454D40FD117353FCE6
761E2FF5BAFF93EB96F027C4E9BEC5C6335CC38DD2C0A5C4D6A003777B698498
12CB36680FC7B93EA1037BE31EE16DC5CC81099EFF6F5565B8DDAC5208981E6F
2E5C3F60D4F0CEFF050A2D0DE0E65459B182F33CA61BC587A5EFD4B96CA5D275
D41964CB060174D3509E757C61A7168A7F788453D12A2079632453E5E1EFF111
931E590421A2A16619029CA7C9BBFB4E5D1BD99097AD4B903096F164D60BF5DB
FE3819B1998273EA5EF8EE032E0638F6DCE41981EE8427330B98BB42BAD91B49
64F6832F2946B0FF1700D856673E7695916C421D27476E1D53439742F37348F1
FE03BDDC79DB313D65A465C86844792D4D4BBE56D82E43781DA4ABE248858DAE
35093D51D520944E96B000709F3F97D0E6C3F4EC3510619779B08A7375452187
D66B2A4120EEAC2AD6DBE78D78997F6D0F8B689DC4E940BD93B6614414755A3F
FD94CC8B8DF48D5AD115490DE8487CF50DEE18F2A5FE2D082455A59D42FD9E31
D0EFFB07C4996DC9382D93175A80B2F60AE03C2EE28AA61DCA465AED57BC4ADF
06733BFCEC3F7A7F0CE3980CB6E79757CDF157596CC75693211FC8C656BE5DDB
6C30F48006989DC80C38A5EFD91CB646730C8B00E2C05D7F8FB8BCA8074A3609
8413BE2B68FD220CD70AF44BB32F9C1DACE3EB09ACA94B814964239BF65B8416
17AD96D9D7F89ED64975DC69CBE4599E8F01D3016CB710B5E3B620B6C2F465C3
03243E77C02BB3D10C18BFDE1D91E26CCD4EC2CD730051CBB51AFF9E7D0C2061
E37B799E9BD86203BF90AD009E3E46F1266DDB0942D1DC868D24777C2D36FE8C
6F321684F4FCBD55EE3539D2D613DE4AEA673C4ECDFF1C124A28AF36BBEC8CC7
5214B8D3B881F784954495EA3D40E260AB7BD723D145E93B12A799B9D0210E41
1564EF88E758D35816518DCE016F1773387D9DD87458BF83BC623C8E4AD9AF26
5071329361F821B764B27A993D6ACD7D0CAE78ACFC439F22E4AFA9C85C6C8E74
B0C86C0D3D8F0B47A4DFF91B1D7636794038D4BC5D6DABA9931AAA9C1189EDE0
9022707C03B0945C40E0B423A905FE21B4E214310CCC2734A683FD42FB84CE61
D0429B379D3259DC5F79E220D9BB221391F502685700F20C7418E90552DF6EE5
FD1F40B0571439E5AF3F9C520E811EDED8DA4E014B8DE12560BD515608515881
7DF6D23A8EA5AD8C236C2F783450820F71AA5CA1D3EDF9707A0F2F4D02FECAE5
8D2573E8C15F79D3C45EB5F8353C55A5FE5BCFE16F81B25EE9F2DAD759BD3921
1540C0297FC1BD9FB9D2B58A91D9E3ED1602DD8DD8DB0DF3D49E3E6DC93EA2D6
AED917599D3B623E166910BB43DA7AFC44A72DF6A12BF4C5F729428B9B261279
9AD790474740727A2D7CF2772601946E231449159A5708441BAEA7F5154BF37A
257F875938BE310D0033A9ABCD908FC539591990D9550385C79AE1AF1225C2E3
B68709775BBCA3A6CB5AD0133269A32EF847F6E2BF180CA36ADD6B25EFAAF254
99505BFAE0935591003606856D5D8356EDE7486983FCC401956CFF71FF5FB18D
B77AC570FFCCC8D6784D8BCDE41DB43A81C3A34FEB73705169D4B941465667F5
491A4AB2261BD6278B94DD4A93EABCF0632E1B35F553F3990DCEE57BF6984026
6426FEB76ECE6F2DAB711A62BF25379A05C0A7241808AB8A493F1BD497ED0DBC
0E751FCD129C1030E90050D3C11DD57FE14EF0E31D8D407BF78624E191DBC2C2
25A3D3AF1E9E0262B51BB0C6494E5E3B14FA0960B11F53D1870514B0D2FB0963
1F70DDB90CFBE730706F7B69C8B82E6B3FD9072F693385C9AECC9A0062972D60
701B9E30A35BF6BEF6F93706FF5346D85AE9C70987D02722F9582F33B2E19893
42EA00CEFCB4FB34706A7F4C47E8C9393DD86D75C54C3ACF8B2874E161A886EE
3BEB9F730A63D27AE60AB86FB8CD85DCFEE37A01AE1A2E9ACFC032BA9E9DE6E2
04F749EA148A281CEB94B4879CBB09A3BF5B2D6E1DB1390F82D4C0E326AF1777
0D11EE73447347E712F83B302FBCD617285061925454101395EE571B65BEEE5C
171D5320195D8B7DEF7C80370B00BE4D479EEF9C03F89E026963830B08E9BED0
FDF83ED8B6ABB65565788B7370527464C55762EC46306800B751F522B7969651
24AF855AF2CFF8EE38436E7C68C48BA52B7180CE3D505216E026DEA02B7D154B
2882A031A2771B661EE1F45A328D4D4CEA17E02BAE7A41A84350661045AA0135
5490076A43C82C91B9714BC371A6E7BA8259769ED87FD175E8A7FB79F4AE37DB
5B1254A7D0458A5EB36410CD858458674063F676D0FF9B5BCCFAB8501DA3EB45
2F9526506D94FC49A53A3812D7DBF495C713A6667261C27A181F4140916FFE74
9839425F07ADC53BCB6AB055E0628A2B74BA5A8518A78370A8007202E017214D
33FA23AB83C524B689F96E3FEA51EF125D16E90735438650516864B7508FD50F
4B6EE65D2DB65BF3C115ADD6296701552DA93078C7AC6B716563466BCB09E3F0
15D43819DBB36C4F35E4086C8F84A7A13CCCA4C65F801ABC614DA8C5DE3657D1
A80350032D19862612D8B844A5C75FBA5B97ECCF01AF0425744C2E5A17021EA9
D3F791635EAE73576AE3C254529CA102DB0843419B66DBB6492383E0E51FA295
03240EF2A29B6786A6FC5A51E7F50385C4A11076467D5A11AB8455BB876646BC
83E8E043427C28A2401F5ED30A4C2578F06A5A73CC7B2AD411091E49BEE16A17
7AFE57D15B1C247D4DCAC3924D4DB9520C5179B6257FF60771EDD0B8E82C031B
141E367098027942D5C4F27A7ED2822660A78EB1AA2C8CB11B39CEC4CCFF912B
4DBBEE2065A7C30983A0FBCE0FC3426AD987867C258299A96E14BF5A9698C6D5
40D999AAA49535DFBCC404EA7946A0AFE091AE3DC3540A494654BAB542981F07
9D7D56C97B0C5E6F7F3C437BA65A9CA6FF7677680B4C95202C5F92BDCE1348D5
37A4E62CE6721404F59E4A59A72643F7DB78406E2CE5A53C29966E978FA088E7
9ED815310A365027F496C600CC5B6E47207438CBB389612CFB0FF4B0132E2F1C
61F31242729A9EBE877B546996C652046BCDB6E57FD0E993DEE8EFE824DCE07F
3CC21D865D34227F23F61D0EAD1A8C4A068D25922A2392A10240229A09B376F0
31DE1376BC7F7708D9DCA34F5820BA70E63BB928977EEAD4E7CE6AF5644250CA
B9813489AF6894363B2114294E66864446DAA5CE259112102F7B172CF5DCFABF
B73E4152C23C1D4F3AE318FCF4D85E7C47ADD77DCB384C19539BC3B0B029FED2
0C07398B618A07CDCF8827EC04177712A79AED14FD6A58590CAC64B4CE74B0AB
E584CE80CA037A7E2F7FF64AA7BC0B3A97FE99339D7F8FFFA8BCBD4D5D833877
BAEC15D079B7473F35531C9DF13398C066B0DBB636364CDECF29732839B596E3
DD020B08D81F6EB1A4EF484CA00FD337AA1E47A08C5A40B108AC669CDE8F2369
9C4782E5CCE12DFC18BBDB6FD96D53CEB809BCEB184AF69BFEFEA1CFBA126F0B
20513119A844E6A8FB598FE53D06AC6987820D6BFC7BDEBB1F514D9469502241
D4200BD5BFA22374BC8D310EF915D13119E5609F7B98B8D14FB1B149B36DCA74
E4BB24CA63C88C0A635E4B8E7C4743B3D97FB8FBF527FB93791CC72A66E417BF
6E00591F7823FFB243DEADC75BDBD096BED0614DED2AE3D39C42F5A059F8E364
237B712FB3FB0A027FC92423C555A7BA87D4705720D7561D55C9E03EBB587B34
0A358A65ADDBE9ED578C391D52AECE76F5BBB786C196CCCAF13DD4617C9ABBE5
FCB4783DAEC99BC7A3A82EB333E78317ACD72DAD53A73AD419349D3BEFAAB891
87EB8C323F218EBA21894E714A2FB95A63C0A52EED6CE8AFA35940E81975BF91
8A7DA381814DD790FD78674E8A7706A4B1D9743F7BED77FC223B3E7945603D60
15EF45983A3E05397EEAE22E9AB830108A138E760F4241574033C78F368EADAE
DCE30AF3BBDF68CC4034CD7D5C9F0BFB7E1789980944E96C17A3D53CFAFA84F5
2BBCB87BCBFACF33CB83E7BE88FAD7675F549E5B76F96F8A051ADECF1B8B6B8F
8E2C75D7460CE15D05E615B60B697F404766CF874B1F59DE95EE54DF21F70CB0
779E02B38A1F698C855C4A7CED1E8C782F34171BB0025F1204AA2B7B5C052AEA
06EC640C9A3C42551319EC75577DBBAAA1A9F17A8F9475E7C19F8A4C858C3760
CD3D746E51447A0C9C430AAACFC8F439C0C9AF7113EC573B375CF75A07AC5C11
44C7F8E92600D0BAA927ABC183A538251EE387CBCB2F55A12A0B8BBADA91A7C1
C1A187897582877087FF1F5EDCA106FA0636B029F12E6809CD8308A15128E260
81412DDEC40A9CBECBF77993B27F23C4B9C00850E3C65BE5D92123D613716CD8
0627501DBE50DE2B82BA9330154CA7125501337D3D039A8C6BCBE6ACB8871717
F56BD8F47FD25B212CEB02145B4A691C3F3E771A4E1C5D0BFE9EB64A70C5D791
ED1F9DEAD22035D15C1C27DD75759CFE9FCC93AE903B04DC70EFB99C22DCA341
00536A6CE4C2082F3A21BB8BFEDFD8498B4E4A3EC78A36700690DE5CDD128AC4
8359893726C7441C672E3180E51F1800FFB024D68764FA39A3F00BE4B714FF05
65DC71B6FACB40A1FA490C15EA53F4856650D4B97B6CF61F32ACB6E85DE4B2B1
5B93B7BACB79AC25F37A4E4D18A97EE87AF5CED09CF717D58E2A1C8B5E7A2AE4
E28D21DE98EC4E818B2F64AA3D78C308C290FEECB6BFDFFBC80803809328EC1C
FDEF3AE91E16BAE81B6846E752C2A7B81E339EBC2BBA4A205A67BCA10216B5AA
A8A46AB2CC7F0CF9C271B8B3368DB2A746A4C4DD82301322BADD90F858E6B17A
975BE804C5563DFC3C67C8166A935E2DFDC56A24C0ED54F04C160CA0742BF506
733CF1C3EE17F2E7C45DC5931104741A6C9845338F0D171803EC04C9534EA5F8
A78C90A4B520F1284E1B7C20D28ADCC3E4136F2A43F69FAF6894363B2114294E
66864446DAA5CE25911211D76C90C0E44F8236F55938C3CE5A9EEAA8379EE7D8
7C7ED475DB8DDAE50695FD089F6A89149BC0AB88D400A7331C24E9AD6B9F764E
268D0F02C88423F82D718BC9D1FB5D38CD662779BF9273B7F448B79D76EF0ECD
F6D93B6F29955569B4CF96EAD1B32729DBE4756DEF299974B3DA8AFA7599D096
FC928471D2FE294C8173E82B508A71BB5C570A966383AA9F7CE59375525369CA
6A559BEF0CA5991BABABBBD801CA0B0320DDB91F649A01EC44C38F801ED91B6A
122F022A3F65F41EE05799E6EC7F3B3E52F6600E03A3C989247B02E5DB75B168
3103305C5A43ED712E1E46A26538BD1F7F090DE03CB62E0F8601FC4D79B525AF
AE1DE7E31F9952F450564F06CAB105AD6F4C749DF8583F43438C46AFBF0AA67F
5ED4974EB595A7307AC98DE093990161885B48B355C0E216B4B17267E9E7FB32
C19D7A6620558C0F4ACBC0942FE7916C69D015E9FB9765648552E6BA4CD3554E
76AED9500D776DBF675838C2E27A9A1C75D9786FB52CD2B8E88E3299560DBC63
8C18325B5098B04BA53758C311759B8CD52CBCD0A3335CCD77ABF4E65B7280E3
C33390ACE80BB8BE52329A7B59EC82C8BB422C3B79B09ED59C93E154779FE50F
3F746C405422CE96134584C53AE18739C56695D03CDF56E9A9A7EBE064DF8051
AA768F60161CB6520EBB4A3F76CD59EFE21123F24914FB446897F315817CF8D7
E33A631D5D682ACA36360AC99B9205E4D80CF558708478E041BFBF373E48EA15
A6D4AD59FD540332112170254D4791C9AAAEB0B584537C17C6C1D78C6E2E6F17
2BF655AB9B543E871C435AAFA50BE006DE128A8A183E58E8DF75030D5658FE68
80E580359DB44661981E8B79C0C246AAB7083701E09D438052E27B750D0400AC
F57752AA8A0D7A873380D1B7F0AE60A48684397A95470BD330A5D4BD6849BD36
D62485EA96584B0428E367EC94AC69C92E942696B50AC2EAFE5757E5541F96F9
8EB26AC14AAE1E6873FA855BB7670D2409A4459BC9CF7B2BA769BCBBE17E81F5
52B601E980736D5D77B4E31498CAC8488794F91BFC92F398E6E2A855FC00A521
B5941B4A74D09E1EC4F2201CA9FDAF3D4BBD6BC93306C5A6A7F29213802C8B3A
0C7097947BF4D338ED49775DD820524BCCC8B9F421166E5383BD4683DCBCCCB1
0789D7925003BB63C46296FE532C382FEDCF04C561280A54BB201642206044F4
707F3F4239774EC5D2A5335F6A228CB9EABED14DE2329CCBDE222B4C31FFEC8D
F5E4A16A6B70113D5EE7B15C46E393933D2C0C9B6E55C71E44A1D3B7C6EBE87F
52DF6604706FCAD31A30036E533B56062C0D09191F8E0EEA8B2AAB1BB852FF9A
88ACE1B09181BFEB0FE849E292D6FA3E7B6584779D8BB07972C37FF35D580E8F
3BA9BC94F131ED0110C946D421B4279438934B4283C233C8744FD5EC84144B29
66F72FDA260A722E7063BE124399D38B97B84AC32A989C4FC0D5846B54AA2F73
2B12BA10B7B6B0263B8B5CE6EE63CED9FCEB35378E0843451E4D9840AF87F800
D3B6E0248AC51C49697A76B6B93D28A18CF021042D11CCC1BC769ADAA1A06BB9
A0770C242394CD61F371B3FAE0E757B49F463C55F3A25D913D1BEFA7D862AA17
5758D7B3F037498541C43FBD0F81E8B6583FD578DAD2EEC2611FBF0597084435
199302DB9BF961F09CCE062B17EF20E492C02A138DF3240D6C8130CAA0B8EFFF
57F7C65A5930613D6C547ABD5C491B1F8F1ACE6D8675A59E2FD2A857E5D12F7A
F9B6590A8D1CC447CD26A13266152E7DA26D679ED4D87F89B2D3FF1A88AEC677
81616090974C0FF0D79CC68FB1A5DE7EF8497F2B33F3D84A39F59776D65F0A6D
9E5088AD245098A9CFAE5B41B99FA31B093E879CB5A38461B38254AF4919189D
D342D69528DF47829A0BD0C1FF5B8DE0D91753401430119AC825F027890FBF0C
9E0A3218F64761EEA88F715C4D9A8B9E77051AFF0CC8B6F8A70033547D16B623
8854DABFE8B01C6B3DBE65EAA3F97F8BF9417DE6B2CC451350086CFFDB6B3F2E
FF9B301BAAEE8A0237BE1C8FBD409F5A1CB7E6B2B198EB52558B3978ECAA522F
C5CAEACD2FC568A8F249B4424FF1BBA32BAE7A41A843506611083121E8EFECDC
55767C6EC7CA62760F553338DA9F26B4C09ACB17F43E82FB172DEE006433BFC0
E77047453DD45F2B9D86439FD265C90CC97F2378B9B632A6DFA8797BA790837C
BE55E8818A643F3F3F88BB227E90541B137E2E5F964052C7D8502433ABBA6374
CE96C956BBF7CB88470173814A7E6D2C681AF408F01D5792A583F92794AE0C4B
CBF911BBFBD73E1621E4508215C9B660518C4A7C15FA254CE192150A06A437F1
94A50EEB0A766C689AF2A88D22DCE43DFC3C6C5837DE051498598D13352AE884
1E7AD2FED43885F9B8F96FE1EEA4B04638D978A0F7B87BAC9C351AFFD301929B
E09F85FBEE99D21B512779E121066B42858A14738D19260E8053E9729ACBA338
A3580225CE06E2A695B893F42B5C037A98F21B48AB50B63BC616BA390FB03313
EBD812D550227C0665E7B5096FF9653BCEB2A0D015F7618FF21EE6384ECAF44B
D7703E2745BD99314FCEF202DFD6EF04EA845A6241FF262C6E8C4C3F2D1104AB
5DA0BE7B50430E38009182BA284584520897A55973E8D224F194D067F16FD0E6
512C34EA21F64776B0E476FA0BECB5070A618355BAB4264C11021749A56C6A64
F8BFE75DE0BE2B368F46AE001303C0A8AC172C9EAB9201F35D0F54F815D0B0D3
5B7CA98DE9D56C7AF29CB0BAE94091036CC68F946697DF35EEC9B6953220B706
E5F3B51ACB748CB154A17851EFD9157A4634EDA34CC2FA36F730C41E4F446C47
716060EC22074439B43C63B492819C6D2BD25ED0CDEB2BA1468C4192AE8D8719
958A5D0B4EF1B102C699A24092B5A683ED8DA838066AF751FC0D311201D67F51
26164E35D4DDFE3262696586A92EB673BAC5BCE0E91AC2E00AFE737E733E5A91
844D9D00F7D8F33B7CAC004325BB514A8E8FC67659F75F25AAB318A0D298CD90
EBD42852787F638897589DC70616FF5975DC11946A8F421B989CCCB21330042B
DF20872DDB280CF4EB91C99653E4AEB947F68A0283897AAEF7BAEBC40A231AE3
D311D5C48C3E89AAED44D1DE67D140DE5FBF8A341917F5B78A271A4D1BA79ED7
C07F0D879C20BF00790DF24DB719509F2D5237E29BBBAF1FE9A30FF732FB01AD
3F10DA971F25FC146009F91C02B4B674905F6F667B42FBD8ECE43C6E19132038
B593307B759B9343D3D7E1F2D6AAA9CED4D0E24AF946925D5515290DF1AF1A73
3431F9AD503BEDA7FC4FC98A4BCE6DB443C330E481CEE259D13247529F2A430A
703529E570558ABE9B401E11AB8CA25F3A05E4E8AF6D77838915274BD7239734
C2047CE04191DA44A2ABA5AEEA56716C5878371479414B141B0B14AC4F01818E
210E9E94FF67600801F70E7526D9564BC26F8B174903ACC710C9CCA91C3A0FD4
CE1784CE35C553FABF255F638A276B0338CEA238A7FAF5CBD69980959FE4C3E1
A6153369E4BDD1BECB4F0858AC729EECF1901327D07E2E0F851E370B9C0FEBFD
4ACF74361B8E75767E2E925AC46A6A751A96F1099FD36F9ED44B8D77FAF2D054
6E066194532C3740A07E301A46FC89AA768BF6279B8581704C219DDDABA0BA75
B98DD595BD9A3A98C5081C215EC00D3E99BC92598C4C8401519ED9942B86836D
917F67B0552D00C4D31149ADF2B2321D2FEEE3AEBEE9045EC8B4085A1696BE03
F0497E00309B69D763CBD49FBEF232579B38D90A7584044AF09345A8B32A10B0
317E211D0D04FED3202A6B1326553A6BA037CD10661DEC73DEE7804CE8E2A6FD
5638A447BC3F74310824E50227C65E98906C5D4B98D956AD6CA1CCC80EBAFCC5
6B8ABECACBE178BCCA13CF4B05A74D00AE693F143BD98CB879EB06D356D2105A
2877121F8F2310F356406BBB4697D1393377E3F547DCC2EE84F4C7F3D7E4BD97
877ED23D0390238176D88F6ADB221A72E1D542F3A8E07767F0A4A18862F4DCEB
9F9379B403B371DF7DFB4D07AD70EBA60C2785E903374C2AADAA24486F70C38C
C4B419FC8B60426FDE26CFDB6ED94B3502E535BAED7678D21C38C37EFBF23CA4
2AC54F128E0A5C456E129738C89886B32F8F18816F275FC6603B9601104799DB
35636FCB763F713C4C5C1803CBEDE642BE791FDFE9735F63CC8A90417E3FB37C
7F9E7A92DDD8DCD4B79FD191B8044FAE65270787EA63958139E0FE738CA4DAC3
D7B68C3F78985AE2D417733A9E6DF019529D87C31681AECA10965EC91C7D2FB9
D7C5CC9CDB4C36ED16E6DF27F1C0CD87F84AC6DA9A6DD2CA1826ECCF057CC381
94BD297EEE7E892B3FF7397A24ADAF6506AB86978CA936037303B1FF17E1CB35
B69369C888AA8E4087ED8FF5F19367930E71C3B750B70A4E5830634DCFCD55EF
9B9B511E8F94F94C499A5B1850DD3B5C2B2DC1626C2B373A0EACCE4451F9FD05
A579D6D7B97F0D95A5DBE111BF723E287CBED7864FA405553FBAE98555507F94
22DF14396638D0A8F4973EA223A247D84344E38E6B05C583A865EE065B6A9CFA
5FC7DC9BACD64AD5709E7700D496B4AC4B3A94634897D1D309088C2347946145
FBD6C606076D1A717D0A3FA9B2AAC060163819C847AC52E8D8AC7F40C5BC2FAE
188A2EE1A7F0778CDF8765DA40C617C925806799F051E55DED0585A1B45EF8EC
605DB69E8A53B9CCB3AEA09C7581D00AE985B68B2915796EA5AF54173E326F9E
2A2518D27E719528C94047AD4FD002BB4FC878F3BCAF4BFB3FC167C2F10CC878
011DEE3666BD9360406B8CE651196D0828044996BE7E44BF1CFDB0BCAECB0D64
2B09877D223F40F82899DC1D64E4B6AABDC247BF1FDD883BD2C2C73827378D29
76BB309804B80B50E9DDB070D00EA8F222223C2CE007FE928B9C67232AF4D070
F874519A79668F0281936306B1C49F6A257402D82C617DEFEB693DB0A4A8DF5D
4CA2EE5834F2C2F487CA8BC069C5277DC6F2CF4065FB0F21DC90703676F3E5ED
BE7446D4E4E32B387592001245BEE77B40CE7BC41F25A3791A8D768F7D358D67
245E3C59DB82A1C89FBBB0A7298CD32219001080935ACF4EA40049BBE4236175
AE07E0F6873DC1A9FA8C83E4AD433C08F2D95CA663F0162E14434EBF7CCFD068
E50EB4DBFC2812D9BBD9393247D4351944106E30A8882772EAF767F342BA87B9
300C626496865C7AD4D94F1BDFEE3D2086B78FA98EFD4E24E7AA49E1FA17C73D
0034E47A7F71008F354C2AAA85B991F9CFD6858614BA9471D9E3BCB70BDA8966
E279317CA7DA3F169179CF8081C733BA78C0DEB86D5DF9381D56187D7FA341B8
8877589B290082DDF3B21A4E6D6FFE6BE239104756845BE825161262504EB1DF
D8DDA060168A6779CCC9EBFDAFDF6D3D511A8BA3A7F4C0B5A2CDEA495455C238
7D9FD8D8EB4A878F9A34C495B0C3FCC4ACB671465089194F1C6249746F0524DF
723798CFD81DD393C86E1B96DF991338DCEF8B17493E87B63545FA3AA2A50EA7
6711256C92D5A4D464B8918AED58CF8C3EC6CCE8C4FB90429B5F378FE5CA9D10
043EAFA049F058FE36419ED2D9E3431D69D60B48A907663020B77F4EAA95CD2F
B9C6361A344D61816392B456396339746BD3578D73F146F4F3AF9A339F99A0BE
9FC384DB4AD2288B8B0077D9FC78372152ED6EE9737AD3BD1D89E00F74488DAE
A8992C7C3BD37B2B630046705E143BD0B54942C6FA8008F62F897E4AD0CDF3FD
9DA0DFA73C9265D41B1B88F8ED83A5FBBA3C293ED30C87788A02623C11689248
FB5F2FD784CA662C954A789268CBA8BA422577FAF22E1BEC929D7CC78039A74F
38186471B4C3FE232CBEC9A39BC107B7F98E4A1E966C819471FFB30D7D44716B
2689A0BCCCE8FA93A71128B8BB3C8222D425C1FC73763C8E7D930379C302B89A
BA72A4ABA050EC749C005D821FDC5458EABB545C7AF99B8AFC882E90C2EB6146
BE3EAB3B2D1C03F78EADD96761E1A62DA7653E8A3DA09B536D6FB8DEEBF1971D
75929B9260E2E7946D2ED75BFA804C61A37FB22F09B5BAE6FCD04AEF8D0444B6
F850C1BDFC346A50372C58219884C402C8548B45B9FD4CFD1265414867E3D399
33E704E206A0FE33492ABACB90A87376E507565EB1EBAAFBE57937FADBF83CFF
F4E6D915F899B2F52B7F55EA375AD755D19348B66262D4CB12346831ED4E1DF6
4B33576C10CF164C9A16BF4B0037B723CC1A9CE4D079F9977AAA33E6AA3F90FB
94A9E299D68178DD82453F30C703717D78CB6EB664FA62E61E9F01D105C8BCCE
92550C3B6317466DED4A3BEBC2D158D6931EEA4A860EB6D4F2947AD77DFA5E93
ECD825E757797C8FE97624860988ED047F979B2021E92C9EF732EE39065F6E25
8C82C0AFEB9A325DB6CAA44DB2D0F3CC23B0B1C99244C0F37B4E1A05A4D64FD0
ABD34B78C5B90A8898BA26B39EB4DB9EB09D19DAAEFB1EBC3AED7E688F5B10F4
EB9AD584935A58678090379A846695084922D49A19063737A16C33ED6735210C
5DB1C9CD12C34557FE03AA2C239D7E633AF7B926381E6A76908C369FAA4BB3AB
F2EFEAB2D5B53811FD9CAA70701F0C5ACAC8ED7CD7FD0B19603FF1FD9D35FF53
A769F6124346CD33E9D0569D6AE28F8FE11BBD0F65F57E07B8E66D29A31DBB72
1600330F1417DA1F7FABBD253D5BC82E98627EB641798779B5D0B7655CADAF88
FEAF571E6C52F01DB2CC8FD0324F3933B5FEA35CD289BB41D3F0258546844996
E0779B7584700BD8E67725D2DC6DF7565631A09FB1E38BBF1ED457D1710FB2AE
B9E3A838DF0A0541EAF52D5A4FD7584D6D0C162C4634DC31B4D66CDB6E195D79
A324C2D461C8FA7FEEE654E926D744FD8B334230A0C919F763BF85EAEAE51E4D
7BC2067891DC46617670187A651DB95BBDAE952BC0F1ACD0A616E45AD871134D
4BB7CC7F7644CEE2A84580B8329F97046E3B1585DBAFB8C15A7C4B2F95917686
6556D262A744BFBF0CAFF85B6CE601D963749274D7BA7ECD77D2F8713617002E
502FB426688E44EAFF56CECD8C022FB7718339044C9B3D727F438418A09605DC
014660543BF378233FB35D93AB96DB3432BCBFC41EEF179A9E9531B47289B791
AA27E137CE61696E7F3260D2974883B9D562FCAB56CD13BE19CE4E9AB5DD74BE
E56BC31FB2C09963C370ADA7414D3C247D5D8D80E0AC0C04366BCF87654C586C
95CF93F1A8E5A445A3B95AE8DAC7319EC13E53D49DF6CDA2DAAC04A99E41F600
E05A0E0B4BC232C1F4D367CD3C0C4ACBEED591B5463F104431D7899474583F4E
9C6653488E24ABDC6DF356C14AB758466AB4CF28DF68B9943345701E5287ED3D
870BEE3C9F1053C3A47171769FA0FAF510F6DD2D147D45CB5304E6E5099F9702
E3D942063E94DD30583CD7C7B478DED64C81EDE9CCA0525DE68C68056955E0AA
F15100F4AB657842B17DC25DD0730FE2E13BC2A912D57AF4A56E88F53042C8FE
B02B51B39F1E087AA12BE584F06004F4B94733F769561ABC958EEE242090974A
6EF01F8F9994AFC0E74A18BB27313ED03CE5027ACCE70636409546EC7DD33DC5
40E733E3369EFBF4CB2083D4939D589495A0F8A6E400A457BA5F9CAEFEC3D0A9
577D5A5DB7D7D0FFFCB49407753EEC8EC3CD96A96E7D10C4F4FC8C65846A8A64
9A4DAA42E498BA72B8E615E4AD45FE1FA39E4B3898CEEF6C00BB8D99CF736C97
7058D9EF629E04BA7AB558D9B3C0535CBA9684493696AF9B84E07A383123C9E8
B2E8E745F6CE79DFFA0BFA8216029B2FBE011C9BC6552E4D4BB4B617E41ABF81
C8AC2B28B052C8C0FBD0D2497D9ECFFF6169493835D4B4034638D544C7683B70
56EE108FFF902EBCD86ED669A084AC48563E3B1B5952858746DEF529B300BB45
723E3858702B66582C65999D55C16C303A7DBD071885E0B77AFAC53E48B9CC67
F7AF33B63AA10F403BADDBC20CE59002AD6262EE1D27B375E7C0C2AD6F52583A
16A8AC6FDE0A03F2B972AFD55CE6CCFC633D04FB8AFB428EC041120E02E1F0D2
2C8223BE9189B1563777727945BFE66EC4551016FC6DF70B9B562D47DF204833
958AEC67D364D5FD92D713D8288FA584F92350F42D612BF268D53A04DFC92B23
BA89BC825400B91F110E8714591027A7C96CBA5975A4123B337D5C340C2130A2
DAA9883B6DB151F34E53B31418226F8B780B6CC426FED3A78C37E6EBCCF65FE9
E6050EC283B72140A69858EB4A3D9AFDE47B5B72016B4990CFB9B7338580E3E5
B56B0BE7A9A09A7C46F59B5D8144D007217442028FEB33801235788E373A9A8D
6890F4E2E9F07E13B03E1AB1BA8AE2FFBD64BBA81704E5B9C41F7BB735F68865
5E6712AFEF43C2F2EDC5C800565FD90E29CD0C9B497DD42D3582B5C8959AC2E2
464A4A49C493A42640D0C238022908833820A5647E5051C67D485FCCE9BDED8D
61D56FC501ACB28E332A3A1251C9C5DEE0B6400A962188A767A923A9BC317F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C260D0E3D67FBFF208B4187A30472FDA89
1AC27F6E70A19F685F1F909AEB88CDC05F7CEB39E1C7E54CC2E7318F8D957276
0FFA000582EC243DA0A9B677C3604D13492FBEE039B2FD87A31B428501DFE5AC
0E7921BB302C6476ACBDCDFEFC8B7BD24AF41D55196DF6FB2F28D9E2D55D0D71
2E617802976F8F223C8ADDCA895309CF945DB99410D0BB68B865F3E4BB7CF3CD
00DA8E491D3101479200E5F7A3C35D2DAC2AD31A4A8FE8112B67C5D2878E81A7
554DBF0C2A226014B8B3024CE88091E893355BD893FFB34D445FF8B74EE25981
C24E8C36BFA67F73BE3B0B1EA301EE8BF7F102D69F47EE35F889A7107E9DDD89
1EC4DF4956D533E0A0670D60CBD73D1E1B9865CF9EAFDD170CCDFB350BA1C7F3
ED4F1FCAE0F8BF9ED8F0A018B071BB90419EFA4512B1227E6D1174CC7D3D57B6
0C97DBC0FD00F170165DF48825F719AE145A0224A50AEA86FA712230610C8D83
F4C9F5CDE041E156D38BE5D68D519F4C9FD3DBA03EF6E49A632BF7DE5EC45B64
A1F4E1C73C023951C59F3E09157F87CA9762F00A7EE36053F8F16D2248EFEE32
C3DF4BE75C70703CEE4A849F90107E0C58C166E734C16A318CC4ECC1B69AAC22
94A0A9F2BB34947AF82D8D10AB50C26895953E493CD5E3519EC93E0D84A41699
E520700C5E54DFFC63F44C24F76443DEAD2374BC8D310EF915D13119E5609F7B
98B8D14FB6A6A89B1E97A66B2E9B937B85A69977BA8352BB68ECCA70D0771191
00E539C2382994EB7B0C9F7649A8A413005DD3E363237782E3B2AE143E600696
83917D8D87F033A910EA478C1605A709DB9A94BC08D61C1A6E98311D9F5A2144
0987FE7AE6ABCA16D566FBEA8B0960A982D2FD7EB88FD9CA0AC8FB5A2E119DAA
9F80083C9BC54F4586C95828328970333D68C7090E454AF9E45392F1B4CA706C
968D8F3BA9DCE374762E175D434288CA0576FDB0D7625E1B5ED58FEA3576D091
D838B5FAEF76DFE5D49BF4132C19604D321E0A4F6F62668E644F9F2FE08C7790
DFD1FC31D5870E605E7D08F03D47AEC5B22FD073701F486A18CFDD2E70DC54A2
A26B1D78582A33F532481524ACE2C2C2BFA48D28BB363416C065A47778839544
A2E2D58D2C0B13F44F655AD6FC40955A3EE68C16EF312027D496A7B29222D619
822D08CF5ACC9DDC68D89F32A2ECD19E237939C43BF179895E1A404580399E65
C1EC0F675700C80A31374CE703F00747B6681DF1D04612616F817CA734B68464
35FF97F246CB468ECFD40D3519E95194C3143340E2573F64ABC3875E7151C6C6
B387FFEDEB108650025BBEC52700BB11800BA655003C920EA91E23891E5340E3
40AB4B4B3E99F7383E534EF6C936DF6ED77EFB07C3DA6F036ADE9E871E8B5FAD
8BB153024818C449D1175755ED672C537AED134379E63D9D00667CC3658B3E33
987BE2F5376231787088260621587FC16F7612E260680490FEA4A1C8187F6EFE
88FFAA20E0DCAA36935CAB6B0B33BF674B242CBF5E4C75D7B9426F419A31BD9E
3EEE0CF4B5284A1332B3EAE57C27B1DAB7F691529194054B3709508F2CB51C63
D67FBE4BF01A7ACD72330ABC9E413D1DC2AC8A2BF701576E5BF8658DFBBC52B8
07828E02BB2E6C2BEE1CFE5391674BA68E572E13028779C254BF516641EF95C4
32241E5BA5169889D0DD08D5D5B666B60ABCC53F96B823137FD2DFFAB4940017
47473ED6CA6E164AE7693B6F5E02523C7F041D6C681C6B221BE12A1B419958BD
C5CE5269FBE38672FC59BF467C1F4DE613FA40888A91B043ACD834BF836F7270
91C7C7FE7488B917B97A5D4F2D6944A68175A656514425E96DD970D81D4E96FE
C9E232D6FC5389570C46AF3505423EFDC21CAA2AAF45CBC31AA72B65C3BBEF8E
DD9B4EEC32CD7D3C7C2D068C1DE2F7F467A41ED7A40F6F47FF20438FF0E862A7
EB3D6867FE7E2AC972EBC0BF7AF09DB47C9634D586515ED19E00021831DDAB3D
794484C4A85B8F0097DEE9BD42DE11805C7D225023470E66EB4BD8E9C213A951
CE122DFDEB222ED0D3275DF9F312C071B695BE3BCDABFC4D42EA9D2EC17787C4
12E7273D2D2B39BB55D84E02F4D62D3A695B524A6C07661FE6953BB4C0EEF805
F7A0245A6BFA703A1B4BC0D6AB383EF24A3E4D146DEBD198727C6512B82F8F3C
D66B6B62484DD819A044F3E3153D1BB6BB192406E81524DAD37599C3EC205724
2EA8A7DA91165B071CD30D197800D063241B190836D5A9CA98BE49C4DAB3F23E
EA357806A3D0D706338688908A43EEAC604DA52341DC2A34CA9CFBDBA9CF1519
633A44E889CB71E192C2107FFFC9AF461DF6E344FB6FFA16DC77B781EF060260
5700277EC06FC91C453613AA0DADA3095C755E4D3045C2309F541BDF8B1BB46B
AB7376FF7C80634400F755EA0CB68510666968335DE2BEC50F225ABA2C96965F
407C087370680BF1F01BDFDF7646A6B124102E3E79F997B81236E42B64F1DE8F
7B8246C840F68A08DFEB68B61446F31CA82B278A73BCD044A7886164FFD25ED2
DC80B6516A7B0ED79E24089C3D2E9CB5CA7FBA17481BD7FD009C7A325090B59D
663C6F389D2C5AEB2DFE00FF019306BC33E60C845202556968EA9C7114051105
41BD49C4006C913A7D988627BF757E7E3AE3BF9D3AA5AD4F5C8709B338C9FB9A
A802F3002A29CE268FE9D75A7FC59B06CBD11C12C2E8D8E14D1017DC84D8F22F
3F9F91644A24400CC8DD65BB351CD0A34B459FF97B0E458714F0FDFB9B3E64CD
6F5A17D0A887B5BE93F1EEC149633A791BC5ECBF2AB8B2769C12E3EE28625EDA
3D3CE4E46821457498301C03ACF66F2F79DD68722BAF78DE86A40ED5DBDE8B5E
537B68A693ADD51CF1FB8C141457531E7E800C56BA3B85B8984CD86C921E4F33
1FDB4CF16123266B94843C4586F7B0914CF415CA5A8660B3F7CEC1B38E56DA1A
B8B1DFD3445233A03BCFC28885C1042A6C201B874841B2E405E8C77151BFFB85
2A336C627BABC4737FC72F8F4F6BB7D73551EE33D3CA7B93DE75CCFDB723E290
4A1C720147B105B6495EB88EEC7A5C5ECE5B893BB3031FACEE72701ACD225D6B
694FEC1B6D0787C187D5370B60DA2F07494E52C4BB7A8DC854EC212BB664805A
6ABBD010D85C3565B2ED2E1638F9A199716C2DEA7403DE02C363DE731EDEA79F
38C99D9679C33A4D4F1488C39AAE61A41BAC6A15727CE914A237AEE0DE91C125
0C49E060D989B489D1BA5D33B1FDBD35AD29B499BC8A5A10BA8FA1D34686001A
DF08CCB347132C6D038B3E0E5E88944720EE44A47E6D5C64DA4CD35DB8903659
3CE2ECB852105B7FEC6FB2D8DF3AB8ABF42C9FFDB283EC049D3A61C771289795
BA53B7B5F0A588E1E086955C3A5E5D1727CCD6D6EB48B5EF659F1892A8C81AFC
A148704CC1313134CA7014196EF241654B81CF0C6959C077BFF8C37BE3738B4C
0E2F008129872A0333D548B045656A2C8760B0EB25D21BAD52D2348CA838B3A1
CA68A22C5A5134CB0514383BF2214C20FF453386DE9F4286F02E496E8B60B2BD
78E3F2ABFBA17B3F0E6D549E7C6D13BFC785759F34A18F75BF20C63B321F0584
F9623A71F05B694C7382FB817686C5BECE91E3EE39CAAC9A19141D7B41CFD135
51542E25AB758638FE80694015EA9361C2B4BAAC06004CCDFA05FF7E29BBBA2C
52EE0385F33690BDADA2B0D53C2423882003FDC5DA687CFA43C0D1856C461F97
C7AEDD66B5196FD341DBE14E0C10896B99063BE5E57E8442AC5E2B90B87A5930
C319A044F3E3153D1BB587AF7E5E21F91A0181155AAE4A63F71D9E321AC3767A
92F4629095B531FC4DBA01FA187DF959E597FD86C9DB3C3FA675D44B2D0C1727
4BAAAA454168F15C37B7F2464657C4E828D61D7937837DF89B62C6E21AB81DFA
802BE2E753641BD62DDB9C5117227E44F8CC4B092D9A5273ADEDFFF998B96AB3
E3E182E29B819FD861E52B04E009F94A5F2197C3B24432F7D29BB51B245BED7B
C943B73F4D84A5F79A3193191EEE8E5518B94CAB63080E1A70C2F082CB4CFAAE
B7C97C736CD1C07BA16C34513878E982EAAE763CA422D67550B50264F98CB091
B751A58D4412A949B9E6E8CBC91935D903B8948753E873822FF2E1C8DE983485
4FF29230302F765EBB37367CDB40EB73F4BE5C47E19B535F7D13EDE45304C3A5
9D0BE4AA66C14DCED3C6423C5CF3519A232CC910A787A5AA51B79CAFDCD501C1
A5CC0B61F1201A848795C2BC29B689EEFD40F525663D0225B4FC179E5246B30C
ED1416BE7F3E83E7247ACEE7428A23D08A32D01210EA3D220AC1798A5781DFBE
3E47C31D0B5A087D6759596C63BCB936321589906AB24214F3C046A1F5BEC81B
388C76A39DD9F14D883A4CA48B1597EF3E3407B93B59360CBA00608A4B24045F
B082AB4FFE58DDE52CECFDD6E018E867FDA253BF15E1ADBB05F04614DDA706D9
44637969889322F2522FD9570EE6BA5F85F4806702F629BCFBF2709E1050E430
19FD6819999E1A5C2FA63050E3D19252843B5D9A3073EFCA93AB9C60B4696B15
B6A91DEAFA91DF6C817009D66181D65E4B00FD203DAF098A93439402454FC951
E4319A04CEF2E45C67D82B81114BA6FAE90AAC299B0A3174D32B6A82C3B240CC
99E5E85F2325C12B7FAFB9D8C0238645C253E713E1AABDD1CF7BFED3B6C69E17
A074031B8EC4BFCCC16DC273D4A019083782228BE7F075CE96A53614ADDA732F
0927DAABC01FCE4E1A158E799D50610BA45F2003568AF44E2EE4DF2E892787AA
65287E47552DB1D42FE663580ABB541147853F4014B4AD13F8F95AB9B462F7A5
950046C9C4A8CC69D07EB59197AD64F2E723E14E152D46F20EB10948276C18F5
029011D8526850A8606A7EF26357BD2707948AAF6A430CFE77568235A193F57F
D51F202DE6294C204CCCF9515BF63CB289D701A43491C4C0838B8D797205E8BA
8564E79E8841E7080BFEE466A1D97C63750404EC5D04CDC757B0FD0A10AC1127
B4E7D18ADDEF5FFE63A9B85DCD793644148E7AF8F1D14B076FC4C3C72C5FAE2F
881386E9D806EE325A408C5F84E3E7781B581FE0B530404158B385AEDF0D401C
87FEFCBDA82C947EED8D15C37C48D945B4CC4FBA5905ED4D34A5E4A2F4C52697
101A7284D9A2E874C530B0392370980FE8C49226F2AA0A304C84B6D6F5045E48
0119476362466410CCDD3DBB60C7875CEC5973F95A8C872458B63F686FD09A0B
6D6900D5D8FD1EE5A172D0792811CF61B3714077BEF3FEBD4B2B539E0EAC0F22
A3DFB0BCBDCA92D786D0771755FD29FCBA3FAF5E895BE7D9C19A710467952474
92E457EC26E56FE765857220244A9E98E7F4D6E5435B095BE9DE92EF4C176742
032FE8889839755D8D821CD7FC2CDD54F2561A784FA50039F2FC3B39A9F75849
AF4F71A1D2CA9E865D7C3B977284E5F84B725038AAC6952E4049B11B7083CFA9
0832EB06617471F08399B1453DFBEF7505916F06395BB9C8ECAE542B030A5E40
CE0811225A27C3EB1D7BC8BDF10C700038FDB23B78F3BB8BC89029160631EFF9
8E8EF876D73AB1D963C8365E8B0C46E6F2EA630A4CAED3CA557EB3AD75BE428A
088081FF6E74A03F6FF29016204C9D6FDC7AF0C1A9BEA45AD2998C6920F3643A
171196E3422408601C926B58765B8698FFBBBE0C3890D509B25853AB0F25FCA6
BB860E709684EA675E7DD7B238019816463C0206918EE55F76AB2428202F6E5D
4AC4D2168F1C926D8C31F6EA95FD665B591E12E4D8B234BB67ED7952C3AECD73
9C9CB1FC5DFDBB883D04F375D19C2EBD390AF25F8D95A481BB4191F5A5700F90
70E60CA384045DC239D4F583DEA184688CD0FACC7802A28ADB7907E056D20AEC
2D6600A201142248276B7E4F8924750C8361FDB1FA3289E6AEDBAC88BF012B53
F8D3262E9BA4F370699C8678D90F0987986CCF6E14D41BD9CC986A005086494D
4A357624DDFE8A45C3BBD11D72BA01798903DFFA60F6AC177E717D6F28F87E36
39D091922F4994671B22EFD41FF3FD1F5554C664DCCEF78097CE5680EC25D9BF
DA43B3996A4E6FE9217A8B47246B7C4D03A5B1814448ACFB10D386A7AA4D66E4
13B344914CBF11F60E84DF1261252400FA3BC7E8B1362BA3A2DDF29C622FA55D
54800823824AF7DAE26688DEA3B2A11DF0545AAD134494AFBEFD9D51E586F6ED
6510E900FFFC8BCC3D355A4F3C7BB8FF0113F7ECE8F793BED678FFE181B94938
810CBB5B168B9B471A2F54479581DEF6C117C0FC3E2F617807E129EAF9B11C08
D0FC1C15B283E2959F3E1394F6212E9CD5D1200A498FCBCB2F55A12A0B8BBADA
91A7C1C1A1878975828775F72B2A4089F04CEE35C0B41847C41C143A8ADC78D7
9D5861AD56BB2B348C551767F4AA82DF1FBF64BEFE5CF9CC4A33199F3875A0BF
4AAEC39143D85CD32C949F3D9796AD0F8E11F72D917F2828CE535DA2D0F052ED
F14B260F69C8776DB8001F8685FC95EC7EDD60506506EDE0ADE4CCAE3E8EF86B
D5CBD90AAA608A3F65C0FB12D24CD4696C0C69348DE5BC5F443EC06A1BBE8E64
81A48A9E0D0E78C5C6E2C88FA9336082C86E84310DF2E15C2A8EF379E4F153EE
C4FDC93D0FEEC724C9AFC18168AE7D0CA7D081A2889BB0DE1E2E0D0646A3CB0E
5628BF6C8D599A67DD0D7C5500A05DBAA0C671065C069B7A80127C6836873B61
C3DEFD5F9A28572ACC884C98F4371C933E0BD74039F4219854F51D3B81A2968A
2633D19D19CB2F973176564D744BFBA60FC22E964CE10AF512C228F4CFC3DA77
B88F0AE2AD2EAEC84A3320B7ADF8AFA0646A4031ED8C31855FBCC2E72B7679DC
DC16C306CBAC3C0663A120E4F53ADA4ED0FE8C4EB03A3CA3D46F77128C547495
398E5742FC340CB11389C30786897E49A974E9026CE5AE35CBBCF08208F87957
A6A15F77E1E234889B0FE75B3D8890C0BA6CB7E33875B819AEB1EFE37A3656C9
B206082D170F0ABC7C44086BC9088D84F77D0BA3F6A345EEB5AAA67E3E6F30AB
83C9D7B714F88844A10F1BB7CF6F7ABD0D89D1E3F48E380A0C7E74EDB6C5C0F3
CB6F2433FA518D2909144C30A00A6E010B4220EBFA66EF79E0BFA6EFAED341F3
9913EA22BCE0635C95A998A77FFC56DFEED2DE6C3C9EC85EB4131305F4678780
52E009E0E1AF6B64D61E6055E2595D792A2E7003639A13E6F3845521A3F0983D
0EDA0F4F7211B5B5CC0A348F325F3E45531785B495E545585845B09D855C3A01
F713C1BF081EB27E28AE7DE4D799425D869F75A82E117CB23CCB5DD5AC1C4166
46DFC636173D5D9EF4C45B087BC34E8F14FCED37AEF9D17EB5DF02284623F4FE
B36379DD63F00985881E834134B2405D8C11BEACC5DCE371CE0F825A65B22E68
2A7185B4A47F74893F360FD2D6A980E6E4F77B93A92500C46DACA211A3421924
EBA01BF0C7F3722A2E41B4F601272997ACABC52E9DB146BAA3A8A02B7C530BED
308ACFD08B7FBC872405B7183D2385AA4D74E4741583059D7EFC8E7F0E455510
C6AB9398D0660C89E1685C61048663D4B653BF98D2CCD6A88B0A67C909E66B76
985E7B9D038A4DAE01B286AE295A1A0CBC029245E94EA10FFB43792D57812B84
06F0133DA80CE65A75CA26236DF9E5BDF3C4E1D19C3D69EC4B6AC687A6FFB981
919CAAA657A12DBE886F7C0BB5793B266B83FE8D6970C6DF9DB4946FCEC52CBD
D23BEDB1289D0B7B0C27123B55C2F4209D4107602FE35F74F8FE7D14B7B44BBE
5060097F5A4FBCDC2688B86447046EEF2AE810351B7FCD69EE2BF546967024B4
5296A2B47E4C81BA6C9E6FDA99321F57F6794E4F87770C65F7BC578D010289CA
B665AEA6C2A88BFA33BE267B12BE9B78D0F4DD3B3B23D69A58E2C82C1981EB8E
18B5E3E1F02829CC670224DEBE914998A327FBA3E1DBDC62C96A1B2326F31CAF
13F883FBB67FA28E24D022400AA60DD50DC093C9E693265E828A441345EA5C4E
ECC58AC03B40E5604C9580910F6742AC40A7CB3E08E73FA1E33D7339699B92FA
8FEB6436F2AAD02710777083723CA63358E9F753AA892BD9A7AD14F509BA49C6
320EFB421D9FC783B3C8533624EA8841787FEC863F584F1FFABFAAAF9514DBD8
93D279F20F49DC8C5F2C43537EDC6CF44282E192931996E6DEFAD9D535B58A14
9AA49FE620EF68B1D7B8CA4A70F9961A02B350A76F697E285BFA294490E7CEC1
5AF39CBC57D2683163FC6FFC1920EEF0051FC7A8E94D389C4174811E9E24F85A
8B77DD6AE21621F965C00E7F84B345CC06DBE98FE9E52BDF3CF8FEC118F0FE85
18958F1A6B52D6FF2F1F28DE13E4B525245B82998AD548C926EB62475AD1D3F7
F34C748CE16F76A93E5F8319BC34778EE5EB5C6F48E911D19253A39F993A39F7
179615DB5AFA78F7FBBFD71535FEB7049F203B46F9E3000FAFBFC44F1D2767BD
0D84ACBEDFDCF3BC90CBA8188A853D5419C1D2AF7F8A14A61F8D65CD6998E813
BAF9B2323A9616B0A7A154D9577EB6EDFB9F157911E60BFC3FAAC81736E18B65
7D33C2B9836FB5DB6A0D80E2FFF61085EB8AB828EEC69F3D2498503AF00EAF3A
E0B8065555C1CA858E7E7251F22E5BB06A154054968F9E6176AFE0471B09CDCD
F1C92EECD88D1E47B33B77D76F8CBCB04D73AD2A948E88B3B323E0DD7E5B229A
8753CEACC461076ACB6AB7FD7110CCEBF6F466633F2ABEAC7A7D0A1C30A35176
01F30C7FF2B337B41232EC7CC4F97EA379535286616D7214981A0678BB2138B7
FF05556CDD7FAF7FDC4C7D5BC1A5983732A160076864F407F99A68AD7AAE86FD
EA4CC1FC6577880BEFBFF5820772B44C171B4AF5A217D05EF0CB5D10B4D1CB3B
D127B84D71670AFD502DF5FA185579799B6BD986A2913E3B917EDF3D43F47C6F
52356F2003B45B60BB1B6D62DA735DA6689C2C03F196A8D560B6C3E3E108892F
23FEFB203990EB6DDF34E806EB64D8EEF5CB0DE9A33BE5465E9331D5F9AE0D44
8ECACC226B98F433C7064934FB530B35AD9155EF03D074AB52A7E493F4430AF3
A4E3BDA695AC6822C4F42EBED74364A3F054203496AAD69A05A3349349C965D9
025A5318E51A0BBFE7C4F91333D6CD3899778644A33617B764922641900DD572
CD605F5E64FCB19D176C24DBEDD2808DB3D1EDFDAD510D721956F7200EAE8F93
ED95AE429D7CCDCD6B199F1D2F43F92DC94F908F67F7AD292E4437C8A1DEB345
15E5C9A0B78610D2D795E0959C0188CADA78E6CBF5B9502AC23422D42CA4924F
5E285F62582DFB8EB77B3E06C65BD371F2E48C48712ED6CF7509792BD183F73E
9DF5265392E03264AE22D81E75A04AE68344A9F1528270201BCA43019F62AC6F
BAD2A4F2C83E0B909AD58B0D655F6AFD3CE06BC4717BA198767A352ED99299F9
0C3A82C4C3AB5B333511F10A6E751064074A52C138FBD5BAF9799160EF194087
E7CB8D3BBD6FE1DC8600DA6058437A31D7A36B38DE952F20E91B9F1FFF741056
B0E06769C3757CF9FAD6765476339E4E87983023D5A21A29451E5B3DF95492E7
4983439AB75BC7A21F225F83C4666C35C20752E5E4D9771C3B3FC8F215665967
7CBF68EEB49FE21C46D517324A5E6FF1135DDEA77C3A81634324B97AAFD4A523
B18B181C72BACFBB9F3A3D031A22BBC6000BCE1457887F3881C8F1E9A6F04807
8B9A79E0B93DC55437A9D4D67FD60C7A551828813067EED8B44F8F93179F2911
FDA4C818B0A3812B714D9025814369FE71C396016393DFF6C5C708439E4EEAE1
6EED2627A072AAF76C0AA23F52378FE5CA9D10043E0DDF5406C0316645AA6F3C
03D087A0DA04F434ADF86222060AEFFF5EBFBDB9240329F7F43703D558AFD6CF
63FF28A98B64837C4A96001AF65CB9568AA9C68C085E87B32EDCAFFCED2FA9A1
619C359D1ADE3C1E4BA1EB8855BBFECA191D4B80212DECE43E66E498C82811CD
E551ECB3C8DCC93024F925D8D4462C5871C03E1CC8E03D38E2DF046BD128D380
54B6D3DCCD44044625B5863BB09F2D2E49EC313FAE1D5F0AF0EA5E570B17EFF4
9A79EEE4953A33DB4595E959F4D0FCCFAF675E8A439D4D1FC4034B7B00924FBC
7A16441725ED38CCA679B6ADDBA24E65168F3C10DF41FA07DF46AA9A8FFCF3E7
0FB862A75C4A01216795F2BFA2674374A907F3D00194520C58B60B6356B97950
30499818774D161A365C7335F1B602CF8A5D6BB3E21369276C1B1A1961A77DB3
7F2088FA9735C944C04B919B7BB6A60DD4DDF939FC3C10E021ED66BC5B7CAE57
D0905BD24925C8573CE77FA9CF68F93D6E03DA4AE6A7E98A7920B72534DFD66E
5865E2A540432B97CD7F69F767A67AF3BAE02C93A27CCA19BE5A1AA944C54DB9
518F931EB97DD9D881E50F67B19423A6BA41034432B5E3928F788771E26972A0
A9A1E2929121E532C6604C059CBABE2C9A512F7954BFF39240A8A4942074E5E6
B2DE3B1299F0A1E6B43480FB5F9E043CC134930B868DD9FC36A722247FA31962
91538466D6F3A2B9511EBD13E6A5D5E64C41B6BD1F16D657CFBC0192F3456C27
BF25FEC28A38C6C66F8BD36DBA3096A08EA19588BA2944BF5068D2F6B9321AD9
14EA4E82B22F6537B6BA413F846A887BD1B3B89EEF73565F3D0D2811C5DB6B1A
94DBC963FB1BA1018BB02F3E02EAAFB0BEDA0BC1E9F9DF9E9129E83B988B18A9
BC4C44810607B9CA3F67DC709556101053958976A09D4D8F15D1416F202111C1
E4B7DBF60FD0870068140DB45F90DE9249C5AC6495B74DFC090CCC40AE9DA65E
5DA02E7A7E8A840B44FC46645F0D700BE85D676051908E55A864FB37E8F70E76
D7D9B5FF090261A42EDE529B033686C1F39A8CDAC4723703862F2CCD410465A0
31E1FA28D2A327DFF51328B062B6C11EE01EF5EA9A3595DA8DD910D7770583AE
6ADA94FDEDB2321F0A36B1B1C0E935AC84696C5AC192C57F15AE8838EFBDA5D7
B525C23E2C78194447371F9036671BC2A8C80A9ED14A027B59CB9A0F4115D7DA
BAD25C5633A30BC2A7E86A768D46BA78BCD7605C487A00CD29B34C95B3D50398
2779D7397BF1D887CF316E2573D901982869FDADB27871E711B7F00F668A0240
AC9A7D1798022E072E91F7CB647E1131C0CEE91162DA66C9C1C9B45EB659F845
681D61D02D28B185C9F052844D9A5F91CA131E241A46257A9994B419FFF2A59A
FE302EFDC971E67B8C0F4434BBE0556851FC6BE6C6B7422A8B1F6A109996164C
3ED9B1676110F9C89AB74DC4418F77DB1E421DED749AAE53C60DE5EE3A1E09CE
2A3246B9B5EA106E3FF570622A202A3062F218582C59B4973E4E9FB1DCAC3812
31E44F55442C4053B30A15AACBDCC8DB585D05EDE3ED4AD96A27DC8A78287868
4E7FFA7C6EA84F44E072E387E8668E1A6ABEEB389E2DF0DF373FE5AD1F7D9D6A
E6A811204619E77C87BFE6FE50DE547A4CD3C7D183BC22553122C0AB581D0FEF
CECAA1615EE015B4701779D822E33501FF403643F1D606FEE10691D19ED84FE5
2EA9624FF8C0A0522F8D6CB3BFB57F14A00BCBA2861736B09DF1600BA3B1DE13
2F1BF1D98869BFDBC9E1DDE716C4A4E2B4FBA99B7EFE1571BB537FC01D4EC43A
D1B8F73F3F888921F5DB1C8F9E3C8D8B594986F1E3322E494B0E1F77B8DA109D
D7181880277CB69B8FC62FB350D208B441C5206DE65B39AB415B034B567F36FC
3E50B7FC3F7A9F8A15DF7EDEFA3BAB987AF70576322D91AD4378E440C2FB1E5D
30114E77E267231F2DF32BA1233DA2D4914C33A4824A2E123A4F7B0AFB3B3649
E987A693E98E68F8D47036962250255C5614F3D1FDDEC4A147D2A012161BC8EB
8233A107BC3FCBCF03A48563EB782F16D18A2A6D761DAB301604FA8BB989C6C4
8F60C0CE4F4AC951ABC8FCDB5176E65D254B8D185B257D3EBB567DC04CAFDDC3
3E41E6348DB50F0F14091105129F16BD5B28D54848F4FA2A48F61E0B528F4873
255DBC0530371A318B021519EF601CB5F6F6E081B9BC1F91EF3B667A0F85BFC4
0C71A5E57B4EDB4AC91592C8E64F9D91CB5ED61EFDC5AB16D3AA9AD11E9E52AF
E7B9BFAD7B919E77A9F2231BF3F48BF32B62A30A57614586D49BCC2DBE8F9FA5
B8DA22489F37CD8C19DC13F22E71B7D3728371B4B5D0A52898075AD8DC11BFFF
F3C44DA3251AD428895E6C459BE880079AA6F77C69FA2D16ECF9CB5454EE6B8C
5ED4ED7E380A1D3E1D71D757DE1537A8FCE12F33586A69339B06C28560174995
5A3AC5F7C62014426FA6B85DBB309F94B8EE0BDF440608E4B6AEF0A29AA17801
50D2B2549D0BA64AC3B764F87CB8A95B86F67F112A4D7985EF1CAC36B385E307
C66E3BBC746A1860837535AB75F6023F59522CF36E08113A271A43C151E78580
9E95EE276D2EBF803F2DB6CEE66AB48E8D370E759FD06886159582CE58C09FD0
4B1AFCC8E5452FB6EF2105B95F8D8ED651FFB7D53C38ED8CD71FC919379CB47D
6A72839E7651DCC842C147E0D8B3EB3AE74B1C72D0D4F20F20AFD312253C9FCE
562DAF862D389120D415D4601775391DB9343D849213744784D723BA3EA840F2
15CABEA4D7EDCB2AF4AB291E6186867968442D5AD7C9FD4589B3103F6630541A
BB37701607971ED64899DB38969B1A1E1E32A81453F2EEBC48BADBD290F13FBE
14FCAA52BC44645B7C5975337EA705144A75588F9790CDB81EA47812FECF0A9B
94996528085BD310DD332ABFA9A42AF59CA6CFBE6467623A828E3332430E11A3
C1D0822F18A0DABA3EE7A94D8200610E4F730DAF2F2DDA4B26AF411155B18AB5
788AA2D2D54C9F4A1464E79781BC1DBE19B1DA303A8B300D38A0CA0E4F8A1989
3FE687D04A6EBD5D8B087203717200C8B38B46643A145ADA9568FD03857D4514
6A2B7F6E1C5B7811C2826B28455F9DFE866AB36590A72878B9F819519E88DF8C
2246BA156F2DE64E7259681E396DD83A0DC8A45750A0DA29BA7E55430109AE89
F6D744B9701024AA61F9E88D2FE33660BE08B95DB368EAFEAC28E8A4404C600B
F38B70C87E5BF34C808F2789F3B7381972A2A31420F82ADB85E7C4BC35E4D609
939E3A7EAE3393F6198562F42383062C5700D69BBB9B53344A46BFCCEE662EBA
D4B7871C23F35557E01090A23DC1566FE8051A667C0A52E4B78C2428D253445C
23CAB41A391A890881ACDC90E0C8F1B41B5F313FCECD05AA3EEAFCD5FE8996A6
6C22A92D4F0393B83E5E2446B7CF01CDE934C1EE27E7AF23B831973C2FE42148
BBC4FBD5FC36597DA29A9C63983470E59B3CF049E3E90536D0A0A53ECE1AC69B
EFF58D777E8B59C6B8BEACAD72DB974A437E3BA34583A4E83DFE90470F1B3B61
7E061108F033CD619BCC54766CA4AE15FD41D6437BE4BCB84987A781E8867369
29219C2AD20A91EA4B333D5FA50E39DBE0C21092D220507A923AFECA09974E18
1372B68019CF2C4094A5BFBC23CEBFEC9636B1B69832F1CF0545829F356F0D41
F18AF7433600227381A5DF9E1A5819D3CE52282C79CECEEFC2BA78D2DCE25B0E
83B7E548A38A3A3388F2DD29A0F3244776AB9C05871190D7BFEEB796E308689C
8CCAEB49C50E7EFBAF2D9B90DE329C9BE86FA7130572C057ED56911268DBF040
F0999DB161EF7DB88DA4B0C592385D35F705BC2A9A61C5D2496B23743372D569
3DC619BD1522EB9FF705564720533C9D110D55D1861582536AF5F5897CC06ED8
6886CC569834D4C1C118BF39B6B04EF7DEE0CCDFB967AC8044AFA7C3FABA7069
BF896E56A09D41349B2D435910F3A3A0CF3E60EE6A139B5FA9F0CA89DE531A45
C18D79B718A682AA350C46826A6307D19B773770963187AE1D00CB8CB6E2FFB2
5CA81B8B76F0A999713414A96B399484A21AC25C613D8CB3E6A00150745E79B0
7072A2A090294F05D4BB2AF75D41AB512A9999D00C53841A269BF551BA913EDD
CF2A0894002E436981063FA50DA52A57C075D7D7C8BEA06364396D2794811B7E
6FFB9BD8BF8D23D9CF65C4D61CCEAF43758D9EDBF39589330544DA9BFA7CF6A3
D8C4E5EDD3D54C804DA67DFF98920719549D23AD4CA17A97C838BEFAD84F75B0
5F0B302A484A3AE1AA52BAC613BD60642420CF07193BA9B4CFD97E2752AE34C2
76444DB4F56C271077F53747EBCD81B1BA94AA4B7456F8A26A112858514C3165
096D8F280C29B0D969C045DD66501052C42EC2CFDC1917CD6B6718EAE04F2283
B082EEED8AB079C398EC1C425D4B5363EED630B3B78119D07A5F27E4A49F2963
9780BC1B090FB170AC7E0F2EFE4CDF7D9FFE8A3FBBEC9E8410AD2EE463162EAE
83E326B8EB666641C6C768844519A3FFB51E9ADFFB3CECDF5DA626880894FF17
9CDBEE1646E4B897BA8CB514490C95ADB3AF462E96D012425FA40BCCDC41C41B
6560056472128B1B587262469BE4109FC139DAEF07E4D25F3B20341A3D0A5571
7C052F06678DBD23D7326EC4D7384A9D9A09994282B995485CE83DD41001D5BD
796ABA334160229587F4DC11F6EC986B036803E1D3078192F37463DF15E7FD87
D172622D47714FCD39BC936C3FAA4CB2620D7426002161F983AE95E542EFDDE0
75D2033B3DF8BF4306AF12BAC5315B244D91600DFDD95DF8611DEB6E1A6784AC
A278A6CB723A94D9D7E9A21408BB18F355E974D437B8FE3F5AC9AFDF4185B9D5
7F0FFC00B73BCA00D255F2E6174977B1B5A93EF3D8B1674791403BC96522DF62
9810D3A0C4C623EC252752E31CF5C1CB5EB29AFF62400796D2A7A03787986278
D56C22EE022C4DB7F569BE4F25923AEFDB5E6050B8620A70BB1321CB39BDDFC8
720511E9754F3D3E68B5D7652489FAE2DBDB09C23D64E4DD88F234ABF6FD9A50
7BD8813B20E099A2A2F6DE9020F4F22A500C53429EF1F8D15AF182F5C7040F65
F3D70AB67047513714CC64802B976F263B7CE356F15F3110BA573CAC9AB88F28
143EC55889B04D21C2D30E2FDC04B9EDD68DE2B7E1E3F130B8BC8A34C1DC16F7
994951E2F2D6C195B71370D184BC1890FB5FAC4C01D290FBDA23A8BAA06362FB
E0E9099D637B4F1AEDA6F125B97CCEEE8DBAF4EBC0F34F7071B4E2D6B9B32455
6270E46BBAE8FD76AD984D23817A70054D1A96E278E1926EB7839559D98C7239
776E395C91D4689F7553DE7432E5B553BD7AFC2D8E6F313E28B949F64A0CA1C4
6310F46B7B5244537DF81FE7DD6C5B651C251B9EB5A26DEF9EFA45B44CC43775
62BCF82B0627E82A5A72E24259E976E6FB3381FBEF9762C42D7343CBA6BE147A
D65BCE334146CCEE0D5F8700012BC08873826BAD6D8EE77A608A7DC6B37872CC
905B0C7FE0A46FB2CBAECB2C017D958D91B970E0A071FD25929FBE416519B302
DD69184605AFEC984111E81A44AFD4042332B737B22AB25F04326EA5CFB5A77F
D41AB81B544B4AF95673008BD43EDDF7277EE29525029461DA1851DD43C6B443
63FDBBCA05E3267493D388B594B31205362DF43107DE6A3936500A16B47676DA
A3FCAC5A583E357133CD50F62A477B1A286897844843338093FFEC828290CC7F
FA6D654F075CE07632BF8212AFAAEBEB4CAF92E5D2823BE49D2C48CA1454B456
EE9885281C7C5EB71AD363B7DE09616B0B2752E78BF00361EB8FD1270D6B457F
4E5DA4B55DCC39CA04344CF03007CF6460AFC82E953903FCA10BD5D23A963F31
1CDA93CF358AB9FCA38124E4FE1D37B64A3E72FFEB7DF4B84C37E9CC25F161D6
624200872F0A588F67E968DF2442D90FD3A5033ABF00BCDCC0C25AAB5652DE7F
0CDAE4FDD11D37A60FBB077820C8F3615BCDC1AB02DB387C24BDFCD30C4F55E1
FEA03FB2E4101F3957053193C39200B070E18406BEC009B7193DF9DA22B90C00
0ED5DF81C8D5978D430EAC3860AD747ADE111CDFEA91C7326AC7FFC2A65A633F
D0288063AD29787BAB2D5F893EE00D41CB48E35CE9C08D0BDC344ED3DE64772B
DF2C3F52D34947E0E252A8C7417989D97A307DFF1FD416121DA5B7716C3E57AA
381B67F8966CF089B571A8C31E3D77319681D074DF5C1EBC30A7B8CE1C4E99FC
5270FBAFA3BE47471E3ED84EB3A9903F362AA7C8EDF740C552E52D344E01B413
7EB3F770649229BBD4ED5D6978A73A202FBB83E6644E765644D267B8F71D310F
A7DAD54C932A774D665C065509BB24C4A1776D3322251A8DFA0EEF219FD72CE4
93015224C984C25A2148AA66104BF95D062AC869A4F8A4B7B1964EB29DD327AF
E9B9D70849C5706B217CACF41801989EF2CB6FE37B72A4A18A52F4005B8CBDA2
11EE41670F89BCAA2C754CB797122F1ADE522F139D49F11285470974255F291C
AFEEAC46FBD4E2748884018C820DBAB75D7033F3423FDE064475E5B52FED8AB5
B7D38418CB78C83615A77C0177351907D692EC8E56A3B492C80A334F947C3D05
68A928CFC4119204C256C114A3F6EECDBD7E14D9AEEBFFFE5C987E93F80BF623
5F223BCDFC36D99030CA3042E70D4555001E5800B2D1604E83D72A55C3E14609
39237EFCAFEEE2DADEF074F05BE88C1C9C6E6BA4D97821D05CB3E15265A4D267
3F6B989EDD1B43DF05D162B9EDA0E213DA20632F56B36007C07A67CAEF82D1CB
3A84B3286276A1DDCB5437C3AA91AA60CE1A230476B0CF9B4CC3BF7B295FB8E3
918CD673DC3B1859B9B185D57AF69805A6F3355819580C470B9E8AF278E88B61
4C7579C7B6B817B0A535B2AF87E9D0F851CE9A1ACAB060F99B81055584A16036
B5B80C8DF0D3E612692433729892F8D7BCC25FF373EDA278903EA3254D3C852A
A2A6D5F32E8498018227B928930783A77B4FF36B1016A64F633B83F7B3A36D78
E5E031624043116E5CBA8EDF09B8B1BB2CBC48AC2F425E8150E0A2C21388537B
6C89BBCCE6C448AC5C61D17285F9E2E321C9681A10F14B3AD58805DC0020DA95
9EF524B8BE47F16C0E6B100E171DF8F5EAB5E059B2545EF6BE61C442FAFC529E
2ABA7378AC817D8F283AAA7304B384EEBDD087AAA97962BDA490C6899842FC04
21C9EF287114FD4DAF6D16FF45418EDF2FB2ABA72AF18B6A5337C6D241E992E1
1C79297FCB9157712A55F5F6C99C423D37680577D11A613EFAE5A207A6C87AF6
2E8F7F5AE245536AA4104EDA33B0219A9E3A8B65165B3B3560C9226BCC6FA196
3051FD447A2A31C53B9BDD04B7EA8A00B2A5D31474BAE8EB31E9DE3C11E0011F
85024F749A571A3309D08B6063159C32943F0F6E73D8A0F7EF263E1949E086AB
28544D35AD3A5788C3B548D12154018BFE9D2B6C0075C51853BEE9286941175D
D52B4445C8C65CDFD6CD0FD7BBBF12A9F88DAA07EE3847667A19389046200570
643F67EFBF3046C7E20D38D58D9B7ACF517B4E6EBC8542F2A79FDAEEBAB38411
2F5D3A5FDFDEA1CBE1A3EBCB36C819ADC8129883E984EC2061DFB907671A23A0
9EF714E4BFE0D7A1352D7D4274677B103477A243FAA6E7FC9D84A0F5D7D4B35D
4E24AC4A11F6D76807563C10361CA301EE8BF7F102D61FB7D58EA93C5E545E8F
287902764C9CA1F30C6BADDEB14BD62ED4FC6EF0BA313E69F6A6F1B89CD7B713
F03BF4871A8D741F768FDDBEB23B23537DBB822F3505B196C54CB6BB0542706C
9906540BE0E0061EE06B03FDFBEB8BA8A8D7E0423553EB24AD6BF4739C52C535
710FAA59328B3659F559A5E547451191D88E33642B4553016761A17D2763E1E1
30163D53BA7B206819EEFA2B327CADD4FFB689F032F017FB7C30490192AC7AE5
584F5778EEA08F28469E1B941C1C5822684E4953B3AFC0F1695E19F06C9C40FC
959DDEE064597657F7237D4376BC33F06194E875579BC1A2B508E3603FB159D8
54099803F5FABA28AC5326F390036755C4BFE977A50107112C79118AC0AA3361
0591F58D981203F6CDD480DFCE2620C7C02DE9CAAC274CE80B8C45F1F768DA0C
CF9CC644E28F5CB97416C3B8AE959973B86EFEFF81F1F1D3E32B8B7F7BA191C1
062D6553B742E958E75C02B212472E1DA31A45DB6E53C48EF38449F45DAF06D8
D4F8CA6ACC5703FC229E58E0FBBFEBFE04F6034B2823DB43C1D862D922CDC694
C0A0BC6EE3FE8684D472BD8D065D836983265DE8EC9081A484C9ECB53746456C
07D394BB1406BD933320F59478241FAB65CDF9D1C02A5D1CE3C5DCF36A2888ED
25F16AD65200088D54146FB7D137DDB0D6D0DD4FB3197E42D3DBFA67C9E5C748
CF0EED8142A1AF9793F009BD227F9F4A4F920F39DE9A05F87A1E1A30D9AC5E18
DE950AEC0E2EB663F933C91242D82F02C777DD21CBAEB37968893C965E4BC620
4380C9974663883223F02CFEE5D817A6B7BFF9EAB5E6E85294E20903D75CD251
701B242F82E2205AFBF3D4BC3AA89349135AC78F06F126D2F0B140C4EDF6BB63
C31D869771A30E96B9FC9B3861D3CF617825F05997FC1E538791624A0252A32E
1144BA7FB613F00C7DEB2FEB06EA3E939BADC2B9FCC65F9E93476D33FBDCCA16
3DAA5C0D3F0082D72841429F79E3ED4409434747CCCC043F4012E632C017D469
D56EE246891A5EED57457A29EAFE96BB8F0CEFDD387BF45EC28EED7E9DFD5B4F
09C12CD04ED906AAA46EB162416C865EDEBE022883E5648CBB9FDE2DD6A4C645
92B79F511EC5A8780B27722D87B68FAC05E9A2A4432B7BB66C109D95AC2FCF93
8DA9B1B3F4E4703B78B6FFD30B439374CB8B7A068CCAFB3D90F4B08A535763D2
6134F22294CC25B264401CC868983D6A7EAB9051F887DD95B58ED5A6251F8622
176392846DA0B01BEB9375CF6642379066FC8C4F9489863127EB872DADB4A8AE
3AF17103519371EB7643ACAE460A9E61C8EED88273DCF3591046B0794010892D
5B66FD0E67DC37FC35DE39701CF47618DB64A622F3810554596BF56B3BA34E4B
590C0E1A7B078B344EC1AD011D0985932814A716D8401EC872E2222471236F56
F2C54D46F92C994989464AE67E49E241F58DAA98B3BD203FEA8D6C8A88A51C84
37BCFCD778E26ECD15282A95687EB2FE55120164874C6E8EBDD616133F1CD9D1
0ED2DE699B36BEED578C9A135DC7A70D5E1A3D9B278737C51D6D2B8FBE84B3BB
71993B540DD291372C1B05B1D73B8A00CAB588BFE6B370E2517839D51030B695
A93CB7D402FD243F6CBE4C91B2195F4E4DAA24ED1CA34DE7429C2F85C85772B2
E7F8B82A9FB7E633334C9C983FCAB5ECC0E75A64F0E7AA4CD37977AD84ED482D
18A62F787C1FDA582D886FDC0BD9CDB4C375C735028B31B844D6402F24D98DDD
5269E773AEB6AE9F7EA6B4A09ABA07194594599CD605D3A0B3369005E3FE2921
D32022B8FE6D9D9D39DCE6F48D8F4AEDC967BC58A02CBA341708BCFFE380EC5C
B83FDDA5F5837CDAB15B181F5F4F8374B55B55717A678395CC9EBB4B6BA61289
7DEDB73D6F5307C48A095B145CD9DFF880556DF488611B802E5B34CDD288B397
AF31C8BB70A532801E9DA5E86668A52613A95EDE6C5F19AD3B71195D7639419F
AB59D1E8D8227368C149EDC13A99590BAE565600069B91EEFFDBE5EACAEAFB1D
1BEA3F752E3BA3E9E0F893B9B5F9F477800FAAECB4222E197FDF30F67BB470AC
11D38854244327CDBD62D00D83006495F70DA22E9C185BBB34A6EBF5F6422B74
D03A38D11BF9A3E8B0E5080A1994B7689E5EC50C3645EEC16AD24C4603D1BA3E
926671E31842C759229C4DD1A2F966331B52ACA50DB8C6437C945D1D7CCAB29C
9946DA4F15A736793F0C6BEED9FCD9CF230F4B05040E9EB6222EDD152AD19C30
7118AC0086653521EA59D672887A873D93D17B5F45A358A7A162679E52850A29
2A07CE29B6B0285FCD732E2811C33AC8396F8B4A3B6D3400B50C29DAC7878134
37B8F57243271C65EA73CB335BFF79D0FC775D8E93385AF6245010E2CA2E6947
EF90EBC0FEF4C9E5AB36052E267174537AAA3B75F0E7FE93E7EFF424DD8B76A5
11275CEF238E52AAEF32B582FE54F0377A73A10F5C26CDE8495F7A1232199D7F
9B7D173A8664B62EC281ECD3AB2DE4AA228D89C1BA5447C2A32AD2CB09472BC1
74C6013C17BD158A44144332517CBD00AFEDF4EAE581BEC03927E197E41525A6
9A3F44D9BF9E1135DA2B460FDABB889D5C0926C632218410359E3E4B070F08BE
14B7747A8C2F41D7A847E185117A40E4890C71CCF05245C4AE72F3998A9740C6
CE8A5DDBB1D15B339007A31D2ABED531B1A7987236B8B5D9B2843FEC4B4CCF87
EE325C724F088224B818C7721BA0742B46ECD38787B133755A403A3569748DE4
B942649022353639F1EFAB3069ED10EB8C4212CEAFBC79B61186AA832CA26F07
B078FF19363D6C5888293EB8B7AC7E9993541A3DD1B3A32355119A0FC4A9CD66
5ECA7277148AE89168C51A17E0465E1AAE17E74B0BAE5BD03124485D0C3F5AEC
C64F5008F1D4D2C9D54B1BCD10DD7958F06FC41A77C8F09895A1FECAC1191EEE
535662D92B07F4EBA18FB4C933D048D6E58CF8102B09B0CA478A6A6BAC8CD12D
58CB024F85D6A1E672DD1096784ED2206D80192C2787656F6FFFA583D9394EB3
9CA2C53DE6D7F9BABA3201D6F2449651283C74DA9B46A0849176EAAF3357F06F
8B6A3446A67FEC6E8B4CA921C1AAFC0EC3E24C38BF6D64E9C25DECF7CE9B3FEF
E3946CA837B0FE2E97B6A09C36A90A7B4079A805BB3BD8F7FABDDB15C7568C36
C9EC5AFA0F3ABE758BF397810D1370567A791629B4F9CDCAD4A6DC41F579144F
D3EE6ECB3F8B59115379A09AEAB66EF71658595C0D162A761DC91B2470E13087
AD73E4BA42888613C652416A0648184969E1B81E56D064B91B61206C2FAE0095
57CB16B5DF771D52B18ABD206531B6B4968A465C12C178DF352FE7DF150D49DA
C406FCB523E307D6F3EF53C5956A5D6C61074320443A8511467F5BACA0C8D3EF
D8DF575402FFD294E8CDA385AAAF0D4B7117BE633C4CBF26D7C4CBFEBC8EA4EC
CB1BB554BCF3B3F8A1166EAF0BF305409248A69D6D35C09A0CE284E5658D2CE9
1B5B27FE97E1D595E787E96359EE9D23C7E22A9BBE0688490B3A656582CBC1D9
0D9931DFAAFEF53C7DF08BC56E6D63DC99F2728F99C9484517D7C558C8EB879E
FF8B7F90C99D1F049A3D2D190306C9B254C9597F0305A0CC7EF3F88C7B6279A6
94046858AC7EDA6C8FD69DCE9D0E9A0592FC6D24926BC644E5AF51FCA892CA4E
E85DFF913CC32E14B2CDCD5C6B3B0E5379B11C4EC541FE5C14FD2B2D4C81E299
65118904A06FD3ADBA6F29C983A54B02DEA2B434630D564104E263C0B10C8A5D
CFBFBB7CB223392EE820B7C4CFB6851BCBE25B6CD4B5EF14DEF05D4C29651335
5280D1976BE08F5766FA4F3557D0CCC9EDF31BF84531D665AA86F94DDA4B5388
04FD8DCB1C0AE2D3EADCBE041FC07E5A9D9538E5897256EF93E55E3119ECA4FA
E72F75521D8ECB8438407EBEA5A06488A7CB7074776AC36B43F9B63FD907BDCD
78C5867AB1E7D01E3D35D5A085CB865FA58E0F45B5B14743D409366D9B06578A
1C23B48A90E50CEECFE6591438894018072909D00732D71F63668F47681CC056
40C1DE5509B5BCC20BBBB289486F6C7E238B7CEDE9A8C0B359FC8A6BE24847A5
44DAA7C81748D3674FFB90F6CAA71ED3A9ED589420AEEA4251019D9DB3E229CF
373997C99C0B233ADAE39D6CE5AEC1D23A4789C0116DD88A51AE66C6BA8BCB13
C39939C5AFEB1A3AAB16ED59817D204FBC4339F79D1B74CD5F57C12494B76940
BA103716BE9F43694A057710DAF9B826BC53D97B44F29D1F83FE1FA0A1A4419A
B592E0C0708320E8D6C7DC1CF052B869142FE488F9EA5CFF30111D6400AC3CDD
3D6E79CAF2D0B770F7DC166C85408622568E2FC967762DC5A44D94EF709930EC
A646B2F07D8358D48D0A768B6C8FAF4F1C48527544E28F808AAC801670C3D6BA
B0DA057D180CAE1D738C9D02AA08ABFA2B99CD1878EA08C7BCF98EB4A5B3301C
A9B795626F48588DD09D1AAF7BD674BD9753743A9984EF36254D60772A0EEDCA
800923461D40EE432452F440BC614981CE23B4D968C5109FF036FF56ED93454C
8495181B0E9988DD9FF2F2F7A1645E6B6CADFA711D4A2F3D95477FC12ED96963
4159732F3294EBAABF88C0DC4D4A6D103A36156C6A2D76782DE5CC7275DA48A0
4E2F491318C536FFF8986EB0A40B5B11B153BCDF199F90DF5B338501403614E9
07DECA0181BBDE2A53AD5E8DEEA70B9D144D3E1EE72343AD613C086853059FC5
4715439CB365500795122379B1581BBC7426FB56ACF24698B7252C22BE36764F
E876B236547F6FF7ED79C8E653F92046E1E5B36E223885BB7E1E8B28BFAECDCB
29196D5920D78A27E926494D5F4D94DFCE0A71838F512630F195AE7E6F4D20CA
3927B96AF40618DBF7D92C7E64392E9020C91ABCB9A9FBB519BF041629124ABE
66166B1245E3D053DD0825AC355CD86B964A9830381298071FBA4C4973E7B829
DFB1D5A8EB1B7E522D7A22DBCC73545F6CCF6CBDF8578224211A4BA3BC9C09E9
09AE29F3517F1775DFD557FB92419B6850513870E7D1F8DD43E4D83E0EF7E7BB
F79E7F7F9D69D270599E0E6A4A3B8FE5FA58F75B6ED5C2C2F158594FEC9AB9E4
9762B02A8DC83082DDC1758E498E0EF84F049F1AF7B36AFEA2A842B031D436A9
B4973E4E9FB1DCAC3AF00C6E9338E1559BE5FAFF381BD82A6C71C267409466C5
72A8B534173F947839FB3654757E4DFDCE1FC10244364A2F45B211A00225A607
A5E867D601C60088FAF1ABCAC5182BE2198485B603C01A7E57A62BC9A13B82A9
2F210FDEC193D4C6B67CF1CDB5F4C4F4C0F8760A88B3F0BB4739C36B91610481
93BF708465943258FD69238C058483205A841CC9BBD9F4D64FAB106BFC8D8A92
C7D46EBF110EB456F763DBD2776FDA13D8DB5782B078748132C85E8535877E22
B61604EC36BEB56FDC9B7ECE22B4F15B6BF153AA714B78EACB6615080D490DB2
5856B0FC7626D42E7B65AC7ADC46008D953CD8057DF330C19645790DD11C5A93
44288022DE4E530064810D73ABE03CD355D981F91D77F997DF0AB8B7A26FF50B
3C4CD10193B73D2C7D6C71A1FBC04F6E98581B5D753C8B1FF4FF07815C5B5497
FD0900542E842CBB4C4D7CCBE7ABC91132C1901C6A92F2F25AE6B46F7BCF6E8B
473F67781FBD1166D8ED27FA1719B44FE43B3A1E4F7D4A024217CDB9933A718F
0E6D91FAD6DFF419B277BE9F492E4D1331C9060A02ED025E9B7AA299E2FB09E0
BA9C7AD8EC0BBFB5764878EF0A1CD39A73977DE260D75FC57445C7DA61AAF479
17C66C7C49105F792699F15AE7E181FE3ABC4B4C70E21F3AD9A80DBE87422C3C
F3ADC3A1BF06F1E787DEF42A610E7528113213C4810125E03F6EB91BA510563A
49CC3E4BAA3CF2692DB092C2BEAD2EC5F7AFBB55198C5C02204EA9DB15D6FF4F
0ECBF3CF7E895CEA8918A69EE67899BFA6B605080F7D8913B4E954FB295B5ED5
498C4A68B73340A69405E0FB197A63850D6845242D99FA33CC4EBCC92A623773
C9CB925A84ABECFC00B4212CDF4E88876C2DD4E40AE96BA65DC75524C7EB2FB7
95566C7E790F22CFA0048D4F5C47C34D835DB493AECF6389494276FDA4925399
C04FBF0A476985495B8E94E473052F20C5E417A6AFF75C77676749F32B384B76
574A5022D8ACDB4C58AA203F61831BDBDF33BBB3BA41D56D955AA75A6506A758
077D21805E89D8B0FCF502FA28FBE13EE500835D79D50E5F6536446F4E6E7EF5
414FFC8C1C4869108BB539735B0545E00549452BE8492A422F54E24E73ADC58A
41DB521633E05A0DA71350E6329EB3744A526613EFF0296E3BC09EFA78DF9C9F
CED545F3FC1D9437C4C04732BB8A7B93E63D4139CFAD1A09E137383F527D7724
0D88025DAA53A153B4AA7E3F0FA1100B029167C43D358874E9BFB44123E160E6
5D2ED3DE1E37473F9BD92D3BE4E77B3F45DEE3BD2B2A21BA498A484C1C8F298C
A1902F491F11AB79BAE54B4E5F84D18147590E054B70E3F30CBA5341A849A25D
C11755A2A3EABAADE36B0EE70802C43F5A6C32A9D5208C7302A34A4F508E68E2
4268A11F4CD03D87F0859625AB7E96179BAF33F76BEAEC90C542A0FB9C25EB02
70AC1FCB69D1E0E8714449DE2C5628EBE9A154B66363BAB6B2EEC169310617C4
4B7CF40EBE89C92FC5064818CF1B965DF52EDCA3C65FBBA6B57FCBBC2296368E
7D55BACD32866974D5F611FC7862A7250AB475DCA45B77DFD5E30BC9911D255E
36F3CF2B0AF4C48E45A8EFC4507CBB43528006C016DD1DFC964B4C2082F59356
D0E0E54E7D0AA3C8F89574445869A8745BA46465D5EA83BE633954BF1EC17D9B
290B1FF9CE3F7615AE01CDDC5E9A9FFD534CD2D3F115961CF0406493C97CDCDD
A1FFB9497706044BD057C63170E5B8F42D90434A48E3F4993DDF5FDF93C9E21F
AE6BDCAF7F81C1D6AAD4A849E20FDEE79F2475C88FC9C5CEB6B199BFDB6E6884
D083F28559E60B30C220A2DC6C19FA8A94806AAABDA31A9C1A23E7A19F9ACDC8
671213BAA26FE7C2418EEB63B7E393108CADDA24C91C196223FEBA1A6971678E
A3492A1641851FF8280D2C1BDD3990783625FC6FE892E4C2476717C6A77397FB
210D86CBCD4AE3E9F4E403A22EA36E867F53739AA226E5184AC499B09E264943
29E7F9345B2B7A82A11C8CD611889AB20C4A14B8CB83DB55791D218D0C5E17AD
D0D0CB4F270AC6140FB7ADF151D9D8A8F6CFCB175CB9753D3C9B3D7D890767EF
E89956C5822207EFD3161D9D9652BDD053FFE120C493DFF9FD4972DAE07EC0E8
E75DED7E5034670F9B401A4E995B235DCB849F9D4216F691487872585C17344C
C47AC7862F32859E7D254F96927BD62FDDDC616ADC7E9FE3D9DCF2B63D1638AF
0EDBC7C5E8088696DF22A548C1A3CBF716A43EA0CB055E2159DF11778D9DE5AD
6935CDB53BA93A15B889E023A11B6C2A35FAC32CEB1295F0BF0A6ADB465304C7
139D333EB97012DF37335D2D8A6EE445B809F2ED78ADEDDAB3DA4F96E2A7FE57
C46F9367F242B92F71193D204C1179E7E5120F911D26F96AE1D7D8A29BD62C37
CD1D6C55544460DEDA4F8244B2FCC8320C3799862772B241D62D5FC87371F912
D3A7BE6275691E1AE571B2C372FD96C8B7E21FB1441A82533C851094C69077BB
034791B7D7003597C4740A96A9278EA077F2AB65B7BDC9F704E15D8F7E4DE009
307129C041C4C3C2B8E7CDDA498623748FA6380541C130824BE562A26C449707
BC0ABED19F4F1ABEA27322584D473A1A8DF92ED73D5AECB9A0B0D0BCF4999F37
80DD65EE0692022C3FF068007B7E87BD9D405F2E29BF660674457A70FD1AED5A
9BD114ECEAE9E2018FFE5B97E3F9B57EC471159B98EE81FC98ADD44640348F5C
7C91A449496A33F2A8E38198D0BEA2FCD4557D0D226934EECFDDC7D0B0B719F3
2278C79FFE0303AF1B0861C65D9EE861F61D009037EBBDE16BEAB2EF6A77F16B
BB6E90FDD676A2215FF11CEF990C4372C8C7D6DD63223EFCD6ADC9787F304E23
4BB5406EC73E9A614D62680D7B7B512A180CE09296882E24877F78FDCBD1529B
DC6DA3B5973D236A4B73710FD60F3B0CE4D511FB2E2E44C8254A23E32FC62646
40052629C36F1608E534EA5FFF06387DFD9185BD17E8FB9E2CE8B3FB059814C1
23CA62478537A6492B618815B78A2CE541EFCE559E0A108282ACB06F53D5E9AB
73CAB5CB63EAAAAFC3D114E7F327220DC330236F7133F753DEF4267CCEB050C3
949FF9CB12318EA04A8367415688AF663ADB774CB660AEDE4A1E715E3063D806
EB82C36934BDEE62E99B2FE51E99DEC48FF875F36FF8453525F3585D54BBF852
23BA6083B0267E52474998E3E6319EBAB3D1D4F44B243675483D668221C3D21B
072AA0B8373C97DDBFD7445BA1A5C28E3975893E1B15A653F05FDA97C15FF191
604E053946F4BAD3A827D42FFA01150302010956C520A7F55B5FD72B3BD2EDD0
3D137866473DDD942178D252686B8725AB5C99E22D9F51DAEDF587B8EA3C68C9
0AFA2D144BFC96DBE5A9ABF30E5D02753263E89A0CC83FB6A1F179BD7CD3F9F7
20E758D344A4CFB4F15A942D04E4C034336530C19C1008E363144F18651E39EC
D39E1A3560CBCF67B8C7C68077AEF5B99469678E59961827750F0E8BEA53632F
44B7F43E42198799B15264D171324ABDD969D2603DD233F06C09FDA035C28F93
C1F6BFB7FAEEBCCBA265C3259B9635B7CE630194962E4183C3838D9401260A74
32E8BDCDE2E2B35C58847F36B887EED1D629B477018D5709409CD1F0FAA25894
2085741EE832FAB1F7ED83D155915D70DB907B2A19150135B79C455291553EFA
10D2AEA62245618882C233355671AC35DC5B2B886C4663E742EB353D9C5E5AF6
2AB7BC7DB94F56A0800FAE7F4A952FFC440AEE8D2E2DBB374BA8B0C30D5E782C
9B7DB4551875D85B16F2BA8BC75D30E26CCE6AA5DEB885D397C845F5D28F5439
374C40C301C201A9B3E65AA5E0D2302659580A82EB015A9DDA5BAC7801BFFA17
B114F8A83113BE9D0EAD743C4799CE0BC72A11661C8FFBC3D41290A8F8C491F1
094245139346C89EE57EB5E1CB6EBB50D62D91FD7852434F46801D6CFEB3549F
B3C1C7B23AC108144549B4B91720D5FD1EC1C2840ED552777E6B94E3E1F1B36A
7A8DD354E72ABBB3F46055D119DE9BDE6FCA6814E61656B6530DA41C2A680473
0DD914462E3E70E24BD8D345F58AC350B5FD8ED73B010FA3298DAFB7983BF339
540A8D8280F3576CDCD4F2140E5B70CA2C41241AFBBFB78BD0350802A376A13F
F97847BDE9A005B74CCE262CBCF25F26F536045F32D673685A677DD27BC6EFCF
E3B05FE61A64BF5B7C8B0B30F96DE8440B8B6C0A4A50043A59F3B636DFD7BD5A
AB0DE33EDB55D958E1FE80BCA50544E5D07AEBB4D657340B37288CA08255BCDF
D9CA2916B54B0A1F4B3E21ED78D546FDA83928B3BE98031AEBE6894AD20C707F
C8B78F0BD6F297DCD3779B48A23BA00CA211D4684B71E3A8611EAC664000A463
5AD1B4BB6FE307C63F7EE74FB86823E6F1E40C7FAFDE5C8CDBA5644BCEA126ED
773BB02ECFA4F3D09D178C737025193E2ABFC8962C812052F68E59B9584224CD
65C6361095861A84EA1B7A991DDC0D68396D9F990892C2D7E95B159A68B1967C
A98D2A881AD9AE67DA3476CCE84832BDA1B6BB5244DF4DCD65AB1C1E9943BA3B
D8048F7A4B4A79C9F2E7FC0A2EEF1BAD4941040C79348A88CC361FF06E681E91
37CFDBE0366C8D2C5E427EACF18C38463A23BF772D17C43DA0B3D52D76D9044B
BBFDB6FCEBC5799B4807519B038B56F26A59DA0604A7705EDC2FD998E405A987
C4205CAD91AB441DD76339414166ABE1553D2FAF26EF405C4D00E4DD9F83370A
2CF17EFCCF2D33E5E2C360DA0D71C5E046C9A49A2FE89FE342C8C0F00248BE45
9F80EF067A8069A068E7AF13A73A6C0DF3FC71E71DDFD7EB126901EF35FB6F71
300BBF376DA056D041B5F2C74A612BD655B38DF603DB446FF21CE71E9D4875A7
53BEC3BF97265F7C2DB58B320496C6200C6AAED5FB232390D7239C22534FEE64
4AE96C571E87BD50AD842C43F9E09915AA76E99B648B685B409A7429CEB305D9
C4587AC495570DF9C4F05525921AFF53DE3416B0C66AD360E7DF52207A6354FF
9DC9C20C6CE351BDE351F91924855405F02213933F1C51AF2CA7A39AE76498A8
62688C68859734B232A7300F862C94584BC25BDA2E3F3F1987879C5EA8147E38
CD271718777C47E446365CA9ADE8D72A64F33654C95BCA9E0593E72F28EFC54D
EA2A1E4711A6644AE7798261CED9C08A63016F79C7D0E0167217584962B260CB
91C49ED9EB1F8147786820BC835A9157CB39A2312BBA95428FA4EE61D0B68FB7
16237FF745E42FF10F3D917B6DC7F6AEE22D1892CF2D5337581A05B27B4C0C0D
E873FFCFEEE3F93284581CD708A692D0F738EBC5A8EE30CEBBFA93D2D5ECA280
5BDD81B248DC4E0507B97A018548215773C0D21882DCCBB1F74559B6E2454178
51952A7D629C80E8D82ECB79DE3D2D5E0BAD4BE963861C5D2B6CB588E62804DA
4A39C1EA340E6E55C23FC875CB132EE89817433A4A9F9F19726277ED18E14474
30576C93E4321F75C42A86C70CC8E4AE8F6F84FC653EAE281B624AD3ADB75770
688524E0B4D3151C5E51D640C747FC89D0B39126E6179FF4C5DD40AC274F3072
B651C69C6FE5384662B1CEBCE890D038C519BBC0C2707BEB48FDE8A259E1B079
468F08130FF077F66ACC0449643C295B29CA51B4AA746B4C7A1B45353771645C
01C2E1A15A86DD0A907577C8B8DE4E695034A0AFD7D67EE734572044AB08DDCB
2B8859C0182472B9F02BCB9532323C4D302831A46667C09BF321D3C6E1B19B20
AC9A3E1BA1D49D6918091330642BCD4D19F6D700596C619B7F6F94B012647655
90EB93BBD673CB8364988FD3CF24FEDE2EC799CB3054AF7280FDEE3E46DD584F
04936B53C3C81CD9E76F7E11AA83117A60C776F97ECFF9F3D51132BF272B9424
74F4808EE242A5FBFCD3D7D972F73890B2533C4974AE8E51FBD0721D1A90B763
3CB21449E35BCDB4FB7E10786100A6AB0D63050DAFEF2B2B970EA384CB6EA25D
04E4DDD603C91AF6BEB934EA33023152C25C27C3C771B5531277A8043A2240FC
CFA6434B1639A763B4DEEE7EFB151F13759EE22D9F51DAEDF5873816653E5215
E436CFC6EB4D2258715A1599CD916AE4DA13B77932132FBD3B8F4A8D95DA6F09
568FD192E619591F4674B74BF4CA9EE6F55BB6CA9944962E09541FBB7A00956D
1ACA7D8C2353C0D75B123B7FBD24DFE37E306818D06A0B4EF2F9A8AC2B8B7A56
ACF76DE55758C98B755BFE0F87095662704EA87224D34E87E4F457FC7B8E0A12
CE97781A06B58C3EF3CFEB1FB311A759FE260C1E6EACFA52E8B820C806EBE74A
9C013A94B97579D351D721EFCA97266AFC4EFE30F37C9753B42049F346380A35
F2089461FA16890D555D0BED4B2C47C9E507F3282FBD398422F52D00277A4A6A
50F1E772CB613913ACFDF4A3EA14D0CD05B8E3BD4516B31DBBF3C8FD15AFD92A
1AA676E0556F4559815D1E19206D2BB2512BDA1643003BD2772FEE24424EEC3F
D2FE30AB5B0DA63717FF25B01DC6224C90015336B769627AB3C7D59B4B3B3491
46BEAF3D1EE8E16EA3BAB1899BA213802E88D4DD689691C3CEB6830C394E6242
3AAE1A8F2CCC94A9A8CE55FE8C210376E7BA3F17BDDA62D7437E928A00AD2225
94D963206BE3499130D31AD2C9F80D713A1E0DD77AC247E7D6A233A1D858D373
297150A1BD80E2F59703684642123D725D52F749BCB844D18E63111A46B5805B
6CDCF8A26EEC860642BCC04E751BE43B5B63D25A40A74F4B80BD759A945B5563
75C11B5C0A21B00F5BBAB5AD5274BC09F9996339E53B59DF689B91C9E21BD28A
6806C529A5EF521EA71BA056E8185CCFA0A1DAD318A82BC7FBEC247D35A31AF4
8B51171E3AC03EA8DC9195389353D977BF553CC32E103B9E268BA214B7CE9E85
DF089815EBE893E07DA700C5AF108844F7F7C775910212B0419DB08D9FA22A0D
C3112E783271BA8DFC6B7C7AE18AA382701140476B1B5B32C05DE32100B9C272
7796F7527105A526481C611D9A06D7AFF5E13381B35EFE1469561EA98DE8EECF
ADFD56E08DBF4873D178D20A0F9D4875A753BEC3BF9797CAA0ACC3764A792978
B59E0910596F48FD63BFC50FF0B3D86FDB255FBB2FCD2970D3AF41565A8EA568
601C48C7CD1DBB360A13C10BCC4CA28D15DB668AB4416C5B1CDCA16641A4F95B
D66F795EAB31D4F90242B318985AA356E0CA25A29EDAC79969493C5B9C72A034
D86FD1B0EDB622A5C1DE048947A0D17AC36A4365630EE03681A624C86DC38F06
9372D33617C7FD7E6FE51DED85FF2F8579823787840F0D93133DD2DC588246CA
D052B0445B1F195822CF4594BB225D423ADEA47F6A0ECE55DA39F002CA369B1B
832D42950265DF74E288E24320C1FF4CA96B86DF650C51B38C73B73E40F19B58
C3472EAD6AE21C458468B0E9844F4187ACDBFCF79480D544E8C4C2274C27BF54
1334F8B7EADDCDD2B8A527A87086EA10A597E1C322435CA68555C5F260ED9321
8E0114311C619F65118904A06FD3ADF82A4362A450B69D52F59EF3CE7B9EEFAC
5478F34464B7C0F88C510BE7015BB937E8118991262FE013118127674FF21FB7
FBD231E41BE39C3B295C82AE63E1622FEA5CA997CB5D969EBD033D65B84FB536
44020E87E626AABC97E2BB6B07A9ADD088D69AB6F539560F9E119827B1B0B867
4740CB79F0E34B661093C976E71D9214BE08D4526802CBE6BAC85FB57BA1F9DE
31CCA08CA4892D103A1F8A72103F8C15FA2CA2BA1E0C5365830F57C343DC8646
34B1482372B2C20ED895475F2B467CB6879C8115EC3E3AC68F0E4D55CA637476
B58341364B40CEF4D858D250E313FE227564307F56C0A78B8753004037E0B225
B829040A792447027137907D956B4EBBECD14045CDAD799C1604CD47B8B8D146
DFB88DFCC90731E2045B7882129B0F8187032331746F69BBFF416EE89002DBD0
76CA56CC1A57D71C32C9B8909578414D32CEBF57DEDF154C5491BF3C31F0B634
0B818EDD09B71E31625B095EA8C2958F4C9EB396836F55E6A45919147678E3A7
A97C3BAE0BF2868F2E7A9B7E7BC599ABEBBC0458CAA879B82E15C2C5226D557B
DBEB8F73E5404640B65D84F597D3B64D079A3BA813E7279AC734930A39323111
3D94D99D0C1D1FA95CBAF4BBBB6F47F397F5928F9AD6CAD02AC5BF4C0FD72643
EF08AB60347EDB2D92B76B0E68481F948FAB9A130DFCF2880D54A722D3472B22
EE6EB244635043C219C63102B9C918CE7B17359DB6480B1A941EC35BE8786518
4F7B0295EA46C87A3A29C64BB4F9C870D694B02E401DD5364D9DB66FE4BDD1BE
CB4F0858E446DBDC1A22D252CD8E7F110BC28533B899FB5B8DFD9CFBB246A971
A09332E1B017EFF53805A24DC7D55C22B2ECD7D2CCD95A5E340B8A237339391B
666BEB5FCF5EFE9727C0058D1F96CA339DD428F23DA66933054518026C067DCA
34DE8B2261B698C838668E486B1D486EAF412AD400ED8C751E0D63127E79F785
7D6B983693CEF64558945D0E610ABF867F5BF00EB540939E3984FED85DE6959D
86E97DAF48DB97BC4192F7582D010BC54BB2C3AA32CAC88DEF1E663B684C3FBF
BA5EA0DBDB9E241B92B77541F01E76C703B909436787C89FBA9599BC1C52B009
178370678A2968FE03CE595B96060F26F1659F2004DBA70273A37DC55CB61D0A
44AED1CFB4DD19EE28651DB111F2F0ADF9E58043AB1486A5FB7FF81346990423
5C1C3127C03B4C7A64D9247B3D4060BE537E91FF6A106A3F245B88282D71113C
43E1AAB2118AD4E52B6EFDED39A68FB45EBCD781920B63A719B01E653B9CE7A8
6A6666537B70AB3E5503D8F9404D96ADE43F6295502A7BF2B94F07B0749D9C0B
470C99771B95DB671D4BE8E5A6BC074BC0E7841D992FB18ACF59389E223EC2BD
77DEC70B442DC957ACD90CD0FD45FE7B7FCE05839854206F17C6C70FBEAFD717
BB1963841B741A2D1F9335294B53FA991862BE3ED63FBB3154A31C1D642C35EC
EC6D8523FCE8FB4BBD072EBBDBC4E4EDB4846DA753000BF8AC5A6D7E2A873B5E
B6DC81FB71CA1F3E42C62319A107CB259B302F33D46EB97DE44C27A7DC9E63BC
E14454D49CE921742A12D1AE200D20F569690D40DB0EFA70CF0B54077E84B764
969CA53BBB03EB0EF12A70EA2E07239927E9C0A25A31DBC872DEDA90B79F11F7
03AFED969A18FA779C17005531E12AE359EBE16F01DF05AB584287BDB758DE31
FB00C560AE3265AB8363DAB799856FDD0D4EF693CD5CEEC4E33FEB50AB0ED28B
021B53FD110CCC126D530C543CD2262AEABA2F1B4DFBAA2DED2A63689D7F6940
AC73A2DB6CE3FCB50A47C05D633B6B531686929DB53BCE7CA671A9C9413C4D6A
D79EE7ADDEE2A72866497F071795D82520399686B5057BF3D90F96C1B96D87A2
EF8CCAE1564F2D8325118FAC0F8D7BC6929BA2A7AD4B3BB36E12C464932ED946
DB7DA38BCF48A403F6B1C0C5EE04C974EAD5B97E407659EF3988A448FB7CB2B5
6CD4E703914230711C9BF715424FBB02C48E9C465727EF89D28D23A8E424B0ED
79E36674A603FF938F6A462B70228EDC2EDD2FC07BA54EFE020925A10DA5FB62

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra un)
@start /Fa 141[499 33[711 844 39[724 39[{ enclmmathit ReEncodeFont }4
1106.96 /LMMathItalic10-Regular rf /Fb 205[406 406 49[{
 enclmrm ReEncodeFont }2 664.176 /LMRoman6-Regular rf
/Fc 141[425 9[542 26[904 51[540 11[485 528 12[{
 enclmmathit ReEncodeFont }6 885.568 /LMMathItalic8-Regular
rf /Fd 202[470 470 470 470 470 49[{ enclmrm ReEncodeFont }5
885.568 /LMRoman8-Regular rf /Fe 149[369 55[886 8[1328
15[1033 24[1033{ enclmmathsy ReEncodeFont }5 1328.35
/LMMathSymbols10-Regular rf /Ff 184[869 5[830 12[553
1[553 3[307 46[{ enclmec ReEncodeFont }5 1106.96 /LMRoman10-Regular
rf /Fg 160[909 45[606 1[606 47[{ enclmec ReEncodeFont }3
1212.12 /LMRoman10-Regular rf /Fh 203[993 52[{}1 1328.35
/wasy10 rf /Fi 134[634 739 4[613 586 2[625 776 1138 1[676
1[444 749 4[560 18[838 994 16[1012 1[1012 361 19[852
8[770 16[675 734 827 11[{ enclmmathit ReEncodeFont }21
1328.35 /LMMathItalic12-Regular rf /Fj 241[470 12[261
1[{ enclmmathsy ReEncodeFont }2 885.568 /LMMathSymbols8-Regular
rf /Fk 139[506 513 3[650 723 4[361 5[578 1[650 3[361
1[361 29[1012 1[361 1[650 650 650 650 650 650 650 650
650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }24
1328.35 /LMRoman12-Regular rf /Fl 650 2[723 5[650 17[650
105[578 686 686 939 686 723 506 513 506 2[650 723 1084
361 686 1[361 723 650 397 578 723 578 723 650 6[795 2[1336
2[939 723 957 1[885 1[975 1192 813 1011 1[469 1[1021
849 885 993 1[921 975 5[361 361 650 650 650 650 650 650
650 650 650 650 1[361 434 361 2[506 506 6[361 3[723 10[613
1[613 16[{ enclmec ReEncodeFont }65 1328.35 /LMRoman12-Regular
rf /Fm 136[1554 1[1196 837 849 879 1[1196 1076 1196 1793
598 1136 1[598 1196 1[658 982 1196 1[1196 1046 9[2223
2[1497 1196 2[1470 1616 1682 2041 1[1685 1[801 1682 1691
1353 1412 1649 1554 1530 1625 7[1076 1076 1076 1076 1076
1076 1076 1076 1076 1076 1076 598 717 45[{ enclmec ReEncodeFont }48
1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(A)-60
b(G)718 b(4.2)f(-)h(1)f(Sin)-60 b(us)716 b(und)g(Cosin)-60
b(usw)g(erte)716 b(-)h(MC)h(-)g(MK)p 0 TeXcolorgray -741
4800 a Fl(1.)p 0 TeXcolorgray 651 w(Kreuze)433 b(die)h(ric)-36
b(h)g(tige\(n\))433 b(A)-36 b(ussage\(n\))433 b(an!)p
16607 5841 13171 45 v 16607 9059 45 3219 v 17315 7782
a Fk(sin)6 b(\(214)21374 7300 y Fj(\016)21901 7782 y
Fk(\))369 b Fi(>)f Fk(0)p 27368 9059 V 29733 9059 V 16607
9103 13171 45 v 16607 12321 45 3219 v 17315 11045 a(cos)q(\(169)21513
10562 y Fj(\016)22039 11045 y Fk(\))h Fi(<)g Fk(0)p 27368
12321 V 1 0 0 TeXcolorrgb 3131 w Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 29733 12321 V 16607
12366 13171 45 v 16607 15584 45 3219 v 17315 14307 a
Fk(sin)6 b(\(370)21374 13825 y Fj(\016)21901 14307 y
Fk(\))369 b Fi(>)f Fk(1)p 27368 15584 V 29733 15584 V
16607 15628 13171 45 v 16607 18846 45 3219 v 17315 17569
a(cos)q(\(270)21513 17087 y Fj(\016)22039 17569 y Fk(\))h(=)g(0)p
27368 18846 V 1 0 0 TeXcolorrgb 3131 w Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 29733 18846 V 16607
18891 13171 45 v 16607 22109 45 3219 v 17315 20832 a
Fk(sin)6 b(\(350)21374 20350 y Fj(\016)21901 20832 y
Fk(\))369 b(=)f(1)434 b Fl(L6)p 27368 22109 V 29733 22109
V 16607 22153 13171 45 v 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 47990 6792 a Ff(A)-31 b(G)369 b(4.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 26181
54804 45 v -2331 31483 a Fm(A)-60 b(G)718 b(4.2)f(-)h(2)f(Sin)-60
b(usw)g(erte)716 b(-)h(O)-60 b(A)718 b(-)g(MK)p 0 TeXcolorgray
-741 34790 a Fl(2.)p 0 TeXcolorgray 651 w(F)-27 b(\374r)433
b(w)-36 b(elc)g(he)433 b Fi(\036)369 b Fe(2)g Fk([)8
b(0)10936 34308 y Fj(\016)11462 34790 y Fk(;)221 b(360)13994
34308 y Fj(\016)14521 34790 y Fk(\))434 b Fl(gilt)g(folgendes:)p
0 TeXcolorgray 0 TeXcolorgray 20533 38774 a Fk(sin)6
b(\()p Fi(\036)p Fk(\))368 b Fi(<)h Fk(0)p 1 0 0 TeXcolorrgb
769 42759 a Fl(\(180)3225 42277 y Fj(\016)3751 42759
y Fl(;360)6062 42277 y Fj(\016)6590 42759 y Fl(\))p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 34790
a Fg(___/1)p 1 0 0 TeXcolorrgb 47990 36782 a Ff(A)-31
b(G)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 46566 V 0 TeXcolorgray 24746 81281
a Fl(1)p 0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(4.2)f(-)h(3)f(Cosin)-60
b(us)716 b(im)i(Einheitskreis)d(-)i(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(3.)p 0 TeXcolorgray 651
w(Zeic)-36 b(hne)416 b(im)g(Einheitskreis)h(alle)g(Wink)-36
b(el)418 b(aus)e Fk([)8 b(0)25324 4318 y Fj(\016)25850
4800 y Fk(;)221 b(360)28382 4318 y Fj(\016)28910 4800
y Fk(])416 b Fl(ein,)h(f\374r)f(die)h Fi(cos)p Fk(\()p
Fi(\014)74 b Fk(\))368 b(=)g(0)p Fi(;)p Fk(4)418 b Fl(gilt!)873
6792 y(A)-36 b(c)g(h)g(te)433 b(auf)g(die)h(Kennzeic)-36
b(hn)g(ung)432 b(der)h(Wink)-36 b(el)435 b(durc)-36 b(h)432
b(Wink)-36 b(elb)36 b(\366gen.)921 52743 y
 currentpoint currentpoint translate 0.56125 0.56125 scale neg exch
neg exch translate
 921 52743
a 921 52743 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 723.9225 a add def
/d 0.0 a add neg def /h 692.70595 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 52743 a 42264 14594 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -341.43292 T 25
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -369.88567 0.0 T 26
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 350.43901
 0 -373.48349  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -373.48349  350.43901  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -344.6322  def /maxTickline
348.07375  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 348.07375
 0 -344.6322  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -344.6322  348.07375  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -373.48349  def /maxTickline
350.43901  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 284.52744
0 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 42264 14594 a
tx@Dict begin  { 13.00508 303.47914 } PutCoor PutBegin  end

42264 14594 a 836 x Fl(1)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a
42264 14594 a
tx@Dict begin  { 289.49286 -10.17093 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(1)42264 14594 y
tx@Dict begin  PutEnd  end

42264 14594 a 42264 14594 a
tx@Dict begin  { 7.05891 -288.0176 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(-1)42264
14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { -312.53734 18.0721 } PutCoor PutBegin  end
 42264 14594 a 836
x Fl(-1)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { 11.51854 151.85678 } PutCoor PutBegin  end
 42264
14594 a 836 x Fl(0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264
14594 a
tx@Dict begin  { 127.46469 -13.14401 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264
14594 a 42264 14594 a
tx@Dict begin  { 15.97774 -132.06369 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(-0,5)42264
14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { -166.86073 -10.17093 } PutCoor PutBegin  end
 42264 14594 a 836
x Fl(-0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 260.77354 113.81097 -260.77354
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  6.0  6.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 260.77354 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 -260.77354 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 1.1592794807274085 def
/dt t1 t sub 49 div def /F@pstplot (1.*3.*cos(t)+0.*3.*sin(t)+0.|0.*3.*cos(t)+1.*3.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 5.1239058264521775 def
/dt t1 t sub 49 div def /F@pstplot (1.*4.*cos(t)+0.*4.*sin(t)+0.|0.*4.*cos(t)+1.*4.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1 0 0 TeXcolorrgb 0 TeXcolorgray
81056 52743 a
currentpoint initclip moveto
 81056 52743 a 921 52743 a
 currentpoint currentpoint translate 1 0.56125 div 1 0.56125 div scale
neg exch neg exch translate
 921 52743 a 47992
4800 a Fg(___/1)p 1 0 0 TeXcolorrgb 47990 6792 a Ff(A)-31
b(G)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 54779 54804 45 v 0 TeXcolorgray 24746
81281 a Fl(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(4.2)f(-)h(4)f(Sin)-60
b(us)716 b(im)h(Einheitskreis)e(-)j(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(4.)p 0 TeXcolorgray 651
w(Zeic)-36 b(hne)539 b(im)g(Einheitskreis)h(alle)g(Wink)-36
b(el)540 b(aus)f Fk([)8 b(0)26061 4318 y Fj(\016)26588
4800 y Fk(;)221 b(360)29120 4318 y Fj(\016)29647 4800
y Fk(])540 b Fl(ein,)f(f\374r)g(die)h Fi(sin)p Fk(\()p
Fi(\013)8 b Fk(\))549 b(=)f Fe(\000)p Fk(0)p Fi(;)p Fk(7)921
6792 y Fl(gilt!)435 b(A)-36 b(c)g(h)g(te)432 b(auf)i(die)g(Kennzeic)-36
b(hn)g(ung)432 b(der)h(Wink)-36 b(el)434 b(durc)-36 b(h)433
b(Wink)-36 b(elb)36 b(\366gen.)921 52743 y
 currentpoint currentpoint translate 0.56125 0.56125 scale neg exch
neg exch translate
 921 52743
a 921 52743 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 723.9225 a add def
/d 0.0 a add neg def /h 692.70595 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 52743 a 42264 14594 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -341.43292 T 25
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -369.88567 0.0 T 26
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 350.43901
 0 -373.48349  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -373.48349  350.43901  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -344.6322  def /maxTickline
348.07375  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 348.07375
 0 -344.6322  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -344.6322  348.07375  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -373.48349  def /maxTickline
350.43901  def /dT 1864679 abs 65536 div viceversa { neg } if def /DT
1. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 348.07375 0.0 -344.6322   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 350.43901 0.0 -373.48349 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 284.52744
0 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 42264 14594 a
tx@Dict begin  { 13.00508 303.47914 } PutCoor PutBegin  end

42264 14594 a 836 x Fl(1)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a
42264 14594 a
tx@Dict begin  { 289.49286 -10.17093 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(1)42264 14594 y
tx@Dict begin  PutEnd  end

42264 14594 a 42264 14594 a
tx@Dict begin  { 7.05891 -288.0176 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(-1)42264
14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { -312.53734 18.0721 } PutCoor PutBegin  end
 42264 14594 a 836
x Fl(-1)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { 11.51854 151.85678 } PutCoor PutBegin  end
 42264
14594 a 836 x Fl(0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264
14594 a
tx@Dict begin  { 127.46469 -13.14401 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264
14594 a 42264 14594 a
tx@Dict begin  { 15.97774 -132.06369 } PutCoor PutBegin  end
 42264 14594 a 836 x Fl(-0,5)42264
14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 42264 14594 a
tx@Dict begin  { -166.86073 -10.17093 } PutCoor PutBegin  end
 42264 14594 a 836
x Fl(-0,5)42264 14594 y
tx@Dict begin  PutEnd  end
 42264 14594 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 -199.1692 -199.1692 -199.1692
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  6.0  6.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -199.1692 -199.1692 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 199.1692 -199.1692 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 5.5 def /dt t1 t sub
49 div def /F@pstplot (1.*3.*cos(t)+0.*3.*sin(t)+0.|0.*3.*cos(t)+1.*3.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 3.94 def /dt t1 t sub
49 div def /F@pstplot (1.*4.*cos(t)+0.*4.*sin(t)+0.|0.*4.*cos(t)+1.*4.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 1 0 0 TeXcolorrgb 0 TeXcolorgray
81056 52743 a
currentpoint initclip moveto
 81056 52743 a 921 52743 a
 currentpoint currentpoint translate 1 0.56125 div 1 0.56125 div scale
neg exch neg exch translate
 921 52743 a 47992
4800 a Fg(___/1)p 1 0 0 TeXcolorrgb 47990 6792 a Ff(A)-31
b(G)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray -2331 54779 54804 45 v -2331 60081 a Fm(A)-60
b(G)718 b(4.2)f(-)h(5)f(Wink)-60 b(elfunktionen)713 b(-)k(O)-60
b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 63388 a Fl(5.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(das)f(In)-36
b(terv)-72 b(all)434 b Fk([)8 b(0)16559 62906 y Fj(\016)17085
63388 y Fk(;)221 b(360)19617 62906 y Fj(\016)20145 63388
y Fk(])p Fl(.)921 65934 y(Nenne)433 b(alle)h(Wink)-36
b(el)435 b Fi(\013)442 b Fl(im)434 b(gegeb)36 b(enen)433
b(In)-36 b(terv)-72 b(all,)435 b(f\374r)e(die)h(gilt:)h
Fi(sin)p Fk(\()p Fi(\013)8 b Fk(\))369 b(=)f Fi(cos)p
Fk(\()p Fi(\013)8 b Fk(\))p Fl(.)p 1 0 0 TeXcolorrgb
921 70471 a Fi(\013)1748 70670 y Fd(1)2643 70471 y Fk(=)369
b(45)5324 69989 y Fj(\016)6284 70471 y Fl(o)36 b(der)433
b Fi(\013)10037 70670 y Fd(1)10932 70471 y Fk(=)12446
69948 y Fc(\031)p 12446 70161 573 45 v 12497 70929 a
Fd(4)921 75008 y Fi(\013)1748 75207 y Fd(2)2643 75008
y Fk(=)369 b(225)5974 74526 y Fj(\016)6934 75008 y Fl(o)36
b(der)434 b Fi(\013)10688 75207 y Fd(2)11583 75008 y
Fk(=)13096 74485 y Fd(5)p Fj(\001)p Fc(\031)p 13096 74698
1304 45 v 13513 75466 a Fd(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 63388 a Fg(___/1)p 1 0 0
TeXcolorrgb 47990 65380 a Ff(A)-31 b(G)369 b(4.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24746 81281 a Fl(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fm(A)-60
b(G)718 b(4.2)f(-)h(6)f(Dennis)f(Tito)h(-)g(O)-60 b(A)718
b(-)g(BIFIE)p 0 TeXcolorgray -741 10102 a Fl(6.)p 0 TeXcolorgray
651 w(Dennis)531 b(Tito,)h(der)f(2001)h(als)g(erster)e(W)-108
b(eltraum)-36 b(tourist)530 b(un)-36 b(terw)g(egs)531
b(w)-36 b(ar,)532 b(sah)f(die)g(Erd-)921 12094 y(ob)36
b(er\035\344c)-36 b(he)433 b(un)-36 b(ter)432 b(einem)i(Seh)-36
b(wink)g(el)434 b(v)-36 b(on)433 b Fk(142)24693 11612
y Fj(\016)25220 12094 y Fl(.)p 0 TeXcolorgray 0 TeXcolorgray
12441 33390 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 198.15761 a add def
/d 0.0 a add neg def /h 173.3878 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12441 33390 a 20506 33337 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 28.45274 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t -1.5707963267948966
def /t1 -0.6806784082777886 def /dt t1 t sub 49 div def /F@pstplot
(0.46636861226503457*cos(t)+1.|0.46636861226503457*sin(t)+5.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul exch 28.45274
mul exch } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit
{ exit } if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if     28.45274 142.26372 lineto closepath gsave 0 0.39215
0  setrgbcolor  0.1 .setopacityalpha  fill  grestore gsave 0.8 SLW
0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 116.9004 70.63995 28.45274 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -59.99492 70.63995 28.45274 142.26372
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 50.98969 150.7931 32.85463 133.54285
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 142.26372 28.45274 116.92603
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.7698 95.84914 28.45274 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 28.45274 -27.20932 97.18936
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.3945323246430148 def /t1 2.6865242036312766
def /dt t1 t sub 49 div def /F@pstplot (1.*3.109485010682683*cos(t)+0.*3.109485010682683*sin(t)+1.|0.*3.109485010682683*cos(t)+1.*3.109485010682683*sin(t)+1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t 2.4609142453120048
def /t1 4.031710572106901 def /dt t1 t sub 49 div def /F@pstplot (0.46636861226503457*cos(t)+3.0144696775797484|0.46636861226503457*sin(t)+3.368714619740426)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     85.7698 95.84914 lineto closepath
gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.39215 0  setrgbcolor   0 360 0.8848
0.8848 78.00713 95.03336  0 true Ellipse  closepath  gsave 0 0.39215
0  setrgbcolor  0.1 .setopacityalpha  fill  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0.39215 0  setrgbcolor   0.8
SLW 0 0.39215 0  setrgbcolor  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def   /t -0.890117918517108
def /t1 0.6806784082777886 def /dt t1 t sub 49 div def /F@pstplot (0.46636861226503457*cos(t)+-0.9562952014676114|0.46636861226503457*sin(t)+3.4158233816355184)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy /lineto load stopped
{ moveto } if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul
gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  ps@Exit { exit } if } repeat ps@Exit not { /t t1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if     -27.20932 97.18936 lineto
closepath gsave 0 0.39215 0  setrgbcolor  0.1 .setopacityalpha  fill
 grestore gsave 0.8 SLW 0 0.39215 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.39215 0  setrgbcolor   0 360 0.8848
0.8848 -19.4462 96.3736  0 true Ellipse  closepath  gsave 0 0.39215
0  setrgbcolor  0.1 .setopacityalpha  fill  grestore end
 
@endspecial 20506 33337 a
tx@Dict begin  { 54.08565 164.9474 } PutCoor PutBegin  end
 20506 33337 a
887 x Fk(71)21806 33742 y Fj(\016)20506 33337 y
tx@Dict begin  PutEnd  end
 20506
33337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.2 0 0  setrgbcolor  [ 28.45274
142.26372   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.2 0 0  setrgbcolor  [ 28.45274
28.45274   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20506 33337 a
tx@Dict begin  { 25.77748 17.65619 } PutCoor PutBegin  end
 20506 33337 a
0.2 0 0 TeXcolorrgb Fc(M)p 0 TeXcolorgray 20506 33337
a
tx@Dict begin  PutEnd  end
 20506 33337 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 28.45274 116.92603
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
20506 33337 a
tx@Dict begin  { 22.23912 123.36975 } PutCoor PutBegin  end
 20506 33337 a Fc(h)20506 33337 y
tx@Dict begin  PutEnd  end
 20506
33337 a 20506 33337 a
tx@Dict begin  { 62.48958 57.90707 } PutCoor PutBegin  end
 20506 33337 a Fc(r)20506 33337
y
tx@Dict begin  PutEnd  end
 20506 33337 a 34376 33390 a
currentpoint initclip moveto
 34376 33390 a 921 37375
a Fl(Berec)-36 b(hne,)486 b(wie)i(ho)36 b(c)-36 b(h)486
b Fk(\()p Fi(h)p Fk(\))h Fl(\374b)36 b(er)486 b(der)g(Erdob)36
b(er\035\344c)-36 b(he)486 b(sic)-36 b(h)486 b(Dennis)h(Tito)h(b)36
b(efand,)487 b(w)-36 b(enn)887 39367 y(v)g(ereinfac)g(h)g(t)580
b(die)f(Erde)g(als)h(Kugel)f(mit)h(einem)f(Radius)g Fi(r)654
b Fk(=)616 b(6)221 b(370)g Fi(k)45 b(m)581 b Fl(angenommen)874
41359 y(wird.)434 b(Gib)f(das)h(Ergebnis)f(auf)h(ganze)g(Kilometer)g
(gerundet)f(an!)p 1 0 0 TeXcolorrgb 921 45896 a Fi(sin)p
Fk(\(71)4560 45414 y Fj(\016)5086 45896 y Fk(\))369 b(=)8650
44997 y Fi(r)p 7474 45586 2974 45 v 7474 46807 a(r)332
b Fk(+)295 b Fi(h)921 49044 y(r)331 b Fk(+)295 b Fi(h)369
b Fk(=)7801 48146 y Fi(r)p 5776 48734 4671 45 v 5776
49955 a(sin)p Fk(\(71)9415 49572 y Fj(\016)9942 49955
y Fk(\))921 52422 y Fi(h)g Fk(=)5576 51524 y Fi(r)p 3552
52112 V 3552 53333 a(sin)p Fk(\(71)7191 52950 y Fj(\016)7717
53333 y Fk(\))8651 52422 y Fe(\000)295 b Fi(r)921 55252
y(h)369 b Fk(=)f(6)221 b(737)p Fi(;)p Fk(004)299 b Fe(\000)c
Fk(6)221 b(370)371 b(=)d(367)p Fi(;)p Fk(044)921 57798
y Fl(Dennis)462 b(Tito)h(b)36 b(efand)462 b(sic)-36 b(h)462
b(\(in)g(diesem)g(A)-36 b(ugen)g(blic)g(k)462 b(rund)f
Fk(367)221 b Fi(k)45 b(m)463 b Fl(\374b)36 b(er)461 b(der)h(Erdob)36
b(er-)921 59789 y(\035\344c)-36 b(he.)921 62335 y(L\366sungsin)g(terv)
-72 b(all:)434 b Fk([)8 b(367;)221 b(368])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 10102 a Fg(___/1)p
1 0 0 TeXcolorrgb 47990 12094 a Ff(A)-31 b(G)369 b(4.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
66142 54804 45 v 0 TeXcolorgray 24746 81281 a Fl(4)p
0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)526 b(4.2)e(-)i(7)f(Wink)-60
b(elfunktionen)520 b(im)525 b(Einheitskreis)e(-)i(O)-60
b(A)525 b(-)h(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(7.)p
0 TeXcolorgray 651 w(In)536 b(der)f(nac)-36 b(hstehenden)534
b(Abbildung)h(ist)h(ein)g(Wink)-36 b(elfunktionsw)g(ert)537
b(eines)f(Wink)-36 b(els)537 b Fi(\014)921 6792 y Fl(am)434
b(Einheitskreis)g(farbig)g(darestellt.)p 0 TeXcolorgray
0 TeXcolorgray 6738 41051 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 301.20503 a add def
/d 0.0 a add neg def /h 288.15001 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6738 41051 a 22241 24579
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 161.1542
 0 -140.05083  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -140.05083  161.1542  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -148.80685  def /maxTickline
139.34315  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 1 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 139.34315 0.0 -148.80685   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.1542 0.0 -140.05083 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 139.34315
 0 -148.80685  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -148.80685  139.34315  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -140.05083  def /maxTickline
161.1542  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 1 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 139.34315 0.0 -148.80685   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.1542 0.0 -140.05083 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
22241 24579 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22241 24579 a 22241 24579 a
tx@Dict begin  { 161.1542 139.34315 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22241 24579
a 22241 24579 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22241 24579 a 21898 24865 a Fl(x)22241
24579 y
tx@Dict begin  PutEnd  end
 22241 24579 a 22241 24579 a
tx@Dict begin  PutEnd  end
 22241 24579 a 22241
24579 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22241 24579 a 22241 24579 a
tx@Dict begin  { 0.0 0.0 pop 161.1542 139.34315 exch pop } PutCoor
PutBegin  end
 22241 24579 a 22241
24579 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 22241 24579 a 21898 24736 a Fl(y)22241 24579
y
tx@Dict begin  PutEnd  end
 22241 24579 a 22241 24579 a
tx@Dict begin  PutEnd  end
 22241 24579 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 113.81097
0 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -68.24646 -91.07864 -68.24646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0 1 0 0  setcmykcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
22241 24579 a
tx@Dict begin  { 17.54547 131.88307 } PutCoor PutBegin  end
 22241 24579 a 836 x Fl(1)22241 24579 y
tx@Dict begin  PutEnd  end

22241 24579 a 22241 24579 a
tx@Dict begin  { 123.8534 20.91278 } PutCoor PutBegin  end
 22241 24579 a 836 x Fl(1)22241
24579 y
tx@Dict begin  PutEnd  end
 22241 24579 a 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 68.24646 -91.07864 68.24646
0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq
not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add
dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1
ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0 1 0 0  setcmykcolor  1. .setopacityalpha   0 
setlinecap [  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 0.0 -68.24646 -91.07864   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 68.24646 -91.07864 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 4.069327012737334 def
/dt t1 t sub 49 div def /F@pstplot (1.*1.2065988408734556*cos(t)+0.*1.2065988408734556*sin(t)+0.|0.*1.2065988408734556*cos(t)+1.*1.2065988408734556*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 5.355450948032044 def
/dt t1 t sub 49 div def /F@pstplot (1.*2.9764210347210627*cos(t)+0.*2.9764210347210627*sin(t)+0.|0.*2.9764210347210627*cos(t)+1.*2.9764210347210627*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
22241 24579 a
tx@Dict begin  { -18.82275 8.78989 } PutCoor PutBegin  end
 22241 24579 a -172 x Fc(\014)22769 24530
y Fb(1)22241 24579 y
tx@Dict begin  PutEnd  end
 22241 24579 a 22241 24579 a
tx@Dict begin  { -56.12357 45.15813 } PutCoor PutBegin  end
 22241
24579 a -172 x Fc(\014)22769 24530 y Fb(2)22241 24579
y
tx@Dict begin  PutEnd  end
 22241 24579 a 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 40080 41051 a
currentpoint initclip moveto
 40080 41051 a 921 45035 a
Fl(Gib)310 b(an,)h(um)f(w)-36 b(elc)g(he)311 b(Wink)-36
b(elfunktion)312 b(es)f(sic)-36 b(h)311 b(dab)36 b(ei)310
b(handelt,)h(und)e(zeic)-36 b(hne)311 b(alle)g(Wink)-36
b(el)921 47027 y(im)308 b(Einheitskreis)g(ein,)g(die)g(diesen)f(Wink)
-36 b(elfunktionsw)g(ert)309 b(b)36 b(esitzen!)308 b(Kennzeic)-36
b(hne)307 b(diese)921 49019 y(durc)-36 b(h)432 b(Wink)-36
b(elb)36 b(\366gen!)p 1 0 0 TeXcolorrgb 921 51565 a Fi(sin)p
Fk(\()p Fi(\014)74 b Fk(\))p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 47990 6792 a Ff(A)-31 b(G)369 b(4.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 55372
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(4.2)f(-)h(8)f(Wink)-60
b(elfunktionsw)g(ert)713 b(-)718 b(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fl(8.)p 0 TeXcolorgray 651
w(In)543 b(der)f(nac)-36 b(hstehenden)541 b(Abbildung)g(ist)i(ein)g
(Wink)-36 b(elfunktionsw)g(ert)544 b(eines)f(Wink)-36
b(els)543 b Fi(\015)921 6792 y Fl(am)434 b(Einheitskreis)g(farbig)g
(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 6738 41051
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 301.20502 a add def
/d 0.0 a add neg def /h 288.15 a add def a neg d moveto a neg h L w
h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6738 41051 a 22344 25817 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 160.22163
 0 -140.98338  0 ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq false and exch 2
lt true and or { /viceversa -140.98338  160.22163  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -137.61652  def /maxTickline
150.53348  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ xStart } def /MaxValue { xEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke stroke} def /subLSstroke { 
0  setlinejoin 0  setlinecap stroke stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul  moveto cntsubTick maxTickline STsize mul  lineto
} { cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT
add def } repeat subTwidth SLW subTColor subLSstroke grestore } if
showOrigin { gsave false { cntTick minTickline  moveto cntTick maxTickline
 lineto } { cntTick tickstart  moveto cntTick tickend  lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for /dsubT
0 def subTwidth SLW subTColor subLSstroke grestore } dsubT abs 0 gt
{ gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart  moveto cntTick tickend 
lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true def
} ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 150.53348 0.0 -137.61652   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.22163 0.0 -140.98338 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { } def /ArrowInside { } def   /showOrigin true def 0 150.53348
 0 -137.61652  ArrowA CP 4 2 roll ArrowB 2 copy /yEnd exch def /xEnd
exch def gsave L  0  setlinejoin 0  setlinecap stroke  stroke grestore
/yStart exch def /xStart exch def 0 dup 2 mod 0 eq true and exch 2
lt false and or { /viceversa -137.61652  150.53348  gt { true }{ false
} ifelse def /epsilon 0.01 def /minTickline -140.98338  def /maxTickline
160.22163  def /dT 3729358 abs 65536 div viceversa { neg } if def /DT
2. abs viceversa { neg } if def /subTNo 2 def subTNo 0 gt { /dsubT
dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend exch def
/tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize 0.75
def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def /MinValue
{ yStart } def /MaxValue { yEnd } def /logLines { false } def /LSstroke
{  0  setlinejoin 0  setlinecap stroke  stroke} def /subLSstroke {
 0  setlinejoin 0  setlinecap stroke  stroke} def 0 dT MaxValue 1 add
{ /cntTick exch def logLines { gsave 1 1 DT { 1 sub /OffSet exch def
-10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MaxValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul exch moveto cntsubTick maxTickline
STsize mul exch lineto } { cntsubTick tickstart STsize mul exch moveto
cntsubTick tickend STsize mul exch lineto } ifelse }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave false { cntTick minTickline
exch moveto cntTick maxTickline exch lineto } { cntTick tickstart exch
moveto cntTick tickend exch lineto } ifelse Twidth SLW TColor LSstroke
grestore }{ /showOrigin true def } ifelse } for /showOrigin true def
/dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa
{ add }{ sub } ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi
{ 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MinValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 0.0 150.53348 0.0 -137.61652   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.22163 0.0 -140.98338 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 22344 25817 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22344 25817 a
22344 25817 a
tx@Dict begin  { 160.22163 150.53348 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22344 25817 a 22344 25817 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22344 25817
a 22001 26103 a Fl(x)22344 25817 y
tx@Dict begin  PutEnd  end
 22344 25817 a 22344
25817 a
tx@Dict begin  PutEnd  end
 22344 25817 a 22344 25817 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22344 25817 a 22344
25817 a
tx@Dict begin  { 0.0 0.0 pop 160.22163 150.53348 exch pop } PutCoor
PutBegin  end
 22344 25817 a 22344 25817 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 22344 25817 a 22001
25974 a Fl(y)22344 25817 y
tx@Dict begin  PutEnd  end
 22344 25817 a 22344 25817
a
tx@Dict begin  PutEnd  end
 22344 25817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray   0.0 0.0 2 copy moveto 113.81097
0 CLW mul sub dup 0 rmoveto 0 360 arc closepath  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
22344 25817 a
tx@Dict begin  { 17.54547 131.88307 } PutCoor PutBegin  end
 22344 25817 a 837 x Fl(1)22344 25817 y
tx@Dict begin  PutEnd  end

22344 25817 a 22344 25817 a
tx@Dict begin  { 123.8534 20.91278 } PutCoor PutBegin  end
 22344 25817 a 837 x Fl(1)22344
25817 y
tx@Dict begin  PutEnd  end
 22344 25817 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0 1 0 0  setcmykcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 72.56456 0.0 0.0 0.0
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0 1 0 0  setcmykcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.56456 87.67747 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.56456 -87.67747 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.56456 0.0 72.56456 87.67747   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.56456 -87.67747 72.56456 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  4.0  4.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 0.8794328293073885 def
/dt t1 t sub 49 div def /F@pstplot (1.*2.*cos(t)+0.*2.*sin(t)+0.|0.*2.*cos(t)+1.*2.*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def   /t 0.0 def /t1 5.403752477872198 def
/dt t1 t sub 49 div def /F@pstplot (1.*2.5503527287947896*cos(t)+0.*2.5503527287947896*sin(t)+0.|0.*2.5503527287947896*cos(t)+1.*2.5503527287947896*sin(t)+0.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul
exch 28.45274 mul exch } def  /ps@Exit false def xy moveto  49 1 sub
{ /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit { exit }
if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274 mul gt {
moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse
 } if     gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 0.0 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 72.56456 -87.67747
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 72.56456 87.67747
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 22344 25817 a
tx@Dict begin  { 32.46606 10.65501 } PutCoor PutBegin  end
 22344 25817 a
-172 x Fc(\015)22829 25768 y Fb(1)22344 25817 y
tx@Dict begin  PutEnd  end
 22344
25817 a 22344 25817 a
tx@Dict begin  { -48.6635 36.76549 } PutCoor PutBegin  end
 22344 25817 a -172 x Fc(\015)22829
25768 y Fb(2)22344 25817 y
tx@Dict begin  PutEnd  end
 22344 25817 a 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 40080 41051 a
currentpoint initclip moveto
 40080
41051 a 921 45035 a Fl(Gib)310 b(an,)h(um)f(w)-36 b(elc)g(he)311
b(Wink)-36 b(elfunktion)312 b(es)f(sic)-36 b(h)311 b(dab)36
b(ei)310 b(handelt,)h(und)e(zeic)-36 b(hne)311 b(alle)g(Wink)-36
b(el)921 47027 y(im)308 b(Einheitskreis)g(ein,)g(die)g(diesen)f(Wink)
-36 b(elfunktionsw)g(ert)309 b(b)36 b(esitzen!)308 b(Kennzeic)-36
b(hne)307 b(diese)921 49019 y(durc)-36 b(h)432 b(Wink)-36
b(elb)36 b(\366gen!)p 1 0 0 TeXcolorrgb 921 51565 a Fi(cos)p
Fk(\()p Fi(\015)72 b Fk(\))p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 47990 6792 a Ff(A)-31 b(G)369 b(4.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 55372
54804 45 v 0 TeXcolorgray 24746 81281 a Fl(6)p 0 TeXcolorgray
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fm(A)-60 b(G)955 b(4.2)f(-)h(9)f(Wink)-60
b(el)953 b(b)60 b(estimmen)953 b(-)h(O)-60 b(A)955 b(-)f(Matura)g
(2015/16)h(-)-2331 4622 y(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -741 7929 a Fl(9.)p 0 TeXcolorgray
651 w(F)-27 b(\374r)433 b(einen)g(Wink)-36 b(el)434 b
Fi(\013)378 b Fe(2)369 b Fk([)8 b(0)14723 7447 y Fj(\016)15249
7929 y Fi(;)655 b Fk(360)18215 7447 y Fj(\016)18742 7929
y Fk(\))433 b Fl(gilt:)921 10474 y Fk(sin)6 b(\()p Fi(\013)i
Fk(\))370 b(=)e(0)p Fi(;)p Fk(4)435 b Fl(und)d Fk(cos)q(\()p
Fi(\013)8 b Fk(\))369 b Fi(<)g Fk(0)921 15012 y Fl(Berec)-36
b(hne)433 b(den)g(Wink)-36 b(el)434 b Fi(\013)8 b Fl(.)p
1 0 0 TeXcolorrgb 921 17557 a Fk(sin)e(\()p Fi(\013)i
Fk(\))370 b(=)e(0)p Fi(;)p Fk(4)i Fe(\))g Fi(\013)10677
17756 y Fd(1)11572 17557 y Fe(\031)f Fk(23)p Fi(;)p Fk(6)15285
17075 y Fj(\016)15812 17557 y Fk(;)655 b Fi(\013)17655
17756 y Fd(2)18550 17557 y Fe(\031)369 b Fk(156)p Fi(;)p
Fk(4)22913 17075 y Fj(\016)921 19549 y Fk(cos\()p Fi(\013)3995
19748 y Fd(1)4521 19549 y Fk(\))g Fi(>)g Fk(0;)655 b(cos)q(\()p
Fi(\013)11518 19748 y Fd(2)12044 19549 y Fk(\))368 b
Fi(<)h Fk(0)g Fe(\))h Fi(\013)377 b Fk(=)369 b Fi(\013)20428
19748 y Fd(2)21323 19549 y Fe(\031)g Fk(156)p Fi(;)p
Fk(4)25686 19067 y Fj(\016)921 24086 y Fl(L\366sungssc)-36
b(hl\374ssel:)921 26078 y(Ein)332 b(Punkt)f(f\374r)h(die)g(ric)-36
b(h)g(tige)332 b(L\366sung,)g(w)-36 b(ob)36 b(ei)333
b(die)f(Einheit)f(\022)-36 b(Grad\020)332 b(nic)-36 b(h)g(t)331
b(angef\374hrt)g(sein)921 28070 y(m)-36 b(uss.)514 b(Eine)f(k)-36
b(orrekte)514 b(Angab)36 b(e)514 b(der)f(L\366sung)g(in)h(einer)f
(anderen)g(Einheit)g(ist)g(eb)36 b(enfalls)921 30062
y(als)434 b(ric)-36 b(h)g(tig)434 b(zu)f(w)-36 b(erten.)433
b(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435 b Fk([)8
b(156)25864 29580 y Fj(\016)26391 30062 y Fk(;)655 b(157)29357
29580 y Fj(\016)29884 30062 y Fk(])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fg(___/1)p
1 0 0 TeXcolorrgb 47990 9921 a Ff(A)-31 b(G)369 b(4.2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
33869 54804 45 v 0 TeXcolorgray 24746 81281 a Fl(7)p
0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)1024 b(4.2)f(-)g(10)g(K)-60
b(o)60 b(ordinaten)1021 b(eines)i(Punktes)e(-)j(O)-60
b(A)1023 b(-)h(Matura)-2385 4515 y(2016/17)718 b(-)f(Haupttermin)p
0 TeXcolorgray -1391 7823 a Fl(10.)p 0 TeXcolorgray 651
w(In)433 b(der)g(un)-36 b(ten)433 b(stehenden)f(Abbildung)g(ist)i(der)f
(Punkt)g Fi(P)550 b Fk(=)369 b(\()p Fe(\000)p Fk(3)p
Fe(j)295 b(\000)g Fk(2\))434 b Fl(dargestellt.)921 12360
y(Die)532 b(Lage)g(des)g(Punktes)f Fi(P)712 b Fl(kann)532
b(auc)-36 b(h)531 b(durc)-36 b(h)530 b(die)i(Angab)36
b(e)532 b(des)f(Abstands)g Fi(r)572 b Fk(=)p 43847 11319
2050 45 v 535 w Fi(O)36 b(P)921 14352 y Fl(und)432 b(die)i(Gr\366\377e)
g(des)f(Wink)-36 b(els)434 b Fi(')g Fl(eindeutig)f(festgelegt)i(w)-36
b(erden.)p 0 TeXcolorgray 0 TeXcolorgray 12385 40753
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 199.16919 a add def
/d 0.0 a add neg def /h 199.16919 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12385 40753 a 23409 29729 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 99.5846  0 -99.5846  0 ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -99.5846
 99.5846  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 99.5846  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.5846
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 99.5846
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 99.5846  0 -99.5846  ArrowA CP 4 2
roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.5846
 99.5846  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.5846  def /maxTickline 99.5846  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 1 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.5846
0.0 -99.5846   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 99.5846
0.0 -99.5846 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 23409 29729 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23409 29729 a
23409 29729 a
tx@Dict begin  { 99.5846 99.5846 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 23409 29729 a 23409 29729 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23409 29729
a 23039 30015 a Fi(x)23409 29729 y
tx@Dict begin  PutEnd  end
 23409 29729 a 23409
29729 a
tx@Dict begin  PutEnd  end
 23409 29729 a 23409 29729 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23409 29729 a 23409
29729 a
tx@Dict begin  { 0.0 0.0 pop 99.5846 99.5846 exch pop } PutCoor PutBegin
 end
 23409 29729 a 23409 29729 a
tx@Dict begin  { 5.0 6.15965 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 23409 29729 a 23068
29886 a Fi(y)23409 29729 y
tx@Dict begin  PutEnd  end
 23409 29729 a 23409 29729
a
tx@Dict begin  PutEnd  end
 23409 29729 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -85.35823 -56.90549 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def   /t 0.0 def /t1 3.7295952571373605 def /dt t1
t sub 49 div def /F@pstplot (0.6*cos(t)+0.|0.6*sin(t)+0.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { F@pstplot 28.45274 mul exch 28.45274
mul exch } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /t t dt add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  ps@Exit
{ exit } if } repeat ps@Exit not { /t t1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if     0.0 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -85.35823 -56.90549
  false NArray  /DS 4.0 0. CLW mul add 2 div def /Symbol 0. [1.8 0.0
0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale <B4>
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 23409 29729 a
tx@Dict begin  { -95.03206 -51.7842 } PutCoor PutBegin  end
 23409 29729 a
Fa(P)23409 29729 y
tx@Dict begin  PutEnd  end
 23409 29729 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 0.0 0.0   false
NArray  /DS 1.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 23409 29729 a
tx@Dict begin  { 2.27626 -9.67383 } PutCoor PutBegin  end
 23409 29729 a 0.25 TeXcolorgray
Fa(O)p 0 TeXcolorgray 23409 29729 a
tx@Dict begin  PutEnd  end
 23409 29729 a 23409
29729 a
tx@Dict begin  { -34.1432 -35.28156 } PutCoor PutBegin  end
 23409 29729 a Fa(r)23409 29729 y
tx@Dict begin  PutEnd  end
 23409 29729
a 23409 29729 a
tx@Dict begin  { 4.26773 4.55254 } PutCoor PutBegin  end
 23409 29729 a -215 x Fa(')23409 29729
y
tx@Dict begin  PutEnd  end
 23409 29729 a 34432 40753 a
currentpoint initclip moveto
 34432 40753 a 921 44737
a Fl(Berec)g(hne)433 b(die)g(Gr\366\377e)h(des)f(Wink)-36
b(els)435 b Fi(')p Fl(!)p 1 0 0 TeXcolorrgb 921 47282
a(M\366glic)-36 b(he)434 b(Berec)-36 b(hn)g(ung:)921
51820 y Fk(tan)6 b(\()p Fi(')295 b Fe(\000)g Fk(180)7737
51338 y Fj(\016)8264 51820 y Fk(\))369 b(=)10653 51297
y Fd(2)p 10653 51510 471 45 v 10653 52278 a(3)11625 51820
y Fe(\))g Fi(')g Fe(\031)g Fk(213)p Fi(;)p Fk(69)19556
51338 y Fj(\016)921 56357 y Fl(L\366sungssc)-36 b(hl\374ssel:)921
58902 y(Ein)563 b(Punkt)f(f\374r)h(die)g(ric)-36 b(h)g(tige)563
b(L\366sung,)h(w)-36 b(ob)36 b(ei)563 b(die)g(Einheit)g(\022)-36
b(Grad\020)563 b(nic)-36 b(h)g(t)562 b(angef\374hrt)921
60894 y(sein)434 b(m)-36 b(uss.)874 63440 y(T)-108 b(oleranzin)-36
b(terv)-72 b(all:)435 b Fk([)8 b(213)13490 62958 y Fj(\016)14017
63440 y Fk(;)221 b(214)16549 62958 y Fj(\016)17076 63440
y Fk(])p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47990 9815
a Ff(A)-31 b(G)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 67247 54804 45 v 0 TeXcolorgray
24746 81281 a Fl(8)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 2.4/AG 2.4 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:26:41 2017
%%Pages: 5
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular wasy10 LMRoman10-Regular TeX-feymr10
%%+ LMRoman8-Regular LMMathSymbols8-Regular LMMathItalic8-Regular MSBM10
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra und Geometrie/AG 2.4/AG 2.4 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0826
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3FCE3A9E67ABD53AA2095C2217F80B3EF7AFE49961F4
61F60F250ECF1329A62A5D6C3F882A44310C4916ADBC3DA9B6BD436AD86BDB2B
16C0E63EB1257ABFAD25F281D32B547B31CE48D82E48819606699CB2A75A64B5
D1B5FA98029D7CE623B3B8E9274798F32EB5455A608A969848587FB4216C3C35
4877EC108D8DE8FDDF058F61DA3D0EDA68EF579CD4EBFBCF2F88DA535DC05FF1
5EE718E01518738F7E6B887898261117EDC211226EB3AF880E5F0AFAB2498FE1
D79954BD53619CA37601F681AA949D18BE7A0C27B1870062A9EE8AE41F58328A
DB5170FC710F29B4CF6AB780A4E2A1732B3626515EDB3004C44AEAE92C7D6E49
A68F23BC5D249C4A3DF3CCCCAABDCEDA355F4FDF613364034860D574B000252A
5D8DA8E25DC55CD4EA45809FA89CBA0CAF97C045A54130D431695D45CA66952C
53923653511BC070AEEBD7A6206DB51E022B378073A32722BEFDA8D1EA7BE1C4
6858AC7236A130C5BAA5744ECED5515C36F27E883157C7260465A657929DADD5
64021638AC293FF604364E19265E828274EFA7943AD449C7EC1FB3A6E71B557F
C25850E187FCC3DD5B2466C6615CA30C3F71D10E1D5D11BD5A31DA3A305FC549
F4D79F4BDE53501E2ED5A81D91A820DE59A9AAC76D12FCB66B4CE99B98936F3A
AA59EEE03D5356625E72E37AF4E0674B33FB71C3A77EC1A63C24330197667FC9
0BCD004E429AA00ABB3B68B255C69242F195F7585165B848830E6987404A4ABB
B490D44EE8874E54DE3E9919475976933B742305066D1656493996A2A6290FCA
03CF4583339606F4670595BE260A74E057ECC8093923A9BFF8C4B992E8BA627A
A6DC45B551A40788FDF87526E46B09760A275DFC6544C3B9B190F3C5A02B7C53
21112A6B3EB4B65EA087CE23B5CE57A934BD846C170B69336EB25EC395703990
E6D2ECAC555FD5056A30A018E32CB622EE8383A1032486E7CD2BB3CA078ED631
A6232F7CE821C984DAD110BEB9C0145F4AB0CDB88D81A4CEFF1F26F3D5315CAD
6B6727AB4AD19C17230C98A18626354AEF8FA8150F66EABF175ECE54C0D53001
6C161EA4B304FBE09DE4EA66951BFC62FA99CFDCE86D0C314315CD073E274793
B054D3360C66D161DE017D708939345A0B7E09088E1900CF1FB99BAFF6C7074D
CC83215612A684D3D1C466CB34057ADEA88837509FD0E402221A03A6D60EFAAB
1ADA7F0A99B5B78D3CFCAB9E9848D7FDE3B26EE57BF81002CE6B61978949A6A8
6DC8820196EF765E2B3B1601CCADBF0E5AFF44E2AC9D2E57A7339D68D1A17ECD
F50A03DE13854FC26116CAB19342C2264FB4570FC9F25A3B482220BD4EF12017
FA7A08E8F38EDB71D3C5468C444500DD723FBF297BE88817FC1689E1FCF7AE79
83B079863001D1B56EF386D2A038ECE25D7926F22217DDA7829840F4EF453983
B63858996800E2E9EC3DB973CF785A4BCF2E3040D9A5CCE4B94CAB825BD85AA0
E05D053B441A5DDA1D496CDC1DE03BCBC25243D4612311A5E0DDB7E1F4D96FF7
5D4636C1121634CCCF8942A5B04D9D22017FCA8A71B6AF5C162523F62FAB90A9
CD5BBAD181BC53D768AD00F927EC13078BD4203AB28DA733D68D0BB5D32DD03D
3BAC04FB68C2BE3B30995C0F0A32CB83A0D07A9DF1EC44377CE5CFC6FCE6AFFE
FFCC55BA9DC60D93CA868E5A1F1F76D2C6D358EB403E0EC90CBE0B97B64B475E
45958B7D6197BD0395DB4028E76309EC9D0B817BE4A8ACB406374D13AC44CDB0
90636C19B9BEDE274B89CAA37ECA7ACFCBDAE2F6A92C60A4872276B32EB13B96
AFCD4865A405CA94627917DF70A9F28497B87A898380B7486A7617B0A93A5793
A4B47E3F35653F8B74C6EF12A847D83FB453FFE3273C76B0B29A7E0252203886
A5926AA3D9CC3300F185095140217E9750278C22881A8ADF652ED674EC1A6A41
2AA72504544B817861F8D17E4DB0D411F172DE58E13CF1B83F51F5831C8686A5
455ABD245EDBA19E25AD0A7F688433E1805FF1D5BF490C7D7B35ED97B42DF590
E9A52FBB908ADCA7383A7BDD9739E06F9D82672FC91E81CC106EA83D0C03C6E0
9C2F4B782B553EC8C0C5FE6D551C3CB40BE37500E457BF64EC9BC75371A936A4
770C081517F5B30C876ECA6E404D9E9505F827A7B9999B1A083D1ABF3215AA62
889CE9C689018CACA481BC78444024C4062F37A8D93B475B012BCC083F5D9E3B
C38AE4A15E2EBC39792FC9D109F9D3E239C70376A70F02CF7DF638A1A7E48CEB
056CF7E23268D1A8BC061F57AA99C84F56B94F57BDD9F158067EF496F7BBE4F3
E70F52BFBEEE472F3FBBBD26C3B5179917899F91C07B06A3527310A240490428
AC39473DD794D07F6F57636099BAE5E02DC96E96BC6E6E51A416F95EC55C9312
337107567EF00A209A92D08FFBC9A38A753202B615DB0F6C7E8C9A61AD004901
D7975EA0BE06E13D7CD5F77C64907FAAB2CB3D0A0D2F1D845BB549F0A98E8772
F7D0DE0B93EE689B3CA4D9C7BC5E4CC244E2B67B2583F2DF813B00C83587C984
6E827F8BF1E4786CDDB363D7559A7F389FD6F41EA9EEA9EE893C4B43EDA9FF5B
66265F69FD763319B0657E5FBA774D211A744AEBA78001D56DB703B5DECD675A
E2AEFE3D204EBE28E917DAA640DE1ABF457AA4E2434BC2A12B1CF5E779905F80
4C19D3B0E401603F5C05C39C6F0C81033ECDCC34FE51302B7A4EEAA4B424D5B0
B0B195DBC4B4F0543E44E511FB709FD0C903ECD067642198
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E08614769C017F6D4F14C52D7189D4AF8CDA367D8B04CA8D3F2307C
0A7A179419A80695912F456637F539123745CA8E696E250E0BA6B7C6277394E5
98A8799C29B6272613C152B0CAB05F3C7795791EC9AF2BDD416861A3D13FA858
BCB6ACF5BDE40E5DFBC1A171A7280E8FF4AC0D4C8A2199E9E2BAB5CB9131A76D
EAC166A7C449A549EA5111F1750CA2C6E1EC6F00CB6C62BA52D17FC66E06ACC9
1E6B858F9393AF9AA5E69F799E01D301B647DA57225C2920E3BCEE9D09CA5C60
F22B07F24A26DD8F4D6F9C78BFAA8D12A21531E713B80CD03A5FF4F3BBA2AD82
3BEF7DA8C97C30F1452006AA3B1A168483F6EDC4089ED02E567923AE6DBBCCA4
8C246A080448200C2A29C34AE6255BC79B73AE14B980A7C357681BB0962894CB
DA32FF2B70B21AF4D158E0F74652684A7150D0967F83E13EBBAB33588541AEEC
0DE8C53851845A44FFB46A93CEE3E8A0263882542F7F103D13C367EA8E1ABFAF
6486A9DBF6668550BE7858F5790BC87C66492C0FD34DB08EDF842E1AF58A09B0
85A9B7FA402029FE2439769D67DEBDC8AD8C861E90E5322951A2904FD702766B
36916DBA8F9C96141BBF4788FA435556B2B4E1B37DE4506ACC4224CFC00A8F83
33941A050B51B9508758F4EB2DC074D799F5116296B8822ADD743A043F9A6426
88D10767A9F99A072BD4C88CB579B34687BA4953B96DBA29F33211B12A0215F7
5F2F873E5074A7D593DAD0EDD97270FB9A87BE870321A49958B10E32850F0148
68E0A1D795937E61D4556BCDFB7F4DA63A884F9B4B07801D30B1357C3432D6D4
7B72B7D6040410C194EE5124ADFD7A40914BF569EA1F9CA8C8897E839D262395
5EDB3E97C591A3A5927DAC229EEE864B8C0F79ADBF88C0E6C41CC70D9010F07C
1CF9C05960E34FABB6C5DA4D789E39F35FE01F0B22BD9C63B3098457716D6B22
5EFCD0A960F3A2319252C7A0F73A4770E056209C14D721A714D713D5F2BFAB32
EBF815DDDE792B2556A87C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DD9B92CCD508A09171BC12C8ACA32FECEB20
7CAA1C2C81ED075E3EA7E712D95FC612CF97F3402658E90924C75CA278243C52
D4E02E8224F197E555143D563819EB1ADD2248C18E02E18FE3DCF624E37ED993
3C7DAB05959E694040B7EF5F92D80AEAC2CF58EC01BD61D7CB962C4EA678C5C0
62593DE423E11AF90918CFC6E1E8F9DA428296FF0C92CA794AFBE2067C46264E
EEB0AB0FBF2EDA1A8420EF654A1D4E0A295D1DFECBE39D9FF712C85C748311C9
CB8695716F72FD4F80E77DFD7E01E9FB8CB1F2B5971940EE4E7B14727B086F27
E43E6E3EA6EF0DE68E17C9C0F050085274ADB56BAAF193211E48D1B82FE44A59
2A9F5FB13EACEB54AA027C1B87380F9EEF9D500DC327702B132335FF288ADF62
578F30CDCCCF826E4C4CB57B5D5B537BD2FF89086BD0C4CAE557ED66306DF3F5
BA9D1007C869E8594D4138161162682A719FFCB1A982A5CE8765E2681E64B8D8
4A7CD7504E58CB81D0EF03A3EEA97D43741F54987AD65FA54A1BD682F7EFED16
D35D034F1AA5CD4EB628353F1FFEBD0CEB905F10C183245F1B733C17D3B854D5
3BA686CF4088BC6C0FADF9A6C05BE3499567E930F710682B8954108AB7B126D8
255F1A0F1BD08158F94077D191F62DD73838E0CDBC99204AA6AD1309BC5668A2
A524C6D1C68B4E416B248A6FE29A67DCF4E1CBFCE603260A277AEB7F75627333
3E84F341637A1BDB292EADD055C97A12CF0B915E39263AA9F03B21C1F45C87C2
CCB12B59066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0EB4CE7727EA32222
07E864C7F39773638E3BD2FDDA11C79177AD0A23CFB7F631E00CC979AD410F81
3119C0543E091E4820C12FE47E3154789E02FE363C319139350F014FE8A785A3
F66FFAB8D8C9E7E26E49BE5FE558491D1A57B150A5B386F7ECCC0EE8E31695A3
36BCC7BB9F7FB26DA3444238CC33E2791CABC1DCD0BFC3372E1DE72D93AFD1C8
E2635A5E428AB33E24E81346D13A9377EBEFC6206D372675CF43235722B50C78
8C4A02867C68BD8E5FE9A45653BBAF2A5DCA560DB5BEE7054FB8B0A13AB598BB
C481A3240450D1453A1CC1054A06B962B7E28A73BE0B2713DFD32DEABA293EEE
AAA8C0409564BB1ECD1249588C18D01D8AD4E0F0032FD811ADF35B869BB210E4
4A57178893AF229268DC5375F01AB676E600823FEC28C30D2208A868EC0D01B1
4845736F9DEE02D06634547729442ECDC50C90989CC881C3D8E85B76FBB10040
F0DADEE5ACBDBB43307A30FDEEE5F77E621B130E4B824CE23100BC08DC65BDA3
46307E3BD497D7F1E2F51B557FEB6AA32E84F5E55E5C12A81B73F370431F3842
A1B0CAFD4ECE7F0DC8E2A6D644CA8735A4E96445BA9CEBB627718F858DC051E4
3963ACD7E7868CAA4488EE815D40E28CA54C83221810546F0009F98531353C9A
8EBFE7DB9C9A120C2A4E2FED0E63F90B8DF65026707BD39B489E54425A5ED877
73C6B3A8ABC8ABB13ECC3B249F1878A8F76D59596C63BCB936321589906AB242
14F3C046A1F210FE287A8192CBA7D2A89BBE7A7B2DB6B1E19224F04262D6403E
3B41787E1449587E28093E66A9837BB94195E3A4A5C17DE6823755F59BB9E3A0
52F69C7808FB657D9270933D8B167D2575CF146336BB1C76735BE5CAAAEDBE98
C69F89E7E71474CFC7515F73F86727442EC24D46F92C99498946CAB6DED8F5DF
0540063DEC2EF3F83AAAA3F4F68A8E892C3D0529A466C6A310A6101223949B01
79CF7DE6B550657C91BF3116EE7F85B0178B3227810D99B48361133B54A6DFDC
872745DD45766283944D7293D6FB1B42BCDDF2F241AB267897BFABA39D0F2725
E0DBA7C8CE305DE7C1B59DC2184872FB99578B809358856E4E99B28E138E2DB5
85CDCCFBF2B46F01012CC94E2FB30C1E4411918E892630F2AD07EFF1919E9BA9
0194E24A69649F0DFD0046D2EED7AF90313E70594EB5C354023BFA07912408F1
72E39AFA29111A71BCFDDA20BCD6006B0309EF09261B7AE1C67BDE0D385104C7
C0730BEF94DF3D9BB2161C7346FAB11805152716480C0984BA13A8433ADBD629
229C446AF84A690F56A09A84EBB1CED5515C36F2798A89689BED966ADC9AC306
D01B6E24DBB2CFFBEF205FC921305B45B1B8FFDE2A09CF6301F485C8B7DC2E56
82DCE3042DC9767C407C0DB4D0FD1A4881A34FA0EEE7810D69F2428045CD609E
23CE37791362950FB435D1899A47E6E69EDB17BC08CA1B092D4F20BE1AA6BC4A
9DEAAB1B74EEB7B908245CDDB7A093C1AA307DECFFE53A1FE54984DB1360E320
862F2CA6E0258507C6D3DC1DB94102FB88F631211557D3A4F79A8E5FDE69B1F8
4E9FB2EDBFB4B8853524F58D4E1EB98EEBEF1B6C2D330B1CFC47ADE896255DE1
FFA8CC1A09D26342E89B9A39149E124C564C5251F613393060892D5A51B78BEB
3E44B78C50316C61B6FE484CE582EB7FBDC53D9427FE267051934E366F7C7B2C
ABD2C65921B5520C6F70C1B6E7AF8E11BA4798C1DD2EB7D4F962028061B71099
8E5EAE433D8A82CFB15547B339AF376E9341FEB9433AF21E8D84C50F75043419
1ECF16684180B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA459894E119B5356
CED765F73F6935478D5133B9E761430A39CAB0DC109B02A80626A9ACD7856ECE
4D6569F5D1D918A30005C31F177816336B74AF8B9931BEC0CAC75380C714BFB1
BC100B05D19D7BCFB18CDAFB0310935E6C7EAC6B9A8134C4E8F4969C9268F7A2
C306146CEC5039310EF1F4ACEA1A40014BA27BD58490D24B7885E4084932266C
621A42B8A3139CE953DFA9687BC439A31644BF123DA78DD615C4287ED7DD43B6
79CAF0EB2F9F428C431683A41C2C61A429E3DC0D87D76AB6294CF8CC9918A6A4
6873A1769ACCF25B59CB4365AC451FE1D956E1254970C706438805E25284C7CA
AE679F2B7C58BE9909CBFCD273EF5617183CFA64757627D2D567877FDDED97FD
7C9E73DE4D6D4ED370EFAAB4E52F30E55B902ACC35DE87E70DE8EDFE7D803CB9
B4F8D58998C2ED6B93CF62F8E991B754899CE46B900DC93C5A58EADB30BCFFA3
A71EF23D13FDAFE72642854A3340E64896CC6DEA0F7E3AF4C39EE4E68AA31889
A372F02266FE65ABCDAA308258FCDDD13DCBB18E462B56F956B94CE97E870122
A0A46CCFD6B4158BE06C768C73F0377CE3F21E030748189C553B9F62C83765B0
149330C96EC3496F9F2F9B289307D7E0C33BCB7023200FC3221F12B5FDE01011
87BBF9960E56CAA899438C90156BBF2B14596F131B71830D84172E7CD7C05B25
85A53C7CB0DA5729FD6CA218A1CB03FCB945FC24376A45F2DE0C21378769921A
72E46589CC08EA87EECFDF36B819B07306C448777163A723A9E71F504DA5D447
AFE8CFDBD88089FA4802F449B477BE528C3667F06EC5479B0824B87C47EEAF1A
0A23941B8257A2A5EC3F63FD62DD09890F4DF33AA1E70376A9CE8E4B6C4211CB
FCF9709AA29144F3A40001AB98BE816619AC543753969AC5B540ED39E51F5869
98342686761A7C070EA75140331D7A0DD5731F0E395A6CB0412028C2FABE2E9D
C3B57F412A5CC05FA7599948E6B8B50BCF16EF9825F6B20090E4D6280C528375
4EBCB42B38B7ED6634AFE0B2C249699E212509817638845B5604BB526053ACC5
C0FF6206B2953C9350E57657B374600DA75B6B271326A2E7B313EB4598DD7FEA
4A5D95437CBA46D85A5EAD76FEA956126B3EEC337FF78D906699CB9CD7B4012C
474EB33D12DFABB3BF569214525DB9B2D4B34136FDF936F96FFC813FE16DA5F7
9B0F2B3110B1F8C90170E014FE8F31A5FD35CB74EF0FA13C6DA74D7264618562
DABD7DB8E7F480D0521581902848649AD3EBE39E618667C59EA499B7081A0844
B6DC10555D27819E6CAA1CE453A7A68EF1A3EB2178BBF9B9BEA9DEC679DC10D9
E3553DE260FFD590BEDC71CA9AD4AC12B09E86D933AF49B4CB901556E63BD639
1B3C3C3C80C46745E1CA7983B9E80168018E04A84AB47C854C73FC58A393974C
1AFF488EBB29B293905951355C4D4A4F65BF1A72956515750DED0B87A8D3282C
72C634347874775B6F29EB873134F6BCC2EBBD3703E9619F762D64128A18C957
22E6C0DA907A17868AACF3229C176FC26BFBE255AD62737D234986AFF04FF03C
1DB4D1F2D9F60CF2E4DC5DAF88EF3517A2D91CCCBBB8753F92B3E0CDA5D26523
B84CEE3A0429655F8F25C89E65074A52CC6047885F4105DD62F1FB8CC7A4CFE3
22EBEEE15E3395B062B933EB55FA589373CE26568F78981B480F688646A5C8C5
63B8FAAF19A1F6166685C3FDC27532C931AC8B86E81FB0223686074ED596FA6A
922B662575F23B53B7C6B245AFE90258E743F284E22E30D2B418CAE285AA38F9
FB436D39371781DF4FAAD1CFF3BFEAA81F5D11DD76BADDD8122A4AA44B9F863A
DF8127F1FC35DB9CD34EBC684818AB259FFC3C7CE34C9DAEE69D70D010C70540
3B359BDAA5B9ADD10F6F7F2C19136157C6D83B33313266F1BA8B9E065A0C831A
47D767D4558876E85ABB0B8396FEE0C3327CFFEE23D0D7C24466E5410DD289DF
78C335D2BE90B5C581D536596D97F1F463EDD0A9C0118790E5780C0AC27A05B6
4DB13A023A3E5225E0377ED38749AE1F7714AE5E1D649A3AFCBBF060F416C0B7
47EC5BA54AA743154084CCBBC2A47037DDA09D9601412F731039746C1224A29D
191D9E221C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C3EA93A0BE63CDF0C
D9A4546C9325291D11D02F4C2284918795A5B6E6CAA4CDA0371D452F65EC9097
657F51E83FCC22A30D649B80CEFD9F6FDD51AD33D3DB732FF26650A90912822F
9E77D8AC13393AA1B04DEDDF6C37B2D1DE50258300B9BB455AA872810C7948B1
EC866883E78F23DC9DFF60701F4F7C66B61198F8066DD493031D1A5EF91231B4
470B5A034CBA00791EE592FB4DAB538C280A8047F6290E265C8A88331305E67B
EEEA9A03950593605886E125446E5CCB325BF943C3D7F32D49651F5744A27DCE
6004208003A95DA1371E2EE456CC692DF7B71EAEFA2ED09E82012484AF7649C3
FA87A3AE44D93FB7A0D1A7A08A419AFFF7DF7065992B084D567645EE4D2FC29A
888E5E51A42920248E4BF77A7876799B1FD856AAB0EA73DCCBF7FB5979EF5F01
2CAF413DABCB3290E29A0CEE18F02BF93ACF5E651F75F1C47F2699BD0DA86F7C
5E18E1895ACE4B125EF346F608ECCD4DCDCD47DD7717EBC78AE3DDEAB5333174
18A8E967F635ADA03D2EFF80D463A521EB069C2B6271FD736442AF38A52EB58A
59D7A62D97171B45D2A6AFFB7E617C9265B466295CF70CB228FB295850D653FC
3FA379FB4FA0AD9F83269A99D550366B880AF05F913C074EEAEBE390144ECA2E
ABD1ED2BB6C54FAA70C9BA6C6794E3AC06D503EE876C915252EA75E6FA113380
E4E2A0CEA310D96BDFD883642BDB55525358ADA70C5ED0923B060EA6EEA5B735
D0D62E41842C07B79C0E8DC56C55084EE590D2BD58FD9784BCDCC3D498B69CD1
D7C24466E5410DD289DF78C335D2BE90B5C581D53AAA27CB98A914D22E25B41F
E35179D5E020790534D6BA1670B6783FA8DBA0D35DABEB8E162D2EA2ABCB6CC8
DF8E44430383881E5ED0F7F184DBAA9A394D0E08138E5B80D224D4E8FD6F8BD3
255103D823B86B712CD58FC2FF2C9B963C235A59BC191B84B9B6A2D87B85F21F
39F33AD118513BBA722CA46E21F697AFBFEE1989A09F9F9F7F29C1E0C0F28E3C
C64BB4933D3AECC99FEC69C3B047482C0D6F22E851DFDF1315C0679C0906D77A
B2144E810FFE3A942963C9B2584CE14922AAA9E3456AD60EAA44317BAA8D81C7
33BA78C0DEB8D1A2C9BF7CFAF3F6C87EFC09B43D790D3E80AE0EA0AEE1984C59
0DB7EE142C2444A3F4DFAB0C651407A58102F825D9534F2C1768DE55DD354014
B4AD13F8F95AB9B462F7A5950046C9C4A8CFF3CC3738D894770AD27F2BAA1A8A
C49D55D311D7B27E77C664BA4DA424125D1735CDCF888572C3D4E2F0230BB1FD
DAD562E249FC2F1392F7F378BB1754A2E80DE0D9FB55FAFEE3CCC1C812E9FAC3
31FD70975E3A0C72D37207D8A6034994F5A338B85C4ADD0A28C7A8FB765C4A04
DDCD6E0E7854CB47132679FBABF1DF31D16F8FA295CB56D75A836ED366963BD5
7A5FDDECE89ACF7D2EAABC3C655C247E6AA58C7B3A65D90C4598DE6DF2AA81DF
1E7AD672C058BC13013E94942CDCF8E20DEC5CD4696759CC337B6514AEED350F
45EB766C4ADF2EBF18F155CF537A97C212FB23022E75D57D24147D284196D0A5
17320294E3C7A3A1A1BE80ED8FF0A9C509420006D2229CC525B2E21332AF97ED
907BC5FAFBAAE31FCE73C77BFD275F6CD038A6DB9EC1FB4AA5AF31A16FC07D58
F6AD35B345BFA1CF7B0E9545795A6E62188B643BE9FFFFF69BF0E7C694E07807
E04F51013AA2E2215C03ADCA175FED41854EBA64EA1BFCA7B9ADFF7F4ACC6DBE
671126FE078F52AB62DB59A9B9AD1018F245F33A42CF224F327CCEB361EF2E2B
DD7DB751EC8C146E17EAAFC942F80C2313118CD80744B1160919C81067D75442
072E34982759C289C8F929334930B4AAC76A132C32DCBECD227134E7F747AEFB
6809685156270A536E5DC0236DA24612993121152E7E72353B4E4A19BC80F638
158DDC1B6DDD5CFAA56386D2232E51B3AA708541C4671738A1E0CC16CC401640
5B0F10C340F24A30B1C3E6AD87C7D4424486F4D2504B044E802A8B30DF26FC38
1D8D871D0D96566F0E4910D17124056A1F0AD7E9C1807ADA0EE65BF63372B918
2E8CE99142953DBEE0C0104B1292A1F83517BC28709D3864CA389D6CD1041740
7AC6A0DDA1E77D37AC83F0991A4EB1258E47A4E04D0DC15BA4F0C1D12F27F5DE
5E37A07F94A89276B909954466C7032C6FD3DE6ADE20EBA3FA90A309230B93A5
B74FF64283F15EAA51DF4C74CBB662283EA2C98CCAA3F64D2E64AB21C48203C6
08CCC92CFF820CBFE005BB5D4B098F3CC567E9DA9952F5F95048B505DD5C1BAD
049517C3A95D471EAE9D83E664D7CEF78D51D427D2A9126B689964B87ECC23E8
3F19351612FB0B1E70D91934375C410CFB8AC6C99D8665CD7E1CF880F99229AF
C16232CEBA6D7B35526797A8C94EA0723B3062409182103B078B6D4120137695
A8BE5DEC8383E556D1067F2D10E43F158978ABC35805453F84CC5EEC991A5CDC
8C33DBF86934B5368C099B59A7114410C608C749D1B7D493E67EBD9DF99EED9A
ABA70EBC005B7E807A854FD70F27639BAF68211DD20AF3D34A3498F21B00999A
CC476DBE2C5E7F404E59340CA51DBFEADFF2D6856FA15A36EEA17FDFF093D02F
B419CDEAA8924DD923B74F252664C67CEF45743658D8D43AF001ACCC0284EE83
D6B900DDC00EEB5E881FFE9B414C45B06FBC491330279C671334298D0621D516
6AC107F3AA081661CB91E004CEE7220A24C71BBAC196A23123BB399318B4D2A8
36F88D24D6FE3898D6D1C76D8F8E2C75D7460CE135C4E1D0349033D576ACDFF8
68AD600D610E32BDC63998EFFBD8BB34D2423CC6282C145F3F0029A07BA8C929
7BF8B0B016EDCAF80B9043EB61A3BA3E78F64ECDDADF68975D97F94EA8A698A5
CA287EBBD5193878AF0D3EE755BD5958FD3632E670306CAC950F8A1F66D4720D
DBEDC0E0857B057D019BB4C3C1C751481ED7C692CF08BD1EA6C5B30BE280953F
B8FFF50082E28A8D951207D7C494A7B2784E050A11FE8B1CC619F387E700EED9
D0956AE651C28A61DEDA9859E01101F5604685676CFFF64C9F2630CABF2F83D1
37D226BD5EF6EE8EE1EDC4194F1012D8BB958B6940681AEA50C7C8964FB0F377
23C0C4BFA4DFE3FD4AE99F5A8595EA873728E2C8B6D05AA6861E3ABED84D6761
ACEDE777F2D3BBF85031E42B976BF76149CEE298FA46B57981087E31FA46D2C1
91A16ED86E07D8E45FB322FD0B3D25692D2A0E7C4DB93BAC55016AE065951347
39401B0D8ACDA770B340277CE3950462318057F893A50B1BE89222348D7F09A7
FB9144E9162A946DFAAD95EE0B346EBBB899F1F37A0F89D4DAC9B7B0F3348A1A
FAAE48BE88E0E16B8E376035D6D75C10FB83D7B0EB9DCE189314BFC6A128924F
34C083E289918FCC37040DD4771C1218921FD978D54413617494E68E34391E25
42903355658BD278E67696161CDE14626D101B4E117C63F2E7A60627DC40CB9A
B1634701AD9AEAF5D11607A783874D716DC73DB1CBA45D33E0076E992C7DACD8
026D7F4C5AC1E5D796C0E5A79C61B5BF586A0FFF6BD2983A840B68D656FC1584
2D694DFBC7D7800CBAA90F3BF0022E66A54BE1059BD5D224B674AB4D2AD930F7
F724A305C4DB7BBE9E3E9D166FE9AF6147A8BC97C6834B365C39F4F5C39DC16D
F38ED4E2751BA59C0E9D7A0546E34F8BF633F656FE32F1FF453232617FCB7419
0A46165FBE654065FEA56AD83B17114EC5A7245AE7DDE6217581860729E94F76
212E186FBB34B7174AC5294A0D142C13027301D54E815921B749E8FEE0AD1803
E4DCADDBA121E96EC75C62DFE3F9C3A21CE1DE2CADAEE76E1540527E73B23D9C
B14BB0D947E557FBBA38173BFD22C8F111F56D53ADC64547BDBAAA2E3F29539F
B7F8E16596FFD4151B332C718B173639302937C26AC08DA98886993EEC7A8FFE
EC357A8C415C57CD2B4FE22AE09DF3F3600FE89631FCCFA1C86D5643C24BD5E0
5B7DA8C435A28EF529B15DCFE08B3574C57A259F5454A017C6ABC65E4BC733F0
35FDA08CC184B5BC0E46E0963399EB3291F47FA0A05D57215EF9299481BF0E90
0A54D9B875E95CA8166B84CCDE9FB92FEF1C849740C8C0F00248BE459F80EF06
7A8069A068E7AF13A23EA57E8FC91229AF428F3F75B7DB930EFC2B1B3E835432
FF900607AB5292ACE3AA3E3C9EF2EBDC85F22E08AA5E8F73A090F636BA77FF93
6714A4619D7398892A2560403D15CE94158D9E0A16224C80EE6C9152843B5D9A
3073EFB7C783F938B9138E8C63731B795DF38545036C32DF179C9C72477DC4AB
924F985E05B278C46FD719E9EF7AAA945647A6E362F71DEB775597402FE0EBFC
FA9D92F96615A5922333D102DDB3F48F2ABD31B3BD790070B2C4CFBE1A6DB647
2883C06E249B776587432F5AFD700D89FDFED2693BF145E4A55AD2EAD722B6A9
406A69EC3497D2D84B19F68EBF7125FB02920466AD921DE262F020AC43AC01DB
8BD67102E1322FD08D6A1FD6BA7B596708B8642BB1BBDC37026546E6537F776B
C7AE9B8A49116A09BB7F320F0CCD98F2F7DF378E1BABB747FF18681ED0ED8129
43063FF6F488822C5F8D2F556F685C99D13E33BFB7FC73679A38ABB22E10CD76
A882556090D3FAE75852C3BC7CBDBB5EF23FC98FFDBECC7BFED3DDAF5E31C8A5
4A7A1AC26C140B3B0753E044C784060F6366DC230AD073B3113F6A4435539795
135E468F1B89A230D7F1405B0467027EC1E27BBEC48D51C674C819F2BCB72A57
757B2CBFC6F5D915C260859C43D16849F29E44779264257FFA0AFA05C2842C53
4A411593D10A71D2EDFC48E0BA8707B4D7F7F5C3509C0908A0D0063175D39132
F4F4AEEF704A5E8F6E9AD1631F9E304203D296F4D82EE4D976BA9A90F152D68E
756C29A24A789A87ABF7065175CA4F3CDD7CB1D87A11B6393F8133A84721D9F9
171D61D7971649DC9608442D234E87B1C39D7B72329654850C6ACF3DD244C32A
9E4618FF40C490B27180A05AB7903FB71AB68FAD4E316BD62804CA36D4619D88
81BE42A1034C34F4D728E9E820131692793929CC3D4196A186094A7C7E0DD5F2
3035C5460DD417E0B3ABB83B8833A2AF90EC2DC348618B108941053DFA51F0A4
95337AE048E770072ED026236425D096E84DD009F55A48C44EA029E5A810D6F9
F78F44E6284817A248BC4766A7C2E504537523358DE4A06B547EB33806C4F943
CC8F1342F845C151B62E028C3D50BE01FC9CD5D5F36E28DADB469334B60C5894
5E6ADB0C8D23AFA307C8FE29500285533AB7CDB0D34232E15124C570F82A81A2
DF13EDEEB691FD48E705F80B009ACE8C8887E7F78087F4E387C70D49A0503DC5
2AB23298064AE0D1352C83032739BDEE2639DF94198133C3903A22F039CACA20
1AB53CD6DFD8A090716EC6C0DE45078DCDD901074A7DB0041A57771D1E94A269
173938DC242F0812442BE56459CF58BB905440E0ADF465AA599C0B0869BBBBD1
4E58B7FC0DA6E544394563D24D8C87FE0F2722FBAC78768C49DAB17BB6C4BE1C
39B7DAE297CD9ED4A59FE7A1E816B6722C6BC2F91D9E724CBBD53982E2FE82CF
72A27FA101C2A6070046E22E14FF27872C329C64DA64F101A4EBB3E12D9E7B76
642DD67B231032EE27DBE7A958CDB98642880850AD921A5A247FA60A89A2EF6A
B95CAE1FB11B327396D5F83D54A389FC2172DA93C47D22E22208EDB45534F09E
CB07AFDE14287A32E1F9046A37CDCD838852B2A039F1DFE9775FBAA1495A5727
19400771332BF0117106F088F10DE2078E17FA0A86A5017656773E7A78C61557
B9C11C290EF9B8E5AEA2B840DFB40191270EE3BB9F959D9B7C6C2CE48910D180
41571B8D78EC12E8AA4F627DB2E861B6A448F6772028DB8B2E7A2F78DE222F68
73C2C3C3F9B01526D9D71A74984522CAFBAF6CD275B742D67E1AFAEF79266015
8797BACFBD7CD6FBB41FF7BAB0790F7159438C42FB1CFFCB08B0AA19301D76B7
450D4FDD42654223C32BBDFDDBA1C764174646AD7CF22491D5FC5031E42B976B
F76149CEE298FA46B57981087E3035CEADC5693A284FD65AE53BC897EC7BA644
6656F2AB1DAA4C0CF952EA0D9C4176D5ACFBC48D8A48074357B3298C26AF2C70
DDAF438047D9DA1E8AF5F4C16E56A03037B51E02A128DCC9D51903ED585E1581
310C8DB07D32301CC74156D1C73DC64C377C8A4BF7E0E3A0E93D890DD0106D04
7C31F0AF1C2FD75C48023CC0FB7B49A95CD0CED5367C4DDF482B946E7D76B706
43D0BA5E14732681350D9C4D63AE6E85DDBE826FD8145968FC237F12812D7492
4BFED808777D2040627AFC82897B554DE510D2AA6B29A1F6AA8CBB9B5DC32EDA
308F149704EB45943BF2D0CFCFE2E0FBE21F14EE8754D0547D6A39C314F2E83C
3166AEFB08395942723FB853550238DCB92FBB00A1B5B7AE47574A11C430C62A
DD6CC6FB7D092E77F9848F8F133DFA6D2412BFB5783DB3C0F6D60E34BE594B65
D76B155E7E6C88D2697B5AD4FF8BD03161544EBBBF2A1D8549EB766B8E2272B3
FEECC7E148D5FDA02F3A6FFD57952C6B74669C7D9712D975674948A0C76CEBDC
6D0CEE92612EAF4EC556835774B08B04CBF20D471B7C228958EE6827692FB97A
0DD77737F84F944EE4F182641F051987B470A9A853C1E216348AB87B18A4184C
84556C0476BE50CB2C73697EB452E0EAC3A4727E4071C660682B4DD491C419BE
E7F28684F2C4E0FC0D4D59A75FE8DFEEC839FB3116A3CFEB9E338EF0D7B0FA72
1D7D11990750232B6BC61B2733F80AA1938F0353103DB83CCF9143F3A1A25FC1
32BD31F29F0681E5783F91AF0CC0EA7062B322BAD3C04DF2E82AF19552D766E6
52B80E10105FEC8DBF267BEBD2219D8FA49A6B1525AD2D1F56968D9CFA81E057
F008E10F28A51822A85F52582848C4324241222673064F3BCCA1BE7B257D8041
C6E9DEBE123998F9048769253FFE799456B6E5B9BF421E82415746B363938E88
CA30E4D567B68BD03129DFE6B47267A2FA06A0A045D56CDC2C66B754E3D03ABC
8B3DA3F4F6C2DB54682F72DFB7E729238308C0EC5F43DC92B39BC4B2CEB9827F
51E088BEE84F0EAC9889FBF269C4301C5AD39C601FB86D4090A78FDC3A61B057
2821BBE055765DAB0DAC8449427E9AE83CEC2CBB0F5EE165832AB3CCBB2ED933
04D80108A5DCEDBF829531FB2A32A4C0367F3CDAADB9A370228BDD707A5CBF06
87ADF56193C9D6D357122AAA06C55A90405CAFC5E4287325A010FC44DCCA752F
57806D70EABB20332BEC817D05A4BD642DFAD8B91BF0B9EDAC69886326687EC3
FFEC3019C77E70F4D2F5C6D7F44664C00B6ED73698D805B6D7853518F8522B9D
5C229C89D59664FF216C6A67F8D9DF3E4AFB32361ACAB13BACD3E465D094B649
061B789C1C478C407682B48DBE953B8C0761D113BDCE3E6BB97034876F7C7632
A189CF44A025208FBB70137573E138F16D931E1077F87886858AF74DC1D5C7DD
BBA2481A3333A9B31EC7C2C99EDC7BBDFA0CE085C7CFD4C0AC1285F8E759760B
CF5D5152D45E91FAD6A3E7B3FE99CB3C5E1C317DD3AF44E46800FED97CA40252
808F6AEC70839BB14C7D4FD2C4E6057BE5F5C51A24200272625653B01C85412B
F6F5AC854ED369FBB53441591ADB8D2D994711BF6D56A1F0B72D203A7C5FF301
7508DF9821E7D7AE14BA3238EE22916DFC64E9156B8CF2C80FA0840E8FB914D0
E86241AB753C32214F6A8B3B924B6F0B44384C63CD23D70AAD5777DD46AC20C0
D02790EE255ADD6567F59AF6B696839CE77606FCEA4474578526F290F5E3E84F
BD3CA5719BB456D1AB80B6C80C550CDEC09BDF5E10308ADAD0C42A26913DBA29
4CD25E3BBB2FA53D9825348E24246EA73EF03626CC1C0ADEB130863434670C74
8271EF35BF4133E260320CB39E191970C0F0E81DBEF15F134F9B660EFF434CCD
DC96CC25E9F54CDC9E19D9603BB6A93D8EFEA9A41172D1D82E14B0037ADC38D7
A95B1CA9F0B89AE754BF7F8203F0C857CFAE8A868BC658462797316F6A01DA72
24B06AAD1687DBC419EFE2BDAA099773FC7EC5A09403556AEB400D68B231A3EA
D2EF737B1971921741A4F2D840D0F744A1470A7A67AA5644EAFFD983C9197C34
1105B044E7AA81165FA1B97A103553E5AACF0062627895DEECB32E5BAD12A1D1
1EE312E98681F4D4C76D424DABA50B232A8254B034F051838810E004BAD11C17
C7949D74660C459ECD143ECFCCFD9F43D0872B4E25F7C3B591FB74909EE16F53
AB0F444AEC233ED5C726E2A993E726DD72DF4CA18857A3BD1BD163518B55DBBD
DB77866DAEAA53D1D80ACE9C3B873F2050025DD47A9CB1D0192C7D2330D65F12
8C47B2481B73BD918ABF2397E6E9F1316BFAADBA9135D64A7DDEC789195D7563
E0EFF2B4D90FFB8BE2F427D339D1EEBAAD58B0946C6926F13DC4B76DCA2AE368
6F7DFA49F81BA6B221FAB4FA67D091A04004D2AB894E7DCC7BD80F2E8E13073B
30FC32B57DC325BEDF738EB6D550863099C9AE6A1D3DBB5BB7F4F240C9426E90
F57925E6B90462A69B5B7B8D3A9A81B9C92F57789B62A14E6495133A1B3B110F
97D9D17DB56D7B6EC1C3314567C88BE2A4333B1E9964BDA8C46E287B98F739D5
5E1AB926E5F1230538D96AB2484EA11C47338B6E89C99A848AAAF1BD143560B5
59176CAF28B78D9C7A3C481BB8C9F53B99E7228ED76DAF61F3D5E2E4A17D90AE
341ECD71D05287741F6A99089C9BA6489E983B2A4E0340610A27244970757F3C
25CFC3E853E2FEAD8C72144FD3EE6ECB3F8B59115379A09AEAB66EF716591CE3
5A9A501F5CD99DE77FB500ED2E8F5FE7FE5D7AD580FDFE62A9FA3A22300877CE
F345E6A7DF0D81E0B7E4012410C843955AD0B93F9203462F95B302B8CFF733E3
70D464D63141B1EDA0E6FFD1D82CE4D084352E97F0930DD27EB45DDACBAC1620
BCE641230920C23A8013455F4E2CD0CC8D66FEC329D81A7584A5D001C2C3E423
50EE4F2F7C6F4150C4774423E8C99C28166E5FC3BCE52C110091E2FA2302597B
FF0F12D7DF5CE219716715073172190C701B91AD54984598F2AD46FEE3D68A0D
0886AB8829B53BCB319FC0FE2D9A8CF214DC85B763C354E8017B2D6FE644D630
3E71757A8D901A868000B4A48732764932E6242CE5BE6A645C2653FE55D062B7
86BC3C6651B31122ECA9329513ECA625CC1C5FC3AFB291A6B75A593E3D12A2BE
C0D54AB4B6D20E345CE6C281F4630A7BA2B58607A2D369E9DD9EDE9AC14E4FD0
9695BBDBD7994FDB35C5E458C370725C45D5CAA5AD4EEC414B8DD564DD7F5D08
4F814B77D3B6731568486D5A0CD6BB356544510BE20BE1AD4B3E9909F220E99C
367B96C474DF3C2D253F9DCB7A4589A0257051C54716D2440C2CF4262663EA21
6D29A0CFBADF5B6E4123196031705C8B89F0F7E115CAC9E4A605BC8062E675FF
B48A0D1AB9DDFE6A5A10F02B31813B86412505B6FCA5AB5BC8937AD9FF4898D9
706F64004DE7F40568FC538A0EA2E76E1F62790DA67887A9CCDBF093D02FB419
CDEAA8924DD923B74F252664C67A0A944FBDA4B3EF695BC512E973F4736851AE
BB3A3A4CD3DFB898D079614C1B7F05AC96A5BADCD03553A596557D8F00A9F854
2C98DB691FB17E10342EFFE68AB510018ED7043C7A287733031776912B98D449
008C02ADD520AA45C62BE1B20F349525DC3AE759E21AEED1C09E800EB1AD0DB0
4821702D0F93FBF513D7B85603C8A0F37E548174985162D53910DE1DA60560F8
4973A847723B6150CC469E52D42C8B3806FA06180F1EFF5CEA5ACE58B4544EAD
9C73A170572C5DFCC89C2AC26815E0BCCFFA46DF3A00BE32F96FEAC9DE382AEA
0E3AFC6B2254ABFB157B47010714F6F7B0126F2E1EA686D7693BB1BDB187E148
5AF91C22AC891A13A81C3D479855407B719AC4CFD53BA029891E8AF681EEAAB7
2E5F3A5976316C481FA61C4295051CDC8414D5EC6418DB8179EFF78049A3C48F
0C0374C00CBCC50DBBB4EC8284631410D4156C420D073AEDAAB2CDE3633FD159
C855C4CC46FA71B56A2DA46A21D05CDBEFBD8609CCB13F0003D6E058DD67BCBE
96D74CD7A6F592C81BEDEFC264408C6DB1AA29867BCF8BD9D7BD9309E6880407
EE8ADBC6FBEBB247D772B3A60FAB4F71B7A09444BC6C666BED4DDD31720C2077
25C84E675EBC26F583F329C433B95DC6920785A326592D07637DC90B7906C027
72E22C605E9F3240A1971AB1F757694CB3A8E5A15E9A006F8EDBEB4D0BAF4730
0B80C3F944CF3C1D8956310EBC62B5AAE1C61E6A8BB6B315DE7285F1C1C23AE7
A5F5A4BF996E234AF26AAEAE82AC6B0A5F7A74B32846561B4413C38DA7401609
733F47D9990B238122A95523160A6ACBF9C2DE66992CF4DAB3368A64C98FAB5D
93DF8A00379FC4B64991B4D1FE7795ADD2B571F1196A1FEC67E397298427A0A7
A59C4ACD748A13881C130EBB0AD8864E1C505E451409F058BBFC0301087271EE
7DCA9646056D3EC28D85BB53EE04612C6A0D8E6BB90C96ABE2D5ACF89FABF737
E42204D7CA411E72AA4240AC015884EB30C9C000F6505A7C5AE95D9E3450E72C
99406ECD9808EA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF28C354BD22B82
E32D8BBF1504F8232EF00DD2F3FF5C4868EDFA7D105F375EEB7585683D08F1DC
C78BD17C2338A6A609FDA9208916C644A7C8263F802B6D2B8A73C45BA68699C9
4A7162FA00F6E05E273B5DB89549315DD15AD9CA3BF8D4CFF06C5B946E21D0F5
A799CD011CFFE4C95A60612755143BDCEFDF9812CB59F95F25C76E0550BBA4DC
59ABF1FAA17C5B39F4A20A3DEC19163D7C748C43B33C0CA22F253FE4E3D1E56E
432F655A8C234A3016668E20EC7F2BA3E5D66350AC0FBDF769E54B11A5DFF777
068CCF595927081BC5306B48BC1B97A9612FC1D0DEDF05CDE50C20D2B4169ACB
7B7FC90ECE99FD80496C27174AE0C3C52DE79214EEEDB424D767D0C64F1EBEC9
9C7B9C47E4C03D01CF167B0D7BBBC53023A12C5B3581D8F53166583741122907
F0A3DC00C10F078073E90FBC9686BEEA7F75AF8CEAE50D32464FA36AEE0F3896
A254B125351B5DF203CAB41F0E6C48E1704F311F51451DD607AB3AB682C58106
F3A667930EA8EB9092F0767F0D690399C766B673EFFDF8F0815D7853C6F61278
341A10182862DCA51D411A82FEE238CB19DC5407033A584AE22BB73A9341D38B
1EF6BC34AE92E91E3DBF196F7BACD52EC4D75F1F18FA11E2F7907B9626CA1660
9BFEE67DB56CFE2AEF6BDBB7350D5408C621CDED6AC22293A666201A11EBE968
6B895C8F3034F885A299EAF758FAE0CE78634283778E9C7F438CDF8944DD5A06
583A75079194054F8C01A6C78EAA7D1909D5833FAB8D6671564F796B070A2B36
6EDE5723EBB35773DB0933927DC21081E67E5DCF4E45334DD99AB786A3D5D0C5
AC216EA68F8F7D3A5BD929EB453790B464964479A2AA279225ECC22FBD3944D1
6276BC46A74DA16147589A2D3DADDE9BB1A63A4047EA20DA56089E9DAEC1E964
3545D179D97E7159C9710FD0AEAD6D23C03CD003680E92F0D10F566B7D87C01E
D5E6E499B7B83B95A95C52C13894C9156315E5AFF47E4041A45E57AC8C93AA8B
50BBA0F69C64A315706D38591372BADBFBFB4330B8E71F816068081D325833AE
DA96C0DA8C36DC87966846D8C0539B41792ED8CF731016C85A4E041B6337B64B
7D1A70D83A06C101AB379CB47D6A72839E770A0ADCA647E66B811F82F08DFAE1
979E9ADB992C57D613A88327C3AE4393C1F3EEE76365A67C3B6481CF7F0D9D46
1C91A7D5DD8F584627AC4E6D2B4CE0108583463D74500BD933A54CB39EEB6372
778ECF5B6C0C2F014F43B38058440D82194CDB01A2CFC41133C69AD75946DBFC
C748AFDAC96839397CAA9C23D0F483D155FB93C2941214C2D4362865D0BDD0BA
6044D3F5A6FD23AC4CE9B33B14DB382839AE8C789A6339F7D36DAFE163824896
DC28210A0D274A7CB5AC380B1B2006B28BD56725C2874401030A5F9309712901
FD044F3AAB455EB7D85772D6243D160A8397B5A160648F764407E576569F1014
CFCA5DCFD92F563A806FB4EC884B26DCAA25E29F413C3847ED2E0F52C74A835C
5A785E9623F0D483091D6F95BE42F08A3B28787BAB2D5F893EE00D41CB48E35C
E9C08D0BDC344C70D5D669EF4E794EF6D6320109A4205CFD1917BB1CFA80C0AF
8782C30F4FBCD5010D94DDA30568C75286BC3BF85A310306982406539FD83FC1
2EBA31479C7175C0AA1AE5CC6C35511ABC869432C6AE3809D7AA9B4D6F47B6F2
481AA6A33920FAD9A7F7A6CC1703EE06340147CB1CAF89339AB2D94C2709E08C
BAD9A1926DD364A1D0A4E68D75EEE2C3353D6C8B4E84FCB8FA302C68CE685294
FFE12975EC0DB26EFDA3A69D86214A71153FF97E5F7175E0BD4C2ABA9816226E
B744128F41014C24426A003ED5DD6C3E637CC8580098961CD6EFEBC99973D557
51D40F332A29D194C16B0DDD9A95990FB45E3B2D0748BC071FC691AA2F776075
4D8ECEA334EE267256720D6CE4B73D307627ED3AD4456E3A67BF5BB49920F6FE
6620D699A35821CFE17E2DA671A7FA88213B596074FE4D777E02B1A7D10B424A
89E22465768238A66AD71FFBF5C9832C603CF5D7E61A400BDCD15EADBEDE3875
523CDFFF0F39B7441FC2EC1724DBCF6E42D06B418F7CC6D43D433449346D9761
01B7018BD702271DEE3CA37C242494FFCF3F645DA7FC59B541513CD6FD08039C
F40A1F5B90A8BD1ECADCA2FE214955FAA891C7AEC18EF33485035BD4C47EA645
1BD30E3554F65A2BDBE89B6F6BB32B219D9AD46321E7C671EA573815316CCEC3
91022209479592F06BA64BE08D6598398CE326C2456D1E107DE6170983DCD307
8016D4DFD4FF3B18C26A2199E10877DD58E13BAE54045B86D2F5370A465FB06C
300DF81A50AEED70BA5C0FA9698333D899B7176022C6C28FF0534F323D017CA8
EF1D24E6F8DC956BC118567857EABBE95512C8A4B70B02E0337C16ACAA3EA98A
B2C46A9B2A4C8EA940877B0DDA9140C4E646BE61289705369D116B52AA526F6A
1C00FB05A67CB36935DFC63BBCC0E1BC5DE74900614160090EF1DC1CB0740B3F
A1B24F6630F31E90651D2B891B54B03BFBB05D94BC32BBD9B63477E629422A5F
487C494894F6BFED08A0AAA58FC2983315F8958915067FE7062BBA9FAE457A25
E67407D800B810916A7AE03DCEBF228D6B9AA2302F0E88AD035258FE8F780FE2
592ED35A82AB818EFA495DD7323A51ED863301D74D8DF7CD81DE57903CC06647
2B224E826AE08871FB0C6781B3FE6701C98DA905D4C3F936AB8217A6702C16E3
ADEE0CE8AC41C5DC52AB6337FB9DC5D77D26D75AD448B254C7F8A38BB0204ECC
15FC1B770CFA27C37105B70EB45F47522BD93ADD46CDD0C1DF4B83A1EB775861
645239EC6EC6B59F4713A7C980D725B3C0CA9868A1B4B066C40F22F2334343E0
8EB001C1E350E571D93F96910C91BDEE18E063B395DE65253D305D4132793CDF
8DB01750F4DFB79975EAD0E79B4F1BD1D7AB84C2DDCF5DA974B2068488AE47A9
F07F8CAA187FFA24144AF9A62F7A0EB816225009664E3D8F6FD9F90240610A27
244970757F3C25CFC3E853E2FEACD8CBB223F173BD86C842D1C9ED10B006C949
8D723A68B1D60FE747739A0C92EF6EC74EBA6CB20D0AC3FCCDE0BC8E84D3DE06
6D920D3EDA7BFBCCA8E99A035B26D05D07B44B20478BE98D0CD6403A0CEE8239
1AA72FE8C00770E9B23A86621421E2B0DE3A365F9948A115239FB868569AB5C6
DAA74681BE30C4E671CD96973F8D37C19E11F8B166C3DB5DEBD271270A478AED
9640392137548DA35070142E2E61CCC0992B66DA71D8BE22836E6DE06A5515D8
2F088F84AA23178B60E48EDB7B5CBD84F20047CA9F7893094FE7016C6F59098D
8404A626401F96F39B11EA15DCBF1EB1C95BBFFA540EE5710E884911F452C33F
9F9DF3BE8726073C5E069241A906F0EF15886DFB61E504582F57D49D8D3353FC
7DF3726A2A533CECDE6F535E332DFCDC136E434D7FC5E7710559B91756AD1171
ED381430E08E449796673B540B41789B3DDD14A4167F184CD381439F809D15DA
7739FAB5D8E03BD8F283FB6832C555B5B4B59F7D94FF33EA3281C5E352B4D7C4
C1678905683A4BDC963EB1AFD6F14F0C146E0F13B03E76B3898D6192E2E7B992
4DCF25E9EAF730DAAE9F50BA70DAE151D67CA97D3CAC875F3B157CA31D94764F
D69135A8315DDF0F75863E037B509120874BA14374056EE741F16B15872C2FA8
69F347D7EE2A6148603C8B5BDAF9AB2831BA64F24CAC53C721060702EE12C664
1799994DEBD48FC17FDB2416870588344D7AF34CE6BC647478C7F346027CF320
5297A4BA42AC9083F142DDEA2183744D33C42E540585C6ED1F473C705AB25634
F19770334684CD70084E2DC8F6A6210EDADE29D28FD21894744C824E290A945F
9B52EC20A9D8AED089AF77F0C5D896228A3AF8A96328F8128F24477B376266C5
85B6F331B937BAAD983885EC8070FECE10949E17CB75DE8716B9F5A0F4DAC755
09A4AE8984D365B8D8D3E4469C5245EFF2C58EE170907D443A2EEE6DD73CC688
7DEBD6D700F9BD7E18A73E8AD3A4505CA51567DD767367DAE1B682AECB384C14
88C4D37BF9F6EC90F8B81FDEA7E93EE59861BE49BC7317AC222D65C592DE9810
EC5627944F56F750AADA4B5DD9ED6E3482283ACB506A2D6812D4676F3A6464A4
14680F9176A05F32B350E2CF46BA0E8D0120BA2B536DAACE18F7B182FBD0D0A7
551372F78817D52F17093FA3D9A8EF33DE988FD370750B1D2B370671C52CEA8C
23235DAA4CAE0221E2C18D9ACEC0622533CD5D4DE3E05F0F9CF8E2B4685C29D7
ABC599CBE21843BBCC7A558C0DD055996B79C2E6795E23452881DEA6255133A2
77D0926800D6F7BD0FCCFF837E1CD0A59D88ABE3C8FF2C6EC5CD91515816F305
001A0B464FC379602573F4AB0971937206B1397E32E2D63C350442E2115B8D8E
EB7C0740BF746A5B1D4AF52095EBD82229A14EAD28B99B7631958614A29CCA5A
FD1215D847550DC0F06DD1F83FA508479C608C27E76C984E054CE25800DD2563
1C8F22059433BE3F3841C330566E255934EAE6058634C9557E8ADDEADD23BE80
A5B9A0DC2313FA0CC11142333E8215A34BC00037E6334A6F48BEE2088D764650
C991549293ACCA9C3C6AAF00099F6CB76362A8F06C296E4F473C5A12286FF0EB
D37E268A90F71ECFD5C77139FFD414E8E1F200A33CBB2E3CA5705502F55E4CCF
73C70D8A64DBD11D7A52FDFFE8A2AB92BED886B0533C7DB51166E1A10AF87B6F
4ABF63C36147A10C05A9672D2FECAD603B41B8D938169C832680FEDF5BCBAEEA
8FF205DA3C3FD40709EACEB5AC116266894AFBA1C099D37DCDD677A4F1EDCD09
993D20C046089A98EA5B70E06CE96FA647A638E474A98F1EC24FFE4A5B5B06C7
4BA977CBFEDB6DDB05374C2AADAA24486F9A831BA1179B2EA3602AFE484510FA
428A10857D35B43D4347F6DBFC0F0814ED0C10E2C303A527A46B56355930F7B3
AFCE68ECEEADFDECE3205535F92D8DA29782A1875C6C8E74B0C86C0D3D8F0B47
A4DFF91B1D7636794038D4BC5D6DABA9931AAA9C1189EDF134C6DCECB2AF4C92
191A5671FCC39EBF8FD0859B01D3016CB710B5E3B6C185648120398E67E3807A
6E29F05004B5D058DAB8192EE7F657BD8752A46D2BA1275059BFB3F5AA27D10E
337086144AB09286BE38216401CBE8249A14C37B54C54CD69DAD2A5C21831031
0A9CAB0B9E7F7F265666D7579BCEA6D053FE58FA2BC93F3B0DCCC0A15C2DEE57
2BDA14D8BDDFCF2743A15F8A94EB0FE4B23C38E06E376282C94AFD7ABC1A8391
E60EA95A7CED12C18200177C729F813D56D632F88A4EF310FC622CE02DFCB882
73A36FA3EBC622FD1E0B5232FF2FFF8A04900A54D9B875E95CA8166B84CCDE9F
B92FEF1C8041826EE445B809F2ED78ADEDDAB3DA4F96E2A7FE57C46C0E19C6F4
5FBB3B6B73E80D855F5EBFF6A5BCEC484AA060247137244823AF5104CBE95341
C48676342C1C7A28E80DAAA5011FA002E6C13D9623AE2DF25F912B8E440FB978
F911AD7311DE1E29EE4C7B9F4F01D64EB629A044A2588E6A907AF195C31A7F80
552A353CCE50E1E3D72B69BF02D0E32620F3E8A2D06FEF8A8810791D8613AF14
3238E2040E429B59000BA012AEB09790C43C27E56DD6F6C6D091C559E259D228
2B968CDDA8ED63036596FBB857838615E18D79E23B34A5F9869DD15187C07058
BD509DC9FA48D9DA309EC266D02004403382F61847A3C8407AAD3393806B86F6
8A2B24998E20AE7ECB82DE000B129F3854C9EA86DA22AB40A3B3886A6C0542C0
1CAC65993A64ACE274AA38DDC172B3EF41D65B6506B2F15DBECE206EC6FF852C
85996873C9CF8A1E6C29DC4365DC19DF87F1343CB19CD1B9C06A2B23E1383946
EBEB0643763B57881B07218CA48BC688FB299CEB1030A8A9959F374E98F25E5B
A83C69FFE8C0BEE3B551BBE0072CCCFF21AD170C7C563CC2D2EE272B0674040D
7B82B7B40EAF7A1AB9F95ECC779DAE2CFAAF3F4C93F940612A0A84F41E710E5E
82CA43C90858BAD267D6FE0556F8162ECE8AF2B60C0C41535E3D61298E7631CD
F0617F4F828AE51C170C7A04D8BE6C48DF468FAEF6708D4C043017B3ED9677D6
6895BD3EA938DE26B6844B3C83CC4049B8C28C869B546FE345B5E929CB01DFC6
E4AE406203A42C91FF483DB7782A2A2621514057156F6626912E1EB334EF1409
4BA98F72831C12A52AAE64EB28B620A5EB34CC8E5148BAC268CE7A4C9CDC6322
6D68B6DF0E4167A1A8C656D8CE84551604753DE51F4F79713F761AEF5A91CE7E
B133557074C3779C8AE4A89B2B8ADCAAFC569580B22876B1B77B74902F732C9E
1B3968F594AA5479AB954F72A5421402DD840594030B26907E5E4045ACCCA8F8
162C84F546AC81D5EE21179FDFFF655E4CFDAB7EBDF1D97E151022D84B01FE7A
F62D56594BD31845DD8EF67D1D889707A0104867B579F69E34040E2AFF508CE7
AF4B0D544E7517C8F2B32386B324FADE6141371FF10F45510A4E9ED600388436
00D4F0BD900D7092F4948F51F4FAEF5394E41620276D24A801FE9915574C8411
C7E91D3422B5B70D0C2BE52C429D470DB038ADC8663938AA8052854792C3AB64
0B4869F16F458083B608409F1BC136BE8BE912F59E51FA638AA4BCFB0B711A77
1548C11BFCD146DFF1E58A421AC4E537FF9D6CEEE5278FF99CF84193B36278E4
40ED6A3B0EDB2BA4B97A09D1EE0CB37A713AE355662EB528B5FF6F19FFCAF662
7099C08DDE996F9D3B8A2E27B9D4B57B58E69FFCAD95AC5B40D03FA898F0FA28
04E0BF03B9A93E9118B3322A5C34894BEB40BEE8B5C55D9F5CD36D0ED4A3681A
84D170419B1D9D825F30DF959CEB483872C8D110BEB9C0145F4AB07BD6F23252
7036E2C4C7CE27B18100BEE64228990E597E21FC63BBE8685F311D94AF5FF382
082B46F42D4E1672B2076DD7714172F78ABAF2A58D8467322EB65A2F8BC60506
05CB87F380D793300C4BC9748F5423ADD67C1631E60F3E687ED7D9A4A0A2F32F
E2575EFBC3F9FB951E4C6A881D35642453CD33EE1C0053B7E9268CF93B9763BA
70C77A82B01C2B17434DCB6C8D1379D5E50809FC7E1269F6B0B975FC09D8A2F2
582C225B67573891636ABDE23319EA7DCFD8E886807DCB1F4943BD62EB9AE82F
B51E7BAF5E238FBA0F2773C689C22AAF7BFC20B637B2AE97252B52101B6F33F6
3BCE5BAFC02FBBE3350234FFC2A7A209C7E1DD959DC6DF72A6451871C92C16A6
D52C69496B7CECF16B8CB91D02A346EC88F3B6577184B17C8320CA028F402E96
02317FE2821C8AF6D1E19F8548D3FF177F057C58A40714D7162D4B1870D2C020
7AFE2AC4355EDD30E62A1FF4A14E4B95064A073BD9C333C710AAABDD27CD9B26
44983B1A5B45B1EEC8611F427FB16BFFBBEB73850E2199B8D101CA307035947A
0E57EA057A9973974AA074BF8FEAC4F0A1B0588A55BDAD410D13310D332113AC
DC8BE5129A3B47E91767C48C39B007A51A697A4D8A360D401719C5FDD290F31B
65901957507D4B848AFF203EC104AB6EF99A33498D436F30764344CCF1B9E47D
39540E4B6477A00B8B537689A75015AF81B45F690AFD82865D0FE2D708B72255
0E417E9CD3E5580A9B0D04F36C41B2F6722187631447C7090E857AB029E6C751
23998FC42D3E0C3F20960938EC7BB696C8285F78C66D154289455C5FF2D23C1A
5B1F0711492679748AB15280AD4B3250A866C61B3C0EB1E0A4748C7FD8CC83AA
4C7C9C61A51649E73416E15EC822ABEAAE3BF5ED74076F822C416646829BEFCA
4ABD7AE892C7DE43E87335570FA82647AAAF3DDC1CB2A8C542EE753FAB7DAC39
7C6B87F9890C273FF8D268877C3A3DF856D118A878A8B1402116797149C20FD3
6B31583A27477E5AE99A990B727C6C7020F14175225EFEA39202B49823FBE54A
90B12646B3A5FE44632BED79898DE54B5A3A88FB6FA8D8AF2C8CD5272AAF5C45
A924199B057DAC83B6C0EF3570BCAA8F5BC021A509F222730CC663CD9DB93FDE
3F8DDD32A240FD49AEE908C7972AB2A420AA55B0CDC1461479D489B8F6CEABBD
6962F9D2DA9E68A4546321D9EAB7B4E5B768EA4B1F96983772097BE3F07124CD
7CB786AA6415ECAAE9802FA36E4096D06B36932CD8441B683E65E160F7AECF21
139577B58B735C1F44C5DE4F3C19A196F5CDE323CFBD7566DF1B34B583A55D56
5F917A026454C526D89B6B462950D2FC86826B08457AEB9285A0E356F6F36D75
7708B42A5E259053C58C8DE2A46BAC47574A11C430C62ADD6CC6FB7D092E77F9
848F8BDE78CCCB91CDD1A857949EE410BA7DCF000BA5716D49952CA450DFC5A2
3E03EBEAA640CF23D89D1C2F0FFAB20C896C7B0E650388639A4C63D7AE52877E
2F61BEEE50811354B17143538D29199F4F9E35E8B46907F061765B06030021F0
556787B430782ED881FC5F384EEDA74A89FE970C43376BEA19619D33120D78A5
BBD1F4DA65541F0625DC1A4B1DF7AEE1C8D59D6FC70C5628EA55B38F9C7FC47C
9CCC20ABDE11FB9C157BA35862BC4E1B5025AB88EF4271A8D23206617653EF10
66578DBC012947096036279860BF8A14AB6E55B0B851D2FDA257448B557E0BA6
8BC5450E68DDC518F5DEC9963D8500CB57D81CFED0D87812A29D535497FC6FAF
F006765DF51E5FE8366CFB10FA8010692458D1034D72FC882D95B42EF3C49DF4
26B8BC1D4D4963B96902F3A84599D73EB3303D7B74883F7B218E6C50DB4598BC
DE50B80BD2824DDDA8CF5C7004C18A2457B6F0EA299D0CFAA81A8BE845F00CF9
C96E481151561C360675567594570C1D1E194D5602761EF93810FD0767090F5A
01C7B35DC8851C4CC3CC5FA14AD45C72D9ECD20D18649F1C1EB7535779A5BAB5
D82B422345FA978936D0F0342EE72FEA3514606A3B03A8BE0F77622E40BE476A
FB688358F195BDCDEBAB71622D0A07E8863421C9AB6FC6D10AF305373E1B87A5
E462AD7A71280FBD287DFDB8AA771AA1FC2888168EEA9885E3E420F0F3B738D8
FC6479AFBB1004BA15E3E5D0EE470B9811A0F6C4E75A98CB068B967527DDBDB7
956DE8EE507F79A3A9D5FD06D04B67FC7D439064234DE4FFC410D7C7DD6EE3F9
3E9615F917F93D84F2DEC7C169CC9DB82A8970B3D7F571679D3540CDB376F36C
BFA9240A07421DD8A51DD7C8788CEB212797BBE778DCDB2D0F6726BCF115DA15
3194C80D61BC6B73CF85EA4ED929E159EB2C553CFB252A9F0091990C201FA4DD
F49EE7703D9DFE30FC3F11D351D236C42FE7710F5F10BEF207CBA3018A2E8F6A
A87BB250885C4AF4C0E9655171298F07DF376DE565D115026CB025566A104408
EAC417BDB461014FA86C383A1C9AC8E6AFEE3D37E8641DE801976EA3C2E3D326
612EBF72727FD834578423B70ED44AC6EFE221ADB5E725ABE897F68636A67572
9ACFB3F74DEAF149D7A747151B290C63EF6B69127A8A243FB3555C3D82278BFF
EC6BA7BBDC9D7951E17BE8F18A9C32D2C4B7F7857E7F55707FAFE49C9CA1CDAE
CC0FFB2C3B2EF0396CBE6E45181CA6A73AEABAD4CD2EEF04BA15E3E5D0EE470B
9811A0F6C774AFA5C4A05A721D82217626167E369AC65724E0E44A5484446144
E22D8BF12DE44EC69231F93CFF3D70DE7A9B85730A4930EF1E3E733292C806C8
0C8865645C64B5024C233FDC93CB79DD476026C29FA3779933221D8CC6F5024B
C23065C4640FC87709086E4A434207F479BF21B9F56FAC14CC191D57882855C3
939CB6FA9ADA4A6ADCC62B18FD0CAC2AA46E6CD682FD69E18FC6B682CA627B73
B9B88D345869D96C57CAFCFA148BE140BCCDE6A230A4AEBF9FDCF0D0C98D97E9
993761E296DCDA097E83CCBE2B680A764BAF9085F3C72EFDD42EF25EBCB78706
5A7858601358A043AFAE1A3100D6786FB1A1D005D5736F4634DC607452CAAB95
6FA3C7626C70B16A053495F3FF6B1E1644C74DAC6FBAD49F35764DE6FC0B0215
E253BC0776F891DC1CBC2613C7770AFF963ADCA396EB26D631205685F1500FE9
A95034D47818B8235920A92F4F2A14521FAFEBEA4F5827DED76AF27796B35D19
243C56281DDF1B513A2DDA4538BD974A1B6EADFE9F84A7C5DC897691DA1B1B82
FD8797EEEB29846B6DB84DEFD0C7F2FBC0CB89125BC27FB4A991C45634B477D3
BB3732E514A5605A6C1AA0E3D26C56EBDADA436649A0E14AB04AB9A6945808CE
84F249A1078F5584B2FCB41823CD2AD462769D48BA511D4783F11B5F18899CE2
2DC92237B4D55F44FB0E96B65715DD63A14FE70BBF7EEA5114584A91048CD1A6
C1CEA96610D95AF6BFA7F2CCDDE2B125F5E5D26E4F14F3367206AA0B64A69224
1F315C706A63D4E868BE022AA3CD41B29EE521879E4FE07A9BE5700C1367B3DD
0FDB073DFA597ACB9868737617F9A60D1F58E74D0932FC2C54B227A0C18DA8A4
3ADB7593E98E5E0C7519713DEFC240F3BE68537E823DA67C5F9FDB1FB810916A
7AE291DE8929EE62456392E5DCAD96A497438F76E7AB578A95A855FC4DE699B0
C84C35A5F80594811FDCAFB9194EBE86B406DCB59972FFBC57BBBB493F2C1B5C
38F173A0EF14688E194E6130736AA33A536F7130F3FADE597409DFE07E117F0B
66805822CB16FB32A84F1FABBC89D5229645B1E26FF20C75007F00EF200564FB
5482E70985DBB9238247687682311E1F884E50CC3CD25E9119FD1EAB18A643C2
122F18ABCC0D24CC8C08E7076D8D7079F3C37D867848165C1548740C594BBB15
7B9A42917B9446675A1F2B08F023069DF8D162A2B4D019A25AAE5399A61C1AC7
07FC95792A8A0747F5D2FD21399BDC251F43208F0CB337D6299361D62A2BC2C0
D495735892DA7996380563BF7A3B679EA85FEF772477CA487EB09D0EAB3B1214
182E7DB08E59E004E2255DBDC83F17CBE5E5D74E6D3B251A6567FBEA785D838A
9506C8D316FCC00619CA95CD8F97EA85176570BCB441E9B745094363CF0C68AC
833BAF4B22B26EFC197D4A893A5AE4830BE0482714F6E6F933D8422CA28FB1C0
BD55AC3604E77755612374EC339DDFEF0101A9CAD4EFEA168F36C992C21514A0
06458A52B68E702ED7D3CFD31F6D7E24E1D4BEBBEE0A1EA4A6CB25527C6E4A4A
A10330C6CA3C425E0FFCAA50A011D7D48BD7C93BA0ADEEBDAD503879F41914F5
BC01F71F66868A34CF43BEC1D6C20C095B5A1D51B81C694F39C1F8ECE526BBD5
1C74F34B0DB7C5804350E7FCE53CD6F6133FF1AAC877B5D434222191CA0DD15B
477D72FD4AB3216DF6AC30A36A1D6278295355E2CF2F6C4C28FE4D8F7FF429F9
6D0DCE41EEC1EA29EA44F9912077BCDA74BFADE0E3863F1193839C6B39CEAFB6
F26D516B5F08183595C8E603F6DD62558DBFE78E0CE89680429488EB3E098A4A
EAF3CE1FC15922E4C382719281C0BAAAE67903B8C5CC99288333EFCB59D45103
580B0A2B3EB9B54F8082DD9282BBCEDE2460DA6B95BBDE9D32F7217C68D12DA9
0476714F26416A8A1FCEB0ADE82774B6C33B296B5303BBD0B9E135B8FC0063D5
02AEF1F6FF21F604300B995E8562B37C85E89093EC89B975E7707610A392D206
BCD88DD228EEDFCA2E75FCDE835DC0BBB7F7A489339AB2D94C2709E08CBAD9A1
926DD364A1D0A9E919EB0E1351CDC979DCC5C686D4C9E96650E4FA709C42C3AD
A4431436009135FFC380700782F7B3423A172221080BB98FB9C5968B35E4D496
E63195374AF98B9D1A19B373ADBFA7CB2C670B71BDEDA9725503C98440DE5505
84C49D6187C823F533087883A087234A8A27F23E78728E1DED23AF9D42E7E92E
35F3CDB35836193EAAD4C385278246E7CA384F311F23DC5A7F7DB374E0E3D066
C7B59D4A6E16955C6FEDAE7B54D6545EC52D4EF5DA2E22A67FAA9DFE630E9473
4F833D44CC266756FA0907298277594958908F5B6B04D4284550397AE68035EF
3FC6CB42AEE39CA3E37429F89CCEF6A0304CC43B7F5676C0CA17EA9FD601A8AB
75AE5D74E63E149EA56A941E4DEBF136186B257078AEB61623F35A56025DDC8B
A582214CBAD469249AF698F7D8B6A5799404494857CA9A4EB40D5252B91D5A5F
4C5257864398C2937AF2B1EEA58832DD7CF5C1E291046730F343637F1864CE42
3FDF8BF9B3AF739FC73D34077A7F6E0E960691FCAC3F3D018449DBD45BD173A0
6B84C2E4B6B97901A44E7A65D278EFE0C676826DBFC268474EA5351EA5ECBC5C
34FCBD8F76C58F12192251EC2B1F951E0C1B50FC5006E25BA750372C86A03618
5BFC21BF8406A4777E67C90E0CCB248245035701173232527227875ECBECDC45
A5A65A71E268231C07EC0F3AAC23375364986D76399E2573FFD3CAF3BD21C445
F6B6F94A5018BB4D90F6F9B15154D3FF754428AE15D0D7F8837386F411DD70EC
6C98F92E3A81C8BE23BEE4B7EFC230F62253BC10B444AD5E325197F08B2ED6DA
F07474FCDF67A10B68E98BBDB9928FA04BEC5E4D82B404A97DC2B00BCFCAEA6A
17C6B610BD103014CDE75223E802DBEEAA6286AC239561F57B4EF64B20C24ADE
AAB40D5907656CAE0CA078000D735AE8A982A4653649B7CDCAA534BD6F648EA8
894AE3AD1438DB4DE50E89141C650A31C0BE767387DABF39C0674D0A76D7A116
70C954BD857005737F41AD8DE10D421792D007A20A59F5B2C87E0A311C94D1BE
710C3DEB42F13B7E18E7DDB7F2FC5DB696A502E7E017A5BEAF94D207F1F6682F
9E2E2B7C7B651B5DD386763D25AEAC105FB04A8A679C5CD0E8E6EFAE65712552
4B08C70599D50ED87A2BD64848780E53D00D181624C9ACB03FEF3B12D9AE0D8C
9DCD94717D690D39CC09E9FE376894B3413FC4E6A5735A05A2994A025F51823E
E148F5FA962946E512AFA4DC695B4815384EFE206566EB5AD7830A185342CF01
862BFD3E98B4D80CD11EB05B333C100B5FA02EC334C2D5B3B4BA663E295E44BF
C7EF4B8D454E2988006D5C45826C01C6C70A9A765A388743CF6E947BF7513391
C545942A48FDDAAA45EBD6D03F15837AF00F5DEB2E6DAF0D051A316BD2CAE43B
74138A88E7309D78BEBA5EBBA5783800C4BA86B826B8C31F36DEB33BEB9EAA55
755A7387C5D9E18F3B947051B79AF05694295846774C4F1FFC2F1A71CE095C04
A7862B02A33751405B9E403572E3F65D8F0B7179BDA03F13EC8EC55BDA4775EB
F5776E542EB0476C9E361863663B3FE09E3950B218181696FA324F38CBEBBA78
6C20EA9498086CC5076CC01EF28AC7323CB01566F796610943A0861C50D770C6
844E0FFBB70B97A071131B3CD54CE316DA95E309F84939C341850DD80FA174B0
06E22F7B695E39C3C7B5A4A2A37A6DA1CC61EE5851FE56AA3A8E5B13784A1D3D
1A95F35023BF96CA673003F26683522518E25D790E6F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81E
C655DFFD1BB283F3C5DEF1495FF97C798C213036AD02BB07FD42EC5932E79727
ACF464295E75CFC635036CF27FFC42DC2919CC167CA4C2E673040B7909AA26E8
123B3D9F176F6510B9526E94D4E38E62F8B9B96E2D2D51BDA2FB7C6992B79CD8
3E40292315B0EFE711C8FCB37968B8AE1BCADE6BD8A3BA1009B34137B90D924F
B2784C9E13F0795427324E80C175BC99140171AA2F40784356690DDB982F55FE
EFFCF946C6DADBC6A907C7DC28850415D9AFC1C8A868801B990CE2D26AE40CB3
4EE0281A60063AA71E48DB8A35E05C2BEA1ED5BEC68717E95B7597AD7CACDA2A
6A4E8808BDF0AFFBA31BE1697149D7BACECF4481DC61CEAB7476A2E00CD8EFF1
37E476FE5A098E607E25ED29F4BF3409309145BD0530C8A76E85F59EB0890ECB
A12DE954F33220ECCE5E9CC4B52E97089790D08FFEEA7D143DCC7C07BB2694CA
6709EE19C11515E6E967043F9162C39D9BEB2767B7B31EA068C594A63173F7F1
67F3D6FE97087D19F73EEE205A47785EF3C453E6F77A08AE9F93F4060DD19EF6
6DA5E780DCCA30F180F8DFB0CEC4602AD1201C63D91450E7B5F44AEF32087A03
0D933A941134E74040E6E7E797E18AF57941DDF7DE2072ADACCD3BF8D4CFF06C
5B946E21D0F5A799CD011CFFE4CF0F571B4377AD4768FBEBDFCF6B49F09839B9
35B1F7AB20DBC872DEDA90B79F113F5A4BE581DB49C5EB8C9033B8050C143424
1EDB333D1DCB862DC543CE420CC26EDF9639E4256570975B25C6C1F06CFDB2FD
9035344017BAA39283C14E3AE66A14DAFFE2CD87485598645C39B92C18AAD014
7814BF27C8FA6DCA0BBA0FFA552B9FFDD54BDD8C7F84484031FFFC0AE8932A64
53D2632D9379F30231361D03BF91F74904C7106B6F8EB6ABBB29858F65E937CD
E31D67C847719779DE0B34CECE88A8F9A12D46B8FCA50DF4433B0B8AED6A63B9
E6512B667AC78A09A780813B1FF02AA967B12AAFAA0AF1B3DA27604A975C2DB6
FC1854457C67C54DC08DB989CA3267B2BE5B8178E6B7889A33771F86276E6DA4
F83033522871198AB3E954EDD88B5059BFBB42AFFC2738CA09B628CC646123FC
9C2BB8B9149CBADE7A7953FB4FBAEB6078B410935DF7D6D5064271899313C4E5
0DA12BF2F08521A17641A2F5541EC8419514939892C0E353FB1785CF9CB67C88
AF752C2A0DAB509A424DDB9649BD8A846E6BD3D374BEB6B9DBD5C10FF56E2000
AE4AA5B339C187F52630B52309834F266D778C720FA9BD9CBC1F322A39EFCAF5
85107BD5A5C188A6409352766D80E77B1270019E0EF57F31E9F13B9483F070F4
86122EE08A4870456161458B6C93A1602A5EE583461ED91A90CA5B743636AED8
1E5142CC0A7DC998CBCF84E39CE3B141286A5994C60855979B402FC1C092EA15
1A6F3762571629775247A6AC65DEFBCA10A51ED614E0C7FBC7335681207464AB
F8C4ED5B883E7A4D01199AFC3C88B0E2AB5FE014A84377451081CA0390DEBA75
7BEA45FA3171095052B839F7A2A9E41737F4A4CD704E8EAFC757116FE3012E01
AEBF584F6B34EB3F9C4B3893DF4E25B71CA17D427219E0E2F3F7ADB530841948
1FC1CD966965C72E9490C31153E2A0DAB73629A1DC0ED7C058AD150C4D5BE6CA
FCC7D71907232339F3FCD771914933CABF613F0F9FA3E206172B0B4ADD1D9744
00A8C2642147D4B652A8F1A7E5BD064E369FC591D4739533513C202E9DA91CDD
1581D1A58898DD6564B1710A88AEF94B888C52681BAEE1E3EFB4DBC694919D4F
41D01894C91D8E03F68DB550934E5D783537D2B57CEFE23ABACEC756F5D1EA5D
A74192035D2304EC4F9083716CA7906B80486BB5C79752270821CB12BE7ED0FB
9FEAA580CA187AA3C9475070809AF6881F745EC71298D454AD31AB998F5821B8
2070122634D5A247EE4D8672339B1D90113137D4FEAF3CF3A2456A8712556956
C5A48721B1B1E140ABFF7793081B2B092724FC0F129DE772236556BEEEBEBFB1
FAB1037FB0997B367483D2C8C0D44E6111CEE2EF443F84FAC7710AD0368D542E
8A629BBC3C6E2D85E984AA01B575B37DD1D9B0D453E3A73EE7A34FEFA5641BDD
67E694671B6250DAFA3D85E0A78E946C78E33A284D4F92B73D7AE87B13F108F2
C4611CD948F30F56B984E409650E9CDFFD63D996E25E5C0E0FFE02BBE2237537
8C945F31C26697A7ED159B529276995292581CB9B29A54F4F4B2D472C74909CC
47C1675DC6FB9A932C0552F8FBE17F4D8771BFC6109E6D709951694157B3CA9B
1F3952D101D6CE60D1A0A97C99EDB3FAD64BBD337BB747424BE88E67FEA44610
51A1F65159650D3A2FA882944E6E8DB113CE928969F6BE3E3B8BFB71302E87A4
5A22ED99B04853D66E5A22B56F79FEFE917A6F436B823B1A2FD914DDADEFB5C5
CA3A43E348D017CE2040752BF94A98902E608264DED8C3241F06469FE18C377E
448EDBB0823526BD66B40F0519F047195405629408224D070207499DF2F43E7D
52E442E3B6E9E3B08F88C9961E81373B96460077464C7DBE6C7C7887BEB3F685
B182706F5DB4C7C4BC2FB81A7D040EC5A04E5C5434D732318AE791EDC71A47F2
AB39A992EE304763BBA1AA81F9D74B24FA7EACEFBCAC72D673540922501841A4
F7EF18CA86AD20AD76325914FC0197DA6D7632947C4AB3AF2133D1A1E2719511
F62BEB9C879E76B74493C7D5EF38E01CC031CB4CE13C2EB6BA2695E1AB97260C
39A7CF8F690145893081D526990E92C1FB18CC4B968D70DFD13C6223FAC9AD31
2E1240ED981AECE8D13DC653D59255F868EF158EDD781E9D02889907B23F00D4
F6A0D9B74E591BADA348B09E22B1A783A8EF2AC87D34B6407522AB33411ECA4F
6C765C85ED1405A5F27B28A16751402AB278A8099E29940E719DE1E109E5BEFC
2A4098E77020110C37A90B5BDBE27995D78FD99C5784B2B7C7C509E9B93BCC29
35CD2714C50B246A7DC70C99B7DBFADA1E01B81749EE49A70853CD45FC323019
A45BCA3DE39C3E7618C6322D264556FD657D9270933D8B167D2575CF146336BB
1C76735F3B09470E40B0624E52F21809704749F6D81E3B829D163D9F61E070EE
D8CA803E56CF227F71EB8061B83E035C7138A7CFB6D6CBAFB766754C0E8934F9
AB738930EB75A2713CCBE333CC60A6A8F2BFDB043ADC0B94FA3370BBFBC61D7D
25524B08C70599D58E7521F58D26AFECE212309BD7BCF62735379ACF3309DDC5
C3F30DD7D3A37804BB23274D7B30DD69E1B2C3CA70F2F79FA29543F526BB808F
04609B43776382C4389362AEA7FE4E03637B4599D176F103143DC04D5B5E53D8
568E7911839EB05C8F4A9E9C911D746C4C8EBC0A4E6AC3CF08AC86548A8FD6D4
7450B1FD87B119E547047F43E9CCDE1C1F8645DA03EEB02B27E36BB6C87F39D0
505579B2D0FF4DA9D4AA971DB4C82693DEB59FAEB3A14C1547C6C46C24FF3513
EBC97357AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8330499FB4803EAF74
920BAFB89889071729076D755021515BD8DE5177013854B10911605F872456B8
F504547AE968C323B85DCAD9AAD5FC33F29A921D427EEE0E098E8591EA7F2D7B
A5CD8A91C01AE80B672831C286C900AD20776B50D4D2004F7295D860A2974B73
A9E8B594BC8BCA8356DB43399E6A6918A887A64B2EEE98060E47C0F371681713
13F92A306D1A7DD5FCA29CE223138B98E6C6BE9F3B305E2E4ECE098AEC270F11
2CADA74CFF4BD78C5DEF4354211E3953CD7AD90239C1FFCA061A21652104F54D
4CE1C6B388B901F937A299F65C3217180D4BBDA87A96F4C31014265EFD9206DD
DDD45DD3F56823BF8236F0E6B94537D9CEF904EDEC7EBFB0E60995CF6457CF0B
1D76EFC8D22A8E991888FC44FF9ED2954B7A9DF5CF6F256C8A86C3D98CADF1E9
24E6C6725EDE1262199758B2B070504BD81147F35D8989D2CA44BEDE6B8BA09F
511388851B9D9865887D4EF8AA7AE6AB234B252A506EA2EB59B1AD40A04BA972
EC6DC7C9E4ADEB7E40045F10F38E0C8D50CD28D96A028BE7C67D1CD148404CE3
0DE9213AC26B82EB823194818E6DE249207343C37BE9B926EEDF21E1D52251D4
37D555CB1FEF227CD15A08CA2A245C3C6508DD3592E809E0C72380B92F4B946A
7BAF34835CAC375077A843F61978AB4876871FBF42DF8EB5F877033452F08D41
970883CD836D1668B85BD642F7F50AE117B3ACD1A1372D5D4D2555A2E8E23E29
D8C8C5F39807B5A01188DBAA07A27A116C80E837DC740E86068952F0A57E9027
C39A603A4886213EC782000DEABF71EAE1B8944E2EEF19E1F7FBF442840845EE
D13FA9B4C5CB1FDE6F0DE20AAD69160BFBDA23C2D29311C4F82514DCF27C6B94
A8E727522E182DAB2869CD2C2B0F39016EB778060F35A6FE085A1BDB04A65CBB
6605D4D72E11338D87D5B0283A4B81EC83D03F502E7DBF202BA558B4EB271C57
922F0CF3980A02A40CEB2FEE42B631C999B71EC234FED7B269E5D91564F0AC54
D70F8EFC63B94F73ACBB4CD279716F68783C493794BF12502E04FC52064E63D0
05F2034A1E7E4192D1193BD94E99C0CCF702D9EC100066E1490894F5ABC92A92
C3F42F4101AC88024884C018C7D0DF65F7CEBDD46FADABA26B5433D34C2AEB07
6031841EA02F1C9622E0B64CD190A4AF3020654123563C5D6ED62F112077A1E5
88A8C8499A8917CAB23F00BC124FD93096D2603BC6C1734124CA3176AB14F488
26ED2E56C67571DB18177A07E082CB873440C4648D3FFF06A1499A5C7EDBE172
1759C1BEA3DE43B426C5E175B059005BF2911E685D076FF12D01742E9AAFACF2
CFCAF0517858C28A24FFEB5A26E46BB5B788713FB8009CCFE62C17E001C96636
A8DC58B71D4BC720F615D2873CD11E06DDB3A7788888A8E713D0E82FC861C0D9
ED98E873821095C6BE6CA909BCEB6C9BB1B0730BCBCB20E22D06AD1AAE225D51
25AAA901A78E86386D29A7CCEFBAA8F35B4813CC9D289E5244483DFEC10FF237
E38BC8E19B81502A19E0BD113AFF02F4E365A4708189A7BDEAB2D32A6E464AAE
B3505AF669EC3FE5A7C9320D907438DB23A82D8CB9777BECA40890C137564EAC
CE768714D7430BE1825C90D88DF40E753607A06AFC0046335F97A2FF20EA44F7
94C1DFD6B105FDFC6EBC6D5745C10D2C3BD560C939B80707B471D13D7A910F23
91FA6B63F2E6A01890368EA8F0D42E7A93B343C664BBCEBDBC0C99138A50E5C0
F57977D929DC9CC159568FBF5523D79229E9BA352E4193A44EE745F76035DBC9
34588B2B8FF44C8368C9C69AD17E91BD78559AD4BE219C8B110472F95FD5CEE1
A7EC2A78941AFD0B102C6CEF9D5BCD4C4FB87316BC327ABA5D5F5FF14BFAABDF
9FC06879D91DADEAA25F850083BE6CC26AE7437664ABB66CCEEA19D0BDE898CF
328861C3CB4423FD2C0C1AFA95A6195FEF30511D5C87876C863364CE4B089A97
6F9C29A14A61785C42D2C746A98194782D9A504B2A0A92D4E4B5062855A33404
2E14145F4684AD22D461E740FA8DD232D18E559DAB50A977CF474EE1410D7097
785D120CA5C6E051D096CC40E931BEB074AA9E32BBFA361593C78D0D2EDCB1CD
D560A14E93017099D24663633B06BBE3C20A2718C044731B6DB8007749D1B605
F397413DF968722DC03BD138B0559D3E5887B7EA9C9C54F8335F55CC3F1B9135
C70CD0214CF04A4EC5AD120D492F25CD6E1E80CE87C5709112938ACF9BB2E011
87FC035CEA0FD5C1147D41630F1CC9B82B395BDCE1885A1D5F3441B03AC321C1
5CDE681DBB192993B553048C58C55F0E420DCEA46CD16B75173C5D37047E511D
C980EBD803E01C35504C4092D93AE476AB15324149043E713261671835DDF160
4B8DA000941FC5F85C754D5132402A0A94EA3D0E37D6B9890461CF1C65AB7C2E
E42288BD17DB983600580BB1513D30983C4FCDD1836FEDC80308316401D8B181
EE2A3B114F68DED3488EB9ABDBCE6E73EC5A0AD42D7735045D594C43A33EA29C
BE2AB98CD0305DD935D8F0F5EE3205A7576650887883B3C9AC23E217F48154FD
6CE1454F09486B47A5A18DE65034D0CC9F9F66DE2BE45C2D6F1AF8B10F578B9F
F66D78D738FA85FC454C23236FF4B665EA0E6210060F6439E9CCA612DC7ACE7A
D12F478F25D40CDF7D23E3E543B75A97A7BC960A7F742A2C89212832C36801A4
C384B89A91D53E0CD886C7BE0692CEB0CF29D9B4BD53E08D9FC1A863599BCF9A
717F4DC319B4B59AF009C11A91ACB087542F94750DC53232E62ACC3C660965F4
5849011BD76FF8489964A7848FC6F3CFA44B7F502649EAD20FD32FA1999CB88E
A646C764BD2088A3EF00A4F1862F2CAE2F8B6A8DB26A1287AB3DD941A92AC57C
EC6D4CFCE0ADFD99BDC3BE161F4C1FBA9B854899BDB7E9D09A1E25A95E9789BA
DC6967F96E550903DF9B81969E38FA3DE2A058EE2076C77C33A93F2FBAECA0A0
EA98FA4C3D1F8700B04CEAEA603A0833E91FB4A44AC83C4E86308B6E89C99A84
8AAAF1BD143560B559176CAF28B1D8B2C8370CBAD5873329B24AD4A743F2CFD1
8B26B1128AA48F72767FF2268BED8317FAFDB532191FA35C2984AE7C50481FF3
126BAE5309893814BA28263EB863D5E6F01C423E6C5D3289B152CE19FDB55A11
282FEEFFF3E262F26041CB1AF30804A3CC34C06C6FBA8AED582215711B0A17F4
1B505FA0B5F906C537EFCDEE4C69AFFEF89B74C5B83E2DEE7642AA85B1615F9C
BA1C3C3197223C98A1ACAA495A6B8B8F1919AC158DC63FF4600FDF993CE8D2E6
3DAB7E352BE200322BBAF6DDD2628694612A7790EA8E1836533738405E9B7AB6
9DC77FE9A283B3A8C6A3651DE8AF71499D39CE0567AEA286091BEA9D6A443A5C
D35747785C433D4E18A02ABA38F55742DC36E4FF07A656AFDC3D0A32CFC097B0
5F9D90CC4B614AE7F58F3BFAF22EE6821291164B14DA11FB16C0E671A6104082
94D05830E44ED3E9908B59DB3B3506C60D3F766ECE69AE23369AAC3B5951B557
D62C7728D6E3F13BE05939C2A6FAA336EFA57001DE299223DDBB333D71003681
B4A816B378AFE37543607554F1F1B427784EFB366CBFF1CD7CD5FE3CB61842EF
56F134AB25DCAD2BD08AE61E233FE6FA79017D1883C61EF0334681CCACC5D024
F39309DDAE717CDDEBF80C88974D717C4539732DAD1226FE504620FDEEEC6266
41060E55159270B4794F9C0945FEAC295D17B4E252D015910B847534A519CFC3
2D52169510940A9E9AD636AE141331BE35D1D5308C927BA3940B773F20E5B3C7
813663D33205454A1A4B2D9173D593615C4459845E1AEEEE1ABCE3E5328D3F81
11610DB32C86FF6F9DBA1B8D6BBA3C4AF64523F37F176F3256E298D22DC5F1CC
F1A67A355219E2EE13D5D6369F656836EE0A77206E8236649E81A1F0E02D8D3A
3C8FAAECF7839D20329CBC5ACB43482D3A3A1E9C3A426BC7FE406E89FF25FEB2
34CCD7F3FB3C608FF37988C7DE6A41FB1020DBBCC762F2BF24BF424BBB2D3207
9DD408226AEAA0C4DCB8DF16CC6767B0BC73EBA052FAA5311407ADDD4BDB1061
3A860B10D2C219E96E61050B98FB04425912F484F5B79B9C0735F92C1B4353B0
76358780D1547206329F302AF6853E5DCFBFE199A76734AEC487BBB103A8547A
0090F0342D48DFF9EA9821454CB759B3D82921AB4B9278E652C2F30A8A121781
8CFD111E32142FFB160DB6422A5884151A4671D631260FB1758BAC67E14234D2
5747F1E68E0C36FEFBD535FA5C64B046AA8835817140B76DC22B5453AE8F3F76
C69B9F10988BE7D061F539CC8711030D2483F752706E27D43E3102CEC57B8A58
6D3FF862999D20CD6BBDB23762249BA7031D4D97DE2280C10756DAC422F0B747
E427E5DB0B265FDD57193B8E7F00C2162FB111DC4972B51E59320793EC60AA3A
F4A3F68AA5E11F657F898F59F67E0D285167231B9F444D42F17CB182EE584117
FC81DDB5BEF8EB957F817C5699C7293E47DAA4EAD6D47F00FC6443EFCDCCACE4
627CFE80E82179579BFE305B9AA1770E8E8970E70524F9F7AE081E64AD1F71D6
CC6FF054661866B68CCC383E5403F0A734ECAD86937D32FACAB6B04F3F9ADD79
94C11CE94999A3F38C88115D6082DECDC2125A4643102DFD0AFCD8682BE5CA11
AABA54285DEB171209CC4CF8879A65088C7381B9029B67CE9029093EEBBAEDD4
403C382D29751340F63D14C45D0C8ACE829FC3034643F4B76AB7BF41CDB0A2CF
B2CFF7A3E022256D29AE0E789DBA81CB4DDE7D4A970A3162D903EDE2880C20DD
FCB205309DA145A55A2C6763E0D8BC8A0BF42461DCA1CB7E613647A93FAEC756
3535886E28292A422264BAEA373D5F1AD84FC79DE23E2BA52D8EE1B1D3F80318
8614D6ACD81856288366086F50154919E5C99CF62A7700E896F5B69456110B9A
8BBCDA8551C3C14F979F3CBB597AAE41210AA7A444428DD055DD35D91A1DD465
3800988005F542BD304D2D1798BABD827BC8A689C3C35078CC3502DEF40DE082
B544B4AF7127EA6D5B8FF5A0735257BE29E36A29B707A51A697A4D8A360D4017
19C5FDD791A1C640D47AF86948448DD00039DB41E9C5BE1A7E6BB48920932280
BC552ECD04E2C33B76A0F6172098AA76CD4660980EFA1C84D5348740B8A4885A
BE1FC79E81913524DB238155870C6B9819E5842664A4049499CAFA7351D3D3BF
FEB9A51236038D4452E44A34F25718B7158C40F12ACA152F1EE78072533F8900
CC3A1869BE48305DA62447B28A45D6F516078C72A4B155A2715B713EC359F680
FCF2663644C985191135F0156722F0BF1DFACDE42BEFD5278ACEC4A55F1A082D
537B3C1EE890A6FD2ECE0EF3999DB161EF7DB88DA4B0C592385D35F705BC2A9C
CD7351AE879DBB7FB52F25A5A5DFA45DB0FDF9B94F0AA69918932E563C8827CC
340AC4350DD2FF1A3EA9F8F3711A16CCE9A37170F0C02A9C7143D722CFC08677
6227901157114767FEC20D2DBA71C87061EE8BF523D591180D29A8F8E14A7959
731A74DC4B215D7EC095EBE86A3CB7C28C2EA7E6A19A68B64EAF236A3468C0F9
453189A1DFA55A9459D1C5B8CDC769D992269E6EC4631B1B75F7E6A511DBD978
F3032D2FC6BD54FD7664FAF472BBF13AC7F619FDC4AD5B38CE04E4C555757F69
C669C5EC403770F681C400FAEA98F62F02633E0F85A780A61DF255239F9BC3EA
AD652E6D5E754B9ADE46841E52DF90C3F0D7CE5DD684566DCF0B43A0B0F975DE
AE2F7601EB63C39D6EE8C54611D9D515EEBB7192C63D22D02BB2A5A27270225E
C95173C09068553725ABA9423F4B268C58072241D2DC5C080E7881848222220A
63605F00205C205B35DA93F4D000126B2CE72AC322B4D962537889CF225B3381
6EB449BF2C28599EB66F071FFCE3410C547A9B74D216032B72854A0B8A6ADE15
EBBFD5CD2BA9FAB7E75099FF1B68329B68A2CE587608555325EF062CFF465B6F
184FB4C37A50F08B2F1CF6E09E92D6215A5C9BE511CF326505FC5EF2B72DC40E
3350D5D5358B49CD7A1713DE7AD5B63F462A77B6268B7AFB245DE6EE02BF2A97
B0542A5CFD6CAF309B7E10ECA06B51C2717DB5BDE8E80D6F29B33E9FE12AC804
AA0C6670967F6C3C2A7310CCC64AB48219EF140A1D9A942543FDE90924C9DB3A
5D667E0AF18066F4318101305AED22847F855960CC952649426FBD46FBB5728A
CA73B436527795BAA59086831567FDD5B3BA6931468115577ABD8222985FAED7
B6A1CC891D07185666E6E74DE886BB13021AADC9950E2EF1FB69E5350B281CA8
F05E2830521A7BE2EF1D993F75619EAC1B3A7A437612AB0E8513DF8F0F44E933
75553EA81965C83F6CA655BBD1410B7E8F600CA820DF8B4BAFE515BCC974BCC2
8E06AC06B07BB7E08BFA5CA8C5EEF8386971DE077781A9E67359AD8E75DFF208
727DC428911CB820B9211D2A3C6BE6A3ED0A5A2C1C623A6D6615F24FED298A68
097564A8429CB235119311B9888D0BE96AC4BFD340BCABB8EE589A69F749B180
3E3C1EF42D935EFB4AEBC656854ADB4AED11740BA3FFE21D9099979EBD752E36
A8EA33F541256C368B3217E226202117CFBE3DE2C6DBFB0BB25BB138BBF69BBB
484DDA6371DFFA6222F88F0886C7F8848E932CF0D89BEC7E504189315DE0E931
69236EEC7E3C7AD630E43CB5B3540FE72436B7BDC9E33F6D4B2E9C167ADE4932
2A5AA48B228CF68EE0032B1968EB88119A375D4DC1AF6E4FDBB4862DB295672C
BEF8C0780AD1CED1352575A76E2FB6DA0EA3472267A89135EB528CFD0877E8D6
E31A02A87587DC7D4030E320C514539B504A31AF3D7A4DD413750FA4B723142B
B074DCC9B55E3A49B384006A6320B55B1CF4B2482D465B5835341350E215B0D5
5DDC1F173119E073DB7DEED7DC4A04968B69F792644FA8B0757303F40F4E3D39
ACE81E6816449AA859A9754CAD99EAB3F59EBBC14ED7BC71D669091521BF6739
131AAC92DD77A116EE7E81836676237F88C519F8DBF39EC35FE36E3D2577738F
553F81135829F9118F4BFE20CD51190F2806A37A4B011776C7A572D2FCF18871
BB569C2DB5B9A3347F911C34150B85ACF4262B137D9E0FAF538F8838EBF6E79A
1ADFB94FEAEC654AE20E3A693C2D57AF9597BDE85CA476C09617B1CEE6A2B48C
DEB0450B99E5E00DD9825D72B3A9D95383171187CD0E33C8CD308C436B64C763
C407654A8C311D3B3C8F5901B2AC785B222E5DE6A3FC2A9B0662335A2DB9C80E
B7BF67101B1F500FEBCC23AE484F2222BFD38455BA078A1A500CB006AA6A7D46
70530EA460E36E1FCC24D0148C458B745876A5FE5919C3C624E46C02C72E1368
8BC50A383020829462604E0B5B2CDA9CEAAA07D3BFCE05B6A2BD017FA8AB3942
D6C7B09C6F75C799F437E74F0E185AD518B7E446C30415CA18B5F59F3C4DC209
7CCF7B2FC2F789BC49E4AB223FCEEAA22FF3F71E5E5E966DFB605D18E4B1CA2F
59697989C41141C74CAECABF8616AD95FD9ED3B11C918BB38D14FDE1FB20C560
4C70DC9E98857AA358B5F754BC18087F2F7BC99B501F212C04DDCF148251E923
37D102BDF468038B07C256081F5B8F3636CCE0A293F905974A0B37050C2ABC49
F5FDFCA8BE38549AE53F72B85A6F03B58AE18FC178D906B9BF3D12A818C8EBD9
90E7A12A38A89BDAD7E6A192877F8F9B9C3E5BDF412BF0E8C92A234BC8049091
778F36D558DE72E0CF1737994854EABAF8C2D221E0081D853369B8ADE0B18E8D
FDE785893B5EFD6019A709D99989DBCD244F0C11087A077D2103E494406B1DC8
1032B618349FC6ED24879F02A9B2C2924CD9E921B84C4E6C0ED0396E44A5667B
7AD3375595524D22C358B73374B5E7C4F285F9BD614A00DE6825572189A19315
AD3E7E3EE742E2EC53C778F677810DAD0C8F97E6FC8724E306E2E37B799A57B8
009493929890EBB3F0C168479B6999AD5B3C3DFE28AC43FD186B6BABA7FFA776
83212C8FAF6DC682C841008292750A376D0398DA95DF8AA168A651403C2477DA
990FC58E46BB65AB0676A40A8130F05A6CD8D0A2713820D615BA8AE46DCDCD93
BF182F0D752C9EFA34692B1E9877D715480B2CBC1181E6A95B05E9285F173BEF
A5424D243AA8BC7E87176773002363255E70443F86B6EF38C81511BA8FF4887F
3EE4357A421575258AAEDA4B5DD9ED6E3482283ACB506A2D6812D4676F3F6464
94832C8EC9EDCF022E141A5DE5496F54EF7A0050C0D1D2166C4A311A0C52ED00
D2305C70A416567F5EE877F0D165C4D4E6B00BF84FBE6428597412531988959F
3897745D7159FCDBB10B6459273EFD03520F2483A9E7FA0938D162FC5890998A
99BFE2406581D64F49F46B2D453844BEFB1931DD7E2CE0E540A398AA83F57164
3D64D9D9B4DAB92AE722C326065E48F4EC7FBF2E1158F0535DFFB59313804D69
60AA6F0C136BBED6E020CA50ECC4A6C90A628121B6317FB8E40E11E48E61DC6D
B3FD911235DC5A823A176D8387CA420A441980D3E8666043259B63FD3CE13E54
945B0A6BCB5633B1D580346D913BACD9742B308D575A409EFBAAE5D96D65773E
BE8D69A606A70A06E230290370856A89FA8D56529F252E7CC538FD5673744947
AA98663DA46206E7A75B1E7AC0247834B4558985AF6894363B2114294E668644
46DAA5CE2591121519A4117747BF9CCB78F9F8A3F5D44459BF81997F9E7A34F8
122CF87CF933F558E4660C9FE5D440B33AE6DD4220A093310E3E65B053A2EAB9
C183BD44FCF0C480796469C934250A5CE240A1171441D03FD75811F371B3895F
AA14A75448ED483C51D41076C0FE99D988D612DEBF78DD7EE23922F1A25B3421
F4AB7F9881955BDB0AD3FDECF4CC3BFC8CE815CF8DC0CF6D4C15FC110A14C6B1
7D87AB69D8E840ECB176762EE87EB04071EB8061B83E0359E6BCF317360AAAFB
7C198CD8DBE03A3CE7728D8819BF7826CFD7EE20738DE07BF2CB6AB91D17C579
3A8F9EDA9EEE6F64F51F736877EF6935ECA18A5F86EDFFDAB7E32A239E731333
107A831FBE6A6CAF1BB6D934295DDA357EB9FD1661523AE5AF8DDD8B198AC29B
D3B8DD91D49CFEA23E7D6EE63090EEC569D8FBEAF4E5CA52AF81F8FE49557D75
B147C85088703C68C018951631F2EA80DF28F24FD71D502A040CB4DACDAE1FC4
F892A2F092A3E45C31A6DF9C59631C5811D0CC79DCC5C2D73915AB87E8E31B37
12EFFC2E3FE1428B2DAA1853FEE27EF30CB0A494BA6ACDF6788877A3104070C2
23170140A7516D83EA6A99D1E4F756CB95EA4C2F9F4541B4ACFE9CA666C46C7F
031C67944AE235F4F872E636F24BA68ECAFED13668242C92CCF7FABDDB6C50DF
2485AB8138E3D841A9D8F9F80AC1BABB452DF2ECC9744C9C500556EF9EB6764B
4F8134DC429709776F04C4D5E4D04DAEBF5C475C7C3EB2EF7E035707E5A69C6B
F3D0C6660E636D6AD25B03A443509DE32694DEB838C8B360EBFFB8D45798018A
310214EB1672483CE4272074EBD88C9DCBDD1E51AC1353F7C1C6F691546B9315
12AA015585BF3EE444A7F201B20F79ED641D0EE7473C6E028D62D173D45A6D17
B4A1D1D916165B0BFB018964439FA7B3877858BBA8A26697C5929DF8B06BE1AE
01528C75262EF6C5B60BD81D2770945D3D6BB88DA9FDDAC13FEAF57217EC230C
CA301F89A1016CD564EF2EFDF0BDB775895C4746ECF87F40A23A8418AC968F2F
B30D5073CE2A53F750B082C4A6590AD501BDF6EBCDC02B48008D082AC5C1C042
7AD24E2C9976490B46BBC2187317D00BE0D30EB7BD4463F7A542C9A7373C3A43
39301CE2F890851EB3E99946DCD9A40E25DD883D396E1B7292137CEA7B60FAA0
52E4E631CD7AD08606E816F3E54E20DE4C1F23B16A9440AD00F6BA5601CEB6D0
79BB75886BE988058F4C5A79047AF8C75EEF3919EB6C5639046C6371F2024871
88A7BAFAAD7699E573E26B49D2D3520CE7EC27EA837EDAF9DBBF7EAD3B2858BC
FE820B4633E69F61EF0A9659847F8BDCD4238F576E09B591DD088900D4590818
6740C9412068CEBAB515DF56E83B52503F2A044FB87D284384D6AD0810B5407E
1085B1D5104BEC91C4AEF5E1E1F02AC9FCD1D87929953EE6CFB6C2FD8FD23C18
CA4063BCC8EE90AC1756B426A936BAED123DB1E3297770D868CC596E737A5234
E91EA9C52A86F396EC334621CC131F067BE82B7A00167945245303572FCD07DF
901E78AA828FB9ABAC42443EFEBDA80787A0F0A9682632A59B9D4E948DAFC6D5
74A33B9CE67A5639E34DBF36BE9F30BE03B0B8FE5F8EA006251B9E33FFEBB1BD
B2FDE76B58AF101A0AD64320E0217F90916924BEAA08BF7FF02DCAE8484C13F7
C5DEDB4EDC72B4042D30D14E8F4D415C5AB2A72BC3F9A63FC847DC244530BB6D
83D8451BC66D90AA787A9A653A4F75C63447142226B4AD05ADD80A9D7DF9C7A1
817250E78AD0204C9DCF16C79410605D4D744BFBA60FC22E964CE10AF512C228
F4CFC3DD85AEE7C9E61D62CE0FCACB72E14C2FDB87A97F47425D7D53DBEE6D4A
863D81138795F521C6A95DEC14BBB3E5A8BB3613EA73BA2AAE3FCA5D2E78ABF5
0BCFF51317165C88BAE59023144D99A71EDBB90FB84380ACDDA68AD46AC7AE3C
09162E8A4FC6CD4741B38836CB599DF98A21C5245BD1435E23F7395871AD1115
8CFCA33C04ACFDA3F0707836091A6260F217D91D4EA2F2B6FB87E2E004C0C5AD
DD2AB665537FEBACD5BC7C774D53CC63B57F7C9A28A5F0EA14F929D5598F4437
AB944A06B5EEC3343EB1EC04DCD09A2A4F2CB04C74B200EE87D92C452F79B850
8B5A3F364A4DD82BA880A7A5CD59F8F6000E1978A9EBD18D33DDE269A3E70362
6A0F204E36BEB8606041ED5927BF69A367EEAB44967489A34B460172AB269789
DDA62F516CB7FCE827E8B6C453F843B10EC212D258C3CAD385E8512B667AC78A
09A780813B1FF02AA967B12AAFAD9ECE68CFFB45E6E44703FC7AD68DBAA09BF4
E38DCE8FA46EF5CDFAAF3113D089D7C85E5859F27B8DC4C5D864F41B8B3B0F66
D6FBE907224496686847529F68DEA6FE86CDFE2FEB8DC3AB2D124146E08DA532
B277C8A73DAF87129F39235E00862E70D7E93430EFEEF4CA1441C63290D48E72
84386F6082C2362E4CCF3E66ECC33C744621B1FDDBC9F587FA9AD60FF1DD01D8
20488450336225C64FDBE7F75433FB87932A162CCCA0114944A1AC1E57C446C1
533D84AFF286AB0086008147E26E133E012707E204F21F5EDCA106FA0636B029
F12E6809CD8308A1512A4F3BBA0E02AA42C71D9E27302A88E52BB8B1924F057C
43DB0A92111ECBF02129EE8DF16E063B7BB9D34606831C82F4954E3E9F458653
B6CA43CE1F9164BB0FE39FBCF2876FDF951D8F9ECEF97273B7554C01E0528548
562040B9FEDE9638C09DB8EABA360ABADCD32C16E9F72E34B4CCD3A3F1A87879
31F61A705F34B65A7D17B8BE932648CE9E0B7240BCC29C59A4D84770FD34E97E
0E6CE2C95CBCD1A7AAD2312A280F0C0753434F33D438BD8EED69053BE9CBDC74
E87B613542F58DBCA1007FF58CD1A3F9D87400FB8A600F088414D8992ECDA0AC
C39AB210921E327FD8B10856C476FBFA10D11E87A61DFE3103AF0DA9F627E710
DB3D3C578C86CDBBDC0A2BE5F6D17EDD30DE14918A2AF0E1ED9254513D2002A9
CCD73361CC952A8238AF64FF352BAC31D36B071C4B68DF8BA0FE38D3A0188439
4AF829C39DB36BFA67124053D79DB19F848987C0F2E57CC79D75EC3262338CD1
3F13C659D762DB6199447516E1A5D4B3326832B50B45C50D8F3B912D34199D95
8BC7C6ACBDEF8BA575387DD0D73162CDDD96166F795C46B8AD5A7ACB5C30A9E7
9E85CB8BF53846F45871E08B42AF72B3F3760F5FA35BCD767FEE4E9808EBF054
38BA865AC5CE19DB05CF529A5DB0DFA4F1AE311FF2EE1311CEECDC45A5A65A71
E268231C07EC0F3AAC2337536495DDF6085A1BDB04A65CBB6605D4D72E11338D
87D5B02C7980703D1DF07EF2E12C9802AAB56426BFD7E71A8056C4D40E53D42D
AF400AA41C55881CED39A6EAD01854DB545A7D0E46716D81039491DB446916FA
5F10B5FF1AE36BAAB8A07828702857EDDDC1030D19928F2E260434DD44D61B33
1A026E3D72A9FC0E15EE51F97141125A74C5BBC35D82385C083D07AF133BB1BC
941AFDD9F34D5E0FDB49915C613B9E6CA03E2FAB053421BDE071AA7232D3FB8F
2F4E2C4C544F441AD84AB5DE68AE07093F707C67DB1DC2AF85CBA7D0FCFEE888
CC7FFDEFCBD573725714DAD9F6D32D04C681C42D15D8B8DCDEF77987C808BF0A
56664166455D888CA8A3B820DB6BE101296BDF05D296180E1F0068E431EB425F
A04DD315AE10FD3A72CBDDE3AF4825F7C3B591FB74909EE16F53AB0F444AEC23
3ED419193715DC8998AC0E556F16DB74C13D05E062FF908D37AACBCC9086AB4D
09E359B41CF74AED5B75C01085EEE6959AF5B321D1550C15C0E4AD2245D110C2
485C08BA84E13D79C4875E249580B771CDADB22DBBC1715016A91EB885A51BA3
F73CDCAD65BE718C0072A840C5D661E2BAD9236D480D9250A1EEDEC54A0D75E0
C853808E0E457AC644B40C5D496DCB96A463116389EAFF5982413681C556258C
6A96EBFA86A669F671B2056B5206CB2889A999E7573B012EA2371452E23091C6
5D76AAB3B0B47745CB8CBF9EFB538C274E3C64685888A61CD2FE2A3912714563
19C9B1F9D62740A6C1E4ACA130DD76A67920DBB1EBF803737388C01B84BAC1F8
C5D2AA3A3E6BCD63BDDD75FB5390E6DE2159D712C43EC39112935BA5FBC2D1C3
048DD4A16B2BECF9DC186E0B3479EC564EB9E63BE5C92779434A3938E1970D8E
A3CD40C7B8FB442058996268D90BEC85B51D5111091F54823FDAAC9DDFDDFCC6
DD12C114B7373759BE4A62F1370FEDE056CEE265838696FCEA5BF7EF4865F3EE
0054B00A9EF36E06722397867DF4DE78492BB8EF96B9D0B8AD794FC37229A534
DDDB4A69FCB5E94DCD2FB69D65D8D970C3C755E6F464E23802978FFD29A0F681
BB7C42AB16F3DC305839233A6D79FF1A8152419BC99C0B233ADAE39DC533F1D1
0843067264DF39491C34CB4BF88039971CBF0B811DA5D0453701393BCF3D6251
E80A93FEA61864BCFA907DA7513A5D5AB90346D805E2A2205BB410B3E1317CF2
47224ECF9FFD37BA6DB7283B75010E5542A389EA2F787A4693E254921B8DED4B
654A34C1C67C390186CE712378CC6217567E4233AB90D231BB07679EB2ABDE89
5E12261315A776E2579686DB956486C96942AD652B9188F2FFA1495493978225
54956039FCDFCEF8BB4382003153E604C23D313121A31905074446B1B55348E1
E2CEB827C74133EF89CC4C0E3BC93691F53282A0F0627B5C2BF0D24FF6B79AC8
74474B73FEB6FBCFE8F5D07B521EB0F086704D2F749380E92B97B1D4D15A6A6B
4A8E7F107E2E4ED3AF0A323F4ADF5BA2DBAE0C452EB77B9EB60BC8E8DBAC5E44
24AAD00B852219A60384F37D44F4096D8AE632FB2EBC0DDDFE6674552253C086
45F0BE1E25404BF8131379A057266485F454D5AE1081304809DF523EFE64D400
BA4D22773664235629410B1866D7A52B5AF7B22EDF4D13C1A0F81659D7C22C7D
D495DAEDFC651D4A939CCBFF875032E159EE437A2F68FBB9A796AD2042FF89AC
01843A0B408603CDC4D27FAA68D7A5407E0BA263CECAF34FF58FCCAD408B8B07
D84E95D6D79E0FDB6BA53C1C524097F7E1070005FE0374ADBE880B8E044E4662
EF0AF221544DE5DDC61A54CA0504D9C77E08FCF101D33E908A71B94B57A71E99
C8E97C95D6264824385F1E9C6AD73172B8777A6A9C884E2131126C9A2EA19A80
074BCB3432256BFE41FBDA108B3363B7102FEF09C25D849D7DAE91025A4C6D38
DB16CFE8E67900498C2F9834799128DF2B034852C673ECC4B4C9D77AC775F945
CF1F96E80E3B5528D4D09E1B5E78B3E352007805470CF8FD960389A736A651C8
E9877DF4A9DE3457D17C81740DAFE000798A2787814333C50AAFF69C863ADF81
27F1FC35DB9CD34EBC684818AB259FF8F84FCC533000D0E1E9DACA45F94E8282
61BEB551460C501428C4BFAB2B6067BAE1E2D71CBE46FFDE38A25CD0DA603BA1
BDE6BC382D8DB22A52CE0029B573F9F5F2F99F02A7E96171314C00E5F85216D9
9E98CE869F017082FB4B0C2DAEB278ED1C55B16BBB1D07807CA3D7E9844BC82B
B1B2426ACB9FBF557D742F35A403EFD9761F38E63ABF21DE56A291D2DF07EEE0
4F70626F4C73D605F7E228B23414CA58006F3D40E72FB71FDA23113D1B0FD21F
EF5897DCC7EF4C2CB4B9918C0626FBF8C4B10DFE83AF257544C70A57AFE06F7A
0B5F072E7235E9B1BA19B953CE9DE783BE36D5CCDC4C798C8CF098F26C8AF48B
458803BB26487C1396A12DC36FC9583A048A83F68049C707E5FC1473E7DF92F9
D2E2B830669F8630FB55709D85C29E7014A84F5920F3D806AF76ABAD9FBEDC38
8D8DDE6F49CA08F4FBD88644E60BAEFE49E53B1354C807588476C398F937F142
69C0E5733E34BBF9B416E034586C46E8419A975C8D37D0A16E6E3B361477A079
0C7141A679CF5F95FB8D5A4E24180ED6517E4F0FEDE76BFECEE5BE55608AC296
664FA0A919782A6ADDA23C38C361874254B5CEC048F7E120356772127F589F03
18D086E59953642D6C2D23CCCF3129CCBC9A3C3E966D3F3B431634B78DBC70A3
0BD571B782F24BF7ED544AE148467180DC2293FA812D817D2E5EB294948D9305
B66F6DDCD13D1E9F158AC88FCAF620320B38C49770AE23986F8CDC1C1DC9E4C2
14326056CD0B162BDFAE809998E0B6C0032CF12BE89CA00370A27B2EA0605F52
353E6ED578ECFA63DB3C0ADB530BB7A3892E86F260E98F07D4B0FBF7B566A425
0A26B464945DA4ECD72E3FC98843DE4A57191E757C5AAC0C95D8199C8DFC3F17
8B8146529528947283525EDD4C591C6FBAB65FBED8028533A66013CFC399D751
C897921E4CB9C904C656044DA384E4836D27E0AB3B8522892F912C82043AF80F
61A293D8E4663948837A9ADA1FD2D967EB9B7F6B389EE22D1C0802FACD28F8D0
EEFC185D96FB5BAFD9B0819AB0E0CE1270A2FC838D91B4DBD75886A78D3A1E0F
A45D5BF75C4A7A9C74D6A173AA1DE7E31F9952F450564F06CAB105AD6F4C749D
FA3E7C7E970BF81334F2F843EB703B00BE97F434F30C3B3061F046F959CF3B5C
3CCAAE1E43F31B506CF77D970E10678FBED344CB30F555634425B334011FBBC2
A5CA7AB2EFEF0596D5BD57D23639B1D82F04AB2B64EC307C8AB5977A6D0BC305
BD5820C99145AA7E7B25CD2E2CD662E6FED58263E48108AE87023FA6C0681659
8772E12C1DF1181D62DA31D6CD94A54CC5CE59292C6E526F5900522F2ED1F047
911BB34107E71F1884D692FB4BFA8E2E4FB7416E208F20774549A2D4DAF2AB5A
C55D031A2A37B5AE06DA85877AE16BC30D56A0B208DA546903B801BE43AA2F45
67B73012B130536BDAC1CCBA0D791A5346DFB06D3C7328F6F57B13A373A9E0DD
CE6E0CB2008467372363A11AB621533F6A1938E812BA39E0756E167FB5AF52DB
B860630CFC576339091662B7F1AE3CB1BCDD4120E4D959B5009F45AE06FDD46D
CB8CFB0F96E0D4388AC848880ACD3BBBE679793092790055198EFCA05EC6C3E0
C3E8A1D8AE0E1C9828C293837334C0BD8008943710FC64952B19748AFC7E5D30
5E31B0F2C34E70591A1A14D96EBAC344B40C5D496DCB96A463116389EAFF5982
413682F586CAAF26B0F6849688C4A3D83CD75A59434FB3497FAD3848CCFAFD23
92C817B8F7FA666FBE36129A36419F6407099CFC3E1E4DF8435E646688A6CAC6
190A493570BB800546CCE3F55865F40BD116188D97D419AC2486AFABA6EAACB7
2F3FE026E0D86E3C761B8BE4A0ECF381E24412BD75B140740AED1FA5436E30E6
1BB7830DE5CF662110A128FB787A23A118DA4F02D998FBACA1A277A320248E68
9B9827507BA52A8E4EE88E9D997D74BD10806BDFAF565BA4F75276379D869BAA
69F4337EB85557361E1D6F08EDE1F7B4AB479475A6BA6BFDDE42FE0BF382AB69
E8E6FB2466ECA14A68AD50724816D76FE6812740F284E22E30D2B418CAE285AA
38F9FB436D3937102178F1D6B50DAD534D89F7063E702EE6621E0AF8522972AC
0CF27C1433A5B21C85C42294C5C5DA468B5307F1A0DCEE5B687455A5C06FA9FE
941781F0D9835D8D020B175D1E1B78FB92A8A32F408CD9208A66A14DD2BDC5FC
0972D5DDE69392546A9760E5EC6A13C77C0152C719D270CAE13D87FECAB68D88
159FCED051ABB623DC081C31222774290661A118D9BFF68622BF768AB77A94F2
632935CB7E8703151C32F9E4F87E81998514EF941794FBCD5FF3D34244C2FF31
014776B3EAA1F66C9D322010950F09F9A3F4535F3093FBD68E47B44973C71CC1
D3103066F6DE77BD7D99E0ABA1EBF44D7D7A4138666C7B0A7B10F10DA7017B72
F57DC4971A485AF26E15DBD7F7BC33B34BF3EB64D8B41E63A28E978DECA91038
EBF0AB1F2B5C97A5E4D6127212AB225F2857D3AFB9B11B3D0DFA60D4F1FDCE6B
39387CBE54C520F449FAD1B238019816463C0206918EE55F76AB2428202F6A18
5B283005D97035874D2B9AFD4D3F29B4B1E6EDE308D685BED6A5EF82D27AC66A
2F6F91819A23E4A229EC83F57B2AB218A0D298CD90EBD495E25C073D0D16E9D6
F3B055F4B9CBCCADFF6803B31EF9A85BAF11F98DF053BB811AEBB91EB3CB214F
4F214DFD130D697972BB11E9F43A39C5EC2CDDA3AC6C0C12D644B9FB98967411
1A6036D8A6614941E5A2F473A7FB099D3D51EF85BE0B5CB46B2FBC9FB9C1F083
274F2033FCFCE759E760131E50759AE6C73C023951C59F3E09157F87CA9762F0
0A7EE36054A99A9D3BAAFBA2577874822FA06852EBDFC8B36B5101F1290368C6
3A0FC9BE16947EC364E70D5006C9511781D28CC30F9DC21D974400A8C2642147
D4B652A8F1A7E5BFF54727073E848B2EC0BCAF7A59308F505DBAE59B48967F9F
45E94CE0A3DB78E8BEE86BEC0C9B755750CE15FDCF5CAFA6ED87E41DD3EE3DED
90C3B3F8A39F36447CB0BFB14B8D584BA7468DFECCF5BE1B12A00F107E3B12F7
042BDDE741CAD677367993F1B4E7756DBC96D8A865C84C90990DDC70334FF6D7
B446F67BF70AEBF35A2AE4A2CD04F5426F7148BB8FA709AF1344271173529372
AB2BC7C9DFB624A248F2B3FB6C70615176F41A8DB91E66493E26989D59C19520
CBE7228870D2168A99303C3809F0D6177CF5F25AAB7D45791021199BE22D8994
0BD35877464F422069E65809B7A1A57F9CC512BDC51EF254914F3E9AEB8BA48A
087BEA2DFF55CF5E3DE25AC0B17B4D61C7C20F9EF9B7CB7F1D174B2E94953F54
1C3B84D4342AC03397338DE5C961B3AA70DA22E24F5D5F7DF0EE66CBE112FF9B
DEFD1CADCAE9F8CA8978788158CA027DDDF719557A7D64B43EAF4ACBAC482D06
AFD458F0DC3F463DC14E07386A0104CC5ED2C68B08B6321F881E98B4C5193BCC
D6BBCD792189A12FC9366BA7134EFD67A22B4E125E869631F4A535C0ED4336C1
ECFC74F3865CBD9DF468F60436472D2381DEA09B8B3BCB109BCD72332A948490
B6C866CD45B80656513B6871E5258B4F80702ADB06D3B54DAC05EF13006A116C
82E1319A636C7D42C6CAAEA8F7C5FD4CCB61CC8B279A83B37EECE68CE511975D
6DFDA38405815C5B5497FD0900A840A22B15E6DAC8C7C028CE0C0D800126FC14
5DF78DF99D9FDD85AEFAAE39B81751B085054144022BE6620E3BE3BCFF07C029
D465A2D4DD3B158DCB9A85A656F047B16448D99F49900ED5C76681394FCC328B
413F11A3968D9FCAC28875B34AB843A16D141698336E57C3793940F17E797B21
89AB6FA2EF60DA0B46BB86D33CD66D069CB847A315262F8F4F114AE31D1D635C
ECB8442177468B4A69E269481F40D004794CB8B1EB68A0B53C977307CE56259F
F842E91C82E428D80CC1180D34075214ACA3756263FEF0111D389D94D33A0E4B
C981ADF1AA24A40520A6C06816598772E12C1EA044398A029D6D08CEA9983961
D761AB6D4C5759EEEC671B103DA708F2393AD051D68085AD21C982C71F0EDBCB
FA2BF93ACF5E651F75F1C47F2699BD0DA86F7C5E1F4BC6F9D662FC2E59673DEF
563AECCABF724C09CEEB5AA321B91E6F4A30F183A66BCD03F71278FB2BF0C8A5
3825238B837FDE0271B310BDB076E1E5D2187136E1E88EEAA7C4C763218915AA
9952E0ECB9642368AE093CF808D930244D8AE9FFF3F592BB136F41F11AFA8CC9
86D7978861CBBB5978D4D7919969939A14CC93BFAD50E55FFDB55F460212B87A
1528AD133A2681B4DB647B11B570572BCFCA84397F0CABC125351097FD8497D3
BB8E9F0453C2573E0F5A9CC7C841C2AABBFA90CEBE5509654A916A80214563C0
2B9DAB14A41206C3350B9DFC1DEC1CA57233854C0A785600D9FF31D2817C2ADD
3A675E31F93E966E4FD5C63D07B8B577D80F66EACA440D77A9179EFA674FF151
46975C6E920D8B6D8B559E66DF370A0216FE0F4B36DB89474563B87923D523CF
F87D0A87D9C2A2B7BFE91DD2BE7E5CF1C6CDFE4C69D926F9C3A768E5D8E18526
91BFA85D103528A79957F00BF8849A73B9D49874E459B15AA2F7686797569D91
8E9067154248AEB3A2D3076ABE95E8D6625C61442D7AE3543F3EC5C349D20D4C
B77C885C19FB751B46C7972BDAE3C044E0BBD0FFCFB0E5BF94862633F80AA193
8F0353103DB83CCF9143F3A1A7485CD1EC4A3D0035E2A57BEBDC39E7AB9B8A6C
79FE2569E74991C8545446D1AB97E5A1AA8DDDEC792C2392B67C8C2373BC8E4A
791EB854607D62C59BD0DA9C9064035A5623E725D41D2B5EE0C3F03A603A1617
13216AF97F228F9FDB5CBF741CFA9D1CA3196622B3800D5F7DD510624B948E9A
9A7276C249E31F1DB40DF9EBE155667B765931BDBF3A63719D837EB628627743
C1E7186CFC7CBF2517728EB8C9955BDC3C107F352CABDEBCF9A22F9F4DEB3B9F
80DF0DFDFCD73F99971EE31684D721083208D1B566461FE03D435D01FFF15E7A
613EACE41E72B21E95E828E4B7759C944FF72ECE869A601FD898304C6EAEF67D
CCA5FDDC4AEA160F30F006E1BB2E9F3E4AAA7AA9EA4E05CEF9340F82F0E079F1
C7200DA0E6977B036E69FFEC0A81599002E066EDFD837C54B7985532A77E7ABE
60B0CCEA8BFA6DEF9BC50AD354C5F3F0FB85AA51B692CB69F564EE95F42A411D
26C48562C814D59494554390A5B1EDBEA32C7762AC27D37041D63165EB3BE7A2
2843BFF3FDA7A855985C013859445F7EDD89CE2A169BBA8D15F6D8CF4A70145D
467EDCC0085445CA815B0FD701A9981EE97576B9D9EADFA0D51077ACDE9DA732
031E629831F7575539CB2A58832AA92DA5F34F197E3EFBF17115FDFEA98B092F
03A7F6F958B74F4C184A7E64C964559857A63FAFE4F1EAFDBE9FA317C2D84655
C143C4F74DA06D49D1BA01D0E1E9DACA45F94EFC91D568C63F0DF55132EE4BFC
3E579C96D321F56326AFECF8E97444753F21C41AB12796146E427215C73BEEF2
0E828A46681B6BDCE94BCC917528A1E4F90EBE4A58DE01CD82B0B8D1C2699BCB
4576B8626AE3FEB4F127D094B167C7ECAD42D00304D0A253D31ACB26D732FD54
BD83E3C485032A061769D597052A48007E9EAFAFCD3C82A8CA364714F7CF503D
823C6E9219BC87F668804CDB793530EF5B16FA667198CD8FBF4CE8FD1B6D7332
0ACB1F6C267D3EB2DA414FCF741852E2567C7459D83199040AB64EEB27424B26
CA8C69E7988C35184F061DBDEC0C752E863F68177E4F68BA72514ECAE9A68F64
D2CF9B4EE95672C13F4D709C289E543D3857458FB78C6ECB6460A281A80F5025
23BC022928659723AF7B45386A18D452DC9319467873663372C396D65B3C87C1
077A71E5C95228114053B0DE93BCDA2431A3F0554B874AAD2B92245CCA4AFDA8
0D1C7AA14422306DB0B1B4605A00D65EEBA914A515BE7F74FF21BD3F43E2485A
D87BC27392D7A101E273541B8FFD8A9F88AF402A9100A5452C092484FA6FAAB5
FBDEA2A2C207DAAF5700514C4CDA994DBAF9958F47B3E92589CBDD08CD8ED7F4
D6211352ACC3AFE91F9FE082F213C45F0EF13072F4EF9D0E9FB252D7C7806F1A
A59FE77425FE62C24ACF71C7756763FB6FE9ED851FBC93DD94BC03CF89CA2C37
058BB68FA97AFF07FA05D23A01A37B13382227A754C1E58725F7201587A66308
61B8E566A0321256A8E4CA391FF6F8DD06EC512E1E3DCA950F0BF9AB2EC9F5B7
BB957CD0B1A298B9084BBC0CB1E5DE954EE5ED85BF929E901E45D5F90F31D8FB
2B0F91F6E4080B3C6D4A4A49F234733B98F0DCF6CA9C06832E0BCDBD641B9E67
3F20AFE5D66458485FC1BF14B6584EB4424D2E2F37B7FED3BB8E0AEFE3BC2410
5236974C892564D5763D3D5D678FA7AC590B12E41A8C8B53CE665EF5094F4014
E19FF5DA64798AC01ACA53F78E8F619A6D4BE86F4F67B2BC065A56AB2C007E06
6A3BBEE1AFA053BFC3F4503F285F019946616E0ACFDE69211DA05FF14547300F
FAB1FD39409175426EC07FD1E3D4AF398B968C9DFB8B3383BF9817F355C5BA54
56A7FB5A5279043E68FFB9229EC6DE4ED5A8DA7D9EBD72F5C7C882B7BF79F520
5F9E9A1EC74128D2448189EF54C0102346A982AE10A214A618C01C1D84DEE574
3C6697A0182BBED304B28C825FBBAAF61C73D2254EFA2E87D2D217ED437B23DE
309A360FF60CA82A8251BE5674CAC40CB8C0D4B64A6799C8449E97E13CA0AAAB
196E8FB4CAADA4431436009135FFC380700782F7B3423A172DC523574DF9E989
6FE3FF392A00DEE04E3156C97F8C14713390B5E5EF775D62175B6409A678916C
F881217B8782C257F3881F60996CAC3A8DE48A068D1C93F641BA7AED74270D1A
32A27E91FA346AE9C4573DE9A207101BD77D2728A4FBA8DF907229C1CCF68145
0F0BF41741C5DD7F4111BCB49DE285E7CCA8EA2BBD321844409FC9537BCE16DB
45A65DC61852339A38D7BC9D8529FD28B5750E290EE4BD687C783B27501C603C
D989F14A2A0A568071E8F30C1866D6836F5557F484D9733BEA25BAD1C1C0DBA1
EB9EB9C2EF7D50C3A6F64C3784717592A22FE5AD299916489A37A541ECFFC41F
3DD3FD2EBD84B672F4AA14E86DF10954DEDA2F6264B06FE833131E80E20D97F5
FC1DC70FE84E7AA39B55089D13B2897184DFD048A6FB5423E5FF2B32BE0179DE
BACAC5A6DFD51F6B5047857684B6A1C89898662200C64E39E2DE83D693068512
7D91CCEC851E7D24B704DA1DC584BF3F662B3E1C1D25A0626238AE18C8319F95
F8038848C132C113A068977147461241FDF5F1C22E3C015BA8C46DFEA00293FC
A8CAD6BD2C7676D4FEEB470DCB239EF9D2771EDD2A4BDD22F82EC8A22BE10001
B3CEBD719EEB38B92EABDC75BFF945955EB80FE358C322B2896A8BB113136337
F88C41B0FEEE9A767877A0CB1994B8B6D5F3B8EDF9D4D1459A3A389B82A6B44C
1B985F03669B546C110680DBC9E1DDE716C4A77DD128B51BC4CC20850F9E1A5C
5856D41D8FB730E04DE248070919A734F426D447CDF8EFDCC1C8AA92340FC332
B1EF5CD9063DF88E60ECE319AC80193A8EDB7A5800D6D8F54FA2527C9F05D849
34498CB1CA294DA6EBD87FBDDC2BB4988068260570B2884738F247821F243E8D
CEE74E32554E529BFFDCE98C901A79E3E0354517C3D95A794B8D6AD047F410CD
1709FF4A5AB714B111D8A8FE826BDFC4834A5A1D1078DCC4444EE308B8A5AAAE
EF347E3328CD6FB58B840C6D14EE78FC84B1BD61C526475C30B1371DC4203744
C86A1FE55F5369B12A0585133196188B469C0408DEC3E57CF0E7EEB0C1790084
2424E029E159D89988E89E0A16BF638A41A0157109DA020A5F144492F8085918
B9123793DECF156F4018399C3DF46C502D96F394B55540E870497A23620FE7F2
1F1CA698A994BBEB24AA92744A35840BEC3B48876DE9EF1C24AD166CB5061F55
7A7D64B43EAF4ACBAC482D06AFD458F0DC3F47EE7F15D0E746759CD77594B3C1
87E1943876B8DC19F76E4796A8F41B387AE7E4D6EDC2658A029D0F7EE55799B3
840F47ECEFA53F6F3A6467C14C2B8315219CC600D3C6C2C2E9F820D2B1C9B159
8BAEF7CE0226917D674EDE2CC71844E1F488FCC359CCF33B52931EBA13F01AD5
A0CF41C40E1B290E073B8A067D595E12E31208F9C7E9BE1BBEF001DE4C2236D3
3C447ED04ACA9DBA348076F8ED9EE5297770D868CC596E737A5234E91EA9C52A
86F39A21F60514F88E8FD48F0B675F296A83AC1938FCE2DF9234A8A566ECEB61
CF2BF6035B98EA90F559625C437D454B18A8F962F7879D063B8B80FF811036A9
9370C24B1E1069108EC36BDB46E5704EA4E95BC91194E2A4F97459517A15D695
F3947BC776B062381C25057FEA90D02F1C479259B71D9E8E5DB24A70752D839D
D4A4F6A61B071753437546DDEE92C2C7EE93E4757C98C5E2C6E2A74BE2E35BFC
875454D0ACA65E00257C0BEAA1EF3FB862F9A3A9F8EFB65FECBDA4BB89EDFAE2
D6A52C31C01B3AD7210DFC42A9B03ED435197A7BA67F9C704283837A76FF09A9
86823662372FE843423B04039E704058DEB846AA6325F09682A94A759A52DABC
55192C708AC32DD4739F3EDEA5FA09018EA13E7145AC5BD6439930D168D60FD3
5362B2F4DA73458BDA9F31F188D5BDBEAF62F00E36C57A35E2DAB8EF45B36F46
9AF412C1A57BC2B045AC90C9E7E3FB7EFDB78E1B6E1C682B930F48BF0A28301B
463A55DD929D54550933FC4B7290C8C71C097F48AB5C03B5D99BC05CA8E92DCD
33C7DD73FBAFAD2A3EC3AD445193B32002F2C1DB42C069893A6C31F0A44812EB
038060994993CBB8337F060FFE21FF47D8FE250804AC5A885463BCE392A70F6A
B8025660CA3EAA7C93B7524614BE7C953DE8E0ECBA619FA6C38D9D27307FAC14
429AB8FA9A5FA8C6AFEADE7E631618F48D633E55A4DA9421AB550DB7FD13DFF4
5696C589BC74CA556158DA32EAD64629BDED74F5002015D3A8B5EA02CD10C450
38FC6C4E8FA08109D677D205E06A9B977F81A7EC21FD1F6781D44DC2D1388E6B
33036354C6BF79126C436F4C14079CD216A6C58EDEBAEC96F5B69456110B9A8B
BCDA8551C3C14F979F3CB16D6EB20D9F9AA20F92F1501F9FD6F89FF265245380
70C420CB10424212EA9016A34634CF88893EBF53D8D28B36B273A01BBCE289A2
95CFD5C2D2ABD635DA7FFE17BC471CDFEF5F67871FAD992447F76CF16F85D0A0
4140BB88279F38A2D283BF456D5D8BFEEBCB5B69717F22A05D4E53ABB0F94ABD
D9C681FE691EF3090EA8853E8A160F7A65F8DE9A74CA226BAD0E6EC504601123
9ED7D6C471496D35CF39C6C3E0846586077E38E1DF1BF4C8C223A06F59DA5AFB
17F821D067FF0B60A68E26EC70B39B888BD9D4A0A3271C6D709209D8E53BECCB
5A4D2443EB3A063F53FA49628CDC2A8FB41FBF08C850C509FF5EEB4E85C3406F
4B62DDE3812AA8D94831947CDC43C756A2382D29DF796EC2A8D2453D65A8C955
256FD24A2E42B7076CF85296A07CD13F4F32038FC8BAAFC17A8E9B0CE1A95D1E
CB13DD58D02216A81D710442253365225052ECAC899BC729609451258BDE7360
066362DB24465EFBADDE9F7EE71C4099C3807A01337FA4063B87047466804D6A
A2CE101B46D6323843FFE132EEA49E11D6BD6E0DCEEDC85B829807118332CDDC
0D88E7CC1CA9CD67F3BF4F3FC965D7F815611D1498D2FC421934DF2663935BC9
1CA7436C54286E4979DACD3F5A953BD9E918D5E46449525A406919F8BADE9EB6
4CA74A512741975682150541AFBFD1BDE895668CEA9C71B76A303F57B244B8F8
8AC8A390BFCBE83CD8A240B48FBDFDBAAD6E3C3863D753FCA1E5A20445E5DC3C
4253C6C85CAF250D58AF5317F80A968AEE0DE05A0C83CB1E8577E629C8CEFB80
51C7A4FEFBF0F7C5033906742D7FB56041D3F61EE0F3090A00DF4BCE5B2D8AC0
E4735C777C6D15C0293B8F417D0BFA4281FD499DDC9492155D645F9221B950BF
C2ECD8314F9938BD2584EC0E32700427281A4D6D3690FA6D96A65F836D46B706
9F980F33D5DAC48D8CADAB3A7B0FF8D8386D6DA6E741A012809B689A9E804F1B
279E6F1C7CCB3413F79EFAC256BF5830A215725CCFD59D2A27CD4FD3AC255968
29FC863FC179311105595400D89642FD878AE1A0F6C4AE843C03D6A768D0D41F
EBC64A0787C7B8BCAF68BDE151C4F529436BD3D56099C67D389ED7451D792451
54A125B43EC620BEE18DAC774DAF30BD5C9B8994FD5CFBA6CF39A03AE5B19FC2
B68E86F97B5B0D1A55372F50F6C04F18EEF894D5D2C6047D5F64C0839943C180
C2A61DCC2CD3D2B646A902FC3FF3F6DE17092C10C539ED46C473CCF6C6D0556F
6B41D85D49D5A65A1BA3ACAFA740260B270B7E301EC799C19A872663BDAFF6F0
0EAE612D30E08F7AE26C8EDB10C271247B5189BAF2FDDCDDC1B5B6B5157C6FEC
CBCD342C97EF86F60B81EE4402018E58B92C74696202999646E6439D4D68D547
2DD3F2E74DA007F26479E06AD855BCCD97B6255DFA09680086F1AB3C9C1E59
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890A7D49B0A6C7268E399C6C68B6ACC0D1E9F5B2
931BAF9EEEA6ED985835323E85D72C6A607A99212BA2DDD24D57809EDE36890C
F8121121306593CBADA65AD9EDED7740C9A2F402E3908B54CB4AED249AE575AF
E64C76BA802490ABB489275E5A3F2B926955B0D961A0B9B3AE205C074AA695C8
68FC2F6997531FC328B8FC65BB06C17B212C8C06D5127A14D7989D24912D1CA2
1FF37457E65829B6E1C65A09C1A101047DF20ABCD57E067A7298091C88C4B587
84409C67D00F7D95FFA0D125FB938B5762D912E1C0E116AA0593B1231FDF3BB1
498BA3D20DF13C7EC6D40091B789C9FB7CC872BB73E6B9D4ED8A555CA31581CA
0F057B10C7A8CE1D7CDD4FE2D5332FC533158B8CE6CD3E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D5D4375AD01D63E8F687B541F72E97A8A2B7
B1234351BA9BD6B9887890291B5550FE37F5B87278CFDAC40645DA187A19B922
7D76D85DE32DC43B9A9336AD5DE21EFD4E20615B53B485BD8C1D3C456F9C3D44
EA6F28ABE61E3BF0495B45AA403678EE2904ADC8F4EB97976EF328D6E8C7F6ED
33A0C777A8F348D5E2DC2158BC1898BBA676CC279907E39B68A4A048BA368135
DB440925CABA05B8A13B2D30D143FBC4FEEF7FD5281A016ADC60AC66694EDC07
0A1CB0C62E64A0059FD24E9E54D410482DA1202736A20F2C98854599C14B7B55
2BDCECA9697A81C5F36EFFE4C3EF909791E274A8E1C9A623B3FE5289F9867A5A
02CCC668AB5752BEA5A7725B4115BFD7BB646135640E1A18A9EC9DE3BF295416
1E90596A2675C1FF1ACFD97654CB959F9AB2CCB8752C341604BF43CC74272C78
281DD6B46CDFB5424CAD9B2753E3A579E444F20845BAE801DB3611D794FB1A1D
878BFDBB49FD8DDC5D6C7F4B7CE7389C563D11219A887F01853AEF9D5DDBBFAC
0581982D7EF27B675C6B14C5440F3DD5A248AE056AA2B7755C4BCE15B185CBF6
F362C146A2D2AAB802610A0BF6A7DDBD2B1241785EE4E3C12C98116B48506D62
8A9B0EA9AF81B65B301ABF7AD0977277C205CDCAFB0297B19099FF7F6835FC83
6481F0A6BF0ED7AFB4A1FB5528320D875EE67C88DAE02A4639F3AE65A1EA6C95
CAA68019850ABCE61301AD0514D0ECD5B39DB08A4C4ABF95BF80FBAC6423B30E
153A4313C58D9F29B58B1B3B0AC07DA780C9FA540BFC4C7442535215EF1BAC83
444BB2DD137F5344AA34540B598C03F5046D9A718801DE38A6D12D9047042757
3AE632BED1D508BB563CD44C6BA69392E5CEC55F697AB72C5724DD9266A90D60
4DE6D3AC84789274D7BA7ECD77D2CF3D9B702BD40B53B699A9A6974E5DFFA721
A0FA9505D9A09C8F033B8959E683523B23F0A9F5E223EB657DAB8741630D2C19
484633C9B572A7583E1A2B62E23D464D850079D5837D8F9A6060FBCB52C784C1
CFA519D50FB438CEE81AF94EF2FC79DC8C49C0CE362DDA3C2FB958447A60DA7B
BA2F57E3D67DD93D42F361CF856F79A321A21DBD5FFA5FA1FD6219FC44CD0E30
1A6A3C6869BB63421BE9CDF2BA0BDFA525C4B5A6A2A41CD93D83F92675649166
C1C396114E899FD458D6931EEA4A860ECFCC0F6D9DC09848130EE7B1AB05DF55
A54F2EB9F8926B119EB0B45CFCC9E9CE2A797F913EB616B34042952857619D1D
BD84C592F3EFF5E29C33B5DD4D835E46F66DA29FE43A5256F53F00177A582439
683A053F848471471516C4E155A8C330B0AE97F14A590B4BA25E98E3F085AA94
726C20427DC51C69967B97BDD665811C226640495830A835512FCD1E6049FCC0
DA34F76DEF5DBED2B20EE95FAA70E3E98BED60502463BB9EAA77C3E1CD409845
5241778C41726E508451AF1901C11155F268CB8A370C094272BE4330E8F02C52
DB1BDA76CB1FCF89117496953E3BFEDF58E50F3C9FA1BC5B8B12EE31F5DA7F8E
B0CFA892A39520EDC40B3D87B695216C2029C31AC3936459B759468E3A7F12D2
84172A95E6EA56624DA937ED277FE528C03F17A0386FDD3756A85E9638D16544
BBA268C570D853BE412895E72D0A297640AF589C4ACB6B1A03B76E17A4600CD2
8E08725DF632E08FB015DE104237ECDFE707369F79047EF0244778CB98AC32E9
15A73823D4002F61EED446D4C829841986A458BE709723BBEA6D0B5B99146E95
C5EEF9E16D26BF04FD0596EAEF529036BFBA0F477EF1C34317375EE3BAE6197B
14E0D14E32DBD4AF8E83007CC6EF8BD31F246B7A77A23C7A935EECD1010C6989
1A4AB38A120FF80DF23A8CF06B60447BC9EC053471D569F46EA378F6A5F667EE
E0D9CE45CF768BAB03DC70EF2B453873697474C51CF6337BE44DE704B2A392D6
712DA9DC5ADB13D3A6B69B6F894447A45761D00F1DF39B074B1D9061FE941446
F091108514AA9BC14E0C3B66B2B1EA9AB0890A7904D758257C2A6D150A3976B9
5DE939577FC9E80FF6D271476EE2798710DE64912DFDA44E8B1CD8B276051DCF
1644845766DAB32DCF5E8455FD62DA97E8F2DBDB339E6D10C1C7C7BD7002
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC677E95307847599B02E5AF54BE91F662979D0BE
A1CC2205A8493A22D252AEBA66664B2A0FA2AD5C2BFDC446E8217D3E5D67616F
A9C8D25588F1689221B896E4663DCB2823847EA18AEC15EB3464CD20830192E9
FA76A8D8C8454C7E9ABF6C0F725BC64477D228181C86BA782F4FE02493A70F60
73CE5AC25BF5C0579654DB07E4ACEA3666110AE5DED90584F99E14B24C7F8229
7BA7530C442B5E22F23C7CC8F7E46228385681473BC971AE241B38AF02B14565
A533E6707D255BB42CD9DF0629D03971CA5998C47A82E39690B59C49C936C145
CC25F858E34B6D27E13A4E773B8D621B25C8B8A3F6A927E3BA6903B35183A80E
B555699747DE2975C0D60DFF13F4B2BFF0C2D48D73A369A4A30AEF829A5B56DF
AF7E3886C50E125D3838DDC8AD6B097AFF22FA89583F307499638173A4543C6D
27822D960AC1783EFDC753B71A0900E9740FC2826ADD5FD8FA44B8F4493AEBE4
6B1A95FF11B58FD6F8C64EBAFE0814DB9D98B3A4D7C75B9BCC81BC4C7C5B4EB2
F0BB2232BA259FC908247A47D56938F3FDF31D90D46A1124E27587935F9E83CE
1430E3EACFFDCFBD4F291D8D47BF8B69F6F59CE04301BFE7C33A8371EC60CA1E
C6E086E9B7B057AA3AE9D82F4D1453B60FC1560BE2F0BDCD3C5F4602EC0964E1
E28AF026A9FD1E4BCD68D656301406C1FD474D98B7555DABFB9933BDE94E7B47
ECE15B865346D956FA91D2C2028FD64BC5AAC437310F1A7D586CC05048684AF2
7EF3C09F73527FCF94D46E085D6B51FD3EDDA3EBD21CB5B571D21A64935A7A2C
587659A74FE3CF535DD1901154F701F3FE52F9576A0FA938B0A6615694D1A837
41D4F258C06B008E5CEF86B63BDB575DAE9F7E1E55AD308CD97CA63ACEA48B66
6F2A639E1FD66B020C2CBC5CF51F32E0F85CFCD936B00928A71B769371B2366B
CDCAF59B1C2BB8D58EF2171FEBA2728C2B0985C065194465D1DA737BE911DD03
2E8B51C5A80C5C7238AB883E083EA59959A3000F6492EFD60548FC8B0996B192
D9CEEE79A7012A045FF72E042FFBF8A7CFA315D2A1B0FA5117C21FB2DE99DD2C
1C515AD8D2AF4ED82E1BF056123ED8131724F0C8DF5E8504CDA09408587DA7A9
3B760B3D6A6C9D8552BFBF3E3BEF576906C3E0A204A8F86CA2DA812DB4F23DD7
676EC3BE949F7AD05C717514E523E0440B2254E0962A81910C6EC8950DEE6B6A
9C306F2B40E28DCDBFEB8719FD1B960C1297C7925F24BD5F1D9AA016E3419AF0
E9E6D69B9452D47689B24A6535E6A04D18A0E3064F5B674211447D44706674D6
34A37B2E3DDDCF25F9748E9C7C3457F32359513A8A2AECBCAD09552AE8213873
2AF2EDD4215BBA84E5FE4C18CA96E889C36DAF2D9A65E1FCF4A665960E5A0AB6
86F9AE782F6A1AA23FD70CFE0C2768667D456D79BD93C1F87AE8E2EFEC6049BE
AD2690BDB45E16CBC88E02E471759DE406C018F9EE020A5F6C02176DF5B9AE7E
63DF2BD3F3C6CBB52E5D75AB74E830939CEF9EF8A94E89AEDFB50EC74C20E497
DF7F8B51EA86B1D6F5D713EF85B2DCCEE85F7A35F8246393C202BDD6920DABD2
DE584E5A2FA8061F68CCC3D5063D001BA3949F96D12EADD820721F4A9C360505
0501628C3994C49C54795101F25ECACC2C965491B245135F08746EA00A28484A
FEF77CB101565CED14C8ECC6DF72B8D560BEF735ED052622E6770150DDE8EAD6
7981C7F8C466F3C351EFC4332563944D9F0B39019E61F6A967212A94B65456F1
3DB459A5F8DCEC48495F00E02C48F732ACEF5D27A353C5CC3393B2C32E6E1F3C
E48BB89C85B9B0B2622B0351BC30602EBDBB815DB969781F9C6B1CEBEE69CB03
AA08FB060A2ADA681DFD540B6C1366F6AD6AFD1AB243502A86FB184B3F8407A3
7A4B011776C7A572D2FCF18871BB569C2DB5B8FC1C56823C9811B3B5ED20AD2F
E457E763F1E38A6ED91990B27A350233112B0A339366B7373CE058456E0E1460
18F693BFCD7FD07158CECA1F10A5D75C8B02FB448146ECE1F32E3F90B51313D7
430BE1825C90D88DF40E76FAEBEEF1C6D4E507FE6C285D244462E06C90DF1FA0
2FE9798974079E36D67129C17A6FCC288B9CB288231E1169551E1B859901766C
1A7C54F22342E068E261FA07D7F71FEEB9CF08C2BAD47CA484F64080B76D7947
EFF831722F16AA125501337D3D039AF45D8E99BBD874DD4429221164AAAEB4B0
BE5CE51D102BC0EC8B0E3E69D117EFF571C1B37599396DB70424C67B69A678C8
D5CDD137A9E80B4EAFFD8C81AC0484F0C03336ADBFE356DDD6B35E3BFB360146
2693C32FE5B20E2D3CCCEA810BDD12127EC21130215516C50BE417BEB7108A77
DE7108D85BAA9D005115D8D1E6F076EA41F64539056FD6F12A603AA2DCEA355E
493D7A642A63F8C286FC69F1DE5A80C4C8B98B9B20BD03520B38959380B6F051
ABBD09BD9CD5004F455D099B398EC368C55FD0BFBB72346513081DED184AE12B
B6F2A0B8B954C1931A423352ACC356032136221AC340391697A1B020389DEB88
41CB34E59B660CAF50371D6FA4D84359D5C57E07C0131287CB8A1CD7229ED655
CBB2FC2F05D180DF588DF93B6925100D074E11C6D2880420219E3FF5933ACD29
38305FB7CDEFEC635C4E3E11848D6943D5C63D07B8B577D80F66EACA440D77A9
179EFA630BBC9D924302C969561C704F60EAD3DC1DFD8ABEE459FDEC1AD8CE41
047A2A4284D7A08F95EF2F9B2355F42C0201BCB01465B2BC0429162BE040639F
2EE9C0FA967A2666CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC726C0EBD7E
0BB5ABE6B5DE82FF252600C67408DE17270E0A6B60951CE771C000FAB997C869
9AA219CB578D5384599625410D9DCC9FCD627C9341EE5EE7B62160EDBB0475F1
B7E81EFAF7223E9D7B39DEF7203248BB6D5ED9A55D61D2D8A66A55FFCCC8EBCE
C593DCDB97D883FC87418CC6B88C5C7E080127212E2FDEC1CCAC426117DDA7D5
07623FCE556CFAAAF11A5DEAB4A0A12E2C7221F8D06EAAD43B675E071A5052BA
0E3B73895A45C1B6C1465432765BB6FD433DB543EB9CF74C2730621336930A74
2028FB422DF59EE85D2CCF2D8DBB400361FA1F9F3854C9EA86DA22AB40A3B388
6A6C0542C01CAC614AD832E9CAAF95CA8FB8D7D6F8E6B1F1470D1BFD1C6E4F5B
3F37CCB5C6F49F964FB9EDAB8FDE5AF3B0271B0147A8E7CF22C48D74DD85E83A
3C976FE83802D4CCD92815B69D985F3B1562AEAB09969F261EAB2991CF141394
3CAF186B136B64A55AB66D790A65432FEE0369E74E2EB935991C9D7A835EB88B
C04EB2B195DE98DA506D8AF6D5EB3D2751503DE9FF66CE21FD3F18EDE6972EF5
476A0448CB709DDAF100179C41CDD34E70639018C1D94157A631DC2B95C562D9
F08098FF6D334E1EA12831EB854BE550341FD8E4CCA7D7A3E18478AD3F1F1627
C7226A19500DDC798B57B6D7B7724B92BD48CCF7CFA30A7E92FA628D056602E7
EAD96F26C67B2E10B620750E2C44E5CB9DCE747E296F7E721CE090148AAAC9F3
C2A26C00FD63316B1338F012EBCB1549844D1A9F70EE29B069A97BDE7AF2209A
9F760CD4980686D6A0CA26D77F403C06D65B7394BF1FC7D06D3CB4D93CBC1CFE
349AED0167FEB6593EECBC997193BEC0BA17470659666D3DEEB203D4F89B1D0C
9F483DEBE503150EA72F5529C6856A2ED6DEC7F70D115725622193430953F8EF
2124C64E01DE0AF5CD890470A9A5F179902CD32D6AEC688F02A7365B66797DE1
EA02281B8CC461A2C93D616618D9CA254878ECF291309CBDB0A9F287067554D4
64306A44A49AF8095E431F91B8EA9CE5EA5A6AC021E852C3A8F8B27BD5EEB828
B2BA0301AF9EF77428F5D92F0D318ABB61FCBEE8E8B0B00C0CD028FDC8D49ABA
27F0C96DFFBF5A41C82EC805FC436052C08C11F14B3AD58805DC0020DA959EF5
24B8BE47F16C08B3A3981E2644AE0718BBDC6A43328284068B2AB05CE92EF92E
2E897C1AD9E6A375D7771A6AEDB0E02641A97163CE1760E7B2BD1AB594E30D79
7581F5A0E81AB0F7ADA1991DE42B2B781312D14C0A9051B17B14FB582DDFD9FB
29BC4EB03896F32CE12BC890FE786622570A50401A5E45A38F0A186733A85239
92CBBF6DFDED8BDE4E6DDFAE37DA6564E63E4448BD86AAF678BCB0B56BFF435F
C4E4109DB382F2181EC00A0208E0451F6B0CA3360AD99CD656E25305A846700E
91F93C1653145AEC22331C2DED3F4CA87451BB8D3A8FD9FA7E1522A322816CE6
DE933CC81D83A39CCB7E05896DE7069693EFC870CB86162612B23A4316EA2278
A65E36711CE80A4360D829E3905EFB8012302610AD7CE0DC20FF7AD70ECFB5C6
2C42B8B0B295E48F873407D8ECC2D0DB427E8E9D7FCC7FE4A04027261E419451
5E87FC36485599FBC9DAC6933B8A61A1267A07C80F9ABDAD878915286731DE01
010A7C89305D2E3DA554350CB8CB8E904E7535440A065493480FDA1C5103D54C
652E1387BD302832DA3B044A853EB94D553D568AB7D8C63B4FCE2D86964B7DF3
0DB1230AA9F2676882927A517090BE92D4EDC366D10C640E2BEEA25168B07B49
F4D258D6E0B6EB6A57B74E63A3518EC7667E07BA5B2FB2D7E017CD595009E52C
CEA351BF5650FABB9895623BD4768C31E35C395C3BF67A79F8B1AC292F38AB2E
F547DA895BB5B6E1C1BAFF90F1E16665998AB7612444953E619153EBA5E4A91E
A73477B75333510D419E477E7AD9D24338305F4E01DC7DF5B3174ECDCC3BA85A
857935BC7DA2DA3CC874E4C934D42A917A51CCF667F5310BC1D39E332FB92820
F84DC9A925F2DB31F62CD736AD7AE654A7A2D892EA471590989ED797DC073C78
1162B11E7949C57EF2F4E1BD09F0CD7CAA488EDBAA54FF0F25A13DAD43232F7E
E4D840B436217508B15B86F15244E8940C2F9BE4BDDA2E4322C0528513D162CC
9849A0B137708F4F07EF69543F130F9658D782EBDA0FE747739A0C92EF6EC74E
BA6CB20D0AC3FCCDE652D8EC09577F2F2960175A90E5532343B29A6A415AE72E
6060C2EB7813CD05C6D5EE5FD2FA715D88A2586DD0DCA479D64952A6D39CFFDB
A38C11C7238C738370C48D05C451E5BA7802C3AEA4369E4D84762655252E4EA5
024A8EB4A47F74893F360FD2D6A980E6E4F77B93A92500C46031A4A81BF6562E
CE87586E03C99C4FEC726E5D5B23894D622C39534F12614E0DF155D72F1EB250
827966665BF28667266402E11621A5A623CAAD1FA80328613DC94BB410CCC9D2
D48091757130055257815D95644A1F6D217EA72AA2C2EA54482A16933EA76014
2ABF564B91CB0BA5B3C378E9541ABA5A75104641BA7E32CCDC0E9B885DD04731
C461CD14359427CE75FB0E2B46B3E57B292829E8757F0C493522A4B260C55A31
AA1939D02873061F82BBBA1075607335EA30C933E3EEDAD46AAD7952758D04B5
114C5E507E856A931CCB05A58C30CF4B9105E42AD002B7599EC236692775A06F
0ED1FA7A4A3BAB2D9930358DD7902FC0E967F6DECA7277FCA73E841737D9AC26
5380815C62AA5706D772C8E0F2A3303895C92605AC416C6CE394898642FFE0B0
330D747E4E19758FF05165EF7B57EE57EF59082413742A4CD1BB78156D5809A6
8F255E488ECF3EF7B3069EF25ECDCE357DC6CBCC1EE0BEDE8B7D314BBF92D3F1
CABDC48E9156123182A8C9355F34A6C53CCCB0EE0D9E3C57823F8D6B050671E1
ED55F9793712EFAFED3434FA017B58EFA18D7DEC9E43F0C01A7EFBD135748915
856FE50D442BEB8A77F9298A753B4413656127E2CCC2232674924E662B27AAB6
D57C09F26DF73FD18C1EA75B4C1FC380622AB54A020EE2840E81EB0C90829179
6D97AD9CD132894AB79CEDF9AFBEF0323DA8A0CEA866503D32708C76C30BBAAE
0F953D5B8A1121A79D66C9CE3D5F6EB1C5D7524C125C86A63F7AF293C86465AC
71CB65CA8AD5869CC9FD7C4C194AE8D5D20A725355716F96B850D6FF61144F6A
9E51CC1B8A86A35080781FCC7C9C82D5BF578A0C3D7F1620D619856345A9C170
11293C733E90B60F0DB14D360264AA4469FD8D653A447AD4F26FA58059FA6144
BEC7658C05E12BA3BA84BC1A37C3661E84351914EACF7842A4BE1404DC599682
227521A5FBE910CCA9A8D8632CB05620A24B553A27E1AC3188FECEAACFA19187
A0ACAE8CFD363CE13CA8990DCF8AB59D9FE70A9C4D0076715533B2F948ADF90E
8319E8044259E7A06C58C5F01079E5CA265FC20C5927E8126A9EE1F6BE77ADAD
22FF83BD861FCD07E1302D6A3AC104C0FE904785BAF8FC671C636947EE42F1A0
B83CB645BFCEC447E09641C53A94C45174899AB3A9D824CE570B006E9C2C1B68
E83A7B0134FE419D23CF803DF01FD605545A10D420CDFB43CD103ED7A1B9C2E8
85C88F882E29F5FDB421369386E40207B269AB40CC83DAF836ED4B7478034E4D
DECC8F7BD3EF0C79354354299C85E17991348675EC0A78E085205665F3880858
39515F0A04B1BCEFB09146FB7194097660500901B25812F7A25307535F51BC53
DD236FCD97E10A2E18ED2539FB148AC5342A93321C6793D531BABE8865E8D3B7
640F59B5C07D2CCA6C0BE768A75C428AEE554903D3BCA3A994480430B3817F4C
87A87E6FFE1F384F90F1B47DB4276CE06532479E48E7E90E3EA515E869D196B6
D0B8B8AF6825E252BFAF0D5B67B12E4D4F92B73D7AE87B13F108F2C4611CD948
F30F526FBBB680BC0998937F297CB8632829AE73C4E152CF0EF6931EDC75BF3A
4B75C00EED07FDB1FBF66D0C4D01E813774CF132253C51B9E6E27E63511004A5
8EFD38E706CA2731126C9A2EA19A80074BCB3432256BFE41FBDA16AD324263C1
B0BABCD19ECC31616A409855639AB72C05B7609F4BE1514FFED49364D2E81715
E78DF8DFDCA5849CA879A60717C38B23D7CA54BD43619A46D5FEFDD4D7280A31
BCFEBE729C666E929DD2CC04C4F66493A56A48707200444BE945E826B26DE65E
3075FB61518F444640FEE9B703E33FFF9D78591EEBE7AE8E745F89865164950A
7E9DDE94B4E337598CC19893889594991EE6081B02B2FFA220503E9EDC623DD0
2C323D7064944D89EB2E6D51DC77164C5F6B43342A87FF745965DC919A12B63D
75413535B345805D1835F05F2AE1C20C0743864A50D37C2D0BAB4C9198C3A063
CB70AF955FFB9078E60049489C790DF684E0A506ABC5E8D8015D7B38C7F77D12
BC7D6AEA051081DE16433B664AD0FBCD335C4F7DAF9A7AC45E0AE633AA5E0E3E
8253C8C88B72E3AB7751D9D3F07E84C835989DC06DEC3B15060C553536AFA1AB
550740F7286EC572C2F70F13DDA614AC122D353AB33D8949B97B1D1A7E41961C
E1D956E1254970C7F5710CF410D84CCA5733A93E5053D888D6C101B6CA5D3BE3
8988F36222BBAE11B6FBA29AE0A974673C28642EA05AC66080F745228EAC9B0E
C2C3F6501F4BA0C82FF48068BBBE292FF30EBAF2055448995FEC91991A340F58
B66CD3A85C53DC3E9A25C9DAB9C9167F560F297B6AED02C0F5D8FD5B2308CE60
72760DC60A58B7C1575DFCB253A5A2A373A7E4D303AA48061C948BCE3C0DF788
D452C3A074E4B55A869C96FCA78117347B9CFA480FF4A6841766E398C58FF807
4C8E860FE132AC46A5AA4DD334B6ED1AD94FCD6D373246804BA5F2171C5C56B6
562A163A455D187AB30CE153914AF924F674813266AF9200CB3FD43A92F67E85
2DB3FA36EEA39B8FF07CEC6D1BB14C20EBF483E279574CA2D0D685C7D7F56248
A987EE709BEEE7269796032ABD4C90337D680985AB4C18FB39B1F6D7D7D46739
58D4D4F1CB3CD4D6AE55A5C48AF26AC8000ADB4FC6B5E80C2FBFC8F75ECB495B
1941E759A7CA7912DB965FD79D8348CE3C1F8B633847DE60058E645058E2B1D4
B38FBD79364F45DD9E54B2B1C3C2A1259752775D216C895B9329DF559EE4F734
96FDD2B58F8B140D40F0644C2E3A3743F168DFE505F1E8AA58ECF0D7A456C722
626CEFB649B15B905E4134FB8A0ECA85100824A14BACDD662C119B88B06E5886
517E80265F10B9458B6B7F003A6E70DC12DE90730DADE2A1F8A6FBAFE03DA190
179CA068E21535FA1B41FCC74614129FECD357C3BE8A068A36A48259DC08D6EC
E0EF01BCD9EEC871AFD57FD3D9602AF4F6BD72C6B3158EB82AE67338CCDFCC0B
6C5359DF8A60F2479000AD48A72EFA7FD1AC7044A40106216CAF5C99D6AC9ED6
9D15F816E3009C46AF7B6A2D09BBB70B1DAF0336E38390D473C371FB1F39FC9A
6EB3FCB5DCFFDDE41495425F0AA9E0F014464590D69B105AF0132B126FCFC90A
5084AFA8A975DBB3644ADB1037620E73AD0D8F3185DEC6C4F8EF454A0A41DEBA
E7BF7A16F17D7276C66C3233AC20FADB3505BE2B8C29DB3630B72D102CB8B0E0
A11D7422E36FAD0CE9BDB18838F2559DAF8AB9E26A5F9FED4865F3EE0054B00A
6D3A6FC0927C9CCB7399A3E0B46CE303564392765BEE1363867D0207BD48FE80
67168C4412FC80CDBA62F8B438256B67B0552D00C4D3114908981F51AC4E66A3
F827C4DAA9ECBAD801177B0EFA572ABF4EE6F29D00C325FBC586B93D76EDF6D0
CA24D36D578A8786980F7B2F5F3F14E3C9B15F23045E29F807987F3637173FA7
79ECF226127FED12C18200177C729F813D56D632F88A4EF310FED85A5D1AB1E9
F77B0F4A5ADA6AAC4AF5B21906B6E84D0E5B5BCC1229AF428F3F75B728D844E9
4E773764ACE9541CD39385A57F9383AA235717AF84AFBF5D808D32022A6D1A2C
A6C84ACED9E02D9E46CB2FE2A6C3F956DD9152D5695F0AD014E72156DDE45CAD
34F29913BBF4ECFD87FE68A2E7192DAA0D6F9E1EEA8D75D9A93A375C05DBDFC9
D9E23F72E3F5010A9141AAFCE6733B371BF3603301C09268485D399717A3AE14
F384B2D69C75A42B747A3A661BB7A2FFB0FFC63B7D9F12B2F4A61E66537C09C0
C6016E9D3068A6431ED97A4122FC32E50F7440F4CB97CA1A4B7A91345D491DF9
67641D4DF5FDC27E019A58B5657BAE15086037107F01113E6543EB9CF74C2730
62159DD2B0B3AE8CEBC1461957D7BAA20EB9168C6AA9E4222528B6EE5B2ADA98
9BD741693A0231D55B37A237066B015E3A485B0615F0D3D880CAE4ACC7B6E8B2
60A180B5801BBB8F138F1F254A77EA74602C6D2BD4D78057167E3A958FC5B746
B88D33935FBAE571329BCFD86482B5833698169803E81EF086D2EFEB87931CE3
03A1D2CE826F73FBDC1D14FF1A87A93DC2FEE4FD37B5B69C54F59172719A13E1
561929888E9903BB4172913F96E71105203754E6C8D2B41575E5AD399FF12CEA
867791F881887D5C4198A2108EA84AF182D04E6B43F08CF45CEF81A79A55ADB7
1780CEA8E36A9C0C3BA94A1FFD438E95445063CB58DF1D4C6DDBA397F3EE94C2
46F24177B438E6D03077645EED1BC992E79EB134B4179B369D50682A921BA059
70A9CEAF23100219B1CF3A1F09D967E429545A65BB9BC3D0539B635B544499D4
0AA6D343664B19774783F390DE2535D370FDAE1B24D89C50C3C5CB0FA99D9F23
826D9F7827299A23B98D7780DA881A10480DEFB27CB85506D8BA482BA75AC120
1DF31BC490A8ABE5C10D04D6A021A6BF3BFC988DC831D3DE78A95D87241870FF
0950AC41C30E3A631E571DB54F6CE62BC043EA86B834A99056E4B406749D704A
51DFFFF332BE0B7D61031E571F19799D52D5CE2E9F8E585F0B7A6930A1A3D0CE
DE4FDC46CCF763F6E3F966F380B3B4EF772E8A2BCE51E2861BAD03921A2184DA
276D170208455426500E410A707DCF7551AEC54024AB59C582B6B602E71C7C22
2FAF43E56AEB25EE00BE0671A89FB89F8233ADD09091BFFE9AD02EBF45E5011C
5FB4FFF68F87EDA89A62A003D6BCA3855D96D405A61DF4EA6C55F05C85C8C819
FE5C61DFC4A8A65949C42983F517FC8E0876B856ECE41C4E129CB4F5B9B7827E
BA405A2C94BBEC8EC80A74DE7F058BF1C199071D630518BC44406A09448296BA
9EDF04C052909CFE6341F75CB61353B374ED8103EAC9ED98763BCD074C50F5D1
9AC7EA5C65D588D56BF6184C7CF69C214A16BA054D7F1557E129B622E6A737FB
DE52454EF6BA7952E567CD439A494E6899895E3B48C80DB50295583C7725005D
32E05A06351984E7B9C8B440B6965E468D0A0F48F8534A1BBA99D55BED7DAE7B
BDEFBC6021709964AA6C49D9A562CC2711C135265B6BBFF1A308A54BE031F99F
589ECF5AD466CE16A61C6F2D2CF91280A079E5F812D255370703EA7AF315FCBE
33B2D0DC6143247BEADCD60A90EC47A0B3692590056ABFE50D3023C90EF91035
31F6C1C6DDD018A4E728EDBDC03727AC1B39BBCE3400254E0337A207F03CE616
7E8FA199CCADA83A63DFF001CBEFC2D6D89CC6538DAF00439007F62DCFD7F672
9C36A44A0775D832F9338F9912E7851D1B12C67B9522A015D41C58DC60B6D758
74BB2B7AD838B2C648E00DF7DC106ABFEB18D20C285C3FAE6352DCBE6449AB68
2D5F4BC501D30A4FDCF561D34B83F6B9B159781F9237D99078598060A2C78CD0
D692C8A12A591DD67FF06A1058DC74FCB66DA3C636A19E97BBDB4125896CB404
1D404A22DB3271B7DF688CDAA4A3A7D22A90764C444C172267C982481BC6C12C
D268D8CDCD350775E956EE24D04FD688E7FE8FA148FF6E225FFC95C76F928D97
9C15797E947E74046E313128E8C5B423F496A485E3AC73A6AACD4DAB7C0F96B8
440EC8F4E8D50381171A894EC6053AE9ADC39A0CAF0B2CEA8C36E95C12FCC452
47C82FE6FA083E028B02D813F8E2B18A9F8FD0BF7C8E0AE4A0ADD30B0A1592A4
54CEE5E5E523C5E164337BFA2EB8108055B047CA65C2E14A815EA0012F4B1D40
D739DC2DA24F5BDA9628F9A3F8BD51566FF1E91E886B34F8C223EF9953713F70
7D1036F81AC1C4B47DB84AE4CA66EAB78AFF79433F034963B6C222BC909A5C01
BA5C527C00D9113D82A7205CFFDFA91EA2CFB1C0CBB49487F790E4FA257C0379
382B196BBB04DD4886D1D11529208A8884AAF06600E383C5748BE965A2679DAE
92597A7B7B84A1AE47BF09D6A0E8DF68CFA865B49FAFAEE9506D2F10DEE673E1
77D6279DCE9D4A6E1D3A4BD9F0B7E0B28447E741364E315E7A194C41583BADDC
C28DD4FFA619E712EB4520889EFF3CA684835E8C7A3B47E41618F2E3A71D2BDC
33F489FE55D9507547ADF4747209ED81F2CA0B102BC2128850E6A46F5AF29698
1B4EC3B0DBED8A36CD841AE185EF2717FED5CABDB06E3907B690D9279944686D
8750CBA8A0B3154564C33483CEA9FBECB633C9D97AB66A9F99DEF53D2C4494BF
00B6A84CFADBEFA2D2D6A3974AD0780254799F536F131B71830D84172E7CD7C0
5B2585A53C7CB0DF57274F64AB620EE152ADFFF6FB35CB22667E746FCA5C8BB4
88D5C7FCD3D6459B5D9116FAE5239FFD15BB1C2E6C374095CD98715B496911D7
7B1D7F5563461A9CBACFE6EE0D5CCB2AE89F82F6F04DBC7826696EB13BFB8A6A
B21BBA85A84F3ABD692C38DB484CF2AF97F67CD741583A7BA75265CD0540B2B9
171D03CE1FD88C5CD6A085A0354EA6242B049351AFAAB36A620CE1A700E72243
21BA7601EF093BC89AF3E7A7E2BE729A0B1029167AE0FFF2E15B68ADEFAD9921
47409743BCC0B4D77B2F5B24D2791E23D8E7D1111257FDAA0ABC1D0E2C297ABF
CEC3B8CBFBB83ED78EDE1651F70F30E7F138E98EFC8FB6226EF1B9E6113A1C31
010A4BBD104C7E5AC051CBC772CB7C0D0097F2C755A7F475D384DCE13B9CC08F
1E472F41481E3CE7AF66CB6CC50F2F9C65107EA62A015938270CA97CB028D65B
1D94B7F4C5166E8E88026474C6336F8A5A35A4A85F9FE90A633A44513C34B7A9
01B1A4DE4940D9F018C9D9C7765910F2C639783FB1C6E86119558B7CE8D9BBC6
F40820932E296DB0A0BD2C83B2C6DB2FFD9E8C844F72AE1C9F11629C24A031E2
C21705455FC54C21C91014B4A359179E22CAB47C1DF8E26B1B78D3E6E21F03A9
A605E4F16FCD23BC980C535080D32E8AE7152841AB29E084F199E49C5CF2047D
7261B21ADA8532D856CC0C81C127E737891ED5869AC61253DEA99DC2EFB7C07F
DB9CA6F526203439089711B076AC19575B1175E5A354D892C4E0EB22B37F058D
49A153BE3CAE6C53629973BA3DE3FB8CE42E0655EE246E8E112A664D50E0D6D9
663C199416246FA3B5AF371897DE4B8650BD529514561CF14004D9389D396B33
9BD81267D36C0798F5C481E2DCE7E80091A2315EA8C071AB631CCD04C3EA7754
1646B1CDEEF48029DB6BACF364CFE0BA0B773753BB577FEC7ABC260C7172B9A1
126794B5EAEB7908678D533CD6300E7FA123D497760DC7D4D0D010A7BD005FFD
D0B36C12280C4307843F7991F383487C04BED83E55D8861F839F3A44034E9016
3715F3F08DDB0267D9C7688B04EFC7DA678F0B015AE555080C8CCA4A46628FE1
7B50F341448A66A19A479B460E9DE5576A010A3879EBBB86F86973CDAB319E0C
CE1202575DD85A5AC19A17F1E72180851FCB378A10FB3CFE695C7BE01C73E01E
EB7CF2B7AD52EE4031E6FAF7F0546588F42689B85EF16D1A4778B8FCA7A99565
B7AC2DE07ED000A12EC3BFB360B53B11B4FC254285A1496BAACCC2EF49758963
DA8F28209F3D8C7C8D188DB2C5C35439A57E55030B5D92E21F731066E537C516
A0E85E024657C2EA708F7976A79C5B968C4380B9B3924028E3FBF80147E952ED
DA2648732DDCDE33D26A3FE2BBFEDD892468F4DC6155B1AA49987A8410510909
0FCCF877D4A0D4C51A1185D758C54FD49B0E9858843B0885C659DC3B91506FC8
ECD3D87F6E4845C05B20DFC7A4C32E6CC538ECCE9A0BB79E2C15EEC533D598CB
9BE604894BA54E73342D4530BC5F8A214E4F979EBBFC02A5451B384172C3D315
E1D60CC45122CD0E6F30AB3CF803A1EF72A884CB6B6FD2ED6F28332A3194AE1C
B198202B7531E8D182CC54CE241F1F1DEF398EC5D356F19FC9A2805325F93321
7E753ACA0892E0BA3500AFE886AF76859D2D5137F65756C4EAAC49D2ED9C6538
77B5CECAF47C5C1935010857ED693EF315967B2ED0D075C77BD71FCE940661E6
CE2B028549E60E39901DE0521EE76443A00C0C3A0C401161444F95C0B0B5A61C
72DD497331952BF90D6D7452DDF2734ED759333EBC2B8D1AA760D30568AF2361
D0B4FA74778EC0805B15DFFCED98E6CE7DE3A2D2C3948C2CF0D2CF2E5D434640
25A3458F0E2D3B32E33A654E89ED5D7AF7A6C04A459BDE06CB14ADCAF61E43DA
392A7B18E95621D03FAEE685FD847458A56C0318B909C36E876EA4A51D0B7A3A
3F382CD845380C15D9CB1D677979EFEBDAB6B5540F161AA3C0F5620A0660AC24
F28350A5F514FAE3B9E3552D33FFD99771D42924B16E7C8986C86CC3050867CC
78CBEFAD96F06D33F2FF3D5F2517DA242B0C5349E91764CED8A9FFB37FB127EB
A1720A7D7DB49CAFE8271B318C856C4C8EF9B3CD6ABE4C1B995F7B0FA90C61ED
9BA4467F64A8D02361BE48AFB4638D0482BF77FE20AFDEED6613594454C0C981
94B899CFE617259AF5BD508A5B9B2D53219EA463C2FB76BC881382CF284B926B
2D9E20B4513650CD77F3061DBB2491902322A47405442B192637EF46E92AAAF4
3E217914054F0127D736E4FB57C86752C52A821C683A46882FF5CCEFFDE0A24B
34644D71A0C442795595D5E6558019A2EEE913F145411FF48D166B51CEBDF6EB
F5B30829BA4A688AA69A2AF1BDCDFE2F960F9C8C5BA3F7C79172A46DE196CDE1
258B37EA65EAD8F10A250BFD7BB61F941C1A68AC118438C42683C189A7366248
EB9E2203B897114C7252E8A0C3F774EE981B724BE0D0D1345D81797155AD5D88
8FF357235D020B5A83296488E958C1CBF73848892395F0BF59D284FF9BDC0ED3
50938F1D4B130CE4701F39E3AEB03F8F6D80D63AE3AA30215CDE0945E1094456
BD98269E9D37763E13D4611159DE0406A8736B4330AB144EE3AA0529177AFEB0
88A885D1626EB8D57549D1500C63D12824E4E78C200B9C730F0A278292554659
F32CC1ED296AFD247D3F274F6D64276968B9EC64AF62B40C1D5D0F124E85282F
6A7DB5212EFB72420CC219F22BDBB11788711E060F034DA4A3A49D63DC052628
A06DB14CA1F713A8EA6A54D4D4D8A18B49B7048163F4D3E2519E9D23ED670D2D
A2EEA548BC14ECCEF076F384941D7387A2F92A69CAD3FFA9AE559D3043D71280
4B1A8B8A82FE0584ABB18035737DBDA92F6F61640C76065D14047555BDBE5905
14A8AE02B0A9DB3AD7B7D53F306C47739DBFD8DB8B19E152524A12F8C4B27C5C
38BCBC0775809C0B9F4B1FE2A89AD72D9DE81EC9D9D91AE68D9FC2E03F6E2AA5
99E4702DA58A73A8EEF6385A131D608806BFC5E4B5BF7A229E410B1064BD8542
A61516222015DEE919C00AF21E14C47ECC4F2D053DF6C9A990B6866C9B2B6488
A300E3263B795DE72E7008557FD171FC5CAAC1EE8CC918F729B9063F93B33759
2624C325247C5C189C065B93484DD595696C7EAC386165819C194DFFCAFA04EB
DE32E66286082F152D4E643451AD498A5825FB84DD2BB22CF67F189E9024DE9F
E22AB968241F98451093A615CF4EF03061192D3635B2D6E6FE30A664DCF36D8A
7A9EDC969BE7EE43B4484D81B34C603092A690034E71BCEFC07B3755A5094A73
3AA38973CF4CD94EE894BD5B1E72EBBF2C540FAB2CC9AA6016B82BA890731869
3DA05032C1A05C4730BB8DDFDB32A0447D9AFB174785E3B5F4EC019D2A5FBA6C
DC3FC627367A60FA77EF6075439676E92AAF0B92E7AE6895836E4F6FE1274B79
71DF2876BA6105405BCF8BC11AA1888BFBE3E8D4E23C502C09ED450A27759738
395787EAF85C656453449382B5ABBB2698FBF9E5DA55F86D736CA669557388E9
9317E750F551AAC93464FB0A32C147716CA5CAC05D4506ABF94C6914A674BE9D
E9ABF70BE8CB78C5ECFD97E10345FBFBF18EBC627386DBBEE8D9D3E9FE5B727D
748837B27079024056EDD6981871FD032AC1A6E02C5D985DE594291784C588C7
32D308C94E7477EBCF1466A802273C7653AD9D58727B42027294C56D6632A3F5
83A91EAC67BCFB31D2189EB7CDCA03188769FCC18AA9391CAD3D4BAC77EBCAA8
2F2644B7F43E42198799B14CC12C505E91924D5B3F0A243C2497E77315FC7EF3
53DE5E5BD498255EC21A3A1ABD15102B248965E018899686EC9E6B2793BE9DBC
1B4DA610406C10C40704C150CC368ECB83241D0D5A71BCBB24B0714D43BE31E1
258E92C87FF22460896C3C6D5085D8843F74732B2B10DD809BBE0984741A1F00
1BFEC6663C275934BF33671BD55C838F4ABD354D8939D0768B0B5708503CD57B
C029512559EF827BBB0010437BBC939B8567B38E5D064F3BD3D903E7030E1181
111075B30A1C579F1B5E9A4E37A3D96CB5247E9F0A684EE3B6E201EE4E17D141
5EA5EF732E7E73B9B7325242F74FD85C9AAEC2499DA12ED28A30C8932DC4D6DF
513E098CBB4751D30E41266E6E39ED1B6FD5211A13D9E513C042477BDFDD0265
4D922684015F57C7E240459CA56BB6B8897A91F239E0CB0364A0B8596D50C67F
C63507718822EEBF142775E3443779103A98684E3BC53344786946B3798B8F0D
C7A5E53E2ACE535599D1C6530201544832F139B04229B1035580D7AB386E569A
88B18A0488879A1FD4F01B8FB3F8FA04D2A7DEBE298B7883E0DA25554FC82FE4
E94B900DFAB3953ECA6FC4604D4C1572EC48939DEFA7221CFBE92AAB6082DF9E
B234FC6DEE80DF365498618939C75C3BD593A8961A7BCC1441A5DF201415E3DB
6FD1832D31FCF47F22E149D45F5D63276526B0D01CE4EF1AB70BCE2D9AE0D893
E9DC481F7DC01F7F6B29776614B6C2A8F0D11E93C137B600239DEC9AF90A637B
25A3229645BB501EBB1CC3E7A6CE79340D22F3E16999B296D80C99CD21ED3DCC
C63187D58C57A3E8D5DF0C5BFF35F8A5CF186B9F691ED3689A3E5A0B81E55E5A
C772376227421D7A79FDC83F65B0E6BF7A62FB6C2F72A7EBB5E65B3AAFDBE7F4
9CA94439534EE75D8B82DBC7BE9BFE27105C5B6F51CB39FAF8CB61DD5E0BF5CF
045742A618188C47C834B63C29593FCB979725FF3A2A0D4B82286F630A20D1B6
0CD1FC6E7EFBFF1A2D192316227A44DFE6C7CB6AD00B88A5570E01422D9BA2B5
3E6EB59EACA663FCFD02014D16A8465099C3AC7431E4734B193648DF971C86BE
CDAEEEC705F7AB2CB1566B3BC263484034C1A9DF71C8538B03CF1884D0831B61
D9AF69A47DF33A789FF79255ECF2AF644EDD0432AC056B0B53358140F2099051
03D3B7C48B8EFBF2A7F161EF5D9E8FF436B01AB54EE144333ADF032843B8411D
EE96E7B207C8CBCBDDA86A9E22C43566BE29A32C9F010623CAE930563C9BEFD9
E6B41CFDD8044708FE2BDDA0010B10B4956166F33BD2F986383CFD72591591DE
9C75876D5CFEB9F259BA99FA7EA94F129F0A71FD64A3FF675A60BC7790BF7E80
665D20F923534F9D70BD71F2419DD223827EB960409E713EA4A0CB65812EB62C
DB73AB470AAAE2F70C7B16CACC052D3F2D84F6AD51112F90045E7F532030EDBD
F58981B15D0E8DB3B03BEC1F65894C20B9771DF0B3926AA3094C10308B39BEA5
D4BADDB98FC6D8535C00550FE0CF5B600B7E2D72C3661E522875AFBC0B3EA3CE
8A943EB45532A035205B1A5F0D2EA7AA73263753034A0D5C25E0D4FBD40D064F
88A8B4C6BE1AFB98AE10875C4F81D4AD188B4902A05E43B73DB8237E58D0988D
C7D0C6B247A629D07E40FB28826E54EA3753B9479A046286FB01F1C201FBC015
CE9189F7FB79AD55D8B1187B1120352D158ED668D41EF321F1FD669358772C6B
C2F91D9E724CBBD53982E2FE82CF72A27FA73ABE3A099161757536A48FC7AD65
A63280F7C3DB09D03428493F9443C31A139EA514143799A3ABC15C58E12247DE
0E70AC9E5ECE185E29FDBFCD9BF83F7628B263B02485F5CAF0C3687DB21AC8B5
1AEA22D08FD48247BE7739D7700BE0BF4C6437A849A665FBABC6E6EB913B048A
51E14C827B5CD6956F4B75F6AB70EAE9D984A5787BB6100F41C88F39280980EF
82F438E965558AF73D16FB82BCB6BF1AE6CE3F606F84EAD56F6D954740D00D87
33BC57C8AC9F077E4E7E12022A68666E0260637F11DDA2D460F9FBEE616B4932
E56410D42E99B332B2475F110CC543A311C149E260FF6E68B66FCC5575AA11BD
E290E25AA60E8F85B83E69FC6A1763D775A7AD326589828310346614F45671D8
C46DA8E3C7C446AD7AD4B729CC7A439D97DC960195C07310285BC2824BF4D453
3E09F305F29FCECE68A4EC3BDDB179A10AC9AE87C9BBCED02BC5720E413C4623
B2FE3668AB2180738843D6E37CCCA8A57EECCD2719D33D4CA7E7F9D115658A3F
65C0FB12D24CD28AF4641B74BF8864CC28D7AAD8EA3FBBBB407E0ACC553CF846
603B4A2CB9347E2251CA00D54447F73F5330D96AD32160621F7C09661E25DB42
E5A47EBBD6A98BB308AF00C30C9625168DAD406970B8DCB7AA947AA7692B98A2
620A87FFEE34004E928CA3337996B46C0952C34873863162F97E1EA2DDB3E440
B263D9A4068345010FCBF2F325EF7954A5E8E445FD98201ECD2B5B6D73D69A2B
62BF68EF83C6986E442D5150434EF294DAC249611036070981D64AC418459C6A
C476B245FE58E1529FB556B82C4A0933ACD0C5CE60EBD53B9FB4B6C13E8FAAC2
AD4D8267DB9225E5B562E836E9E670A871016917C6BDC5B34957A3649358D88F
5B5BC9892AFAF98FA34F65CD4F36ADA9CC9A2FD87287C8720E3C236C55C9A7A8
676A83FA6E292AC6E8C9323B8562D1EECA4564FF6AEB0BC99B9AD7F65F2CA872
575FBB35F048A77A00E15A8770BB632032D2EF1412D27BCCAFF3ECFDA6C4A1B0
61EC61177E68899A82BA290888C33202E135C28685C8167D5B037FFB99B7EA15
9E8A6327A186EAE15F637D7E107FAFB4619EF957D4A70F7E3D08EF1012183C46
DCD920BFDC0E43AEE3EE3CAE1542A58F73F774021371EDC57DCD18653DE577BF
1807054D35423D6ADE78AC5156763DCB4ED134DD502A5A78CC4B4EE0DD8F43CC
580213BEB59D15D30B7292FD83B6E3B51BAE5E32E4F150EBD1B0EF59DE775553
D9DD5A9F5E1645811E27815555A1051370EF31131C95F48908D67EED8A5908B8
4A394B0BCF29E5A1C036BAD3825DAE2B0CC8C096BA811167A30A3B8B426F528B
C9B7A4E461FE36F7DD3120479FE06D2AF5558ACF7F9F2307EB3C44EC877FCD9B
FF5E8A68FFA4998E879EAA28E8D3CBB1A4825FE374F253F5FDAD26E87F94099E
FB5F4378253C9D27F95FB03B50F87CF89676064CF24DB31445915B00E248DB93
FD2E76330EAABA54C8C9D36EC3F16F10634BF8015CEB70012A7FE5A3EBCB36C8
19ADC8129883E984EC2061DFB907671C9A896A60017B4E5A7B06FF4D1360CDDC
EDD19C2E157AAE9D8B7685871BCDD2BC634B940715AB2C2B4EB43F09275D178D
954A09534A85C99182B381DC86A0482C52ED3DB71BCE59F761FD0203C7687DC6
26FD252E3B42B11F74A4F6A61366C959E416C78F66FBB5CA34E5CCF040582A79
16D8C08F62BA1738359727D310D9E3553DE260FFD590BEDC71CA9AD4AC12B09A
4F25EFA0AAC996C889BB23ACC92D71D3E62E239C6EFA9125B9959B8E075C4DB3
761A8202F7B6892D4454599BAEB3B2F4FC9CEEC20B77A34CA3D834CA9A9ED6A5
FBC9D6EF834353F3E72A71EAB08D33D1C0E74AF77094870BD8EAF8140BC0BC3D
AC9A723F37BFF479F5C27BAC92012FB1A952F8979C7A5CA5D52FA1B48C90F140
B934EB585E3EF47D852E478AD56C865CF487B3EF0CA18B40DCF9218AF786E9EC
87A46DD4D44351465E4D435315A9D72FBA1E03E4BE6ABFA9C220E5D3BF5A5E87
A4B6900897F70605E6027C5BBA2D1762B34E609153EBA5E4A91EA73477B75333
510D419E477E7CB1E52E2062ED1D3675B796C5606483506C6E111EDC912D8EE0
976D5F3C82542C5E344F803547170067B51D02F957F5924CB1A96482C5BADB4B
2261F86791B443AD9AFC1FC1B5F69AABE2F964CBA4C0ED5416A20F102C82BEA0
71EC6E7EAF09FE209BA2AEEF48E8FB33DCF83C12C15AC06232477D1F39A73F7C
CD64404AC251E82C6F8DACE99E0B6F71FC815A42A6DF5A23909E98A97DD3D6B5
9681968591775A445645D175505AFB1AC5CE8B31013890979C1D4DDBEA7358DE
CFA6BE9B8666D12C74BC4CD5DEEA4F264AF65970794521C205CF9E966C185651
56CC0D1301499C38AB3FA11E958EBB9A7FAA8E084EF9BC86F81895F404E54D92
36C719FCADFA7C2338B1F0A8210420AAF3C337E63659A9245308B54061528202
EF8E35B5F85D01F666341ACF6D927C59A5807D274C11C36C103A20D82CADE304
C343CDA01E371C456FF13AFD1AA54C887BD6424A4B3C207F0ED2FD18B021DBB6
A32DB79411CF355A9EF3F028A0BAFF629CFE81D098BC5E4E134565813A441931
DA182401251F09576C023ED047FED58F87D5145728C12387213B2AA0570A583C
2F99A975114C1C0300300B9EF15A312AFFAE9B89C5965995998DCF58D8BBDA15
4BFC9348A604AD1CD1644512270A0FAEEC16C797B31B0006D964EE87B70841BB
B0011D8AE17F1636E3F137E476FE5A098E9C3487B6D7B5472220B358824D3C49
93DA26F8B2A10BD74FE42BAF5EDD41D4EE088920B155B894243E0E9C425FF8CE
C3CF85E159D3A61E9EB3B1D33DBFA7189317B82BE93D493D1E793BB49C1CC384
3969219FE55C19BE6E6BE90EB3E92152CC727535AFE72D7DAD09D7E11E1D61D7
971649DC9608442D234E87B1C39D7B72347BEE2398E0AB443A4F47906A09156C
93994992C526DCAE302D3B72E0F78E243EC49C2C475189A3DD01B7C3A34EF083
422F93DB1A210C6917BB6A04E89C45507BE1B226A00DB1C93E41DB7BFD00B4DC
5CE3355A50ADCBBD47A011728DFB270E096FDD8292CAB8281E7ED5D8F3774A07
38C35D304B5FD9620DB3F0CC2A23D976DEB88BBDB3CB1FC18BDA7D08EE0F99FB
8847C7EDD49BE0E44D07B5162D5B3D344E619A84577E90EA4659C40B88A2E913
4E43358A1B66E01F8D979E603B695E2846CB728642F28DBDC6FD6EEDA9747321
8175281130FB49E2122D45F1A7144F5DE25535CA67B571F6D0804964BC370797
B96D672132C9E7125042DFA3B1458EA90D68B2B13A5D4A79B827C93E191C3D50
C16C7ADA4B3A932692615492C046257CAC1AD43833CA7FC72BC399FAF5D8B64B
FACEE39AE3A7083CBF4ED2379EEB688319790B19FA013635AADBBEF1E4A24668
71548D78265F3F6447845FAA29867BCF8BD9D7BCEFE1130069A9ABB7228B1DB6
D19A747C657785851FC039422C6591D18187BBADEBA7FA71DC4D85A4857FAD36
04DF22C20A4055A193593F56AEF64CF4C248948E397F8B35F891A5B9076094B5
B7257141A512311094E29D5FBB92E017DB9B23BED8DCA6132D763520F3FF364A
A5E4DD3AE96081B38B68DCAEF1C5C62F02295BF05D480300F264E00DF7408D41
B7749923AB1C5186AB23DA6722C510D6E242E10C7653D636279C43814EDB2482
0781B0830A94E5D1938460468E4EBCB96CE67468ED160438641E71D673717BDD
E57B34B4CF48CF7562D5D69CBB1D4702BABEFA8AC58AE632AE5F6988FA2A0BC4
2EBA42F89ACCC67DC693B995C155CABC414CEDB0FD6488491205B7D431180570
2C6FD913BF31E791A5D5D0B0F7D8123EE310ED0B6E1698F96D11BB88E3A7B135
39E9012133D3CA034C9561291B073032B13D89860528B5728B7942163227EE71
5A2BE646433941BB92245AC31B810E4C9547E7DBA1A2C75F58A348D7331858C4
7145BE020C5E02C274293EAAAB3D026F22FA542B6DB36B9D454456AE4A268C5B
C3BBB9BC717A38CF9C88CB71E683ED2038CF6194AF036EB3090451311D2E0315
E7E13D926FDFDF66CCA91A1736D4595000870A8DCD900E51B26508998ED5ADD9
17C60D4240FCD92FE9151D5CAF4DE10B3B0BACA2BE1384DFF0872FFA56080B10
13CD18B81E3D4F90B9F45463361DCC203D15AE5D01B621395D3A6E168B7BC85A
1F6D3F7CDA424750AF8261D9351660D641DACEFB5C76812DDDFFA60953E618FF
5464B79C93556A1DF4CEB57A1882F307F0EE099AF080659A1D41FED753FDD26C
83FC50615B20D31CCA7EB216D27E8A8474F19CAB46BEE6168EAED2B0EC9606F6
300D6B15C3252F948B6886F383A7EA6968F4D04A2E3CEE4A15BEA4D11AADB6E2
C006DD6544A13A283363FABB71AEB4A29A626A67B0061808B1AA8A9F4E87C682
601AB378DCE4DAE2D47892830AC5E06EFC65D5751976B74A10D01643475B2479
E54D5F6B36133B9FFA5AD683897F551E80649471AE16DA0EA6C8B87C5E77FAEC
E27C991ABC21EA9D89CC8F615A3492231FE7C7AC7AED808CEFC1BA19BBF041E4
BD38527EC8D1D19EFFC0A59CAD9CCA95EAB9A501E4F61D1E3FD028AEB721286C
432B612FFE4D5CC6EE8458FE512A035D4BA0312D2827FBE5AE0710EA0FC214CC
B26D30783A2E3A7D56A9E6F96387948F9BB50B1CB5B6386FCC67C5EAF614DF16
D5CAEA6F6600FD1580D63C76BF1963968D19B6A1FA8E8D9DD4C8E0FE813D3689
61F1E0847C90663657173D586AF1689FE77C7C8B8BDD92868225D689C418A4AC
35418461CA89F89D103EF63B6A99D95B0FCFCAFA84E600DB7EFA8577998C7EB6
26359B28BFCB8B741D355DDE579272382A10C46227A84A8B2CE95D98CAB97B70
9C0C4FED927C9D39B41E36C19D3F9701A2D6EC68330660124E1C3258859317FB
58DA0521849686384AA65B3FD76716D40CEA739BE66218C08A1C197B47D5E5FE
19663D00A516B60C038B01CA14398D44753778348569CC991B0F937844FB80DB
8EA194DA5864148CC78911CC3AE2ED2176A6762E968A406843B9FA47CA8817C3
3065B121533F6A1938E8121004A92DF1C73EB5297A4067B2A9AF213914237113
A9C4B48A542BBF30E44D3CDE9C50FB391CBB2973C1A87885AA993AA4A81B50F7
3AC3EEA709FD7D5A3E8857CABBD8984E4E8256A48B228CF68EE003D9777CF6E2
A86DA32721E818D7D4FA5C43D967A5972DCCE9D75CD2654869CE153332AB4379
D1FBFAE0C3F923F69B753988A9D3696BCF5CED7AC15B9A3B0CAF781FADD1A864
984383F276D1DBD321C2DE4B757895A22A05B74C1A1746F411E9C397C2030C75
E1D7F4D8AEF123C0840C1688B81EE909C1C6481A803BACC2C879915B80A3BFBD
6741D1881F3BBE5450DF95807D71BBF74C3B67916CA9801A0E2C83383C089D0A
6037AACECB9831D118236E8C6BD6AADD455B57C27DD02CD173F40EF14E0A040B
B9FCC432724AACAF80643A38538871768A730528525D9A8C66706BD5F877CF7C
61667A5A39F284563D5203AE99CD02DFB0FC278B529C5B6D43B55A3F3ACADBA9
949949C67915C7EE363C4A2456BD406EB542A6CF127505F56003F0FC207984D5
1D30FEB558DE9ADDFBBB5600F04E0DF5C1ABED27FD09905931BBFB2A882A3963
74BEF7310F51AE03A0F69BA3A5A4B36E62F6AADF24AFD5768C20DC6056DFC1DC
2380793D7FF448B33B6C287981608EA9A52FDFCFF6F4D5F88064C4380E89A1F1
87117D9C16913477C0CD314126415262D0EE5C520C6D50720D67B89B377254B9
81CAE483B8C9A80BADAAEC8F1602CA4A5FE500979E292B3B57E1F7A9FBAE495A
2A25D5A813D4FE3E487D47C9849D74C89F5D38D639C22F88B276E5A5EA6F0407
DFD556E3AAE3C6CD20FC30E38AAE46D5DD491F576798FC4EF75EA4F294EA8496
D032ABCB2D7810974D930A0832C8793C7AE960AC01FFE361EF0BE4AAAE4FA621
D1B1571E1809915CA23E65294E71466D99D28CF9C62700EA057113066C058A39
E6C024ECF59CBD0E419297CA4AEA890E1DBD28018ABA76FDCB7F92CB2FB89330
5D4CB1D94B4F1A99C38B037369792583D66E0F3EF0B13EE446BFC13D684B1352
E9683D18BD0463254090387CD5EE7A58B68F6027B3259802AB7C96DA0AFAF633
DD7BC5B38B621CAB3534A86E51C473E3F9CE236C2399BAA8B34AC560AFD25211
6A288973A1161C9352D9E6D6F665336DCB583EBF71971985326ABB5BF7F46710
913376F68E0D5F6A9C3FB697E00D578D0A2BFCAE2C741C6AC336BDEAB72D059A
61837EB6AAAEBC76201B0B0C9EA14D8FA65D54D59603CD54A65347488BCB948F
7B43A5193CC00483AD7488822453B19A9664C864AE888FBD4734ADD05ED33883
EB7BB0910426917995D83A5F18C3095D575A976C65BF0C92CEEDCA1BDC577459
B9B367015A89837F84913F51B27DBCAE8C8C2F447CC54FBC780AA92D2657BE5C
666C5697A6A84CFBA77156ECFCF706F14D33C8204270CCE76467E3DFCBE56191
DB4BFC0BC69966A280D93CCA1F84E9FB51166407B5573EFE3E19801F9A621AF9
0FDBDAC96457713BD5109474609AC3F004DB440C37234AF6BADA16D96BEDA842
C9B8078D60E5FA106E3980191D2450A4188AD949521E774E0D150C6CEF0D7596
5DA9B680E14F357CE90573DFCFF03E0D4558C37367FB72990A9AD6CE1F403769
8C55D537D25FB7980A402526A4E19A8C02D1BD76F1DB27CEA5D181D7E6BD1A97
A01BE3922F1CB7DE5576AF240E5E90DE41FEBA477AFD284E7EE1686F079F72EE
EE0C0E225B9E736C6772AACDB9400B1B043A0929E777C5ED85D8B6502C2D4185
CE4650BB7006B4F65699D9E45E323C65C3D953D33B634CC124145DD8B5690C5B
CA6D174AD34B9A1C5FE9B5B2003BAAF9F9C35E2F27418E5F072272EE5B70CD1B
B13666B1F2F16D80D447D1F1CA7AD2FF9AD8A50D753396941A903A9EE56818A5
8C965E69C00687C7FB2F48884C841FB4268D122A4A8F672530D3A0848000755A
61F8C48DE332CCD99DE158F939B7D8A1BF90CEBBFD8AD2C7F470E48D2217B002
272B60FFDF4B8A791B5B54E5E9D98BD5B3A86C3F14F1B49CF4F66C7DC21C2259
2C4EB8F9D8A96A4E1F9CBCB381ED14DDBB548BDD46E4EFDE9993010105CCCDD5
172E5E809D978FF3C3ED33A6A8856AD9F46A74AC94A09D60E190C548172D2E1D
8F21295F17717161AF2A1D003242430EB60F4D084ED40E917A32BCC92BC19373
18D018499B658A34921134E9E678B2DC5866566353CCD828190C72924E411361
B5341DC7260579C7DDA09A0A30BEA55773FE4972A46E694DCB7D1E2AA63F6ED5
20966565A91A5E52796975C856219DEF4189B84A339700CD6E74F3BF89884DF1
DBD71DAA978BF83BE53962804802937A14729A92913C5C07C1CD5A0A9D5E9F56
B0408A0AF6DB8968511A6DDF2724FD3626CABD884E324F2CCED560B19D89D9F4
37A3DDB0E774FE80D5704208382313C7492FEB4701E7EC15FD2277E332801710
7CA00D0752C1E9A19C49904081F743C9465C0AD128085AE31D620480D82B5151
EABE7357271F6910F350B8EF85203E4DAB28B15D18FE1EA4974BF362A105CD31
AC2704D9CB29783F12C090F7E38CA5F3323F2F74668E0E69CCF8F29068354691
5E0678897FC0AECD74EBAC4EAF1F31FD2889F302A9C5496EDAFD87459E7DCC67
3FAFA4504EEC448C29A8F93B36FA63BA313D814685A7529ECEB3758E9DFD534C
AC1AAF06A06E4D4F5342A5C6BF3B08B16454651ACB0649BD132223FD13FF17B3
AFC92869148DBAC1EA48921CE9E2CD6ABA43C9939CDF3062BAE0898218920EA7
0F2A5FC08B1ABA8EE8B33710F2DD286236367D3FD6206DF1B2B7701C20E811C6
C565108EA4B47E119413DD95567BC756FE19AB0161FBCC99CD6636C8F3C74A3C
80AC6C62B8AAD9A9C7B671B2393F8004E5309C39C3E3D1B577CDA4D958D5506B
959EB1924BD4198FA0051E364D03B20E1E0EFFF9C3A407C19851D98823AC4376
B8270587E8F3721B54ECEFEAA24DE1BE94BB27F85B0C8BE3ED8F1783C422D5DC
4059D79CEF1D6C55B3F1ED51C694C79F3FF3AC9F5F8B131A59E8063C5F6AB613
1F4DF4C12C78DFA32813EB713F979E9B46603F14F884E46AADAEABB8EE6140B6
475762B358333483A2C30F1E6F2D0EEB83478AD15F404905DBFCD5E9907E38EB
02257D7F32DDC1190AF61B7337174E76CFA1DC429B4EC14006AF6BCD22354818
845BA01E229DD993D11E519F94F7427E6E8B27F236199CB00F5604D585E6AE25
9EA0C1E060B1C495ED215C9E3B589FFFC9BD8E80C4653E80F243C7469D455023
5FD56FB972E3EE2241CEB89735647EE1590A78E9D4C77193EB90A4A9C0202A95
992930D36DDBBB143A73748084414439883CD2EA2CA73185CDA6E6E5484BCA81
A54A6FA4E587C32FFDDC1A25905EFC237FADC20659B5FE1D4F35371F2AA523BA
4ADE325CE7E648920DF308FF98617467C2ED25B18BCBACFAF3132CD80478ED29
2AF4ABF7B0628D929596333A7C75A36A9B26A70214847B4F8E95511E34F30117
285EB7A440C673D6251280908C96F3CDC5C944756DF651729A53701116AFB27B
272A43E231D79C2121F8180322E3D6329AD408680CEBB5925AC08517F66C7A27
5D44D5C0C7C00F6808ACB06E6C5B432D1627A134ABCF0172E299B1F6353C5553
3915D6C22A82059F4338AC3C68D3FE75C8A7E565009912B4639B564130549F38
C40DBFF623639FD3511FD8D1F91E6DD59BC538502D18ECA4CAE179C9CD6222EF
AB7081BE73710D3D92EB644A1E863BCEB155914D39D71C52DE3F83D55FB60A1F
5284E22685EDCB5AF06EE0CD9710D722AE5443B5B8E77B8D164B2F15290E5272
B2C64B15CFC4ECA046C4AD12C31467450F0F9096C246252A33F30360DA21808B
16068294BEABA5B351258A4BC031FCB4361262619C7F204CA0EDF46561161C16
8689DB1EF7077FA1F644043F7B12E91951A0BFC935609523329A45C4C74A5303
CA41B105445D0714A9AB6CDD190B712BA7954206BF96FFA0C768AEB3900B682D
A4DAAC5EEAE82F638E4C9D3D2BC35986BEB89C511365F32B291DA84FC40DFB85
321175A3684F32D311455BA0451980EDDF91058E7AB0598B7146011C9D9B43F2
DFBC5EFC1338C158BD9C842E95DBA52E807C65CE2A538990C083D08EA2EFD737
A46FDF835B7BCE8588B24F9FB191508C75C0EA1BF42F6312297E0D7AA5501FC1
1C2DDEB008D51CFD40D0794F6E5B60EF13AD0913637E245B3759F579A7F59308
5911926F07D9653AFF35801C8442B0CCA2C63DDFB2CAFE9C81C8696EC29CE771
DDD44A34C1384F92AEFFB9514760824A3AB3F7DD9C5953ABFA389DFE4FA6CA3E
EEAB452D057A0BBC563E428877BA20DE76F34E2C3C9E69D1B3A6E239133FDCBE
BC833F6895C5DA9EC4C1BF2989452681439A931EDC838F9D7E350B1DA59C2F29
FC3F86936EE717E1AD415ADA4D95BF116C42EED0BE15D728D7D835AD3D768E4B
16E5192FE1E7C6EF0989162AA88D31807317C8C8BB70C2F9C77266204AF42102
A97BC03FB86E4321DB7FC6348A527EE4B7681DE25865DD5159CACB293FE23BAE
8D0E317930DFA18ADFB81C8EB75B0BFB3A2D301EFD4D13EDF114A340951A0130
FA36CB472AB1E6FB872107520EDD9A6796BAB8A960D5CE6208150B07848BC890
2CAB1FEFC0E88AF09C8E66A6F27EE257E88F34E6654EDFB4B00ABD470750E5FF
72B40F17243EDE31995D772338E41A3FADB03DB2896A8BB113136337F88C41B0
FEEE9A7FBE17B2B9FA9DBD3AF93F3941CC55363250F71F3C553324A8FD5C0A81
81C17181654066903EFEFF8595B628FAF5686F5BC0FB5DC9FD583B7723750AE3
CE120540E9B6569C53BCA560E04852E7DBC79C2DC8561F805C0DA1E12174F4EB
2F9F428C431683A41C2C61A429E3DC0D87D7649E2071A01D77C07385C9C27980
E709E4D642D169A455E0E34D522452A1F976B7A48101EF08E8795F3961B94A1C
C5869BD86D927D6189327E1BCB7B61040AE0A6B5919FCE196D5BD93BED4338B0
392E27761E72DA24E4C108C309E90A8C6DAB6DFC96F02391E97F76C003271453
75FF48E6AC3B2E33AFB8DAB517EE2B77300EFA79F5038C2F8C18609D8770C726
D78EC30F3B10003F7FDF6FA87CAF89AEE07CE6A2AA498AB1032F453A52EF82CC
5EA104EE5AA2F0807CDCEA1F05A7AFC309366CEF2AE08263950FE7FE5317162B
B6D5B16907CE63CB57731516CDDCB42C87B20843C42782D915857259D8C2239A
41D73162D529346DEB3AD2191E1FDAC3E5BADFAB96429E8C6611D567EECE1E42
FEFEDDA0078E7789333EB11ABECAB7D94ED0FE8C4EB03A3C5FE90A78C4E03617
CD111215AABE517E07CF7CC03A49F1F7D265EA9CBFF542041B557BB1203F35A1
6209EDB6024DA5CF1F78C47030140D53165349CA83A68837067805FAB4B56970
CD156814CD78A48D95BC9453450128536D018B87C8FE043AFAD767DDA59ED5EB
428950EC715766B157351ED00EE958725486FC899CAECC244852267155E95953
27E348EA30C10EC4FE555905C9C03162375AEF5BBD6BC3B250625E4B5C2B2BF9
8290A21AE479CD96B4F9C3CF1D39123EF1C1ECA9B83CE00B087F55A5CB694336
732534694A184539909D5294C452AFC53CBF939792B6CD340BA06E12F284DD1B
240597E0B4C471F672CA460F99E254F7516DD13A7E83940A729C1054D73E4DB8
81021392F5BC8EC4CF3EB5BECE89BCE928D3308748031406FE22B8C7870AB7DD
DB21B45C06CAA73CB7D7ACF47C207A5E37031A4C4A86EAAD87BFB1ED2F719C13
79E17647BEF988B06C32690F55C38850EF8A01DBB1F487832EFA3675F1386F3F
A0700A77387EA8EC418457BFCAD0765940EE1FA51159FBF06FFEAE98AB8495E9
AE005B95EC8ECB99A96D6FE3793AE72EB3D5FAD68FA21405FDA4AF1410136471
12E761E4235722E6CD85C35C07B99AB4B6E2491256DBD49728AB2F1555042E52
D5BFA851B02F29CD0570748C3BBE64AC88813A2339892CF291660DF088F10DE2
078E17FA0A86A5017656773E7A78C2D80E47749C70C7DB82DFEA436DEB4794AC
D823CA8A116A2B25AA01AE8644621FE81A4307B9643CFDC0453801CAA748F82B
9B5DAB6124517827491FBBF0363061CA3CB106CE49BBD3AF7E6E68A775B21757
D17CB5968A384EE4F4A4AE92B580F02FF2494CFF98E6ED9A01DC44BF155FF140
80AEA21902BED714B48343A18FDD3940EB3ABB917A4FF4DAB7A5A32ADF28C1A2
B31DC98AA67CA359A47567B75044F50361F289B380E46FA49B248CE453C1E34F
C3750E6AFB93D728874EF69E166924DA927CF99BDF59C877321D70FBC7D43718
EBDC06BF2865C58437568CD734EFBFA8702148532205D14E7456D7C51CB85638
3D1AABF0209B70104DD391FD5E3A6EA4ED4A4D375B2D42DBD1B70D7A5E03B4F2
A7EB33AC05FAE8F5F752A36C016257EA562DDF155C3D812E05F45E36D0FBB705
DB004EB8558C019BF9B0C16328F899D8DF1A0FA0366B052BC065FFFF324BDDF6
90ED30A63052A05665DC63FD99472B21FDF29D434E682087ABBCF9845D792747
C98FA51E0AB2387570481B75B99248D347E99E398C504260D90D36273650FB44
2E97A017B19BFAB8B2E847C744CEF9E8305D78CE8BB6F1B59EAA5FBA779FAB38
9C3C6F89EFECD0EA62D9FCAEBAA88A8A1649B1D1CE0BB1799BF7E3774D9D2C4D
8530F9E1F35E65A12CF6282D1B8CA8328B01DB390A6D1415DCA610CE15B8E925
B0A0217B02C96F5BA40968213B2BC6EC814EF65E5D900353EFC3A7D5BA1EB1F5
1ADF85A2408A688FBED344CB30F555634425B334011FBBC2A5CA78D87D7527ED
E40F92C33B7ED5FA6BB6997A5608992A51C7F77D6883F450ABD1799F8579A036
AA6F4FB6094906376E836D6598FD8B539BDCA02A0A1C3058ABF1106798F3FD18
6E0CF93660BDBB489FB5C5BFD22467E3B7B7EAECCBA7CBFE350C693B23476C3C
77F0D21406751D2DEA615D4C10A82EF3CA876200D507AB2452C39E0B928D1C8A
D6CFE4D41F7F57F05CEF38C4251AA826E4A1D3745FD929173DC75E79EF118D69
30C73050AAA94D8CA1BAEABB03EAFFBCE1DE0C0838B32FB1886BF564BDD888F3
96BD4CB81B39046A34DCDBD02621AC20ACFAB65C5485280015A6C73F8BD7A245
A6DD826398954FBD5E7ABCC778D8D9F0CAF2B69456110B9A8BBC317B921DB55A
9BF25074380AD1D7E218D694061D9C3DF3C8DE35F61A18EA15C5C24ED9F31705
A32503BE7225981770457D68F56655ACE4FBE09BCA323D5EC9BB91D51D847BEA
72F2CA2557B66D01B64EF5263073A89FD46EC8F42B29919DE0225EA42BC832AA
5A9B9794F1A9E719B4BDD07BF89B5188B218805E160369B5EBC2857455DC55BA
C0925FD971B5E56974E39114C9131B016EF52F14202317FCC0CB7A82ACD9BF9F
E7CD4DAB25EA154AFEFCD6DA55C61386A22BDCE4DEA31050F4D7BE115B99EBEA
09785BF8E7F0C6E31B0A607C33B71FE753B8A17CDD017F3AAD7CC630BF68DD92
16EE8757A8F6F413CE86E92197E6E465F027A5757B0CFBF1A08711848C24350C
83181FC8631C5A7A55832DD3119B93F6FF3F4095BB5C84E9D24E65A25D9D92AC
B9F459CDE0550684064B65D40F801D02ED63B52C0C90201B06940B79F3D0B45D
A959E9ED8CC5F71EB74AAD43DD609B026BFD130B3838ADA2EB24FE0F2597F1AB
BA4CEBE6E60B87B7E6D730CAFBA8613050BE79E0FE1F4F25AEE96656D9C2D197
31A5009DE2434A7008246BC1EEFEDC7D12A31796ED37FAFB12DDF5E0293E70BA
00121A451C024384D4AB54FE532BBD0271B9EFFFE62A4BF3A0D02FE74478AD60
9E00675EC32CA03A97A954560E8DEC474EF5E1462F2743F759CD4161EF15998C
58E52DA785170923B825EDAFECF8A055EA4D71279999B86D9C5813D43E7633AA
C7AC6668B8B4BFC2E26975D744D48E34BC385780517B70D65AE07AB16CA8D9A2
8DA7A4A65644A88736E6383FEDD57B82F093641ECE4B8A9D7C9EE4B4D7B5CD62
F6C910AE8DDDDC503A2225DE8F8A4FD8B951720FBB21E794855BC299EF4B7CB4
D52FCBD1AE386F6B671661787A62B6A79D0655AA285A21410FF3302DE17717D2
A08F27F0DFCE3A3469E480A944C15D3757AA051C36A6DB32F2C0A69B14BBD009
A07EB8716638FE1081EFB0257CBE3061F03C8676AFCAC4D976EBE8AE53D3AFDD
1E2F45AF61383A8FF52460B64BB11C442C367FEB905169AD17DC13B5BE31FA46
8D48CC5DCF6B76D9260B12AAD36CE88E0906E2ADF32E017E9EB55D9AC2E19652
E3D0B293784364B94503612B9F35E347D1226D540527F17881FF22DFEAF19688
2AD9EC9A9422B2A27B4583F2960F26D69660AF986EF43C2C3C5869DDE72B7679
DCDCA98300BD6103527084638C2458F7781C01F60126E9A0FF47B6BB966A01C9
DD6708CB3A472D5EBAA34D9A6A5446932E5A701E0F825B35318DFA6FB9097C09
550525DB0DD14E6E8BE310C7015336A8B9E6AA882552BD15E1B7519E0109A3FE
B9CD3AFF154C02E0FF2577ADFAD390E62D9ED43B90BC23A1CF1FC501E4125410
A69B6C9DF187476751669F20E8CC5674BE3366206684D3DC02C911D0CC793A31
87D7D24F447C36A994FE3FC0A4DC862C70C10A34BA9EC55C695405AADCC7F745
654C338343C2AEDA4459025F46AA84830143BAC919CE74611DFA8323AC56A89E
CB425C20E27F778B06C01628017A941C77A5C87EB180525EC98D713D700F4489
96621AAA8BD0A94C3132922B8E28CAE8C6F92DFF7E5A4D272339F3FCD7719149
9D5A46511840784351AF1B6C8E61C3FDE20F8F98FE27D3272A18082A6418CFE3
97F967DB3536375D9D75F31A694CFB7681182F1FE184D32E079026E2FD9BF803
89F3086E1079668EB7AB147A9301E2FA6AF49167D914DE46ABC6339EC4987599
7ECFADB5BF7353AA3798F373ABC34E430142E17FCFB10929182ABD330F6F165E
824D0080E954C53C1E9718E63618D111F113F870AC75CA61A8BC0EEAF879157B
AA140B65E32EF12306E45B229F748A7064D6091443CAA846B4162B8E619A2471
3699D615018D07A3819C1FC3FF68D2AAC44AA5E55BA7EB7229F940D6C5929238
230DC4C166E5084E07F438EFC074B03368E054B1369D19A27BB4B3CC6913C20E
791623B634703EBB17C8D07E65083F6DD6A5A4B9AD1018F245F33AF53ED9F8EE
A652A4678D2560D340BE0329F182CB1325FE9CEB4B2DE9009FB088DCBA4357EB
EF4D2EAD87DB41DFF2F3816F0DC9DBCF143D067C757DA917C3BB0D4365E43F0C
FCBDAE3F1AA1FA1379E091124939455346B35AF8B365EDCEF8CC091A78770DB2
753DB8905E6B7AC8ECCCA1C0BFC51A15FB884F0DEFCE78281DBDAB5223C04725
CD41695EB03BB40CC9E69F254F57C64FABA813FDA935FA2BDAED883C7345B314
D6462B6764EF2190439DAFDBC1AAE8FD500FB7E07C84E655D188067E4FFBB9E8
2E3E09046F86B5770B5C42199FEAA4C17D53E4CFC62D10A7C60293FAD0B6D646
D4308457C5749921B5DCA336CC99011AC8EBF80F9B1A7D27D0A5C3AEBAC34779
FEA75DB58B13C751123DBD945718D3199C3B7E7D088EDFC6FB6CA650204EA94C
8135E0B3BB3801D25D1220FA1591C0D39732ADBC83F887EF2E2CBAA413B7D5BC
FEDE1D5E272BCB104CF24CB920EE884D28418DF5F00F81361A40ABF60FBA561C
F3FAB7A9E6A7D63C4EFCBB4A54A0C043C34C57B662647192A8C63D4FBE016317
887AFE5E9A78DA9006D3FAD451B9C70A858A3CF68F656289DB4BABE9205C94C1
99D78AF69C7B110355AD8F4D4EEC9C91E5CF1962FCE69E950F86F07E04C97AD3
35360D47DBBD583016699A3FDC33840C003B29B5C0B79E6E90E1E5AFC851F5F2
654307F16EDE9D31F3DACB8628F83BEA1EF49ED07C902924F608E74E2CEB62B7
DA5598A31D232C4BF5B310E72D93AFD1C8E263E57C430D6AFE44D062A0B109D8
19949328E013E16B4F46BA445FF958E4CA092B1BE167589E68731A965CF6763E
27C99EC21901010EB79FF22341D7ED9325C55FA13711FB89E83F6ED9DCFCE8F8
01D075857813E86BF5CF991AF88820F123DA8AB20577B33B4287A6A4CFABA271
706BE17D4368D40A2C08D761817462BFF3EDADBCCFDCE460200B34F348EC2E24
242C086E4EA3E1C8D33F1494E051868A31228F3013899CB09FEF1E8801B29B65
317E546D68F25661D4C8BD9AD6D32496D96AC0D0C68BD0A6B32C2B7FAB368FF1
A319BE954E03F41DA99C434A7AAF02689879CBF5A70BF467AD43975ABFF9D5FE
E1F2CE00DD4C4C87CA317DBC90DC8D215F44ECD72B401E3C1A8C4F2954D56B2D
FEEEDBF49475D7F4B39371775CC1117F8E2267DE70729F4282117B33ADAD9AA0
A1B5F05C48B7C9AFDD03D28FD2403390FBDAABBD61C344B0E4980653F0170446
0E692FF76F2AE29BADA1B2FE00EBD9019E871FA1B1A573F0D51E81DC69EF689D
D2A41C4F7F5ECC56A0FC36111C340DE7DC06595276CCE14D6BF5B6E7982345C5
0AF640754116C0B1A757334548AFCAEE51FA4B5D700D2963EA89B30A403D36F4
4D1E9A5374F4E91EF48CCCCE28C07BE35828ABE126FA57C0BDA3244FE4C7B4E8
35725BAB2C884AB9683B943EF6239B12E51EE81638D30ACC3000919C2CE690D9
2D2E338C2C84834B96BA162686198291505AF384F4DC4FF29970A1BEDE6AA021
1CCB108B83658F026C999396458077D3A44AB288B5E03055011BCC7525586247
F28A28B67E0130D42B1CC371B08F18700B9FD24FB5BFA59306545DAE42BAA1FD
4F02F8765A1B044EF540FA609B94F68D21540B79D0BC6F03F8B25FBECB9CDE52
EF91719E9D8C907685AA5792E156551A1154468212F7496CCEAD1D770E970B09
8295961DAEEAF6FA0D24CE9DFC18E4087F1DFBA0ACCD0F1658F545942FB191EC
C0C96E036847DA0326863A217B01009713A54C40F6677880FFE810F076D007F9
B60706CB5316B156D86345E5C1E64BCEBCDA3B183844006AC2F86BB6BD37D5F0
3F931477608C78684960016CB1C9E9263EE4EA0AC762BDFD135392BC1837AB93
C52C0014D8C9CC2436D6930B7E5903B101B8498C96D3644C92CEF5259A86A177
2D8FC3C2C345FDCAB37B697B88525E488AE8162B8FB4D092FDCAC4B15053C846
1823F641FC4AD5DE9B1B7A015974DE75365906B45C16442A6896E6871B9C54AE
C9AF67632C893F3A69286BAFA40EEEFF2FB4E8180931296C34B6258F042EAD69
BAECBC864DF16C44E6072E689A989ADABDDFDA69612B940CF0B3C34A0A6E6B32
174E002FE7886DA7CC94075A2A9AE14B93B0EA661A59DFB1908D1FBDFF6DF0BB
F2B366117F448366A4B581ADA0CC5DD9B0221F23DD02A42F7AB9F154D8AF9ED1
30FB2B0EFDD9A572BE9D24129AFFAC18092B246D25F37434CDEFA76791C46865
2BDB5EF545621274CAAD45245B29694C5BA03B8CEE0B7435A5D8CE0D53DEB20F
D25D07F2E4F419DE140D3F79448AF5226040774D14E12D2DE1239623A6A33752
E8C073D8F45F5F82F79EF60433BCD7424BCAD883B2B0F04D8496EE08E7B4BB38
BDB1517F1DAAFBE9E5A3616A57A1707BD987743C5A5BF33ED1E14A3F86D61F83
5967AAFEFC30EC55707F7F4EC14779AF32B6E4333863AB064D48F00711552E05
87AC0275310267D4BE50A1A77011F94EEE179A47B07B804CF5ED523715E36670
037200145953AC943E56E302E3537554E203A3EEA97D43741F9E25885876535F
BE57C51B48ABCF5B2781181C91AF97828B1B8F989103E4F6F8A2E5C8170DE380
F79E5D736157B417A3DC09EE11BB3CCC34789CADAD425A64974A9296032C7B13
3C8DC255816C6B1C82FF9430D825099641E284DB039C9E9960E3156968D9CA76
082EA9D139746EEC4FB8CBB8AC54B10072E3F0C83089B39ABF015FFBD7D0F4EA
7E6CB34F5FF3FA258A1E57E79D2AE787D1D1914B3AFBC26A8AFCE2832F7690A6
BE0994D2DB027D2F74C3449C662760414C0140FF88D5AE45BA79DADAC2EDB571
101DF240F3795C28C30B7F348A59C08E7268292C639B1EB5FF03537296735B84
490324AC5754AD226D6511429DE65A20BF2F347788E05C85AF4AE98175C7F1C2
16A87396D2E4BA1BAE2EAA5348A825C51891D9464712E1993C40603576F54909
CB68FF2FEA801E3CCDF74A36225FA99B2832FD576229E61C24A4489AED623105
721385E314D1348D8C871DFFA9333E9185DC7291D22CE26D6B65F2D25362D539
10DE1DA605F6122DC1421929C937687207CC3A6A3CC8A2AB7C8AD4FB183E5B99
AB4D208E12C876AA1CF10F942D0FF2A8D4A0377D213E62FB696D1EAFF3164863
F95E792251EDBDB83DA1BACBDDC30ECCA579E09A168EA7083A2F1427400260EA
C4FFB0AF9B44B783503671E0DF150E8613035C58004CD33CC4602BAF3C5A8F93
BD8E5C88EC98CF2B4F9DD8DB4AFB68883E2DB04019505809407145D782BD55F9
7FD9116484AD4B0DD32F12B401E4A587F35B69F073E46365AE4285A7D1203BBF
760F85D607CF2F050B05CEF91EC74475ED0DC09C2B3ABE6075D2D64F1B886979
629855604B14F680E294168517FB94CF37E3BD8AB971AC47BF09FD1B93BC87E1
8AF08F3FB1E05623E564EE099ABE3AD68A4F5551A1F4811FA29C895295E5A843
A336369730E96253DD07517660B599EF742311C63082D10952AA53E2F70A9C47
5C2652AB0EA2132C472FD985ADCD4ACCE5305C65E3924D32F46984A7779E930F
E769403B46E2F67F3A8FC6B07C861DCE36D70C49BDDF822014E8629D27C2D02E
371EE73EB8CF26E271D9432A994465E36F9DB692113CEC2525A4EECB843A120A
E5CC411D8D8C20F383099D92DEE7A44D9ED086081A1A931276D9E5FF4AA2DCD6
91B021C2CFB43C7AF3BA24EFD2FE86D52FC598CD253099B72FCAE55DD40B55B2
80A4114E002EBC5E059F4530B69A38B05096B9F2BE6C2481F9843CC23B5DCECD
2C2FB060FBBB8934B41AB05654BCB553F6929B94D9CE8FB3BB86D3C1FAAFEC29
CEDF6F5CACEA067C318C5769B13DFDF8262B28D805D59126E1B5B52345BDAE42
091B71FBA5740FD4B1BB6A1B0154DB84DFFFC0DB165D65E08C9C5E6AAF054BB9
1545317DC46733A24BA7CD3214163508E24BCD00B29B0D49594EE60C44B3FF6B
D64AE0B56BE81A2EFB4EBB3135FCF06D3B4F5198899C64EF2E47F1B4F33641BF
990886558A7924EE6CC97BB4C1DAEA953C98D636099F5C54A211D8F0B67EB8CC
BD888143326E7F76D20C459514A4931F0FB354DA8EEA49BFB6DFA80B44E7B86A
5F39BA969F7D38BB96D4E1BBBC295FAE63A5E1FC5120B21BAA50A7E01776A21B
E55A5BBD34760EAB9293E00FBCBBFD0FA2AE7C199A1E0E2373544DFFE4EFA19E
1AFE7600696818D3D3CD1A11F7E5B593B1B11ED09939EADD06AF68C6B52FE984
97ECF086B43C52155CC066A292988FF74271F8E5A781BBAC4F22F9FC9864975D
4C0077E789EF0644575BE1F876FDFB3D74EA06B7C8403E1EE88235C81796D53D
08EAD62E1971624EF5438BCFCCA3A4988C6BD0CD3E09BD6DFE021E90BF0FF7F0
9722224D39162A6BFC8E56F63E6C58DA9B010897454F6F9662C1A98EC6F55E24
72FC810D86604C8899B93F013A24EE993BABE3A7ECAA396AF056306BAB611630
702B4EFCBBAC573CC15DAF453DB0DC5F9E7E5A3AD2B33F99BDF99B0052F0F783
4976671B012F92BA896900675EC366C941E7ABDC312B2283D7414C89ABCBD262
4A0BB98B6E9F53D2395A63C23A54AA556B8DEA2138013FCD0C044159F220D376
606765744FAACF5E1272AD8B2518D769328593BC6D58E2BF87220A79139D6EE0
D5D91727BBA5C3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AE6FC52EE0805D9F354B2CDD077C8F00A7D7613AA7C519
BCE19D5A55A70F7A65CDD0BD751604FD41C754EA8685929B0B0E4652883F7872
98B13FBDA10A021CF322EA5989B8019C8D3DEB35D08E2EAFCE88DA6D60708211
0264E4B82391C1CF9D87F2628BB1CA12BF28EF0DA654779148D18551C9E415D2
E09184C78217653E011F5CDE11CFF2B15590E4E80363ED652CEA14D0CD2FAF8C
D0C2A13A6CED42FC81FFD714DDFB628CF9E54476B4CF2B1EEC07707515C98EBD
C2768107C74AB503E5582F826B7F13CB803E2B1D3E833B9F86AB3787C9D19284
2C7EC50271156B4E7C01BBD70995DF003B77EF97EE11094A13E0258AB61BF232
59381FAF2AC65827882003FDC5DA687CFA43C0D1856C461F97C7AEDE11B3A109
9A46ADFC9FD09C33F30F499CF5DBE572B6BF8B1AD14D60862AAB2F2AA9A9B7F0
3F530456D6A60EF7FC61D97D8DB121DF70CF32BB8E6121744435A6C4E1F935CE
3F946D7D804C186231A54874A34F37BE5638BD5C8E5BE4D2362357981DEFC22F
2A4C38E9C10353639C6EEBF742E74944023F7B9310F9F55ADED24DC20C8C6932
5CF4FD7051AD918D22738F37BF6D9C80CA2B78F654EB01D24474BA592350D925
4F77AE5663E2D5F1C570E5ADCDEFC06E0F9B0C2E3D9AC0E89EEAA233EC00B6C4
D950AC65A89A450125B745F5E19C45091E27A261B867A3E86EBEF5FC539C5F76
8BE66581024CB45D39CC731C9E5FDF6E5FED0DBAE78DFAC0EDDC71FA7E47B229
276CCCB31F0AB5F2D170821B78AB497882D67DDF250E3AABE05E9B12CE1C5BA5
96778C9A27A594129C9F7E85DF9F151EA9DBBDF198365741C3E995489BE9C7AA
5744F31B1C72C351874FCAE37059AF863C61E1BC998FB3B87DAEE49A0F322701
98476E1D7354DFFDA997E9B2C1A4252BCAE1E3676D8CAF1419D7549B730374F5
251CD29997FFFA91CEC040D249BD707DDBA5BF70D7E4B85F5D7CAD0CF0CBA751
F7938D8DF94BA21D806C793FACA716599D010049E0B38C4403C9E2A501712BB3
230CF9258E488BE51E189E84316A15037990E9C7B356934A17895C5B0441510B
E3F6FB6BDDA11A64662ADB40B216D779D3F477F39B78D38A8DC2061C736BF55D
DC7020914EFC1672E4D25099474977EB8FB9C8F46A7B5D22FD636948CCA39C1D
71B31DF5C228BD2AC8041816BE3F523CD2A2537801849D4E50DB6202C9DC3846
460AD78848D0CB09916F11543A699189B8134B93B1EA7AB36B1FF285ACEE599C
212B4C8BE51A4B0B08D3205BB77DD35458B65AF9A49855F9F62340492FF1FA8C
A0C9597C85715FBE82B54A57F33216FC4F63D1E55D7DA3A61D25E9AFCE050B4A
5AE0E0E9629CAA916B70FC95BD76654620EAD0A0DC2BDF7C4BD0FC493F80E4C1
E11ABBDBA4E740F2890FC412481B063283CE4372828623E396AF33FF9E941720
243FB142AA528320E34DB2D010B0B3090C7FAA0B23730EFE3AC6CBD5D553CBDA
A75033BC62277DDFE8FC78EC2FBB8EBA0DCF9DEB9A033AAA9E925ED4709236E0
3773AB43CC45B0DEC82FF65A848B6A2DB6DFDC9CF8E42FD9ECFCDD89004768C5
1AB00C73BC388116268565AADA137941A9768572040A101F83B44C5C022B3491
65039EC8442236151EC87507D6A116DAE116711CDE5FB30E523B7D63B8DC952C
181A027E8203933B27AC826814F76C0B2DBB2E46B7008C5938CE5754B6254F5D
04430AA0FD493FDB616C439E182A0A34E9CC017CB5BEFF27ECE1A3729DF1B4DC
E43E058A53186E9C2396C33FFDD038E94211AA4BD41B457832E2D222DDEEAEF8
2C0B984977F223335F9F543F3DD5D928903A2FD7E8B22703C6DE21E054E7FA0C
D6E9A2B4D55953A87120C8BC4E99BFF7AA70C37C43A00CD6FE9BCC22034B804F
C2A92B0565CBF883E888B1756C5DE5F0464FA8F432462136A493BFDD10DD2D41
CE99BCF4AFAB9A5CD83C8660017EFF93D308E0FC3CA5FEF38E59B0F2851E5575
1691D4982D2101A7E38185F01346CB8E17CDBFA7311BF70E430D4B83A6EAC22C
A3A25496B41EFA4EC32F7522AE09F329C925B7B6A9A39CEAF0E8FFA2E94C0A53
0EF48CBB4F2278C0ECCCD78BC11FE535F3A80DBA964FA239E5DB5E771BDF6A7E
E5F2F2C5CD7B3B24C3F934F19E656B874DAB481521E065491DF0FDFEA44F8D55
087CA2BCDEE6459357384DBC8D763450A0BC32E2E4F1CC9329964CD57F5F694B
2CEC437CECF7A9016054EAB3635198D0456E199CA03E26AD5143A6673EC14FDF
B848CE4EB55F32EBAD7E1876A618784624E468E818A47A8261436EDB6643677A
911BD09A07EBD39CBFDC2868EE9D4BEFD69526E656A6D0E331BE7E137E21E965
09104A848E8E5138859A8E678162518127282526098DC72844AC7249A8AF2CB7
056B43B08D09BE7F9442793D3F225FE4628A41D3AF919C86E2C774A799CBC57C
19CF65BCE2F027
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBD3BEA22E12E9C4197D0F3835C0942AD6487F5C9B20
C9A597910685A9BEE4CBA868D352ADC10A564782DF3BD57758FD145E769D4E88
BF43D19050DA58FFD64EB7B1D37BA13752B6C966C7A1397D80160687245269D0
F27E87B2186D931D624120B81967E58ABF5DD66AE39640224A518BF378B5CD26
761D1ECD916FC625A90EE8A7E00080300F0A05D265549982D56614814E10FB25
DA53070C2BBB4411D9608F4FF0B2E171820C734BD20399504F034BFE4C20E7A3
1326783358CF8D4FA48C1AB81741FA70BC0E0A4BBD104C7E5AC05CE49C6375E8
9F0EAB2B56BBB89144CE810C78D8CA02BD7CE2AEF79E27A7CC1D6B68A5B9F504
BED3487D1424CA82B8CC60A0156706987C7D0DB913F1BBF8A7B9A275E3345BBA
213B3DF67C4111E9564B59B724BD65916BFEEFE9BF03AF9D84DD2AB94847F33A
3AB3757D2C8CB688D50EEA68DEAD0613A62C3000C037092ED0A93F8486FDD39C
FCD0E8A6224BFA03E8C6D73F4B8F480327701262285C527828E5E203F328AD95
5AB433987B229534C53061C3350047FB20E3887F514B5897FDF225685D18D679
9DC141B7F6830D6771F1A3CAE655CA173FA57D400530CA6FABDCCB4325478D0C
93AC7EAA9DF7605213DEAF94C7281D9AC68D884E15ACA3BA68034F897A2FFC1E
F76FA2A69CEE7F1E9543904F1773969F65553C3469FD85B2F2F89F0E547BFBFD
F62A3E47DAA4EAD6D47F0305CCDB297C320A48A3655FAFC810CEC6F6D68ADA4F
AB5DD7F61DB94072B0AB8F1ABF62A78E43E1578DEBD2D05109DEBBCEC64AC700
4C28C4F0A5E3A003423B9958C73D306B2B4A7C67A95F8B4E737992642BD3701D
39FFAD94524A7752560FE97B8E99A12AFCCC5044D989BCAEC863BD15CAB7CE63
0194962E4183C3838D9401260A743447DF953444B29D7CB004560D0685F73E87
72FDDAB87125F419F90D165EF1C2A06A9B7500C6AD185B4115777C6BF9C24D88
653589B431FB84E4DDB650C2F783594DE6123D3142FC5C99973AF211F2A2A05F
5A756073B85FEADA4823BC1467EF2FC0E98A2BB28E5933E2F6E50D3580C547C2
54FBBBDC95998DEF2EA825E3BB2AEEACC0F30841835121B7A7D7A973F2EF67F2
795E6DD8CF55B9823AB2B15ADC328CC3AC493DE8C2F022EBFA14A2976D8E3559
B5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E9A716737B6BA413F846A887B
D1B3B89EEF73565F3D0D2D1E40E4C2811D37C9029692DF8E94F6FE39474EE13A
EEE65EC0E099C29064CBC0503FA4C89D845F91A107C8414C1648F6EBF6C8B1AA
7B2F72302AC2C6E6E9E4FD1EDCFCB8C648B2BDC18FE07B44B7E886DAB96F8B4A
BC3C584457B1565FE02E26EFAADB605C5CFE109AC7A355E2283555E10CA9070F
BB98E2337281FDEE7EC20EA060A062235F8848946BD058A0C86C794697BB0674
C1DA26CAC3FCFFE73689E2CCCAD5DE725AF6C7DE282CAA214D69B6793520439F
2991BEE6E427D4E82FADAC6C3829AFE1196FFD8D1D0F6BFAFF4F9062FDD08665
FFBDE33DB3EBD99D8110257DD0B832CB4209074A589041E903F6D89E22D34EBD
2B3C90EF5D9AF0A0DBD5145F0FAD88EB09D1BD84D00D951D4CF9252A4443EECC
AF1E56E5FF02B9070C1A92470E3AD7F1CD944E91ADBD1EFF555FF3EC5664191F
1C11943BB76D70D356FE5D145C73670D1A8F71E5C4FEE96C8D4DF87FF05432B5
165C8DDEF25DC98CBEA51FA99398860E1C252C17EE576B7ED658ABFD497DD5D4
E49663A5CA73CA347E27BC49C7DBD28DDB3AC7A78020551168A47ED789C2AD9A
B8C8FB7EA2F8C7D4D9FAB4B8DD91CB69558534CCE31AE7E157D0B060877AAEE5
14CFF0AD50200A157151F7625E63296E325E2C36D5DC45C5129C2D342CA7541A
75675EB2F1A5BF25461BB38C84D0651F4644CF51DAA8608BC3B698A22BAE29AE
3FE5C543DB648AB544E8212B3B2F97B5844022274F5EA46CF4E9D49CADFF1DC7
AD838B09A2CB6136CAE6AEA52ABA90745D527188599641549149217DF6B36367
A67BA60DB09562E82863F6C001ABEACCA36DAC81C30C11F98A77F4D100499847
E1102CC075FA1210881D95D6ECDD37B0B820176667500E58782156ED77373459
6699116573EB74FC1C83B091EA1700BD5B069BB7DEEE2BB45E7757F7BC00D85F
75BF5F32B350E2CF46BA0E8D0120BDB3E742C15DE5A8340318F907D7DB5591A7
08C83C63D6D457915A2F41B21629926169F4AEFD81BA2A880F4799EAE1C0C57C
FBC28FFFC956640872B49219FA101B88EBFA3E47EA4515043C418049903E3F36
885AD45509FC3CF7A376A608FC51751104BB96EAF8314E2322C457EC6683D385
525F118C799C34B50840604E7C248CA5BAE81E8C76C29FA3779933221D8A612A
2DF285FE041B3A9BD5577734A199C9CD35B0E546C84B0EA2E0A25B9C7C4F5C41
697EF3CCE5419730E32BBF73A9A9879DBB7FB52F25A5A5DFA45DB0FDF9B94F09
E5E455B170A73D47EAE72AF8A8482D766DBCE0DDB5AF2596478C99FFF087C75E
D783FE3DE2756FE91B30682558C93D64576524BE0B1B9D79A76536DA7036198F
E44D4449D02895402298DC4DEA179E59880F9D724172A90156731FD006A27B6D
FC0B5CB2A4054EDC8C7A27E45793CCD741B2DBC25014AA98D3D0A708EEFB81A2
C5F154990AEB3E5141FC64FF28F1CA6D4F1BEA1C640181908253DB88A9F2A0B2
D5DAC354F55645D40D9CD64B4D9C6015D7B95DD0C1451610AA956E22BCD5AB67
777E28EEF2F52897055ED5CACBC8BF7AE410A2EC287540D764A4635FCB04A06E
B43DE3BE2530FB83F8FDB2C2A73ED0D6C2F4CE770EB047051BE634D62F6F1640
85EB045535E44A62BB5310210B7563D3E69FBCCC5924146E5EEF76A3EB471A79
9DDE2180BDB1BDA7D33486570449498552A59622B5B33598392F103306F731AE
6E2AEEA36696E017DE1C5BE1DE7C36EFBF9DC5D83AB2C543CC844A757BEDCD01
038AFC442C577BF4A90C0A7A37967C173EA7211CDA4BBE6C6FE03D9EEB5A0BCF
6EF8806E036D96240CA06454C753A474D365E0C08C34F6F871D5D975C088D8CD
884A230E0C54E83C14066C3443BCDE9C6AB916A3E13042CA78F2DDD02D8632B4
2602CE40D3702D31876A1CFCE58D619A66DF8CCC31163198573754ECF44B9D06
542B9F9833A1E36C15301FFDBAAECABE49620797F020956A61C93EC15ACC8EE5
F47D870C0C99F6567CAFD946F2F4E01311B8C2BCE3F1063E50BE9FA95E648D18
517C9EBCAF62677E87399AB9DDA66D726D8BE7520330EC6936141F6BE214776C
7AB2623C5837413D8D15247FADD310C58FC911D294EE7E91E8668417673FDAE8
1FC2CE7BA777B592888D38EDE68FFB3EFE8387009CA5CA7EDBB00B60E26CAD17
086C48CEA3FF695D5A46C502EB5CC07CD313A25F3A0E257751978E5B0B9CD175
0C9C1328B900D04C4B99653EC00AF2D8AE8F680D6AAD2FEAF095CFBECB0DFF2F
1F05663D429209BB556DD5B23E0E28030F6670C4C2F1ED2F77855E1566A71B08
7B7C9CEAC3F1391D72DB08B0C95A9C0ABF06921828C1D13902B15E302C9207A0
71D513F3D29A2B1CB25103C640F981C5F68BBDC9066AE3BB0516F7FE82C45D3F
4EFD889592BFC582EF3A79C9F067B1C1D5C9E915592F7FABF53A04D7277C0D6F
C28B5434D6FF1A1EEE3D5E439D7D25FF01717FB43013DA06FF41184DEF3526C0
6FD5BAB6F19CBC7DC61B407842090E3499685523418A58665DC0521E880F2BFB
2C8381E13CB69A288CFB8408890ECB590C81E5A948DA9BFA7CF6A3D8C46514C0
CBCB2F5EA46AFBB3B8EBC862E482643DCE6A8EB4E099D4A15B609E3064D9702D
4980EFC41B863696FEEF72E35112E7BADE4F0015E2DF517C21CCBAD3E56801DB
21DF90B45A73F62F5BD5A21C6F8B4D4D32F2F7C002945F2928A218DA7B66FDC9
0C5920E486BFE64013CCB6B421BA3852A7015731023441E9FBC6B7CC3667DE62
5CCB4B03843809DADFF4912CBF620C56973E51B882C13785523B2218DF0980B9
4A1381A8C979E696CCC57988D3B725E16659ECC4344E75651DE93686D71738FE
955FD7C67F11323E059BCD0C4D48F4FF4724A8BBE1392FDD6F261EE615054441
DEAF6F96E6C516CF6FFD07E726AC794C0AD4C64DA15F0FE86C7779327B4F5D6F
ED61B8B603FED7E020939F4E5DB2EA3E78172E2CA9514B84DC676A2EDEB6AF1F
AFF4E98D238A726948AD4434F8B41FD8FB187D24F232C6D89B7279697ACEB212
E0F42F6F95DE7370CCF2E687548BF00226E69A67F0FE0ED9B64F9EED0F48C9CE
0F760604F835698CA5D65314D2BB69D35F3F089F755BA04D5D03A83FE0560F67
7F15B1A4491290BFA0567F93A5550CD9DE2843D083A56B2DD3F25D5A9F620224
A0A463B7BC2C470BBC8410A9A3943D196A412094119F6C7B842348893BB54F7B
856350B352014576858A26DF969402AB30E0F9C56D550BD50DC093C9E693265E
828A441345EA5C4EECC58BF731992316A2DEC84AAFBD92F033B33EF2BB8A4796
B1106E9D71DC13F231A3A822D4D2F206113B3C307DDB54806566D6A62F9AEA4E
0604D3A3CD8BAF4E54E7CEC755D26E71311F89F26B235A2C81D1C010153AFFBA
FFDE7DCE1CD6F5E09E418B68C5D10AA4FDDD613E1E98225608D19BFFB8773574
AF9236054D81136E1F260D64A894AA9E63EF9D62B5F3E69CD4104AE61D8C79F8
DA266F89F3A0DC02BC6DA849100D44D68475B9E41F9876BB6949602736726BF6
EFF89C97B4F3B8F8CB85EB85B1FE1D7C558D596C7D0097FA31399D8A06B6BB94
936F23D3C8E3378EC476B2556B6F07D623E62708B35157F11930C8756A84FD68
1880B3CE799AEC496A57D012715E3B92493BB601205A40E58A483766B928C9D1
6802FFC00814F797D3B86DA474B23CB8650C7021DF6706126BF167630971BC01
DC641766DC254D9E9B0C56F26108A1E001BC8E25147CA7CDF47CE12489E9C331
345BE8A68E408A503AAA09FC4FE60646E7AB730E5E0F1C60A772848CD279AFD9
FA3FFC6A1B269DF1B246989F6D9DA3E3C211A89E16DE5B0C372EA8DD01647B95
3762E8BD49F4C1524900738C7D8D50C123883F159DE0860EEDF5E41A104221C9
323CDC0D03B79E4C0CD14763A255D2FD701179D60EB17B9C4EB58E58171EAE13
48D1FE2EC24106CC175280FBE13452439FA35772557A6FB3D6409A78E170239C
4DB9902640D9038778EDC58FCF382F53E95C9AE1B62B80782B325A0B3CF634DC
7DFAF5FCEF80ACA698BB223B124E0967693FB176A727E8757E6427E846C0BD15
A804DD420A1867F2DF1CA821C65995B9EFC114DA73DD33B8C4FF220D1D53AE3C
C92C910CAC5922F6AFB148FCE2FA7867D4410060824D13F79652B119EE55207B
3DC19A5A3070EBC71B33F0B065EBCC731CB2F06F856541DAF49488186134C82B
C2BE6F136D0439FF5B2585A53C7CB0D9ADFE602A21B3974899A4C8F8101C81CD
6FDD7E2DB73C90C5F3C410189522F61655505F37D6A182ACDF7D3B172DCEC391
3293D99529B8F9EAC85FE548406DE5D90A0EC47D761DC1D072CD01B49DAA9AA7
801CDB41A857C055210CE8764246550C54D9693F3DC8F3710E116140922BD74B
54CD981E2769F4330825CB3CE8C359C97FF1C860FC8FD834A1E8AB45FFE33453
2FFF6EE351252820E23E3F3D4EBC70F615B86F0F94CB2242B9A1A169D9F8F28B
8C0A6FF3B1B8EA0380FFD69361F81BAF8D677E076CEFFE4D49B4FCE8F49CB094
12A104C60B3DFD16499C1DDA8FCCF5E0A2217FFC8F1476909062CA39FF12A6C2
7A36427B2F9BF6893395C4224EB4174D294D0EA1CA35C66D2F96FB66B0540A87
A937BE61FBBA74441A2F346AED242699248C6B8DEA57B9EABBB715C74BD161B6
D57BCA6FFA9B25E46C51D541D23F9D2633D0ADDAF128E4E336E7A223A37CCC1D
CFA6067B19044BD68048F44664D1AC524CDF5D6C7F4B7CE7389C563D11219A88
7F01853AEF9E0F87DF9A6609219685284FE6A4E39C4EE44BE4AB58EA6336435A
D8B5690C5BCA6D17B9E51F0E0BF508297839AE6A7F5E9284AF035C5C9DB4F8EB
9844FABE985F922B075C713C4D3C62D2CBD83676CB268AB65833198C0395961B
D7564A10214171DAA063C19C3BDA77BBA38E574368D645766283944D7293D6FB
1B42BCDDF2F241AB267CD797CB6FB74220158EBAAD27211EB43A348E7E1F8381
1A83F2F97B757C512C8213DC07182269DCD201B947F34A968EEB008753FD9881
6588DE125CF5549215FC63A4890D5E69242F1BD73EC0C118155DF304A4874777
C9F54A3155D41819ACC36246A22641427923A75A5D09646BB6027B54141C184E
C70444E5891308703A94EA14CB83F0FE54EF92CDA799325102F07E88656BE695
633FE91FC8103AC6DFEA6F007AF4A42C0A08C4D87597D945A72A0D9F60313880
362B868DE5F556B5B7EDD9F25421B6DE423A1EF22B2D0A83C48263F887FD33B4
0DEEAE66593FE6A8B43430B87B8469A3FE856445ACA1D999D17D1AE979279BC1
E60D84DECAAF93191A1534BE586265FB7C139D5F26181E5EFAF2AA379E39BFF1
5B361210A2BF34A30ABB7ECEF68EE3D3050D3C98651FBFD22E4CA35C0F08B752
FE2134FF5A862FC683DAA0E0C00494CD8C2277D665B99993A80FBEAD46BD124E
E5DCEAC46AB49A3D2CF06DE88A7776E7401409D1DD8F2063EAF59D3EC81D41A0
BDB45D751F6641FDAD6065A36614A680346884230B776E9BA0BF1ED2545A0446
FABDF17C6DEE9668BBF83B38E149825FCFFD89AEC9CAFDB57DC0C4C463A40496
1A7DBF1AB5613C04521104E0141075B747F094FE91BA1BA0D16FF764CAD09F99
A6F73C71DC1C0D138E3593E335F2B650DABB0E06F4E5D063F60ECD852C236178
90B61EB38EF3A1DD23A9EB5A0951E0B20F41B614C43F5ACD9126970121B0F16F
28C9C030E18A42C47DD0FA1EE3521C98714EC451AB5E58AD10E6C52BCD44A4F9
A2E41B30E5C948FAB0C8D1C071BB2430C7B6717E8B794AB2DB0E4BD8235B5304
974F1ED31F207E1DB47B800DEBC36EDF9639E4256570975B25C6C1F06CFDB2FD
90340FC92D80E83E0BC1242EF89D7602F38FCD0A3C36F5DC91B9874360F8EBF2
0EEC39C37C6FC2087779FCA72E26295682DCE3042DC9767C407C0DB4D0FD1A48
81A34FA426DEE361ECEA4E7DDD253666AA024FFA986DDF098E45E88AB98DDD8A
8691F3FE1D7B96C516DA7DFE48BF6D5D8FDBE9700516FD02309FC1FFB29C800A
6749417B4A4C553FECAA35374EC47A70CB070853165C61C1EE74FF018F0454D5
4DEFFA9123A8DC0320E459EAB7042CCF128D7815D457CD214D05982AE778AEA1
330D4DDD264FD3CC4A1270B7ACF83DBCFB12980956BCE2AFF75C864A8B5AC6F4
74FF5054D30C094FC54976CCF63D786E7A1D49B54BB09069CB12B66F4979A1C7
3E9CE4E8B2ED99EB20DDB4053F70CA48DAB3AEB92F8E68EDDE18506E73B4E390
C258E0E90286281DD2A688183420FC63F44C24F764417FFF7B1244C10E0FB344
B666D575447CEC9F275CA0811A296000683AFED2AF2CA96FE37C42758397C311
E01CA9CA4A17D968CF0EE334272D0C07FAB282082DED26D332F5C19A61D65356
4D8C789BCBDFC935E0EA158B8AA0FB937A6EC2FF53F98821703295813331DA77
61B1A0D7DB5855690D94B0C8DE37ABDBF7E8DDAFFFC3D0003ED5232D011EF603
6096398D8D10ADD46B3FCFC12980C2ED9EA5981E2644AE0718BBDC6A43328284
068B2AB05CE92C0031E8490313BFC7599FDC7A3CF5B6AF26E79DF066FE090A45
B8D17CB74BDAA4BFF6DAB5380CBF6172F37E1262F93C62461F32B8A683D919B5
E13A2C0F34A122D53FB8FC530D7798851581D0812AFF6F4C8AFE9F42F449CB50
0D103B7F02C07B858697BB50311E352962F28E1039E1D9E60528611520249698
A92CF23C5E8F45272A00921011466A09528BA62782207FC7A988C4516ED8B4B5
E9203A5DB3AC79055A14E1A2AB1902F879F1361AF8C67E030D2512D7931EBC88
6B052717039570A75CB813B58AE3DF517C21CCBAD3E56801DB21DF90B45A73F6
2F5A253ADB52900657F018FF227701992647C9DB8E4802C993052D289A653949
F11C130F37E27A62B17E62CF33D72F515B7B1FDDB27FE8CCA96BA7BFCBFA6279
4496BF3801E792931996E6DEFAD9D535B58A149AA49FE620EF68B528C5EAAC9C
996A67D046499E471C4C9BC0470362022734F5B0D2ACEA0EB86C80F967774278
23965F9090FF4E0CED2C97B53738B4B2ED56EBE617BEF17B9DF4F3161C81EE3A
4373691772A120BEE77098BB898BAD2174919B00BACE017184658A4E7A74EE6C
22C2737A810763CE713391A97827D2AF45C8379364325DD8DC1AE11DD1E8FF74
310016F5279CC754F3D13AD666CBA8F8C56E27E62853EBCF9374A4F388507EB1
C5911495DC5E665EDC04CB251CD6447ACCA150D05B25BA9C9DDC2F597C8D4B0D
43890B565AB6DB819D2AE2BB3BAD7C7778C53B2686783556362487180E36AC18
35CD7AE41CDE8EB6DDF2C222C8272B065645C76FCA01DE45DD5BDC9CFBBF7D2C
5DE52133CD7B29380EEC1C415FE398C7CEFD524F132A4B8261F8FFFD5007859E
6FDDFC381A5725953B4B89397E90E0E119E076E25C4799D60C2CC73610B087F6
68AEBDE9B21692592AD968CB3E74C7CE0C692A00E53F59B1F52B7FE7D0746272
18388B1327B6AF6AECFA67902D0150EC9BF6189B19204232F30EC774AB6AEB94
8CBA6F1699DB516712C5F614AAEE0D8590A3A26854ED51C4A9A1C138A87F6763
08A07F230EDB99902132CA5B6E0E955587665CFA62630BC035EF01B9D4D0A5D0
2ADED4DAECA436BC9F82D7DD9C0DDFF09EAFAA8D67F25F80B39F4A584B920691
E2FA2302597BFF0F12D7DF5CE219716715073175A372A33FA4EB480072AA303D
33D5478995B53381864BAE6CB4F50EE635A4C8F7A3B6866F93CA641F3F2CC93B
B715BB8B5B9215BEAF72F041F17D55B49B81F3D1279FFE1EC3804560A696AE04
2E15B54072F2DDC6498E69F7025CC87234D5594796765CBDDE8E2C7662221E2C
BE59212D4F85501EB8C86C9A1BBDF3E1C9FA6D058BE17FEB2A9A92C6DF48EDF1
4479D008ABE5E434897E2C25C96938C88D04EC033C9F923DBBAA571FFCBE6538
892DCEECE0183CC3B80A81973105F3E15BF95307E9D9581229457A104C889161
2605ED32F136F8837D1CFA83953E0F937316DE5AF8A03756C12F189494DBC735
E3C86A6D4BC649473AB2B3E7EF15157FB4518E5F5ABA29943100DC9085FC3189
9FCC92FD8B51FE215E8735958614425C593B34F50FF86D3D7B07DD66C717D9F0
2BA4C1F8B3B06D217E3EB2178B4192782402D4F78C39F044ED6AF03CA4415B08
19C371DCAC3BAF49F779E13BCD867CF27A8222DA7E9C65A7222BCA351A5EC765
76A65D53650228C5A192BD4E15C13C6A0664475C3A9C192169487905DC47D205
B148B69D0A6F329CF3522C81BABB8C9BED90F772BF2138072D143CCB198C2918
1CD9F32DF23C0D90F33ADFA325D53E3B8C71D54471DC77362E329CB71D690E02
61FB74414B5CF90D1793F98D7EAE541772A11F0A66805BE2E36A138F430E8470
A2D7137E9A69AAB13B8C5C0B2D09722191CF8BAE0C5A3B1227620AAABEA33E86
92ED1BAF8DF411657150619C0C7A674CA870A8DC75BFF945955A6D60C4B1EF38
7B58E928AF7F0DB257A40AC29D2907B4E3C711514EE22BFB83C77161145FC0E4
FC155733F1066AC478D8850D009A8B3868F4A84AA68FD6EC424403568CAB611F
2EDC8E2F96EB664D95D1958D422A58E668EBFDBA8B1A8430F7C7563E306B8530
97B47852B119B42A6438AE3C09162E8A4FC6CD4741B38836CB599DF98A26C020
4D49E3DB83DFA942EDBB45A07A97A220217A25770281551604753DE51F4F7971
3F761AEF5A91CE7EB136F6D645749D6FB26B8B04890816F5651CFFDBCBBABBA4
105E1F72F813469904235C1C8B306357EF02FC4EB76432C7B0D78AD8AACAB446
B96DC3801FA8715FC91FFA1921CB4013B6B4E693A1D158ED9866DC5BCACA8616
749FE720C39829DC8A2ABDFC584BBBC8AB8932CBFDFB9FBE0FF2F3A7A5FBADAB
4FCA85D1E0E9149E638845279D7BB6D32CDBB4F35F7D6497774B221B16503354
4CC7711324B539F222D587253AA8719E8B14653F7E48616690BEB42FA1245633
FB7A71090207070B9EA26895B88672C395C2EEF80AF06A0B3E3A704A3B79B914
B6737628E56E5311FA540D2771073186E2284A9BCDE26A5D0B205860D6935852
F816E6F8A47E0D235514D21087D22EC91EC1266DFEBE25392DD3720C587796C7
932CD4D6AC1263C6D64B9F057BA99AE776E482E332FC6F4EBD5E2952106F7EC0
83BDB2CAFF3EEE454AB8558EC865DEDF781D4A95DDF1F2414ACE57162F9F96CE
D4305F6E30A982C30AAF3D13150474BE27060866F3E5A43170D9AB04D5315408
040FBDA920F3D8C391A5FDDF2318F6D505E8FA521F1AB9126795CBFB4CE95D68
E3C7CB1D4A8DA1D0AEE7CAD42968985A9D0245D994C854FE52CA748C5AC92CA4
8A1A66E9F153A18BF0292CD25EAE9A176C9151F9C4EC7FB01A8FCA73B4365277
95BAA59086831567FDD5B3BA6936B13654F84888CA17948C9FB31CF86E555B48
15AA6C84DC95E309EA2AF7D1E5EC95BA6DDBA393DBFA8C3C93DA321584332A3E
FF9E93534A6E0062F71DEB775597402933824CBB728B11CF5D824D9BB84846D7
5651244286A3365253E1B4B548A0EC5AA55A9FACED611429DADB394BB38A4C77
0479712E2A5A618FF3F138947E9552402C323D9F7A6C8A5613A89CCDCFB0A097
1DAF83EA858AE2A1BAFB65CC057FE1DB587C8B2D7A74FCA897EE756EEF7F38E3
E73D4934F65C216EB6C3A6207CF39EA825E6DD17F4CC3A553C55AA3402337C6C
9B077A033B01F3B878BED141FDFD512283643D9BA7BE0DF887B8D92AC4A43F16
20524C426F7D16A648D59D3B346732D4328E297D257792B781E1D4193954E874
05F8A3441BD4D94A1A3FEE7472160E10ED90518D2A7DA048AB78121E81C52370
2729BF1E2930043D6D984D21E08349B8BE1F2C07632B519048220FA7D8CE0D53
DEB20FD2F10895BB8AED95AC89F458880C14F356FEF1BE1FA788335EF0647D47
D0E9415BFB6570A3D6471A1F8D2A1F257E423086707AD2510CD9211726522F34
7A7E54C91D69A00CE5CF3F5C7528E7A50E6FB20265461DAE6E57B5C958A54B43
ED6AA7650995B2CD5FDCE14D56D38E2618E1383678A6FA47A599EFBD73616219
F17E801AF5F30613E7A2C3D32301ADBCFAAF76A9AB7D3BB0F9DC7CE31CAD25EF
631C48E3B2431BF94A497528F422DFFD3B72A168E84519D138C233FED4D6CF93
4A9BB6EB21FA6D5B0DCA5A9B668E27F1AF649B91CFD0D0AEA1C81BC3D6DE2A45
C15172FF2CB08E341A386CC7D3A7A81AD20E8FCD66328F497DDFE297ACBE318F
7C6E9DC307E128A76B25716388C24A39C5E1B3C64C0B126E752F655D8C91CF08
EB5B1222A0043B001FE5C89F41669E86CEF1C8D3D84C9892F62613F3FC722D56
1C0A980344751FB70ED5F1CCBF4A75C9541CE2EC94D8F61800966800D6F7BD0F
CCFF837E1CD0A59D88ABE3C8FF2EC88BCB54A86A5456A0293797A1BD1FAAB9AF
2BAB480385C98465ED7103702AEF74973F6FB697E645E902D65536BF80521CA5
2FDCB634318CACBF994B414731F0AA47B8C3C51FBACD7A3D7D91ECD821734025
EB13E3336B86114B7A7FAF6FD2A332787E2D4D03C34258DDC4D3801528F6BF60
C4D07048BCF34879B683B2846019287CC9C7BBEBE8E76815C389EB932443AB7C
855B75672B3C002FE467BA86A8ADE9327E54958A52991F50800BDC90F7603C5F
7822B3B824A70DA042C65F687D8908F985795BED8B027ABBD9E82CCD3229B583
6092A7444313C171B4CF755A645F5A8D84FB1C177AED502F9F054D68CB91DE63
6E0704E422616D69367A334E3AF5594456DD2B434C5CBEEEC8FD3D1247F6B05A
5E7A47526378D488DE309604EA9D2F14ED40653C899AD3D26C369A7FCF5D2513
062CD5C37D8B2DF6A3B6681C63BCFC14135382469123169802562E7ED6AE24C1
5111AEE8B0120DD8E29CC460BCFA32877BE563EC799879ED9336B3049684BC62
8996B0B1925DEF6A8492F020E67407CF321E01EE8F2811A9C0AAE5D09DF9243C
4E6488D2D3CC9C266FD12E129320B519D2289DBE70F640BEB821AD49E34383E6
3C474FB5CE9B8C15AA315E2E1C635618BBFEE940CE89127BD552B9E1A2203807
74B94A95A7DF70A4AD4FF3A6CE3B66E429E778A1871510FB3661D8B5F4D9120A
155D32DB5C681FB5A381CDDCAEADEDEAE8FD8460B5BB21912F2881FA5136D51C
41C15D5756CC52CA9EDD64727BD3BE976D4963BA172224E2ECDD3E91D91C57D8
55D818C86819DA7A0A6BD0F5088A5E41311E9B82067883EDC8BCDDDFCB6A87C3
5DF439B07DA441ED1B5D45704665D5E85622B48BEC77D6444798C06E05F9BEF1
443CD00570B204F24BA7D6B5191297716DBA03B23D85CC8B701EAA654C5EE74F
40D4717E9547812B285C06A7820642245A91B895E018395581C02D84A0DB1815
2D56A72ECE236FD3A3914574309A312DB2F9CF2B71058CCD97763B6A3F95EA47
0066F36D93E5100B3D3F7436A5F496503A3E108CBCD7AB1104D6396B7B9A991C
24883E1225FD310ABA9BFD87333B8F068E2215E2FDC895E95036D23127557837
506A3B542B0B3CA37CB0E7A37299C66DA33C1B881AD5FA3CF92EABEEBAF8FD08
7089E5CCD4368BEF556A281D166D457F08E37699518C38ED00FC5C77003D22C3
A1E82B87DC2C2C53E132DCE563F0CEE20C43F067B52EA7E2FD5CC5F2466C60A6
3A5BF9A3675E826B91F41E614CF2E003870651311FB8A61085B211B06BDF27A8
90C867D5E5178B2F59663039F8784A1ABE0653C796E1CE22A67E0A8C88051231
A7E0A40361DEAC264CA18954F5F669EDEACC6AA8993B14F10441751D2C0067A7
BEEDEE7BF7F9ADAE26EF5C141C67C81D6F9205FCFF1E677CB41CB4C20CDE4D05
E238FB1A2A4BCE61344B770E4AD226FB70AE23B5D3EAC8940D20E60F16613D2F
A8AB391237137B5A5A8CADE13E5092E2695EA58DD57A4EFA1A9B602A6820FEE4
F15784BCF86639E8E72D307BF0C956378CF26E84336F82EB8F2706852A446277
1ECB67BDD9A9736B822F462A2469588D5C6AEEEAF9F81311DB34CBAB134E37BD
04D4D400363C4D96BEDF16800A5477247A00D596A64222D72379697C276EED20
8F76C1804B31AB096B29DBCF8876863E559A1E3F0431FAD24DD29DE84C0F0F3A
30989CB73B06E7266AE4C4B126D872331BAA53B6663E2176C95596737A5DB59B
2F130E1258FB3975667DB0288594A7EC882C325563B0C7D138B23DEC0D805266
1C9E566BC5BBC90E3E7D020FA587FADDB367620BC0E94534D0AC7160F00F0A99
740CC583BDB2CAFF3EEE454AB8558EC865DEDF781D4A95D4B41566250CDE486D
D72554B45330B3EEF2AE90BAB226D1847F7B5095BACD95228E1F6EDD85621B96
436242A656AF71C9AD585854C18C87EA13D0DBF19AFFA96597497EEAE5A837BD
DEF0D200200811EFBE05A2A111040C2999ECA9653ECFB9EDB477DF5EDB369B9D
CA54B0171D466DA1704A8BD4B0CA7F27F0BAE272BB71F97569E75452FBFAFBD2
5FB626DB30B5046130DF350A2163EC2C04E6B673BC0BD8777BA4DC7A43B7AEFD
A433E13DB62CE0FA357544BACC981B081A83848CA6C4C17B1032C0908708F8D3
F8947A5C5226332C1BAB770AE588A3BA97601F9232A698ACA93C3C93B9B3F3CB
0E00A59BB9FE1031E28B86F10DE460ED408F3A9A904D39BE9D92CFBFE612F6A3
48161E350C36E0E9313F4B67AA51FC37A0CF7D9AE0D0933CC49558A514BA3CB4
0E8568067C553BC1AACDA7BF1E9DD09B18A10D6160E281617AF98A99A0ABBA32
AB4A573A89A6BD721648AE7E91B8F7EF57C789B0297E2F3511A14662ED9661EF
19373CAC3389033D14EFAB42F58E5E5BC2D71864223AC62E96438F38077AFE84
E80DD7DD8963C43C2A1D9DF25CBE73F50FE858C252421423177422AB4C140AAA
AC800CD95AB26532AD4B328AC7139ECFE22AC9B8466DEE099DBCA933FF7C2F9B
79EF66308BD308208CC4F76D874B9569771B188438A4219B51E3729EFFB7D17F
23D313DF2479F8DC057271D6C660ED78D933C2915818D10650C944A8D4D0BA84
AF7B7A74DE75C31E5F50C8E1F225A807A7A3E512F2FF4EA1CEE3BA5E3B3F485C
973ADEE365333924935783D751FD5ABE5317B0CB091F7A80497504E00EE0E8C0
2B0986C83D6192401891AA397F2CAE33909142C7807BE29AAAD46A53D70E0F5F
3E15F04BFFC99027842709637306B002E46CE2989009F8939A5EC6CF04D1DC86
99742F87176A0D72ADC1049F1BA37779AFC8C0315E0D563A306D73947563E18B
28804119D94F026276B802CB7474B3C4259FD7B5EB4FBBBD466FF887FFC9CB8A
776A01E21920B4ECBA4747C17F4B5FAA2E927F23F92BCC189AA6428AF0A07D28
CDB0528BB61D23E9B4E1309795D31A37DF4EE2CDFF851920B3381A2C44721348
0AAD9D475A0ECF18E577657CD50DBC8F932F2A1FB8A57FF183EF6631770B19E7
F96E512BF5BCA1D6060E713F3A231263AE9DADFB8EFAE7428D3B01E4731E8C5C
EDC2EC23A92C79920EE5FA14D645568EC1E4D7F0564AB4840F6DF7DD2D9DB2F0
D780CED72C4868070EE2139FBD1DB04DE6E1AA2CC157CF27B66FD0110F58A3B4
76DB0595FBCE031B5B2BBF83A759E46253E7BE31E9D61399923C917D37C62F8D
71F09F9599C6F4F0B24EEDC0F9277182E595DE211248175CDD6EF1F890642D1B
53CB86D766A66CA35750640D810674DC2BA2EF480B4213C0F0282787310CD271
60927CFF10954D7ABDFD2A4E3D180A2E9117E15D30588F1A680102B56ACC5996
D8E8D50C63560685478BBB2FCA0F08795E2A8E489B25117E4695DB5D7058509A
165C71034556B6BF8EE9D50DF6A45E92DCAFC76B076BC0957807CDE9321DBB62
D9E6139B30919E11B24C7B98F587554BA65DEDF506DC7E18CB7636FDBA9E00D7
0EA8C5658A0658C58EA1BDF5ABA5ACC8CFD02BAA5BA035249A953E45235C5279
9D829914EE4F4F908066D56D63BD4082195F66ED646AE2E2DF81E278D79BFC3A
DA95DA18B78C3378AC2AF6FF3DB1F62889E36B190300393A9922FC8161A8D750
97D3D7814A832A41130753F82920D00AA99881C5AF4F5B157FC96731F0C1B869
393F885DD567B3E712ED522DCC1F38021A4A58B2E7A4F03D8FB8DD049D224A65
D3AE7C9174F06AC17B66759B789C588660EAE5DCB20DE4BDC20AD17A58713973
B5ABC57549A06482E276B0EB2037A9ECD3835B29186ACC101DA8FF23DAA4F33C
2AD3AC042AE9216AC501F6474014DCFDB71FA151BFD05B61C2C2B9F213228B29
BFC949FFD786A0AFE6EAE3F7751A3CE5CF1EC4CF0C1BF90B5EEC2B739A109B37
B07E8A668E68D117A55E759AAE53C60DE5EE3A1E09CE2A3246B9B5EA106E3EC5
C2115597C34A26C32A540E57228AA89C4E3ED2A727F01F4E5655AC62612A4234
69E0389307E111AEC7E8A36A0E0D60F3421096D221999A4F1B8F7AD3C6C5E4AF
7F595527E1997B8F151004A186BEF572BECBAC79B283F4F86D32C2241621C9C3
7AD54B16E77C98FBA715FD12C70D173DB6DB95DA44EBE94ED14E365277AB3C26
FB93A62D5DFEA07A0C80C0A828A47BB27C2D5D2E086709CAD8F9DD76D2D48C10
4ABB6F15BD9AE6BA72ECAD6962C317C1306D4ADE0B26B643227743466B04271B
B84AC9AAC072FF6D5AFDC5A833E61CE4EDB88DE25D3485386E04321CEAEFED56
113CE9A3FB112F827A71399DB12080BDA66B52594D5854008276FF601A9DEAE5
89D8870A12A96C9F053E06419A9DB820281E0E15912283EA69464CE5CD735490
19E3D4CF6D6FDB6226E906E5DA131763084D8C3FA92A474BA1D0FDA84C27C483
68941D48E909014797A5B45C6DA78C1A2CDF287BE182DFBBF2C22ED2935E2200
411D4DF225A0C61292809AA0BBE12217CE53D9DDF5ADC111780EA13592876832
555C8136B566F062A361D06F65A71B56E3FB36FEF2F02E32BEBC5C892A004D7E
C7CB1ED2791AC7B9B05DC4850216FE0A8C5F3FE24531DBC285BF63AB42985B29
F861464A726F564DBD3CEA6D3BD3A8C8AB5C06D1357F00C79CD6BE2CBF6E31BF
1094E76B0980569D565DF9068C0D4B22053F2539441010C143C178046F3533D8
8E0A462CA75972AC0BF658A920E94F191EB702C60419E23295FE6AA9B005EB83
8401FE050B0890CAAB5072C9E2DCD603504B203ECB40F443CFEF44D6C65BEE6F
78532CEE2D8976F7857130CA0932B2ACB83E6E40B9681B248F0CE3D77AEF339F
B455F3817CF7182D1B75DB146D59388C05DEFBAC33038D7A8B32CA1902B75322
B6A65215C9F425C048AEC1C929FDAB375F3B47EC35930755CE9BCFB29BFE0807
1774366804FA232E4AE96B1BB99032C6A3A9CE03FD8D7995C36D487F4473BFAD
E9212E510D2933E0819A4A0855E5AF6497F674F2BF93F11F2EE5D9D36A9AA32C
283B25D9E35BED54243580FCB3949E4D355E2D35E33B794FD84C274A4D9C2643
EBEC15D19A9A8ADEBD17C734D458EF614EF1A550F5879209A77AC8BB9C8642FB
C085461C1F5C08F4251173001AC87C3F51A681E27E2C4AE26093689327A25657
1CE9457E7F0C7201B923B7CAB5F7FC1766F3FB6B37479D9917E1CF3558476799
D2303842C303C71230690D1E82D09B8CCDA2090FC9C501EECFCB504FEEF367EA
F456DEA3D4A76F7BB013050D6DBD2F37B716C929D64BF6B3B0C65930E8CB6594
DA36A1FBBE7B9E53AD13E502E465FA798311054948A10FA9CA79E7326D1FDCFD
9462BE3D409D7DBD06CF5BB8CEBDF61ADFCC29983CCE9C0C451133E0C72D5020
FC4E7323F7F6653CD9B5C01F8763FA2F639D8A4BCDBBD715E62A222E40A73653
346D0B67C2D2F5AAEA68413612946A1A6CA860099918D717888F14C5A7DB7AD5
57D4BCC2CADC265A3BFD3D1F9835B0724778E2CA7CEC7560180897F075509F64
E99906D8D18163EAC0A67899ACFC1C386F8B261FABD320A912825129BDE478B3
D27D4062F874B256714372BF7B0D0BDFA2C583CB95B1CD762EDAD35DF98C05B6
550C2A556BC4DE7211ECC1623117F51CFDD1C57D49318128B3583D8F28290FBD
601B866D86B1D9BB7C6C0AB1DAA69F0775C9E1940847B383AE9D940B9502F5BA
831B8FF6124A1F8DDA56AA678928083C28BD8071C97999F72BC798AEC40AB0A9
A811A6D2D686D7FF6C583E072BA035906CBD5BCF6F9A57FB4F700E1DD1784344
DFF59B4BC151877CA31D0A4863F5D7090F50B8BE88AB517C1A30473ED0316741
6D9553860D44DA8A409CE4210F43B2127CF164D5EF9F8C0FC02FC54FAB50FBCB
9E476B3CD57462429F840DEB49ED5A7E614E8B0D5C886B16BFF572F91D6E63CB
D4EE16455CEA28312F6A00D43CEADAC9612A2D0B045892C685D8D66275B9EB34
3EA4EAB4D57D768391594AFF7153A7B5D4448EC622849F9E24D38A620464A7B4
7B4E1CEB70BC1215D946A2880B683118A3A2C7C7355F5E45FB504F626A4AEE2E
79B9DE6D213E8BC6C96E1A693D7D952E8421467F8778CAA46B2ECFF8E401E4DE
643F42A229ED49D981E5BD738B708386F1589CC0FEFF6A27595467B30015278D
0207E1262B7F9C7EDB5AD14BFB367877F167C7606D98ED773D498B68B4B81CE7
20C5ED2AF096F94C65252B3135CB4C6AD2AB88C71C5E2CBF27A314168D696BEC
1282FAFF7FA0CF27FE41145EF63AF319F60B12A9EDAE37FE2361074B808048AB
09DE710899BADCFA4992BED1A2323DAB45601994C67F6A07F238E7B6B0E85F05
BF92DC4EDA5C72C6F8E30CF7D00F389C7EA91BA0899E9B246141AD2BA9DD7937
063C456E59A60B032B61B8F0696AD3782399A677A5969E92A456B25DC885A4C8
51387800C2136067D27C435512696B5E2FF8AF3D296585FC6AC72D75422618FD
A5E4756A2D4B952AA0749677CB61813BC519AD4531594A641956087FC94D47A6
0A3820304D4690D2CD3393E2CF132776EB633ECC6A83CE69BDAE5AD15039A30E
C7DDD87A8B0F36C7614E6FC6DDBB09B4D637C3A90F49453D73DE97E3A3DCBC2A
1FE5409E7AF513C214141E02C64786EE9263D6FA0F751F9A6C6EB85792C59220
331D0922B425E71070ED24E2115D16B2E4FED5256B6EBD2C0B3DF3BB1A2E7B53
81F598702D81C1C6F5430EE9E67D6E1CCAE0F8F448AFDB454D0D110ED0205411
7FE649FC5487BA6B534F598B4FA3687210D09476818DC7A83E11ED6D625F57E8
908314B0457C276CD582BBAF6BECFF8CE27049831D14570CBF8592E5F36272B5
D40C927B76CCD24A399468626780E7DDD9064DD55249CB3543A22D2C71A6FB3E
669F6F9E9A2535CDAF37F43778FC88C15FD48A899850659E50B557045B2EB87E
FEA0F0830E3017168285B9BD549F79515DABE3C74E9CFF1AC27B24ECDD6668AF
E4C21F337FF6243E9B38814F1C21BE1997B63083C94FC1EC39E9B4FB9BE81F57
FDA14D0B4018803ACF02ECC674D1226ADE504FC5301D3BF6B119FF772B8C85B2
15310E3A7CD36E58A2B5DF745C63474AF3A96F481E256372E0CA06C2E49CD8D7
CF9FB27D90834AFF6D3AF0118FBC89DCEA8442C6E5F1B697672D9BC06AABB13F
6BA87C94416DEDE5E0FC00A2509E14D9A5BE53CBFDE07B162D1A26DFE4F51FEC
C9351B42923E388B70E7C41B77DAE3DC1E2EFFB96A311FFB2A6A1E302218F9F3
63EE8744991067ED0B2C0AE9D1AF457BA4830AF3BC5AC25B6E250D2D6AE6E8E2
EB0263B37B84ADF9713ED382ED533D205780B058CF7FA8DD2245C1DFB721873A
8FDF3FEBA4D73FCD8ADE13B05ACD342640FCE553AA47EC4068615708F8FDA29F
9CECBF293227F8C4E1DE4DA1778F75642F5B18775FDA2DDC01141DED49B997F9
E0729576B3D8D7451E2AFA09833653E484C85C9EE2C78BC4932E1CB09843818A
C0893DA3C710044C03A37A680D1F806296BBF942428F420204E0F915BC77E3A4
F5DBD8BE1BF95DDEF554D42024E17389FC7889FBA5E40014BC947684EA95B075
1F081A5EB611486D808F965059E724531BC2A969CD30B05528A06F0A894B7209
4EDF0A97C402B984816FD6245D9EAC9367E234D595225AE7D0BD850E9122495D
ADE7446F015163ECACF47FEB8ADC1D5B160979622DF0B55C12FD923A42A02768
1EA5DC17097139AB21BF4D1ABE0CB264EEDD6BE0658FA2747C56876008374F1B
B5DC96B5B927F693F3506D76C9184F8DA811365E4B745066FC878C3635F88400
9281799053F2AE4A9CF3E90F84519931D3DB44F27E7A42D7D7361F8FD39C87CB
54A86A5456A0293797A1BD1FAAB9AF2BAB4802D4281BF319283A82E3B86F6FA5
38D46C3153553EBCBF2C04EEB3DCFE4783F5A3DB1C600AAFAD8D61BAF6222ECA
C7A0C750E5063E960F37D2B0FE314A6716712E9736AD4265E75053BDD0E5EB12
44331BE1138C61BAA39B0C9669FC61F47D6C101972BC861F80C36AAD3511F899
A9318A36023DEDB0CC9AE428714DDD6619AF0785E90C2D9DDC9DF2AF345352B2
F6616FF952D6E2618765170878F619FFA052985DAA45786E411F8AC6D254E74D
C1322A969B3DB8A48C4794FFCD5DFA64BDF5EE0FD9971FAC65F3902FE4D85BBC
15DF0448A6610E1F7FAB897E1D4B3F430016C23FDB7EEA6972691E6770B37A0E
467B8708B448F692CE5721CBA24721E4DF7EF63891D98E4EA24E49FAF5D774D0
0F1B54515F06E60CB81420DE1D91BA2129A9DD26925DBC56B562DB11A93A95D0
33B6AA4DB98BABD9621A2D27741CECA6F2956BF0F2DCDF5326BD8683B25EA1E8
83449A3734F9EA75154BBA688D6AF88DF1AFC8BE0DDB4C5C203539D1F5B72F01
0F93C7C4AD5B083D1E1E8450C8F0E2D45F0CB63CA557B037EEEDF2AC2B228CA1
663017A57913CDD7960CD3DCE6FDC0579AD9AF1ADE12F444E44FB47949643896
ADFF67741FF8F24D7ADE3D115BA7FC59B541513CD6FD08039CF40A1F5B90A8BD
1EC680C9F8C3C012829FA69B8F87FBA0F1F8CCF619FBA2C0BE79015EBD0FDE48
DB7E771BF4DE9E888069AA1B4561F64F6961CA631CBD4BD0C158ED489BD78C49
1965127E6D2505FFA60B96018B2638D7361D1461357F8418B835E7116E5FF409
E73CCF01C8943C615D2BF49701B9CFB4E59BBAD123299193090BDEC1ADD34338
CC6E7D97AE05454F4CEF8B66851B7517C3BE300C8F5739775AD350EFF3685091
0F28E8D8239356585572268176A6A648499D953456EBCF09E563862B4C18A3CD
D0D72D52948373E38251C508E4505E84571F7470BF71ED46C0118081A739201A
18E0B2B745E35BA582BA113C18825686F9ED9588F06261AF3E8D1343D228B5A2
CE3879CE965818B9269A90EDB58ABE5710062F0A337C8537A5FCD09950C59D0B
79467CED736D9EE1FA8E07985D511CBD9A9350C9D9026B0583124740AE853541
77D039344525248FE25E46E0DAE91621917D15D5DF97B1B2ABF9727A632EDD25
053B367B441EDE2A8F39720EA1386FD8C2529930EF0C243EBBD7617B0874E9A7
ED61938DF5C85F1CE42E38D68E2825C8A95292A77C4346157424DF69508EE98B
F576EF31B2153CA983097E3A76F4071EDE47BD3ABE7F2C3000FB9A63C54587E7
3B3B11FC2EB909BF595ABCEC85F570D2C7F0FC85703EF3280868BBD1F62BB143
8FA8FD8B849C4AE71B9046CAD64D0538DDA8CF35E7888916AAAF198330A5E583
5B0DD4BF746F9F4BE1514FFED49364D2E81715E78DF8DFDCA58678F1D89E22D3
4EBD2B3C90EF5D9AF0A0DBD5145F0FAA7FF1FCE1920A890F6AB64F6326C1262B
4249BA9ACCE860BB331D56EAD7EC62CFC83DE5D30412F4E1ADF2D35F29EF84AC
125945B02F5E350BA327DF3F4F721BB714949A63595BA4880CE60BB7BE9A8622
23C5C6E41197EA85FAEA3B236066B7BCEDBE1DD0B555834E47D50F178E9E0F4E
8598B492F8D3428EFF5FBAEE498DAE0C0FCCC7F4573B1876202C8953C325114D
48CC9FDBF761C341016A4632EAB93115FE51069AF558DC9372B038A82F59FDD0
AD40A42DAE32BFF67370777499B7891EFECCDCBF04B78F1FE8179FA6618A09DE
AB2F8E31F8BCE3D81E2CC47772EAC9008D2BCE6CAB3C94135F316497AEEFD67D
848124832337B7DAFAC306BC46CCC6A1595E15A49C2BE868212F8ECDF6B56EF0
A1CE463A36F540B77EB94DD1BB25D299CF802690A28126DD3751C6FB8E2F2860
942F2C184DCB96E253D1DAE45D9A010ADDBDAD28D36FCAADE15A574DE45CCD53
0B90A98E8461FC7F9A68707004D825BBBF84FD99940221BE69739844970A42BA
B44E622268ABB33945A536775253A2C2166A0E4EE6272EC1F39BB7E05C36CD0D
E61E48C2F2BE6ED3EA2BA9EE7756AA834018692E80401D347F4D303B7F1CBCB1
5079D38ABDB6E124524B80453FDB0E55F73DEA1B431695C88107C92BBA326940
1BF297140F2BF354FC6CEB056DA1B21FEE5314F8AAA3FD58B625B90860AB5225
A9A0D8C3B0A4626FD8A9B14E9F90980D18F54A7614115B381D7DBACBF1F0E2E6
381F1374F3EAFC1572D2E56F791A3481ABBE7C528F63E5A5E048AED55E29C7CF
1A1A279B57C11F7A314D895CF5CD2B2E4D47861A166AB0CFC50BBAAA40A74728
06B5FB59FBA44B7F5F82AC740F366DC171C388750C9BB1676CF87FA0B9000EE4
84675DDA6A1FE2DDD6A566C548B2474ED668F20AC79B6145C924520DC0BDE78A
FE39B3CCBB8E9D8217BAB427D2B3258ECB7817720ADD9E18FD2DFBE5C3DBD55F
B099836FE30BDECB65496CB050FF725105A5C4E88D0FD5E0C73C1D14B0D4EBA0
E2AC9C6DB2C78B925BBBDC2ECF4BBCEABF32174AD4F7E425431CC0892209EEDD
C3986FFE2BF43B90B47051C840D11BF793974F52584BAF86E1C758A107D62D07
1D72F26A8030AF63A14E2B708053A6C9FC99AD8924B7818B0CC7802F2C16F0ED
60E125C8333860A8AA45EFF92927970F208BE4A7D5D37240C8D5C3F893CE2B04
5FAA6989DC20804B763FDE9614BDB2EDFD18C10D3E6FADA258F62B1CD40D1C98
764EF3528591EE06C1A0E5BE179E3AE06925394D4D0A8F215E6A0DADD9075E4D
95B3F43EC7875336F150276EE252344EE302B32856EBF06F7508DE24363E289F
324CED74800D284624C3AC45AB6CD05C8DAD8ACF11C7FE0934A0B9F49A5BB5D1
4B64DE244E3A916F3EFAD1B4BF55BEEF99C5ECB32A736B311E9FDAD71AC751B8
0C6D25673D893C03CC038CE3F7F57BC58432C12DBA3C00BD8BC794C012540E73
099A890D068982257879C46AD41CCBE72D83A5FD02DEDB868A2B8F010172B9CB
2C76FEFC4576A763849F453C86043F15602A346C1667DC625491A42A8BF5D93B
98E0BD49F4C1524900738C7D8D50C123883F159DE0823425A82A3B2D14EA94DA
77871E3E5DB662E87168ACECD1E7C82D606AB2BCD7AB93A8795AA46773CFDEA4
03758F3FB0D9C59C15DB93E45AB86731E47F691F9E8A3362579E3E961D9D7417
03E35DF0172349D6FE770FD2E544A54FEB36853B0C68D2C7608E594F9BEF7C5B
7D407531C61E09CF058DB83ABF6919BEDE7F18E6B622443A1BE0DBEA45DA5910
27A249EEAD5580D052B44D007098FB091C6DAF3A15982928D3CC1548DFFA41BB
E60C83774EE992477BDAE88448AFEB4E4FA182A8998C0204D4F9A42A86DF5DB6
5D3A23BF7086D493B69F8F00F3EE5C6F25EB6CD8CE461CBC1277312D654F0E33
C5E5A805412DF36F72133343F40992AB476E5F84F49B1D0C796F55271BE29233
DC3E92F5C7379278D200DA126D47E4E00934D8DAA3116D2B7E450C8F7B16278D
E567FB37E8F70C933DF03E39BD49697D30B8BCE8B9341D2DAA72F7FDE401C8E6
375773C2FB5EF2E2C02F432D79029C1D33CC9670F7BC30765D6775BB68C69704
D0BA5D6DE6BC5E103374AC7E5E545FEB1867A1526B2BBC6D5DDD43898BCA2310
6281FC3976EF7E8BD3FC7427ADF8971D5EFAA08331EC59790830EF0E2C5B87CF
A09CE0CB78AA0C150E234D3A5C32A6EC201192FFD8BEC784F4132A5AE54F71C6
3297B03C9F7F76B44EE925C8AC1275190330BF4A9D5DB352D6EC3623F6634F51
81C4885C5FC8747A7789BAEAD1400DC2278F05EB89C5E738CFF443E670240942
B3E1045177013673989406A112E199447E0C516F290BAD98656F7A74D985BEC5
36192C679FACFCE45DA1FFE2B8BA34107D26A993D20FA8C5024EFDEEDF28B7F4
E72A6617FF0E7A075A554F9AB98C71E5B7D8D042CB8C40FAB4644CDDAA91F6F0
D7106CDBADD658D704F64C52A77F03BE07CB52B6321F7F47A6C94C9C679AFE35
0E0168E12BD0DF359CCD59FA104EBB574912E1DF953E18E8C8355D66B32DF73B
6BA4CDD9BAF5A0D133185D44F9D51DCB9AA35CBA2E22779C13DB9DE3AB3322A7
27A6A32D5E34FA090973057AADC1CE92097E3FA8847CEAAD3690C5D73FC23234
7B4A3852F42952173E18C9A4CDAC48A6AC5F13A0DA96A502BC592C6ED244A1D7
6EB088B8E6123958523931DB4FAA798AE995C07FCFAB6B8AC894D3DE5A07441A
79952846B0AD9E0F8A0FFA2A401A9F70EE29B069A9870CD35599B04FC357A491
8877CAF0E4403064C81CF8B9C93B808861FD87A4A30F0899CFE617259AF5BD53
124572E5B63CCD257C0314F99E0E0E74769685BD6C6508801E737ABB84A750A1
6A4999D5A59AEB5FAE6FA51B128C938E289D66EDD30965D997D6FFF4DCE02D82
496D8B4133FFABB60C89FD2B50EFD6A80BC790445E61D864E4AEEE4CFDB107B1
E55F5417FFB440C3403572FAB0CCB7029DAF5D9210483B4F910C407E5604911B
96C587E65FD0058E0576018C73BB3144E80F8777A6B186C8FD3838F5B823E14F
44F3685C2E6C584ABD904D7018A00F6017ADF508BF63F64AC0C1709B81A2598C
9422463D8B1D450DC7E71CA5DE4E208AAEDA4B5DD9ED6E3482283ACB506A2D68
12D4676F3A6CF4551B450FC9D4F3131E5B9BF09E2EB27D88CE83FEF77557BE14
617E26AF53DB2BA5F5B6CCA6F90D80BBCAB92534432EF4A7BA2612F343751A68
EA6CC4FD5FC0220AF65548CFE3266DB0E088F48DBD44C379EFCF03E92B563C53
547C266FCC8764025ABD321F25418074615F742AE93FB56440DF99E6DC49E4D0
1F9286E11085D68EBC32811318D493DC71793E84BBF3E2BEE2EB813B036909ED
F54D510A8181C171816540E61E5A2E2947957AA9A63B04EA1FC1D27CC6A4A1E6
7DD67ED59060159FBFF46F79FD8F6257B4AF5E637CFF0164B61172F6E763B323
938A5CE224C2C68C1A85D18199E0C313BF1E3064C18D2C7651F872264E521D5C
54C1F1189082E227570E544BC696831F84B02AEC078CCEEB604BF5F39840266A
3ECAF118D8B89E19CDE0D7F03EAF49BE96047A475DB701CB9A85786E100D81A5
930D61286E7F7E9925E31B3424D126305CC21AA617C494D2B867BF1D13335BFA
551C7AAA5DDF539FDBA5BBE370D4E9AC027A5042D9D52A21096816975F427B31
F18A672D31DA3CFAA35DB22ADE1210232CA688DC521374212B1CD239F1939E28
CC5154BE59A133DB2FBA8C1B5C69DC9941DEB2E1BD49C716522730108031DCE2
3EE53F5EB857A86592A78771A5BE413542F13134DE38659B43776382C43893E2
42668AF296593BA92F264C3FB6EA2AC38412173BBB83A5B89792239D5084600D
19560C26FFB8367445B690245E81AE0A38693F0318A61A091CBF18942E5AA2C9
9D424B8AB1F5A341530C88F64249CEA881BB4191F5A5700F9070E60CA384045D
C239D4F08220A21BE20597B63023FABFE4B71A7BE9CC5266299C3D49A7E1CDBD
BC5A0541FF5E194CEC0F3A909C9E8EC6573BFEF1AF35C45759E9D71ED8DC943D
22973255580829F21773BA4F291D8D47BF8B69F6EB337F620282E587419142DA
C6ECBA2011AD1A59662C580500C0575C9B394F2F3AEFBDB0DEA139D539F1465D
50C5D1DF71C76A22F02061A889240B2E196C3450BBDA9D018F6210E7BBEFB4F9
2DB7F7CC7CC9BFA3DC85B19C5EC770C8A621F06C9E9D3FEC79AC3BC155D6E552
2515824C6E2BE3CA394661377EBAE23C91482ED63233B81B6AF56161458B6C93
A16029A997F1620CFF75BDFD5B8B636585D62441FCD0648C2803FC95AF65BA08
98D5292037CB52152485A610A2A4CDCA62AEF9D1AF88BF14CB44C210BF44141C
72291EBB13897E6A7397A871DD11FA1D78E5F78DF4E9B0FAFA7188A0B04FF899
54F5D0CB096CEFC35760E9F293085CB54ECB8B93397942ED0508663E38B7FF05
556CDD7FAF7FD80A94657427DB751702FF8E7DDF6E039E073F472A7B9D67D8F8
288C2D95E222EA6F455AC5FBC299780DBAA19B8ADAEB4CBF0E1180643F164F81
04A5EEC85BE45FE84AF012F734FDEFFCD428C8CE237A95118FA0B368657B1A4E
24A24841B901C02800247F02F19BED7F105F841A259EF699287F65445982D9FA
10156F1B60972C8E3D87B8A86DA3CD64C99691214E38341FB5F258B1DB611AB0
3FB146E01E8765EBCD0BD1C62E95F659D68F0D69B85BA188CED1C57A4455E492
C6839B85A90C23F82AFFB57F9804808B87E0C4C5BBFFEBF0F70C0EDDD74BE94C
D6A1FBA8361CA55E65876D68043E829681F241C83B213EBBBC0E684BF893F08C
5B690EDF00F3FE36C9CAA4C56E41279AC23F02F5A1B428B4A87D42F5F09A321B
ED127C7018C59DE9469E21CA7E8B4444F14C80FCAD8AF9D9FFCDC88AAEF7B62F
AD82B0BF91009A20278F1BA1EF039FCD5F49025CDB0E40056EA85BE29E113D06
CC87DAD193F9850E9A175C83CF70BD90D19FE47DCB4E867576185E05CE9EF796
BBF902893C83399D0C9F7CE2061D59AD577A2E135403EFAD52472E97602424CC
86C82455CABFE2F2AC97C7A8FD33D6DE81F4ADD3E77BFE2AF014C9AC32F0F0A3
A02D479C48D67816F04AD0E3DC993DC19E0DE596E8403631869981BFEE1D0526
B20FB55FBF1207AC47579752BCF5C8B0040059CDAF1118CE04D23881A39A65BA
4C88C8934ABD872C9099AB98A49922824A4087D82053C16F183E9E658A4368AE
C49715FEBDC8CF5AD1270442C8F43A227EFC9EED8515BDC5ABDA5E2091834073
CAFF73E3C7106DE30A0BE3EFD47261CBE2F070C0BD94291BB7FDB904D149467F
BA73927F2CC982DF1C269E8F3152683BDD07F61D79F787B693869D6F3ABD374C
3F85B469E1246D3A6F833FFF146F24D52B6C30F93DD0D7DEAE77E0EDC9556959
70C7A1BAF6614606243C6256300F7322DE314735566203199DD5580E703CF30A
BAE46318411181CD0D12BB1878198F8AD9741387FAD81CBF4B916C3CF8BB7D56
3DE61A20F562A533EAE00D0061D269A3CE49A281D46CF9314CC3D7E9AECA005D
B43AAE1E43E95508EDBF5450D66D3003483BB525E72624E6CDD62EB5BE6617E4
EEAE0782026D405BA7A1D57080100B5EF88CAC4D1E366031C22F0A9189488F94
228B0127757402E835BE8AEF424F2082FAFDED49499FC805AFD18DF56F31B434
6554A0D16CDDB671CC59BE6D8B935D1A346C5B78CFA94130192EDFDFC2778F1D
8E17FE4348663C76B4E51FC90491990C201FA4DDF49EE7703D9DFE30FC3F11D3
51D23A3E44E4B80761EF5695001EFC91CE91E9DC10BBC4E2AB62E6E56E2B4241
F913E2E01F6B4A73172905FAB4B56970CD15681257DD57BA0C39ED94DCCA571C
D82C6E0BBE3DE5134092CDDD76048FBB9B8B867BEF191661E65D79A249AA3BA7
A6DD476755FDD1C3C40F2D73E31025BD1811234C3C295BE16EF9899C94642EA3
A40CD3096058CF1FEF4D7ED706F6B02282C20C0F042FBBB8155EC868D4F20814
8F477747952DFE089ECBBEABB9AB7AE45221207CEEE97EF66017F71E1412F7F5
6BDF132EFF5804B0E3186AEE29EB4E62793BB713366DE2EB8262B9F8853186E6
690AE8FBC87D544DF53C274C07D85229BBB2BB2F0FB1B3C663840413AF71B2F3
C838C5D6E0759370339A0297AC32017884DF605FD4EF348C863EDE31E97ADF14
D9F180343DA29EB6D4958912A5EF8237CA9D177321F9F6B14AF21276B0F2BA23
A10154A5FD2DA591F742DF0159CC8BA919398751D8E6BDEE152D2A94C9E3F324
BE1B44FDDD59827A252CB81D0278B9B88D345869D96C57CAFCFA148BE140BCCD
E6A231660A1170816ED400EFD373D263AA62AC5F6B51795FAA6BC1A456DAD044
021E04D419C671C0EB19A35AF14D031516AF3EA92B61077C98F3043D4FAAE1BF
79D5B873D10CF294CE1BC740EC90A0764E9027D61CE5938B121AE839F2D5B1F7
9DBE83B6B7836E42C2E1AE0093867B0A21449E8A723BB63FB1C3717A3F21DF49
04C90856D7D3544A5A2226D7061F43565B53C9C1EDF90E2D2A44A78BBF02C637
0D566B96C5079D12C9D4F0FEE8731D37881157559905233176FD4C2D16191D37
7FD954C71929EF8C615493535A7DB96090F5BFD58AA4BC1282B989F287F0DF70
57BE14617E26AF53DB2BA5F5B6CCA6F90D80BBCB787F8E533A2C71F469930F29
67664F0D17A94A65D60B406D425AD9518EAA9CCF31324B1361E9A081348CE270
2AEC75773BB43D2C30A95318AE845CCF5EC97CB96B0D06F08F995B344FDF33B4
376512D85F65AD30E430DCA6F4D5B9FE2B980DA6BB8A6C096E177FD17519C05F
D3938536C3679F9D4C0F28A95A2F084A8B71B870C2E63B9C22B9827BD2A3DD5E
BD003CCD1AD26D23BEFCB709973D901E8BF517C6C8B730247D8934141C5D8151
C53D2238ED8DCE3679E2524F1346CBA9E958A86DB67F479D8DBE6271E29EE5B0
8B5473DD51A322C43C37B05B04A4B32773141E311CB670AFD82FAF7E7D4DCE7D
5D281292DD7EE336CFA55620A24B553A27E1A8F55850057C020699005F6C0D10
2742356FA24E0ECD6C51EA8670823D4BDFFF039619ED63CB9571B219B3874B40
DBD4ED2E96046449A558A82A76B85CCE2FBBE7626B60143A989A76BA08AF0182
920824B069C6EF0A5000F53914FFEBB1AED314CF6ED9FF7180E277107289B6E8
B3BD36CA34A035B47F8B143A25FF51C3E0190E007757A4DCA4A6BC4AAFCEEB30
BB1E2260ADE69D2F0971876EB961C04B41790179523745618AADA2B76959EF62
26298F0919CABECEAEC5AEF93D384CB7FCCD9E7209572F2A0CD4389D396B339B
D812DE2DD4D0E87FA357142F24809DF58767E5BF3B99877008047DB5AB1D11EF
4AFB03F074FF8DCC2894690CF8B2CDF65AA121A80E2325D3F4661AC402EF8622
CCBB3CC1853E8E1DA53357D07751A0C024285A8121E4905B3488A07094A64E78
2EF8345AAAAB2872ACB9AA965745F6EA82F3A7C984892C9337201F3CCFE3077D
78F67EAB4FF86F6648D7A073A95908910AB2575406521973242382592ECA1597
B7ECD33AFFF7A7DF8CE63E64B944233F63C8026B54A0464FAF0D6C3CDF282DE4
7D3C7684E65C797CF541814636E1DBD0B8DCAAA13CBB938744330ACE487BB7F8
94230F7A44DD3C4A09998EB0867DE7CA55C54D08BEE240F3D2D036BCB09F583E
28D9562138D9197A8E5F89EFB4FF863FD3E8C05C2FE6E44199949AF13E0550BA
E7F3AC50CCF2DD2D4CF1149C423F90034E9AD7846F4EDB06E0ED6D5860D9E4D6
80DEC393ED6DC3A56ACB5CC67FB1A3045F7C1A85DCA51015F65E28D3983C9FFC
84376830777EDE774B4792EF1663CB197E62239A51C39F7747AE046BFEB7D169
F44EC51521CA3915AD07CA4F46FEE909458D61A683E2227C148D192342551C04
7DD7395EE78EF1E38C0A20643A0A516371FE9BACA1E070BE687089A8705AF268
3D32971D383B0F4C6B9F09D9AA68889CB155EBDD13F84047A4455697AD4A8543
25FDED59721930FE377CAA7FBB6EFFDAF316E125358052E8BC3CB8275DE70FC3
6DAF8192FC7C94903CEE6D39C9F67064BFA3D432BAA2EEE4E7545F4FC2CDC83B
756F86E8D4627DEBD21B10C68D3CAAF6F93228203C36B4BC7D1A3764EA763A61
DCC580D27BD9F71F8393E764C9A7946A79EBE381F6C65E51850ADA47907396F0
4E1F3A1C103B7F02C07B8586971AF306B394C3780746FB511D2B85131ED52E9E
92298D06EFEE8EEBD33813D342D3512DFCD41678430EFBC5E098550BAC392A99
AFDF91683FE94AE0641A8704FC0B84C303210781EDD06451EF61C2EFD4E369AC
F7E401149FC91CE4DF2EB93C637A82415B9AD192896C25EC01EBD8782B76E027
87075FCEB7141100F34A49AB18E45CB38C834EB15A74B25E1EE4E04C07E486B5
C02904A8FE7704A5E4BC1A6A025C260A2E6E10D550552233323B06FE6F660ACC
7E26731E69789E039464F9C32122FCAF1260D76DBEE8E937971E94C01C2D1557
2A8AF5153FA17E3ADCFDE60DBAD028D3FDB15075E1A6555083E7CA5C8EF035AE
CD889D3C0A4FF1CEFF313E863BA272B95843523554690430A159CD2B0C8BA0D4
3180D3100B7C83AFF2D45661D889EE6ABCA66E97CF5A1B1170C70E362574F239
E2F84980359182554AD8B480F14B9D9A5B9FFEE3F66D73496B82BC5710AB56CA
52D2109E4F1CBC3907E9A06D683510CE1F3F06FCB5882C8678610B8D594FD3DA
DE1F3AF05BF6638E4F792BD1DA4F8F665B4A9A9E06210D07DEE95E851E510250
60B2323B094FE7FBCBD0CBB02BFD0DC1CF828D0993C5C584CA82E23A805E9592
A316E269B6EFD4B8E2FDE353A0ECEFC2D2E76DDF1C2514CF984E1FF1673C9ACD
674D06D2CF69CAC00916292D683D22F12830D995539E7913E1DCF02E8A36D834
A7F3CE080A57402F64D40BF3FE31899E00D6A17596FAC42105EBEAAF2632F454
3AF46CC412EF9F3E75347E795215DB25B44497EC3E7DC62F7707A6A3ED98A7DB
137EEF6F9B9689269E0663859573049FFE446C686E38A8A3EA5DB5FADE8DD8DB
0DF3D49E3E4C3F01DAC5C10E7EC1C4522E5BF1BCB882301CED2DF52AD50018C5
3143B832C6A08BB4FB0CDEA765B299900FC7C81B75846C5339F0140E0119E21F
419C0F2C3EF08F552FCA07B9760609612C2E7FE3E2FB7840364CF8BC46839A43
04FE1119C80CF2987A8377EFE88DA538468B3582F41C2363B25504CDD74DCF76
754983C0EAC12F468DF341BA9C93E46187C8C2591B4C878DDA7F1F4A19244FA9
AA4045F04922094ADB95B79F723F40D4F0E2B76985AF60A56B45556ED7ADAE6F
FF9154F959A4B865510896B0133C35F0FF280776FBB0DCD0904D16AC085991CE
914BCC073E0760296ECB4C157C5DE686C2ABB4C52A70D7DEAED6C235B64DBF6F
1FADBBE1E9A856FA38C7DC65334D53BF36C165EAC449125C39142C35FB9B5F77
8219C2CEA48ECDAE91E630544BE1455DE125C8146E32EFA45E3AC2DBF949FE13
FC0780F551852D6FE0D1D8FE563927109BE22E62C059D7C702023998C1C316EB
FC23099C9A4628ACD8ADA7B302520368914C39A631CD5AD03E79F612C33A6799
13082341BE1DB3B5360500E10624DE9784FF7538DCB35D5561ABCFB295831AD6
20A20FEDB63254154BEA409482223EA8A132456DEF7F2612BA0CD8AF7C319426
A2295B34FB7C59F98A04B1AE815020FEB0F2F464D6D0337317736B36DAC424D0
E5668986B4BC66A7594C3BF61B21956FBD5E9A8E7B6262865781F309800E6EDB
BEC5408B72D25A71DFB2A00ECB94
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AG - Algebra un)
@start /Fa 173[959 82[{}1 1328.35 /MSBM10 rf /Fb 152[448
30[773 733 595 690 69[{ enclmmathit ReEncodeFont }5 885.568
/LMMathItalic8-Regular rf /Fc 255[732{ enclmmathsy ReEncodeFont }1
885.568 /LMMathSymbols8-Regular rf /Fd 201[470 470 470
470 470 470 49[{ enclmrm ReEncodeFont }6 885.568 /LMRoman8-Regular
rf /Fe 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Ff 184[869
5[830 12[553 1[553 3[307 46[{ enclmec ReEncodeFont }5
1106.96 /LMRoman10-Regular rf /Fg 160[909 45[606 1[606
47[{ enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular
rf /Fh 203[993 52[{}1 1328.35 /wasy10 rf /Fi 149[369
55[886 1328 15[1328 11[1033 1033 18[369 1033{ enclmmathsy ReEncodeFont }
8 1328.35 /LMMathSymbols10-Regular rf /Fj 164[361 31[361
1[650 650 650 650 650 650 650 650 650 650 4[1012 1[506
506 40[{ enclmrm ReEncodeFont }15 1328.35 /LMRoman12-Regular
rf /Fk 134[634 739 3[470 18[683 34[1012 1[1012 361 59[{
 enclmmathit ReEncodeFont }7 1328.35 /LMMathItalic12-Regular
rf /Fl 650 2[723 5[650 17[650 105[578 686 686 939 686
723 506 513 506 1[723 650 723 1084 361 686 397 361 723
650 397 578 723 578 723 650 6[795 1[975 1336 975 975
939 1[957 1[885 1012 975 1192 813 1011 1[469 975 1021
849 885 993 939 921 975 1[614 4[361 650 650 650 650 650
650 650 650 650 650 1[361 434 361 2[506 506 6[361 4[723
759 27[{ enclmec ReEncodeFont }71 1328.35 /LMRoman12-Regular
rf /Fm 134[1136 2[1136 1196 837 849 879 2[1076 1196 1[598
2[598 1196 1076 658 982 1196 956 1196 1046 6[1315 4[1654
5[1616 1[2041 1293 2[801 1682 1691 1353 1412 1[1554 1530
1625 11[1076 1076 1076 1076 1076 2[598 717 45[{ enclmec ReEncodeFont }
38 1912.83 /LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fm(A)-60
b(G)718 b(2.4)f(-)h(1)f(Lineare)f(Ungleic)-60 b(h)g(ung)716
b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fl(1.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(lineare)h(Ungleic)
-36 b(h)g(ung)433 b Fk(y)417 b(<)369 b Fj(3)p Fk(x)295
b Fi(\000)h Fj(4)p Fl(.)855 9338 y(W)-108 b(elc)-36 b(he)676
b(der)g(angegeb)36 b(enen)677 b(Zahlenpaare)f(sind)g(L\366sung)g(der)g
(v)-36 b(orgegeb)36 b(enen)677 b(Unglei-)921 11330 y(c)-36
b(h)g(ung?)433 b(Kreuze)g(die)h(b)36 b(eiden)433 b(zutre\033enden)e
(Zahlenpaare)j(an.)p 19148 12296 8087 45 v 19148 15515
45 3219 v 19857 14238 a Fj(\(2)p Fi(j)295 b(\000)h Fj(1\))p
24826 15515 V 1 0 0 TeXcolorrgb 1372 w Fh(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 27191 15515 V 19148
15559 8087 45 v 19148 18777 45 3219 v 19857 17500 a Fj(\(2)p
Fi(j)p Fj(2\))p 24826 18777 V 27191 18777 V 19148 18821
8087 45 v 19148 22039 45 3219 v 19857 20762 a(\(2)p Fi(j)p
Fj(5\))p 24826 22039 V 27191 22039 V 19148 22084 8087
45 v 19148 25302 45 3219 v 19857 24025 a(\(0)p Fi(j)p
Fj(4\))p 24826 25302 V 27191 25302 V 19148 25346 8087
45 v 19148 28564 45 3219 v 19857 27287 a(\(0)p Fi(j)f(\000)h
Fj(5\))p 24826 28564 V 1 0 0 TeXcolorrgb 1372 w Fh(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 27191
28564 V 19148 28608 8087 45 v 47992 4800 a Fg(___/1)p
1 0 0 TeXcolorrgb 47990 6792 a Ff(A)-31 b(G)369 b(2.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
32636 54804 45 v 0 TeXcolorgray 24746 81281 a Fl(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(2.4)f(-)h(2)f(Handytarife)
f(-)h(O)-60 b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741
4800 a Fl(2.)p 0 TeXcolorgray 651 w(V)-108 b(om)352 b(Handy-Netzb)36
b(etreib)g(er)351 b(TELMAXF)-36 b(ON)351 b(w)-36 b(erden)351
b(zw)-36 b(ei)353 b(T)-108 b(arifmo)36 b(delle)353 b(angeb)36
b(oten:)p 0 TeXcolorgray -1384 9891 a(T)-108 b(arif)435
b(A:)p 0 TeXcolorgray 650 w(k)-36 b(eine)549 b(monatlic)-36
b(he)548 b(Grundgeb\374hr,)e(V)-108 b(erbindungsen)-36
b(tgelt)546 b(6,8)j(Cen)-36 b(t)548 b(pro)g(Min)-36 b(ute)3782
11883 y(in)434 b(alle)g(Netze)p 0 TeXcolorgray -1330
14429 a(T)-108 b(arif)435 b(B:)p 0 TeXcolorgray 650 w(monatlic)-36
b(he)531 b(Grundgeb\374hr)d Fe(e)747 b Fl(15,)532 b(V)-108
b(erbindungsen)-36 b(tgelt)528 b(2,9)k(Cen)-36 b(t)530
b(pro)g(Min)-36 b(ute)3782 16420 y(in)434 b(alle)g(Netze)921
19519 y(In)-36 b(terpretiere)522 b(in)i(diesem)f(Zusammenhang)g(den)f
(Ansatz)i(und)e(das)h(ERgebnis)h(der)f(fol-)921 21511
y(genden)433 b(Rec)-36 b(hn)g(ung:)16691 27697 y Fj(15)296
b(+)f(0)361 b(029)296 b Fi(\001)g Fk(t)368 b(<)h Fj(0)p
Fk(;)p Fj(068)297 b Fi(\001)e Fk(t)22685 30021 y Fj(15)369
b Fk(<)g Fj(0)p Fk(;)p Fj(039)297 b Fi(\001)e Fk(t)23516
32345 y(t)368 b(>)h Fj(384)p Fk(;)p Fj(6)p 1 0 0 TeXcolorrgb
921 36539 a Fl(Mit)400 b(dem)f(Ansatz)h Fj(\(15)227 b(+)f(0)p
Fk(;)p Fj(029)i Fi(\001)f Fk(t)369 b(<)f Fj(0)p Fk(;)p
Fj(068)228 b Fi(\001)f Fk(t)p Fj(\))399 b Fl(kann)h(man)g(\374b)36
b(erpr\374fen,)399 b(ob)g(T)-108 b(arif)401 b(B)f(b)36
b(ei)921 38531 y Fk(t)433 b Fl(telefonierten)h(Min)-36
b(uten)432 b(g\374nstiger)i(ist)g(als)g(T)-108 b(arif)434
b(A.)921 40523 y(Durc)-36 b(h)360 b(Umformen)g(der)g(Ungleic)-36
b(h)g(ung)360 b(sieh)-36 b(t)360 b(man,)g(dass)g(T)-108
b(arif)362 b(B)e(g\374nstiger)g(ist)h(als)f(T)-108 b(arif)873
42515 y(A,)434 b(w)-36 b(enn)433 b(man)g(mehr)g(als)h(384)h(Min)-36
b(uten)432 b(telefoniert.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47990 6792 a Ff(A)-31 b(G)369 b(2.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46248 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(2)p 0 TeXcolorgray
eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(2.4)f(-)h(3)f(Biobauer)f
(-)h(O)-60 b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741
4800 a Fl(3.)p 0 TeXcolorgray 651 w(Bei)373 b(einem)f(Biobauern)g
(kauft)h(man)f(1)217 b(kg)374 b(Karto\033eln)e(um)g Fe(e)589
b Fl(0,38.)374 b(F)-27 b(\374r)372 b(die)g(F)-108 b(ahrtk)-36
b(osten)921 6792 y(hin)398 b(und)f(zur\374c)-36 b(k)398
b(m)-36 b(\374ssen)398 b(allerdings)h(no)36 b(c)-36 b(h)398
b Fe(e)615 b Fl(7,40)399 b(v)-36 b(eransc)g(hlagt)399
b(w)-36 b(erden.)399 b(Kauft)f(man)856 8784 y(1)217 b(kg)604
b(derselb)36 b(en)602 b(Karto\033elsorte)h(im)h(Gesc)-36
b(h\344ft,)603 b(so)g(b)36 b(ezahlt)603 b(man)f(pro)h(Kilogramm)h
Fe(e)921 10776 y Fl(0,46.)921 15314 y(Bei)549 b(w)-36
b(elc)g(her)548 b(Menge)h(Karto\033eln)f(ist)h(der)f(Preisun)-36
b(tersc)g(hied)547 b(zwisc)-36 b(hen)548 b(Gesc)-36 b(h\344ft)548
b(und)921 17305 y(Biobauern)604 b(gr\366\377er)h(als)g
Fe(e)821 b Fl(25?)606 b(Gib)e(eine)g(Ungleic)-36 b(h)g(ung)604
b(an,)h(mit)g(der)e(du)h(diese)g(F)-108 b(ra-)921 19297
y(gestellung)544 b(b)36 b(earb)g(eiten)543 b(kannst,)h(und)f(form)-36
b(uliere)544 b(eine)g(An)-36 b(t)g(w)g(ort)543 b(f\374r)g(den)g(gegeb)
36 b(enen)921 21289 y(K)-36 b(on)g(text!)p 1 0 0 TeXcolorrgb
921 23835 a Fj(0)p Fk(;)p Fj(46)p Fk(x)297 b Fi(\000)e
Fj(0)p Fk(;)p Fj(38)p Fk(x)i Fi(\000)e Fj(7)p Fk(;)p
Fj(4)370 b Fk(>)e Fj(25)i Fi(!)f Fk(x)h(>)e Fj(405)921
25827 y Fl(Der)440 b(Preisun)-36 b(tersc)g(hied)439 b(ist)h
(gr\366\377er)g(als)h Fe(e)656 b Fl(25,)441 b(w)-36 b(enn)440
b(man)g(mehr)f(als)i(405)217 b(kg)441 b(Karto\033eln)921
27818 y(kauft.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47990 6792 a Ff(A)-31 b(G)369 b(2.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 31294 54804 45
v 0 TeXcolorgray 24746 81281 a Fl(3)p 0 TeXcolorgray
eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fm(A)-60 b(G)718 b(2.4)f(-)h(4)f(Halb)60
b(eb)g(enen)715 b(-)j(ZO)f(-)h(BIFIE)p 0 TeXcolorgray
-741 4800 a Fl(4.)p 0 TeXcolorgray 651 w(Lineare)408
b(Ungleic)-36 b(h)g(ungen)407 b(mit)g(zw)-36 b(ei)409
b(V)-108 b(ariablen)407 b(b)36 b(esitzen)408 b(unendlic)-36
b(h)406 b(viele)j(L\366sungspaa-)921 6792 y(re,)484 b(die)g(geometrisc)
-36 b(h)484 b(in)-36 b(terpretiert)483 b(Punkte)h(einer)f(o\033enen)h
(o)36 b(der)484 b(gesc)-36 b(hlossenen)484 b(Halb-)921
8784 y(eb)36 b(ene)433 b(sind.)921 11330 y(In)421 b(den)f(nac)-36
b(hstehenden)419 b(Gra\034k)-36 b(en)420 b(ist)h(jew)-36
b(eils)423 b(ein)e(Bereic)-36 b(h)420 b(\(eine)h(Halb)36
b(eb)g(ene\))421 b(farblic)-36 b(h)921 13322 y(markiert.)921
17859 y(Ordne)609 b(den)g(einzelnen)h(Bereic)-36 b(hen)609
b(die)h(jew)-36 b(eilige)613 b(Lineare)c(Ungleic)-36
b(h)g(ung)610 b(zu,)g(die)g(die)921 19851 y(Halb)36 b(eb)g(ene)433
b(im)h(K)-36 b(o)36 b(ordinatensystem)434 b(ric)-36 b(h)g(tig)434
b(b)36 b(esc)-36 b(hreibt!)p 0 TeXcolorgray 0 TeXcolorgray
2683 21558 15666 45 v 18348 21558 4523 45 v 2683 34023
45 12465 v 3391 33078 a
 currentpoint currentpoint translate 0.38464 0.38464 scale neg exch
neg exch translate
 3391 33078 a 3825 33078 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 330.71754 a add def
/d 0.0 a add neg def /h 248.35974 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3825
33078 a 20245 22323 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 182.3861 0.0 -148.33145 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 151.20772 0.0 -97.15202   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 182.3861  0 -148.33145  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -148.33145
 182.3861  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-97.15202  def /maxTickline 151.20772  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 151.20772
0.0 -97.15202   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.3861
0.0 -148.33145 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 151.20772  0 -97.15202  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -97.15202
 151.20772  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-148.33145  def /maxTickline 182.3861  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 151.20772
0.0 -97.15202   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 182.3861
0.0 -148.33145 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19000 19459 a
Fd(1)18999 16310 y(2)18999 13160 y(3)18999 10010 y(4)18999
6861 y(5)18267 25712 y Fc(\000)p Fd(1)18267 28862 y Fc(\000)p
Fd(2)18267 32012 y Fc(\000)p Fd(3)23159 23669 y(1)2680
b(2)f(3)h(4)f(5)h(6)-22883 b Fc(\000)p Fd(1)-4352 b Fc(\000)p
Fd(2)h Fc(\000)p Fd(3)f Fc(\000)p Fd(4)g Fc(\000)p Fd(5)20245
22323 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20245 22323 a 20245 22323 a
tx@Dict begin  { 182.3861 151.20772 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20245 22323 a 20245
22323 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20245 22323 a 19902 22609 a Fl(x)20245 22323
y
tx@Dict begin  PutEnd  end
 20245 22323 a 20245 22323 a
tx@Dict begin  PutEnd  end
 20245 22323 a 20245 22323
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20245 22323 a 20245 22323 a
tx@Dict begin  { 0.0 0.0 pop 182.3861 151.20772 exch pop } PutCoor
PutBegin  end
 20245 22323 a 20245 22323
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 20245 22323 a 19902 22480 a Fl(y)20245 22323 y
tx@Dict begin  PutEnd  end
 20245
22323 a 20245 22323 a
tx@Dict begin  PutEnd  end
 20245 22323 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  [ 282.12743 -366.28564
284.52744 284.52744 -152.77502 286.06824  /Lineto /lineto load def
0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def } if n 3 lt { n {
pop pop } repeat }{ n 3 gt { CheckClosed } if n 2 mul -2 roll /y0 ED
/x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1 y1 /x1 x0 x1 add 2
div def /y1 y0 y1 add 2 div def x1 y1 moveto /n n 2 sub def /drawArrows
{ x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12 x11 sub atan def /ArrowPos
0.  def /Length x12 x11 sub y12 y11 sub Pyth def /dArrowPos 0.5  abs
def { /ArrowPos ArrowPos dArrowPos add def ArrowPos Length gt { exit
} if x11 Alpha cos ArrowPos mul add y11 Alpha sin ArrowPos mul add
currentdict /ArrowInside known { ArrowInside } if pop pop } loop }{
/ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.  1.0 add div }{ 0.5 }
ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x12 x11 sub
ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11 add currentdict /ArrowInside
known { ArrowInside } if pop pop } repeat } ifelse pop pop Lineto }
def n { 4 copy /y11 ED /x11 ED /y12 ED /x12 ED drawArrows } repeat
x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED /y12 y0 def /x12 x0 def
drawArrows /y11 y0 def /x11 x0 def /y12 yy1 def /x12 xx1 def drawArrows
pop pop closepath } ifelse   gsave 0 0.2 0.8  setrgbcolor  0.5 .setopacityalpha
 fill  grestore gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  4.0  4.0 ] 1 DashLine  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 284.52744 284.52744 -152.77502
286.06824   /Lineto /lineto load def 0  setlinejoin false  NArray n
0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0
 setlinecap [  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 282.12743 -366.28564
284.52744 284.52744   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0
 setlinecap [  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ -152.77502 286.06824
282.12743 -366.28564   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0
 setlinecap [  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
40434 33078 a
currentpoint initclip moveto
 40434 33078 a 3391 33078 a
 currentpoint currentpoint translate 1 0.38464 div 1 0.38464 div scale
neg exch neg exch translate
 3391 33078 a
18304 34023 45 12465 v 0.9 TeXcolorgray 18348 34023 4478
12465 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20117 28248
a Fl(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
22826 34023 45 12465 v 2683 34067 15666 45 v 18348 34067
4523 45 v 2683 48282 45 14215 v 3391 47337 a
 currentpoint currentpoint translate 0.42621 0.42621 scale neg exch
neg exch translate
 3391 47337
a 4258 47337 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 294.1752 a add def
/d 0.0 a add neg def /h 261.23851 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4258 47337 a 19088 32921 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 160.20905 0.0 -133.96616 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 131.00609 0.0 -130.23242   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 160.20905  0 -133.96616  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -133.96616
 160.20905  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-130.23242  def /maxTickline 131.00609  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.00609
0.0 -130.23242   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 160.20905
0.0 -133.96616 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 131.00609  0 -130.23242  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -130.23242
 131.00609  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.96616  def /maxTickline 160.20905  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.00609
0.0 -130.23242   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 160.20905
0.0 -133.96616 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
17843 30057 a Fd(1)17843 26907 y(2)17843 23757 y(3)17843
20608 y(4)17111 36310 y Fc(\000)p Fd(1)17111 39459 y
Fc(\000)p Fd(2)17111 42609 y Fc(\000)p Fd(3)17111 45758
y Fc(\000)p Fd(4)22002 34266 y(1)2680 b(2)g(3)f(4)h(5)-19734
b Fc(\000)p Fd(1)-4351 b Fc(\000)p Fd(2)f Fc(\000)p Fd(3)g
Fc(\000)p Fd(4)19088 32921 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 19088 32921 a 19088 32921
a
tx@Dict begin  { 160.20905 131.00609 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 19088 32921 a 19088 32921 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 19088 32921 a 18745 33207
a Fl(x)19088 32921 y
tx@Dict begin  PutEnd  end
 19088 32921 a 19088 32921 a
tx@Dict begin  PutEnd  end
 19088
32921 a 19088 32921 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 19088 32921 a 19088 32921 a
tx@Dict begin  { 0.0 0.0 pop 160.20905 131.00609 exch pop } PutCoor
PutBegin  end
 19088
32921 a 19088 32921 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 19088 32921 a 18745 33078 a Fl(y)19088
32921 y
tx@Dict begin  PutEnd  end
 19088 32921 a 19088 32921 a
tx@Dict begin  PutEnd  end
 19088 32921 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.2 0.8  setrgbcolor  [ 56.90549 -1138.10974
422.62674 -1142.67183 404.0445 436.82228 56.90549 425.76003  /Lineto
/lineto load def 0  setlinejoin false NArray n 2 eq { 0 0 /n 3 def
} if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed } if n 2
mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1 def x1
y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto /n
n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub x12
x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11 sub
Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos add
def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add y11
Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0 0.2
0.8  setrgbcolor  0.5 .setopacityalpha  fill  grestore gsave 0.0 SLW
0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinecap [  4.0
 4.0 ] 1 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90549 131.00609 56.90549
-130.23242   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0
 setlinecap [  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
19088 32921 a
tx@Dict begin  { 49.6677 107.99547 } PutCoor PutBegin  end
 19088 32921 a 0 0.2 0.8 TeXcolorrgb -172
x Fb(g)p 0 TeXcolorgray 19088 32921 a
tx@Dict begin  PutEnd  end
 19088 32921 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 404.0445
436.82228   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 19088 32921 a
tx@Dict begin  { 254.0563 125.59175 } PutCoor PutBegin  end
 19088 32921 a
0 0 1 TeXcolorrgb Fb(E)p 0 TeXcolorgray 19088 32921 a
tx@Dict begin  PutEnd  end

19088 32921 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 422.62674
-1142.67183   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
19088 32921 a
tx@Dict begin  { 231.94829 -146.475 } PutCoor PutBegin  end
 19088 32921 a 0 0 1 TeXcolorrgb Fb(F)p
0 TeXcolorgray 19088 32921 a
tx@Dict begin  PutEnd  end
 19088 32921 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.49019 0.49019 1  setrgbcolor
 [ 56.90549 -1138.10974   false NArray  /DS 3.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial 19088 32921 a
tx@Dict begin  { 175.09837 -150.08456 } PutCoor PutBegin  end
 19088 32921 a
0.49019 0.49019 1 TeXcolorrgb Fb(G)p 0 TeXcolorgray 19088
32921 a
tx@Dict begin  PutEnd  end
 19088 32921 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.49019 0.49019 1  setrgbcolor
 [ 56.90549 425.76003   false NArray  /DS 3.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
19088 32921 a
tx@Dict begin  { 181.86597 125.59175 } PutCoor PutBegin  end
 19088 32921 a 0.49019 0.49019 1 TeXcolorrgb
Fb(H)p 0 TeXcolorgray 19088 32921 a
tx@Dict begin  PutEnd  end
 19088 32921 a 36822
47337 a
currentpoint initclip moveto
 36822 47337 a 3391 47337 a
 currentpoint currentpoint translate 1 0.42621 div 1 0.42621 div scale
neg exch neg exch translate
 3391 47337 a 18304
48282 45 14215 v 0.9 TeXcolorgray 18348 48282 4478 14215
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20144 41632 a Fl(E)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 22826
48282 45 14215 v 2683 48326 15666 45 v 18348 48326 4523
45 v 2683 60172 45 11846 v 3391 59227 a
 currentpoint currentpoint translate 0.43594 0.43594 scale neg exch
neg exch translate
 3391 59227 a
4258 59227 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 287.4306 a add def
/d 0.0 a add neg def /h 206.31493 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4258 59227 a 20695 48497 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 138.94547 0.0 -148.48514 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 109.38432 0.0 -96.9306   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 138.94547  0 -148.48514  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -148.48514
 138.94547  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.9306  def /maxTickline 109.38432  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 109.38432
0.0 -96.9306   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.94547
0.0 -148.48514 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 109.38432  0 -96.9306  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.9306
 109.38432  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-148.48514  def /maxTickline 138.94547  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 109.38432
0.0 -96.9306   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 138.94547
0.0 -148.48514 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
19450 45633 a Fd(1)19450 42484 y(2)19450 39334 y(3)18718
51886 y Fc(\000)p Fd(1)18718 55036 y Fc(\000)p Fd(2)18718
58185 y Fc(\000)p Fd(3)23610 49843 y(1)2679 b(2)h(3)f(4)-16584
b Fc(\000)p Fd(1)-4351 b Fc(\000)p Fd(2)f Fc(\000)p Fd(3)h
Fc(\000)p Fd(4)f Fc(\000)p Fd(5)20695 48497 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20695 48497
a 20695 48497 a
tx@Dict begin  { 138.94547 109.38432 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20695 48497 a 20695 48497 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20695 48497
a 20352 48783 a Fl(x)20695 48497 y
tx@Dict begin  PutEnd  end
 20695 48497 a 20695
48497 a
tx@Dict begin  PutEnd  end
 20695 48497 a 20695 48497 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20695 48497 a 20695
48497 a
tx@Dict begin  { 0.0 0.0 pop 138.94547 109.38432 exch pop } PutCoor
PutBegin  end
 20695 48497 a 20695 48497 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 20695 48497 a 20352
48654 a Fl(y)20695 48497 y
tx@Dict begin  PutEnd  end
 20695 48497 a 20695 48497
a
tx@Dict begin  PutEnd  end
 20695 48497 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.2 0.8  setrgbcolor  [ 1111.84557
798.136 417.77766 -1147.08023 -995.47438 -611.13354 -452.02377 -244.4437
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0 0.2
0.8  setrgbcolor  0.5 .setopacityalpha  fill  grestore gsave 0.0 SLW
0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinecap [  4.0
 4.0 ] 1 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -5.21865801166 def
/x1 4.88337028588 def /dx x1 x sub 49 div def /F@pstplot ((--2.--0.666666666667*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  4.0  4.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 20695 48497 a
tx@Dict begin  { 49.45409 98.80399 } PutCoor PutBegin  end

20695 48497 a 0 0.2 0.8 TeXcolorrgb -172 x Fb(g)p 0 TeXcolorgray
20695 48497 a
tx@Dict begin  PutEnd  end
 20695 48497 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ -995.47438
-611.13354   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial 20695 48497 a
tx@Dict begin  { -146.7216 -41.82512 } PutCoor PutBegin  end
 20695 48497 a 0 0 1 TeXcolorrgb
Fb(E)p 0 TeXcolorgray 20695 48497 a
tx@Dict begin  PutEnd  end
 20695 48497 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ 417.77766
-1147.08023   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20695 48497 a
tx@Dict begin  { 76.78629 -164.82063 } PutCoor PutBegin  end
 20695 48497 a
0 0 1 TeXcolorrgb Fb(F)p 0 TeXcolorgray 20695 48497 a
tx@Dict begin  PutEnd  end

20695 48497 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.49019 0.49019 1  setrgbcolor
 [ 1111.84557 798.136   false NArray  /DS 3.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
20695 48497 a
tx@Dict begin  { 153.49312 -165.2613 } PutCoor PutBegin  end
 20695 48497 a 0.49019 0.49019 1 TeXcolorrgb
Fb(G)p 0 TeXcolorgray 20695 48497 a
tx@Dict begin  PutEnd  end
 20695 48497 a 36076
59227 a
currentpoint initclip moveto
 36076 59227 a 3391 59227 a
 currentpoint currentpoint translate 1 0.43594 div 1 0.43594 div scale
neg exch neg exch translate
 3391 59227 a 18304
60172 45 11846 v 0.9 TeXcolorgray 18348 60172 4478 11846
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20163 54707 a Fl(F)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 22826
60172 45 11846 v 2683 60216 15666 45 v 18348 60216 4523
45 v 2683 75380 45 15164 v 3391 74435 a
 currentpoint currentpoint translate 0.46944 0.46944 scale neg exch
neg exch translate
 3391 74435 a
4258 74435 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 266.36327 a add def
/d 0.0 a add neg def /h 255.4469 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 4258 74435 a 18507 59924 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 137.64734 0.0 -128.71593 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.25  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 124.35484 0.0 -131.09206   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.25  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 137.64734  0 -128.71593  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -128.71593
 137.64734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-131.09206  def /maxTickline 124.35484  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.35484
0.0 -131.09206   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.64734
0.0 -128.71593 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 124.35484  0 -131.09206  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -131.09206
 124.35484  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.71593  def /maxTickline 137.64734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 124.35484
0.0 -131.09206   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 137.64734
0.0 -128.71593 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
17262 57060 a Fd(1)17261 53910 y(2)17261 50761 y(3)17261
47611 y(4)16530 63313 y Fc(\000)p Fd(1)16530 66463 y
Fc(\000)p Fd(2)16530 69612 y Fc(\000)p Fd(3)16530 72762
y Fc(\000)p Fd(4)21421 61270 y(1)2680 b(2)f(3)h(4)-16584
b Fc(\000)p Fd(1)-4352 b Fc(\000)p Fd(2)h Fc(\000)p Fd(3)f
Fc(\000)p Fd(4)18507 59924 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18507 59924 a 18507 59924
a
tx@Dict begin  { 137.64734 124.35484 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 18507 59924 a 18507 59924 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18507 59924 a 18164 60210
a Fl(x)18507 59924 y
tx@Dict begin  PutEnd  end
 18507 59924 a 18507 59924 a
tx@Dict begin  PutEnd  end
 18507
59924 a 18507 59924 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18507 59924 a 18507 59924 a
tx@Dict begin  { 0.0 0.0 pop 137.64734 124.35484 exch pop } PutCoor
PutBegin  end
 18507
59924 a 18507 59924 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 18507 59924 a 18164 60081 a Fl(y)18507
59924 y
tx@Dict begin  PutEnd  end
 18507 59924 a 18507 59924 a
tx@Dict begin  PutEnd  end
 18507 59924 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.0 SLW 0 0.2 0.8  setrgbcolor  [ 1138.10974
1707.16461 418.69678 -1172.23427 -994.55527 -636.28758 -425.76003 -638.63983
 /Lineto /lineto load def 0  setlinejoin false NArray n 2 eq { 0 0
/n 3 def } if n 3 lt { n { pop pop } repeat }{ n 3 gt { CheckClosed
} if n 2 mul -2 roll /y0 ED /x0 ED /y1 ED /x1 ED /xx1 x1 def /yy1 y1
def x1 y1 /x1 x0 x1 add 2 div def /y1 y0 y1 add 2 div def x1 y1 moveto
/n n 2 sub def /drawArrows { x11 y11 0.5  1 gt { /Alpha y12 y11 sub
x12 x11 sub atan def /ArrowPos 0.  def /Length x12 x11 sub y12 y11
sub Pyth def /dArrowPos 0.5  abs def { /ArrowPos ArrowPos dArrowPos
add def ArrowPos Length gt { exit } if x11 Alpha cos ArrowPos mul add
y11 Alpha sin ArrowPos mul add currentdict /ArrowInside known { ArrowInside
} if pop pop } loop }{ /ArrowPos 0.  def /dArrowPos 1.  1 gt {1.0 1.
 1.0 add div }{ 0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos
add def x12 x11 sub ArrowPos mul x11 add y12 y11 sub ArrowPos mul y11
add currentdict /ArrowInside known { ArrowInside } if pop pop } repeat
} ifelse pop pop Lineto } def n { 4 copy /y11 ED /x11 ED /y12 ED /x12
ED drawArrows } repeat x1 y1 x0 y0 6 4 roll 2 copy /y11 ED /x11 ED
/y12 y0 def /x12 x0 def drawArrows /y11 y0 def /x11 x0 def /y12 yy1
def /x12 xx1 def drawArrows pop pop closepath } ifelse   gsave 0 0.2
0.8  setrgbcolor  0.5 .setopacityalpha  fill  grestore gsave 0.0 SLW
0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinecap [  5.0
 5.0 ] 1 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.4 SLW 0 0.2 0.8  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.52385029895 def
/x1 4.83775654374 def /dx x1 x sub 49 div def /F@pstplot ((-0.--1.5*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.4 SLW 0 0.2 0.8  setrgbcolor  1. .setopacityalpha   0  setlinecap
[  5.0  5.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
18507 59924 a
tx@Dict begin  { 57.95657 105.7969 } PutCoor PutBegin  end
 18507 59924 a 0 0.2 0.8 TeXcolorrgb -172
x Fb(g)p 0 TeXcolorgray 18507 59924 a
tx@Dict begin  PutEnd  end
 18507 59924 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ -994.55527
-636.28758   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 18507 59924 a
tx@Dict begin  { 150.20135 -215.14955 } PutCoor PutBegin  end
 18507 59924 a
0 0 1 TeXcolorrgb Fb(F)p 0 TeXcolorgray 18507 59924 a
tx@Dict begin  PutEnd  end

18507 59924 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.49019 0.49019 1  setrgbcolor
 [ 1138.10974 1707.16461   false NArray  /DS 3.0 0. CLW mul add 2 div
def /PSTricksDotFont 0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto
gsave 1.  1.  scale (b) show grestore } bind def   1. .setopacityalpha
 newpath n { transform floor .5 add exch floor .5 add exch itransform
Dot } repeat  end
 
@endspecial
18507 59924 a
tx@Dict begin  { 245.17523 -215.69528 } PutCoor PutBegin  end
 18507 59924 a 0.49019 0.49019 1 TeXcolorrgb
Fb(G)p 0 TeXcolorgray 18507 59924 a
tx@Dict begin  PutEnd  end
 18507 59924 a 33744
74435 a
currentpoint initclip moveto
 33744 74435 a 3391 74435 a
 currentpoint currentpoint translate 1 0.46944 div 1 0.46944 div scale
neg exch neg exch translate
 3391 74435 a 18304
75380 45 15164 v 0.9 TeXcolorgray 18348 75380 4478 15164
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20126 68256 a Fl(B)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 22826
75380 45 15164 v 2683 75425 15666 45 v 18348 75425 4523
45 v 0 TeXcolorgray 0 TeXcolorgray 24451 21447 4567 45
v 29018 21447 8118 45 v 24451 24707 45 3260 v 0.92 TeXcolorgray
24496 24707 4478 3260 v 0 TeXcolorgray 26223 23629 a(A)p
28973 24707 45 3260 v 29682 23461 a Fk(y)417 b(>)368
b Fj(2)p 37091 24707 V 24451 24751 4567 45 v 29018 24751
8118 45 v 24451 28010 45 3260 v 0.92 TeXcolorgray 24496
28010 4478 3260 v 0 TeXcolorgray 26274 26932 a Fl(B)p
28973 28010 45 3260 v 29682 26764 a Fj(2)p Fk(y)343 b
Fi(\000)296 b Fj(3)p Fk(x)369 b(<)g Fj(0)p 37091 28010
V 24451 28054 4567 45 v 29018 28054 8118 45 v 24451 31314
45 3260 v 0.92 TeXcolorgray 24496 31314 4478 3260 v 0
TeXcolorgray 26265 30235 a Fl(C)p 28973 31314 45 3260
v 29682 30071 a Fj(3)p Fk(x)296 b Fj(+)e(2)p Fk(y)418
b Fi(\025)369 b Fj(4)p 37091 31314 V 24451 31358 4567
45 v 29018 31358 8118 45 v 24451 34803 45 3445 v 0.92
TeXcolorgray 24496 34803 4478 3445 v 0 TeXcolorgray 26238
33539 a Fl(D)p 28973 34803 45 3445 v 29682 33400 a Fk(y)417
b Fi(\024)32268 32877 y Fd(2)p 32268 33090 471 45 v 32268
33858 a(3)32871 33400 y Fk(x)295 b Fj(+)g(2)p 37091 34803
45 3445 v 24451 34847 4567 45 v 29018 34847 8118 45 v
24451 38106 45 3260 v 0.92 TeXcolorgray 24496 38106 4478
3260 v 0 TeXcolorgray 26292 37028 a Fl(E)p 28973 38106
45 3260 v 29682 36971 a Fk(x)369 b(>)g Fj(2)p 37091 38106
V 24451 38150 4567 45 v 29018 38150 8118 45 v 24451 41410
45 3260 v 0.92 TeXcolorgray 24496 41410 4478 3260 v 0
TeXcolorgray 26310 40331 a Fl(F)p 28973 41410 45 3260
v 29682 40163 a Fj(3)p Fk(y)343 b Fi(\000)296 b Fj(2)p
Fk(x)369 b(<)g Fj(6)p 37091 41410 V 24451 41454 4567
45 v 29018 41454 8118 45 v 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 47990 6792 a Ff(A)-31 b(G)369 b(2.4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24746 81281 a Fl(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fm(A)-60
b(G)718 b(2.4)f(-)h(5)f(Lo)60 b(esungen)715 b(v)-60 b(on)717
b(Ungleic)-60 b(h)g(ungen)715 b(-)i(O)-60 b(A)718 b(-)g(BIFIE)p
0 TeXcolorgray -741 10102 a Fl(5.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(lineare)h(Ungleic)-36
b(h)g(ung)433 b Fj(2)p Fk(x)296 b Fi(\000)f Fj(6)p Fk(y)418
b Fi(\024)369 b(\000)p Fj(3)p Fl(.)921 14639 y(Berec)-36
b(hne,)535 b(f\374r)g(w)-36 b(elc)g(he)535 b(reellen)h(Zahlen)f
Fk(a)541 b Fi(2)h Fa(R)535 b Fl(das)h(Zahlenpaar)f Fj(\(18;)221
b Fk(a)p Fj(\))536 b Fl(L\366sung)f(der)921 16631 y(Ungleic)-36
b(h)g(ung)433 b(ist!)p 1 0 0 TeXcolorrgb 14081 22817
a Fj(2)295 b Fi(\001)h Fj(18)f Fi(\000)h Fj(6)p Fk(a)369
b Fi(\024)g(\000)p Fj(3)17582 25141 y Fi(\000)p Fj(6)p
Fk(a)g Fi(\024)g(\000)p Fj(39)19265 27465 y Fk(a)g Fi(\025)g
Fj(6)p Fk(;)p Fj(5)2602 b Fk(a)369 b Fi(2)g Fj([)8 b(6)p
Fk(;)p Fj(5;)221 b Fi(1)p Fj(\))769 31659 y(\(18;)g Fk(a)p
Fj(\))434 b Fl(ist)g(eine)f(L\366sung,)h(w)-36 b(enn)433
b Fk(a)g Fl(gr\366\377er)i(o)36 b(der)433 b(gleic)-36
b(h)434 b(6,5)h(ist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 10102 a Fg(___/1)p 1 0 0 TeXcolorrgb
47990 12094 a Ff(A)-31 b(G)369 b(2.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 35466 V 0 TeXcolorgray
24746 81281 a Fl(5)p 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

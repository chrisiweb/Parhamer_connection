%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 1.3/AN 1.3 Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 07:36:51 2017
%%Pages: 10
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMRoman8-Regular wasy10 LMMathSymbols10-Regular LMRoman10-Regular
%%+ LMMathItalic8-Regular LMMathSymbols8-Regular MSBM10 LMRoman6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 1.3/AN 1.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0836
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A110651C32F7372F56D5E845643350BBF6D0A6EAAC
D2586F3D71442DBEB5B1B049B691CF910A78299B8A9C0B39ED96503D55AF7610
48D41BF8E781511338BAF3A2E79B98DB9E6748C1FE829C1E574F41ED7A56E8DA
4EA2023CFC69FBCDEA39CB00C8BC5AC4B184E13F3ABA4A18487B10878E9D800F
8064BC68223CA5F86E7A9AB9BAC72FFF9546B6BB94F4426E5D273581A6D28444
44D82093FB03482F71774ADEB638DB46DCCB0C6BD2192A98CC4896B52E643BDD
07F61D79F78746C5238C5504416B1E2F271280ABB91D54CC819680322EAB72E1
250A760531BD7F2AA1DE45FC978490BB69153DA6D6161F7AFD7BEC1ABD547CBD
B6BCC20BBBB289486F6C7E238C2A7AE02B2539F6DACD88AD99A2B686FBEC34A6
F9EE29616642225A5AD8C4FBEB07FE262D75AA093A73E9E0B89695B5862C96EA
1243561331C2D9EE7B65B8214E519D57A88C79B55D644CAB29554F2E31FD6843
FF7B259AD5538BD0836F18ED0DE7F01D9BD148F8279585467B15C17D2D0C33C8
24A507CB2FB6E384BA8BAC55FAF929178B7AACAE1D371228606B58787EBCCA93
4E4F469709A6476CBF11C97862C34607A7DC2871810B501018824C0E0CFD58F9
7A957FF98D5BDA3E3E034C52405A6C2908EBEBE3E29F7C6A759857EEF72F2EC4
3A8642C108D34C4CED6F7DBE80F25D75116BBDA7CB4BBB73A61F7C685A3A9A51
8734F9E4D7E801AC7DE2E73CC759AC64F3CB8EBF8B5EB56F41B247F3F19315EF
7C24C48C184E2BC4350D72B6956D0C2F54961B34FFB476B8B54F5F249AD4F434
87F61D3712FACEC07D010DD43EF4D36C3C6BFC310B412ABDC95F0615C5BC5180
C92F0640CE6A8AF3AE7EB181C2E4C11086C530DF109AB7631B321258281DAADA
221C4D03BAA1CB2A3368AB891AA0006AFDE458F28C88624B7CD1FEC6CB09AFE1
5B7C4C75C0C00F4549D250A8D8D0B82FBBF52438CCC1953B78E7D9D431A1B5A0
4A73AF4A83C1332449D33F89196645962942DEBDD82A0C4A86F0317F943CAF80
38C03C57418377255201AE91F48B7FC6E0BEA32C7762AC27D37041D63165EB3B
E7A22843BBBC2A76EEB0E1C3F1A5DED8CBC163A406C10DEEF8375D51CA265048
A748D61C4B7C040606D6661334764F75102442574818D8E2E330E2FE5102B7F4
DF3E4FF29268D62FDDDC616ADC7E9F13E6B8A5628C9C333261C279378974A281
B8F074456303CAE324705BE0751EA813402C3D640582C972655ECB16686869E6
DA64131BED44D2F499C69EA518C750370797B96D672132C82296E416D4F3B55B
FBF76FD52217FB7A494737C74DC1BEAE9A4370CBCC6A3B60E897A2A10ACC9590
B7D182BB0BCBDA4B8FD30EBFD8E947926A7AD4A39C3E3BCC457B16FD9FA2606C
C3C0740F437DF5F1B361E2AB0102CED6B56AB56737158CF03B694FC508079D3A
31ACCEAF23100219B1CF3A1F09D967E429545A65BB9BCC05055A705CC4D79163
209A2105EAC6577EA6EB40D70A6D3A73572D79A8CBE198C9F63FFD1470AEB473
2DA147B30FA99C4C8C7BD336D401F5DBFDE3DB313266068F252FBF712D4F6AA9
CA51714523FC48BFBA1E33E36A67FD71C4DCEDF3CFB6AA5BAFC7DCCAEAA40FAA
E6D4925126349DE06E101868BED82BB51E91185394F31E2C049463AE81F753E2
F863AAF5E286731902E47CC79D75EC3262338CD13F13C659D762DB6199452CC0
3F88EA12757D52C10FF38B44A09610AFDCC3E9E0EA6D89BB91F93DEA53A676EB
142FADDFD883DC4F0C38023BDA6569691729EA004A3D96F0FBB300F4030B6606
13071727F3BA34DD98CFE4972844FBA68280761E4D48476D645F86023FE852EB
25C98058B68C3F7DE5C9E739BEFBDA9EC9C8F800F862999D20CD6BB97FA50A40
B29FC17AA00DB566B2EC94DE5934CE2EF61401B1AC09C515B31676917D11D6AA
C4F958DB61B11DAC0032A4A9BD935683E85A26C1F42BEEAD417F837272445BF8
5B73660BC2B57C89B3CFF6C85E86E42A9550DA129DC0FDC4BE50D5A5CD8DAB41
09CD47BC05EC9E0CBF809328C5737D7917AABD0AD9A87F485E0843606F7BF8F2
C0F92CCA49C489AC56BB4FAEB441E713B499545814BC2B3B2ED508A5547C4B8B
182CBE2ABB754E07D88DD634787FE1DF52B38F3EED60778915269E71DB74E889
71C070FBAE2C25A7104589EF38806E811726E41351E349B6167CA5058EE84D12
58EFC050B428623FD1E621555BBCA26C986ACA69714EE285E4183ECA0F278461
1B128DDFD3B8061FEAB76A85459C6339FB76BD776FFBE44A0D870B50D5C08E42
C27D4F909B92A16E8AE2275E83777297529C5ED2573FDF8BD7D6DAC8936854A0
E9B5873E0C43A98002905B1F09DFBD253E4F8EBA8FA68830E6BD9979FD51C835
5A7EC5C1747D467FB498E88120CCCAF6A701DAC4FE774492035D2304EC4F9083
716CA7906B80486BB5C79930F2D085E30DEBE15A07B6A046946D1BAEC088EEF1
31BE9C77E57EFDAB7374603762EAAA72B0B40EAF746A43B2DA7552C98FEA1ADB
BB93C025B00E2203899B2C287724BBB8E65FE1141502C1218C55773CA3C6DAB9
681EA8787E7960CFCAF502B7A3066310BE7A115570201F827CF41845BE0BF8AF
AE8348F559D6AD28E96669BF76C5EE35D36E883E3362E8151A38AD6FA6AEADF5
82AD81A19F11688A44032481C0698FF9E0E60C0930F7AEC84C4D7EE11BFC90EA
C5CF755173A99C3D0BF412FD30352B46B6FB6D0B977BF34FB3EA2C40A1ADAA19
182C7E3FE4F4251B1887A2C605FE1895D3045D915E59246A382A2EF44013126E
974503017108146FCA11C477865B61FF0136346A52E994D5242B0EDBF68D120B
D216209890529FBB3D24651664E84B70E52B35750A4D746C647119A3C81D1CE9
54F4F359CEE99946657FE87EFB947F6EF31DCC61CDDFC39A27718813E2CDEE9B
EE0507016F7651418558D452E73137413161CDD6645A9C7DB42FDD905FF9EE5F
A98B2F04DD744B336C400DCE97D3384AFA5C0BCEF133DD294C2AA330081B6EA8
216653BA182F7FB05BFD80CDF441BB594FE01CF3180D3C3C1F0B13A98CC0339E
144825766BC7D4CA384FCD2E9256B4C11C354D3ADB93059FC37FDDAD6C78C8A7
FD6219FC44CD0E30CF5FE94C5F95054EB0CAB8CB0BFB75B710119768A161F8C2
76614552655D1037F82FE0218C4D4CD7BEBA74BED51AFB08EB16469390FB9807
1BFB9020766AFFE943870234F365EB6EF863A8103CA6089A8A29528E45C47F09
C56AD5389C3EE8DFE85E6127D09DBF020D89506CD1270C0B3EA235BDEFE3E247
B0C655D9FF7B893CC31F7949ADAFA7FD22C8F9537DE472B6C31FC9AABE7ECAA5
701B0D2575AF8A8596254E937C142B0AC9512BCF447499C2005348B848036DC6
131C1F05FE139D653820FB3EEA998267FB51CF42EEAD7BB3CF28571C437ACDBC
56D765E2C7F61226CFC5613463DCE571BF49F20E7ADF22AE9612796DEB913805
9A4C12D608FD1228018A6DF526D5C66A9F11AEC07A100C7CCF020413C69C51E8
D0541100E3DF71D501F4BFA0AE8260E23761F29F3EF6B7AAFFB00FD028B380A7
31A931CCA7A1CD78F9CEFB9B43D1AB67E0C1B90B74C62FF8FD0FCC210E26E80E
A2C146A040FB4729A47526A644743B53CF0CD6CE4EEBB414C741759F68C2C929
2B509FC3F79A0124BA95F9FBAEAAC3B3A5CC1C9744253567A78303623728AA44
9365090D58BB4E0B099DA528E5BB6426A755DD97B90D0DF4AEC960EE3BCDED36
FEC31EAABE44B4E65AC2358864B4567F289298A69F79F6981B190F26774B50E0
D246A2676F9821158D56882769E3AF7B6C0F8F856AB15E34B7AFAD9FBEDC388D
8DDEEF29E5BA5830B9E88A403649AD203CBCAB5465F18682746D4C6A28F9D30C
71556F7C9822962D39A30A3D5D4331979C914CDACD8E52AB927C4F57377C6E95
AC3B74863596FA34250C38904577CB39ADAFC1AC17B04381C6754327FA7C65AE
AC1A2839AF94903A7EB7450AA2BCC638BCB6D2318C6E6FB8AABF70FC0CEC089B
5B2A64DC911A05B7D0FBD3BC15657FCC9D561808E50151C166892AA2415303D2
ABD61EAD6A46E042F2988E6A31D07C0EFBD835CD0C526CDF34968DEA783AAB27
AD15B45820BA2C8942FB131136588242112EA1F17FD3C2604EF52210F343C793
DEDEFB0A2B195538D4B0C6FF837473C372E70836D4C5747C4EEB85DCCE969D9A
7F061B9FA20CF2EFB32200703EF58C425B9A7D27CE0BA78897210D30DA8F7CD8
5D47409E582BDD2EB2D8D505FF764C914B4C11AEA7B23988D184F29AAC5C274F
5694862641C8ED8ADC2A7166E893618F4E1CE1CEF3D26E28BDA32D12B10ED201
A9F192758B996B3B8750FCA90CACA049EEF3CF6CF84697FEEEF16F2290BF3094
539F0406AF0030ED0D0769FFA19112C97076BFF950438DC37E9700A7BCA663C4
328967C977B430B63CE6CDFE50A651EC13D52174ED5C933E8C8525F88E6CE482
66186158BE0A5592691CD1E265DB2F523B702D4D0DBA35BE10A4F542DBD3E173
15E1E0A224FADE62569408F6ED842CA727BF331033E4F074D29DF85080F06956
1019E04A19756A102E1A32153D5C6216D9C9385A18202E78D9E7ABA944D21851
498AD5DFBBDFD2AD3A45C0FC93D273C16FDC07C095C8183E89A7FA85A0C12A52
763634899F898B819309587CAE703571A817E2A7D1FE8496B76E5248A3CC57AE
914AC32F028980AA50C18C5C8C44EE90A42542106F909E4F59803685F804B0C6
A98E5D37F963A15B1C0B736ACA11C477865B61FF0136346A52E994D5242B0ED3
7AEB62353B9A1D56DABD05371F9479BFA4CAEC5CBAAC32E2DFF165186D73C527
5BC9638D8A733D3E5905EB634982BBDBE878E238A3AD7D54A0F8D49FFBBEEA2A
08DE64815E836B7C7D1B6B6FE2F8CE38A96655B073C606ECCD8C3F2C5FF185A7
2F8B21D6486CD41A80EC051E875EAA89D64FA5F2126CCA7E93636A7CCA2158B9
9A15CD40585926E5ECB3811D95422BE5D90F0E736BB7657CF2A0A5233E11D3AA
E27591284292FB1BF22EA7654C2797659EB876A0CC35E0BD79F4A14F56FE1C18
E6232BC798A227D8F8F92AFC1924FF85BF0BD5547FBF0ACD890470AA5CB2E0D6
1ACEF149B0A7B73F2EE0136A9C23EF64210422CEE9C62889C3FB5D8D1371EDB8
5EFAE402433ED36B610862F00EE394976F0A2F4870DB0C0FCBEB6D1699049BDE
AE9A5B364AC04F853C9612C58189EBF3334336824F029CF3315CDAC8483406A1
AC1DF70188977249C809CC821BC0B7A2F8AAF27E7E115BE85D71C3003914643D
2327692E464DE4CD3E76C93397F7998AFD5A64D6903F2EF571F9A24136315988
08E0F91DBA758A23E515E9F18329599819EDBDA44E136B801A216AAE5168BF1D
DF74179AE8478DFF4DB502DBCCDBD61CA5B5E20E1CFC04C7B74A171F41A35364
E573321A926C7C3DE13338F52F2C91531C92ABA181B7CF0FF955A8DA29F11753
6ED7582733A6C86215121DCF5B0716611CCEFD11F5C5F00FCEA5EE9D46AA63FF
7D4278CC27249B1329305788A6AFBF6CAE00AA6B9DA46C51F1EFB3D014219FFB
966E070D8BE5B5CD57458FB78C6ECB6460A281A80F502523BC02292E16AA3B9C
A089F7320D1B9BA214E43E83C1FCBECD57341217FA2783DCEA90AC383E444674
6FC85E9B1D817C988AE526DA4338FB27A18C3E1F59CD6063225001812694472F
7AE07866B1F040B42849BB161F8C5058DA20F5AA785DC0E77188C18435A2E7FF
BA595F0C054E96CC44F56932D8FD589EC2438A167DD3799972464CE75AAB769D
CB32014BC32FD730F22927CBA09B8CD2167352E6BA2E96F35F1E67BC40979F9B
86E0222012DCA626F8A2147F672557FC3E08A242B2514C24CD74D2A6056E9B89
886CCCCBAE6F51A33757FD8DCEA2488E7B130462CAC1C61DDD7BD36BFA9D85C9
CB0414FA7B15EC02E8C08C8A4F789EA1A232F44B216B0A7C6B898EEEEA2EAE31
DBAA343678B35948BF6E9180221EDD0ACCA578928815D319AF73A7E10B5F523A
8B2E7812E325EA858A25C26ABBC4C25E327DFCCEAC871356DAF0CB205917DFD1
A8F1216EB4301EA62211CCB8909E9C8DEC28A6FA8042B461FB6C3A5425419977
1B7A614E53D6E49EAF8E8C75650D5793750C61F2D28FD6296AE76BEC4B0044AC
2984337F2EA913D381318ECB6383C6EBBFB2B61FE04B0B13B26BFA8A80D62E48
64239BF65B841617AD96D9D7F89ED64975DC69CF20F88E081FBADA15B871D8EE
AC0EAB134DD682DCBC9C187AD9788F635D7C1D238E43779FC2850256D81DD960
1364534E0C331CAAD340B7375427190D9ED5D06C044AC61F885A346AD0BCB540
FF5D3D13C722603FD1A9BAB8481D5ED4B852061899B5682BD0A153C50E9529CC
B01112EE116B684BA5B21D162765BF1FDA0BC109AB896DE24B0A0D57D9F4CFDC
4C1FFEF87FD2B0CA2E1A287BED88AF473AECEE97ABE431A8D1B05BCBE69CF10E
B696F21934226B6174010EE3696D11291F2E3F06359FB2DF0AD948D5F373AAE4
A4752F9BDE24042B95B58726FCFA82AF11ABD26D2D81FB0531381F8800FC7ABC
5436137CB6ECF73403915F269B7B231F5D9B1F61DF7CB03421C5F46040744911
2BDFD986A3F7EE975F79735FBDBB333D136FD72B54BDA112352814FB6FAB9134
72DAB4547A50C2C293458B1D854EB79608E52F06734E2CE9B3962B4FBFB2CED0
CD7D1C12433ED9CE0AF54C73172253EFC739D7552C51C4BBEB0896586854605D
658D8C7681595D0492047E97CECDC3FAB63FC92DE5F64B6FA36C08DA3B7FC06C
7D40B03E7F03EF36CE0390DB45EA1F0B6AA0630DCBC43B1E3BE9B7BA5722421E
932D83657C904434F3CD7B4C5C7CDE111CDFEA91C7326AC7FFC2A65A633FD028
806459C9CE8EE40DBFB9338561B425E7FB8A486E8BBD8925F744645C55EE47DE
4AA52ABD988594A7EC882C32556517E396269C90FFA27C5A51513DF558A8B499
C7B6158DA671139A282357F5CFD4CEE0BB8C7C8ED352E0A1E6DF242BC75F285A
7C4D903A367CDCB74C56BF8356F94810910AB18CEE5DD843B5FE4096F520222A
20FE01B307960B1F1030F6CC9B504E1FFFCCA352431A0D5BFCFCFAD30F97D9F6
2493B0CB7FEAFC9BAF90B7025D2E35ECC22A152A63EC110EF4B8FFD3E82A1F2D
18F3F163F77EF399A73A1B5FED7935DEC964AEDB4721F177FC89A5AB13A06261
BD660253A72E63479DBFE0FB8041A873898332B8C24FA875D3E200A018C78BE2
E930457BC33AD2FE3614781E71AB4D0073D71DC38239BC688D3F5F61CB43AE2A
53FADAA5926EA5679791D474BC0B7939D43C0AA387BDC9184255A3335FD10380
3857B8046544BF2723FF4B4331E2BC38EE8787EFC7FAF8A4D10DF88C738EBDF0
4155D92D9EC67D91F7299AAC56823CD4BE926D0EE4E8CD015DD85E4004694D39
E05F5E2AEE30F76D51A3CF5FD0316410BAC452BD8BB544B57ACF2F9FE83E3E68
109B182044F27CA200B432D886A12EF6332152F0E30D38E2B0F2F1E30D973B04
68FD4F84E83950B76B1A05B4DC730087F385C524B689F96E3FEA51EF125D16E9
073543865055A37AFD20C49BF08EF65CBC703EF6ADD2DB56EAA02A6C8649E61D
7F5B5320DB4E6C7F70B76CB486438D247D0100689A73A26C5E0137C208DCF1A7
143359F8EE27AB1E0B8333DD55B109F616080F5BF29107A418F686DD27656D1E
EBDFFF78EBD97F40F1B3C7C78221B0081DCEE066E353DCCC2B78551535EE5DA5
2B7AF5030F8AE1482313610CBFB4CADB3DB95CE2C74DB09F6C18D083A389BF57
68AD942959FF0302B3225CC885CFFC8807635C4262456DD0C12D6542D9EBA6F1
12F55563444FC3D79F4B3A2E9432F8E1948F77146199CC80880EA23BF76211CD
865BF221AF4EC556835774B08B04CBF20D471B7C228958EF19C9A18ED7B135C3
300D4E6C8B686A49D427CCD0DA4E7B07C8D2140B854F2E7C3CCABAAE3D2A8083
7BF7F8C88D26D37C4A69365579571DE66F500A75420DCB24BFEBE3ADB38A6CA5
8290D557AFA6B2F76D3C2C0D7C2FEF36D9A72D75E95EC194042007DB1738809D
C388263F3562D6BAB6320CB7B552FFB89F11EA22D02AE6333848C966B1B1E30D
A2B09FB2012717AC3CCA0F72FD3DD6E6E24621FEC52CE047DAB64EBA1EEF23FD
D6D15A5E4B14C74D3856E17C875B7531CD1BC116AC4F21FDF43764C2E9BBC3FD
8F6C02E213E218294D1063180597B8C427C9B17202A03F53B88544455AA87281
0C7948B1EC866883E78C9C909A89DB039C9E9960E315CC0D5A741134B101D1B9
61CCDDA1D8C89CF7B69B3CAC447A2D2CBE22433B7494A12D6898FB52E8D60EB8
F100DC970A6F6FF1EC5403388B6EF347797DF580DA0E0A4F13FBF20B25DFF786
1AC70BF7F778DA38E54F972D6A17B932EFECCDDE3DE2B3521F190FD862092C5D
24CE3B8037AC8FDD3EA687834689DE2FE4B7759C944FF72ECE869A601FD89830
4C6EAEF3D52B31B6CBA3D9E7EA775BBA2EC97CC91D926CC76EB3300E9B6FA5B8
477E9788C5245492BAF032951F69E716001DE419883FF01BB562BF7A8CD1C6CD
40BBB35A5685BF03CA5AA04FEDEFDF24B58001909B7B03761FF2070A0FA2CEAF
23100219B1CF3A1F09D967E429545A65BB9DA9111A6D08A31D0797C7D0DF1D6D
88ADC4FF697C5CC0F670731EC605C2C85F79D5C6DD740FA2EAE0C2119F4AEDB9
BD5451F2BAC4AF89052666E690F8ACD132C6B29910190FD862092C5D24CE3B80
37AC8FDD3EA687834689D1ABC946C2E4E79D4F3AAE440A1F525EEC2713C0767B
327F5AE99A990B727C6C7020F14175225EFEA39202B10588CB9B4E44FEFEEDCE
7B6160978ED7FF4A5199B53C9F904FB174E3C63454AFB214A8944B2299D75F55
E0414E65AD6A19F8F0894C659A61F005C6FCE1A0E970036566CBD52B4A8B1AA2
57C2DEB9689E200925D85FA23439452A82E6421B44C297B1935A3A5DE94E8681
FC6842809C1CD755943368A9554B60AA09E892F91A4B3291F21C9C651669E0D2
71F30024C0488C71FB30791F330A89ADF521505BF7D84597813143C60D3D1A51
5D52CB8732BA9FB066CFFD1C50E9BCD1885D95B60048D2EFAC8D2CC435BC0F25
C44B4AE7D581455520DA75F0AA2AD71C12CA16B7AA13D89CEE02664EA934E077
7BD01EEC83BB5674DE327954754A34A9A04FE68A437B8306B8463247F1E54DFF
D17B997EFF71C0B00B951A7570A341DBF602CED898087B72FD370FCBF53C18F7
6B79AB072E704173D21582B641515FE91E1433A56A4B1C717A38CF9C88CB71E3
781E9DD1EFDE5652E31772561D5A448F9B520EA55BFA4FC1C8FA49F5377E1680
6EDACCB60F0D8085FA97FE6D2E960552337321D82B49DE32AE60EB35A8EB1742
21DE36BBA0146AB08A3DFE98951927F9C3A83202250796C33F156EAB4EE9BB26
12B1FD223DC6C8A48B36B81681FCADD2C6095F052CEC01B7D399D097BACCF6C9
E10E5C114D067892630923CD601E96E722DB1BE432987A61FC0FC6820AA22F96
7BCB97046EA3C4A9A3A97D7C031F9E8AA24C0A18B40E952E098614C2DB3FA57D
400530CA6FA97ECC263187BFD652DC36561D27A9335BBCA18349AEF42BB9A57F
831F6379060E3650CDB2C87FA552F5999A1B5575D6CAFCB00B7BEF6E47AC23B9
20F7B535193DB8FCC1FB0DA6E544394563D24D8C87FE0F2722FBAC78768C4A89
FB6E27C2FB99B97F2312B6455CB547B771F0F0E66A2A9A030A92CEC7F3F1B26F
F6E2D1797C38DF3097789861DA2382708D050BC6A2263B7F797BD4F9FD0EF0E4
68AE9691921512F7DE93337F31701157FF310056D421E594F949B0E4980653F0
1704F8963B8BF87DC9CA5CEDEBE5D0088AAD263602357ED1BE61FD58DFA0317F
A126A715D3C293274ED2C5CAD0C162EBF98632D63BC149DC1379327ACED1EA72
9FBBF3D9C2829B9FA5A211732448B8F3125AC8AB538565E06699AE5D68759A52
096B795F2DFD666A3ED9C1AECFBC3AD200383477D05545B04A54FEA1159BA81D
2F515C46229D50F7DB0820570898CE57EB2DC4F2D4F37A3B26398A1D5AD2F84F
0E1339008A3DFF0A65F140E43A7EA149580132082317DD4A19E976C084A28CCD
E5BBCAB3731366C3B74072044D3EF2EBC1CD905BDBE9C01C812B0C32F4F09AE5
4B9C67CDBCE3F58B2E4658532D7DA349A085E560FA3A13FFD612BE78D9014A90
8651C8C8391C12719AC3EB6A7652B3689830029B200A417E9CD3E5580A9B0D04
F36C41B2F672218763100EA3EE9ECDDE8DD5AB6A6510CF16E8CAA48D18DE6EE0
20AEF0B89AE754BF7F8203F0C857CFAE8A868BC658413CB9D65DFF018B979021
09935414D50E1375DC1FA058A26A17105A2469DC27876F4035544028390706CF
1ADBB96A74355655EB64342E5FB6E18F2149FCF4C0F743AA1A1A120843D3681F
9DCB79A8474270CE46F97DD10CF6C8941D49919570F2E5F06D721403053F2058
E88858EDEE096C4034B5A2C6FEA57D50A9ECF4529BF907C09445B3E47801F2A7
157FAA847DA5E22F00136F21273615D5288ABEBB427E01E60CCE30B0F2B691E3
A8C1DD510CAC176665F9F845E184CC0594188DC4771B8904EEEBCC26570D5C83
6D34EF4DEC34F23A4282E1448187B3AA4BB9002792269E14A11BA6A5BC7DECE2
0029034C88696775902DF6CDFAE2AB99ABA68FADE90898D7F48AED17DBE9CC3F
44BB85BC31F795942D5D77E3AD79EB3B6CF717E5CD434CE1C6B388B901F937A2
99F65C3217180D4BBDAAD2E96F91B4DBF12F6C352FA5F0492B73CCD90086FDAD
B941A35FC77F7364BB75AE2083C7C66E6C13CF17915C99F16A44ED8B88CB1B25
44153A1AA8D2DAAD95397883491CB46911D35870C88509B392E1B931F0E402CF
17A63993FEC0044612E8EB5CA65ED931CC5E0FE1F28D6565F3C195C8183E89A7
FA85A0C12A52763634899F898B83763908EC0A1C9AAD283809A935DE0356C702
F538EB0C2D835A9CD11BC6D7C87ADA05A734DEE08CB62CF82CFB0166F0F1C54F
38D882DDE8DEE28A07A9E0A42143E0FC979F53C42E821C769735FB865860424E
A7F5CD9AC21C7B10986B3D714BFD49F6DBF0306CED94DE945B5A67DDD8EC188F
7FDBE2A9AD81F7002A27F2EDE3459E49C27632009CFD9CFBB246A971A093D8E5
027D67A89EB217A0AD71E56421A3B1386C8878EBDFF132070DF8A4E24787A29C
5AC9DD10D3BB974C0C92B89BF728B6BD03C5A92A87A52243943EB3E77E6CC38D
EDBB2DB8BE7778936B71AE27A5FA67289DAAF80C0F5EA7D9E67929CF4142CD52
DC6214105CFC9E95B7334F9BB9C94C9D81ACD2DA6F0CD9653A11636472F5845A
F507C8EBA6518215D75034119AF139B07DA441ED1B5D45704665D5E85622B48B
EC700AF8F765FD970E1F82C2659A38F8F63251495D697C3E0E8E7CDEB23ECBA6
03CE654F0B4CB297E3AA3E9EF091E6F7D0D07D34102A25E12F04FC9F4B80562B
21C6D0B8BE94778C7E73746B4845C1ADD96ADA56EDD51EAE4683113F66F87650
90E7AAE59D8053AE0BA8DB3BCB2AC0442D6E7DA7789B74A83724CB18C0203180
8CECB597CFFE81423BC0B3D05BCF9C2F8EA64AC3C5F7CE2DD08FA2E5253C21BF
1C0C1DD432FB523701060720730E9F51B7626597A17CCED52E42690F9808BF40
C0FF302E4E863FE458E0DDE830AE5FF2FD1A26930E14FADD837552972E4375BC
3F6F857EF419616A0D2E3D646143431C318824FC3BC21E55EF5123584D5A3508
FE86CC6FD9A1DBD506B027308CF215ECA53E73C0C347A0C47DE886A1E1F78EE1
8F3B7924E56DE4D18CDC352314CAEBF065F610B00B529D079F2291FAA610FE8C
4CCD57A7A8C9F5071193E20C5358A7495DDE0FBC9B11349A03CB50C3C6E5F571
A5469121D122E16010687CCBA357EC5C1C77239733D652E40DC6F755919054DC
900685CE73A8D5738C2BC3A5CAAFD59260886FCA15CD098A1B0611374A7A0A02
E4EB602399853AA05DC6ECC02F16174606AB2770299A4EAE74166D0EC9965C87
B89B8C1DB7526B19F7F0C20B11FDB0F0656E7ECADAF295574EBED60685F10EAE
1ED416C4346753181147EB065D30A883FD14933F4B11CC112DE73301F7F888CB
67DF1D266655E2FF6B267ACD8E1FD4B60843C4A4DEB96E4C3F6F3D70BD587BE7
BAFA3EAC91AFD9FDD8AA23A57F745E383FF8BB6DC0C752C8AE387F1D4C15E4B3
D2C887A3C469F9DC2A96B15D33FE7C565961C2A7F1CD5D80B4B11525BD2B8C3F
6F760C8245A1AD9F508AF0EABE76207E935CF4233C2614BB02993C18F5228D99
AC686A7ADBD6EA7163DD1362A8CE7A17C1064CB861BFA9277E75B0A8C76AA6C9
98C9AD482CED7C243C9688305E326F5741E280311FB6537C611BA2451F461DD5
2B51651F15E9BE11CB03C9FDCFDE3700BDDAAED61CD52A7DBF4395E223ACFF1E
E359821663C771DF990F78D69355A8C1D072E20D0E000DBE4A0656BE7F021DB8
63F63DE07FBB104CAA97C01188ABA1F0AC094030E2F0216F900EEF6D6E69E994
902A4C425BA976EABF2B11775929B1296FF602F903C70BB29D852EFCF3751A5D
80A8849721E155F887EAF14699937EC5E60FFB3A13AC9FCE3CC664E6C09D19F7
D23F8A75F6D1464A7A8025262B1C95F281E0164473AE82AA9B11484D9D6F8B66
D150591E00FCA26EC8CFB1C926563979CAD433B91341797AC8D4E9842A26D6B3
3DE375C1AB93D839DC4F2D41639E03C463B9D53DF9D649C8017386EB0C9E4399
A7AFD8703D384864AF49F4EA3FE72CC66F826A3A692434D4D3BE6ED6DABA6016
F812E8D85184C463B9F9044091F80D435E1366EDBD597C5085B9AC04EDAE551C
BE68E84519D138C233FED4D6CD32DE3F8DDD32A240FD49AEE908C7972AB2A420
AA567E0BA6781213329980CFCFB18CF7CBE6C7FA3C27329FE9A10D03889EDCDD
324E112D5BEB28766C0B807B8FF1FB8B81D0B4103EBB92A3F801177BDE9BDD61
E288E9C68A020BB9427C07939EB5649DED6075ECFF58FBACC2E7AE26BB9A0546
118C9BB6E9CA78AFB3C7D87A1C043EA301C3006F857EF419616A0D2E3D646143
431C318824FB0C49362FF7408933501D25922724867F1084DDAF1D0BF513B767
87E4A2F56EEF9FB845A2F7E97795A15160D23DE3668AA3D7DA417C906CBA8079
93A9162700BC9A16725D6510F607A4139FF20EAA6FAD50724816D76FE683810E
63BA4E40BA8E5C0A6D51ED6EBCD11B5068CACB85ABF6D9FC648CD35B1E038274
11BA7AD177E43BD16802D27FC2972286F2B152BE1F52E47D6BDD0DCD828F689C
74CE0750AD5FA10FC0E6B5F36EB62D69D698EEB767B4E9FFE73FCDAF8BD20876
DF126296187D1364EB31556C2401B79B8A2E285ACE63FCB0B137685611FDDAB2
E8FD8784FAA7132BE44229304ADC8A686D6732B0207BF2EB32EF468462CCE9D0
CEB6AFFC1DB954D41CE677D750AB42C1067EDFC2807B3CE00CC05F6CA1D87A1C
83530D8ED64611BEEC2A214EED19C0949910584F7FE49B03F896E7FCFD087089
E5CCD4368BEF556A281D166D457F08E37D782E7467A552F704EBEAF9F9AF6A64
9DD0F7E5D01633F0D869255EB21B016AFD3655F66750D3FAD23810392FFC09EF
C2864447914DF3ED2C719753BB1EED9C4359774194896CAB73A2F2ACED52AF9D
066794BEAF0EB7F06C1D428B9D34331BFA9C9A08BD09FD5054C8388DA82C3566
624F6F7CAD4242AE6C63D047AAC8EF82134EC418EA69430C0CFA1EFB2B4F9BEC
48808524500F3A6571A6EA4D65079538C1F9087E6FC665136B7ABFFE8DBF1184
D3C3AA9575819DDF023FF06A5F3B1A51AE4850C6FDD082AAF6FBB07DFB6A6227
A73AA255113DF4821BC5FB991DC6B178B121D38CE79E3AD729E30028E43296A0
548A7C64326F696544F6B1F129A854A81ED65184618E121FCB80CD031A30A0F8
7D7BAF534E49D13772304484CE3BD2A9C4955C7691B72AD442BDDAD18F30DB19
0E4D004697B5BD861801D55698E3D6ECE62CE5CC9FE34A8AAB8E3CB9409F8206
F24A189E57A0B5C178B7326860AF2A334383A1C7028DB9A3509F974F409FA0B9
5E779F2E9093E016D90FE788F6D726A04A5D06B0C05E69A239F52F5EA889627F
19006CC52D9E451DC21450FD3DBB18715AF6BAA336E150E02FB2831359FDB957
92B2E6431DD24BFFF2DB62693EDC9C5A4FA4A71EA0848A9364BA6446D5BD93EE
9AFA29111A71BCFDDA20BCD6006B0309EF0926199A60E28CFF48B79840BCB88B
39475A7E1C6815544584C34DF0E22A5EB61F0C232B03C08B27866537A9CA5F4A
B3D997E3153548794D9232AA20C29B6CF38FC8562EEA94D43B47E1F7AE890D38
03E91CE2738FABBC214C731AD70893D5FAF5B4BBEC5416501276491B79153F8D
F73808CA8940A65E5F0D1CD06A704E946B53768B5F92C841F47646E5CF24EC08
A8FA2348D271D2A84CAFAB1A979AA7E43DAAFD896177F1F70EADCF7E077FF92C
EEE279D1CD8F9B064103EEDACBDC40EB2EF6C28E91A0A1B0D7A7B0ECECEB25B1
8BCBACFAF313AC51BA6360C4F0BC34696FFE3C105348362C617D60BA3678C821
5B9F542D81152BD47EB69563510C525D05E195960D0EAEFB771050039A2F1CEB
A3DB1E042443B665E915991D932209B3F4C86295911FACB51BDAD45965CB3E4C
D451B5A1D6149A66BA1CA971CDE9629C0B16424CF3609285DAEB0115E4A8A145
939599F77990E19358425614D41218CD20852B1969CE91DB3F7B7E87BD9D405F
2E29BF660674457A70FF888A59085E68EB262A88EC25462A4A9EAFE20A956D43
50D8C90F998103A821C35734F0153950E5F72FF6A8AA6940836AB19ECB89B9DA
9A93D028D28EFCB73500DFC2F30D6C47A485B062196657C6B0CA8422DC11C6CE
AAD52991D1A9E5969D76BDE4FC976074F2D623721D38E3F361A941457847C5EC
09C01622C089AB3CB216A5C27D634731F3CA55BE5D1F91FFBA4A232B68F80792
19AA89F699A8C22C30EA308E6A5C8EEB5921F493C8F5B7691CD5C39E936ABF65
80C629A7592A909A4F89FBE2E3EEFC8BB99DF3B9CCE8FA93A71128B87293E690
C242ECD53B604B30AE8D7172F3E47139FEF1D23D2F930AF1B361E2AB0F5B11BA
428CD87225C7FF28FDCD4FB898A052A0B1A3C494AAB27E0C853EBD237F5FDBB5
82FBE603D54C4AA4887AB453337003BE0392AF8359E416849A0B2DEBEF46E3AB
2B8DE7532BD19CFDD69285BF725FB229FAC5B04008CA381E09AB94F1A9224922
B4A5C23593F8765E8124AB49FBC57F1B0A7E8F6FB6C483282DE613E28E0AB1E0
441517818CFD111E32142FFB160DB6422A5884151A4054D6076EF2F506E3DB3D
67A2D10FA038561B4D714B08BEC08EAA7D1909D5833FAB8D6671564F796B070A
2B3717577FF24B2CB8D87BFCCC85B1F91277DF1E391ED325F8383B11D57D9AF5
0EBCF7152E3715510FBF60F16750CF58F347797DF580DA0E0A4F13FBF20B25DF
F7861AC15FDBA1372D5D4D2555A2E8E23E29D8C8C5F39807B5A46FC1B70A9ACD
B172BAB4BC144943B3D3FE06E95C6B69FB006A083E8592BC01483D8DE50B9A6A
C86F872ACFC9489546968514D49014716D5975AEC37D2CCA662CFC60637C65FA
FBE78109CAB35AC2730A761CAAED96AFDADFC1FAE977B6BE8BB8B73909AA1117
B78A5506192B150BFCA046A36DFDA767967A43B3D1F3FC4F591BFE0EA1D77EFF
0602581EEEDD6C8F062E3E6783AD762482408DC1A5E5C900A43B0115F76BDB75
E9FAF644E1879C37A1E08DB03EDBCDA51187777E14F63F0C62F40BC85D30FFDA
81640FC9C58E6C4A95E1027273D38482DCFC5F6F6E64E4D57EB716ECD75C6A6C
AF0F0FB5F6A73A47FFFB9D63648979AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B27035ECC31BF4368E12CED705A5823BF6AC2348B46BB50393DD2B0D8A303AD
186A5DDB0595138C0E3D757E8DB9B67D98219241C0DA67E5BEC040A958B14BB3
D782151402720D5B4C77D25AE31C4A75BD8C7EB02722DA8D89430EC74AF0B255
2C97BFBD1C6C0062488763FDB07939C52A5D0D17AB4CAD27D6776A05245E5663
DB78466EFF0F8E67FEBFA63628520A97B48285DA87CED8A9520D6679CBA61BAF
3ADE6EF9B4205BC43BA3CDA488E512ED42BD142526394C5103BA4718D58F167C
B6741E06D4CE5E269D3AFCBBF060F416C0B747EC5BA54AA743154084CCBF021C
EAFA448258460E39549BC1781B89BDB53A9752A519A9BBB3CC59D3FBE6A84F1F
9521B6E05D0A0B2E0FCEADD4932A5E64E2E417C6B64D84B19F7C2D7C143E287A
BDB12AA1761639E638CE9D89C4CF0AAE1B38A2837E19E5AD8A4551A971DCF562
769FC5E4767C4CE91F8896FD3FE37FA5F235AE1BA3C6F3547FF24606651E5887
FE8CD61F46FFEAFF4A66DCCA05B42F9B762FF8905BAA1B6D15269F38A2D283BF
456D5D8BFEEBCB5B69717F22A0503101F9953D8EA3833BE27127E1C489198821
227C1ACA75B845E5D0C0F7D8416730AF4BE4FC931E965594E03272CE6647F502
4D51CD78D79C802EEABBCA93CBF968187FFA00C2E8D8E14D1017DC8428791C90
0E377B78459F629FB32E5FF3872C95854381F1D0D070EE364ED35377E1DCF455
DFB59E53117FB961AD0BDD708C34E6B895AEF03EA76FE4BDD1BECB4F085845D3
9491FEB49ACAAB78D15ECF938729214C68FFEFCAC997EC286F30AD0245F229D3
687ADCBF4D6FA08D7289D923565955106A2FFAFA8C9F63693D20446633CB481D
C110FC14AAB8E9264F5A97105877EFACBDD14EC74FAF23B7784B64C524C2A312
2128B8383DFB5DA7A5A97407F3DEF442B8DCCDEC2DDA26ED78D546FDA83928B3
BE98031AEBE6894AD20C707D6AB0FE0B28A607D5242312EC254311435101EEE8
6C70CA637B9996E2CD033AA4E4A7DFAE20ABDE997CE19D306EE564EFC9B18C70
02F76150B70E79387F8C338AA7CBA5CBD0C64D459276BF2D8F25F13137C7F1CC
459CB3B23FF9941BF214B5B5AC3E4D781DE2C5A1D799C37EB49300F5B1ACF806
87D6383CA578157328AA019A4616E1CF60844E471951730F598331430372E9EC
7FC8D62B62EF029DA9597ACE2FA8F5AAE91606BC8FB9FE50103F0100A4DF83EC
8118D800F3B2A7B5EA03E16B204962BC68AD757C7131E0EFC7FA91D2E9AB6B3E
D5569C5C5673B880AF76BDCD4958E166EC99FE60AA5334CB63B98D4A88FC1A9D
7A3F00E21C72DC6C55F36DB35C15D5A480A1C9B60CD7C76C0EB176E73C609F8D
0E1B5ED58FEA3576D09512F8CC1041A6FCD1E20CAC60BA728EE459CBFB2869B3
137FB82A56592F27FC27F1D49D5FF4BBC0E1623180780FB423D096EE2A4B1936
12337A6D180D9FA91E94F858DB8F560E9C740446C3D311F71C48ADE52E536208
334979DFA52EF5DF98E3BC006AB80F8ED18036DA7E2AD741E7074EAB05EBAC5D
4AFE97D7071C95A6C055A02AC93F632D57124BF3FC0BA485E050DF883E4B2767
E236BE2685D658B0A0269A1FD38BAB95AA31DF4BE8804458E1B8270B93A5B74F
F64283F15EAA51DF4C74CBB662283EA551F36DF4642CD37869BC08F102BA0EA2
EBFBC82BDC7EAA3EF5B4891F92369E9379CE45F6CBE7E3178917EF87FC1E58DA
C0F5A84B217BD0B75692BCF2B45DD711488A0E98DA49661EDD60013B3B394283
857632A3737C5327B323891B54B03BFBB05D94BC32BBD9B63477E629422A5E9C
5E88B8D287B9909D602F361A9F9E882976EF05ABE701A65C70CF6E760D7B963D
1673AA257DEEC248B03E71188FD6B5BB376CA9F1704ADC2FD875C680043C1CC8
3E32566C1B3C8BA180843B44A27411B25F07ACDE481F5D3420EE555929C8B8AB
C127FB17AABB88F230DA39C007D003B52BD7D79915BA73B0F9373FE5AD1F7D9D
6AE75AEDB7D0E30AF3BBDF68CC4034CD1D6EDD9C05D53E50C8F98A81ABF3A787
41E8D8C915FFE89F894D20276585AAA587851AD35950ED2F83F4B0EF035B6CA7
E8A71EA97EEF2A9B76AD6A26D8F8EA018C569F7239BB2452A03947CB2DACCB16
686843AB26B41DA3841BDE03C6E91F214634D0D7B53124578CBC4714B9513C2A
D11B1CE701609F6CFAA273F2643D22BE3C438C38E94041F97A726D27086D4985
140F65A90EAD82E08F2A7BCE0CA9A0EF849BB02EAD366005A56D14AA59E02DEC
B1442D35435B09EDE25DCCE07686ED6DEE6EA3E6E8FB31907BFB248D17321780
D20A1D12F5629FB803365D131288E0FD057FB55E644662EF256AE3C97B53245E
9B2BD6CA8C29AD6FC1A0BF02BA19B34419998D1ECA10CE026C567204DCD24DD2
CEC0584BEE140CE5D1761CFEE139DCFBFFF785AF40618E9C7040F079FAE9E12A
0DDB4A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8A4A3A66DC9C52
96DFDE89C5BA45AA1E939DFFE83840267D7D1A70288C3CBA2FFCDF1A4368603D
692DF9729847B5A4A1E37B766568C833B98C74B15426DF65C9CEEE3E3153FCAB
3050CA75A82E9483EC5B384BF87B91E7273975069C907199D36165A282C7C6E8
5A1C921EC9198BC03CE04A0F0B2113C7B19A19D7E3B17E6B882EFEDDC7E7567F
116654EF98052AFA60869686385A3FE61B5BA1369DB20EC80C8086DEE33D0297
BE0403E7694909E0D4657B9A187A73655F4CD055362BBD43CB8103899EA8517A
B8C18737EC2FAABD1DA7EB3D39A3B9FDEF15DA1F1505CDD37755796CD5FBA681
D46CF9314CC3D7E9AECA005DB43AAE1E43E95639D799B5CDCA5A5527048775EB
15B80C65DB647AED3D3068FA9D4ADB75BEA4DF343AD30344E6B4C7F83808900A
54D9B875E95CA8166B84CCDE9FB92FEF1C8224A481E31A42902243B83DA90CB0
F503589D4D806436C1287938562B2203565FD277C13BD2342C13A687C6CACA5E
2D35E33B794FD84C274A4D9C2643EBEC142CDC1A985E6F3CE8B6695B3C201F4B
7CD67C0896DA7E0638810834D55746262B47195560253D16818C5EF8A7D897D7
E9C788459B39B30321C6ECAE276B63BCDCAAC66E6F6EE4CE4ACFE894C33EDAC7
5933CF06BFDCA9E282359D114C1015DECDE764D6A2B3B5DF5C4A154702C42C30
D07D729FD4F2FCC3A6B97E1F5FFCC19203D7FD140B5D3C78CD706A23DACE1AB5
B13A4DEEFD88C8AF7468EB28FD5E0CBDF9E23D1FF320EBF19F28142D78CD96C1
1B52FE223AC12C65643F2111724CCA0EF177EC0C2D3AAD49BD2A0BF511A722FD
CCD19792FE94B9FDBF4065FC6CA66B02202BFDAA805E647AF9BF332D5EB49BE2
1977146C8872ECAD4D82A933A8A5E16FA17CBE3F977509340FF834EA210BF0CC
D3EC84AC8DBFABB91D54CC819680322EAB72E1250A760A2AC753F817F94AA693
9DAE286FEA07B203E7227497062C30026AB518D1BE399DB38FCEF12C4E988752
A88D8C98DC43DB22C6537028798198E2D3B0453ED720B08BB46736BBB09EE961
0D507A44794CEB9A3EAB4998A31F59584455FCA7617F2744370D43F5E2B9EE5C
AC85A80C440A6FDC9D19E8E4F78CD805598AD98987F3158905238F53B5565761
668A6EA34CABAFA33A7C345CCD46EAAF3E000C9245F536030DE2F2AC2B228E07
453FECCD0AF58C15FBDD5D36338CB0ECF40BA237177F6DFB6E00260EDCED9A6F
C8E5B7B915712E24D97A3E013429A238307E3A46BFD486834A752E5C0D519117
BB643C87DD94CA2BB185BCD37C128178A0F79CC8ACE6774BCE7CC77605F93ABF
EBD803E01C35504AEAA61F56E5B463649E058E104A8537D3D81053D9DB65EF6C
050296ECF0188950E744AB53050CE216C016608427C3FD501865604B85880B05
3A592E36D0A04CD581917A0935303EC1823825BF2E2F5C26BCB2EF1C38F3C951
2D50FAA648A9822FEE5B4BB37010E988D53382FF192A77346C86A5D1487047CA
DAB6064D531B1FABFC5730E478369E2FC89F2F28C168E6B988F7655114E5FF71
10BFC9D5E0419ADD2F5CC1C09AD68EB2CE58E9288356FC2CB43FFC49E6767BD7
DFCFA10CEFCC78AE7264D6AC158960359E31A4379AC573D700B7780D298520C2
D0698C337BF594D24900FECB67287A8B4CDB963B1104272310678F74491DA157
2344FA545EAD39D3BDE3E416E13D6B23272517D28E9E093AEFA728236C3F0625
42EEFDCCA2D1CE0A5DCF82C18687DDECD38E11AEA8AE17B02D3D65057422BD31
1717EAFC337558AA398E37BF984F934C66986C2EE9A510A9C87045DDEC6576D7
46C1AEC54ADE2497021A2B1380CE9F69F2A80BC2BA01FAB65ECE0514ED2F8CD9
0861F80D2C9BF60DBCE86FEFEF496AC7B23474DEAC4ADB7FF6B72CBBFD3B611B
72455DF41DEFAE3EF8FE12D52CB89184ECECFDC9A90A49DF2C1C2E47999DB23E
CCB74AA8F9B65CA96EA82B8A241DD366C3956669BAA979C0C7596E61997B9C81
8DA3B882966F6B909CB12D82ADEEFAECD240805D78448DF7E49A11B2F211A64E
B78A90BFCAAAC5B80EC514976A747B8E08E66BC3DDA8287F5E44788AAFEB2E05
BB7966CA5034B8EFD58FC08C1C182F83D34FA65B3FD76716D40C47CF247250C1
34FF33B4D8D885544C9A64BAE28239DA8BEB1A6A96E95B783B19DA7B1CC72721
564B8709C55F98E7C5F18E48575769447F56E70EA3FC9218AA9AA6EA2A3CCD85
51CD1AB6EACF05D059DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A13349D4BC
F8AB4CB14661759C675824F94CD151CD192AB4CD68C2588CE112A6D2ABD44B74
8AFED5F42AECB983E0C97BDBE9BE1744123AC8C0F438B7780BAE139B47680B3E
A235BDEFE3E247B0C763E132A0CC5F403CB09F7F5BC5378CD303C411BC079366
B9E331D0A01FCD55C9562E1FB2D410C3641A1DC59A816C933FF53193EAAFE6E8
70382132172F06F105BF2DB51EC3DF2714148469458A1ABAAA7CE8CAA45A9CF3
2034CD2106773B47C4BC871065E8C41CEFA4148A2827452E7CB712C1049B9D8B
99CE058CA4994F6AD3FD93A2EBD338C28CDCBBA3BD8E28289EF48A40723E39B7
EC79F2D3822C6F45A6AE025B3B7251C5F475F0C42E877B96009E065BF3653115
B309B3AE2E0B1F5CABE244D8F1F6D29DB3997620BB2E9F8F840048F96BD4AF2E
AAA6B47C55626F5C6488D48375B20B61BE229F35324501AE0F98009DA9ACC5F0
2B837CF7A3D467865B963C6CB6C2BAC0238F0A2AB3DA2768995A63AAAF50D6EB
1A77F44DC13FBBD93081B66089B327240A3BE0633C33C8E4823681BDBDD2635C
3E87602F531C59F95F25C76E0550BE3A0CA759150DEA693AD05F6FCA529C0B07
5B82B28489526829AFA5269D435D1D91636B826E97FC91A0A25FC7955B4348AD
DF7CDF13C26984F7E0035E5BF66BDB22301ADAFB260DCDF734710F51387DBF7F
59869CC9A2D5E699820F4CF92C09C7B8739428F2881E4C77381AE42D708DF8E5
C93474AFDFF07356C98DE52FCAE577C7EF0A72CB1F4170BFFA48734F1EAE0165
D6FE43CBD8FA5C85EDCD122FAC36F59FDA74420AEF97D620DFFCD216CFF0DB2E
60B9053B0C71F73BF2BAE6B0B60411388FD7F8F95FC7A4542DD071B9BBA94C49
6DCD748D1F24E11B7818B6347AAAA74FA8A5BC6F63F55B2A9F922A4995E08362
2B36DEFFE1A6AD802B4C6AF1F169805580F4EBFF87B92A0E4040F9F5A61B558B
A7502D0551DDFD1B445C6BDFA438D70A555F767B79213E14EF7C24C48C184E2B
C4350D72B6956D0C2F549618A5188F4F3D785A31C1CF5B24D127CFD021D684AF
84A8CBF988CF6C34BEFE7A9F38537FF36ACE4F4C186B6AD43875BEF479A567BA
B3764282DA78B388D27A6DEC10E31F1070B7F934387FDE0B8736AC99C312BCE1
CB7C2B074D386AEFB764BFC86DFE3CE4A2AD2F1014CD74242AB2821DF38563E9
D926F0DA88423DC2849432C1F9581422696BFA2AC17072EA6C9F52E42816C85A
F34C21215E773478561500E9ADB8BE5D338698293881FF237E9135E1DA3CDF10
9AB7631B321258281DAADA221C4D03BAA1C893DB536F4BE3C86F9764E9D7F431
3861B4D82AC0887211C58DB0AE8D8FD27767696A71E401C3D7EFA3F690695CB7
DAF3EC66FA0B727FC6AE134C01819BE812383102DFC5AE3F0F649948253EC51D
98A20B1C4150AECE1B6076A57364A56FAD9DD85AE2E3CDE1A4CFFA3B012398F1
6FB210FE1BFDCEAD62BC0C4D9CFFECDE469085BCC3A247DD47403BA7FCD1B57B
6C8C3E0553729B37E4FFFAD130F37CA200B432D886A12EF6332152F0E30D38E2
B0F1C316C4111563ABB27AB6E746CEBF9CE816B349CE7E2C8EE3A00E3B6A0740
8043CBFAD9A3BADDFC68DCCF67E30306F803C21AF93B4DCC5AA19DB2AB45BF26
4FB98956E358AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8337290BB34F9C
9378F5EECF7AB9804EE6F29D00C325FE6E644B9A34F6D0492707FF62210299A4
423C3ACC13EA148737942B3ABB615C574286277CD3EF604179CE6CC654B087FC
10B4C71E24BCFED96E689908E9D864BE3DDF1EA078FF00A40E236B7BCA3A8319
2D97B128519E4CCF2738342D8157822D42F334B8793F13FB6797C5E5249F87F4
EE8D2B2380848306F12A275DE016D08DF4EEA409ED0825634FEF2BA64D319E72
F99A7F085D9DEC3446B39CDE8886C5917EA8C3D12C66A4CA6D951C5831F822FD
91C71A737C3C3B405D049314F14D6FF093684229CF7A810D9FF2AE1806BE73E7
DAD8CCB7E454B088821A9F14B14855823DB7D1D12E2435634CF69890D14A1FF7
6CDB488E576319AE8FD72E288AB89F4ABD066FFA0C1E746B4D3945C2101451A5
903126FD80BD493627782C24ED101F4140C494B0AFA172887001E098FA34E89A
BAA7573D1485E21F13FA431B7B117E787AFD9B6F938D1783115590610C8526BE
DF26F171C5F4C80871ACD7CD327CB21346320CD3F2792ACA6EE48DB376528012
DF50DB540EE406F86B020BDCC75B131B92A963902D10C5468AD2BBD7BC209831
FE44C13336BBC3B0569784320814C4FA99AAB02B955569B4CF96EAD1B32729DB
E4756DEF299974B5B02B44080CB70534647A4C09D8C8BA4A3DF138CF7418003D
E88FBC1FDC0D203E28BC6425C308D02CD968BE87AC37C0E0F40739A4EFCC2554
F65D9BA49E0247C276A7E4411D3999209B7C8C8E880198F62F1EE7D0DF4029A9
0A8DC295D102DEC16E24B0E822A9BF2F4841144E5B06E3583F5C997211E5081E
B83DF4D9F3ED021857F33C1ACEFD2CEA6ABA7AC14F35734CFB25ECE3A9EA5EA8
03DEF478A1DDC7BF0C5793831F89BFE0A70B1DBD9977A5F4C77183F4CF9B18D3
648CE36D5ABB16F60486F9C38AF072F4A6A07BCE44699387DBC9B9F89DB6EF65
77F372161863C546327B4BC36E956EEF8CF19B47E871B05E8ADA834E775AD694
8BE41E7CE3784F49073B8A3EEB12EFB77E7AABC37F57BFA2BDD7C1143BA3C5CA
077D8042C15732284FA8C066B5436D54B97EAE0CFDA85B3EFC1C18FD44FF2BC9
93B88B9FDA9A8BC49F224A8A389D0F351D3C74500EE5012C07BC08690DE3BCCD
E19E8B67B5DC829278B1120A3A5D37A68E599900A96500D75CA74B270861D027
B81EB14663E3073EA5D1D9D55A0BC8ACE6E7972CDD9318A247900C698EB3D318
C1E33758D8990D8EE81BAE03AD70AF745817CA28E17D34137157DF2F0C16900F
279E3E77591E3F95B9158CE71477D7CC62FDEA43428C6F79C332342E15F75B08
A1E0A25D766B378FE86691BB1283618D234ECFE8B485CD72D666FDAF3771EC11
8B6420ED41D724F6F33903DC93B2A8D6F3EF87869378858BA7E6E918D5E46449
525A4A5C89902E175AD3FD3DEDD4C85EE5217379DB414EF338962847BC752EB0
EFF7BE8B688A3622826EC83CC42DCA4C808DF9894AACCF6FCC5C78714AE6F776
AD12743DCEA3C8C9D08E167B32B266A48D168A7B15993737BE0E6C288711CD6E
BF9453B2F632E36A15B373FF3FAE535329F1FF83125F1EE19256CC5053025616
EEEF28F24F95FA92776948AD4434F8B41FD8FB187D24F232C6D89B727968420B
73207821859BB191D53398A26D610D53AE6A1B04E7BDEF7E850602B6815EBCF3
E19A3AD3094F5C09CAB3EDCFE19EDE2E31F837DF86F1800F59C89EF6401112A9
920EC9C57B38834DF8ADB373A5B5BDB1D57F414F3B9580E3A2D1A275297514E7
62C01CD9930799BDAA3C034F4466A9AA7EED0A2C9DC58C0E1C62AF2EFAB5813E
8C5F1250F2589FE68B29179A3E97A3F0B35A3FE8DF5B2583CD5333D961386F3C
0BEB0B0E360A3343249D4A6D0E97CF931207960C9BA56892999790016B0236D7
19FF602DA5224C0BAB8B6246766D5D0383CBF71F3159B5B1D9A6E3BBC4518671
B8D6440A282859DB641ED9F940FE4ABD8A3824795F928AF04C833497F7C4B1B6
92D0495AB0787EBA30853A9B90DDDF7AF372B76FE598D19AC35D7988F76C9041
485C16FE9005D865F680319DA302AA75A3E4AD0DD628D2D969B17440CA9AF1A5
4675CBD7ABF2B2F054AE1254675CD0EA94A638DBBD0D0627A5AE85B3B0609E57
994F61B3289BC269D6321696B1D9C4208BDE9E79F9A6FA677F1EDFFB70E37A26
C6C3F2E101693C94644471363E157B01E8B11BB02FB00762A522A3DF2BD0251F
D7822007395A5D78C698C7366C1C453FD7CC6E94C47BA2DBDC17A5FFAF17078C
C55DE418D9573497D3911E976926FC81BDA50FC3126234044386036954E9BE82
3A79C27A4408AB95CC3340C7BC2658981FDB476C67E8BF823884C97FA6FD2DE5
B292D97D0335BFC690BCDC1C21BA7219C6A702B7E6453B1672D45B719225BD4A
B0E5451D335381488053602966F43A43037554E44CDC08B36BA9CF1C1C78A880
0AE691524E1C6FB25F41A15D8BBEC9250B35760D221A457E0EF8D3509E398373
59BA3562E3DF1EC0530A838346B7C97C616E393DAF3553A5328129E033146AE5
5A893A5F9B7B3709B544C8412F8BF64203D554E47F31B7AE43ABEAD548324A5D
AEB9AC7E77DDDC367975577DDDEA8FB03F750A52C070289822BB03028524D9F7
34EB854BE550341FD8148EBCF4482E9D977385E7B94A9DEAAB1B74EEB7B90824
5CDDB7A093C1AA3078E504231708623163ED2DB636BA33208269330C24A4E0B2
183FADFD7E2B2575116286D1C2A40545F973870CB8CC759E6CEB1E2B2930DA14
63937707D0661275B66BBBF9BAD3F33E0E13DEC23F367F3CDAADB9A370228BDD
712FB3E6E3B114C105A187E4ADE0186B8ACBDD4537C9821B586C1AA0E3D26C56
EBDADA436649A0E14AB04AB9A374E930A868D4872655A2BD4F485C7FBBFC1A88
E17F145078D8B20BF06930D39D4AAEF7F72881909BF65CB09380CA8135AC83AC
F355B3085E56A4087ED0849BE7D62640649C18E72E35E5721ECC6A9B55431994
50D4DCF85355B62186878ABAD0E20B2DC4557602FE6F058A6045973BB2EBC862
E482643DCE6A8EB4E099D4A15B609E3064DC9FE24A1D4E922593B8D115267A56
9CCD715FE50EADC5978C60627E06B99C73D440591249C8468ADAF74767FF59DA
5904DFB6386ED196F743FF57EE7DCC2FE096C5565DB42D5A4BB5A14E1217960A
56E41FB7F566D32F10D41D5E07065AAB5CFCACB826EFB41D1A7A6F59DC8AF874
E461A239212F05BA154584A312D0DC1C199035B90E8B3A19D0573BAC967DB056
85E1E2031A7EA3B7A971E7669D6413FCC65C406B8A7DA92EB22F6DEC316C5898
6CDDF0161F8F98CC3027FB5FDF901190949B4B6A3297CFB9B7C1C0F575F4A979
FF04F1B3C17864FBC8B92B77DC4C2A52659DCB7D2970392C6F0911FDFD11B254
DA5A7E27E60E386F32B5BC0788181F511102AB15CDC60F6EF061341F4D3A8A3F
C67D9F369BED60C6E321A55CB96FC41F9FDA1FD2D967EB9B7F6B389EE22D1C08
02FACD28FFBB1FD06344F73CA4963E8ACEC1D74254D65FAB990CD2DE0ADBFE59
B74C19F6098ABCDB06E2D56FD40D8CEFA73DC32A2614E905203DB858BCF75E95
321A7131547E0F2BACC0D0B67706DA244B8DFDC8E62D3C37D431F6ED8353D14D
C335D2BE90B5C581D6E786B578AE7262FC845FCCF787429F4A3995CE613728D2
6E6E3DF9B321D1550C15C0E45EC2EF425AEE66B4BF6D4477E72DC3B753BC0DA9
4017AD3ECC7AB7872B90950DE333A444BE5476340C4F274EF8D30ADEFB5B856A
8C34BC6B1DFBB5E5E0FD6150E4A8F7948D77CD88A995C71A69F35BD0CA454282
4B1F4329D05463C019ECA4A7C3C21E322AE6C2B6732D60633B59C2D874151117
1B2040FB6637140BE927369F803A4FF311D467EC797A7675CDBD7282B6F1E814
F280483A55C252B0A40E7584C71AFECE41946AE57589E52A9DAB9B4C1330A789
52043093DBCC03FC0A022D504EF495A6B5D5A0181B21A1268D6E761CF9B88320
7F1478ABCD112D3ACD5829460DFB26A3E003F3B3FBBF28863BD0C4165279A8F0
5A7CCAFE3F27CFCB8FB95970989532011E12FEA1EDCEF3786FFF98C2969A2778
4051AB6D62A72179B3A6C7AF7262FB22E5DD6D1A43DBC273DB1BE1C5360938A7
15794B78307D3B0114860A6C96BF87BA567F795DE7D59F934AF63B21B8188396
2192FDFE7ED39A2F4EB718886E4FF6A985BD93B63B69B0539E5B60B9B751BA8B
96989AD1878C8A5C000CBAAF4D8B1B920CEF000A151C43D8460E822184095395
E09244CE34C8E2F3833988827CDDFBEF79999598E57464E82D184CF76BE6CC54
6FBC0F3B272BCFC8EE865A632AB4A611CAD82809B72668606C1F992A1D8ED0E0
5E441BBF12394F7EEB8B3819183C0B4D2F92C01428AC9051C9F5AA344BCA6CEC
10B732679DA262C5151B948E529F0C7A21052F1A28CE3432A48774F657E6CE1C
BBA31DD5B6A2A51DFB6604687AE4E6C3FC0007733572C4C243D9DF0E9D06A41B
396DEBEF9C74E4017237825DB5F7B38287124B1DF043B0FCB636084A0251325A
A04438BC14D47CD354A980A539A617AD6932D9D66638FDA8BDD4DE1F10153D55
1CCD7325032E3856BD6E6C845E2379D4B42D8D19FA6D540368BA9F7BBDDEF785
603AFB76B55C10426C6B620BF1890A7406C7A73B7596DD9C1EAE6D72382D60A1
A753062A05C1F131CE46A71C51C1B1D3F58F626B0C4F0382A7A3F51A65171E8F
6E05FD0EAEB026BEB5B1B2ED69589587A48B075095F4999DFFED7C736E945F84
53ABBCA099EAE8CEA000FD30953CFB21EB332B423034CF5D6DA93D934D5C58DE
02DC65C84D914A718710D358014F05D7703139CB3914A6C9BDE8CDCEAF38C0BC
9E406A35F44C6B412ABEC732BA0C53F153AAC4D8526D51B72E18F4D380225458
93B5D04818AEBC01F60262586BDD20A1184ECCA49857A849D09E0DB940A5951B
BB6FD4919B97FD653F0D102D2B7810619C4BE23EE4244A76684DE444A8B5E1B4
37D934C50BEF51FDD152F3E1D16BB5DEAEE0CD3290E421B6313DAE88F83FDA1E
8ACC3588B776A0F38DA32B37B3D6B8701CE2C2E237091723377A30F50EE2D9C8
C41FCF68538E049F605961485103BF3C2DD396E682EB072BFE1C08796A7B1CC5
A228D37AED24A6B76E20BFD980910C422AB3AC370CDF22BCACAC6B2846EE2005
39F53F833F07277994D2904DC557746508623BCEB72CF3851245881C86665B77
8CA1824DFEC5DBF19D4E9789D174520A66E3DBFE628A6567768FD3A156D5C125
B46B837416E74BB617AB42062B7C7F46A2508F86BB55BF9735D016B803C38B89
2380B03933CF7AC339F7B421983E6150DC5E83C804BAA57C6E19CF8471A5E819
CC19FD7DDDC82A1E46EF79FDC5CF1DF72D2275F3857BFBB4FE70DDD0A2713820
D615BA8AE46DCDCD93BF182F0D752C9B56270A188A7649D8D1437039443AA946
A7630D1876FB0AEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF5124A5A0C14
3F7D89F5A7906D76138611002FE7E928296A30F501DAFD59EBCD8504F5FFF188
84570CD80BB698387BA9A9D4DE33CD6D813D150A71DE3CF9D20F5FA45FB3352F
C60563D081F110CBB181C03581AE7F5CFB6E2CC811296D37D0B3F10D8795B37F
4231A18A53FFE7F6E2AFD4F1259F366FB11B9A9D5FBF66C5988D9291828004BF
D1506E19FE361FE6870EF2EB19DC31D08B3B506F8977119DB201F51DE0923D0D
96041E11FDA9750E1F4E6F65FB245EACF240CD5E1806A89D6122B7F23C4C6B1B
456EB717ECF3B8886671E1B1081AA96246E185C477A9D3E90928C19BBDACAB70
E1FF207560FABBC42680DA4692B70C5BDC3190C4CAC7F46D748B1FB871C97A78
FE15CC07DE7FA831F8D98B9A1E9FE0D79698ECDFCF6BEFA01D9EC1E9C7A986CF
2EEE20EE2DCF174188380EA574CD7D927A71662AD1F1404A836A801A94776AE8
FF003132928A98F3ED13B3A092119275C4A4E8E7635BE88FDA3523B8E87EE260
9E8397C2DA3E0F382A4C8057DC812849489EBEFF8D46AC997C8ED678DBBECEC9
5B1E3EB16DD6D9288D01300D51C912BE7CBA6297E68387A161F72C8751797854
D24B672F4AE01822A9E0A89E34E2F500E5678EE0E9433AB4F7CDE57AA7490C08
03B59CCB38B77BBF8CA0584C11295A73FE3649A98308BC5906C1DA356869FF6B
4DC925E8C00BB3E642A64685456B6BAF629AB8085CEC7C0EED7A3B6BF6112C35
C2953F4A76FC5F90AA018907D25EF38327EBE4A4D71078881731C0445AFD7EA2
01785F7CE75AE288A81702B5D53D7FA71F20E220317B91916BD508870C6C6208
61E751C779512C404ED48FF12B79DBB642914AD1214B8BFB43159501BAEAB263
FAF927BE2708B21D9B6D5A3669931BEFCC716F622A9652257E0469310B4681C5
8D18345EE64DC11A1319A075FF8717A86574669C7D9712D975674948A0C76CEB
DC6D0CEE926120656B73B1A1EC29E2AC3B8B7A0430AEF9BF9DFCBB814B092618
2486AFA66185016F9E506375D1E089C674CAC96C3233AC20FADB3505BE2B8C29
DB3630B72D102B8809C634549DB4DF0C90A4B15CCEB79085BE0B5CB46EB11E57
B71E6713B98776F95D3128349CE319F1E98BBF6959D8DFD24C4CD8D9B4A021C0
D6ECB58B929D51B9BAFEFBEA9A1804A05B350671BA8D9838EC6FD9269FC730E2
D105E1ECC35934343FFF768A9C7C69C1DCB4086F1C2DA5482BC6A803CD7CBE72
97EDB0D63A166BDA4DC1E9C77C262F5C1D848726B4230B4F8D878451CEFEAFA4
974E3F1E88BEDF8B54AFD478D9E939D0D4956846605418F3A87CB3A0749412DB
BE8555BCC1C9301918B98CB3036AD9BEC1CCD81D28BEDE22CD263C60160BEC9F
A8BAB9A3FC2CD04488D639D423941364192AA53E84DA5A4DE530CD4DF1E45ECD
B7329F90BB064E90631978245ADC09D8BA1FCA6382226C92B9537DF8C4F37383
902B4E1667173B62202487944A1FC201C6C5263EDD2A7CC63B5B775019F11E2E
DC39FF4DBC037FDEEC19CFB7C20815516316E3733B9A89343A3AD1D072E9FB6F
4FD96BE01DD08C6C539A6483A9BCF868B177F15C14A034E70C5AA4687613C37E
1EB159606D2297BC192D312488ACA3A78A2BEF253D6D1B216F57E649801411B9
3613AE10E6C7EC3198B55A098D5FD28E46480B0DD99F4679772820B94DC7FE83
00821F105AAD8F008A01ECC02E7933E19CDA965A884BE6F2B792C0BC289B8FA2
4D22A82C90A63566472F67838A67117694133A3248571E032FA87046115B7083
074B633F7E7065EA1ACA0B22F411E04AE47B92F8CBA53F25371A95605F8A120A
04A3E08D6749F21CE313BD5A80C3A2DD17590E8EDFA7C7C277BBF9E386D35F95
636EC0307954ACF32F737961660719E8594F3D869FAB0C30EAEA3A58039F45D8
7E787DC0EC3562E8A8F95F922F3AE3020D344F1D4D782CA0ABA987541FFD5934
A377B4E670B5F2DF83040BF71A9A9B369976055E2BD80245F249EE3B890E33B0
6E3DF0CA28D9626A7DEEE92DF84CF5967893ADC4A8C7BD0E74E4B3142195DD8F
5B2A24F02D547171668B1612C379841BC04CA5D5C9E7B9326E24A0D47D6C4E2F
881EA0D64F3BF02C625B92D884416C53CB94E66F3F50F55A041447594422EEFF
ACCE6AF7CC9768F720A33CF4229BF696B159AF031D2926ED0C9A92315083D99D
5BB8B016EED1AE2A0123C15585E849BC46825B83A5610C3A29B98BF9BC188EB6
535481A757C2255E5832AA2DCE5CAE2594D4F72E5FB7E033402B2679E21A616C
8EE824E4B46F8EB3B207344F9CA52989AD8A876F13387DDC0686A09422A17124
B098EBB0C3F25994A3516862892CA34548B4769A0AED35C6A162A2F8042E0762
A9360A77D39CCA3E498E6672788DE2F61EF7006D89EE6E8F2B7EB66114FE9DFB
07B6529FD752D2FFA4E8E41BE6221D59646155ED2C2E95398C0BE9BC7DC784E4
ACBC3A4A0EF41516A90F3B8A854B7EF90FA0DFA208E4C47AEE28224DE50DC4D2
9EF5120477430432067801A15476104F287263B114853CA1BF1C54B28F3591C1
B05ACF3D46952ED7C735BD3065066563083DE066F1E9B3F312F1EEA3FB272DF0
32CA0DEABE21398FDA5FBD5500DCA48E4802CE99214F66E2585DD7181AE09F38
A8152E34920B956EA77BF7EE8CA94484C8D06F0C5EA658E1E27E801178FB40CD
091CA3CBAF94EE7552736029B38142005DCFDC0DB99F04C960DE81273E2CC87A
FCE644D65932A5F34BD976E8CC2AF7C0152DADAD834A43DD5CB510F4E2813868
F64E427B56ABD8AE83CD6836A2A624A32128393B9D4638F0A9BB009B09A4C293
ECEB28980BBE80093D74FC73C15FD1819DA9EE1F6F67A0D65D35E3D0EF63274B
611B23987085B0C1A6D5250933CAFBC2CBC707BB968B61EEE568D34742728286
23E396AF3355F932557CCC2FAE2B10F9E5FE82CD6AA69212F7C45DD001CDD50B
27558998789A9665A76F64D7D5EB49B35CBA7981059C65967C51EFA557909650
BD9404BED91639395DB88CEF35A4B85061663B70F9A37D5032501CA2C904FD03
00ECCAD06E7BDABF230270BB9367AC291B5554ECEB61CA3FEDB24200F34D9051
89C29DF8F410C6BDC20BC853E357D674717EBD4461CA415362050ECB9A7C3AB8
AB6C697AD5845D58D83C5DF04B3BF096B274A94FCD5719F163517FB66E333C81
C7738AFF44731B6DB8007749D1B605F397413DF96D60AD4A66E5F8C165CD0D25
4DFB8F56C192F0F96AB797B70956F01DD65E1DECC56BAF8D3062CEF9A2B89179
CFB08CD31335BF56C3BFA9A6819731D70E62616DE4997C6C883ECA60623AF6D9
E93D1D93EC8C8C2E8D9D06EADD9B67BC0CBC2D312B443B447DF41125FA6BCC77
2A6A67ED1E3E4859826310476781777382D05A089F2CEE01C9E68921F58EC322
B1D86E58CE46F9982113791C051AE4F33632D2B7C11EF06056690527A4EBD1F1
355C3BD6C8641DE8AF71499D39CE0567AEA286091BEA9D6A443A5A773349515A
B10DFBF0BC3B537C3B1E57934EC351A8FFF8A878FF00A40E236B7BCA3A83192D
97B128519E4CCA3DF3D3E0197151EFFBD0C3AC4C36967A941825BEAB6C5ACEAF
10CF6ED9FF7180E277C771BBC84A300794A6EC7AD19594162682F9947E1A097E
36367B9D631483124BE3226F6BDFBB08490E8968CD02762CE02CB727B8B6F518
1D399378863E3AC6FD31927C8FBE090DFFAEFF60864D049ECBBEABB9AB7AE452
21207CEEE97EF66017F71D67430DFB26A3E003F3B3FBBF28863BD0C4165279A8
F60C36F81075FB9C13F2418FA6F805C3413C81B051C4409DFB641AF333A71119
C04E7C670E03482CC063B751457AFC19FD124FD7CD9341AB55C7294195B48964
E2F4A96FFD97B4D21C5AE58CBE93BCE3B522FBC3532394EE454709A2A06E998B
C239F96D24325048BACC9ABDA9206804375A8AB16E3C947A011221956AE269FF
01BC597921E9A872037A8909560E5E33878408EAA317D42BF6A57FC51FB377F6
5FBBED4C3200AD75E44E4CC080AED96338392E8A7CBE4369FC52A6A243D4ACAB
37996C3541108281E5CDC599E8BF2CE72DE9FEDF547B68A41FC346A14E09865C
4AF4C0E9655171298F07DF376DE565D115026FC43DB779E11299E7A4D9E7D8D3
70CFC9EAA5658F702B1EEE0B5F523A8B2E7812E325EA858A25C26ABBC4C25B96
2DD5B440190F11C953C3C8FCFCDF5C20A99F85CF1E4EEF5A38478C0F43CE39C9
A9EB8F8FA55020FEB0FDA41DE10DC4D29EF5120477430432067801A15476104F
2874C240FC359510597C3ACDE5E2829FD745C84B9029A95F60AA27FB7279FA09
966098754F32657FB3C5AB5CA033213722074E8876405E2368CF3BC650406488
18172B14F5B87DE5AC09FD05A1762B36FA02D42C15F4551678E7E57803293097
6128CF0D4E36F4147CF1BE39E1089B4E8CD7DD9C0DDFF09EAFAA8D67F25F80B3
9F4A584B95A9DC63FC2F876B779DC3E8C553F076877079FE2C27A4B959023EC0
FCBE6548410923051F875718FAC168E4E59A7AB90D4C37C4E6C970F7D4EA4D83
33C5B27CAEB1C72F096247F8F1C697A6FDA6211191D8856DA7689FFA37F8E0CB
8C621EAD3929CA3359322E25A5E9FF521C76D4AEBF9756DD3301F4C4EB5F7A46
D1EF564F9D4A077B576EC1EF005C040A9C6FDBFBE1B6577633973D5A09174E14
00FD3E56E171C25804C38478DFD3C9EF826C2CABE871AC7BFC460AF16C5AB083
3A996F6895C2B27804D8A3F901EE03A3ADB919976D4DBFF11B246AF9C2FE922A
8CCD848D4DC7D81815E0260D9F69D2E42819E144C77720F9EC60494281C0ADD4
A7DD834FF84339766A71803F1C6B5305C897B2DAF5748CC962C2E032AD6D106C
AECCB45EAB880F202DD21BFD7CC9E5E7B232CD9570DED42DA921FBB1DFF31785
3626684DBC914B43B953D2EC5687607D122DF7FDDDC3E32466F9F87266BBBDB5
0946432A4B4B5D283C822A47B5069F7527ECFB9E79DF4FFBF19FD5EA3EC20177
6EFF8C4D4B6B7A4D7D18E8F9AA8DE19082B5707160EE6EA3E6E8FB3190B7E1BF
4C2BD3DC8A8774E3E046819FA3CDFD931CCC6900B258DECDC3E77C89E6FAB2BF
AD96F77A39A1311917C8506BC967FEE4D90ADBA060396D9F990892C2D7E95B15
9A68B1967CA98D2A8BAC586FE6BB16A2789F0C4CE7806975398573D65BFE4FF0
5D157C03EFE10F06F1A23130C0BB4B083155753E239AFAC3A05017A993D91DAB
C265A39EE4A494BCDEE0725B0F11F95F8ADEFF72173E9A5F2AB2F62C427E5BDC
0DE2696CE3474CC7DD07E691CD9AA1950FE5D3ED2A5AB00895E827694FD82DFF
58B3F2848D455ADAFA8F7470FB315E82DDD7A545A4496B56480919654F753822
663BE679C05B4B7668B9D71129FCD524AFF3FCA1C73129BA85EB41CD483BF1AA
D3FAB74C2B69537837A2B70DC0908FBA28E63CC875F86A646F1492C18B24E846
33052EA5DDC12CCD62C502212ACD4ACE665C932C85AF503A78F1425F39CF0194
1C2768D80733E456821FF981702745D81FC4EF9BD374804808C980CFC1AD9B5C
F9DA1F1E6EBE9A14A590837CBE55E8818A643F3F3F88BB227E90541B119B7306
6A485F3B1D0C21299E38A93996A0EB7A3357EE47E07E13C4711484075AAD24C1
0874C856F4FDA49C612ECE7D8AAC4A74715CFC76B176E1104CE528460DD02F14
960521ED35A9488016DC834C3F251F5A4E3AD99E43A62A1FB0E2487E6B157525
363E1ED15520097495048C30EAE3CF25BB0C4EE70CAB7C5DA7C9BCDCFB67F1B6
6DD995DC518CB551334B31801C22BAC713DE7CEEF020D20C043E1D02CD57C896
1D1E0EA51C02097026083440BA42B2CBC71F9DA6B570B4451375B9EAEDEA1115
846E09ACA21EBBD2FE4DC35FA945B109E02BC9D0CA8F2F54C1BB6231BA7DA2BA
D9955F9061A59C954D39C688341996749BB68FA387BC053E36BBF9C0955610BC
B009883037A11177D54798FF0F3074A82D3474850D054DBD9ED91FC2C91C4992
B14CA7B8F884CF0B65E50AB3E501CB5D7274B154629AA70CEC4B9A451A119943
E2ECB4304977D9156198F440E5A3CFDDA5A71F8DB20E14DC06904F0684E742BD
3E2A4E824433934B7C586B986BD69FD39E64A4A5AB99C2D6657E242BEBBC0D9C
6CCDB639869DB9B6465B364BD9A0170CC19568A0E08CE6352CB79629CB55B772
BF6361D35B0C05E68E1C0C20518533DA77B3495C30DC53A7F96392D67FC82ADA
13FC4493F50CF3D97EC8E3A679D804C5B83051BC46076F01E2D91BA27FAF9AB7
A7FA0CC5A286E5461354ABFA8BD2B6DBBC8AECB140BDDBF533ADACFBFA00F3A9
244BA837A3603450748CB9D0D1ECE58018E16ECE31415E2010323BF7B94C460C
35EB74BC3C7ED241D48F5DB2174A712F0A1E33ACFDF4F850DDD4B26FB8B5C997
DF742A415DAA0CE1B8745736395AE80A8BAA07F1893EE9DAAAE01D549A252D77
E79AD37BF1594E3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B8661662842642
E43962CD0B203CF0C34C4E0A6D5C41063DBE65E34060F98FC38430DFD56AAFEA
4135F59E74D468E05988BFE7F399175DE7D08904B7A508E489571C79B5310054
E8AACA4ACE065E9060B8ED8671BA724909C1A3443991ABB04CA2D32CDD53F0BB
71EBEF1D3FAB9CEBFE5BD9DC1454D461B2681AAC16693FF62D9E03AB3AE268F7
C2F3919739DB56F4522D02299507F5DF31CA0AF4D72077111F936A36E33A15AA
AE3D4A2A56DCC2A73404E970D68CF5162AC51A6AD727D94AA242D99B153AB4FD
74DD116AA1E3C01687A658F558B8F61516680DB3C059EA8A23137AD2A30F9CDE
995E06A82E0E3D4D0616EEEE3D23AC8E183D32A58D3C67AD87A413F6D9746B6B
CFE2EDB8FB0A974AFDAD1A5ABCE8FA93A340D6FA33885C9B9B69B1C23A4E6B60
8D86B95CF89CD7510A3E65B51023E7310BA2D369E9DD9EDE9AC14E4FD09695BB
DBD7994FDA0707B4820157A9D93B6B6511AB4FF1A435EF8D03A4E346E54963B0
5614804C9235E28F5D93FD74122FBE17C4645285B9FAB32BCDC051BE4025B683
9664B8ACB442D8672C7E742F52F8B85D78805A95B8CB191C775A2DDEB43826EC
7EAA37C1097D33F137E4E32BC68D8280472A48152FF1E41C94D9928885FADD5A
7E59CB42872E6AA781F4570BC50881826A306E1DFD7A9290CDCA4A16FFE88CEE
D47740E0685E046AE1B99F5177F66C4A4B2D5FA12F6D881F390A0F59258E4C76
8AC0134A614BFB94C297FD39889A5CCED84E6A9B242B04ACEBD27260F059F014
BDF376CA48DF034EBCF26BF1541090805059DC8CA6BA8D3ABDB9EE1538E9B119
28A12D7760FCF854B593ADA3B57A15F8AF7771A5099DD25A70A0126D126E9C7D
4E169742EC5D2B6043E38F9D3D350C7AA1644047F74A2E0794D9AB80406E055B
5274F7BE5100977C6FC6D6D689AE576507F3A39B8057F1202A83E86015A3E255
BF5F610A61CDFE7F1EAA77D169854A04A6DE12D47876613723BFF4A68DAE8B5A
7550FE59B6053CB900760BC042A642E33E78B960BB15A2E89395A49AB5121BEA
666857D012715E3B92493BB601205A40E58A483766BE159D101863B1CE6E7D80
0138FDFF7F5B941C7D4C1A6BC35BFD2F387D01E4F56E5EC1E636E9AF44D989BC
AECCBA2C9619BA020984777DC32533D1B154381BA3ACDDB9797E3595FB04365C
D4B4A5FF216BD8534C4ED6F449E969B40F89C7BAB3F09769CB0CCADBEF20034C
2F59E19726BF8E436DE292F16B38803D5D94C3C8199AEA2B6647A883A461F0D2
C819AB1BD86DC885DEE281E53E2BBA2BBF84D8D4DD7FFD836407D51EDFD1383B
E1BCACBC9B10E2D7FE4A6A28499638957480556CA407E57C5BE21A9DDA0AD4D9
24949FE07C887741C0A255A16DCC32BB7BB54CE2DC59D4DEB7F340C8A71E60B4
CEB9383ED0A8391D817BF93003D99EF3EF4BD87036A247571D2628CD9A1A562F
1481E59AC6A907F17A4C84ED0BF61A99266AFE0BC2925DEC6603425478F90B09
7142D73136458A6868587A364E5DE440E3671EA82ABEA5D6505375C53C1C54F2
74A2ABC15F6E90F7ACD4DC86B73EBA2F8F54CDC503FE67ADDA409BDD0F731B90
C4F19A0999B940D7B30E13B1118FD1A28784C055B8679004B35D754A18A615A3
D23ACD78645D8908B6DE06EBB5886888D4A6C5C7AA46BF45AF4BE80774788776
78AB3E75F3244DF4FF6E2C70988FF57F1229543E9F505EE9EA569397DD2D8B63
33C5647E33ACCE6F11AAB9974BA91A037E8F82032B7F7ED9E61AE94E5AA7D00A
C8FDE35422E18D1107544C13AA382A565F697D561034581568304D52C6D83326
0A4EA5EA2E051985D4BA9ED64D12AE542515AC1374C62651835900CF9323BDF3
2FC40F93E50CB84097243D32C2D1B6BAB87489E74A732B9B7F6CFD3DBEF46E2F
7BC79D272D8074CDD68340D52E137B1DB6FF17B6678CB3F1C9B1FF14094FEBC2
24D73D391F0AA6AF31B474E27B25B6AAB2F67D8F7A9DDA4E8CE8CC248D31ACDA
955F9AA5E0441B3B388BBEEED1D3056387A8F66056F954E4C9090E4A38386A63
47B7446990DED4390410057B008334DD2A25E3326F02BD117F82FE4F8D74710D
32187BAAB8C78E9ECFDDDE7F42128EAE3004F46894726A7AF96FAA938D96A6FC
2785A8C80F736AD31612362758E8DDBBA646816DD1E6EAF6999E13D836C7B0C5
7117C97D842DF6AAE5843C949952BE48F9E5C850205DBA7AFA87273053365758
F50534E61D650001BE80A48A2B1CAC0D9DA56472498878636226AC34ADA1597B
2B23416193A2C89F08E56C9637125725BF8CAC5473F8755B70B4ECE61DD6435F
C6A7C2B91B672FA23D9F875C001E76EA321A5B0A94FED862564AFE70CB777340
59B1B136DFA65DEF4997F7CBB7FFC71FC82F8D173315A44103BDF54398519B5E
05F8ED25325368D4BFE10ACE43981CCE9FA80DABA04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F392A3C7A4055D56B801F96254FE0E52E4700CC663CD9F1C91
C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2B123994334BEF890240C606276
B34A7453D932AE04BA8DC50544C74A96F6CD2A907CD9398069A573964AB81D00
731AA12F78CCF3BECEFDCA01075C07B67CC7F6C981A1BFDA28D5BF0F0F1E3905
5E86180C7D70697B73BFADE92A6D8B2AF034C738EFD85CDB54556BC6C7FF68FB
D043603C6C26CD0F254CD8A11ED77D05FCB64F261AD82C4A6FAD3B996A4BA457
7C38C8D4DA614E158F4693FBC3115A5D0AB5D098057BB2FFC2399D9F67A7A438
1C9283191844BA8F78896DDFEC3016130B68017CE4B928BD9A8633E12F5F0E15
73B4EAF93F32D4DA0BD5BB4D841672A26EA389C49E7CBCE3D62B490CD8884C44
6855340F9232A7E8D4FB1C5B6D1A5FDA8E7B6EEE1454EC78D44CF0A3C96B3CC1
2B868DE5F556B5B7E9971232DE58D373297150A1BD25542746ADFAE256888BE8
E7AB32A13A3DC4FAE0E34E485C31FB2952DAD2A6167A48606C83FBE5FC602B7E
70A0047A05623D54F22D03931C568D68DF1CCA64E069D10DE577C4E43F0E4BBC
06F20AC7F81248FDE0B428EB05FDD26BEEDF3943D11F3E54411986461CDF084B
59B5786859662242E4FB891859F8D245C74A25AAFF389346BEC4AD125FB66DCA
12A965CBA2123F9C30FF7F2B77E767A4C9492E72CFD9691204C1D900CF57932B
A4C9DB0F15FAFF7CBD701050A1DB9F05E30A67FA23F60759FECFDF1379E61C14
31AC809D401D2B7BC4256EB11057091DF68C3A9475CC0A3F8F2E4F70BC2C42FF
FD53ABAF7ED904BC8AE20B2B15F19F8A03B3AD6B1DA2D5D8FCD132607964E58D
19D8317B77DCB33EB74DAC05EF13006A116C82E1319A636C7D42C6CAAEAC3FD0
AB6AEEAADB72DE788D21EA16D247D6D3A4545858AA7A9DC070AAE46948ED4831
B9682349058F0AB3DD3C34E9E9DBF1728BE7D46E0435F3BF94F2F019832A6D1D
58D1071D3D286386BC415C75B275E6C81F049B145F14BB6A57A8209D2961D621
F6CDCF1A1A7561B5B8F7AEE37C714CFE26A3C1C28E91DE1632FB202339095AEA
546B0A3F05C7789F3E9C32180B57AC2F081726B5230D7FAEFAF02DC8E4C2826D
76AECC974203B482A98F151CA288979D907126C6A6BCDF7DD623DB7EBDCC5EA3
5F7C4AF039C7D12B6BA9169218D70EF87874B2524592D4D6813FA53700775B2F
6459EDB9D667FC68BB092854DAA7B54F9E18142403BE85D1E2F89F77160507D3
66B9CBC118E355CDC5E86364FF13B34B86F0669D4D1344E414D0D88A66D6B4F5
6BEB9360478E29A025ED6D9481F53CB3E5279437695F4A115F669DD6039FE44F
8E33DDE269A3E703626A0F204E36BEB8606041ED5B9C21CE4207DEC332AC167E
282459BDAF6F4C56D862C75AFCD3E19A4F5D703731C17E595D0E697FEC6C9A25
B8249B6BE348681CF88CE442026AA09F828E59584BF2C6B3A5776BDA43E4B128
3ADC30DB82832166A9202C67C9E65F1047EC22A936598B5E50FC8DDC8DEB238A
2554A33C7358C2AAF242059AA51DD77F8A56C433059E839702F7EE08F27E984A
DFC4099E1610A8F1ACBC0DFE56DEF7D42B2D20D6BDE27B65F9176558D8B65362
F61FD87D9D67AF025C9F7479F64DE90E4A3DB09F7D4988BEF2B66E5A06922C91
F5C99F9CC06418549D42176DEA4E100EA4BD6388E57AE9B7B392D167B63BFDC1
102565649B536A78D0269E8D4CDB7F92E030156C7AB18411EC8745F5A2504B35
3171B8060DAE8A58AF29A28A5E7AFF8DF1AFCBC64D00EA6A7AC505A4349861F3
FE8BCDB2B447A5343C788D95DABC4ACF593CA80F3E58961CB4947776D74FB575
71A6C97A4FB2C2CA4E89F6003274118D0B8D1E0D16E12F268CD34DE9BB73AF0A
E804E361E17E714A55EC6B6F452C1367BEB5D5FCF8A418B61D0C3D28A6836364
A9D17B40FAE3FC5EA21CE3A2075A5E0121CC9E245D34A6F1B4B45EAE75E17F79
039819178A985CF7B2AF77E68314DF7F0434C9599D055D786DC25523AF3CDCD9
DC0AA1123723667CAA346973A0F5066F1FE1971379E54DD05E427C2DF89FFC8F
337C8CD0510F06A63566E4E57C50FD29FCBA3FAF5E895BE7D9C19A7104679524
74962267820935161A714F070388531C5BB9B3676EE853A00BB06447F7DAF259
9EF2718C3BBE737BD085229CD7C2497ACF94D46E085D6B51FD3EDDA3EBD21CB5
B571D21EBA563C81D37E3D54588330C297834EE3AF5505DB8C3431C55A20305A
A1A087B1CC97528D5088D1E07DE9A232AAE66BD0F0A7165BE3EA9261F7BAD646
B373701920E89CF72A34FB9469E4CCCF24ED625237EAD55FA9C1CC2958622C5E
CD72D3C635376F88F28238E2BC34D15E5DF5398239194EA386994A41063D2E2E
868BBDABD12521947BC5569E0B58AEEA746AA0E2543FF09378E5799447FE26F0
2488C0C56BC9B7259086086D6DB7D4E4CB7F8B315DBE76D0F01D6678376BA32A
BB536C1CCEB28652BB817C28AF3BF5C349B6B6DDE84434A7395BA02EB478F07F
1D12072FAA7746BD98E8FCC5EFA3A9ABD1278BD0CAB02E0157C43F632D02B9F7
3DEACC920D6060DB63D12FE1658B473F7F1D4C2912B3FE7941F50B2978AAC500
E170E2BBBECC09F6E1116BCC6806DB370020B992389E32EE4328A88F1BAE07E3
F6CA5BEA9C75CE43DF7A16B38A4C65021C071CDA2BC680958FC70C9FA4C882B3
C87B0D1E0FD2F60DA12ABDF5C63C5B1602823BBFC0C03B7A421A84185AA1BF42
7D1B34CD1E4536CEDA1113783F70F630B32D3501FB89443353F1F032FF5D7F7C
97A02506798076FC98469582FAC2901B629CE4137326A88F6E1DEC6634D31682
B53CEFEE5A5C18087F2C3B28BEAF58B3EDA5621B22692E464DE4CD3E76C93397
F7998AFD5A64D69038429EB2348F345EA56D9F24F947B9FB2A4967D4EBBB0EDB
63150BECFCAB9AC7528E3792B8C87BF92E6A39E5C8D7E5BF6AB303FEBB2C20AB
717557BAB2FFC553ECFABC29819D8E9487FFFB4C55FDEE648948F92CBC5FA902
E0D0DEC6AF76A0DF223531C12CDEC349D2325D6FAAC3C6EC604C284889CDA3C7
19DA2D9A4BBC6FEB4F09163CA4902471D28A37111149C34E4D3D6159EC2CDC8E
70F1F3C5319FB4A1C8D566B120010C9F61CD79BFA55A42174F9024E34A71BF20
230424C778E54EBDBAC48EAA0CF06C0A5A9FC6484CD39D18A81F7389979EF408
D778E57338EF0CC775797678988274CE2AE002639D314CFFE080800EDDF709EE
8ECA30D88785FD165B58549F12163570DD76D933F5B6C1A7BE4066E1E941A608
D1ABEE882F8B8E79C83639778B44311B287E25E918991187D441F2AA90E6E027
E682C4F6C7A55DD17959CA190630ACFFCDE63AB90B9F4CD12860F931703DB69B
14ECA94EF3571938E175A1D4A6ED3C2D0B1B96D7F061EACDE498346A3CA6A77C
0F96E8F754462F21E9A2F3C11C5DE4ADCD17E1B1862F87858284DF3301A70760
6734572F807049EB845BD5EB238BA56E63115F1A4B4CED1CC44BB69DD41DE505
CB7E35AA156E5CE91FBD5F44F0E247D957956045B16131105A5C59F14F692AB2
81984EE6A56410101576B49CE7F51D4F6A6277A32F6D5D10F8D4EB8147315E5B
D5FBE88A1ED025E82B764F67FA7165C2CA2C4DBAC2EC5EFF288D89FAA943A90C
34D2B74537CA1B5456842983851FC922E70A6E9F68B17D0305373271A4C06932
2D42C893A30F39992E83A0D7A93F3AA16385F40896D4A047C14C559E7D60CFA8
65B49FAFAEE9506D2F10DEE673E177D6279FAB9B0A09C9002478AA31E4240F13
D73182F04410A11D13641EE6AF9187E298CB7AABA58E3FB5B4C7E86616C69BAC
C61113AB38B1C20D59F97D4DD6E50186F11C5AE8EA620A43380708A59D633773
6BA2184DA061F6AB3B22D6B067211584805688C232D2B236F56713C8459A2E14
22627D079DB00F337979DA04BBD485BD56300DA794ED5D9B8EECDF403BCD3BC8
92094A5128E251260C8CEE4C516FAA24F57CFA5CCB8485932F527838C9E2F188
9D14DE38E5A708FC266E193CEFA816D88F0C4D6C5DC31B9113F84D814CDCAAC8
30DD6D2B2353019C8CBCEF3798222BDE53690FAF7F415B3CCDE7AADBCF72697B
CC9D146283809A2F4556AA437BAD036E1931583807EE0A93E8487FF01E951EBF
31F8B1402F7362B2EA5FDF15CCC34FD6E996019857F82B0DC22D4242A24C8218
1C70A2A97C97A28C4750D9F6C92EBFC774E82C81D58DD157C1E7187A8971C66B
0FA98EAF74A87B9AEC2D29AA0087D516607881F599333565B6755CFECD5A7D6A
FBE3357B279034825079E8C4A4ACA5ABA29958F36904BA4D3157ADCC999B46C6
0A33C0E343BB16449961F30B34D1933177E5EADA8ECB3CD2D68EC6563CA73B0B
F0D53BC5CC5DE889C158B2E74025C69EDD9422F77B27BE88174CAE7D8184C713
8D98D84E467E5A83917C608A8D11A4810805D3D51A7CDA9C22BD358D4DF6FDBE
3B46604159B5AA395D66CB4F4334D8B1F3FC735507D0DB5F68F2D8B520AAA7E0
F1D50321133AAA792BC55186C6E84C2E1CEFD0BD71260782BEF6721C7BC38BCA
E42E376A4BF18143CB463B43B8D35C1AF0494FB861FB7FC6B4AFD951D3E5EDEA
88234888B9B7859B5D7F2171469DD7F631CE8016112905E5FE16FE502A4479E1
22A1890B785D302C38EF8C02F86120E587F7F3E1AEC25051081C696B4BF20053
13F6D6D55387C03EED12750C2DF8B8F596612934B1A833E715BB50FC7489227D
02446817B10C94D1EBF9CA1FBE120BD59E708A364F23B1A6A956CBBFB8E3BFE0
248694758D9BECBCC9EB81EB3A66AB189684ADBEFE40D6071C2D18A0B9081977
4D583507677B5EC78742FEFCE44BF6E8AE22EB1DFBE8CEAB5671A806711890C1
AC5997F21A14E7523CEDB295474D54EC12F1744F0C101D3764B8BED3E225780F
2D9BFB593ABEEEC8611F427FB16BFFBBEB73850E2199B8D101CBEAE756AB00C6
C757576EA0E4C8F0F14614231A275835F6C7336438BD4A45B7C8FD52577A49AC
DB394CBBC16A24EF8580D8518F86D5368897BB038CF07FC21678FCB8CC9628F1
85FCCF89BC0778B174A9FB4F5872BE9544ED3018DB2B39A9370330D258EE8515
E8CBC0DA34E79D832DA89D875019E23C31650A25CBEEC6B93C575C363FA80C83
0CE512998D42FA38107DB1C1CB3292E6AC20CAF1E705922C91F5C99F9CC06418
549D42176DEA4E100EA56F3C462660C34514D95C71475CEF8093023A46626D9B
079972D32B0175CC893C82F25885DA6573473294AC4FCAE543CA6E01A14EB988
19E6ECCAD9C3FFE7E5403F304E170A76FB49A7C535BD506B2B226033A297EA3C
8C9C8F7DA0548777361E9F6D6198FAA089A7379BD912296E6B564BE64896CC6D
EA0F7E3AF4C39EE4E68AA31889A374695A5AEA9D49E3F8A19E93F3B6ED6ABF5F
BA7CFC2157CA6F528840E8C30572AD06D6EF7B0ED471DB941811E83326F032CA
0DEABE21398FDA5FBD5500DCA48E4802CDEE320D30F871E16F52290B1D877C63
81D1B21393E030C61D7B79723F7A2CA078E32C968C0BADA2601C1CE1C1B3CFB6
B199BFDB6E6884D083F28559E60B30C220A2DD1C72BA6C37D351D4A88908E1E5
7D683F7DF75A468CE25A1FA6768AFF1C80468551E82593219AB39BF20402808F
BEEF5D5AB3BABDCD98A63B8F3650F86AE90725D1E53AFFA58D8467322EB65A2F
8BC6050605CB87F380D7920CA753D1963D180EF18D90A8CA521577DC386FFEB2
7035292FA869F347D7EE2A6148603C8B5BDAF9AB2831B8F4825E82EAF0F9AFA9
C087F43AD07BFE56FD1D6ECD3F8DFACDA4F4CCA46CBC2C0E86E4DB8F5C31418F
FC78FA787963AC30C3CC71D1B6A8BBFD963C92351F4D749EDC2373D635242F0D
9CC02F1BED5F60F5C9977D820E70CDD934502673993A968DB1C85B5B9A43E1C1
874610A1EAE4D060128B422B6C3FE9EE339CFBAB2C866D8E21292C680015BD53
6A1DF4CEB57A18820351A6BBEA97B430900C1E39CEDD870CE2D6F34A1F89603D
6FB6BC693EF959078763D9BDCB5E906C1591107758A825039CB1B4E522B5C87D
E1D975B08CF8EFAE3CEF3EF3ABBADB2E0722A28D29245A4AFD3AE32BAE8DFD59
DD21624C48090CC3D3B7A1ECFC649A614211EBEBA3D0A82B20021D530700606C
EB24A581288CA7BB872A4450AC4A843A50E0EF065F9B49EC9587706A531BD668
86F44846174260DE22A027953EFEADBBDC33AD0942BD8492F6E5466431718D71
83A50F5C8E263B7E189B0658313AD9892F2A258F023C1E0DEDF9BA72428181FF
A0DF52F37B786A58AE7C2F43D985874AB8A3F2044DBD4B9240F8828A4DC9937E
A9FFAF8C077A7B40723F6B701EF8C4F1F9B7BECB0339036F3C3B3A2FB108872E
8860AB6F6793F29BB9C374B5FEADBC644F5DB80AD83E7792DE58F2BD45606C83
FBE5FC602B7E70A0047A05623D54F22D02E2721991AA8800B6FB0EC0FFB31E67
81211DDDB191062DC5BC2058C407F125EE256A951D8CF895A44E006FB6886760
C1E7EF7566232A6E513C7453D17EE21BE265B06FEFFC1B16AB69F3BF0575F598
ABC5B57218EB1A6ACC8B30E08856CE35E812EDB26D73D944E82342C9142F8253
D4B1916CA2E00321E3409DE3B9941C7165AEDF16E6CDF3125843C10F6B022695
445B95A6A7487485A275D4F8F8E45F73DCA2513811A6517DBDFD7D818F48E683
53E3EDDECC2A93B482ADF9BFA9BA653CA71C9BD82D057A9A4CC3287761E54228
CC345D7C5AD72C7EB3C42AA352A564F2CD09BBEB1FA1FF7EF8999DBA1B10FD88
E772B10E793D2CED36C34221A80A61C79142B953602628FA17E568B5ECD7C9B0
A6F6C0264048F377A11D08F846F08A18C0D60C7E1AA2761AF25BD01C501409DC
094980FE3CE043CB73B31B54F16384D54058913521F90293851FFA7D64087727
DA51CFF0E36D2F6F445CB662BD8BCC4CD9229C3B369A7D65F430E83301544A15
96FB497EAAA77F8208A4FDDD613E1E98225608D19BFFB8773574AF9233F45C0C
3E1F77717FA3924B7B7C32F3D4A9CA4FE72E6C43CE1528F182ADD08A93C2803D
E442A578F58EA8D520ED2CBA77A3F888F990BAD4D1810A9046288D9C33E403D6
0CC44F0BABC60F72CE2CB794D5D86E1A0419D9579B60F14CA9CFE75AB6288B53
1DD76F5B112B0D2F53BAC7A90C89A114C17D7BB7A7D771AEA61BBCCDA82A2973
034B82F22F4D29ECF78540427039371C045B266FF717BED80530F18AD533DC0E
8D85F9DA995E6FCBB0C3BC8FBE78E84B1D5FB3E0B29DBBABD906CC19E131BD43
A669BEE00685E959E295903FF7CA111DCEF22BFDAAE0A7FA0303A0269B0BF44E
456A69EC3497D2D84B19F68EBF7125FB02920466A89AA52F46B49774F8273B5E
98BD87426D2BDDD57353527B96579D536CFAF78E601BC228CD716E472C288EDF
417DEE6938763DA88DC72FE6A7DD768B984FEEFE58A2013413CE17F036C10A98
2D3D5A26CAB55D1F43B9F5C86865E56BD62C6909B9FA2B48549448241EE25E1B
5D82132D49334E9CB20A617275B4BEB257C6238D56A1FD2E970767F1EEEBF97C
F8D7F3E36B580DF9B1AE7581B12885299F2E834DA45E999EFEA0D47007363DB9
164C465494D32F8E7715677479DB92989DF0BDF25EF5F7024C75B312709B288B
D7DC6DCD6FD5D401B0722F87176A0D72ADC1049F1BA37779AFC8C0315E00DA93
7DCF13C49E7E3427B1468DA767BB437092DD7CB45AB434C53EEDB7645170A6A6
B6C1A85D0058926158DEF85AB1FFFE0A6A33736CA5A0A7A75023BD9BFDD0C94A
FF9A394A21568AA5756B2072DB14584DFAEC37FF325290D4A186A0D5AF2D15E3
3E6F6A2701AF81BD10AB4443949CF58A257E97A14969834FEE29E5CDF49CCECF
817B88F8183B94C9CE1424E86B08846F902CD400D1F79C054C5E3DFA0AF0A538
61A009796C15E07C79096EC53557460FCFA16FBABDBA9EBDF4DE3A734D55417D
4499D2274EDF5A8CE52E360EFB5E0ECF810FFBA9BDE380B680EE3AB9B3566A52
6839B597386E852EECBE1E315834B81998CDB22CDB96A25ED403ABCA3F1BB14D
ECFB18E5B96AF5CE6F3D1EEFE8ABB3D2BCA2CD5BA3CD63BF413466B54EB1EAA1
C995B7D1A07FF0F73B0283C8843E9A3001B4C98D804230788460D35A12C53A21
2095E8459ABFA315AF948FC6212DD2CE8D723DEAB785CF0E1806D7B4826358ED
A0DCE180C8257A3ACC1122CE497D5BF45F0130431ED0EC0CDB28866065801AD1
6AFFFA9897485FEE2F1DA09222B1A783A8EF2AC87D34B6407522AB33411ECA46
2835CD37FB970F7B11087373B6D43BC6E86AA0D5F88AD08DDEC6EA43CB339557
002054212AB9C5CF1A074DD69CD63A305FC549F4D79F4BDE53501E2ED5A81D91
A8291E2C87CF6CE66357C4904B79B704C799AE090C2E12A41A1C14F6E13EE500
835D79D5FE278516EA983936A6C22848D99AB786A3D5D0C5AC216EA68F8F7D3A
5BD929E65FC76DE74B7B16AA04828FE02F8C2A22BD64092A5558C8BE863F189B
3E4F336841E8CEE0825DBF87AEDA7FD8FDB80197616AF346FBD5F507967F12A1
EAA5556C949152DF2B6BEFDBB6DD1C40BC813A1C32744F72C2C4E793262F5E73
45E8891E0BA36CB5914A15859FF2B55B2E2E72BF4DED81403B806EDD07FBA3EA
7CC591823E8E8F0E72A418D94AA074BF8FEAC4F0AEC8ACD59C3ABA73070F8B3C
4799D6498B2F62BC76563B05D63BF0D1C3CF1E5DC7C05F1C0D388F58EE4C7126
7AE00ECB3C6464C6657AC6980B91657E5ABECF299A8AC6D254E74DC1322705D0
8EC033F6D1A5B6E1D8A2A3EA61B8AF242E4F815210D6C2EAAE014C26BF75ADEA
293858333FAD8A5DF5DE0EDCFA64792B40AAED1287E8AADA2868B5E11EB99A49
944EE165A56C8F43140871BC528641F4F162138539A052C771BC53913DE8E26E
48E8AFE2E2AEFD37CA33B926211F5C92A5A624FC79EC6937B5DDD739E1B59730
59BFD124F2BFC328DB09AADB8A0C667CCE4717B7070B93080400E25D70A165CD
4510CA50F1B85F57673C6CE09EFC4E229D463548AB4DC9788CEB212797BBE778
DCDB2D0F6726BCF115DA153E29B8F25CD74F91C9239CF4C16C523352299DA2A2
20968B1682FBA1FB7D44FCB548EE2EF56D3E57F221A0D22FDA49421240850599
926BFB60AEC2B30D2A6340553EF696116B9E368CC0191FD3EC665A0F563B55F2
738B16D1FCD94EE68060A81E14EE323080F4DBF77A197944E1D282A9A5903F42
AFB4E19A95C7D9B71C7D637420B70C1396DAAB55B916A3E13042CA78F2DDD02D
8632B42602C7E7665D1D65EB1583EBC21520FAF42680772C1BA775AA202D818D
8B16068294BEABA5CBD4F32EA6822EBBB7B5A456B9C11C290EF9B8E5AEA2B840
DFB40191270EE3B0F8F7F6018C8479E187C50BC36C500B101DE6C11079EDE003
B79EC06C7B364E6040B557C7D6B0F7E5E5521E2A1AFBECB7ABC24AB041F3C6E2
B4FE417F3CB94335244FABABF77B113DEF98FEA35066D72AD708D3B7210CEBC4
B78719BDEBC7711FD414CAD3D3084BDFA10483B09CA310A836435A9D29730867
5D34A307FAAA9B65EBB571C87D1318EE0CAE193EB0EC4A380E3D9615F917F93D
84F2DEC7C169CC9DB82A8970B3D8B94FC891EA72A2E4FB46159ECC3F8C31D6A3
99B64C56A238F977E9C71B2752FE5C38FEFD02FABCB0157B9B03C236978B5120
A6C9445EF559915113DB2CA6216B156BE4E09125168F0580E3662BEA42E808C4
02837F5F86838C84C7CBDA804E9D19F939C8C597C31A59DD9D79FC9628E73967
9A2AA64704B43F9921BF84B06A7F9DF620472AEC9FBA41845F99EB5AE71AE1DB
CC790C0F31455041FAC32FE7A35072AD898EF1C5307D01A1242A17734C0B2084
C342EFE3BFC8BEA8DBA09F96AE3404921A0635C491341A5D440FCEAE92E67AD5
AD8EAD9A65C789DFA20238EBCA185C1B559421D13BCEEE046BC57F8D43016669
A0CFB5571AAAED118CE796EFF695B2CB4CBBA25D0684397FAC60D2F7A58E7470
FCF327AE1CE73C6A562CF04FE8938187A3A07D8470EFA0DA34E62C1E3E2E2BB8
D1008C7F6F3345504AA6DDB1B6FCCCF4FC39E0E4691FBBFE50EA6A28CEECD551
D5697BDE441E7A5621B04A1D6BDC09DBD6AACA9F1121EA34E746624931871EDA
8BEDCC2E242982CC83E7C6CCAE9B1E96CADF8152EC5DD89072F6A6706A78A42F
3F8F39BDD5BFD001C535208EE5EFBBE966B951BE009B45A9D601D122391FE6A5
14D30057A58A710916E8430A3E9FF2765E3045005B875BF9F0EB69B789EEA85D
CBC542E951E4EDD14458C6C466BE243631746109BF320676CFD7404DAB029AD7
90BCA6C9E5C27EBAF2F5F973CB2FB0756E31550D904BCF118BF65F957D0E507A
D59CC52987635C2CE038EBF7586851DDA7E68CA143F29F7D434390A0F0B0E0E7
B8BE3106B06B6584B60B4AAC42236A3E28110BEC36968A8B5A68CB3202EE76E4
33A4E78563076E7B4BC6F3D689B36DD9A77D432FCFDBD7983041F2850D8B5A27
8B6B3E72E340ECC682A416B7C86CF0F0757722428F8F669B7B2A07742E71B62E
5F276146925B3DB9299D535DB1382A0C7AC35B445C7EB9F0EDE00E91EB8115BF
B080B2E1305DE178CE2BE7C52056D60A7CF998D6E7B49B36D071FF1AD69B3153
C04F46174BFFF87BC43B7676E72EB75563F1B8F9B675E76882203694C74D8EED
BDAB78BFBAF24E7A8C803405872B297074356E75788B2A753649386F98EA04B9
7CB6E6549DE6737C8056DB5269C2A619913B5B5A78D80EECFBE50A1D86776B9F
CC57E48B28647945DD6E0149A6017ED55954A73A00E69C5173230964FDD2531E
1BEAF84FDD7F8813106BEC678415442066996593C9C96C4262EAD098EB0CAD21
15A4EAD623FE5713AFA4B96B4EF1D6A69A65EEEC777C88D8E702545AECECCBAE
2C0377D9BB0840E7C4BAB958DE6BDE5E8E53B29FD4327A437928732F24D4E387
3D2DD75B0E98A3EC10F2665767A912DE478AE9C088D92C5C9473727654A32274
FB64ABEB477FFA2AED426205A00358BDD2C8C39FCCC2AB4F5FAB4D33D3017BDD
F9DD23E4468D365E3CD17A3B83A5785CD578C51206C32388F766EA1DF776439D
1AD176C39E1A03B421FA0B700631A9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5017EF863393113850793875697709861E50EA63860BCBD
4746CCFF44F0A170A875B6245B17861E28EC28D50FB9B75978D4D7919969931A
416110D7D81BE6B6F0862FE61618E8B5575F5FB13461FB79B473A8EF5C815A19
621A9BC5B1C703AB24CC6AA36A96D66D67F077FD6D0977E8069DD79D487A67EA
1D9A22A508EEA8494F7BD45B8D65D86C58DB747A2455B41E7CB3D8C64769914F
77F5C7C882B7BF79F5205F9E9A1EC74128D2448189FA0AF72A54105E7A572DF2
54355335500897F2123353CD23FAC7E2B86EEE2936DCFD6F0539158D3B883FC9
107AD8C633ECBC2EC7B55F467F12BB61BB5E69BA4A04B118AF10776110E31887
3BED624E3B07B6F315F241825ABD849980EB243937D3DBD4B158DEC281D83070
0BDE3C3A46F0BBACD422F8C2D24A8FCD9B5351F64D0D5C17307DB0D983B2478B
82FBBF99BDCEB4B92BD72F54E3F35A448F9B520EA55BF8D0E39D1EC954B803C1
9DD4F5B58C4D2012E04E630F515E958B699A14BC349FF6B535D1F2F28A9FDBF6
1B31883D9235708F3988B2668540D20345FA57D34BFB75310C2D2810B26906E9
E6BC661CA55D65BC325F2C13A8708665D55BE4D6F30B62DF2C41352021125A4D
AB1222D4AE108BC688B82B188847CA58536EB5DB161DBD13A927892557D96A58
CA946D021BC9F43F89A649676321FFFA0E5FF316731DC3556B48BF53EDCE1499
F3925DACEC43096858618EAA62D3616BC1FB3B7C5F3EE8F027074C78344DFA13
2CF54473AF0AE80410C4FBC3A45FBE3BA440DB5D6BC4F61076183D794D01BAA3
DEF86BAB53D0930764EE3CF33B7EB2871498F77858BE6E3FFA70E0FFB4CB01CF
7EB213E7AC5A3C6243FF6AD2C9659F2B367930CA8A60BED8424DE9731F913912
E09C9BC7BA9DC8878D61CFEC7D90E2042F2635C15547CFF3567586D8B3FD4A41
EB80C03E0AE63E178CE4827CDB9D97238D9D3C7BF7C6C7706CA0873B79E59C7C
763AF61B80F9591A6EDC35521906A2930B434E4520681F8EB422E4900E7166B4
A2E682AC1AB5069CFA2C9917F00EA3794275CE286753B61F0EAD5D40223CDA78
21C43F82A4A9F3B2F8CE5BA6289CC03020478B7AB844010AE6DE043B66DB60F4
0F60C084B3248DB67C3338EB83DF864C9D883103AA2F754AEDB36B11B061A66E
2EA289449255AC7E6F0167AA51C520FAE30F71D18F90E154283DC24C7F4939CE
FA96584B0428E367EC9464E12D015F40F6AFB6CBF71D368CFCF362A510961690
0095F8949AE6093E819938A98B8E183A4CDFC7F6956B3B08D48C6CE08B98835E
F4805006148D49B8742917D1245C54EE46D9F435B5F574AEF172D83F1BE79456
00BC0C34FC74ABEED041258062F4615BF985984FDF0AA50E6FE65C6CD17EFCAD
1816C5BEA159FEF3D5FA27CED539B86874F4F7028C7F64E7A0030C6E4242FCD8
DFBDDC98926F1BBE1DD18F63ECA8722E74FC843253182F0B67738E423112A752
F6F4349BC7A94E409EDADD349837C0E3163AC31C4A8AC49F0CEA39325DBA935D
DCA678800D626723663670C2EA9ACA2D7CEDDB21E46AAB96702B37E3EE5DC01A
9FA9D3A8F7964E777729EF94D1256EFA79FA7C7861809B46AC542089204A65CA
971098EA7AC97EEC097E978C1A327755A41E2018B2B6DF2898C81AD0A1AFDF60
EBAB95DF741F3C6FAD707FB3DDBD135D9D70FEA950D731796CDFA6A6D7224708
7AC196485D803AF22AADC90CE6B4B2404D5A7FD5065FA6311F388A52A9D3AC77
6805D9FA4353538E38284321608C2FEC4B57537E33BAE590622B25F2722BFC52
B17FFF90F7BEAF5439FAC1503318BFB6C4287480EA1B80901F6ED70B3FD5A6F2
B0CA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2D6137A0EAFAF7E99E776758DE763ABBDF4941EE3F019C50D6
95AB27025E5B23E9EDFDC28477D4089FA7FB24903DFA8601A9A94DDC7CA8856A
61906BB7CD5369E9866D34B4787C34D8333876B55306EFD1EB85F4F7C4373DED
D9ABC33FDCEA9CEE604BA070EA8AF73445F2B3D162BF0BF4CFE393FC90D13EF0
3B05D613B253F34117B33916DE07122452693669CE60E1EE687CB3C92EFDF198
20959B28F5D6AD0907B6E4B8B338BB46DA634F07DFE77A4B16D1842C5AD87F0A
6ACF0E5B159F8FBE4AEF2681C2D96902480E4D107381C72D203BBCC9341E8242
EF8C770B22DE47BAE6D026B56A63B31C16A51E7B81164771440C131B17A026B1
1C35C6417958B3D6F3495EC3D1F62640E4F7CAFDA130212E40A68E47962DCB31
39FAF4746298CF54263F982CAE3C82B9619E3DBDECB17038BE25A83B43CA7FF0
A296819C753E396B1A1CF8E4487D117421506063ED26C7B061
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3CB3A677904DB96A4FC7509374E544FDFD4473683CE7
52445AD38E6F3AADA886EAD97F34E1B4DE04B482145F39350CB3BD73F6BE22FD
F714EED60CF92C851335C54AC440689A9CFB00470F98FE893DC9FE736A73D749
8A032F336C94C4C3C0F4ECFA9007FD8BF48AC4747D6A07A1EE6BECB17039FF93
8277AE848F2424871BB26E5F9963F3C6022BCB476ACDDDC00930BE769752504D
9980BC8D8085015695A4B206D94F9FBEE46F6B6338DD6CF2924E49D59702A6B3
E394C790FB4FB698F2DE0CCFAD5EFC9D6CA122FB2077E554C9C84A1760A7316F
84CB56870EA2BE9D0B1D1F3D34CEBAA0367AD81238E83705D3D364B37D066466
4C6FF0AEDEFB064DA57ACADC778ED2784B3423154B7FC03D43F47C6F505D45FF
0852F8FBE17F4D877138BEAA81CFF4C06850DB2F112B40FCD3E8F4C87083C3FC
BDEE31DB7D253FADC2D5DB3E63BDB98388322D348850314ECF0C50DAFB6A411F
F6E25AFAD63BB5005871EA0645F89E12CBDF247FCE91F39076EE06BFD3C04FF9
33CE48AE61ED583AD674D12B77414032B6391A56012DCF662892D7799A406B7A
6D96510D772EB2BED726D5F12B4487AF460BCA586827AAC1D462A387077172A9
35EC2DD30B9896083F300EBE5FFB17D309940D9D5A1BDF081F4D718A20CD1D15
987A7716BBFC20EB3DB805CAC99BDB80D54264C1B79D2B64DD10291FE16F35C1
7D22DB84B970BCD5F146D480050FB9734E92EE2D81D708B1BD13B36117081421
61A7701192F6C607DF5CB47BD237756E97126B8B4C2350C974262C08329FBB26
005B45A10D5A88DFA6422C5EBD6DE21A5B9F8A24ABC3CAE648B69A462F11F22B
48101F2E0E89BCDD8B5F3CC6792459C05724ACEEEF8DC018E388F3C9F683C1D3
2DBFBCD3D643B2291CB6B10B7AF374ED78AAE5E44725359EE84142D88EC7A3C6
E0901F595D24202DE22DE3D1C72ED1035FA69AEE3175F2541B3E4A4B1776A6E5
FDEE28D410102935F02C646DDA1374D058A410E3960562308AB131349EDDD377
71B9A700FC8CC33C9123DA85686C8E660711441F6C28D2A2C78209EB786488D5
EFDEC2920B2AD2C6BC66B39C49AB136508842185102EFAC8C43444FA1CBA2BB3
C9B45F873E6B7B7ABF0E165D9572F9FCE09D0A3F9E8146F103259FEBC7785B14
06F98799495DBB3AB22432184BF747CAB8212F3E1BDA6DE5443047A56310AF0B
1278C5EB6660623E3151D097F87B29F7341521BA662CB611D44CDB2EAD240C7D
AAA50B91220CCAAE09130BDEA3C455F0BE062771BFC9212AEBBBFBAEEC91322E
7D9AAF2F0856712A544877E9A034A9E8362D3AC137AE1498AD009ADE38CB7A07
BC080897D27473566C93F5D3C924FD9AEB3B77F1E325F08F616DA8F103AEAFB7
DFABF911AD7B37DD9CCB766E6C3021FFCA30286DF3F517F75571484B540A3A41
1C17E73851DB4BE0F211FE7D0E9AE5CA67068BCF20688F513AAD4932AD20BF56
83D855858B80CA4A64A13434C4593A2771B44CA69B7CCB4AB78D0C7923A472A1
FAD410D298D6E940D754B2EEC0D00DDDC6C441B307C9106E1820526A204071CC
7B52D6903E616EFF5D9CA8EE511AB5E01B17013C1C00A3ACEDE1EA972190E9B5
6762C8BB8229EDEE5D12F88609DA7BECC0024338FF41DE3163B59214D033E580
912817EADDFE73B832588DCF357176FBC44F7FEE0A01B3B5709001A056924F28
19510BC6138C6C0DACB94DE9D2C8CE344CA64DFE40EA63E1B35F1041C0D99318
9989784D119D6277905C79DC2CFAA79BA4CC7961AB35598DF9FF75B2F37DF8E3
8C2748A6DA67CC106377947A42E1BD88E43EE95F2AE1070E3194BA9543FEFD94
2C261D738A72D922F3588FB585140D1CC9E53B91A3270DE70AF24F377C2846E1
2CCE83E0CB70DBFE993AA9EBAC3E2DDC548B7A935E4B2F6FDBAC78E21F7CDFC3
015251D6DC1B1AC39649D6D9801606C9791AFEF113F2D969E949434FC401B974
AF92017E074FDD55EC61F09D215C36C39F870F8A7D19462C2F43497B3A5F2BD0
8BE92814058192DC86DB33F089658F117AD4A85E768177EDFF013D642DD77B06
291D2363F83BB248543A74DD9EAA73CF2EBE055F688F7C5B10CA28E3A964
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81A
9AC387913FCA9209F9142F9CEB88DC7864ACE2139716A8B8BCE22870B2A8AE03
61A40FACAAD0F82B44B4D6E4ECBEF48C6E2F39CBB2B53B18DF7F144E9FD272CE
6A23BADEFC0FC80B646A2FC08C8AA1C44A2A00554667CFAFF8A417D246F28CEE
905824D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC640686BC6FEEB9C1DE214972
4C015A2D62C7ACB01966717F9C4AAE6203DBC7E60275D3E38C7F66058EB798DF
3A42628DF4378C539BAE628054B5C31D23B50C2B33943C5AB05E8304A43319C5
8B569F751361768EF816F30DA12ABDF5C63C5B1602823BBFC0C03B7A421A836A
CD4083FDE377A8E800BF093CC74B3F067CC1DF9F37F37B225D1A63E440A719CD
8CC6D148F1442F1386DBC7309C37D13848552D03C07E06969315884369E30CFB
BD715C131435EE885780EC50DFD4D90B568153D7F09788C8877FF9D119C062EC
9DB71DDBB40357DF31989908E4FB3FDA3303E6BC7EBC8C3F90ECE5DAE3E02206
E93022A0609D842ACA6AA03E96F8C117951E672EC54FCF9A8273B7989D201B16
1E870432822FD897B71CEC0427D5FA06B29F527B6A236CE267095F2193898745
610FFAD3AC143DC9CA8CB1C3931E36AA844248234F51BCA6F444C2905A4E241A
269ED51FF329D5C0C86D9C66ED01B85534A1E39BD5C20DE216B33240C40D188F
4E304C4610FA7CCCF0512FDD24CB36B40AACA15B0FA0098083597E359F090380
51C4BC551BACA6F728980ECFB1E999F4E0E329B15FE526F0C6285E5D05CFB53B
F7212E2933DD050FB0820AFA1B2ABFB2AED5544B06AD48DAD5E377C2F375CAD1
3A904419D9E7F6D38731EF1E8CB0917657EB749149E1D61A1EF50C19E72FC8AE
9D835BE39DF765ADAAA523C72A653D19D310CC10E9080C619F102E6C0EE4F80F
05C1AA36C2027A88763A7F0AF2DD0CCE40F2CEFD4D785A43264BAD874D4FB758
1C7082EA167108BEF6F7E34D958D6105130AE25923E7EB77C0FDF5286780C376
3D9D24E27F7FECB251C07A0CBF632410D7D948427FF6782B8850466A1FE66362
4FC26E88758AC01C1C98B568253442AD48691C2A47DF05F6A7466E87D3020FB2
D824E71394F6605CBE638D9A6B5A0DF28C4D81535BA76F76B16C6815E977CA50
513DA81445E93555250A43815E80B39AC00F7086BCB4B36C35CF2E4A42B114C0
7AC99ED39EF436CBA30F8EB1A6E543782DABE3FF805D54945D6DC2C09A0F32C2
954C689BB04A12A787B88A966DBE3F4C2EC9888B56E96241D345CBE471FFB513
9002DD5225DAD211F5C72F3127A60A33D311387E6DBB2951640D74E59891DDBB
4526022E00B54489023B0FBCB6540E7EB3B2ED0460F81AB38B9240BAE8424443
749F272CA43BE6C9B5CD3E674BCF858A46BB2D1898684401E25CC37C0FF9DB9C
5064E2E468F5906C1338EBF0AB1F2B5C97A5E4D6127212AB225F2857D0014DE7
F40568FC538A0EA2E76E1F62790DA67887A81FED8BABAFE9416AA5E06C7C4C60
0BF38B70C87E5ACE2C713203A64DACD5FD072694C71A3AF841F9E3D07C7B3788
5856BBA23EFEA2AB1902F879F1361AF8C0421A296FEED926836406E96C49A48D
AE1DA613DD54D9C840D4896A183FF4E395EB7A69DCE16AF779DB5DE506A534F2
9DCF33411B194DEE2EC1B99F36FA1A11D14A28C0E938F608AF10E3B31B98C36E
5AAA15FF94A95B38469000FBF31BAE9CE8703754A099D21B3329E0471463D457
0D4E89F4CD31A93C312EA4674730466C3EBE9F8964D358AA76DE110300CC7B89
8FBD8BAA1FEEEF4E78760F8A25C60981E6372E49D71614BB4E6EC7B1ED60BBA0
8F874D9E1B1661393BD85DEB50C29E3DBFD4613BD0DB2A70E57CB73CEEE6A51B
72B52020AB471FA444491570EBF12F70F2863F9CBC2CE3E571F5D8ED5009FB80
9985FBD9A3E99D1D6124A3B4DE50749E55267744E046627E381FF09727EFEBB5
2E59282E0199771B95DB671D4B2AD846EBC0109861075A936D6F2508D429C625
85777EB9E6E9DFCA889F03CBE5A9FB59C55523ACF1E394505886FBE4D6F739C6
6BA65248D16465F0743C602C6E12438E7E9CF6405EEAE7CDC599E8BF2CE72DE9
FEDF547B68A41FC346A14D58EABC55ED2D98DA057A876FB35F46EFA6A949A75C
F1DAD4E176B50DB98341C8D442F31C7CA70CA4411B4511BE399A1EFFE6AA02EB
E529146BB9E0D14D16625D3C830ACB43B26371195013F74FC07E862198AB570F
44DAA7CD767C726E7BF288414284CCC3E6FB3DBC5D11E9807F8B247CB591852F
EC9392079A91D02F4954FF97236F55AF6FBCD9AF0E167742D0BD0E131BE7AA98
E955D662DC9AD78F82C29C3DDC08B6A551B0CE96E180903891204F4EBE911581
EA3BE89E4CDAA342B9E52F30E55B902ACC35DE87E70DE8EDFE7D803CB0770A2B
0B8180E5389A54B85BC69FF37B8CE078CBFF5CC6F11D65E7B61ECADC94491C5F
F034CEA604CDF5412886758D49CE07427C96AEECF83C52A4555178C7AB4DC1FB
491ACDD3A0CE09DF3D2AA01AFC9DDFC002A9863D9382764DC241811B3912F36A
B2CB1440EAF4C36D14A899C877A1F71CF5F205C8FF35460B37921BABF917E5CB
A23CCBA7C46C157E3088F4D1C99603A5AE29019C97D03FA54726D906264C82E8
AED7E4AC8F66E56EDDE14DB1462E4F9859384B15882C6B0E2219186DD528D0DF
17F15FF78FCEB2CA616D526C530E1BF18C3FC7EFAC5BC5F623465E81758FA863
78485C3F65040DD351580824450D62A12078BC053A65AE1FFA91D645A9E26C29
A8311282A2DFA57985CEEF4463E64E0B7DD8D11FB10DC168A704C2C70DAEC483
F6942ACFB86DB9C4EF5E16FD6E2A4523B99D267AA808751385186A779C73E575
948744853BCF5547A7870E7F6196444513F4AA8D5FECEAC8EE88C8830B526ED9
264D4F56562FF445F348D19317A058A4FCC154CEEC13E60A53EE79C07932518C
BCF295C49DD58CF10B322634A4B9ACF5325B842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFF57627DD17FCDC5BFFCC5CE9C78BFA2B830328F9A6D45FEEC239A
D76BEED158DB3BE2DC4BA1DC216B2D085F251E56B085F80C7C11DD39ACDF31FF
8D01256B7CED1EDFEEE0376E57B6E45D2F375499F8118EAF5C7F6607DAFC48AC
6FD2258F0314DA293F61D30028BB0FB43F50BFFB3005B677A74AC48E341259FC
DD1E8D932840FCA3727301C942C987A026992772DC2A0B06D5E4AB1186D81001
AE4288BC2EADC60BB6225D9CB6CA887922B117EB0E7F81000CCC4A20522124F8
B7DEACA9E6FB322B9B66DE572DA955FF06BBF51728AE6724360C97CE27BF0DDC
551716E8E06DDDE418B6E3E407307088DF1BF21C09F61DFBD19C30D92CBBEDE0
59D026A5A2D9B65246D93E36A7276E70D11DE1DFC7E967F6DECA7277FCA73E84
1737D9AE81C25EFAB95DC9FD91A124F9F5AE28E844C6C3EAF7DAB0FEED7AF2A9
13FB2CE66241C5102CAEC3992BEEF1999CE2A5574EAC934945ADEA6DB4E4DCB6
4BB074C6094FFB7D2AE0633C33C8E4823681C0A61ED898C571006202CEAFB5C3
E352E7F66C743DEB4EC14A3AE0EF469A2CDB23445830D0F304FD7A9EB6B8AEE7
919322D2FDF6C7D7906EDC7EBCD9E9B6AAF63DB3AFB9D9B87CC743CD66342BC3
BABA111186A0F38F642261843011FB3389DD944969E83C1B8315BF63C3BA9B84
9EDD5F620C7E451943A4E3868D2F9A6B78E6AC615258E663C9D255FBECA07BE6
FB4B14EBF66B06D640012D108ECD3329117185F2DCCD3CFCECB7224FC5E7E437
7C6E1F717DD65F6A274994CC40546439FA5A60BC3719653E525E49FF6F778D8B
ACE4664D86C8FDAD35CA3EA60BE1E28418837CFC7209F4A7357804EDDB05D506
686757C79C2ADE54B913F1ED476E3D86BEEA512B1FC55E137D23FE61B7D69D1E
E48363146DB3EB9914CE42558ABC90B623AFF1FA2CB3EE64202B74F76E195C0E
3F2B12B433D7DA1F634865DA6E5ED7511E1D930D074D76A35F19891E3842733F
8AC91FDEBDF9F8A426019EAF34A2B13634F55E964F8B7C21D937310590871C58
2F30C6DF5FA2097A078ADFACAE547DA592695486DEDA95AD49D2958D1F43A3CC
E7B7B9DB269FBAD050E6082D8DB99454AEF0AD0088753DEB92924B8AACE496E7
45ACE597058C23D84C0FB8BAE6E8B396D944701FDF7FD723D145E93B12A799B9
D0210E411564EF88E75FB2380977263E4EB261F6718EBF15ABA15B45CE0008CB
D8D2B7A1FADD93BD3CC207D8623EB59F6B3FDF302406C8F16686E31B66D8C1D7
E8DAA6804AAE5DE138E8A311A4A1330604D0E557EE03662BD31AF90587A45AE7
42E8CF9E4697F94F59B8AD259D2DDF433930B270C63EEEBF992ADB20C9F233D8
85BD42C04DC9300D4CFA004F89A55999A93B5A3EC2D3098ED38FC4CBC6BE50F1
4FFF4452CB1B96ED0E58AC65EE13077831824210531E56CCF19CDD93E462A12F
35E45673FB121E1AD75F20A8F4E8B29789DD95CA5047CDB13FCDE826D3AAE15B
CC039B1C6A9C21674AD3ADB75770688524E0B4D3151C5E51D640C741C6A05E85
EC79363ACC8A5F234575C256306A3E2B5F6A6ED4C48F6D4440488AE7C9B57B85
DE61CE78FD299609DE1D6795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD1983D
695AD1DE3E935E231AB657C704B4FAADE3CCBBDC7C31C1FE52D8A57D79602D65
BBA312E072096DC25768434E7B56ABD8AE83CD6836A2A624A32128393B9D463D
FF8B865FBC10316F6EC4806316954E90817A74BFFE390FE7B5348DB0B4782BA6
D48AEE80D379CFEE11E4F1CD9A521023438259A1AFAA427959EE4927606F08F4
255EF756643EB591366950DCA06596B169C9665511507959228D5480C7AA0DC6
1F197A9CB5C80A00332184637C6FD2198C1D859D45F35E20C5554B0D72C262A2
3CCB48B112D5ADD2E056258AA295803C60070F8E89217F14F953CC4015C38151
4C1E1BDF36283AAFF8AD785A49E091119556FED39BC1843053FB2909D78D0CC5
BD0202C8FB9DFE45DC35209300AE63A15A7D983219EB991B300213F2BFD5B477
A7342D64AC059315DDAD1A2FA1F4E8CC6969A0E25CD23969EF9E387BB3BE62A3
51C14DAC4BEA7FB4C8F38C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3992A7
7ACADC778ED2784B3423154B7FC03D43F47C6F505869EC5039310EF1F4ACEA1A
40014BA27BD58490D243E14831C19698C0C0C9683827A13C1735D2C649C0D4A6
BE354B0E303F96F1A7DA6410CC5D3F84EC5C9F615650160747A724AF9C66AE82
CB864AB947E3582308319FF3BA95FAA268D83B462FC0BD10BBBB8DB7B12BB101
1EEA4891546F4AC7FCA094F32499C0F8AA33D2C7D00283804FD75276BF2C4F9B
E9BD77A75D5A1E7BEC988F06F62D50278904F0928D97C2A77894DADB216105AC
441F7544C3EEC8F09A260BFCE7C040D10575084BC081821FB759B9016DBA3AB3
9FC05FA6C191F7A83C324AF0629A269BCC414DDA1570B980F3596906BE0D23A7
1396BA0A0F3335B74FE5BC3367497C95A462341C8707177AF767B83F28AF4C0C
F952EA0D9C4176D5ACFBC48D8A48074357B1B8E5B17C698F2052A9C6410435FF
3D114F67EACD436BEEC8ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A6FDD
7D52F256FFCDF706B456B6886F5FF5F416C079AD248559BBDD2767549450C680
3B603B312979604965F7E8298F454E098DC4EE83D9EE5A229DA5B97FF0861841
31743AFD0DC1CF828D0993C56493FBD38744296B82E3908A1A0CE811E0CA2E52
A0EBB9F4998D40FD7B001C660CCA6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4
A868BA0A41CE90D7BB6633CB481DC110FC14AAB8E9264F5EE49798BC49D9D9D4
9B9CB9429CA197321B545625093FAB4BE53BC96D108520D9CE9193DA216221F8
42FD0F3CB18D4D9C66FE5891B484C4F3ECCE8A8CDF069387E4FF4967E9F11717
A630BB0422421290360984C499D5C2F4750008B8107BD17C259B723F956B5B14
7E7C0D6AACEB4C9F0ADEEF68329D5CAE9EFC75DC15A9494E876104FF7675D11D
E1DFC7E967F6DECA7277FCA73E841737D9ADD1D1BAB1961E212D20880069F0F3
B5536CDE53D4A4D5012B54B227A0C18DA8A43ADB7593E98E5E0C75197138FE3F
BB31F876BEE000302935A55EBFE1CE914272A8F50A983AADC0604FD17B2A2F43
06AC9C0E2C687D1D9ACDBB674244037384B36372980DE4F1819DC2B4F825D7F6
AF5769BA3C34DE43B531F84B485EF8F360082659FFD797F6E37B87EAE0447EDA
DEB00764A38DAB429277B77869A70AD62AEA3CFD663916700C95E0023599AD8B
F5E4383BF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0F2F8C4E44A16A51FB
C10F2F4BD0EB7475E396C85116A9D3FDF82014EB00C07DCD76514565D3E6DCBA
5BBF1E7E65EE55B3A8CC8D2229A01DD3EE09EEFA659502F90DEA0CEE99851BA7
2A097446FE8D54CEE9CBC3B88AF70F6D0234ACB6350CB1C56BB44AA5D7005841
0088780E87F8A0D2F6D2FA07D508BF3F6314B934962984C7FE400CC9AB1E5F79
2699F15AE7E181FE3ABC4B4C70E21F3AD9AC49685171C47A257EBC1FA6B40E10
B77C81889061E668B9444D08F3EC366CF071C473CEAF7FA64B863164AA97F309
B76EBD1D860A54D8E656ECEA88768396EFEC282AB93B7CCADBEE9CAC7E77D79B
A760EF4C53A3C983853C30DFA6B0093FC96F298AD1B5807C33A89AB14673D370
619267FFE6A05DCE65C7B986CF466B6A832F1921A6949469ACC2B5EAB9F109C3
6C9122359A60190E6C42C713A9BC911105DDAB231758BD41BEE389B057A1F7D2
5215EB9D0F26C738D1E8782D670AFDCFCBEF6BD68AA64D6CE1D7C82A1E46EF79
FDC5CF1DF72D2275F3857BFBB4FF234B2192EEE72D2CD5E415EA5C1C28F4B537
D15C66B6CA739B8D92F22E3DDFDA20460C55C375A40A34BF6BDB012F333DA135
67389FF89C666BAF1696FEE4BDC1B32589E1427C1749969DAF3B72CFD1F579F4
A62E705B6DD2AEF3D166BA507A1EDB131616EFCF91246FC75DE3D8A915DBC82A
1E46EF79FDC5CF1DF72D2275F3857BFBB4FF2296C19E66F93DBC8E9CA5E86793
FA37889936F823DA9CBA746BDC1BA4A84F7B70846E33CE5F285F32FC4E53A284
1E737ABB84A750A16A4999D5A59AEB5FAE6FA51F6C8CCF447A19D91B8CC30481
B5C49B6ACB4DC451F9C524349EAD4DF1F0DBB3869B74C2373223236E809ABE92
C2630C9A877AE16BC30D56A0B208DA546903B801BE445518F14E701BE121A6E3
C832FDC31C1546BF0855A6767030D9B6B47266B4A1084BE171D03696A026FA7A
544E4D106B9A315700669D9D8A3D985F44DE6070E8E4AF6424F3048173F52CB3
EECA756C4D24FC6054D922F59B105DBB74686310F635AE6153D9E18A0514882D
4CCFE9D44B8952190FB9EC8360698A45EC064FF735101C9B16BC27110FDAE792
2D97BF0BCEDAEBBDA6BE7764CAC582CDFB785921653201A8230C66DEBA105E89
909D76D034C9A5C6A216EE8C2D9C96FF0A04F2EBCCA2467174529C592950326D
E46CC1E57DD4B2A8821A8506BEF79EC524565788A28F5870230E9DA69ABC8078
8F2F72CEE5F5594F71A24092D1CA9BE1635F769E2AC1459B0B3AC1DC117B6296
C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6A0BB569A91BCF947E682976A4
A993A413FC97F6F1331B12604C28FE4D8F7FF429F96D0DCE41EEC1EA29EA44F3
F8493AB33413FB84F35B3C0016089A6C4D67EA0050A0381699FE2E38BEFB071B
9FFE3D7574FBB32CA8ABAF8CDE383085DFFD5EBEEF83D696C0FA27B86904477A
22C09610E936D310AF8455122F4C6B61307071FBEB6E8DA8C43C5E1C317DD3AF
44E46800FED97CA40252808F6AED21A9D6F3EF87869378858BA7E6E918D5E464
49525A4A5A2932DB6208081585CD9A312B09793B1C1FA05637430A13E5AE3E1A
3D5B471CAD468007C4A6BFEF07D313E1ED2F47BDF624179D8827CA4664F96F70
03D7D0BD14633673BF1A66D0126713294E13C1A4571B8A9E6D98EE5C2084E767
98939F0AEF7E64F621BE09010CB6F43790AC69F122BD9618E23C7FD95CDB02DC
661ACA0D9FA5DA0CEB0D82EC823434BFCFE218A4B5FF0264F1EC9818FC80F9E3
E06FA21B47A2C431ED3DEFC7267AD9DE87E23C2411D06FCABEAAA6D87458CCF2
5F198AA55DBC4F8AFB25E33D6830FF6333593140C974A8B13E94CF0E77EFE6EF
C2F0C2FE513C93C7EB2528CC8B0472B5A579EC88E8BBC1480D4976695D2851AD
FE75F0E8AAEAF174FD8B2D5264FDA6E40432CB09DCCF5C286D5EB04E5A7D952E
716DDE9DD17F51C40339BBD717BA9555F70DBFCE390F10FFC62821D7082423D4
6EB801F8502449684418493C3E014D603933A576C6B0758D49F3155D448D505F
73A5206D1647639FBCAEA8108A2649D23FC552CAD67A60480964C6CB0783A8AF
EBB8E005813FC0D89420F1930E18323460DB56C9DF95B90D45EA22620C2FA7D7
521D7D4B3FC1FDA5061C6F4B994301864942F3C18428C06EF16DAA37D7CAE4F8
5E3CC5AEF1EAA75C658E90F0246C18C21CF073CC1D7732019B86C11D799B79F3
3BB09CB6771F637D534DE9FE49A53A3812D7DBF47D9E8A2D353B48627891CB99
B8C759187CF9112E3619F9ACCAD376725BFF2760B9ED7576B9D9EADFA0D51077
ACDE9DA732031E629834097D62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAC
16F85A63CA278DCC38682E1BC6D134930242730DFD14B49376780164C5A1F030
379CC9E763CF518CF9E2DD410B31012ADDA5B9ABA7F5EB2EAC54DB67BF9CD44C
49474B134D42210504E4254BC7510C4BDFDF53EB3D5F54D0C6A53862B4ED64CD
18471A49B62240FEF22F4D82468E075498FE2FD44122E511E5FB2FDC8CBDF6A6
9012CF9846CE3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB3A260C7E0FC2D
A6ED47D61F83DBF89585DAB88E81AE9FD0426205126E4CDCC23EB4C431FC6C1D
BBF79938BA64859723C4637574DAA16916B8CC6DC32495D5247D877E4B863070
61E7A19A3AF4137889983657F78257CE77F03D0E9DA4E29707C31DCF1707AA65
83AFB9A309EB1599591812BBB5C8F3CE43DCDA76D261E3F7734DE2DB7D9BFF35
01E5A6D23CF1541ABF3B301F226510EBF89944E4E9C5376A9F2841845CB62FDF
58F84CEF83450F3CF96A040F4C2047DEB00A172677774217ABBFEDC33DF60D1B
D15D023EC0FCBE6548410923051F875718FAC168E4E2720E8D959D339DA26151
5C42555EF75A03385FDF6C7DFA8FD7D02B80E1A845766CDB597CACBFE0700303
409164B5CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FD03763D20BE507F7E
56122CF46DFFFDB6FDF9361520D2E388DBC639CAD5B2E83C049DA71FA49785EC
5565D2B3A261A66C9F2C8501A2E9324D5E6F0F1294E1C0AC67EBF4A840618B23
172EE2D3E6538CD9B1E12B834A6D01EB50C781646E30ABD086CF9C09A6B0FEE7
416646141CCA188014A29CCA5AFD1215D847550DC0F06DD1F83FA50D4F154867
B579F69E34040E2AFF508CE7AF4B0D544E70294FCD49BCCFB65347FD1767DFDB
6F85337F7B399827B860FB08BF9D15DA7739FAB5D8E03BD8F283FB6832C3E10D
341F8D147A88D61C5990E609001B853B273DB140A7DC69895E465C1ABABD4CDC
88310748221F5BDFDC2306912DAE1934E475C3AEB56C96D1978FC7659ABBE845
A08BC6EC9EDABFDB1CAFF5FB8203CE3B25721168DC1E382A5267627FEF41D963
44A05EEE4C43E2AE24657176B6C8D3A0EB5A8C229616709EDD4096C1D4D817E3
96C6A55FFA4D67E59B58C6D9BAD063D247787282EC4820B3C3A8D7EAC66D120A
3911D284DCAE2018F883AA804CCEC457CC6213EEDC75C8890DBECB670000924D
3BAE8E7A8066D804B89BD943B49ABF548E5D92C1D6151D1ED96241CF76510076
26E9D2EFFD007A8E985FEC263E6C90BAE36C27D704E88F1F7BE09A971CABE15B
724B62BB0C1A5263449707BC0ABED19F4F1ABEA27322584D473A1A888AA4DAE7
7864042EF587A6D6C04DCE664BF83492D166B205011A3E283257FA60C5AFAD3B
71CF6D6772E5E77FC5742D4D77F4B9576213835AE7E32A2B401C36C3D58214F6
DEAB86E06EACF7F5DA3BC32030E4E23C5E0E7E82C4D1F9BD7278685C4CC54FE1
C1C4332F05F5AF14E70FADCA465393A7DEB7DA08B3012A99FB2FC7F6FF7AE570
BDBA718AC1E0ACEF9AEAE22E5FA653C2698E05E0E072A7DBA0702C0CBE5EDF6B
D0A5B47D7929F5C9317680A392DE0CD7AAC72A99F351D824F86D33CC89BD70DD
41F435624F598030F2E7121F6A610D640FC7E512A28BF6C12496361A53953D75
312631D6F07794B1D853251462B4D522B6EF8FE6D2DC18EB4C02C6BFCEC3E71E
20E6D98720013BBF6307EAD2720BD9674E2AED09E56CC6D3BF927657BE2D0749
3302A5492BEA01CB223FEA3B6CA4D0A35D6F2C5D17804371F9AEBC100D7A6D14
14C37CBD273EF593B596973EB054344F62115963E3F61A1A2774E6837D2DB796
482A00E2BEFBD6E3758A5A1CE621ACE547811799B1D7893DF52D57BD6C1A6B74
4024CFC65AAF320264BA65EA8FE3B2E77F515CF05968797241B5BA06E190C023
55C664139419373923D5BE1FDD292F80E973E271248B2E3AF05887FD5142811C
2572A1D4B9F9539CC6D9F441AEB22F4E871755911D8FAEA73E35EB7835FA1C6D
A4635171C47A257EBC1FA6B40E10B77C81889061E6696F50954EB8B347918C49
20C7142A2AC68231DD2AF574910705DEF2893D8D4BD1C3ACFA2BC75EB9471489
0422528F5121B7A7D7A973F2EF67F2795E6DD8CF55B98238D6654F8B47476E40
98ED693455F82F098F49FF48762D1C9622E0B64CD190A4AF3020654123563C5D
6ED62F1387AA1BC5F00137C6AF5840026DA68D8DF87CD5567644A09B52124E10
51A715399BBD1A6D3704BCBBE1FFF89BCF8129B98D35736FD2CCBB0E36AEB664
3C283A61B6E8613BC8134939CD28AF21976B42B06A63719C44432BDB419B04C9
19DA628C6A5B0F4F626E8935AE2943365C505CF5C7955AF2EFFD964AB8EECB15
C33CFF111F801E31FA0889D1561CB28638D1D24AA9F358AAFF93B9564AB4CED5
632C12606449ACD326A76B011D9FDD66C24C5342A5575E940A10EF9A7C4E0857
59F390036755C4BFE971F6DFB9FFAC965ED71736140A0D41AD571329C7FE5460
ADECF79C3543E3592283C6770B4087ED9EB76ABFB56774C4A21133E594461685
A92D372D4ED3F9DB786D7E7245B9B5DE70958048F037C56C14FDBCE691048469
BC488E501EB5DBB042B02CFE90432FA7D98B533F89DB0F21A61657E268166431
92F6AB4C4265A5C2599F55E134AC2DF346CD7C05F0C4B63DC1C10E03B9D34C67
27AACF1040ADBF7713E3898334BD99CFBE66C4FDBDD9B9180626E338FA32B67C
16195DE9D59A0F447B8DB69CE8FD6E2ECA90C6B424F1D39D11670BA89B298DE4
0E91D1CBAEDF3D811318D493DC71793E84BBF3E2BEE2EB813B03690C774E6DCC
F2D7221490784231EA6CF28982A4470A7156F1C7312FFAE07D32B62AEA32B58B
8D127C00F3B953C795C84E1A158E799D50610BA45F2003568AF44E2EE4DE711B
A128C91C36EEE43CB41592BD13837B9EC9735996A1376BC209B8D579F6A057A2
7AEF243C4B389CCF9385CE645C882CDB6A03A7921BB9F85B93AC64F9C82C455C
AC60CC9896FD453CF3AF2307B191F79C5C6F070D7E814EFF05F881CD7EF43871
21F72EEB3A9ABF13F7A9C46AABD4D0D976EBE8AE53D3AFDDBB926B54EF0C41B9
8D10342A2BA4F9908402DEF9AACE7BD76B3D4A244E3AC7442DB6A705BCD7E2F9
DD7C73DE15B222ABDF7DC3B76EEF17AE4CBDF387FB03FAA5AD122CB4A90F479A
EB32B0CA993ECF07D050F04D4CA153663EFF8A63016F79C7D0E464A57671FED1
E50936B0CE6E364B62411E6DF77D4A4DDF74455394437C3A7B477AC27F75850C
FED5BDB2F07349EFC5134BBD646BED8080D44243E74485FB82236249FF6726F2
D6775F15948A9D4DC82D6F60D7DC6F714656E89DC882B95552C5215183E5FB51
605BAA7948D6E5102CCC8E7AEE127E914C372C6E2DD84989E78792EC3F50C186
322A81E6A8368780A2E815A7EC49B29EA2F4594EFA2C1C079B0C777ACD0210BD
A4F06EF57BFEFA0FBA572A16A81DD123F8434BE971D9EC8149468CC0F2C45ACC
D61E6DEA7CCE2D711A218FC3953EA7B36F464567F208953F9AEEC1EA50C522B5
A42C4A99B079ED011928C2C8CFA17D95D50A7C1599E62D4FCAB001D5F9DA84FA
530D65FD2738BD6BC724446933E8927F3AACE64BE6623CC4CDCA1DC0B686ACA4
41E316ED0CB3CCB6ECBBD05FB823FD79EEBAD2F9F0891F553381C5E352B4D7C4
C1678904B22D75C8E8D4ADF7A319E9EAC6238093C798878E5D5087FC5390338E
CC499C043E346A4DBA66B7EDE932FFD9780C75301CDA60558F65241DEE49409C
10DB07153317E1A13947E293CC426E38653A16E2A7EDF6D500E9237793DBAF2C
6AB5E2DB571739092A476FF45FA1A1CF898E3FF479C1EF67CE435AD93677B705
BC81144F2E45854E93CA8D00E814009234E2A36EFBD854F868BC9301D33BA670
0EEC06C030DC43B2245F9D24D31A31F06EBC65712C870E62BFDB244441198618
3617BF19EFB5DAF155F0957D038B6FC5BF776DB24668F0F4594572EAE33CFF78
6BFADE79FFCBAA6606E892B2E41A173AA590B6C92E254AE642A2EEF5D51BE02A
C50855B9158840F97FA94CC03CF388C8AF7468EB28FD5E0CBDF9E23D1FF320EB
F19E60F85CB9568AA9C68C085E87B32EDCAFFCED2FA9A1619C3D1065724C6F56
79589C83053D4C8C9B53912E217B51E90F13A589F452936A798BADF461C448C5
480CA1D7A929044CC07FCD6CF9DD7FCE413A0B2CF777529685854F63EC8FB112
3A12157DE158671515E8FA0324852EF95789F16A8421B4FA121305A1AE54DD69
30796B192862AD337BAD6CC06279077389A26E7EF7030CB43C182223AFAAEE62
0EB7E7F02C11C1B52C95B6B66A2DF1FBE1991088128B8B12C2B28A050B50BD46
CC83DDD732C8EA609E2857FE8377112784FC50B3E2940B0D30B506FB4732B2E8
8F32140F3893EFF849FE4E17A69F02E7B4C69CA806A1A347B174992DB8D542BE
C631C8069D0DF3B6F3A5A80891684979154D98437D6BBE4C8EEC74B6D9BB7D6B
C5924BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F09B9350C42F6BF7A4521B
21554098DCD8F7DA254922301AC847E5CE09E60F0839874318C8389E298F5546
71CFE508839634A81ECF5A229D2B16EF77A39178507E41DE72C0B30162242B3E
F7756A035C0529533E59108C550FB89650C5B0600791191AE0D2C2D576DBD6A7
3FB4C0722AACB08ABBB932D5E6A03F957B7C64E89BB59C4ADF019950C6276EA6
1AA9465BBB3A56AAC8D14E62B83EF68CDE87804FE10153467FC0AFC951B645E3
0ECCABC655E635DB463BE72AF1223D0690DDB88C7DA9D59148324E7CA0701024
42574818D8E2E330E2FE5102B7F4DF3E4FF521CA5741D8C57CCF85B7887E6A7F
6B6E4F61160966AF27B74B21C9F3D6882E3E909D80E0762C58ECC4E243CCE91A
946487E546C6E433A5C5B9FB7D5B97F2B4B202F94545C8C3A9D70992C1F31DC6
753222850ECF459A7BEA8D8482342AEEC5762713C43E7E94884C06329D340EEC
ED08ED58B05FA74B94FD084CB58F31EBFD5EBC6440498768C234573DAA11A489
B87A3C6A208E9CB0B30F7AC129D5E7217B10FF89AD4A78408DF8ECB0A02D9EED
19239FB927915A02D3D85B0C237669DC17FE1A48D20EA8C5D2A68A4127CA7332
E5039A2A7E32F2389255B0491050D86369ED418F2926916FB309B314347EE3FB
1EA13799ACEB62CB55BE2301E115BF38D18AE8461F466E207613B6C091C7A10F
D77A10F08ADDB19E494C72ED471DF04820F4F3A6713E67E7C08467C617E31DFA
524A30DB697FB4139002DD5225DAD211F5C72F3127A60A33D311387E6018F5BF
F946CE8D7834A3410F5E6EC14CC8E47337898E5E8367724E6A7662499EA3FCC2
78B616531C0CB5BAD1940ECE80B6479023DA0394E3CCA13502D03B122C2218B8
7DC1A0A15DCD491B2BA40939A647E01CA6143950A0D13DCCE128401BAB4E3322
2A22ABB177C6607F014F0310C1E7BD29FDC20E11094E2852779FC5C0D5DB9D39
648317DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DD74D4FB3A9FE077F2E6D4
384BE6BC394E71C5DB81E42B90ADB935FE3468186ECD90E2F15FDBB395191E6C
465F4AA552F9CB59DC4B0FEE8C937A0920796C09CB74B3EA1DA5B74EB358437D
0CEBB9E03109C593BAC09CA9962533B3AB0EE6EF76418EDA7CC6B8795043E5FB
6F899C3CD8486A6DA3E670E6D13BC51C01FAFED3D47621376F2A271728AB7439
3AB3183B6CFFE1D0E2948B24D2A7E6A98712527A7F3FDF0C07D30FB6436D5875
3F6AE969F727C534CE5C9001F9E7A0149021BE5A65DB754E14D890F42F4D23B8
5DB5F2BD66726A544C10942C271713B28F9F33282D2063886DA7006EB5C0F757
82A3C48BD6B7D4DA8C112653B00D7E484A88A248FD17FF0E7A075A554F98C451
C7059F491D1C8BE038ADD1FA4019E1C78B8C7656766444617C98548A8EC0CC14
829F7C67999234D302FD1E40C28703DFB713F881EA0F4B81A8F1FDE4B3C92CED
078A98A433D6F3C4B442E014E3E5A5E82E52DB5332A895046FF12D01742E9AAF
ACF2CFCAF0517858C28A24FAED300D643F1880D27C0F7D73029F171028FDDF8B
55080BBC908D26B5CD10691FB92BC2FA54A04EB649B111671B43973E31253DAD
08488B1C71AA6F08A5FE3F6222ABC942F7B152702F7E48B93155A7DE83B3A6DC
7FAF8C2561841226C56160914266B1D28D74185B0E0FAC89BEC8ADC3FC027EC4
7FB0EDE4D2906CF1B55597831D98B643B81D2FCEBC963155762A1019FE6A9467
DB7E5464F6CEA824787BF86ED78492C31CE4E8AD0913637E245B375AAA5B76D5
95F18A4289312E74FA9C289A53647EB6D776E3BBBC735D9E7226D2B353CC752E
FEC2E91DF8E2DC63650E22804A5B31B13418130BA661F22AFB71F8026DC8F788
188647382BE1B7891A84B9697E22FC61EE575564D48A537CB190E26707CDE0E1
B29B2BB9C4F4716519A4A62A05A7B901F7AB8E77C6FB72D7CB3D6953F1416C40
FE153C7E73D86FD65663DA0E08018ACF34CF9BA5D7A937AEBEEC84B992D45A26
80BAC63497C593C90728B12A42833DA3C710044C03A37A680D1F806296BBF942
428E9FADC28CB5AF48F8947D9BFAF2F57F0F6C4AD7C698D46568068F98C3564F
42D2F7F26014DE37C4DCCB6B3082CD71C69A1E1A3AB1C1298DF12BB54B3EAC9C
3325FDF74E1B6222A84D10CF5EE66EC13A71302C6786D05D419441162EEAD0BC
CA6315D5D70AC07AC571FE97F03509863B9CF7A0E4A8D5214D07B149EABF51C8
5F0C8A7B7BA0AC8B5A90540E5FD5922F512C0A83999C07CEB7A37F71BB8C4C08
F359CB4473250995CB6F5DA6838536F3FE0B38EC7BB696C8285F78C66D154289
455C5FF2D23C1A59A2944DC972F44474CB35738074BCB9FEE4077CC0C49D7185
B623A143311EC892D1BB9554D34547816955434DFF68BFBC34A074CB3BC8C175
4662B5D3FC0462AC4967765A50D653FC3FA379FB4FA0AD9F83269A99D550366F
C8714B92BD48CCF7CFA30A7E92FA628D056602E7EADE6F2B3E168EE1B0AEBB2A
BAC2B90A514D97941B12553B13AE64F9F960EE62E049E6D9BC9858A3ED3CAA1D
77CFB4A424858251438F05B3EA1F686B35F0072DCABF52B26423E8BA630090AF
D344BB225F08F47868D6C4D857CF0A3C6CF4B205301FE5A2F54624315981DB9E
59213A134B651EB7A024989A6D910914C0224A700E1245ADAD0C701A6F5E771B
E54B09E2D6EBFD77645845B7C08389FFD5AA6D6AED2DC26C28A403BBCA3435C3
FB7971E9A56226D46A1174136F0A04A5CEB915B8E21F640745A0AB62F15FA8D6
5B74900DE1EA95B981FBBCE8D846DAE64D91AA7BFBD49CADFF1DC7AD838B897A
D728B35D869CF7874A1F48CA79E025C3D54743A3B0CFA14625FBF274F3794F04
4EDB9552BE2C55747D7AF3101C5F1A2A1BF6C0E2572AA0624592BEBF74CDD683
40D52E137B1DB6FF17B6629B871F0D3AF01E55645C56BFB97243ADC4813F842D
E44CD9352178217879909DFE3C012CF2809984881E57668BFAA1644FA922FC56
B0B93D32362BA966DDE41AE6A21FD20EB82747C47F18DC85145900305F388143
6FF377B1500EE02F9B9B8774237EF1899A326BEAF8EDE7CF319D42D7B7B61296
2A9DC4B8DD8DD87504652967C679E5629FE5449DD1BA7DE9ABEA28C4E2496F87
61C0638E0F7508D281F5762ADE506C2DA47286A8A2312B11DE4B488136EDBEC1
4C5256B9940F0800E6DD26001BE1FD4BF642AF9525279536814044F4AE7DAABC
43A230FDAC3D9FF0B8CCCB4C1E7696D16531A5EED36C30AA15C66D5398C145AE
DCE5826302220B185F12F8DC154E4B79B163C08F53AE78243C52D4E02E82A4A4
310980801A463964F3A0BBB90D85756EBB96B5021481EA4E845488B79682BD09
F8D07481630EC3129072AEA5778A135D164A571B22D1D619980E73841F84F59E
0500496E84FD5E9A7E4A28D9EFBDD34A443F263B41A3B2076595CE2A7DAAA94A
4B95D7E9C281194A84A9ECEFEA5023317F88FB64830A2CDD5277003D6F1D46A6
DDD51B3C62188C66D7D12CE54F29D09DBF020D89506CD1270C0B3EA235BDEFE3
E24373517FF148B2CDA2B90CB5884440F464CD57295728A8AFB1A5C97B6B8F47
63D21E005D89FAEBBD7D8B06F3FCA5D7107E8B918D946E250F561E5E394ACA6E
AD2890CD407F38C53B3E51C9FD432F22202E89A91B046BA4CDDA6E23B0AFB2F7
9CA39D61350D26435EB900ECE26C5AFC283144EA933E003739EA80DD65A63FD2
020938E02C1C72FD8A4A14DB003C5D21197F835B183FDC1269D70A0B14D4F9BE
76C4CAED815AF7DEF664098CF1A167444F32FDE1796595709294CCAA488C37CA
EF08DFEF5DFA13FE0CCA32024C378A87CFE7506B67F7A6FBF8635703C7EFF67B
9F15A7315285D2565D7434FF3C75A20CB3C1B57AF37CA806711890C1AC5997F2
1A14E7523CEDB295474F36E7AB3493706076D62F4C407BE252B5F31039CFF52F
2855C8AF27ACFD99EAD434BCC277A4805E6F068CF203053B151CD82DDFA79D31
F0B4A0485F51334BDF5CD5E855A60000B2D49835C34DE75CAF4932693BCE009A
5801BF822C193040C8E053C3F1EE0BB0AAAB446819939C850C76B37EEC59A516
F15F22949AC658037300F1E113F3BD1B4F3ED7F9F55C21A04F1A6DF8168FA228
6D8C7EB944B03F3907EC73E5B4F9B71156B357F62608909B7E4BA8223446F5AA
B34189E5C5ABCFEC51A249DEDC76E04CEABF371BFE2347C17AB8C17FDCBFD6F9
553E8BCDA3094DC141B331BB999963089C9E8131AC54F43D9D7AB95C97BD691A
D8934FBF8FDC7B97C76DF5FDC62765D55AD993DB7F0907EA177C36ED9FAC7854
AC865B2BFEBAE6EFF4DDEB727B4321E24A2D8C7D3358EE391B31E80FA5998089
7F9471F36AF42899E7278ED6D5DB95FD665B591E12E4DF06B3CEC7D015551B07
AAD8C85C6196DC28076CF4C4A1C62A4647AC1D5FB8AEBC6481A94C6ED5EAD255
0500073598D17F51C40339BBD717BA9555F70DBFCE390F10F87B5A4D7682D1A0
AE125DF60CFF05C7454B82F991CDAF3344A10115DEA01BA7890B3A1123170D99
3F727ACDC8C0F00E871C90A6175956C54E9E368CA67F79A9DD91ED489EAAE76F
173FBB4663DE44D9F0B3A184AFE75609B62AAB76074CAA13A2355873BAF0F0D1
B5262B824ECCA9A0C7F74A4D13C03D0948B6F864DCD1251D26551CB2337693A4
3B080FD17A292531B5F5E64B876C58A4CE3CA66EC2EB0A098A5D9D4D41C9E55A
7E4EC94240107FE7909AFFA25FBE1041A54E0C8A79511ACBBD91ADB807ABEEAA
542EDAC9B6ED8F254F6BB7D73551EE33D4FD3CC697DF01C1F094DECCDD9F43AA
B88640D0E9347881AB1F62D9A8E4A799A0706A34C9C8A243A6890CE854E3EFA3
B883E515D1C4E5829166B8DBBB1DD948462957711B3A26FC69AA03ED308F28A2
3FE7A7DF7F4EE6D26CBB6620076B0AEAD03AB485F43DD669E9F6D78F7F3A3D17
9B8593FC3F87DEB0F663278B252DE788A0B966B6BF54AF8DF51679CB3AF165B1
9E278ED874F8E46362D3ABC30D65F4C45137F1848A3687D5BE45FEF3D084AE1B
3DDDD239B928EFDA00F21BDC87DD2D8DE1BBD7947B76889EF72C0DCA22B640D8
7E79D24C2B8F38438B6E4F14296B301DC46D7041C10BB06215A25BD1913C7954
B5C60D0F7BF68D98B214195ECDA182220298DBB1EB1FD9E609F1B4C62F58C1E7
29F224EC05FB4EC009EF48E7E56CA1F98D0CE749F731509FB6B908695967DE2A
007A5F489A2FBDAC9D5E5B894645DEAF72A185AE5BDD16F3039A9B67071F0C58
187DD47CDEC4452ADC8A683A2610DB6EE097EF1AD94FCD6D373246804BA5F217
1C5C56B6562A17EFCDB0BB982F75ACF33109F8AE7ADE4954D0B1E18021CFABAF
619DC53F5A2A0C89BBF1AB58C3DBE99A3FD440A7D3BC5E4EFE77037671FAAF08
633A13C303EAE11BC5E99B48E34D0C2E929AEF3C8034A681E5C185DB2E609482
36429CC8E4162D346EEDC7260000BBF6A73BCE98BB53AFB2C6694A816A7E1586
15829E59EE7357336300680C95450394AD4A2DAACA192E92CF195742D5AEE902
297EE9520CA7EBF85DE9F84D3AAA119AB947B5F5B9E5E1A0C6124B1D4E67DF3C
21F1D051AEDD11F65FE0F14DAC42A2880B683118A3A2C7C7355F5E45FB504F62
6A4AED7CA434A95AF0B24B801710B398D9E9A95138859A8193A17D1369E2E54C
06B408FEE2918DFD868DC4480DBD8130BA96CD51D02FA1999CB88EA646C764BD
2088A3EF04FFBF0B61BE229F35324501AE0F98009DA9ACC5F02B842CD02CD8AE
FDD97BD87B20D735CE102C0F60A9D44BFF1C27F03F6D79DC011146CA28EE32BE
98532AF24D5D2991A3AC877F8E16E0C392019E33F268CC072F36EF12310D3095
32C303C68553C91CE83431F239BE883C519B66952A2595A07CBF1BD05B68870A
A4FE5CEAEFF2DCF00027A9D62608D532F4F5933A228601B780BA2B6C5C54074B
89611AF4987F7203DDCE93170428CB54EFDA16BCA544851B91A8F1296749A72F
7BEA1FCBD8592BD24249231076ABE1BD29285BEA0FFF15CE9237244C917A134D
A39E567075C6FD56077C00902CA6AAF0C12EB5696A397DB7699DCDD94BB71BDB
3DB5D727DA85BB43C88FD0F434D5AB83BC9B7DE897744D2CD1E94E3A3EEE36E2
EBFC879CA86CBE62103F587C5DF7D09B914ED8C78CCF45320151142D1CD4D451
CCA2F463235BA2C069E2E976668478860F81809CE7D928D72A21FC9F4C00BE8D
8CFF4DC312E6A454DCCDF83FF2BBC7B17EF8C886C4679EE1D81DC3E988A7D9BB
43AB6E6B63E503BE0AB6A71A1D06D2FA9ED0B02168B32F6CC0FE765F2AF96246
1626B5EC47DDE14A666942B10E15F853CC86DAC21F1A67DB235577B68003BA14
073E2702296B284F803745DEC5FBCB5BDED0C269EC967551FAAC019A93A7A160
4830272EDAF5E261C77D4130BE3FD062801BEDEB1BABFAD3DE6664E363591C86
F9882372BF002C07632B519225237A100E865CED746D25302D405F0492BD7ADA
007696765A4CE85D0762327E13536498C50760182535BF238B1D0DA5C2AAE493
B2D97F55D69D35C0404DCD54C21EA62F91951BADA960055F44D04264D92D6F13
267A724482A87FB8CB88CE0C0ECCB5C070C96FB7C7C7B8F1CA0747D9DADF2C98
FE196B0EA52B4479D078E44B99DBDA167714218DA0554750299F7A6109C7527A
3D23763B76BD8F81F317A7974C5A29C373261FC67D9C9FD61BE5C587D864754B
774DB9CDC2DBDEAF1B31D8CF1437D6B136DFE42B145626CDD287909F4E902B14
59DF1E36014C5E4B546CEC445793129113559E917EE43E836C79D6AE577A3784
FC94031C64514BE9CE80266F62A5FF87059721A58539EFA64EBE9014BEE383BC
B280D84ED26442237EE2121C14F116A1114838B333EF11A87895C83CBDDB25A0
D1A489EB0BB10369D89E5E7CF8E766FECE6BFD3D847DA4F518B81FADA8181433
2B622EB0CD4AE4C7AD117137DDC1A13F7AD8BD899F9150D97CB8BF6E77DA0A0A
BD46A72802B0912C5C20B3BCDCC053DAC866127A85D3D37535EB04FDC8F5D9F4
C526815BD2BC47E36D2CFE3CE783D1708C7B09F9A92B658455FB81B767DA7E07
50770213BF6188DC183302136FF6CC18ED1A45D5D133019C4ADC916AA6F4F5FE
8A642DA2E54F422145BEF3E6526AFD58333B551D1907126E0FF3D8FCAD4797E1
2CA1757A9B630AAAD6F1CD463AA8E928FDC8155408EE4D3AD3BFED9D1DB31CB9
069D9C3FF5D78DA7FA71DDE465C0D66A993ABAF34BB243BC19DE3909DA113261
FE646B3B9FE10A0E27F605C0005570FA47070FC79D81820CAC77FA44C3B89C72
55A4F118846B7570803990AA1C1666B68CCC383E5403F0A734ECAD86937D32FA
CAB278DE94035C5AF7538DE81B5B4A7A4AC5F69B87DF1F877DFD7C77E8A28931
AC48A54635501C98C38B816811216A3D3A3F46401469C834216DF6E346AA93E4
203538720A95874ECEC5C8683B558AFED820387436E05EE2FBCFF44CFB953DDC
6288ADFD74FAC115C77370504EEE4A84753C33CB35844961E68842CFC30E62F3
92C5C166ADC1F3FB1559C371159F0D61B7E1CA292AC7A96CEE551D9189977098
F67A41B02DE27C7914F1F0A96E74D38961ABF1146F5E771BE54B09E2D6EBFD77
645845B7C08389FC49DFC204AE4868012441E36CCEB83971E3268925E47605B8
7766998E83E5365136ACF7F9D099F66AA8A0584CC439FE263FDD04A29FDD1974
485126E0DC86B790B2388ABEF2807862C3BFF8017A84BA6BFC1BA5940ECA3071
C1980C466DA9C531E1F1D1F093F794EA44C40A9D57214DD89FC8C589974C5551
3AE70589392CB5599C78917AA1C2D3D02D048B943D50B0081B2AF62392F4313D
144EBC7F73BEA16D73BEA8CD5127E5BF5701F9D4D8E417058AC3FB2F3A34AD00
EA828769273159D4123E00A6BBC3134E5C47C34D835DB493AECF6389494276FD
A4925399C22D4924000D2B35448E633F319D5CF793DD6C37FFAB63689DAD9B2E
82A7FFAD8A82C46149A381494CC9A9FFD3F9A0EBCDCED96FF1576600F1389BAC
04F9EFA7496374CC886F5949790A7E4B850B6B8E31EC18B7321E63AB41C5D766
69DBD8FA9A0CFC2D221EE4C0BAF1C49F2B485A24A736A894F1EBAEAC18CB4B7D
1983C85DEA0EFAB36D1CE3F1A80BC2BA01FAB65E3C91AF82D5201412387C5C3E
DACB7BB8E5682658AC6F300ABDB95B176FE85484DB0E94CBD27B6384116F985E
D4FC0CF7A1C204D4BD2D6AE28647D8B480F14B9D9A5B20898C25C34DD931F1B2
73E3A94B20BB08490E8968CD02762CE02CB727B8B6F7FEED25B1A51E10221B4E
F82D270EF712C303999771049F6A51C42FB9B6A9C4362429C2FBCD39A24463D3
E0ACBD81605DD868C8F663872B230E921494B129F80EA04F868CDEC533A7F975
9BF94C667916F166A4AD0D7458BF22EB926389B997E7182C83525F3704A64316
24D00AB9AF9F8EB2E53E15F94647C5EABC7C20BBB90B79A821F0377F09852707
B51EA42C0BCBF43D12C109FA7F552931E2C9272B577AD0616D09DDA2A16584C8
D40E7F673FBBD653BF01CC178DAD3D35670F258C5D392138E7847EE8F522D480
9F6CCD8766C637919F05E3BFD1EAC2B12D952D9B6CC48999B19367801BA59E66
0FC5B2B1E296511E8FB28339DEE85CE619109DC5B0CBA8EAA63129ACF3AD9459
AC97AB16CFFA3F66FAFBD0B269C85A2743EA91492DDC2F0F3FA60911C921CB16
4D3E4DA74037035D226F9883B68D6CA9C60D3A774AC7448624EBE6A7D0067E35
6F5FF40C89B75E7FBC53EF85680076F0A90CBC58D0632E74D42C3CBEE053515E
87D6C4094BBE3F2AA63EF2CA799E15322A392131FB96C14CCBE65E59BB4D23F8
2F2DE3EF5F034ECC85F78DC9DFEC342E27A763669EF26D60529E8FC6212DD2CE
8D723DEAB785CF0E1806D7B4826D421046FCE4E987E770A4A7512B5276E36EC3
072C6DC675A2DAE6040C150F8FCEE87A7483F92277B32B4863B8E1579B599829
376AB867F43B2F6320B331A6EA21B51B03F280136F3A2C060587C6798E098A1D
4AEEFA5457E09B1C60BA9D54EA09C0E2FCE8507F619CDA4BACFA4A91B27C809B
7735371FE5A2F54624315981DB9E59213A11EDFC1D01EBB4F43D271F5B16796B
6E9FCD7713EFBAFB09A6CEDA2DE760A98868ACB45CCC8CC2370FE267830A4D0F
2409A4459BC9CF7B2BA769BCBBE17E81F552B601EABD3DE0BC0C3844480A8AF0
4EFADF5D4F908165B1838DEA82825E379F4A7EDE97DB40ADCBCE6D67206C7D11
79F265ACE1585E331A8F8B5AE06FF085C1F349215584090AE7EC27EA837EDAF9
DBBF7EAD3B2858BCFE820B4503BD5F29999C7A0E3AC55C7435402D28F2E84D2E
E64520D20DAE1D863047ED474E472430B205A38708508E366309BACD4A217669
C30B543B9CA91FF11E59DA20A8E9CFBBA5CCB1A9DAAF125E79D5AD7DAB05959E
694040B3A4B0F23D344B5B3F2A805F8F3BBBA4BD19649A69BDA0DEE6B17CB6C8
2D7263DE921E4F22630D3B3B95B790F3FDD35E4640BC1D08E083BA4D822D74C1
473FEBC4F1851DEF7E13C4711484075AAD24C10874C856F4FDA49C6389BEF3E4
1B0F3C4A5DD8B590DD235A5E32DA7BA7C5416CB1585074A85023AAA9730364B5
B8B54C1627D63C58C1BFE6B6F2583055770EFF67496C00AFD0E4B4C9307FBDBA
3C5FE93DF12830D995534A8D82E4B822F07B115A331A3BEE244542BFD2849D49
8C239237ECDCB23458C113C2E75BBAE92454507BBAB460BF0CBB95B97314FBD0
DE871581DBF1739EBD93CE53DF85531821C23E4DE1D2A886CDBD8B600FFBCFA5
C1900BDB11125CE2C263BE33460ECE4FF7677CEE2603269D5F288AB410ACA8C4
1E720CCF8DB6EAC00A0AD9A3D55C4A7AF95B79602F210CC9FDA0B6813DB5D7FF
A4D0D4CE63891BF0A2BB9F3FD7213492DB7C4531253BFAD3180DBDF8DEA31BD5
BB3282B3325B1C9C1670B8A568F69091BF0FBC9AD619AF7C3141F3BF49BF2C28
599EB66F071FFCE3410C547A9B74D212C964E312A2D5ADF6881FBD66D03721BA
9C1B8016258F5BE116B1B605357F60A18B6D6EE4E5D1A32026B5D6109BF472D2
230BF4BA6428F8EBB500802B6D2B8A73C45807856D80A2EF8CCAE1564F2D3FE9
ACEC391B579C16BA1AE8BED36EB2C52BA18EF531DE09B52B7093D785F43B98BC
1DFF4721707ACC1E45E4D50FA5D878A7BD6CAB588B84CB37FCB36482DF85E9BB
4725630BF0B5CC539DB1312AE27EFE633C28A2F142B8069EA0BA7A8CE3B177F7
3BB5805D48E87054CE92EDAD3E4E503B07EC3DF25246FA9100A7BCA663C43289
67C977B430B63CE6CDFE50A0BAD205E6A62F64EF5974CD8E25A6906CAC83605B
885A4ED63F4BC399F6BC4CC2760F7973D6FE77F7AB2E72FFBDA53C2377D779DA
1F0DE6FC09910A13B23860D75CE5D4383FEA6A7AC505A4349861F3FE8BCDB2B4
47A5343D2F42500A28A6B2126EC9DB90BA60D4F0CEFF050A2D0C361DBA96475D
3AF367496E34A2E63D693D006CF3E86C24F49D200E2BB4A8AA530ADF5EEB2DA9
FB58AB983090B83B89E67D5EFCDA9560134AF22DF5DA92FDADFD2B6BCE818234
2AEEC5762713C43E7E94884C06329D340EEF7131E803A7E943672A1CD5715F33
9292048488706530FD15A0614101B04CBDDA982E68D06BEF3405EEEAF0EB2F2C
EFAEEBE5F14FF089AC9771948B6A6CA310BEC37379CDA9B76A56A327053E0F6D
96D1C2B699867EB1007E5DC5EA6B562AAAFE1CE74489C9049F0F4999FC5108D3
0E0300F41101A7F4A280ABE1C7F736EE916ACFE714A6B9B8EAA1C995B7D1A07F
F0F73B0283C8843E9A3001BB96E55CD0C1369B201B4DA7CE2B7194624D33B425
27A37458A934221765FE0CC6A3A745FEB2C1986547967104C20BB07933495A95
4F676F7DFA49F81BA6B221FAB4F9BE46875FBB75E16CFFEB450CB8BC91FFBE6C
83D561EF669E58F253A769F6124346CDF97050E356F2216D58A6C06EE1A99350
025F131D697CC0ACDE8CCD15659B544FF00AB76C39EA6587B515F5CAD0858001
D0F08DA33F15A77A5BC024835129BC973464E42088642FACFD91D0DA472B7A12
45FDA84738BE165A609F79CBF49D51AB8BCF5446C01C12DF0BB6864399601696
27640B4ABA46A9C504E1D3078192F37463DF15E7FD87D172622D47714FCF9186
9575263C4C2DAE8E5FD3CCC8747BD12E63220BA21FD9E81986BAF8AFAA241DBD
42E7FC2458BE65CA6107E74C1638DCD31FB2283B5F192975AADB6E27FA797874
CDBB0288B81EE909C1C6481A61401BD72C146D133AB705B2C95F99B731FD6966
0310783BEE1DD3D04EB580E039C2A6D3663AFF2DE36A2249BFD2DF460161D3EA
5C1FD48BDB642F09E20933D1022D57370B9BB48DBDF15D0CFAACE523B36A2AB5
F41BAF1D6771576B4D367AA58DB75319204D8D0EC8AB2AB23D244FDBEDE09861
0F35EA1270FE584EFC5ED60AF6B276713EF5869F582AF9C2D268844EE86B58E2
8A9F5670A5A21ADC5159077D035218E54FAE83264251DE61694597FD026472CB
F13D266D599AB1EC96F5B69456110B9A8BBCDA8551C3C14F979F3CBEE18F1B61
D9AF69A47DF33A789FF79255ECF2AF644EDFEA8330A2283B586870FE655D6308
126DE32C494C6AAC602AF5B9CB036BEE99855EBFA4EF4B7B119AFB50293D843F
7A4E04BBBB4676534794CEAB380B1E461C5432ACA19E2F156ECC4E82D4CF8E6F
87B2A2DAFC69673E1FB81997633C312BAEB63990C31F1EB7DA809BE9F612EC55
D5A9C1CAF14A0F012805FAA4DE2E937E03744732E3FC27B12CFB717869B7EDB6
649D987B1654AD20D7CFB9509DA585AE4898298C84706D59C727C55EB86C8253
596C70E8AE60AA436618C281E0A0E3B3A9303CC927663E45ECF5C7965E5E2A13
03E1863D4979A4D16E807CF86488DE041D6692D29D19C4CAD31A9169AFE4B6F1
293846B7C544718297254186940D6305C96EE2B9E3E7C9A622D43076C7FF8258
27FE2A6C008801304DCA2BBA8F01DFC24EBA89793BC051BBBF440365B4EACB09
32EDB316D35424CEE4FB1687A50867043566AC7938C812D690765D2AAD322BE2
E7EA49AABA75AEEEC5DDE1D8BF68483C3D2F616CA0F6F9D726CB2CD81B49A9F4
7C12FF76284D3B0E49FCCC1041A6FCD1E20CAC60BA728EE459CBFB2869BE3566
AD877E9208260AE6AF24100E2B365BF89C5B67986633AE820590CF22DA6BD562
1A494EA63AB3321C9FEF1B6401D2862D912B670A8E4BFF4C49067AD2D7F96127
78739907C3E14616874AD27FE89777BBAE47CD1B4DA8AABDA0113472B8A6F118
86174A37BB8BC122F8F3D7EFDA0CC4B5A78173F07E3FD7A174C40F2366A89977
6626190CCCC3A752A37735B9C1F81610054A54D7696562872BEAEB44D3903FFD
37E0BF9115CE2FE02D8A3FA89D55F8B4EE3580C618C1814F112E445F32C09708
17BC405BA17A8DC92C1620641CC75AF1F20897BD0FAB1B2FD02D8858BD9EAF32
1A2AF2256EA0675264922F9A98E6FBCFE8EBDD09F60C7E4966B4FAEB0406B72F
8FF605BD06DF2FCF59CD95FEDFB910B6371422CDD07263005CD57093D705D445
AA4B08E97B5BD3466C6897065446F765344F395FF6F56CFB6FDA12DD94D5837F
8101D3D65F56FC7F03149B9B7DF58324AE6E3B639DDE323A6EEAFEA964BF4076
068AEDF0FFEB7DD80B2AF0AD023ECB8F8B6686E678F02CB217DB07076D4391E9
9DF321D0D871A37C34F2091D7DB7178BD882E77D1781093F956E26F8437E9BCF
11C6EB1984E30EC73AE00E97EEB44B3FCB53808E0E4886406A9D33DFDC628688
61B6EA02DA05D223700B79E4CE12D3C314505BE94706322FD8812BB27937AFD9
64103EE91B3C44DC05BF90F7E1C0DC50899D11BE76EC06EED3099779E5FC0575
729CE67A777CC63C4C9E2FD5412246BAC474C4781B457EDB416CEFF6B6CB9AD4
F9A371E1CE10D1447846216EAA9017CEAD458F7A4D93E623023908E9E810DA01
91D78DC4590C6F4A4A6E856625268517B9480A1FA7EE5A3EFD38C40BC331DA68
9C88D488A05BB7FF49A02C19D15ACB2EDAC4132FF682458C372C56F0089D820B
417C95781BFAB6A0D8B08715514B0FCD8B218F5D6F402974C4ABDB3265849FE4
C4DDA6930768FE6AFE6D28C37D65824F530A6DFB468D532C2D87ABEF72CEC766
81F8FF7ABBFF2A12FDAEB449EBACFB570D76D01209F22F4D026A3744BF5BA2E4
509336B00B60CCEB075B7A849768E3AF8E18EC31EF1282DB5560640BB17710A5
ECDADB2CDB17ACEFDE8AA1B618BC61851AD5896ACA01B2989993D432EE93A758
60E50752896D831ADA61B11F5EC2A7D2C1CEE14D1A67BCB8CE617B764818176A
2720844B18EA91B95602F465D1AD44459C0B6301B1902F233736792B3CCAE73D
EF3F7438E0E130C03711927D4E8BCF6DC82DF9608B80D8E86E8DDFC641A71C9E
0244FE096571F074F07CC1AAC1DF294CF5A9982514018792CA5E16B365ED83C2
4C44A68CC2E0CE3049606D0467149176EE154BDCD604A3A3A5769147F2341452
34D9D6EB4DBCF69EE93965D4CC8D86D95693B04644EC4506909C1B4904CED6AF
B3EA913918F7F9AB043708BE502673FF855FE49B1B3DCEB358E59045747E0164
0867A82845403A4DCC892D2809761DB613442B58C7A2595EDAAF9896D6C10980
A09DB34E084C8A754E31BF57102DF3066AAB60C5346E0446E0EFA5A948531F89
CB6FA0473726E1F3D6DA978D71BB0A50519CEC6E1EC23F475ACAFA3A1CC72F7C
D60952852C53379530E0A6BD411EAA3DD5D71B748F6814D308FDD1F2E214177F
B453C00B249F51D04092795F2EFE5D8F7E4DE009307129C04F732D4405A8DA2C
3ABF2B3E9255B1CB006CEADB9B9B0FA5B6805A9F7769C3FB1EE4DEB7FA2E6C74
B7B0FD749F1BE8235A5FC9E2821663A5B9ECE9F7A044C3775D3A1BA43AA1AC0B
DD648BD4985112611A61E9A0BC91EE0DBA5A65D0367FA04BE436D92E1D980CFF
D78371E3B56BEA2F73F484E5CF75E9DC90AD1FE38A6A175563D9848ACD3B1C76
E9E0DEAE85DC7A673BB17F6DD0D58ED7928C5B6B00F617F1B8AB2E2A5D69DD11
F6760850FD87EA797B9231E72D0B5C6C21DF6FEACE550A42593EC6AC7AA8B27C
FF05C50D710572B9755DD5E23B191D0F4F6364347390B355E5F85B449A296930
A074E05C82101A3AEC9EE2CFAD5144B78C30DDB18D53DB226FC21A99664773E3
E4AFA69D200AE2AE695674C0BE048ABD7D334D4A2C46946F570C6118915EBE78
7DD3F082675FD2C53652D20A78F84AFA88CBFE8A2DE758406C701EC0A2E7CD85
8C24BB8A4703D4D84D1B7BFA5D342C1F9C574DBEBE5FA4F63BBD7A6D35563B70
55E16394D78CDD74A0FBA343AB7090DAD70223B199F2133EBF300D96657ABFBA
F38CE72C8A833D3C6A937A1CA321B950C8CB71D66E45C9986C6298A1D8D41A5F
7D1DFD3B04EA0BA35F1EBC62C3043F683DCF8580B1D12808020E2E2275BA97FF
BB0AD2C5BA7EF9CC64977116C3920F4479A729819AB872F18A2FE15167D17959
E993D4FCC84A43F02E224A54E7CB5770B8F2B3EAFEE32CE2A7626C25265B2F1F
AC587D68CFE9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA411984C107C8FD9285
F08FC3C879AE6D42023BE0E114B374F049F75FC09E974E64A63E36F76D0DCE3B
3E57F4A1C80AE684E56726F52F4A49A022808893BADF86ECD0EFEACC9F5B7E84
1DBC5A753D3803C89C438B0FB99CAF607B7B16433C977215E7F78D80C54177E7
D853C4EB05C108B4859A21AFADEEDBAB163F8C1C822C4DA3FB1A29EC3ACE79A8
C5A00293FCA8CAD6BD2A94098E88D45175D4D9A88D0F77DFD5C14FD6081321C7
AEE0F7914B79B9ED057E292AC7A96CEE551D96F4D85369D2B4167C0A622AFC28
80C6D6FCF36412F8EEC622F2783C9F1A0403E9A5D876942803F08147525ECF7E
0304D3BD24256912A2ED3C59B32CB4091040E21EA8F9253E6CB7433656B87E1B
0A17BA09B89DA54E89C36AC72560140421800FFBFCF4372B123AB0EAA5A28063
EA72DB6C8E32FA349461C1A8946B78E05C110976E5B4B81BD89C82D81AEC14F6
8511ECD14AC322A438BDBC4262A26D679ED4D87F89B2D3FF1A88AEC671EC30FB
4DDA9E1BD3A55C4D59BBFB7F5EFB232FCBE3C721D8D181B02711EE2C105FBB16
BAAF98F469068B96F7ADA96E4C628D450E7E1B4025089EDF05D020C458C7F3C0
A9E5F676EB11E606954B3A3613D4E1DE3727C04BAD9177A42914B371F4FECE62
5C47EC539B20F4FCFB72DD0EF45CC71FFA185F653F299CF0858E25008D1538FD
4D2748FD791113395323560E169AC68D884E15ACA3BA6934ACB18CFB0869D655
CC9E8B7B2A883E868B7D9AB5F1966D7364A38F999D57EA93937C58C1343F917C
4B77C7BCD394C7A7C155763DEF4609925F2B5D58FD32BB7BB54CE2DC59D09E42
CF83A35DC7802A111D96E6C592F5DA313DB18AEC1CBD734D9C289A53647EB6D7
735D9E91EE200FFF4250D413CF779E46A1A18E239FD522EDAD8AEA7F7EC5D653
0B3F2D2A59FED4C52F3D93BEEAFDDEACCA99724FC6248DFC44FCA9723223CBAF
554E37F1F63A7CC7241B6A3197C6081BB1F3246540E952D3CE37E2F63D1B34FB
1EBDC9A60F4AB8C27EF1D4E65E5E97328618BF64DE4BEE2CB0F263EF782C0D49
E6AC6384AEA13283716F280C3478C8EE4EA63876BB37A5F17C733167B2CB7DA2
0C340ABA91FF0B3C926798326D283B4A92B34FFB6273EF4F8128FCB12A4F2C8D
13768637D078225DEF89BFE7329F2B420491CAF1794C18E8AB1DEA1749E877EC
12EF096A2BE42692EA401E2A3A11F32513AB4829EF58D62DF6C4CD5658D8DEE5
58D56E17F13ED15C8E490FF120C6DBAE75E3AA5B8D06A527BA83FC7759239ED3
2C9487CE5089F76DAF6F1AEF63D276707539A79C0AA4367F4B1359BFE46E90DE
9ED306DDA195B893F42B5C037A98F21B48AB50B63BC616BA3F3C588FDD7480FA
2A14FCEE4706AA003DAE9F92D5C55727F7AC23F58C8EF808B093595E631544CC
051BAFED695D5C51797C4E9E14EC72010DB93C1EE96A8C4EA4856637A5669681
D8058179F67449AE6584B538A32295BC5C5F40DFC533F5B87A0D016B3A67CAC1
CE1953C9CF7334F7F3605E4426785042123F5784844950C5E30EFF8683D73019
7DEDF1DA5A31B8AAF9FB4F4C4E0E815AD1282D0003D149F5A1A1742EC110A5AD
42B236F512DE383DA77E7ABE6662843B857DF4EFF9DA9D4652CE666141182F86
363104165800E6AABE35B01B991AE910B7DC821CFD8A6B5C7F4CC6FC03C091CE
C66A50A9349FB3B1C2A695930A19809C222D522ADC89CF698C61B861F1B4CCA1
2CF4B2481E472FDDC90C7BF552E25EFA727413E0F7C59661F1ECF4DCCE59D724
2984AFC94A2233E590A733DF8E98FBB11F635BA1B2912109796C1C7ED9476FD9
4CA6A05BB8C3A756CCE5D25F8D2B1B99B73FFECCAF7C7531842B95B7A4A67149
2A44B7F43E4219879931BEA2B95C7510EA319DE31DA5E946E39856B07D81DF2D
0C98672BD99C91405F80083EEFA4F53DBE3356BE438546C0FB741303E40B31EC
F7705509E83E336BA0A9264629A6EC25B94E589B80B54A3BC1358EC3FA22E15F
C60EF3EC60091856CB963DA4B845FB3276FD3F0B755A375F5C9D4F03D038DAFC
2F7B2FC44D874EE1812B3F153E63FE095A87CC113B930AC5E5548B3701982522
7FD74D17B8E54FAF294389E3804F2D8827B368FD56FCA8E01B8FEC2384E26B98
803679524D46A5A1BC4BEEC335A5C78E90E121BEFE8C3E1729FA4353EBB08AE3
9BC8B715A541515BA68D3264DF63396D5C6B2FB989FFAAF363FBCD811050AD49
BEC1A5CCE5CF234EDC9466F1B88FFEF31523001CE48D8F355B2BDC20BDB11845
0F9F9C13AF26147A6F94636839CF1075286502027833484674C9ED2EE44D10C0
CE6B2EEAA9BD1B7182CE9151EF2A4AFE4FA32112954C5B86EF7AE3D015FAC570
F6596AF00C0F5C7D6336E0E19CA338CCD852E4AD9EFDB3784C6366C4A1EB3950
6A273761A898F69A36FA0E6ADE17A52A09061F578841058F3FAE9DDA4237FE83
F267FB2E492AFCBEF4C8E9DF3FA6967F6F5C9216D1F34F1F9025773C7EA50CD0
1DF13A42E9491468078630B74E277F5C32166AB539082917BFF7EF652D589681
C4958EC2FBCE0E01F764EC4EDBF1A7E60ECE54CB38A7251F23A0CD43453352D5
C5AB3E3F4D4D5CAD9543A3ADBD3DA129B2195F29379C4B88C50DF01F591763F1
6FE1D1CAD9382839AE8C789A6339F7D36DAFE163824896DC2C7B007941D39239
CFA195CE54BBFE9F13E4F119193F62F76BEAD5C3BEA1E7044636F7D3BAD00C99
38DA2463A42D22D0C888082F3DDEF6558D68EEE57DD7DE2478A2B21894DBA290
3489ABB6B2EB9F977F3F4D690B31E8F6E08514B46890A7D87B06DD81FCC70783
17F01C0E31E1A4C310B0C4E5DAEDBD08EDBCBC3BAC588F367E850F9D9D2A9F7B
17BDC34F34DA91337E5469B32C9ED1980C4CB36101226D4929EE7C9DC63EA8F9
780763E889B13FB2BC0150921CF2C5C11A3A9A52E09A006B8124A80BBF26C1B0
D309A6E8E5F3879805D13FB270799FDB98850AC5630E0DB9EA544860D688E9CD
F25E98769FDA84FA98DAA60F8B7B4B80EE209CC66F763542D242050EE1FD5980
C610C2AE6F94B0997E15984F42D43D629178D72F01CFE1AB79E6A2F569230CAF
55EB6CF686087DE12B3D6D19E4ED3FC032610EC4A97842F2BB59894122796E46
19F5CE7FC3B92ED8BC604ABBE0575CF97D126E1669A54A08243D46A59ACBF3D6
48C1AE05E9A2A4432B7BB69C467659C2247A0B25217E43C8C3A9D70992C1F31D
C6753222850ECF459A7BEFF8CE272B577AD0616D09DDA2A16584C8D40E7F673F
BC859CFE666140D9EA8AC68B343772084D45B94B8234219A28235DAA4CAE0221
E2C18D9ACEC0622533CD5D4DE4A73E4EBC70F615B86F0F94CB2242B9A1A169D9
F8F288743D1E3EB92D3CF24F6243BC42E7B1F1F575D4877A1114984F07EA9E09
ED3624794C0C045A9458C6C166600BCFCA61AFE9D26BFF842E08752064C9D149
D5AB137C1726F83E98E66BA3E83FC00043F27F1E73B67016A505489C560A04D6
A74092A710A9A82AF7E4210EEE6AC5E5FE8910A2E8849D5B7ED1DAC77D334929
9641212AAF7B27B1C959D846B0224772F8179D4CC7BE102894D7FECB5B22A6FB
8360FB584F3EA2AB3D9A37872A5291F73DC3A126EBEE67B036D93D18AB91F771
A43E7F7BE26BE99692B0CD741F656584616670EAE0379B84B8D0D217ED437B23
DE309A360FF60CA82A8251BE5671A44A0AEFC1EA268D4264FA4C353F3BFB7C57
E0A3DEC909947A9CCDDC83DC092E21BC6326AC2815B518D59BEBEB4DC17A474E
0B3A1A6C53FC6B159D8595B2B290880FC2BFE071B57D5336A063BA688D6AF88D
F1AFCF1B3C190416EF1B8897DF2D441948421A307AF4E59EE9ED1D9AFEE7B01F
93081046366E3E4C38F4106AE01E2CF0DC58E172117592912B64F0FD08482F19
6C8BA2C364A97378970CF10072592BEA9691547D4E09D911556EDCCBDDFB2F38
2EA7B1CE8E90BE739C56F35C4E69BD5B50DB037983D90099C4A3614631DFE183
A51E69847520859209ED50C2E971875E956600DB7D9BC9E806B2B0538F96B28F
8A1EBF12EFAAB723A7C816D47A9B3FDFA93E8C92F7373752E17DFBB364CF9CFD
044214141B237DF5DF3D73BA6EF602F903C70BB29D852EFCF3751A5D80A88497
21E70D68A96366B5B2F5C9C7999C479BAF2E1950694B571F32BA473137EE9A79
EC3F588762C66D9860B6D4FA7E3D32EE0CE159C111A6468D2DAB04B3ACAC6198
6BC3AF3F270CB2E626F2383C1CAB8F5D9079CC78A958BD37387035E2DAB8EF45
B36F469AF412C1A57BC2B045AC90C9ED95B56D603E8D09061E486AF75A8C1BCE
A9D21057958D5FBEF562095F81BF4684EE4D0ACDE9CCEFF38357C8ED9AEA94B9
151CCD6F99AC59DB0719C9737134921969A14437DCE0C6B2F44FF369069917F3
BB200B8F1EECD7ED630FAA3E907C1DB5CA65E297B0DB9B140DF4659E33C48837
5FAF18AC8EAEEB99B34D37764CCA28A466731CE5C4CA61AFE9D26BFF842E0875
2064C9D149D5AB137C1486627B9365118904A06FD3ADC934362FF294CCB98CF5
733C7DB75965B5B3E0C0E5F2D242B83C3F1FDEC83789DC7CB30AEAFDDFC90BC2
21B2110CBF5F561E004C325FCEBDA9FD300202207EF54CCCB9B298EFFC215C26
0BBD9280E2EDBD6D674B815E8CC6FE268840400BA3FDFCB8641E31F475530F09
C5B45189E6AA583E8805314303D52D8B5673C1B4B0F44B1F08930ACC46A54A7D
53A67471DB17CD6A626FA2286373C66C4E402CE5D8C9E4B323320E86A751E25B
22ED67B8950124818EB258558D55DF637C0AF9F15A33360DEA36DDEA3AF6D032
5E404404B3C17A234C0A8CCB717FCBA052088FF015136D44AB7571A2CC04F39A
D08C95132383C7F8E1D7BAA11314ECB15983669CB26E0D1013682B37DB1675D7
459399B8C6EA8C10AAD1B2AAD8C26A34F0954183ADC9E6F11734D37D4468C222
5E9463EAC839D584ED1405A5F27B28A19B1E3B2E31132B96B42F235EFF3A969D
0E5FEF0B3F1CE48D8F355B2BDFB5B159FF38D7FE42F04D18D133930FA34F90F1
0A8EFA97D9B977C983476983297D3C8BAF3BC9C0D590C502A9713D78F437DAE5
019CBF83ABB96622B3800D5F7DD514A1989E1870DC13F231A3A822D4AF30F615
9D46908B156D2CE5CC9FE34A8AAB8807031A8218A0E1A5E0185A71AE54A01DFE
A1F0C6D3EBD0B3EABF78597793E382769CE18EB82274BCFE2E9DAD577B66232B
3192CFE311434822CE24ED6438F2103F4EEAECD38BB01B2C6F44AD96A01BE392
2F1CB7DE5576AF240E5E90DE41FEBA4320FEBA49F5AEEE14FACB8BE46D1A9DE4
6A8FA9ECE135CDBD01C0AF945259EF364631E8E8DF511894E8900D7D554E7152
0763D6FD209A23F24B713F90024CC452D4507D880E322F11492FE2D4693CDDA5
926F4D6643907C7C62649763861923B2F335DE040A8C24E73A0DC3FFAD5DF3C8
7EEFD06CA3E4D0D6CC2B904C38F4106AE01E2CF0D9C5F67760C94ACDBD349CBD
18E8CEA65C0A0AAD834DC48CD190CEAB577C4EF72BDE7188AEEC3E466AE803B4
A5026779D9CE0C778599803EE49EBCAF6C6E111EDC961600B07BB7E08BFA5CA8
C5EEF8386971DE077781A9E73A26692BC26D1DD0760142E4D55CE6500A60AAD8
F7A75CB1549621EA8FAEEAB5E745E5CAF9DD3087C4764D42A2410F36E5B0018C
20AB43FB4C215C95659DD7D7207ED1096AA826B223E36E496B79B2C7384BD18B
3817C4BD8369458A1ABAAA7CE8CAA45A9CF32034CD2106773B44BC7937E2052A
9E884984EC754AD5FFA2A1DAA2649DEF7FFF7FA417E091902C8368DFCF1AA861
5B8C6D0F0FA0EDF0E05E9704C2434F571E18DE8C6F6121D102A8E3C0074AE68F
339676D7BB9AF94FBE12AF5488D4B3F5B529A5F36B592CD31FABB9681E652187
7550339CCF16751CBA601E8FFE42C9877EDD26B9DCE4C271C33EDB0C544D1A49
B92FFF275D1F3607DD9ED193ADF2C24BA54688894BD1A19EFBA8EAE43C63EB7D
E0F5AAE4F89C7720B587000737EC7AF345B1EB3B7E8780F0508FD81A1EC8D91E
A81134E96492D3067DC940EC39A3D73A7CBFFDA8248427FCA6053EB15AFAEA40
E319260D8DCB04197B84DD29BC37E245DE1F733EC51463B1EF179A96E8C1BBEB
FBE83B2FA0B7FB0314FDF45F05106CB4E5E03072C214A0BC53C66435A959D465
B74109BA1843085C27C269C751AB2C5E99325A11DF1406AF1D0AE60BC2939C03
8A308187A60AE283E7C274B6D9388B8B586D4DE80A0316E2B540550CF4F24201
1E70880A8AEDA809E90BE4203C3F857F74EA2C64C25B2CE086713E396437D37A
135783DB2AA4FCAF5C98F4B942265142A0B331B79FD7D2E5253E10733C2AADCC
B3DD3DD07E451390711E0E9DDE264CDC60FA677FC6378BBF068354427E16368E
1BF92239EEEC09E50151C166892AA2415303D2ABD61EAD6A453D5EF93A2E8625
B83749A64A7FFCF96007AFA65AF4FF462738B5B60B749DF353AFF7F47BDD61C9
1DA2DBEAC49875691AA267859AD4C6FEA6A5915F4BB60337AA67EB582FD0CC40
250692362A84A6AD4E1A45392660EF00A158C9FDCC13AC6B98DEB87EA382A342
68C97130C9F83223CA65E081443C32F76B2E69531BCE0E0DF1CDA62B59D893A5
959E924476E93CF7DCA4E955286E9E85C6E5FAA8D878652A4CAF2DCB99502595
C5767E8E426BA23874369257C27FC401B897A5ED4709B6DC1738B2DC6281C48F
E0F5706D83C1D32DBFBCD3D643BFB4364B85BE8D374A8D48A10BD7B59B98D2BE
043646B02AFEF597D2170675E59307E7D2EDD8D256AE1254675CD0EA94A638DB
BD0D0627A5AE85B3B06BBB5CF844837C8EAD4D4EF97716523276044FF1DA4AAB
AB9CAD4F891DF034AAA2F22EEE5AAF118E236AF7203970B908144FD6A49D62B4
AA487C72F456899AB090246E76B817793536F67C1588EDD14D6BCBAF4D8D2206
8CF6FB6749308B73EBF4DC5A06ADDE6F83BFB368388BF4BC747B624FFF0F41BF
D3E96F97C4FEB31B0FB5C367C5F78B048C0028AFD5E4F4DF59619F9D4C0F28A9
5A2FFB33D793D0E0B11F781A3C1C54A705AE4322BED85EF2022EA1DB12DE17BE
D15E6180B4FD4920794A614E8CDA81F01E0CBB7EBEBF9876CFC52EE5362FAE1E
0EBB9E476E36E9127419F27469DD3BA6A1D82680155C055022527EFA589455B7
C07547E3BAAA4AA7CD8A23813301063DADC961CA7434A5C6A5DB608D0760FCBF
45DF6AEFAD0FD911F1D484563DD038529060B541F6E2706158A2EADE7E631618
F48D633E55A4DA9421AB550DB7F64C95C19E66F93DBC8E9CA5E86793FA378899
36F823DB4D44E47009E12819445BE9240D8EEFCB10CA128E8B9EE39A31920987
73EF4313CD8AD96FF7FA7D349FBD703CE8A2EB82C1565370384853C2691778FC
DD2A17B7A940D99BA95987EF3F0C71E90DF4B27EEF84A36EBB74CE59EEAD857F
875A51E9BBED3C9E9AB2A8A79B5A871AE31CA6CB3D64576524BE0B1B9D79A765
36DA7036198FE44F3EE5B5348DB0B4782BA6D48AEE80D379CFEE11E4F1CF781F
28AEAA7F8175295BE364F4FF90ADDC9DB515FBD596351B88807B579BB6A0C8F6
9CD919E311B6ADE903B6EE94C580449BCAFD90BCABA4EF9BEA75B2334B6D0116
77BCA707F30DE0CF72BCD39D6E934B23A5C5C87D078E2FAF0E64F2A87F902F28
3615BA37673DFAF9E0D2ECB251397AF88E699F7437339478BE40C39D57DD280B
EF8E9A14C41094F704AD4A2236651359D3942F98C02657D43472B732FE47125A
978188BE51817493916FF8631AC8159FEB24AF2D8FEFC29FE8E07690F6E10C90
F2B95394DA084252A18ADD5626450A2914B9892E0147A245EE0A2211C4111563
ABB27AB6E746CEBF9CE816B349CE7E2E6A319B7F91E5EA33991B1A04499E6BFF
161C96F51F7D5F3829CB969639BF2C227E8BFB63807FC36AB88C65647605380D
6719079991D4BFFD5CFF4016400DC83E5BC6E8433F553934AE1CDEF29DE336B9
8C4ADD7F99BFF30EFA4E01AC7AAE77183C14FA5B76B08C3D154265A22CD24D22
08E0681778521870E80CEA2A87AAD5CC5FB7E9D220C809AA31E0EE5E69DA51D0
ACA294AC60CBA6F1C0645B26C308744517BFC425440BEE74601A592651D90FBD
B73C5F1AE69650C2F94FD7423FC7452771B82AA52B6C090D4D19C07579767898
8274CE2AE002639D314CFFE080800B4DE289F1A1AF4513558F46BC41E42F1E31
20A19768ACE867E477C72E6CDA1458BC8DB8E1DA62D42F448933910F0FC5AD3F
37F3C0F8C8B4CA4506C340119CB44204B0129BB5AA758162328979CD3ECC032B
EADE20C001B5D031601B07293724911F271963907268939A7077AB632FE08C25
B51D49C48DAB045F59616134880BD8BFD50CF00879464AEAB154DFC2C08F8C10
98BF71196B775C4AB13E847117D1908D958AD0EFBD5C6CBE684E8993B9C482B4
9BF161095D5433BB06F9A25DEA07FFDB2155DAE8F3660F041A3D43118ED30D3D
9000A6AA1F71D6CC6FF0552B01417A24C0489BE85952A6776CA88C806DDA31F0
282390810E3E8A6F2D62624F8FE4885E026B5748C0D34F155F59428C13E4D090
E30886D8F1CE06E367580D62A3044D86CBB53775A35F4C4F79078BE326D09EF9
9C25BE661451A48B8D95C5D8F6870640EC9641455796196B24E6B696CD049722
81DF8466450C56E73D1DF1A51672452DF44BB57C79B09AC4F26D73AF263680D2
143B36A5A252A26A244932BCD87E29AAA354ABBEA21243084ECD3E5E0B2A4E7C
290926DB52258A8EEDC66700FB549A9283C44F5008F1D4D2C9D54B1BCD10DD79
58F06FC41A77CEAB935B5CA2F739C797029BAA9D1FD7EE9405CB29E40E59A50F
39A2D3A7C748664D0DF3DAB0C546942F887B08EA350FBD37C170E37F4EDB7BFA
4BA312D36DB126F3F5820567A9A94391AB4330B37D4E7E2102D867A3C279A84F
29F03CB596517EF1FC465570CE0EE6B820385CA360C2EE3B5143B4D7C02512F2
C206936D56176E3E2D24DC37BC97575EBF6B7F14B8887F576E9D5C9F615EC830
A69100B798D11587B9747BC0EB49023DFC9947DE3D2583813E7E01A0FFB1DB00
40AC5876B209A2D6857D7C042EADF5D89E22D34EBD2B3C90EF5D9AF0A0DBD514
5F0FAF61A836B73CE97C83E306D223CE7774FA5AF973D985C788B14ACD2C158F
E38F1DB46C97537A4DFF3B518AF20479E28F3348CB30D76BDAA84D2E933C94C9
9D13E74F1B7A2625C6E607C1EE5D38720004E4858B624AD50EF959B1E2F790C6
D0A2E6E82E6840E51B38C4579FB95337405A26FCACD1BCC907868E8C5D9331A6
3AEE0808D7BAF440151B45D2A6AFFB7E617C9265B466295CF70CB228F9B6D927
21E8C240B2D22FFCD960B94C55460A557DB6EE21CD6B72A26F7C5BFB146E5B38
643081A91DA1D968D71C4E8D3E45FA5C4C71AE88CB1F10D0DD754C5FD1B4EBEB
FCD135748915856FE50D442BEB8A77F9298A753B4412B6D7E24E2B18FA0D5A7B
AAB82D3297C9CEDC20F96441EDD77912A6E278C4C61BE30E4CE55CEE9E4D5B2F
C43ED424F1D4A26A62D71FAF1FDB22E36A57E3F58DB7AD120D9DA6DA80D33DF1
67B2D5EB80A3007FBBAF0BD71929B7706170B67822A5FF7C730360CF6EB23BC0
07F533891BCCA2818D6019FC1622A804C1238FB9A0A8C6E375F4FEBC5758FF0C
9116BB0D00B6E24214CDEBB2918B949FBAF7EAC2D6E2FAF9287268BF1C0FB911
F7C9417894D8DBE81B0A41EBD0CC6D71A2E4B5528296D8827B8E99AC264C8608
360CB80F0E85619073C13E213CE2CD9639843D9D4AAD46370C76C3162444F3AA
3672C66C81B3B7E6D475C429AABA86C5E24DD1A399C71785CB889E27F0B23348
AF0E1DB32EDCD71B48CDBA049DAFE3EFBDA7D9A67E7B67CBC15B6A857627BBD4
9BE34F5C7B2EA6C0AC33E522A40C38BB1F69F691122BFE48E6FE4003BED0D24E
4795E12032984302EB1804481D62AE03D554871487EB47FB75983483B8E9F23E
06D7DC79591C3D2E376B51E3726E32E5C129BFF10F485B8221483C2AD47B0ACA
1ACD5FDF73BF7D5EE5FBAF3CF3E7189AB59B814D50658E1A4324C3B0C1E808A6
7F8C1272B480A6159DAF45EC32E93CB5F15529115D38B484207D8F70375F3368
51879692EB95905F74956D7C9B33DF636E35011FF6D197C9BEA0190EFAA41BF0
A7F27D2A274B1D654C2683E8F0DF639D78374C15A410AC5AC35FCB375E20BD3D
283BE2AF971A843073DAEE9D88B75EE46A48E9C4D49E716E828DB2484A751597
C7C5D25EE9D241443F85CC936AC92B6A66F2C375798319F29DA8C996F21B95EC
298B4C5C9808467F55B3CA9B1F3952D101D6CE60D1A0A97C99EDB3FADA84CE30
8717B91244B5FFC30C900245D5DCE465E3CF3CCE175875B876CA70B1C7D8A94F
F1FF6FEF4143E5FABA608F4750D9F6C92EBFC774E82C81D58DD157C1E71879DB
FD2366D421F3AA230DBAC8CA9B123F8F534C157499657E565BA5117DB4AAF5E9
56EC5D20F1C64FE1D7838B468C663E67B8D29CF63309F98AB436039124DBBF37
CF287D3D5C30D20FD1358CBB61AA05EF45403C3B8019E9D8C967A5EAA288D5AA
D329AD7D1352E00181C4C75D7D3DF203DDF0F46C7CA67023CE052E3296ADB222
FE215474A27F13C35538CE86CD9BB2321C5698B48F381A17E51B6660C5364EDD
4DFED6DBD462E9095902D4501A340739BB49066FDAE623110FB41F88323B60BA
0DD88BA5053465DD48CCA20D5759450FEF1D883C3C47C2301A7215A0BD491055
371A52F99FF290E8438626FB5F6088590EF3CB977B17D6AF912DC4ED243A0C65
0136B8EEC999DA93F9BDDCD89EA75A119F2282B0FD2150D8E88F7B3CC7490356
4FED1A0A684762116477A4D31E86315F29C0106A13790A26EBBBE3B003C4C96B
BCD4ACFCE875BCA9550E20DD84D867B70C5D841AF76E112AFB947365B17DDB1A
85BC47474A7B135CE4C0818154A0B50ECB2AEEA335B5BDE57B0611E50E0EF6EF
D917EE28E980A062580B9FA11ECA9BCA88689C8934EDCA599ACC5C1EA7B60FB7
9F8113DED3A3E49E61D575195A086DA3B9B30368BC424AFAAAE63E2D87CC67C2
68BA8DB757B85BB9E137D94D7E59E418E80D2EDC64B06481A32733AD834B294F
36E3BE1322531F90B27A350233112B0A339366B7373CE058456E0E1285F93C1C
822EFA66A75E01A68758FD97C5928BB2B1DA7CB3850B6AC8DBA8B6B0143F4C66
45BCA7AAA994763F8E548A5673B23AE113B27C840C2A5C22FB0CAAB9C88E4840
842EACD9168B620439F55FCA7313B67CE7FA22FFC4ADC306E48B967253105BB2
A689D9C05CF8ECA2B286735F37EFF572CA73E4E558E2B016B13DD10CA06A9192
587047DE1DBB43878E3EF52717811B1078CDB36CFA57B324569A5283A557A996
D0EA15A6C8815A66967B759683A08E1A82794BABD4D8814B53865E03C0C0D6DE
7B16FCF3A25399BA8CDFA85E1E9B8163B23440457B886316F5F5318E59D899C0
5E423C089EF4C750437A96608C16A5B9D713E5184646740BD790BF10405E80AF
3C1B82D3AD5B25527D6DC793EAD07F6BBC15A883FDF4C04A1EFAA71282B53CEF
EE5A5C18087F2C3B28BEAF58B3EDA560A46AA11AAF6409C9BCCEB325B5988BBA
50810CFADB75883255DEBAB6116D53BF50D681063EA6A439F193E4F7F7258FF4
933A7F5E2B732F3079B890C59CDE423533594FCA923D312888E865AC3E762616
7E369AC65724E0E7D39C2B21E65976588BA3E06BE510E51FB6118C9837826B5C
43A1EB5BA0431C918A879828150795CF2BA78D4B351C39C6648CDF3DB7D7DA52
8DD5CC48795A5049312DD3A6CD4B0343D23E006ECB28284454C4BE21FD88A932
7C3609D8888F174524917B75604A4075416262747ACFFD9C16129FB088DDCB10
080AEA9CF222BCA2FBAFE2290E8AA03A28847AFE8A99CC319B1498AF986358B6
61FF1620D17527EF0EC2614EFC317B3EC0BE781B8631A37DBFF50EC66AD74DCD
4EBC1CC4B84D05ADCBADBC2933C1D0DAC1035A5A6B41BE612088E7196400FEC0
A6D60143CC3D55F1DF6AAF7C9D25D99E42FD96B2619C7CF300FAA3ABADA58D1B
CE5C9DECE27A3496B1DD20C73B220E9E8A694F5AB21C2E9BA2D96F527B18C279
36087ECC11857EB450A5EA61CB5B39159BA9ED5D1F1D921DD21A2D91C2C88736
994B723070FEDE72BBAE1A5BBA0DDA3F3F7061C15460E3C1BC8E20988FBC40B9
81CD090D42036444FD4729538BA939C3A82BFDB44BCF7C169A266871978FFA3B
FECE3465E9F0918267336D6873D3CB7FF4EFAC1D126E5AA128B5956F0EAAB791
D43B907A6EC2FF53F98821703295813331DA7761B1A0D0737E96BB4B92ED7DBA
D6C2DC672BF913ED44A41A2D196BC8E39B2AA47BDB66816F5C2444346F2C6CB5
7E619CAE05B0ABFA6979C0AEA235474A2581C01C4AAF34A4F07AC86879D91DAD
EAA25F850083BE6CC26AE7437664AECF6DA74761441DAD725DDBDF6824B0A4F0
D6954F57E960DD8EC7A3C6E0901F595D24202DE22DE3D1C72ED1053243101367
7C7B01BCBBB9B720B45BDADF643C2560C7CDBD792227AE48959C7551E08A8256
4A59A3160A8BF467E281AE0766CE518744A9C7B679435530A5F6B7234CBEB84A
1C8BFB2D33884F5BA766E79C542FCF28F4B6A03590393CE250E82BE2970DAD99
FAAB3EAFF559C92EBEEDF90BBFB1B309B972C9FFFC9981B83CA2B4D94A3BBF5D
69E64D9DA11A1C4A2207FAC0062372C01F8E1A93969CDE2654505DD563AE18BC
9E21875793CB03A96A0CC3C4B33C72342AE89983D9B3712D422E934429B55AE8
AEB56446E98FE1B7C6884418C2E63614C86A5657A6F517558309B7080172FB96
FBB203F0B58A4ADC9B4A56C69C13213BE3151948AC9FB8410A3DE2AEF9CE2FA3
A8EF14CDB24151C46A47E08869DBEAC894EA5795F6B0D8833D6F1077374EFA16
5C269696CF1B2382E1E173A04FE215FB6782CABA23DA62C47D6320556518C2B5
4B1CA994F848D5EFFEB8AB222838BFF1015AC65CDA91C8AEE4883E20E754F63B
90932E41FE0502EAF9F6D121B22057C08CB5DC74ED414FF86E52646821340B1C
FADFC5FF047F6AC8B9345390A6F3C3F5D5EEA1EAB610192AE0A2962A700315F3
C31E13FDA0E31477441B037218C4BACA16D8E5027B7D1E0C22A83AA19F30AB25
F328B5826ECBA0E5242D29F19D50CFF1C8E6F1A1BD7AC8A2F12EC8418B380720
5173AE57C7DAACDFC074BABD8902564AD67057C8F40181B7A1F6BED0074446DA
EFAA42FCA6CCB3AF76ADBF1D2A79C60B2E7C84CB2435A8D3DFADE40134EDBCF4
A3679EFD618539345AA76D1748AB82CCF886D2BC0A6C0556B1089093E554E330
13F3D791C431E7614929B78E62BB2AAEBDFE22E3F54307EB53D2A8B665BCB864
8202EA67BCCADDDEF93F03A5456E8BB10954B4DBC4B12124A751DEE4F5AB0FA3
7D8EE9A209CAB5388360FFD7E89B439C20CD88F9FA49189D45C424863DCE25D8
C9CC2E2FB1CA1517AC155E1CB33BA3BCD9F48CE4FC5FA0E2B1DB9944A78DF0C2
C10E1EBBFF6607D371EB45D6897A3CA01E7ABA55872C1B458332DFCE3791786E
ACC6CD5D32B34863EEA9BF2E62B1B1C0ACEC2795DA8F8B0A9DF75E0FA1FC9E56
D188AF94047D9E11435F89E4AC43CC1102CF82A8A36A0ABC66FEAF1920E91465
681CC429CE99E5573E01D1FB620B874A1B4A642D7A9741229BF23BFAD3DD1F9D
1D70D0FEB42967EC653DE8EF5D61EE6F9F7C735F9844D9C01535F3C11DE2CA3D
E5C3E2EC6EC9B5A021D74A4B656B77233169C41DDE070603A59E717FA7926D1A
05FDB2436319FB3AC1AA75A6AED1DBFDB74A533413B097B248D0A83FC79B687C
8FC976C239E4FE13FF304CC43D8D23AC4977A61582119BE98ABDF4E90600E8DC
FD23C3F8EA3373F1EB08059A983511E5C8381160C07D076067E4F545BEF021A3
3E279BBCFD066AC5467B580D793D7586849602AF70E3EAE5354A53A7DB93BF63
2D2C2AE13DB2AC679E7C20B759551DB403B9FE13B0250F98867F35CAB468B0B5
D7010C6AE0245E32E3EA835D68D03D275A9671EA6FFCC1CAA6A10355ED51492E
32DFD9E70686D9381F0A6C32341A79F570BA85BBF6F6B68F3B1F7AADD0B81D2F
1CB2310DDE1BA5CE2AEF31EE9C79E4F150D9459F576EC783186F66BC0AC8953B
06F99B4CF1A5FA7C5A2F04465C9392C58B00E35EDD44C54D5674DB9D2A67F478
D6A2469E3AD6160AA8505D2429AA6FFBD92DA926E42A4AD7B7F2E6841B0AC266
6F95DEF29DC13ED7D073F637DCA5F78398550441A96BC351F569691CEEAEA302
D8AA9323528A8C90D6055A67EB96B5C65793B1566BE9227D725AC14DBECACB0B
0BB018BBE764D9007541630BAF16E150522F5B47B4A80087AC57104B86FDE52E
7AFA53C6EFC284A6665F8C59C1A28C6F0FB9125430B3A4CDFE8A4AD25466095D
3CE1A2E3954AF4E4FB910D64EF37997226A43C87EF895F0B24D5E648E8A4A4CA
92B8E14670AE49E25B37E035FD97EFE4B2A564957FEB148F54E085A87CF80E66
4576F4CED64D10BC0477BFB543938C297266E7477457961CF22ABECC99E4E9BF
07CA37B4D5C968F9AB9B5CC2BF243CC44E23D10194520D5C6DD632B6A20ADD2C
4BCB93A6EEB84B6A28C2DA4A9B6446DC1E139F308A6033029D464D2582EA578D
9D1FC56433D39109C44A56748D865395323BC224B0739F75F0F1D250DB39EF46
8462CCE9D0CEB6AFFC1DB954D41CE677D750AB49AE2C13A2D139D82804504280
9B34529D4DEC757D33CEBD3268B38E638F8138B7E61A60FB9FA03E8D3A3D3C58
C3B857F2F3F8EFFA542748EC408CE53B304DC2476C43FD6034F59F72A5F09FB3
07261DA0E95EA5150FC860518065B3510BD47CEC49D4C46D83FC1E8E86B758B5
5C094A4F95FC04697F09E800E15D79668008B2CA4CBBDDF7B00151A0ECFFC2FE
F3FB304DB7D5EFEB18AFF2BCE0AFC03DC2E2742A450C501C002A3799B3BCA5B4
66A87B16ADE65508645A04FB5A31760FA2CCFE81D5DE6CA937A66F4FDFD99880
58069DFE1F6A7D6959B03C5BBE12FD99B3697F30F86EB2BAB90905A89319B445
19E343F6F176030FFF8A6E67975927BBD762D9A893471D0BC5FA63E74CAD7C9C
4BF54297444F4F82B949E013F8BACB19CB1450E6220538720031A3C26C5CC8D4
9FD7366CBB20636732D0234A9FB3FAC3DA3AF9DA8EF00DE90CF8E8FD62ECCFD6
FA6EFDFBE4099563F84FF8EA4A3EAF4E869343D8057FF2A428D0025E1C9FD9E8
7CCEA1824A4886642E1874A34719D07E1ACAC11CF5D9FB7815C059E6A89CAA27
0FC57E3075119B59E6A2A23FF0420EAA8056C2521FBC611F72076116144D0449
3DBB154C1EFC9868523C8409EA59F5108D4330D86C3BB87CD3148CBAD545EC5D
10C7E51DCA1AD04B734C52968BAE97676C9D1776933B6D7FA8B33257172BF642
EA91864A4B0718FEDDF9BA3BED27D1F245803EE596B5B028E40AF55C9A9EB79E
1B48F53F48AFCAADF58D0E6197D69D8D053C2963BD4E9C6F94D69DF800BE678B
8FC072870023C31C1FD013E14D5BBA687F453D4A5CF4E61DA5C2E238FAC47817
0AB052529158AA483FBF2D06CDD4D82A6B974664DB655577527C380AB31CEA64
3513D89845184EB5F9852A13A2C38EC152C5B0B6B2F652D5909461F774D36EF2
77706253A3B34C00EC404275A39B8219128B6AB3AFF63294D0ADC1607B1F29A1
95306258F15D8529DD13DBD701A1C9C3727AB0EBE0DF5E4B54C9DD4A6DDE7B29
65BD38D6D38567255D714DEA50758FAEBDC06F603561B44F80C6F0332E5864B4
C6A9762F912CE0A1935CB9C37EC8A01DBEBEDFC6793A5089B83F6E12AE92454D
9CE37F9D2E353C32C6745B6AFEB589AB80F636F6398D8C74187246A7DEFE33FE
EB31E65F4AADEE6539AF4D789F5477A2F4264ED8900D17D9627AE1C9048C4C53
B271D6B57F53D576F9BA45A7CD7FF72EF88C4669583304C15198D7DD89D4ADFD
C8746438FCDC66D5775B3DCD661D522B07A0EDC941C5BEFBFB133288D602A7DF
29CD6BD9035AC065D448D4025F218824A2F3601054F5259C086476BE75099758
5C6A60328DBF0639831FCD7D63B24F091CA6AE3CB7B2FB8F08E70E8979C8C12F
57806D70EABB2034DB563263395579F2B2D33E0A136C429A9D806C2CF8ADFB7B
88E183809095E88840F703E9BF997E8A6666919C5AEDBD193B940C91E6DF1540
0F3577EA741E1A34438FC4A756ABA3A796264BA9F2C74ACE68EADD136088DCAB
5013E93A20E01E66F4F2729B6F4192D6B971FCA9C5DA2BD52DDD35855BC7D149
877CFDE473690226D242785AF2BC66B4FB44D3AAF4F1E957BDE8D63FF62E60BC
B4E6FA8133D7B9A4123C4950EF0D8231BF882CA7B57C38D5D0DE7F54FE7CF6CF
4FAC8878E4A29B918C6B92060720730E9F51B765844747780ED76337619F86AF
1FB6373D0CEE6B46717CB6DC6DF74D6043D5774F18A1AD10594AC5A5B92A7661
3D80E51CDAB4A379A6D91C8260F0A00D51CC89761753F8E99760B78AE186F2A2
02F9BA037624B33084CDBF968F22DE0E2BA748F6210F4F6EC2DF28620566DE7D
CE025104546B3023C9D07D961F08C78D8017AA3CC0CD631AD367683FEC40EDF3
08042B03BE865124A6B129863FE6A8FA22AF02C33F4B7452B2C7D408B8057A54
A4EF83D3DD20FF35ABD92E13ADF85FA7B62AFD447DD3738817A8EC26ED6581AF
A8B655CE9AD3C6862EAD836DF1C3B4A4908D63DAAD9E2D28F30A5B297DAC8617
D15A2032E093534899C8282D0934893281FA579E122B77198AEEC75B3B1B60EF
AEB98F46E72609A9921A71A33FA82221244A7FA93401E8DFC5392557E03E243F
9BA1424F0E7D33F519BC388822042641BB149124147795ADD2B571F1196BC562
7D061CBAA805921D4EB1B72AC8F83A69A5AF81CF60BB5DD8E7FE40312068D723
645033106CC2790B8FE0D6D6C6B825BA4D260CCA01AF717A3CA0683A652838E6
EEA55DEFC4D2FD3328E41B66EA9C033E2C477D17766FCA417FFD0447ACCA750D
45E415008CB1A33B2D125D3F0317BC2837C2DB7A077C37F460DF5E3872C13189
4641B76803F2AC39103594EC513AC1B1B2A9818EFA495DD7323AD188214EC435
BDEF2823CFAF8BBE6306D6B1CCDE4251E736E6B1CBD09075410845F55780C593
78BAE88F6E3EAF3E903BAB38790E872DB7ABC0D0B3D89C0F144261391B4E2DFA
811A7E8B37037A3A692190FAA640A8315707D9A0FC2A0D3AE24D4A2D44898F0B
FC4C3BA359ED4B57E73DE8A9D93563839E93BE0F2B76DAEE29371EF9BB2C450C
EB8CD34C063D5AC29A2A981D0B2728D638A771F6F4AA9E87301B4CD33902E6DE
79ADDEF458C2FE117597DC08BB7E820FADF2700879CCFC5D876BC9193299B9F8
B39F7B01398298382A60D8FF121B70EF238C02844AC7349427034E40FC35394B
9B98BDBD3164E8FDF9AE09FACAE17EFC8C1E9BC733458A7C0BCD441D4F7B40F0
65B01D9C00A03107B0EBC64842A331D28117C6059BBAC1A28388DBD9B16B1EB2
CCFCBB9507A2EE5966DB6D6584256B65659826A138B33E7BD64C369212358A94
6584FF8B58611A76401DC0E60DC1511B0BBAB3F4B5156A4F429D2ABCC724BE8B
75B86E30CC7FF9E09DC8599A71D389489F00D1D6221B9DD9CB641E5BC06A2386
03652643E346506B981C4C25D971DD4E8E611258326E9DF749C6A839FF6E04DC
B311B2F3FCCDF2EE401CE8794D5613C20637DEA0A13F708770609BDC565AF4E5
AC2B93CC9F3C346ED7326B1A2FEEB907749ABD13734B458CAD5A567BC35C7ECC
8AA18D6CEF09474C7DC80126167F881BB41E2CF876AD6F2CAAF5B0541AF0CBA8
73CC43AFC2BE532E50BA05049B5C81F9C291A09902955879B396F134B3CA7E37
70ED16F52C6C0BE39FA4407D92A4B6CDCA850E04E6FAF1B46A77392DBE20F4FE
E018791E175E32BCB604FA4ED1C3DABAFA6EBE540F1E539EC3C0DE768EFDC88F
EDA904AB6F3320578021B0119E0ED56D35115CA6602FEAC9F8054452951D71BC
3B0B201FCD681510A92404D77258AC11CF0BE25BAC77D9AE654BD6E4320E40A2
957AF8F20D293F17F5521D3311F85DC40CDD29A20208BDDB011914865E009C6F
55F5A9E6F9626EC876A86DC428FF789B22212BF130617F41742EEA3111FE7852
EFFB07F33B0BAE5085D22F5454187EF7B683A0CDC5A2506821084B68A9600E62
74DBA1BB69BBCB1ED0A9565A115CEDF7341C7580302C109929462790419885BD
19B28485A5848E7893AA3D939EA7116B79FA1E7559453F0E5D6CE8450BA1B158
0D288DD074093638FB7B99CE233715C50CA9FDAA586717881A29C2FFA4C019D9
F31C4132675B9EE99C6684B9FFB1FAF92285452E2A3454EA97934EFD5E483007
5D25DE73245555750A061A5D809A690B806546D773DF1959595A46526F3011B6
66F4148991C353852B4CD283018EB513BD246F8D66CF6732FF6D53076BCA828F
01756A72908DDFA92BC9F8F0B20DCD579F6E0ED1524E4914678BF336C1C9C72C
68F737C2A389DD28CC6B84F12A536050D0129914A3FDA4F98767931A4DF0BBFE
8790778C5A5D2CEA6FF51A317696E8964FA3504A318BC78D51D977AF5129DE6A
D0AE42FFE037D9126BAEBC8B4BBB34C8B05BE08D7A1E06DB3C2EF02A7650CBE8
5C0567BA863E1B0C91B70277317D54C9D6A77AF2A77D2E3E6868BA7A3C682CAD
B8EBD5344ECA4A865FDBEDC83B76CE697A243045439CD6B4F338F847D4810510
C2D54A228D23DFACC206CDAB94B415ADF614ACAED323DA543FB77BF44FE23CDA
2BA79B2A0955A77602D9B888E81D63C7C988355AE556B64EBB5882F31674C351
812B03A54A5F0D29804D637938BBE41D2E6CE22AFEE9DA290A9C825F452EB868
FED08EB71641EBD6B51BA5055A1CE7E38F22989FFDBD88832D1D5E561272007F
6136215ED588AC9A0343CDA01E371C456FF13C52AC9527FF3A91D6EFF971666F
DD84471D287F1C00796383CF6F55B9C7706EA87CA124BC397FFD05B86EEE265E
3D4B12003ED61FBE2EF02182297C5262ACAA57886EAF978C301C3889A61FD110
75AAC176AACA5EB03C60984B0F4EDC75C6FF926503591ED0EA29FC1A1B280AF7
DF340DB4D30BBD42469AD8871F121979DA901C3B99046941C1FAE41DC8AAF866
A327C5E20EE08D2F57058A5ED1E7EE8830830D3FB3D0B66325F5FAC50D95C12B
51C1DFD17280CA4374299673D6B8B75709DAD01C1D52BAF34120D29FEB8B9FEA
3B6454DE0DD8276FAF35D8224F50981EB928B80AEDE3F65A005A1EDEBC9910F4
B6F38C5BA43CCF6B0D2F195DE3343E04A62B730723A7614BC64F3F70591B8E91
07DAECC5D0D48796C4835864FBB4E77E81904730359D727B4E0EDC40DF67BEF3
66FD0838F7BBE0069016869141601B744DEACE158D8E90F9C12AE636E0085DBD
46BACF8EA30E861DA039A215DEFBE655E7D462B3DD43162CD3E43E8FFBB6F55B
1449885830E70DBAD24669EB552BFBF65CD72A237D23891E5340E340AB4F845E
FBA35B5D9288B8F54F0FB93B7AF74423F534302E68691BB1B3E49E42E7B668D9
9299AAFC1A4965F05C152E69133B9769CCFA21FDF0DC77CA7AC67CBFAA34A111
2767BFE6D5652C351FF9A5635B53DB55F92AA7B05C11082838711061BF384CAA
867D7E50993C3F1693BD064D13B0ABA304E47B0EAAC1B74AD486AFE7F3CF797D
9C472BF13C32971E6AA068B8DF4094D759BA6B5C16101061484CC2DD567DD096
D03A202BF53D76A6C5F52332977BA1606329C16CD03C6375EA7AB2ED618FF480
2428A9A34288A49CA23BA8855135A364E16DF9A5C8E6AB5E54448A5BEFC5D136
7C5D42B31950A85575A5C98E4F5E6160029BF8E935805C51823F4F3752334AC3
0CA7D9D14866A0EF8C9278EB63DBF27A67722CB95A1EF7E49334A68BC73B7C0D
9D5D82308117CCB81D18E1961AE265B2C60A072E027437758B75F5ECCDF589DD
E4AC7C1E264378FAA86D515C6552CF13AA5A807E8E94E928BF5A1E3DBF7EE2AA
B11A085D6B8CBD1ED06595887365271D6DF7447629FFDE715DC7A00AF11F1310
1B554DB576DE06CC9F711DF33E6257A6C777FC860E8400928673151CC1B3BA7E
CD9CCACE6FC6B48753338EC54344BA08C9F096A93B59C71809F8E21EF907890B
BB82CDFABCC6A17BDACB68AC5E96AA612899F38A999CDDE7D91EFED8EF407F2E
84EEDA73852E14B04A998CBB60F1187AE47061F27BB6AA3976E9A9C23A17C572
6C38F461954610675A40A21722ED4F26D0CF49103F12605A3C225111239F08DD
12B87C5B30D7BF636BAA4AD81F5E7E4758EE70F5BDB495EFF99DE85EE281228C
7336E07F13D0B59CB84143FBB248AA643CDF294849D3C2F1DFE0CDE3B2FF600D
21BB0FE151482CED406DC8C19C41154A0242FC1784D81550727F083FDAEFFB9F
1D0079F2431C1D8C038EFC9DACDBAAED1FA9A49A9265C877CA87764B416DC6E2
37B335CC7851E0F9573D81542A09DC719E4A9D5DEFB86A33B4CDFD12116C6091
E144753E572AE1B2B9A234F394EB619D4FD9EFEF43C4933E2776943F55E2E7F9
C81FE8C4F901B3A264123336A7DCC174885CB4080B6CEDD74976E1130EA6AA6D
BCCBD56D0696AC4D26B9F95AB250DA20A882332437F3199F791DCF17AC10A7CA
FEAEF6726B2968474E24065D81CFE203111E073BB8DE4EDC72B4042D30D14FBC
51DB1E5024C51CA1FDABFF7E00C534751C24EC1C8DBF5EB6C77B36E865797879
DD5D757FE7393CA8F706B5BBE338B5E616C4C00AD36B4A1282870EBE9D2C48EF
2D62C03910322A150D5DBB7FF12AECFBC5B6E5B382B61384B7FCFC8FD9D7ECF6
BB61296CB680FB6703B27759F10018FC0D4B7F9F32ADBF5D37B697E68E11A51F
5781CAA9A414AEEA78ABC17DDD10E2B4D77641057EA23E18801FACB5598E5318
173CEDE77EEDCF523150ABB11DAB9ED7F964ED314DD0B92C384BD9E661B5F107
278445526CAFC4565B819F51008D3FE257E4896F1B7279E13DE197D67B9B8585
8FEFCA622E6E0E091FF80A69964DA5470F8E3F4DCAD29CC4CECEC4E4B87D1FEA
8EFD8A904E396B23298BAF0F4D6E3B6C4EFCB46D6FE75D02D0858DD87D9980FB
908416F81E7E5A15B3AC03D19C47218712A59D712231CEA63CB4EE3EE8E9ED4B
D8E236B4BD6AFB96324BD2420F849D105894675F53C2059324623DCDC76A20E1
97ECBAB0A0D3FE930939D6403810F9511900A3ACA96791E39C89D832EE779584
F269C4301C5AD39C601FB86D4090A1D6BBC56B10452C321698CA1B72AFE725CA
AE98F627C7CC2AE66F10354BDAECB0ADC7DC3FA7B24303B3C291BDDB3377EF62
53A3295C9651FAC6871362150C3524E59F418AE6D15B77B6DA54B7C3CDD08235
46BE4329B97EFC23A0DEBA71EED8BD7ECF7829B310429383B5497FF39F2B3626
868E76F522C889AA3F487E9159577736AD881B64D425DE4CCA74DBB2D6676B6E
F208169E1B0B5352998412A21A4D20748BC02F114AF10AFB1B05D120573DCBAE
3F34C84F8C829A4583690C03D7E63299C95C2D501F8A3A9A913C45E4C84544F2
23A60624046F8FC5F17DCEC1467295EF7E627666405150D7038D479C5AC18E19
A46C2CBAEFD7ECA58B0BA915CCD83150D8A85727E244A0A114BEF65894E69B09
DB6A0CB7E6BD4DB7E4C6DA82938A305C81230DC354FA9F874E31EC370C8DD051
FCC796C291702FA04885A1164A287A8C8C869CE3BAB8C4891D68A761DDE0B897
2CEC1B55B66336A920504D9BAE752532C1E0D41B2C4C248A74625389E46BB06D
F8BFAFC04C534BFCA1483D57B224803D77F61A147C5ECAB90F329BB7090FAC37
612E72632D1EFF4B29C144FD10BD3B470B924FA9511F8653FAEAEBBA5C743CA5
3E8C676B430D7FE36AA71D4111CB414AF4C3A1FF1DA06BDDB43BB4C375ACBFCF
4475A0BCCC6AF2D6F8F47AB3BEF0C550500D5906F45099E581EF50ADB10AD7EA
B3E2D00692EA48444704DD2D5244DD400B3F795DD202A3F15B42BB0E78826D86
8E0CE4C27823773DA233CA8F78C3E7E4071A60299BCBA944FD95FE577432DAA6
43EB311F9C71D7C53732A4A77CEC2EA60645ED4604487008618C6D25AB6360DC
D98B761A7C070EA75140B9B2907DF80F5043E2AB8576EBA5402D5E0ABEC47BF5
DD3B6EB95EBCF4ABC6759C6B0A5C0986163A0BEB6E3E3EBA81F174287F4AB3ED
A186071464EE07EE918DA12C1C67BD2932A5244CFE4D1404FEBE317C76109456
8CFAC40CDFE499E24BBBD58B3B0A30A217FA184AC72FE56231448D2D4FD987EF
7D250F9865E3FE7207BCD8397FE4A6D5A9FA4D18A05926998D1D03E2532F6359
351E0C01EBEA544FAFC0C3726112DAD8BEBC692D09C89077A36D854E9A5B2B80
8890A43D9E7F59104AADCF79709ED341B2DBC25014AA98D3D0A708EEFB81A2C5
F1549D40EC512EEA2757F34ABA4E9168E7D3DD8A0047778F20E72B1035E216DC
09694D2406245E84F4D47146CDB5CC0D1A789DC24A47F8501B061371507E5DF1
7C941A89112CED2DE78BADD4FAA75670BBC8C3A194302BDD1BDC44FE71613776
DA315E3B7CE714D3A713046346F2D591A97C9606B9ACBBD208F400D66C57B714
637D7AC43FE7339553C9155B391998AD7D90131EAE5B381A6E2D6299EACD1945
1173F013192135D078CF47210F05287D645472E49931F5C4CFDB323DBD67682C
A8BC3DA7E779009C4B3893DF4E25B71CA17D427219E0E2F3F7BE1629720E2195
6A2E0336865660580AD6FAA5A61A09B569A91BCF947E682976A4A993A413FC97
F6F1331CC2EF00645552C9A12DBE0028DC8EFFDA32825936EFC9432BD73037E9
CDEF09C16A2C0FC13C8732D5463F7F58F356E01ADB495027386100D41B4B76E8
3104F4BBDBCF260630590F0AB272E7123600B99F8C2F7239B03D2D12AB1AE2CE
D364B37AA8944560A631EAE1A2F03B25E03E28AA492711A6EF16A5E3DE3DEBA2
2DB31897D5F924AB0850F5890A35166DFDBAF0CEED38A5DBD1184C31B51853D3
4C141AC12B3C3A8DD43E1E45F1CF43FDE9510F2B77D83180BB4741A697E50153
F01FE9A9C0B99A0C829B31A39E96DB3FB6450B13CC80A39E4CBD884D4994A7EC
9407F5280FE5690CC794A25E35F87401373886FF9BFE508C3A751057316CFAB1
A041F53EFF9021D9D4C491F26BE8F54C61165CAD7A20A249DC98F1880BAFED29
A5A35ACA78AB5A380DD8718110BF4C299F921D810E01B5B822FF00B3B1E317DD
24A725C4FC08E34CB2B48DB39EADCD182E40A14BEF3E366221355C4898B00A94
D1F38BCC89B58DFDFB46C8A1DE00D64EF6A3C7540171403EAA410E1DC26CE398
C55495EB3690BFC6FF1972F83B2966D0ECC76E09B5EAC04469D32C787E6CA504
E845B967FEEDAC499D35F2E6AB06D2EF14F99A9541D933F1C26B0DE669AC7459
BBC0828F552CB1460ABF374F5BF0617A51BCC59CD4B4C18A9A7997E2E16E38B7
B80F857B543BC64BE31FC83D5ED0A486644450164C2825753B66C370B6EF2393
B15EA8BC4D582059B0C4FC24E740C8D97BC3D1F1C93A6E728806D786FFEF331F
EED89A0BE06C3CDBCFEBCA1931F2E5FAF071B70F798D08AA4DB29E33E9503A42
006064CEA4E344C196954CAB4A61A2DECF14505BE94706322FBDB5A41B31B8C5
0DF3718751D8A88A54E9F23C3C1E696BDFD4F1F80080846DE21F9BEF549AAADE
F08E80F3032E590447063D892E77AAA3BC13FC942C261D738A72D9EDF590013F
0B47158693E21AB85D89BA8107608BAFC9DB767091ADFC45A2E8D094908BFAEA
6C3B2318B548713C1462B42C4A1CB51A5B4291E5B202E183152D29360D73B7BE
8EF368C9B79325BD873AED40D5C64FAE88B9973536BB9572ADEF166228948D36
2EA16A9A9E1327D0ADF92820ACC78B0793B9F0307C776C24510F661985F3642E
6E7A209CA9B9E3CFBF29946CFC85C6A19F09E3C408BB9D571D2DEE89C498EDE9
D4A8666B5FB875A5EA35B301C34E2626CACF92B31BB6C76B59A6BE957479FE3D
2CB72041E120E4509D926BD5E3C4F6E2813C0696CBFADB12AA96D16B81820AB7
E8B18C7B8C47CDBD04A3B51AB7386DEC1D1553299043885CBFBFF18CB1D621FA
4483E0694B8D49201AC152B3D554DB71E07C435254077B0528AA0BB4106C1B03
803192C1D45FC2CFE334A665C09BC48008626846C0311098C1CFFD800539F53F
833F07277C21CEF09A14C80C79DC71ACB9334B3268C2FBC093F5FB7397D4DDC7
1F9DA6B570B44513DBB180B9E1A86E6AD655171E46BD47E7E8CD857F449047D5
D04DC9F7C647C718454F4B9560B0ADEF3DBE86916EFDE364BE86E74F9F899A2F
2EF5E2216E1C674FC70A8D1E5B9D6934E0898958555F5218EBA03EE4F33D65E7
E7286737321F1A36517CDB9A1FFAB816CE911091C1E8512ADFDDAE8C0B812141
083A67AE2001F137F7BBC1C5B68217929672D6CAFCB00B7BEF6E47AC23B920F7
B535193DB8F9B57D81F2F662252C0709FC2C8B228CBA5632C5C642A6AF562DB5
CA8557D4A9EEDADC0814487E67AF3608547FCC3213C77907FC344161A50B22D6
7F4575D447A18642E882E096398364675257F65B680EECF4703EE34ED501A99C
FD0DAA5FA394260A3496C4C35E5FAEEDE6A3DF200562EC8CB2D39B54D8663208
770D93559DF12A2A3023DBF3409CE701476CED493CED3C41357D5E44E240D4B5
9177D697C38390AFD6631B171ED4E34CAB2915ED992DE4E0227E0736F704E817
D5D7C0BD070A91E0E3FDF6589A34F8599566F61D53D7823C6D11053EF562EB87
38D255133BAA3670D815DE3BB8CF8BCB4C47594ED0A327FBEB554521EACB039A
CCF4E4CE0623056F6D6CFBAD8EACD278D007FBF78F5F573928E86D739CB8D888
1BBE4090D1CBFC4EF699F13284758CB5E40FAD2BD06403AA9363A97520288EB4
4A433C5B647840E61A19490204DB01C920CFE9B94BE03213EA84A072349F85C8
6A179276FB4D81C7FF7071DE3378D6AC4DEA821CC5FE78C4E84327E9183A1B00
377476E6559A25A81D7BFCA5642A69915134D3C3FB98B1BB12A17BF9ABB9BDF4
BE97F1820EA7B8D947830CEE6D6F75F4C644E0B3FA50A1D306DF27B7DEC26D99
B15A147F504B1884167F651EE32B2425551E7F03D504F27BF98F90DBC75FB6B2
071BFA0F2BE6C6C1B18A3183ABAE5355A146D8BD2F23EFD19C2D75FDD5C9D9DD
D7BC631754D353665F3167BDB246144D4EB7975DE5B2A0D56B00FA18A65C470B
86D20647BDB5E8CD95DB05DCB486B7B6148B449CF1DF8E35E00D64225F3F6AD5
6E09E971CC0ADB3B6DCABF664B15088EA2C5DFE84483675E2D02FA97ACCF798E
62456563D628653E27A68C2DCD543727DF17F51629B60E86360C270400BD4CC3
483B203C1D6F6884A5D1304E4671D8A207C9B50E8B32E03C2E540D68C039E560
902CC03D471230C8A8F78987211EB27EE86F6BC5ECFB5D8F2B2C624AE096EB65
0DFC71EFE368106AD923C9AEDB2C0C6492013CF1E4E4489A47D2CCC1A30D21E1
2AA1454F7C61A0F9FF7E001D3621C7467197CFD15957E8715B744BFF04D68B57
8FB70D9A2B4852B42A06F85AB53C4085554C90647664B563B826FD0AE2366557
171F2F72AAE38C57A5F21AE59F5A0A2355E52B4341E9E671D8DA530E9285778E
DF77B600F65B9A684E64C47904DE9A4F6B520CFF061331CF40579952EA8AFB59
D111B26CE0B2C939E13292F86A2E2A2D8186FAF8D9EFB29B0E94AA068369F682
9987C0FB87E9185EEA8B904BBB589CA901E711AFCBDD2801F7C59A240C7A6DD8
B7FB56B2B53F786277572203A6137BD673C89E3F18F970CADF29AB011AF35788
E139D55D686C7E96E4E26738DA50EB448DF2CABA8C237022C0FFBFCCF21DFACB
1CF5DC0D15DBD5160922AAF25498A4241E9B2F0A25104B6388B9884397F876EF
581C45945F8CDCEEBB830CC56F538C2B6D8BC038A6FD168C02851FCE51F2A2BE
4D7CC2F28CC4EFE8A891B2A31968694C04BAA55E0240FD40A4FD7DCC0F4E5830
4A50AC4E1B67141D81FF99CAB71CB50FF649B476AFB52DA6514D95DC08603DE5
DEA2036D2D9A31B670445A6FB052787BCD803B4C9ED2CA50CEE5BC2888B0702B
8643F60A51A6ED31906F0AAE5F86D0A2B85D039C24DD75C7A4F038C15E700793
9680912BE2A01ECD87EF2E5BD3598EC528909B24430C00CEFE0194611CEC6795
729C8D6F0483F604EE345E522AFD19F8C0F01B5B0B156A0E9BA31F748D236F1F
B4954BBC19648A7C2041AF02520983CC6741DE80B47F14193496365EF6773D12
589CB53A9409AAC1AA4D39D5AE0BCDE84029DB40794C30EC20BD38C10D226E05
1034944420D27CCFA73D69C16E2278CD89425AC6A92EAEFB17C73375F11A5452
43D50648BF900200574469A5AFBB8E720A65F624EA4FA2322F2280804006F19D
442651437157F66FF7AD9D85D010A10D58344139B2A29F6283CFEB2FAB7D73EF
72883C4D41609FCB048910F3D70211659CDBCE05F0733AF96D09581D50B7EEF3
830A87973887D5BE9141CBE10E0EA1C21C9DB0D9721E0041BB3DDC31817E8E08
30E2CECA14E3162257F6D44ED3D5A828D518ACFCF1CAF4DE8DFC293360E0FFFD
B832BC4C3C223E7FC252450827DDE99E77670C4699F85714824E939267229AAF
DE9C8C387F15F064F37F9AAF55B7ED5A627CC7EA4CDE0CD5E0EEB0FA4D0BBC07
2C8791BBFA7D935A4FD76D7A13137DBCF2B518F86B36E53AF26BBA9BCFCBB814
182F21052520D306A58F1C50E135159895E4932AEE4805011E067068CCC3D6DF
ED2047FAA4FE5CEAEFF2DCF00022A33C2D371E5D5E2F8CA5E2D085B4808374B8
5504DAD3DFA9A7A92DE187841BDE17F41DDB81F3988182589AF0B9FCCDFCB6DF
FAA2E1E556CD21919FFD1C29C47212CF672C66FA083604CCED9B496D6A2BFCF6
2D94E9F6046C7E0E4EDC260A30D2CD7DBB3C3B3194AABFEA61C4A6BE7335DDEF
2A05745EBBCF78D2283FDFE76B5360419352503FAFC83E1A9A8D6264B9E65152
4E0228494AE594EAE21198F23F53001D92DFF3E0E4CD301F5FE888E5005F29DB
46A9FFE6D42B465D10C6658F234FA2E075B9F9E61F7A07E082CB873440C4648D
3FFF06A1499A5C7EDC9210E8AFBE8A1587A7BC96C8C35FEB815ED98DF3323D83
FF411AF90632E54F8CCA66519CBD3A8507938756914F5E1BBC72A74BD82F64AD
EEA900BAEE780F376DC20BBC7291520CCD70A96DCB7CC5049E629712D7FC3C45
E33DFF8195E8CEE01D6A257A7E25C45CE12078E93ACF922740010781CFFE5C3F
B5413AF1E242AB564B92971886762A31F6C9113E563804E84DCAE83F4B55225F
BEB07097637FD44A640A7633A684FFB13CB5AEEA9630D094A868075E39730D8A
5B203546F396723B047EC58146C835CE2E3B366A39817324BBB8E65FE11415F2
98D1473989150A4AB858CDEE032E049243F403E519790CB9AE1E51E18FAE1DA1
5F1A4985989D8C3B5D6AD116426F5FA41CE071D9F7F959365E6642C9D6103231
E07E3DB50F6E9278940532E3CA8507FBF1EC5C63D350BCDEE61E2836B067B6A2
F8F507C8020CAFEE784CC4E9DABD231675AC0FF573E32BB0F38F2251827A47A6
07B6A736712541A117E690134A5915D13634B978BF5108728011A4E0F2D07A01
A0C7B27C86A5A58A0F4609EE819B064103EEDACBDC40EB2EF6C28E91A0A1B0D7
A5DFB57373C9F5D526CBFEA960FFEA7B670E9E365DEE93422FD7424E57E84202
E70FD37941EE9B9FD6B16B829138964D8BB8497E8593CEEF5CB9A80D1CAD55D9
DCB0A69CAD9CCA95EAB9A501E4F61D1E3FD028AEB721286B90A7BC2B0D206B0B
603771A27B121C5E833A817407F2E55D35F910A75A1ABE13802EBC5EF7908D61
DC7423FF5CDD2472E3C0F8EDCAA3573EA8446BE6F8BC46AD98A4813F59AB6528
318A5DC7648A46AFE9EAA17E79A2B448D00D7E8DA9E0EF30E5FD6C70D47D3163
7BC0CD4D601796745E885D15D1339193DA361942A93D783CC6B85468CD806E0B
CB02CEFB802C7C503C14F848EAFE7D9450E882DA9D4B0B50A707C2CF3EDBA686
127E21235FE1AAD24686217338A79309F8C9962D02AC797C41395AC0D3110CBF
8F774728E4278EEC55AEB085C81CB4833F1A53A80E058C1EC14B91C6611D4217
131351968C8B74F9FC08D98CAFC92EA0B6BBE53ADC954B9B3CE0199494C920B4
FA5FD6B15306114179484431F2E22A935DA297FF423AF24B9E1D2443EF397EE0
AB134571CDB1F495D9D4C6BCA66C4E52763BD38CDC235A8891EE9488FC3673ED
2AE1D4674ED134BF007CF5F6F9CBEBD494C159E11F08DD69A596A6C6C6AB77CA
69EA29FCDD9467958904FE0CDB65F52BA057443EC42BF773A00D03889EDCDD32
4E112D5BEB28766C0B807B8FF3503213C0CA57A43E7425065D6CBBC712B23944
236E56CEF1382FF6A474BC95D164B029EB8875677A3C0E43DB8B9E3162B9C583
897864E59CE6F46F213B0EA52186ADA196BCCA48CF7562D5D69CBBA4F21660E0
A95A841DA047410317FFB83C801DB9D655AC9551F10922392F1BD7A1F0506C95
9D1871BEC575BB74C8B309694819EA9FDFDF521BEA703A23B7AAF7BC504565A4
26421AB1F43F6C028F8B740631E360AA6DBA1E54991EC7922725600CA4E48FCC
F943E438072C9B0E5A5B285AEDA6373F36A72082191114A3F53E9A4C8A796E10
4EC899AC0F12E3936363643A104728E64FE8F3F50A50F3A3746043442DA73866
80EB2E1D9391C8AAF426E4E00453A0CF3E16ABD695A58F2391D93DCE0D58D2FA
7BF30E87D52DEA411AF88BCE768CC72F14589D293BF29C73EB3A286482A7230A
A8D1991266410CFDD2E8D7149219C8D6CB6E1716D1476D710DC4EA851DE99905
F582510C0EFEC1ED1F8AD091A8A0ABDC55A756A7F99257EBD66FEF88F53D442D
C4FFE8DEB1B764AD52FF3CFCE4A346E22D38D44AF803672EF0AC1A4F1ED3ECBC
036C031833D5CD3376C32FD78E7AEF362B0F25008F6C13B9A6915A99DF7EA7BD
64FCE0DB293C2E359385DE0C67E508B67D68BAF10B907E6489DF4642713C8CE3
D975028BF555E0802EB65899345710FE55EE12A56B5923DD7ABBCE87C658BF31
D7AA6C76513842A3758AFDC9C644CC5BF72963DF0AAA5A4BF65B0FA7D0BFE386
9209CB0FF2A2CD708C467E4B0756936D8DB0925290F014F7C5A6B618699EAA90
26E04B1E8658F368B725E6027C5BBA2D1762B034BC5B846CC8D970ED51C10F44
C8415FAFC12C5777A4C8C931F868C5092BE089745D082DFBA7395913C4322A80
CB95C8D3AF4B0DBC9D59A559CA33AC9BD91CB85CA3214072A046E9F9F8242D89
FEE79E3556FABB842911B31902FB9EB08EF22236633E3F6428146CC516ACD809
E273356F52357942ED0508663E3896D77D76122DD711B08ABD8CAACD0EE6E20A
6EF552565E8769DEBCAB3B1DEC720F33DB31131FAC25006B8A7E0BC05BB0D639
6F58C6EC0922F2DD7020ADC736CF7D49F32BC48E8846E238D100CD34059FEA12
534CD1F14C41BBB36ABC629262CDA5F0B9477E6F64C0AA0C5F1ED2BC24B77548
F1E02FDE503DD3A3DC42C9107CA0BAC50A027BB01514BD98B8DB735A00318970
0AD11B06A9C4A63D7C1E96E43DB878F609A31C4F08764E0D6952EFD3DA2ECFC4
020032D3A480A00C51EDF3E147D41B57EF0DE3631E0FEA8C967A22762041AB77
C58B77C66E3857F3D747ADAF544F977AC8650851AA63AC4A5A3C9D85C046EB10
EF486F5D8CDA247F21D30CA3A26EB0356226F2893A987DA9D0A45EDB6812A309
A42859ACD014A94FE2BA8B2BAD7C2F670BD9087F7531490409D02BE31939CC31
4F9940AE48775B4094985B207F8A8330328DA36500D75CA74B270861D027B81E
B14663E3073EA37AA1FAEB418BF5FC0965BF7B274782C8D608698A04F4F8CDDF
4FC55650DD5BDD8F860E60CDD9B72B0340F5AF25044EAB05EBAC5D4AFE97D707
1C95A6C055A02AC93D89BD26B1A463F3F2DC46DD4C7847179BC0AB88D400A733
1B16CD6B1ED20C0AB3E91BDDA9D98A37E2DA191CC183C0E334E0EDC575DEEA0C
73666D12F2D112B93EF7E363EA051284534C1F36D962ABF33DE5A6612AE12C94
8517D49DF9243C4E6488D2D3CC9C266FD12E129320B51A833B855B2D114B9CDF
03235CC9EE42DC89D92E105C446F82DC45EF18338BA160FAC6BD853566B00FAE
35137D917F5BC93B59FA2A4A18D74B187587ABDE7A3C89496634414350F718EE
D93425742D97CC0F23FBC88F8CD4E4AC34A887AB7A471BB817133799E5AF19B2
5596A888D753085BC56C85ED0E58AC65EE130778C2075581987320B17CD38D3B
525DAA4F7948DED4A7EBF15DB868CA1C8E2C708D8D1151137A4BED2E66AAA0B5
4708441DE5A1A15C14A676EF40F0B1FD936E8ED5F486656F38DC1095F93FBB61
F865EFA251BBF7CB8C8C0E667685A662BF38551B50DF4F12EE6C72352170B20B
B76CFA92AA7EB62E988B0DCF32C90990E500883DE3AD5020993AAE38F46361DA
371C433FE1FAADC280D88F13A904FDE0ECF34BFCF41D02C7EC97BF0EC18B289D
66EDD30965D9F1D5530DAF05CD7F73D6E7D19466EA5E74E9C1ACA7F6914AB898
19983CDE688BD2B59EC2B9341D2DAA72F7FDE531734C44A2F33077E631A05A90
7B488FEB22E3422EBE4FA6331CF20668A8CCCC9DB2CF90204227B7CB30197B82
3E5B46DDEFC40DDAB835FB69ED4FB4DD697B9DD91CE6E04633BC3D109747E091
1C7859CEB157765BAF32485B278904F0928D97C2A77894DADB216105AC441F75
426D7D5176B540A8362813974AAADE10FCC23D5B3A3C308431877D9C918F7B85
1CF6995C8055B4722B9ACD04C3EA77541646B2F08237C3BC9598A1164C54C878
B02839FBDFB30634D11FB51C84C0BE7180B2E3DFE45A76D10B7C0888F4FED851
52A1ED4D5D3EAAD53C17F4BB21DB58148E2064C505944D4DAB0687C2E3254A45
29520AA0E828A1025966B1EAC9280C98EABA19973BB596EEB41C7FAAB530481B
4B7C9067FA404D6D6F0B205131194F972C2BEDC3EDA6BA5D0A6EEEFD0E22C963
8CC4D71153A5C7C973779B1EC4B75707407ACBBD070A91E0E3FDF6589A34F859
9566F61D53D783E8998719D173F4FBA16DEE1DF371A889E06E4F7ADDA8BD1E55
798DBE6C65104B2BC60D3E255E89AC042EB72D86361A97F5210E783856CF1CB3
41A14066032144FB75983483B8E9F23E06D7DC79591C3D2E376B55205EA2967E
453EA6AC9AA63C2672EF797C6B569D71D6E0A7F17F9B343C3728B26AAEF33C0C
45D0B3A5A116E341823DD09EB442AEA8A8F2F13427439971B8428AFE5D8AAAA4
0CC18E3C64077DED2BF90FC4069F7AD81133449C9F019FC7C839A94A20636BBA
90A3FBAB71B04201072EFCFDBBEF4498694C0884FBE6911B1ED7148B9DBEA9D3
A5FF540A877293F3FF6ED9E056411524F1AC2C3EB9AA979449FE10A4FAB74EC7
001C7FA5C9A5623B07973C41180B04D58B74C3A4A0927388A736F8DE5374A7A8
5279CCCFE362567ED47BF94B63D67A9113921AAC23AB1864E2E6D85171905CF6
6C5A32783687F4D555951736F5952008B39E90FD6AD32DFBD4E8C89A9FA5772B
D7C4CCDFC59BC7C0F4C7A421734301813921B971F6B6E7B41B01470F3BA8BB64
EF2EA43D7C1FD394FEC04D01003AA6406B3D7A99913B912C8345F350BEAA4D96
699FE65768823546BE4329B97EFE86AD896063C7418B4BCFC127A9AB30BC2073
A5FBF9F14F1E5C98CB559929FD0D5E8A13520FA7BDB2C711E3B58C4BAB066F94
EE078C9CD251103E5FB8E75BF46534F3DAF3CE80B94C88C8934ABD872C2B98EF
F07DC0AD6F332349E216DD9CA9ADB963D515D7A0CF391DC6045977231D86C84C
F3FF644A6A1FF8025602EA4C991E5A9AB4594D27F62F2A5942CE66F042F7A517
9B5B31CE1B3F67A790E8A8404E0245153CECE7EF36F5D6DDF8F1B4538DCC0116
C1BB90D2FDE70519534343E3827D3A64A6670DA19BD70782CA4698FB3D9AB7A4
5A520AD7364C461D871351DCF974D7B6C79E627C1AADF374AD12C745D41C4AE1
310871FB9FF3F9576345A3E28A7EBAA4700197CA6DB0744C36790AFCB8283D58
A95FE764579DE0CC5D2C04BA781E75C506DFE0FA630FE721725D8F5B0A803C5D
29686AF072D547A5AD7A1C457D4DE11410C601C40B2B0FC1E8779413EDC2D0AC
D61E84091D122ABB1E38900CDB4D89C40665A7A04E67EEDAB237208133A84721
DD3486FFFCCF9A00A98CFA3D639BE773DE73456A96D7716371D8B5A1461AA5D1
455A6601DD0E0BEF63036A5BA8D3797EFFEBAFC918BE6A3923B9C6D71D3C3286
9196A7C5B67DD03A9F4128A52251DB3EBD7A35A395DA2CBD7AC9D5FFB3762EC2
9EE262811D771F662AC490F89E7F06D9AB28A203740D71F8A45C29401B7EBDF0
3039F113B2CF4626600B1EDF5A44CB0AE12FB168192AEE4AF696EDE54CDD8A7B
0DAECBA543ABB1E059247E276E206CB00BED125C8F78A0B214677425005D32E0
5A0635997288AA244B3925AC7E01268E6C50DB4598BCDE50B80BD2824DDDA8CF
5C7004C2B131947CB303C5E516F18F719D1676B676EA69F5B9B24C129333DDD2
69E32DEA342800BC71189749B5BF613728AA9A268C4D4CD7BEBA74BE3E5C6BC4
0022E61BA021BE3ABE878F717E162EB3EEB45A26663E12375E00B6673118F12D
7665C52DFB2BCF103AC9539C2A7BD2F85D75003C4BD53477FC185F05AF802820
67BA79C35A32A9F3E6C360BD7C96F92175F27920A4697A8D35564904EC5B5C9E
828D792CBD84259E64BD338D51245715B117A1B19E281469B25EC395703990E6
D2ECAC555FD5056A30A018E32CB622EE8383A1032486E7CD2BB3CA078ED631A6
232F7CE82503465D9C662760414C0140E15B0C0AE131F8DE7D536B7B42010629
64DFB86A6693CC2CB65BDF92A5E6EEC95DD00A47F65DE3EEDC1C282E760D461E
3C812929F89DA81F7E0C97D0C03FB2517042BDBB8478D3C5BA050BE03B778D4C
6BCF27247FBAB53C2B849C9DCB4F024112455CE2CBBD4324DFE3589B91A13506
48F09C1E565A8C52C3293D4911ECE4447480B542B22952EF15FC95D95947E142
ED9A9EA9D57B7CBD3E5ECAA618B86D0338C390344B935172B8C1A79F507444AB
E5DE69D5B983E55D7623DE94BB5697EF6A8908FE2ACD20E4281D1B7EB5B426AF
5172A3650E93530515326F90EF64378DE6EC438F4AAA33D9D0ED3F7CADDC2C33
09492AC1ABEB72CA1080D8E864C1A4BA5D594B145F7CF9E53A476BBDA814A73A
2012710C6E8F54C578213BA4E20C2FCC118750FB0C5854EA88F4538F64D0A027
880E74A802C4EAE90B4199BF619C8FE29FE013A6ED77CF6D7D91E180C1C67012
B43DE31C572C64FADF4D5B9EFE83D4B3D5003D79CDA61372634C33A1E300BE5D
158085D2D53A573FAAB4ECA10DA116954E26706951087110FE13B7E7E4A8B21F
ADCA165B478841B673C5A93091D6DA0A1CF9A7083494C099981224ACAB563C45
9C5FB1ECD53C2A39E651678F068F788B79951A7407E4ECFC52A6C09B1192E841
9F8391DE31E8A959C5C5A09E73FC2015839DA8A6F4597B0B3483B74830C628BE
FCFD4E70E3A55F37E32A299BCB1DFA11FE44202677ABE4AF18803EE9EE1C111F
8815D171DE1FD6E92D41CD7F1FA5594E5BBCBD824B145D7976D585DDB770D059
D1774E270C1FF4F97FD61B4C8D5E044966503EBE839DC0870F36D81BBCB6540E
7EB3B2ED04C57F75FD13B461838A2FEE2B7EF1BDBCBB093934E23DFBAB13E198
BF33F12094ACBF2709B5DC6510D78F90DBF8859836DF422EF6DCB912FF552036
0A8B07E50A51C4DA9F6A6948FBEE414C96520123B02AF2B9729D821A95E1B109
364211D080C501A280F2F0D386C1AC9E5F0494A4B1601C32F3CEC364F9D95200
7626E9D2EFFD00C5C880C079F844B2B3E50E2475045E1B877570FF63CA592063
5D4ADFA6296E270CE3D956A3671C85999871BBD70C7DDABE98B213EA960F1F4E
084F6543369400114DCB6B487455B5D5CB9E2879ED3A80670126DF5C298C2E15
3C4703926E73869D83A72DE530BC3CC6CC7EF5541D2082126E577C84401744B2
7DD80A49D026E969A7C8261E7DE5C60D7E70CF851D2B60248FE5EFC8C1178F68
57FB0F2AED6D87848EE41A38C6070A60FCB444F29980FE9E93E6A02A951AFBDA
FCD8D7A88A93BDA9488A107C357CDB3DF51F656B9088038C851D9BB964BAA7CE
B9906769A2948601A7EF1804DE66BC7656A5BE0B0DBD5635ECEC0FAF14A180C2
D230ABD80D6BE5323862D69B17956C770EC261A849F24E17ADFE48A827442B84
2665F2E76DCD8211A35A90B2D09DE82A6BC4F175148026C871FA7B33F0B6C841
82557AA81CF9B6F64AA4B146D83D0D1A22EB2FA2DEF1B2B9F8600A76C345909E
560BC2F989EFFF3E59B0A85AD8CD3550809B374D28EDDBD3CB28D0B1115976AE
06935A822B0011033640E21220B05A971291793006F05230B4C06B9B4F6A19A0
60D3F9368C381668F4D35E87A767E1E75FD8C2CE3A35CBD5485F6430C6B4C001
C86DCFC7AFE118B20ADF8070684CCA843C62E1AF8C76124C9BA678264F7E0D11
1E25F49A9C761BB00E134E320D86875664D5F6C6AB1B5BC8B0E19D722B451CDE
BB63F27CA909A0FB847D870F172A6BEFC7694C4DD89EDD03764A3F1108A5A4CA
F46DD523265614200EDC4763AEB8A52E921F009B1BA7E7D97EB5DBCA5ACAD8EA
28E4A50E4AC71798A709388827897A905FEBBE17CFA8DC3BE6C89B55B1216B96
F525E794D2B610801BBFE30C6724E4F6A857FAEC97BB257368BA3CCC4754F974
1A5E4E6E2228364D0D98C827D4E100910CC393BA92FCF75F3E5FCF70F58BBF4A
C9E1ED3A247A516A5F63FEAE040B654A8C311D3B3C8FF4B81786BF020B25473B
675929384F3480F9F4685C69DB3161631F7E242BFE854C404ED32C05816B7247
9B5ED781EEA5DAFF782B3846139317F55CA58FACA10F0EF4E8482ADD79CF2E17
2C9E7CC1909C9B6BED7C12C45D47BE5B91AF5861FEF2B08DFA8AB6C94289A9FF
0E3860771CECEFEBA587BDB3D02788E67A68214CF9FE516D5738E72A5808ED9E
102E1483797A8643C573E0EDA5DE17738BAAAE93056D6633F8CF16DDC22D3CDB
D816A662F338730C37F871E16F52290B1D3841016CAC8C091506CFC0CCF0C33D
0B7B6E54A682039510EAFFDC225D75454436DF185FD8D7831A7ACA36D14AF646
B931F34B5D278B9A48C9A8894D29C2A063FF74B733A1BC562AE78E30B7C3FE74
8ADD67A8180EF6FDF3D90D232B56DCD1FE699FC55929247D0AA46E07C1F56CBE
AFD58A11C7154C37F8B2D7F6740C6EFA2061C21599F02778D210E47FEC8127E7
6C984E054CE2E7805DE6F2E37FF7986A56B3AF1F0A6A50BE087DB55C6D17259B
2C2F01F3FE4937E75BA6CA3E52F8B1C157040BE0B2A2AC65538AB3797DE20024
D5A887FDC33C0B57B8121A67C12D630C8951F814742992AE09518E2F36B15558
7B34EE8787EFC7FAF8A47651BE0693454BB3A257E2E6520F736F184A8ED6BD83
E82280C93A84675B71AF2855E72AFBD6F2AD6D47D5E0B2E4B047424843EF9A62
E543312773834D2D1FA45235C6462B39DD4D49608455BABF607706868781088A
296D9462F64701A0A053F8DAE4F84C36BCCB2407D1D4CD70DA69B9F7B12AF06B
BEAE2DF492382970878376DE11253342185FDFAC13B99AEB48088AF361B99666
BF29EBDA8FBF05E3E8173C6FB949954744C7C6BA17E8BF73428B21EB17F2CA0C
7D35F28E58FC4BBDF1817893E13722A063ADB60E05DC4B6C02C1796ACA103A34
C38A7EA2AC7A2F9F1B23FAAD343D52EE33FE7F4893F5EBC704879D37D1EB182F
0772D3C1ABE1C08A659E6A9400764151AEB5DF68017B62BDD0BC921990A0DB13
C2E333AF98B3320BA3D77A8705A8D14EF72BAA622A6841ED86F46D3DC8C45278
37DB9A447D86A996CEE73822D141ED62CD58F07244B4B6F3F77E9E3BF1E15EDC
C23765FC832B27E9297A915175C70694294A930675988CA5DBFAFC453BEF1288
7B00127D77F4D89E5221237508FF19DBFCB00629891E2CD9F16B0CB386DCE251
C07475ADE0FD677F985A82695091077FBFDE2675734070D5D836AD0221157867
C59660E7343D63A3A1B0208110B3B8C43F92A0AF736F3E878CEACB560EEFAE5C
CAE9FF80B42EEE0693470B603E2F3638E1704D54D5521C5DD8476F3BBF69D503
25FE61739FDB6D9F8F37057DF91BC52FB7F9EBF04376F1C29CB82332A160FDFD
91AD399402D1EF22BFCC7E1A710FB0A5D0A3AFF36263C6CE8AA8956E9BBCAD27
50F9E622C94EB0864965A0B23C71C9A929EFB3053CAAC30FE202AEB5EB05C726
3A362E231A2FA33AA7266D29BA26C9319C394005253C8C488B2023531E7A983B
5550B85DDCD15684DBC6D7DA96522A7696CFA4742E2E71F4FCA72331993A99B4
63FE53B3F8A37C4D7E8067008667ABEE6E7D2E066A72DDD0BA0FEBC15F22EFE2
EE81C507ACE21DB2DFF004A5B6BB5F79E5C6AF5CB9BC2258D38E5325068D8577
46F7F0F4DF9047A18E1C2C67FE7AE063E984601F0666C503EAD61FB0F911F161
48618C0A4D734F7D0524CB3D57742BADC38AAD76DB24102DF61CF63E5C519F44
444B37CF9F7A10AEBF6CA4198A17EF4A4CD214B18657D2968342A33525BB3FE4
9E483B482D42134218856E8BE494A882913668BE79ADFB687C31DD0A3F85F15D
809E8B50A8F10D47A3C91B524EC26DF4F9A8897F0272ED1F64D8EEDAEF5EE13C
FBB40B6D38E6C0C73B3859046AE50FD139465752CDCA880860A34E5E6564798B
5036BCFB06192DA0C10C780C71AC25F145E07957179323937AF34A0E25EFB2AD
75BDCDA56D71F3F24448B855CB54DD562B43946DD0B2E55F46E4DD04EFDD8F0B
20DAA795C5B4343840D61C15D82CE2AF9516BAA0FCD33A038BDFD5456933629F
AEC7504446C32D7DBC71CA1EA59CDE26D3237C964B243C078B6239DA8489A176
D110FA33BF416E8F6CD8A7492D626CC0ACE4FFBB4E2203BDB166C99107DB2442
E31F4D770CBF3EAED69B22D970054D1343C1CA63CBC0CEBB42A62DC8CA036953
8C4BB2F8D065CF5DF7846EDCAA20463D195F3F57B79B830C577536FBC86BFAAE
D9A5F3E8F7901A0A7876C81797EF0F290B2379339476452C493880F28F622AD4
79B6754BC5D3492AE03D559ED2B317D8CD674DA94EA6CDB4E7D0751335D9BEEF
196F174F592BBD4BAC64EA5B8EE9A7C0700F5F4B2643BA4AFEE117B5E4E1D255
D309E78A70E5C8DEF0073B29C97EE9520199BD3B185513035219D08E71094CDC
DFB089F5BD4F41C5F9F94E39445CF8AB91E83F10C054BB8B9EEA20F2ABB7DAD7
1868BD82AABE351D71B82303478C615156AFEB35186D10EE593A111F0108ECBA
E774923CD45858120CC6D4CE16A96DD54B6C524EFF9C8959CA47DDA8E60CB37E
E0C7BDC79CD87F7948B324E2E9EA23D915D20AACC92AE625B1E3CF3907665100
21065F8CAE943EC87A1B4699D58D1CDB58C287D9271CF24CB5ABBD86BE727B94
871827169804220662CB6FC9D858C9E10D5B91AC88A6274228171A6342EDE0CD
D4ABC542CA17F40E41BD1B513D4F5ECA5B86906EE55C86F4FFF639B076878C18
517C9EBCAF6267C1426A28DF5556128B334B340668F854AE72629DA679F046C1
8383C33DB253283D3A78A6C1535AE0F84011FAB5A0B03DC506075CD860AE5060
D4F204566756E5BE4780EFC27F76C8846C7F7D52F0DC87271E384878E4B6991D
0416956000D1516EC1F7591516459C4539802E90D8B9814AF10D1C517C2619C3
AF991B3613B425AB931FA20953D87015FBA1D3480D3A36CDF4E95A64E1AF8D88
1365A0F6CE1E8E8F56CE7BEE56B43654E017A4DB7B26C7CD9157D37604B9F74C
87040AE689E5A5A8401EC5FAC79800BF605BCC00034535604C05C6319BEA77E1
3B3E30DC85CFBD46A9DF039BA5A7E0330D3F929D88E4855F1A86C1D6F13C5944
112F59875AA291E01A5355BF28DA41B2A9FBC17ABBE6771333C2090C358148F1
F52745DB7E5582B1B8D0E35C49AF42D72CC4EE40E5ECCCD9CDE186509D458E91
B307DE8465FCE7BA6848A057CC04D715588A33DA2489B0660CDD234DCA3EAF02
E92F1CDE9FD6A7AC61CFE4551C7F0872E71D6495AF672856CAD75F0BA0B284AA
A94B57B7E39EFDD93BAB81CFEA2CC9FE993D3510350220E98EC77C9BEE5329FA
ABC1F560A8B6201C80282667D06DAA48B4990DD81CB96E8AC99018F0FF4F74D2
B23CEFEE5A5C18087FBBC19326D093A436611D96C052B30152AC8A2606939F99
33101F6A074591B0E65361BCF5857EF459B463996129624922F1BD4D1B999714
0FF1CD3C96537D2B632AEF67E5ADA58B496DE16645BBEF1AE564256A65765C7B
02E77C84565CDE55AC6C5D00453DF8D75773C2759E15E9EE9A47F85896EAA909
00DC4887FD4F4FBB237BD984621CEAAD84EC1C8E7F2930967679DD59AFB16317
82E373D1C57177E5ECE037B3543A023269BC21313B69EEB06CD02D976E1D7C8A
D97BD6EDAA6EFA7346B496796948963A1FB147501D8B3E1302E571AADDFC389E
C0A5322B4C80779FA5195E84B869C9BADD93AB280F09338BFE4713FE8EB22B7D
4F67082160D218FEAEC889E370EC09DB65D684C3EADCA6D2E536DF7469147B02
C4CA4F08062C2E238778C9E582A26D07557C576B88AC8AD12DAA14007A4614AF
1D94DB3E6A3834722C59F596748E3F208AF66F2BAD3C8AE9709C366258A9FA86
23AB622EB732CB3753ABF0C5FF0EC514E2CEBE383054B7CDD610197E7C1F9FA4
1592C1F3C62104C08582662D9801C98B3F705135B09AB4C00C136AB82C1986E9
48333EA285F9AFC7E60671D94C8F99D97587244C054B4624BD553CE3874702EE
51D1FC9A7070030E1DDDBAE64FFA2D665C541A25B476869D8E7CB935B329B602
607C8737F2B7397413809F1E8FFFBF09721EBC3949BB9A6DA69BB6524AEBB090
6687287D0C2DAC76BFA89BA2A30D89F5A9464C117C3FB504482A0C1DD167F4FB
AD7F29DE5FBBF7B08A0E9165DC2BF0615CC025AB729E1CEF2E6A9A7196EE5564
8E6421256FA86A4A5B0D8BAACE70D2A7F6804DF80590377CE92836ECA60F35D9
3D4DD0AE0FE0C797B61F93876FEB43CAD05E44ABA8ECC17DFAFB5CC6C2359723
42286F57770488809756C5EC66FEFEFFDB38D4366801ED6E489D03A82EC609FC
B2A6E3105CE3BD723206FBA29A316D2C00518ABADDEAA439FC03F28A0BEA260F
5A493E475E4FB990A8D13FEEAC18CC2998452CBF26BE3CBC36AD4C94CBD32F42
F05191FA8E82F6C45C568103BBC8E9A0EA33B4E37C8BF81C26762FFF9C79685D
22B185C616CDA4A030A9CA01C7A9A72CC39F70C1DC782C4B4BBC0537C07B7BC5
67151B793AA72766A6CB358F57E91094C1E99BE2350B8EDA5328F07BE0585B1D
4783F11B5F188943425BFDCC137498904CCEBC29D4596D0C26674B4B0BD295F9
F717E5430ACD07AF984B94EBF84ECFDFD0AD50B612E5957115EDAE949E84F000
805FEE92B03AB0DF0CF2B2D49250447673CBC8219D5E367F329C105A61D896A5
6491D4CE3313DEE5429F0C192756B9246919CFFED562B574FB409A25F97FAA02
A98AB3289D40779FA7CBE47F35F6829741CDBDAC0D8230C49DD2E702B2660E99
871FD026B30697530DCE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4ADBFECA756A185E977BFF8C37BE1840CF90BED14A3164D
A8B20DFD9728E6BAC7EF9A114A217DEE75884EF4B9C60C040E8FEFB94BDCA9B0
43F8F6EFC1F52768B6086C41EBDACF46445AEEC02EFF10D4FE13601C3FB16EBB
96A0A60B69DE009F15549E0A5D45A0357FA8A5AC12E289CF2D907A6EC2FF53F9
8821703295813331DA7761B1A0D1337F0779776AFE85BE8A59526694A0F4EB05
67316863FA73E29895CBABEF51AFE1EB024F24F6FB79332C017A9411BF924DE0
E40A24B0E1B797094DD456CE9AD3AB8669A69121B16C33CD949DC6E4C61EB730
176DA74C7DC0D0D0A18384F44D6DFB8677161B8174BE74D7309B15320537D3C6
8392988141F31EE4BED3833D341B2ED787102912117E89C1762D1D58C522E991
CF63E027CDC6072975BBA855964ECF98B21C50DDD5F5BDCF9DF9A815A47BDB3D
FD957F7E5F58E9F0233288E360BA518797DF10D86BE9888BC2427FF8F9282B5D
2B115E8947123C8464BC5F42410CA566125E537B0D743643C4D1F7850F640477
8116EE94A9CB439D69786B52D2BD8582CBBBECA0ED235931822D8BD7B89953D0
6F71A6F91D88FC6921381C8C3BBADC77517E5DE728F349BF9B1398E715F0DCDA
BF2AE3B0DF0C1363D33CD5F27F9BD39E7AE32ED4E66B937314FF407E2464515B
18D2A9CB33D9159DAC2D48884940A60F0824FBB5944294B57B563EB048FFA3F4
CE3C49A5ABB5A76C2F6D24B812DAB979E2335988A820A5F6CC3571D1011B0AF7
0528E33707E068070B1FFB9F494B57E74C4039647A1D3B5199653AA4927A4409
A929B61A5FBA65D08B2D93385CCD3C9DF5B2B0A9129A10A0C2E171EC20AD2D34
2D6B06352CBDC0EA3B16EC9665840A8C8EA3FDD3B3A4201D3BD5CB20AE4159CC
FE773D9A5EF6627DBC1F119BA6B729397FF5BECDC098C7D011DAF6ED1AE0ECE6
A43A7A2C0D6F6F25A3A3261B5480BBF054147B1CDDB1DF8DA9BEE318EFF432AB
F3634C8A39CFE07553496B4BFF30A2968E27A40007ABAF2539187D8ECB1BC1B4
0BC47FF2F705BB22BA8C195BD982879A914C9B71FCD7AD4531A01D08AF8F6284
28042E938F70FCE180655F2836DF9B831BEC6A625FC76F312E7BA4F23F9497ED
E5276D2E75E43898FCEB7372F4CD6D7391C6F010CA4F1F3CC70730887A86AFE3
0EFEE08965CF0D1549CDB0B598BEABC5A88210DA36FF5BD99A9D27D0E71D26C2
B7E61CFC4AEABB777A18648EE74CC0880D07E42434B2ACCEFD44AF65D2D67868
67F42E8FDCE9C6539CD8C059894E15261EBFCBF32822276C5B50B31650CB2FE4
23749D1BA94D82FDE860230833F5289EFF0E1449019182C7C6A1D52CFA76989B
A5CB7D9F40E2810C6AB44DFDD8C7AE0C7D7D9ED6F41824A53B528C4D8F0909E7
5429DA378B84543EB13F6EBD6B26BA35B28A8B3E1CE712FE2B0626BF85617ACA
A01CC1990B28219AEBFF26905F1420866BF923737AAE0D2FEBA3824D210239C4
8C6639110BB6C354CB6578246452A0D2D4BB61B2F6A6889A9AEA382CFA4CCE19
8B09579780B48B00852C9806D24439DD15F3FE2C160AFDEBADED492407048927
6A6C1BAB1092B6BCA83BE6714966C80D0E6379B8732B75301A8AD3926463B2E0
30B14539C83E4CF46FC343F05E8C6A21760F8C06AFD34E2A87F06AA0B45EBD46
ECD6B28DDBDAECA9B62C980C4A2C304804E99C48DCD259D8CCC184665DC22893
85C6E3529B499DD9D558421D5B515BEA938E26ED4FAFCC935C833E928884E9A5
51B45FEC23BC27F06DCB8A4BF4FEC5FAB19C1843CAAEEDCAA0B22BA0921C755E
AEEA1DBF78554A54A290E92172B28B3A0CCADBDC5E56C4A4CD22A3733329B0CD
69EF5A3DE144D44BB645D581BDD0F51B06F3BD72DF1BB3325DE0860F537F67A0
2CD357AEDEBC2D81C922692CBACDB6FAB8D52A987A0015A6E8838AF46C231271
930D7724D3418B46F6A6791FCA2822DC761E2C806DBD032205EA85DDD90FE4D0
87D4FFF430BAF7807F183F191CAEFD551C5E893F46726E798130E0D4B54948A4
FE4EF19A9486D009DCDC5FF5155181B58311BA6D1EBF667AF10FFF32231D95DB
F7EECDA75A9CE9B1DDF3121FA91BD03FE863EFF7F04E920C84C35FC42DFF167E
0CC8042AE7277B19D5DDC37C31B844C84D27399DF5F1DB3A1C65A553C2540840
5BC9ED042D9281ED90F490A725CBC4FDCBDB3E7577B1536778927424594578A3
564F07E2D0D4231250A9496083BFEBBF9B9E8BA2741B6C6912BD88141457531E
7E800CE63BF8CBE9A12ECF514251DCF3FDD9CFFF3075355FC0B14436038EB901
C7604D2DFF40B3B04EDF5ECE63FFEB4927772502B1F16B33B332810F089F90BB
E862BC963F2D9FC5E24625595CA7F6F958E0F5AA898B561B2455FDDFF5AD3603
17790849C98100D84FF1BE3294A5E13B0117492CDC35B4A644FA7AA747AAA67F
881307C705987DCD73F79A06E8DBC30D6D57EA7A2A0ABFC6E13AA5631DBA80FB
68F6308772F7668176261F2EDD11C439C77A9BD44F2ADCBD1EA0A7B74066BDE4
B66EB14E7D6F6A3E3BBFB397D8947F6FFCFBC9EDC2F376FE9403BDF88B030ED1
AF45319B44D24D8466A14B3947AED43C3B737F55F760515E4002FF59065A691E
C4E47817F93FB298A520C1D1AB8CD9A643C48B6C645336B12E84D55D16AE5B7B
C4D54F94FAF28247D4255C260986B36778A5A3AA1ECA25E066961D31794E7CFB
65631B9201DFC5940BEB9EA92E2B29F01825CF2E0DDF6984BAA83B887E920DF5
FD5B3FE8B3BF027B0C89A5922721AF61B70CBBD9B1D147E63F967EF34016FA7B
FAE457FFABD81CA0C596456724023E07640A0DB5E06C64A63892ADD514951079
C99A3AC0F02088C68FF6883CB8155D656BF96383D2E96DF15E2129F9D8FB7831
75898F36A3857D3FD582973F760D4353AF15028CA8BB639F3BAEE6E992719619
2FAACB98CA3803F5FF3452F8B19C4C459BE7A3665F25526CE101337B67327B15
804831FDA0A04EB3123D54A0333C4FD6E9453FB44747B0F0F1F480D80683FDDD
9A366C6D137A548724D7E95C08CFA6B49C988E2CAD94ACA94DFF4335987AB35E
1C8CA1F6C39567CF06D594D764F8BB43DD9798F43FF5D2B4EFA56C2A945451BA
937263B0494BBA03B1D4B1125286E490641A070E7371BC879830E39590781EF1
42D5C565F3A04D6DB31EE047C5BD67D9D2AB9BE2CB68571A23309DAD4089EF5E
31AA0732DB7E0338CDB3EFD0D2097149C2AA3BB196393B919BC1EC1E092BB501
D343342022AA759E582688F9C734C7C4E726D079B5301C78A9D6108DCE048B51
0FC756781E8F417BFD980B9AF814A685CC7A9A27FAF7417D458BC7895C2C5892
BEDED4EFDA1E62AC4ED1156452DF58F7029554A4D59574C5C743BCC09FA2DB1C
306244DC734BE16A83781BD00847D1DDEFFDA0538E39AE7AFCA733184515A5C3
DEC0CA069465E5A64A0E3FA312B00B4B2281E3CBC527107DB9F0AEA6DD92C740
7A68F871ACE00401B267AD41ACF969337F83967F4F1993954900AC184512ECCF
4C84F7512B4AD95724EFEB5FBA2672D506D73D4E8EEF67BAA41E35376F1B00FE
816ECE0BB19D83B5BA0BC330270524947AFA30D169F09533AA92AF5A06EC9882
8BD56B5C1BAE7392E8B0B1C6D721465C31C0EC23ECB3188D4CD59826C5C22F7B
F1E31688F844A00D1E71061ED1565143D39503AF1F903FE2D703DA9E03DB6EFE
807CE1CAB70510624E97F803558266E1ED6F8871D5135FBDF14FD9FA3846EFB3
3D92D908C5571314207539B72D90AEEF61F902E41302DFC4C3221BCA30558FBC
46501CC35D88B8F4FF2B057CC85416B726345DE7787A3D4024E6D2BE4FD6C319
1B96967BF433BC8F3F370B529FCFC43CC25A1524B885144A2A4B97ABBEACC7EF
E0C6702D64F3908F2374ADF2CE2621D7DACC95B3975976703D74A2B56AC26967
E2ED0FF7135BF54C10F09013A2118F5AF6791B537E71AA876BB289629FBD91D4
A1EA1F396A4ECAA458077F83CBE3FFCBDFC7C672DB73373C3843AC961127E4A6
A3B94D837E9DC0B37A0C8D27677120EA08DC2A20AB0CA72D000E3420E6714DE6
BBCB296B66530EDD13DED11F298BC31F3576960717B2C707084687628A38CA1F
FED33664CFF3AFED8141F3517E7E39D04884BA3CFE9AA2589B6C220F44717657
9C0AB1A0CDD505995D86626C5BF15540DD278DF0E2411EF6544C44ED02723483
132AFE033BCCE7A292E6A3D749A17D6F3B3CA5A37A96B714BE86A2477241F327
7C38E6553D4B033F54CC6FDB18059DC2FD14A7020750747A5A968A70538185B7
64DDD1919D1CF01368799C0B91927254E0E9BD544C4DD1C85B4A105135DFD1D3
07B42EBA50B119A75C5CABAFCB69893B364475FFA69D91920601722F5A4FE707
27E23AD6A260349F412B3C894BB8F6922492F10765B7D5598EC04C963ED797BA
5EE0D8D4670342B31B6E9557A865D854ADDE8A5E04544A711D00BCA83B3FA825
8E0F429A626D94821807B5C5560AC519AB299CED819170273470502F8CC81195
61573533422901633799F697BD475B2FF08E91D24E918BB5FB02BD694A100E94
04FB09C1227F33FC79823BB46004E7D16E49A270638AA8929BBF1E4AF89319F6
B01FAC9DA6DE6F03A2132B056E196BD8AAE41B93FCBB0FCA829B3EF69CE14C65
6011165B0E69FB643A2557FAF304F9BE4834AF88DE354F856FF4BA9ADE5CBED4
74983A41AD80FAE17377E05C816A00EB4758317CE48C4C9C41ACC385BE0FA8B9
D2B16153BBCD2E9633A7EB9259B5D11C6094FE0342898D305D7061687441B962
BFE8BF4758CC609EC47CDE724FE540A78F1CA6DFBE8673CAC71CE7916E67A57D
CD0493B3ABABB91118CB34A6080A53D348F6D706A5DBC0A515644E864E64F388
E25E7AA68B484CC6959AE190E1D89AE313BBF12A7DA6F452BBEBF85C6C0C3B55
B6BB9F853ADE87777D722D4E987E5180B9E1896CE6B58219ED7C4D88BC80FDE0
7B03ED73E52ED1D349D4D1E816FF23B276A9D172766BA6D141A3859AB1D33E83
AD8F421F6CA2A19FB2012F4A358F33A08D7632983AF760CA57CA1819792B7B2C
D50CCD7B18C2ECC8FEED00FBC00D7E2767D31E5008CC5416BBAB721D85A85B7F
97D7D867D5F8810E36C9F947220BE9A3A6A613DAA5E1FCCEE61A418B0E2F0CE7
E94FDC678CC5B23C3B2F871BE62460F9BE12D0D0C528ABC072FA9668A9A1B37B
7C67C1B77EED450E583AAFBD07A5792CEEEAFA50299B18BBDA42306FF6030BD8
30651578302A8ECE14932B05BEFE5DC882995F271B3F0DDC176F4FEA5011E355
72B8DDA1A530E46B523F564A4A99BFB416DD61A3016C95FE044B4F33B6067E82
B9192C8D53235C608EE5C07CD93C68C358B607D6FB3ED3280210ACA1EB03FB18
884D9040A6B69834DF6C550DD4BC045F33455484EB61A363C23D169065F37E33
78991C98447A2C34D590D7EB3CB158663C80DC2BDF3BF21A9EFC4820AE9E4B2E
586B396F3905078463488B2E4274BDEDFEC0F8FB609C893AB4499DE407D444EC
96C338972C262D18EEFAACA0ED8A5D3411
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80381FF096BC19431A8B3B1
880A35C206720A4963693791456740F913B52648FD5D4B05AB450057E27BFA25
D698B2777C497318CDB711161E2DFC121AC9484517D7C558C8ECAC25FB9EE32F
0F94CC9DE7136AAF0B41FE083B062CCDDB620596CC91711D12A4155E5D1DCFDE
9F4ECD69FD31FE27E7B4CB920DE053CA8BF7D166CE3E0B04FCDA3B150A099993
B56AC7B3B56D0478ECBFB339E94C930D379A98504567A22ADB01AF1DCB0E8959
857A595C26DE3A10290AE7E3E01879B5DC8375014D057DC4E23576F354A66710
A4674F99EDFA00C51088440AE9D3C2238E0D3B595913A41E866DA6742CA27060
7CEFFEE6D54641B7E558F1E9C5DC4C9888AD0E77C0287AD45948B2225F0183BD
481A526F5680F6A5B1A5A9D78DAC108CA1FF9400A3DE2CCD2A72104CF80B0F7C
072B05B4A5CD9F0DE3EE7FE13BB25E2856FBAD156E5CE91FBD5F44F0E247D957
956045B1613117331061BA53184111DA5E9394DCEA8EA947CC9AC1257ACE00A1
9A3389B06DB5DF396F0783135AB26A74D382966B3EDE9EDF028C0019ECC8CAA5
E07458583101DF37369DD094770C1A1B8477244E8695B6DAF079BACED60DB2D6
9ABA96673E399338B988234E9E9616EF372577738F553F81135829F9118F4BFE
20CD51190E7D02670CAC5ADDE78A45B552D7C6C98468ACA69BD8EE5503E25738
CFEFBCF081E46C55D9E7AA3C194B3F514DA06353DDFA9C87125E5C9B69FE0A59
23903203E230A868D4872655A2BD4F485C7FBBFC1A88E17F1450615960AC334A
5E3CCB2F8DCA630494BBFED0BA2BEFA77D3E67E54011D9DCF8C70A6E4AF6B269
BAE0CDB19D93C41B6028FC2870E4E57BA1B4773094EA195459AD8FF6D402754F
0A59F7B466741F359B651D4858046E62753E97CE1C0B152D66E148E1C5883A9E
A152F67BEA64E08722DCE6A5762E55A5F91337B511777C4690F6B64AFF820F57
6404D526D66EF00BB3F49D3246261DE1DE2CADAEE76E15B3B7CF6D59301FFC30
0DE2E19A784B1D204DBA858C9AA085B3B5A87A04282C152610C6DF152CD384D0
4A294115CB01446379D93A84DA7DDE692830CEEA2E14524F98584ACA7958632C
ECDFE1ABA0F78067D00DF338FB71E7ABE6EFEB2A6172CBB0FB50132566DBD214
6CD88C3A2FAC47231E7B1033B4F51FBF490CC6277C9995C6F0BFEB3F5BC0FE45
B681C73C50BA9A434AAF78C09E13E90690A80DF614F24E9D390EF786681B0441
11D831971C4BA33E9FD206A7B97E69443C961E0B060D472889E553C988126096
DD343532E74B59C0AB38E1D71D781BD8282FD2969975CDB303737E0E286C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9B8A7B534C0238CF65B3DD3986298DE
5016DE66B3DE6237E6FC9CE04E7AEA2C7E4A824F8054FE402799ED4DB5A5B214
C02A57BB9900E406B2FC13BE715ECE4B585AA5F99198A39BE62AF7CFBAB277B8
A66C8413AEA916F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED47CD8B47E300E
3F5F6B8B75060C761A63AC861E5E78D3780C7A70B5E6928526F8EA94A2EA40EB
14DDDBCEC549909020E717531A147C9ACDB6F5079C10E2B967CAE8E2646B86F3
F1CE756E4036C1A1BD27291A7AAD14E946491C639CE22CFB40A99FE068BEC315
186B6E7A6F5F190D9EAF4AC53F0C4598A5BB79E23DDA5F25039ADA8A80553F05
2F97988D4B276110BCA39FC05FB995912980707299900AE4F349771B17DBE1B7
FA91F2F7F3C15296DDB13A3D8F34A84DD42541141BEBB07219595A46DA8FDDB2
0819F2337432A326ECCE79B1CD12C56C7856D4B0ECD4E415CC9290C79FE24F1E
DAC12771C6D0E14A141A52D9465223B3ED9E26A5D9B0C31FBC84A663DBE4E3FE
D3696B649CFCC810261051FF67E1BDD3F5A6455087145759F387B2E8551B45CB
6F6CDFBEA8F56A2BCA48DBD42C11E120CBD1E6B9479E52D42C8B3806FA06180F
1EFF5CEA5ACE58B45624D6DA288C9EE68A76F7D836D0AE73FA5299A6343F5838
C23AE0E328D4FDC5C2E8652C59215D05298EF6304FC37E8EE4EF7F2450F67A96
D44A2CC71B3B327B16527BB2894802F6E0E5B3B0B42C4E29643EC14B422E5BD3
BB0208A83E16FD4236560DA1C968928FCD6484A476D9F0942E0AEBE6BD0EFD1F
37687B723EB4242BA8FAD974BFFABD8E22DB7EF8B5E3A28F83EF3C454918DD08
7768EC44A893A7EECB6D95C35BB87DA2B60A0AF369640C43F5923329E4C03C24
A07FFFB684DE7ED68996FA2403795AB210E4155A1F61F98EE74BC9078A559E15
331A0AD3B0182FF6033CFE1620E967062F19345B9C2F4A5F2891AB13FCB507AB
790F40C12BE5B2CA616D526C530E15DFAAC1A7F55790E477C71A2FF28C91C1A8
BF2C73424AB98FF24C1197A24B0FDD2FD1A3676A2E5FA086AAD262C1B358E0D5
2FFB821C17B58701F3DC3453281288884D5B37EDC8DEF2EACD9C3985BA9ACAC6
9EE37C201D3D31032AC8A1BB77DD481E807EF825F48411558E58AC00AA0CCD15
B2E395482539E49E919F3B177DC742585727C12F16E867F7B692C959CDB7A45A
996C806CE627529201F1A70ED484FE92F0C684F4A0437873EBAD6AFB646F54CE
C76AC98678B54E6E3A1034494CB67F2E1799CC7AD881CD1277452731409EE7F9
F5E396EA1B598CDC2B459A81B19A090AA25E8D003DC50C08476F761BDD8D791C
F23DE48A9C4071388376DA3372563DAB6D3481A92A83B4687F352DBA807E1632
E2C67A22346CF155930698C2E76B71C22AD65A76B04AC2C007C9D8FC83BCB2EA
05A9C4D09B9A6A983A0E2C816A464CB9910A2F9AFBC83648300C8C4E43B82EAB
441956C911829EDA98948B372809F295F67DCDFF37359A60E233CBD430618695
7AD9A2ED31221E1CB19EF42F8B7C7BB88C50C6B50764FAFF860CA83C46485F21
D4EBCD3EB0F2AB9D84E98621B64F4CCBE09A6338DBD1E11BCB2E5323B4D8E08C
2E56EC2B520F06515DB1DE6054E882EE083ACF0B95B9F10B0111760DB3DFA8CD
622F9B0C79E4635A10CFB39EE250AD0FEC90BAFCF313178E02D3BFFC709F92AC
B6CB2BA47A553BE38988F36222BBAE11B6FBA29AE0A974673C28691118B7A460
A2DE4498F25A81DEC9360CB9AD881524A036E6FDB83CCE8849508AB9653D3002
D39B43809AA4D40AFFA292D1BA24E033458D3727ED4B961BF04411C66C0FAD7D
FCB05E178555E2314470BD7E64EC7A6060DFB96D5030E787961D72D02C195C66
9E792C0DF7F89C1BC2EE98C878DD54F9923F72D6AC5BA847A7B941EDD03CEBED
F433870C0523C3C8A7F3AF5DE044750BFA6253ABEC6BC7453597A1F20DDDC346
E1C4E776557BADFE0AFFC57D97601280566D93EDB3776748198CE6A6F0267B4D
BBE06D3F05CA0DFF5AB14922D59D1D8AF6CD3C4389E300E221EC60CD244B4847
6D645F86023F1B1036F425C07D122D8233436A38D5E1CDB4055B5F865A7594E2
D8B7498C00AAAC52A30A8E0C5777FE3E4657BBBA231A053AB9E1E03DEB22A520
A2255010F286DF8660274911476393CF409286611D14F20EDC6ED439D6E7C35A
F7BF31F66AE16EF9347EB6CA2FF8E541262893F836791AD7050205F67C15DECB
BD1CF81913CF0CD0070B27D4919792C0C06B83A336B37A9DF77EF94AECE2622F
721CE6235A8F035FFA5B7481050ED9EF7A99E3FE103AB285CCFB4103E6A8E744
9093FDB99991507C71753EE604A02B5CA76EF9A534FC4F81CBC9BC691EDC41EC
90A5A709059DBF3165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B7F7BF5E3101
82F66B217FD6CC9B23CD9DBB08CE4B28C74BC8E99461753A0961785426499900
9C8D902ACD8AE97B075D4005049C9BF95FF0FA981A8AF789E1DA1A7857A17F3A
F222687DB9CF10CD88109B0AA050F06A64F7524BF57FD63870B38E4100D67ACF
9EB4C072D3196F99FC3E580F6F6F786A20316B992F547DE9372FEEA0BE4053B0
70A9A853C1E216348AB87B18A4184C84556C0476BCFB950C407E5604911B96C5
87E65FD0058E0576018C74688065C50F7D0B536D797593F26AC40DA92E2D981B
85D1E0B172BE416FEA0D359CBE04C83230BF3F1AC0969FA8C70A676E5F5FCDB6
16F45FDA9BBE46E5A5BA9582544460DEDA4F8244B50204D20AF2A4CF72D34197
A0275EA032BA48DD91BD2B4C0D5668BF88016D690414EBA598029FAF593E6FDA
BD6C8150FB4CC872F38A7FA2B92A5D200A66103D5C2DEED096F4E892854B6840
1191866E3CF532C4004E60AF7EFD29A6A1FADD93BD3CC207D8E995B165AA29D7
D15095E0EA08C6894F0E5A7F3694F5E0CFBCA5AED237FF2B19130CB692CC2177
EE9050DE126E5FA920A55FF29A67EE9979D682EC2453C76DA0E3695E3C1704C4
A83000BF40B903C032EFA375532CEE2D8976F785F1C1CAD8441E4372833F4B75
FE74013872071ABEB1D27266B0036AE48CCB5D49286DEE29DC236543FD33F885
D105C4EBEA25BDE25F1C3D509729A4EAA36622D2316B239A17BABE5401458A9F
79AC19E71AFA2380C8B04D23F4F1B2E0162B6752F7187C406FC07C39CE6E1D46
7461084EF1068C9EE5E9DF1414D4A5FF9FDB15EEA6E5290E41FEC653F131CB4A
D5EE08CA3293FA4F4C6B86C72E4C548E3C0112562503832AB107A179CB30F3FD
E42F31B9FA80D08E4430665EDCEC71DC39584BC7A6769EC55043D6359D3BA2ED
407299B5C9E361C08AA256350BA7072328E1B32287D1724301D3B14553CB0D9C
6CAE3ED633B00B60CCEB075B7A849768E3AF8E18EC31EF128B1E5B1960E5FB11
FDD2174E1F9269DF8A84A1E7B30B6E65CCBF21D70A72AA4B05B19BC6EA670500
3370A63CB16ECAC066B932EA37986750ABB9B55F3C972CCB71F350FC6E5B2D2B
06E2FDCF513E03E9B50724C67557B49FD1F406BF81D08D68F7920A1938932638
DE190F0106455E88927AEBBFBC5B6E30D586A2DD28668DA7A60C446965358CF0
DDD078FF2E319A37EB5CEFDBF36492D265A7B00F924C43A2BFEC536592EA879C
DE6B7972F4C158F346088F4C440B5BAC980CFF66BE9DA2BD1B660010CC689048
E837087FE7179E9020062622DE064EC1424A3650847505713A9B31042BB5A1A3
B74395F8AD7A723EC105A40D613DB4F863EB2C0E88E8A8554E0365188450FD85
44D858B4A51C150212AB6E38EF1869883173A8BA72A443D5A83B5BDAD51725CE
38479A8CA61A5985F7D9A1C7C7A932F73A95E4064CD4DC59037A830D1A68E395
A1287123BA8C9C093FF36C008CE65D586404B70062C170FAAF8EE978D0FF805E
17D38C76F5B31D74BCEF1F0161A5BA285A634704D90EBB278026EA70C841821B
EFA38DFED0900A0B01DC92EF20C4D928F2E50CCE40BADF14954BEA85E18855D2
2FA2B5478D80FCBB49386EB93CB56A10644C519E5B356340C7C6192BE1C16815
3D6BC36B369B797F92FA88A8C8499A8917CAB23F00BC124FD93096D2635C713D
CF6434AE97F67BDD87E81163E68BDD4B8FE6B887B3FAD417FAFCFA53893D1AB2
37909F6B1BEE6D7D22FB4065142C276F4FE2BD0D5234A2D9C37951947D838F69
F2E93BF5068C0847F92B7E4F5DC321DE25B58E6C8FFB23796AF82510932CD990
097E3B1706CA6624A13E91220E40F11879433861B13CC921709810ED004944D4
B18526D4B875E63D3664E935796233C8C788C31A5CD411A5F5CB07C706001A57
771D1E94A269173938DC242F0812442BE5663E5B3F31DDA29F1C35F212F6315C
C620EC0118A7769F41D4F54FEFEF9B540A99B60868D8D3CEB7C2BFEBDE0DF79A
246D471693F2DF2608C28329316045535EB920307407A664B44221BEDA0C08CA
5DE1FB7C2B76070982751807C0F6DB1FD83F056774CC7F2283B249B075479604
CB028B883EE21D9BD24B48E4D1E03E7378C05B62DC006C1C598F5E312DB3A023
7D88483418CF7B8F43A76951C32F4FCDF087644D49A2010C5124D9C768E73D96
E8DF23C93BE3BF0DA34E503B07EC3DF25240C00AFCAEF3F8EA237FD355ACA072
8135DBEE8CA54AC0F8E0A00389F3127B0F9CBD00E2EAE589698D4F0EAB07DB9B
F961F09CCE06D7A8BA166B086B5C8E29F71C9EF548B8E80B2D8BE6DCD49E7B62
3D69370F66DEDE8735D67F948A0211D121430D11E87AA6C12083B29AAEA996FA
92AEF646617AC1DA9EDB3A2ED55D49DDDEFA61EA1F01DAD0A5086A47A0EC71D4
169ECC5A9AF15C361F4CA0CB8AB5C6EEFFBA7C464034283055A466DB744A42B0
FD920C4E62223B86632842682BCD4EED2766A69EF6B97655ABA7A937D8197EA6
27089D71EAA4E103C8BF03E66F3D875B32F0684DB47B805E2F60779FF767AF2C
FFAAA7F2FEA079E1C67BDE0D385104C7C0730BEF94DF3D9BB2161B4EC08165EF
09AFDA587B09E521D96E58A9E2F58E92391CF03138693FD5103767DDF6FE6FFF
496B106857BA914FB452E56D3F05CA0DFF5AB1BA1C0D6444AFF9AA7F71305F1B
E96D98F0401D2545E9FACD008B4ADB50EB9F072DB82838BC4C0021571B3CC540
19500DDC798B57B6D41AEAE67900498C2F9834799128DF2B034852C673ECC071
BFABD916DFBBD382DA926E53CEE7C94E6B1552C089E7408D6AD047F410CD1709
FF4A5AB714B111D8A8FE84D6564F2F6C38F1786DB3C9DE2BD6CA02D74451FDF6
14A8F84EF89A73B433B74131B5C935D70CE9DE75407AEE7817694C65D2484218
CB438C2B9FB81757802E694B74D72FAB8ABEDEF76AD7F14CB416CC957E016A4C
72A6A1C474F80B793FA88EE3DB7788FBB28D6A6235824DDCA2438F68BBBE292F
F30EBAF2055448995FEC91991A3409A2AB840574BEF5C8743351DC9550AC182A
98736A2FAEB50DB608160740F68F4364E12D55C4EF5739C8802413917E562AE2
A9B800166E14E49DF641E5329F12B7A6E0B5CF1219E393C3F3334854C5D74956
78DE754AF0AED037CB25D34DEB46C4AD0D21BFC3A9A11405B0873D4E95898F17
D75F2976481C945DDC142982E9095ABAD90DBE134BDFBE5206A297044BFB1F67
FF3CA388E840184E8CCECE8ECD4BDCAB243252E9C485B355F2D0E078A414252C
73A829292BC3DBC0974DF26BF77D9D52F6CB8D6974DFB548189D085A7DE2E7FC
9FACCBA91B72D7440A7BE1390540A5E42BB2215C1693170833ED035D6E315495
BC07329E152C88A05B283489FF2FEA91C4C9ACFA21C3CA9EB3F9CC21013C0AF8
59A0E4C935856C9BA1A3EA67F4B0A4DEB9984D59F8BB6039CA6807D768CFFAB4
CB966B5DD8436D1ABDC3EBF2B32D1DCF10A584114488D4C29EFF1D33AF0E3963
EFDE995399D2F52C8FF0FD4C6DFFE04EAAC3078F605903352AF414C13D06A414
BB9D434502EFAD841F0DDAC1AB92AD0ECCC0A15C2DEE572BDA14D8BDDFCF2743
A15F8A90AF596C05FE2AFAB5E9F03DCF912D60BA2001A2D092A533E69E0DF35C
6B43C7C81B91358CF6517C9C418DA0920FEDA16DB051E930FA7ECCA082ACB5CB
8542AE65A90E50809D3CA890BD15DE20FC75F2DF6D80192C278765688122A453
989EB7CE1FEC9D31E66BB00C09B952A829C26607D81FD490832AEE5010AEB42A
C994C4B96D4043E59A18F4FDA0EC77FD3EEFDC15E69130ED69C1C8EC5141EB84
DEB4536386594E72B2BAFC51D5BBDBBE987F6C8EB5612D2437031D7FC78897E6
7FA4713C65620D09F8EFFE7766EDBD7CE06A64C118A998E2212BCB115345D433
ED23F7B0B9A7414BA069BE4CB8D4BF0E6B0C5982FD14E4E916D363E265322DFB
B25AFD2AC0EB3A7C3D9294946F1ACB88A63ED32F8E5D4E45C5368C977D4BEBCE
7AAD6ABCEB874D8071ABD4C842586E8DC4F671A68F8B02EF2EF44976FF68DF08
65B2B83BD799B5CDCA5A5527048775EB15B80C65DB647AEB5F741BECA4FA8B0D
525E849E59E7B75E384FC1EC7D7E6A5023B7E36AC4453394CA18C1A13745ED69
1C6AC398E71FAD65564EA5B099C094DA672C9D042051FB5E06385EE33DA907A0
788B783320EB9EA8A9E4B2BDB0B3CE83C9142F78B5080089A09EF7487C2F6B6D
242FB5E8A2F4722AA609B1DE020461DF7CB03421C5F46042E9D52609F10EAA76
20CC6B87B5719981AF8EE6A59495409DC8C616BA9F1AA22C72790A97CE703AAA
6CC20D0EAFB7F9BEBA4A9630ED0ABE793BEF39A7931111DAF0EB96975FD6E11F
D00743FEDE965259A3EC5847D3E6BF879D45B1D5CDF53E42E66C5D03762D9C98
DABA1A7B34454DC1700E8AC2E1EE384B0F6907DA0232BF5153AD662023AD7A9E
6CCE4ACC8208F22F1126D38D9BBAE1CAB08D9A95BDB30C78C3AE96CD02A7FBF8
9970E094EC07DC64895AA38BBD38FA18F2330B334AD12A467E4A5E92CF58188F
B0A04FD5138274F4D2E991E7A981F856409739885A994617FC32EACE83B3BA43
39968E9597EEC16144700ADE725EBF142A9A36E846E285C4137E63A00A3F9710
43EFD019FD28473648739C83BEDAB386C9B13FC9996591ECBE650E4B8AC10427
9C428DEC23A2B17CA95332B6326944FB6975DAFF3F1051B1D86F85C68C3795BE
36AF36B47F9852704E2A1CEA6F1F25312B41B125B4A46DA4550DB20C2619F26F
374BA34BDAB4CA64606F06142CAC4E1A66E8E5F4B9BC04C0608395A9C2BA9A03
945E029527E917F17E502D5F46010E2FEF569F0772BED49967AB61994F100F9F
F3808DFFC59E4382D77CA2CC650F27FD453BED9574E1A57B6AC0D3CA9A8513B8
8BB7B2E925DB3365C80D5602E399E761E937B694F26909D2A34BFF70378B1A91
16D385A7D1DF64C6AE6FBCFBD9E9879DE2E51C85B3597B7E6F3FBE930D8CC9EC
66930E5533FF3A7328F0675312ECC5745560A2C81AE79DF8CA515C323A63498C
F6A5082B6BC3A24C23882B1FE802167DBD2C10D1EADC6DB9D4925A4D12312900
526B412117FA7BC81CA4B50CBAD741F9A7B9B993111FEF38733C352751553801
6F8BA6AD48DAF84B49D5E120C8C3C96A3D38A88E5D4A9559465191664D6F3982
D8538998FAF4591AC49AA35A1254F64DEDF8C02FA7806045871AF6D7D534C89B
E5845CDDDA0862D2C77185E184696B56762B938F289731E6155BE79E19EC973C
93E69C079DF7B66876301AE9D423EA39E046EBD778C8B4959449BDD74166B19F
03C8300E68162C687171D647F26A830558CD47D3C668D629FD1923CC317961CA
BC41A10D44BF63153E8EDD8BD7A5C64D66319AE0C7A00F69528AB762B09723AC
952E6D0DCB7D728719F0CEA135F9F3752B178AD1EDC212E7FC06E86F8C31DCA9
696C28285AFC3DA3BFEB37BA41DB55892C790377A634F66B33621C7D8CC53D2A
74B7D6C493355A5F0EE31F2076DBC35D75D54158A386867C7FE0E41CE5C9F477
CB09A963A56C8F43140871BCA1D6D4C715DBA77419116522F39D52AE693FCC37
BDED9E34A4AFF9278950179871507605818EF4810298756A7F8A61F00CB29BED
A23719D7C70BB34D043A08D7C97D31A5E4A8B62598409A11D7518FDA16DB9280
B9485C4867644D32D0D9153510AD79A5038A6C4DC8807DF5F6C137D67B87CB0E
B1B62A7A4DB93BAC55016AE06595134739401B0D8ACDA770BE655F6B316C147E
4148F43F68B433E736D2E15CBE3E6E7A1CC72721564B8709C55F98E7C5F18E48
57576947835A01AAFB04FBDC7B4B8770D3E62C7EEA9759D337ABD80B27EC5439
715BFD8F854843EA1D080677F64889D4F13DBC2A06A959B629EF7444863CF361
D2F7242677C023F3BBAE9CC424E277788953475AEB85C963B6B5542015EBCF40
8214A4AA87D2D24B95D35C381AA7D2DDD0EC02ABFD4B57CAF14B34FCA46ABD97
B5AEA02A3BE1064A9E9742D27FCE2CC85BB5DAE1FC5751649009B86F0800333E
793891A9E69E6B18A95A9D277318EB7238692EB3A3BBB6338D8CF730881326E2
7BC33436A35995B50C489907E266A8DCB1D744C660C00716A9BE748675E49086
1555E3B776BB4B3F82782A767201EB3012C24B426C4171506397527506CA0C9A
886441FF55ECF8069E82BBC921A97FB715F0C8D4F478D007CE9EE3809379FAD3
1898A0047C25F226A406F9BD8DA3CC97CE16C8B6DEE86712CE56B0EF86100AA9
C79E7B2F24B32B33E7D9023B3B8CFB63CF6C8AF9623945511669ACAC092A9C03
E35F117363E6AF8CD15028D54082C6043BBCAA723296E000463F8247E55F8E9C
AB0E6787ED7D43E810A34375B477C2BF78B9B7AB53756337C1B5C225FE45A04F
184800733B13440F514AF796BCDD85969D65B671B754BF04D2AE19FBB7699705
48513F3190DC0CA318783CA81177E26CF828FED0D16B16987D62B6E9E8EF3ACC
3053926BF4350D36D28E2E8B90CF14F0639A7799B2C8A40E6CB11C31D9C29C7A
A3B71450BDEAC4AC8B73BA9310637B99935074B5B5A3470CA5F34361AE50F4BB
FC8CC688F21F4F14EBBEE9ED27DB30878A978AB481B5DDF16634BA0704A37BE9
179EDA653BCA0422BFE9B4192650F77845B4EB6B7378DFBF36AFE522359CCE27
A7F004300B995E8562B37C85E89093EC89B975E7707DF678492BC58C366F903F
717C1A9A37719070DB1E340A488291E3A718D0D606FD8A7383F068BA765099A8
6BD007F3F6054376893F64D24DDE0E0560100742C0C991B095E93D7E723C6406
BDF51CF409246CE2FBB04C34D5007682F58E9C1E574F41ED7A5668110C3DF398
2180C730E5675BC660D7704664695A83680221C6397E36FED578261ABFFCA244
816CB6ECBE72B39A04D306436AE49443B068F1EA13C297818BC0CF1A94F1D9A4
D1598596C6DD4C919EFCA683A83C9AD337F4726906EB3D588F93D21044095F92
88C410487290808B88F9421D506386AC95C7F9F1C888F976BE53A8E2F5D224FE
FC2DEF84ECFA903BF1644C2E3A3743F168DFE505F1E8AA58ECF0D7A456C05E4B
68B7FF086FC52C07FAA5BB36405724BE29C2C166EB8810BD36256D46D93485DB
EF2BAD146E4DF93B37E4F01CE8AF71499D39CE0567AEA286091BEA9D6A443A5D
828FD190CEAB577C4EF72BDE7188AEEC3E466AE803B56CE3B0EF200E16BA13E4
A36F92147E38CD27171877780B3E487E4A6B30A7396CE6843E57FF9B354CCBEA
A5650109425DDBDE628AE55448972C4AF114F730722C5EC22F3AD79E7008ED1E
8A49229FD44F45CC0F6CC85C210D9BF98C8D76A53677E7150CB9A33D3DFF3946
558639A461E2584C849A9BF389B403CD6FF5F8366F9D36FB76A5BCE4A4CE375D
F221D42B25F5A9CA888CDE224CB1128F79EFB703E33FFF9D78591EEBE7AE8E74
5F8986516492FCAB6758B667331B05EFAD279524AC4F2F29D36982E7A0D21C7D
4C2B410AD1AA715ED5ACCF11CB959C71DD0FF87700CE95F21C4C1C9C32617236
4A0E98DB177CF5F25AAB7D45791021199BE22D89940BD35D787BD5014387B064
500C857F06F90D95C79E5BA65FB6312C8CF855891180493205BD9016FBF72C42
CBEC9CA6D6BAE9108C28BD3BDCACE2D523AC51DB2BE615EEEF42321E4A008B3E
D3DE2EFAD93BC4967FF861E0FFDD17081F9F5B532BF9F91C7EBE72EAA2A9EA32
45230A081109C9E90C00D0E11B189E5EFC007B0F2CAFEFDCBD00F3FE84F34692
CD8E915D11A05CE124A4E833606410FDAF94D9BFB5DE70958048F037C56C14FD
BCE691048469BC488DA50E94426AEF2D5B015C5196CE77FA94318AC24FD12A7A
E65EF1CB0057CA9DE3F2BC26501D087C8982D6B4FD71FCC93E3811030C29E471
B39B289B7E88A9EB85ABFD6570A3D6471A1F8D2A1F257E423086707AD2510CDE
2F459FB1498EBB9CA680A624C20CE95AA5B5D4FA8B03870827EED9832D3215B3
B1C180712B4A6F4B7EA8705E0A396349401CA8D7E45983976ADBA0F5A42385E2
3E7E0CE02811C87F72082C9BC07B07893B2E4F16265503390887B7E695147C08
2A5353765C789BE6E984EEB17413FB9C95D6FC8E3FC4F897456B01E45552BEAA
FE36D39E0FCA7F92D2E6F78D08128C27B99705F11276660C3F6C629770627367
26F73DE91FEAFD7808499995ABA0576D78F7F0AB674FDA64DA4E9A6A6573D011
AD64547D683701C4A606BF71A39EF59C9E976C5F562F31C628021C652FC673F1
2A52FB18A1FBD42B544011323E059BCD0C4C9CDCD3DF632A9B2B3308C641EFC1
6613B8AD5D886B7FF861B0619C29348A1E71382C84689EFA8B5C6DD39FA5692C
BE342D42D52C383193734662065DD5653C091F976A6EC043DE844726A222F8E7
690F4294AFE8B5E7C4931B1AB54C7DCB8D72862D87AE87F9249B2FCF932EDFDA
7D4313F4AA8D5FECEAC8EE88C8830B526ED9264D4F54FF16027BEBBC9E01AA71
72A8F67A678714BD90C887E6CECFB1C926563979CAD433B91341797AC8D4E984
2A21E833B2F6C54C1ABE7AD98C4BFF998A9E337BD16D6006290B613C40802E0D
32EF0DF8FE6F2D4E2880EB4A142CC402DE58812E489159ACCA2F8A11C5210AAB
CB55D2BDF2A6AF60A9A45DBE10073E3505C3EBA20AC324DEB563E3FE5A377FF6
243E9B38814F9CFE771F4A5F8ADA3243C54D707FC2CDE157EC885EA0000B6E49
EA8C144C8F17CA6354A084D3DCC5ABC5DF3CADC870236751D9EF2210E6972DD8
ADC647BA2AD619700D1675405E1C9A35D8B64ADFB4C668AE63B11D15A49B6E46
D8EC621225A259A7CF617CF24DE7029566695B04E40439A30337C834EC6E7EDF
F8FEE58727EFA4AB79C5D156F6A37F088B4D8ACC59D8F09018FB64C22D9C4397
DE484F43E3826342C8B9644FAC98660F929FB67086BBF02A521D080237AAB4A5
C5FA7758362210962B3400AE0CDF57242EA8A7DA9114FD97B71C39F4CB6342B3
A76311D692EC8E56A3B492CE299209E0DB0B0BF58CE30E46FEA88D8BB0EDE87E
F9D8DB92C19ED992688C38D5AB822DB77434BDC79A29F57BAF74483DD8451FE4
FF72E37B03CEF0E2DA4C842ACF79A40AB6A43063CC0EE57C97BDCAE5BAFB5AF8
9F949232F1FF3B3F45A4F6DD39F210719B4DDB86DAEA2CA0CF457DBE7901F18B
38FBFF69D3FCB65A973610C405074CE17575985162D53910DE1DA60560F84973
A847723B6157A6392058736D607CA8EB562EDC8ABB5D6C02C56198664F1428DE
ECBA64BD825113E613717E3D948CDC7C93B261D71851498AD5DFBBDFD2AD3A45
C0FC93D273C16FDEF6EA15F229C7D109D80B8B72A6365A4A9445A71FC40E1AA8
CF53A6E23373FB2B49D59F95377431850FE284B1F1A9DC809B6620C88AC1B10B
7BFACC1EFAFD38D3EDDA033405B3E0C76AEFB69565A7B7347B45770125B5D86D
1FA8EC414E0B3A1A6C53FC6B951CE935ABC955B8194EE4CCAE6C4C9F01745475
B1E3429B7F0736227E92113DE32451BDA2FB7C6992B79CD83E40292315B0EFE7
11C541DF727FB447795CA639A5C9057E97FDC795EE6B7C3F5CD836AD1087A150
4A5BB67CB2C5BC34973C66955EF15CB6E494649AF8F9C74E36A9420418AA68FB
E3D77452BA66E92DA968494217E7F75A8F8D124357B24AB26A44B0352BE25A0D
74993713AB2FFA10EDEF127303002CF4BBD57EB1DA256678EE073EE3098DC9CF
8BBE54D707A910F1EA9B991D38296EAC8C586A47FA1F63A1AA4A80655AF62739
3E94DD3DF00391AF696A2E581AC595954FC51D73EB77B4E6CB8006740B0AB54A
7784D3EDD40001AABCD21E62DA447AB71A060B5199BF7899D41F602E326D6E56
F6F7F0127C5A92A54E9D8E50C05AFF61EE040DFB6557D96D9C79201BCE9DB330
AAA57575E2B264F8D2C86B831225C2C7A7603A6B64AF3CBBD57FB065E3B9EE83
9CD48ABE642223D82A657245105757BE84B599C63F29A716D2EAC98DC8423EFB
3F3A2D2CAE793A820A25BB289232CFB0D90876614B5124089BB90C6DE8FE799C
FF1D309EC0BBEEFFFB52CFF48DC639DD9A89D4B210ADBC8BF9B9282797BEC191
64512C80D1C6E8822B8F54C5E4842A26E5DA8ABA2868658526B74727FCB164F2
1405F989CDB86A87D4C57E549D3DD9776FCED36FD33CF75390032B8BF47E834E
26C1A55B898851332F6DF8F4CC3A4DAEBC3A8183C47946B49EF30F596CD90917
28FBF8A7CFA315D2A1B0FA5117C21FB2DE99DD2C1AF54C00055D90094EB79BF1
59A65B012A2EACFC2FD63C9F2174D3168C7EAFF2CFF58C61C07CCF01EF9FF989
CE1D1317800BE4F9C7E39DEB8A92EE0816009F72EABFC02F3DE8D10D1E9B8A9D
FD05C44C457C2669807F3163081165E89C99CD0635E33CB76E5DC2882CDF9610
932E4756D8EA3117ADA2CF91C6557EE2ED5B4CDFAB2976D79A78CC28BD92DC4E
DA5C72C6F813D53F1E9C3734B81C2D601989EDF134C6DCECB2AF4C92191A5671
FCC39EBF8D751283DF5B86A556402853FF310996D457C4AE4F5A4ABBA3B80CCC
A6788AEF25264822AB4D94FD51449F12FB63A6FF809510749440EDA8415DCEB4
F266BA674CC7F932B7E494649AF8F9C74E36A9420418AA68FBE3D77452B9B365
E858850E6C6CF9E5CA28BA647584F5C1CB17A3BAFE35F272C5E80621E49487F3
04500201A506926FCA37E8191290BA5F59BE94B118F6FC73B6C0B279D818936F
2D1A985F7377BEAA49275B5E62BC871BCFAE9AB6422329465B0A2DBDEA1DD7A7
48FBDF3886107AF158F4FAF741609B14C8D1F96356661F43F7ECB1CF1480CDFA
74A91AFE489F63852A12B46114BB6BFD37897D8542A37B0E8E5730D1EE3D8894
0F645CC893A8ABF5E1A2260C9A39C24E05B36DD4226A16A7822E6D523A4B3970
F587F128305D551C1BDE7D5E9A26CC8D7CCE79CA02A223ACACBAD386F859C51A
3605626B70FCD6DAA30568C75286BDE987AC89C85DE712A769E4CB151CCE23D3
7EBAAEA6E8A3FF86FD92A9101B9377C16A41AD9D29D5AB7DC23CF9F66CD9C9F7
5FBA92ABD47A5EF18C3A43B9B7A3D1EF167E3109A3B18B4BE3185DF2B065FF2F
04A7FBDA01C6F4107CDD3F8EF8385B45D44B09A9615DCA767BB4E6E77F9CA3BB
EC86703EC4F9FC142E94068ACC9773393CE62318085F6DB268FEB24B0A89BA66
AF4C084F68CA1024D9C91F1E8AF54803847BC15E9B1C1C9CC76581A50B6A623F
16759E557505A1366EEAC1142E6E43E7C50DD0AF354ACE1249255D1F4329FE92
C8C5247752B2945D2D707054CA31F8B5061C0CBC620D7CCAA0E331EB7AB0AF62
CA936817FC92A87C319B62B7902F55C78D8B2C6BBB0765C7280D980227CD94D4
75968A50A10A61F1ED2387628EC648690980035348B6E613150446293F3A2B35
3C3C9A849856A47A1D4F89C3686AA1450F23A5EBF94C4754E96EE36345800DD1
3C04021FC924C88B19890571C60821FD80E218563A89AA2D11DEAA3714D0DAD5
4DC3528431E581F91CA4EF832E7D6DF3E9E03BCCEAD202AABA714EEB90B5C4E2
BA30E02B88EC78FF896C6E4D672452A43B2E455305B0CDD5AE2CFCAF3AF145B9
BFFE54694EEB71C5543D158B30253C166B90C47B6B6ED24B0288F8BAF757B727
AAF2426421F0093C603BD63827E28F17D57CEA5D326C3A1DCCF42389A260FB4B
DF2F5BBADBD74608082BDB993EE2A25A7366BEC1FB76200D272C713BA3B6143F
4A04DCBB1C1FF12E5BFED5253156E3A76B45CE938390F8B1AE30C228F2115C76
EF1ACD02C1501537F65F5BFA656C1228B9B2F296281350C23CEE1D869C4B8950
52A6A8F47C207A5E37031A4C4A86EAAD87BFB1ED2F719FA436C6C62E9CF1599E
25A83C693812B2CC6054CD1C5ACE454E6C2384F743BE6B1AA2EAA0E4AB9AB757
15DD54A38017DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DD7597666EF63087
72F76681769749CBBAAA03FC80D559F55AC343DD3F3DC1599A2B89F3F57C11D3
338681C093A134B2F746F8517795ED6B0BE7AA1CD29495FCB31167ED17694043
12289EAC5B98F664803DD7D474A5E0C3E3DC8729BC102BE5EB76B441D70998D1
2C7A7F6ED118CDAE6D24DBC6C9DE039497621E584D1E9DABAF71A35D36B7A2C2
5BE63C664FAF1E15D2819A4C4A0EE2C31C06FAC6AF8E1F6E2AB8B3E1BC52B3DE
21F92076F3E05F66E1218352E2FC7DFBD017B56FFC42EF69FFF844B6A1685957
E146C0D8D57B2B7F98A511A9B3EF390CBD920B1170B5F735E62A49376F635C4A
C35C0B95B18330F3F54933EA55E71094FDA864804315702300BB185EF9BCBA86
557172A756D9EB9DB1F0B9CAAAFC03C5D0999A98F8E07CD0D1FE902B802B2FA0
FDB424100C9E5B24A58644547CE16AF408924C291A9BF0A089884DF1DBD5B6F0
D89A21DFE7922D97BF0BCEDA6BE083874B143F56127C16FA9A5BA5026D35AB63
E6B5E92DD51E6703F85B553C0CEA24FE132529C4349163059145E84CA926EF01
47C444472A20C0F87739F0983BB0F65B1D495897FD56EE064855613C5D7FE85C
94739A639909E8F03A9A6A253E40915EFCBD1C90F93B69D9FB2CE8186C00A60A
FE27B4E02127A03D3A497F11E700BD12C67EE4D6BB4D1036416BAFA94EC36834
6935E45CE711CB626CA6190E824AB7F64E4219BBC0C2707BEB48FE944C937BDE
200CD5F3148055B1CA561E2BA388DA3493CDD7C2B266B13AD78A8A6FB59D5841
1671F7769636D7161F2BE3B3E275CECD2463A48A8A4AC9297257BE5F6435AF60
542C6401DE2A3FE56AF2FDB5992661B838AD36815E577B873188C0CC7CBD3BD1
4AF461AEB25848CDD06E23891F49841BDD6A317C3469C616A077CC34BA35BF2F
7E6249C7DA86DBC0A88E29A8C183A4107D31B603DA5012C28D62680353D0A703
96A6C17EEE77CD74BE2B61691EA52F310916A69050A6DBEF686CFC5506C7C1CF
A4DEA0A86F1C9847B4B7B6989E5F99811E2D35EE03B05B9A766DBD82A2F9939B
4C20F60CD585B903986B62F0D90F62BE142143F56D5315870A4495AA73836682
5ADCDA75822E76823EF3CE74413465E538270FDCCA581044B6D7AD0D60DCD528
867373F188CD6A43BA25D404DA68A3B269B8FFC06ED0D5CF298E9EB1951D0D87
822472B5B8C1C1A74E4D4212A487BE1B9E177364D0ACBA21DC543317FD3CFA68
CA797E8477407C99892A5B9FA6F3703FC79A130F18F7503272B19DF89C12D696
BA94F7AB81F45B2BE07D4B1328FA7F9DEABE47796671E9FE49A730715D861146
F3BBCBC27DDB15D06E47B2DE02742FCADF930491A3D85810A8A11592BB286234
CCC61B371930D03DFDED827F891FC44CAAE2756CB7C24CF997D1AAAD314629F5
2AA2FB34B566C0F5233A2490BF43C88F2F8F17C35C96D791317A2BF4A4E39412
A5DB541DCE24EAFDF8E43B70DBEE8DB32E714430AAB9D09B1959E07080FDF594
201E67FD9E0D0384EA2A9F08ED1C54F6E91CB61EAA9F09B8D0241E39A771747F
0D964DBADF2073D7515FB933F13D863D3BFF907C2FFD213D13AD35E6DD6334B7
646CC772D4F0AC95781A15F307A7F4A958BEE9CBA4311203C1A8669D6AA11512
C5F7D3D8FDF237A00F4B5EAB9EFE29A70655C26FC436D16F10BAF4FD1F05A674
931EFD14F90D04E4B0D7C3E9ED549190E20D908D546DF64A59FFEC604BFB88CD
0CC26DF0B3BBF046F8554B5B6A32A3194999EF075132BBA43185B948D62085B4
76C911A2F97B9103E17A16B16F375A7FAD40EC052ECEB3B1DE202567A038F650
F568D2ED5DD7337CCA73C0F6FEA6D19E3ED480EF7BD18D688A1DB92A2B11E02B
BAEE2FA914C9D8CB16DF8EA6C543FB1D7EDA23A93106E334C67A08EE5B2C7343
5B0B6D8EBFB873BA8A2073CBA7DE351875F3B4E7054B671A035A7A1A1FD3A186
E0C053D7F1D7A6EDC22A8353244AB9C976DDA1E0CE905C82240253B79F26AAC2
20FFAD305D21BD1F16878B2BC0777D9C6F468ED4560BCFA9C052CBF02D389722
AB3E5E34600313AA5B870A1221EE316C6C63603AD299890306780E7D7BD91BEE
1398884FB621DA75BC7A9C1B7E3A0219FF263D1B9936110E5CD8A6179DD606CA
76A08CFA6F9C5BD2C9649993073B960FE65E432BF10DB10B36644792DCF164C3
9A4AAEEF90BC3A1559519BB99831AFF73FC56A9AD60559833FCF7297D685BB2F
05E6532BB97FFAADE933CE14EF4B9B99042164C633B9FF63BCB6458A69F01168
398BF9DD43B6154708FDCCD5D54EB83A8E720BFBF24550B04D294FCC655FC0A2
E2B182943E66318E6E87C81091384AEF38FEB5F5A825C17B693AE4B4F41AA585
AA71553847301C8B8E266120A93C509C050A1973F4C850C0E9E86F8F06F1B98A
BA43D9FF286837F8169CD82E75778D6E910E3E21BE0DA940D532CD4C879988EB
473CEDD8D4779D94501A974B8C303404FBE7680EA7FADB8BE47AA6C6233B8E8D
3B700C0A61C04AAEB3276BBA805FD4AE04A0D61794E7B803ACE0E15D4E358CEA
AAF4CF88AD4D87D2B7F27C4784D890D8CB907B24CE4BB9136FDE34C2C67E7355
4D7EF230A56B331A13BDEC827E636076F02A4782A20A3CF4BA0A6C92DD49C249
EA6437BA0F023AE82B02154B96E26DE105AF1B54137C1DFFE41E434DE7675889
7394D0EF445C632B6952473A5834BBD68E527DFEC6C96CF09019822C2A7402CC
77A43C0997BF799CD2C1106B9B9D92F4EFBE5FE4E2ECB891EA4DF62FE3D8545A
7E516998AC134D241A73D31EAA8AE8A82D8DDC0144E7C1BB169635270568E060
AD7BF221344B76B90C5F36B98100C8F4D680C9CD9C224E9082EE7CBEA7B3ED0B
9E338466E4B1BF8B1539BB2CFF76CE6AEECF660F5F8B3A3214A82E4459276C61
B852BD2B45DA20CC9BDA92A9EE57B7D551CDC287E6F7E16709BABEA980F8A65E
7060CDAEC95C6926B4587951440E870F7DAF75BDA65BE9780B46F5876CEA9446
E391D86E9CDF06492BEC78C976FB1A1D902520B3564A2BC6BAA3EF4926445359
7E2FC4DDE848DC98A3C9054E372D222334F76BDCD12D7454F8864AB2D9C437BD
3011216F3F8AF6256511CF4FE9B3F49D6A9BF16FD1C3C8C4A6A8D661A6B86BEE
897FBFD48A2C762DE740C890DEC0C9F0EC661552DD09F5082D5EE46B6316612D
8A612965ED9E91BDFD90CBDCEA350129AE8D0238D9F8CD89B8085C49BBFF23D6
1B3B342EEA674A5B36157B67AB00B0323EB9859E733746F81C4E751E168598EC
6F85ED4BF67292B97509C44F7C535AAB0A5D7220C5947611B93C83EAF898C8E9
CB7469A5A6416048336562F0BE05A69C53EE2C7B383C8503216CB630B5EB67BC
1DA8718AB74E76F8819FA1709E0591879D2EBBF3BF9D7499840F2B1B8D8725E0
F6BE77ADAD22FF83BD861FCD07E1302D6A3AC1026B368D0B6590CA0EE1B91FA2
3D9FD4292B4C730C54CCB551DE4B5B54076F7EE652220C5CD20A575A917C9E7E
D07E37E59998918B82D8BBDB1DCF66BA2A1D34BCF902F288D20B503761C2F6B2
CD623329E6FDD75DDDFDA95BFEDFF0EA8BDB0632A956CAD3DE1C3A71186B3E9E
206073989936254E6DD19455FA4CAC54F126A88AF38E31B8970363CD700D1D84
17625335AA066D3FC043A0F4FC5615424B28450173B754650E85A6C0B81B7313
1CC88E6252EE0010BC79DFAAC54E6B131A1BA68441579DF651A964593FA5F103
E3FE0E1F45799C50912B4E5A187B514CC943F9967B17D2D1DD89B7706E2CE19D
7E81F5A004076408476C5010DF6ADD85F62B3BC943B4E80829F58FA12A5DAFE4
7AB2BEFB8D4C3130B690C132393D12FC51AC387861EF5609974127FC88302091
81411478790333412DF7A8DAC1413E93E06889D501F229ADED1A686EAFE3CB12
F53D0F28C0A71C1499CEF50F2E8C9742C8432AAAB19E4ABCEBC516CF6FFD07E7
26AC794C0AD4C64DA15F0FE86B49A206130512BAE13A13A9573AEB2620774110
83C2E9E96F1D83FF3BFC4D497466C7F09105A287FB8C8D3087060197AE71741C
1164328D3D72B04E2AD4706CAE030D8427E613AA46B1BF37E2DFD9C487D208D0
1A2622FD2797F655193629D7E2CC8D8EA33A69C1332CDFB9A208401903113829
3FF3019E15220EE0AD97D107D8B4D994FF5445D5E937E89B538CAEAF3246AF3A
C153F05A43A830F6872C38F28BF2CE4BAF7787DC757A2C1B16E1A3243AADD0C1
5EA072D2E727951ACDD8B3BC390A221171A53BC97F8F5797DEF0377B43E5DC9D
F903D07CAE4207810C70147753E076B7B619B3D72F34FAC9A99743A66034FD46
041EC7F622FF879CCC3046545BE0C41526975C2D4974DBAB9AA6AD07AF180F66
A9FD78322642A84CB126A8AD379E605BE0BEDBF4AA66801B7EBAADC21C720812
43E09717DBB24FDD8B84FF8A8D9C44AFFE37B03AFBFF92A650BDD35071DF646D
46BB3143BF467F941515229516D855448B222D57B811EAEB373845CDEC040A91
E0E3FDF6589A4067C7835F99CD4CABF152BE22EFB9CDB1D8096FAB8F59B8BB79
FD2C52952A523BDD0589BA22355FC35486CCF688B7F586B239C654C96FBD0E41
2E317616BEB9C19FF1296AC27C699CE095F970DB1FE0D0CB400E80647130A54A
E2FAC9222BB7D457CFA93C02716786B0A888E5E3F9BDDEE806C71B2345205E5F
2EBC1E967EE2B86BB6041675405E1C9A35D8B094C4242A65EC78BC20D377D68B
ED977CDF4E50C83464257E05923003671FF0A54D301FD610CB068B3106D8D18B
B8F42B472AB6DEBF3F25CADC6D3F61B663C5A16F6A657447994528CD21DA47C4
5DD2653D9DAD6564F6C813B7D699F6E3356EDB0533C3FE0D423F95B641BEAF24
23C2CC68EA9C3CBD716E33B7387F150985E6DB88251261D98390FF9E05CBFC78
BEE42E887A2A3BBD3C2D6F5E4A4B898478E82A3DD10055B80BAD84AE5B5AAB0D
31D99F3C202C277B9CEFFD6DA61EE997A91C5D9220787DD65949AE1B082E3F5B
20BF645BD2A7E6A8D057C10AF3EE307E159C82A4E76C543EBA4ACF3EEAB07568
14E318A45C75AA37A215135C65C71FADA605D3147D224842CEC15C76AB75AA16
C08A8793B765E02BF269757500120FBCDA2879D5D9B34B1B46E12ACBC807D47F
D222016C2EE4D396C34FABCABCB49C1DA6C8A3788AFF00ADA635DCA145A9BF64
C0D05B9E58803C2BD14E9C1D34A3DC9A8C061BD60CB90B86DD3EF8A2BE7B1070
64E7417BB0BFDF58D79826FA99B797CE51629F7F1AF9F3739F063D8D05B59B2A
9DF0298F4DDA3A4570B45669B6CAB61314565222A1493030E61D657AED8E83A9
F049F085FBF50AF7CF2D95C84F3DBE3D2FED08A3EE99B47C1199FAC4B32EF954
523884B25864FE320ACF15D1B72CA6395F027AF12BDC2EA70C2F15D17E36C517
F85909D537BFCE3A67C07752483AC9553227DA63F211454B1EFD1F855106AB18
14C0C33B5AEE465DF65A54CE36C42B22AC76ECE7686E4E8DEB9AFB5A17A07A7A
281D007F1F6EE3CB17E0FDB167D05506A96B384ACEADEC709B67C6EADAD9672D
A050118E236AF7279649C7BFAEE8349123EFE3513D94F48ED345031964CA53D0
1F636FDAC79331920A9961D824A3043FBD5D9C7A640B688C67DB5F84D8F9B0D7
7E2489E6C68A919022F3C3F65E3DA8B4AC908E1D74AA193CBBA701A2DE04EC1D
07A9F817ADBD1DC82F3D375EF7383FC4539D3C5601BB0703D5EC685E0A347F51
A452D45437CF8D80BB6CA6C0E3C0DD4F53863EF94F8B055FC016B8ADD08A84D6
64A3F5D5CCF115A81AA86DD8192137A95C1E2B32AD91C5AE174D98DB0E87D19E
837CD4F9A048B6845851FD32041C6E9869C3E607FEE1169483883F48FDACD871
55B5882242022ECC0DFF7D19314583700796B3D4677A6D2AED73403C90884F55
AF936438B5A592EA7C2765D1983BD77CC4F02023B383E39712D0264ADF1189C1
92F6281F1192BFFEDB914866C5CA4C39F5BF7C143B095C1019810E6AD835B430
07CFF459153B6D5DB2A63B987A6FDF3DC655C1B490C60F79205C89F02248C418
3172FB4919C0A0693F1AC58ED1E984312F3A8ADEB65CE3209876552F25CE993C
85C28F85B221B46DA6A6D9B3AB7203B35B019FA89DB952F25A3E448086583C75
D7B2BD572D01AF735E492E28D511AF8AB17DD10B3AAA7E18BC7AACE9AE959F7A
1BAF1F90B6229F32D00F99B5045D605ADA527B2757408C2B5E1366817E4124A5
569EC9B686B2B482ABFA2F32238775586A737EFA9DDC53370A1C0973B526CED3
F3F0FCAF0B3550883CE73955BD64213119C4F3EAF218C7E99571D09A79471CEF
80D784D3C0B2DC97F50E034A545DEB95724DC38207AF9F7F3A47EF14B198D9A0
48FDD5CD91C1BCFAB305D3509176DB4BC70D995AA2C90C39FCEEE865FCEE4C7D
7B0ABB46B35C124F130F2F8B75700129A10B39A1D17D2343195A294CDBBC43B0
E58C42ADBDE2E917ECDF77D12D3CA4B45EE35E070FF94FCC6341817D407E058B
6B7F6A8FEDBFE29A1185A7F8256CE1DF6441DBCF24C132EE1D7A63E59001F052
D5A5804947AB800D7BF423DBBF3613EA73BA2AAE3FCA5D2E78ABF50BCFF51317
1703A5ABAC0AC6A605C61E4920319CB934901AA2D80ADA23A4C92630862D158E
88EE3F590981B9CC5DFA2FB696F4827AC5DB47F09B9F270C18A6EE508D553135
72B688035E3DF002ADF908F3BCC7E59BD032467BFFC61F0C2A1C50E623D9C587
E1F55D56E27F97DC9F1214923132880294657E41081FF8C7C49C6DDDD8169438
D8A0F1264115A4B49AB74A01912562546B9BA664D2C5490FCFC21CB7024E2D8F
4807D027C96D69FDB9BB9BE767EBCD0BD1C62E95F6A9D949A14F150C585320D9
3103577173A5714A1F14C2C73EB6A7BBFC6E99368AEA6EE589AFABF3ACF5B042
17BF4BB08F9F693A5DAD688E6D7CE75B370FE5F2C0D13562BDDF631F424C2A99
BB88B018D3A3F971C536716C72993BF21DA93935796927C0789D1DFD98B7F6A7
E13306919269E507F4E24CDFDEE33D444C969CA42D479233A9FA5FAC62983CE9
A9F40AD8B7C27F948B2A8D42B985814F7F42D208CD7B9310485D56AE9357176D
5AC145011B7EFC7F462C08C8815468D59BDA8F0A1A0372C6F838BE21011141B4
9774F8273B5E983DF637067B215B409C6C8E1F93FCE3651B3E9A311C03C8B405
A62211A57E011EE6C1355AA09BB50B79820D327CA1EEE9059A039DB1ECC99780
88291D3E466882D47016712A2203559C23EB19F3E77EB92FD650C3D4F1E48B14
192029A2AA4A7305B8EE96F688CF92C4CC1FEA9BCCDFAB2B531CA4B94F26F852
E2C6572D81107F13B774BE13DA4BDC243449D0F032FE557509BAC0D461608A8F
BBF7D4B9311E9B4EBE9BA8C313A329D6199BB27711CA16A9BE748675E4908111
12033C7335A06B7C74B7991E111598195F93266EF74DF89AD5AC1C3DFA064D8B
1B48BB7F4FA2B82B1EA4B63FB9D86B484D8B94CAE170443C9BFCDA41F4306448
38A8F8424C5CAF3453B20F8369C30C33B759168843DCD20AB3D874CF10A9960C
A9559D44949A9023452DF54E5354815433D845EC970C7711DDE28B2A220EEEA7
4FEDFCD75C2581B21D4A23A2E4D3B9E922D55610F873998B9C93C1A96905E40A
C5ECBDA90354653BFDA2A434E4E031AD64810C3C738CAFA78BB56C101A78DE6A
7205CDCDF1FC1CE8B869E5D04A2AAB1621A4E73D368961F1E0847C93F78B0DAB
082EAA04BC6B893BA13C6E018126DF92A262CD04C39F6CAC3BE21391DC7CDC3E
AF09A627650130CF5E76DFB16232ECEAFA13E7395FA1FB4395A1814D5FC3B35D
594AFDE348F5E4BDC6853160950A41F2F9A827FAB9B38839F84F7AEEE0DDA846
81DE84B7D150D6A7C6FF9B2D0DB8A6141C335284FC5DF1B26838D8B6A07BDA5F
3469BFC41E342FF7CD42F6B821E75DADFFF8B1F2161D0B6036E7F654E1FC0D9A
9A3FBA49EAA38A1A9113EEEF4E78760F8A25C60981E6372E49D71614BB4DB8C1
3396B200AEC477909C2A7CFACF4E2DDFA16383B86F1517524DC09852F5B47B4F
BF8156B78ABC9E6FC08CD291635174A30EF1BEBA5095045AC2EB4875F4A661D9
46DC2F6CE27C4FA2E1DE7A9FA29F9C2B7C99321A46F93928AC78D0758696548C
BCC6FAFE86D59CC492C2FF155DBECAC189713E397839E4515B46AC69DDC3D51E
DAB38AEFD8871D0E611692D7703DFD1BF5EF84C35F6CE96DF716B54D746EF9FF
60D2C2C037D99C8FD8E295AEC15C657770BF5E5BAEAD71201EDC89AC175193B7
A3B92A00B857CAE5EEB91D1C363934324448A94A2CCCE7DC7283BCEBE2470987
575D5030B4DB2D0AEC50CA745443F50FB178860B8B78DAD41EC7EB0AD7991792
5FDF5CFCE87EC913E4094304B74F5CBFD1778EA626C9DD6682D156B59120C6A9
57DC6752C59B3020EAD689D8B34ACB825162FA5AF065CC2D65E417A3043965BE
D586484C8F44BF29E643384ADAF4700E4F683703A622145CFF106393556A7102
3CAC5F1C0ED717DC446C52E6272EF4DA6A45C0C2D52D1355C12F272354B31E62
7EDABFD4E30F30E49044CCE1EB5FC3CB80149DE54B2FE9459AF2DD2D7C8D1472
0C008F4FFA8D3075910926C632218410359E3E49AA40A2031B372029D198F695
F833CF2CFDCA9AFD3D671C949E9B0B7398174532822985157D55650E78444108
8CEC212A30D4391FF1229E4F84AB4DF31358F026409A1A1A0604930C96B3945E
84C8ECD8521DCE96F73667BE98058DA68BB2A3832DF7CCC162DB746AC013D8BF
B95C2F57D49D8D3353FC7DF3726A2A533CECDE6F535E3C6FA27D4EA53FCBE67F
188553AA98F8F2F93797E81A9E467DAE6E95576C7F7A2A25823683BD51D67648
F05BCE472B6093C82BF2A23116DECBB01E64F359D255C8EABDDC4D5FFEBA3F61
D35AE7A03042D2F0C84EB946AB43B05F6AC9BEA869A5C6AF8470D26527E73BE1
9DD38D454766FA4727C8709EECEDE5688308EB0C4B651E83B1CA8B393A6B1FCF
89B8B76CCF922AA3906D0541ECD617B8BB199160D180D9309F26FC26798343F8
0F01518636C3D2486DCD748D1F24E11B7818B6347AAAA74FA8A5BC6B2E903F27
2D38BFD74002ACCCB0B8509D9BB8356D008922DA97E3153548794D9232AA20C2
9B6CF38FC8562EEB493436AA0E1ED55B70BC0079CC996AC611A934830E24885E
0C32300D5004DB1BD238141F6E74CC0B13B522BD3BBA216A9599E4081BE94947
18C56D998F9DDE9AA52BA747DD8BBD767AD3EFBE479ECA5B7529BAE86B985D6F
2F3AB5F744202CA584A293F65B0EB3258C71CBFE3F8C6994215372D05F42D3E3
7130426A1755C9E5AD370CEB0098375E18F41BB5CF2A664046A6F676FC1F41C7
3CFF4FBEC9A9EC28B0AB81DB26DD017C383575FB3F102824C302A15C8592F079
A29C6F7C69451725A9A8BBBEC8AC451239E34711ADD347782194D0FA7B89B315
683876EE0F8E07FB898E46B33A5B0338A896F9B21FC5DAC0FDCDECABE30FE2A2
A9956CCC05F24BF94F4BC00494C8E139B0FA4581782A24422420AFA3729D6914
40A81E7DF391919571605E7C813F4C6AAF4B1CC1EAE217F5DB68061C53F100F0
C5B1369421847B80D5270F53937ACC8CC493BACEB72C45C68C006C6E65290AE4
D56F9A2CECCAA56E5ECC36693636AAA6270125999555E0B9C7E92CB035468B9A
96CD270F8FDBBCE688FAB570E3299EEFE1CBB6624DCEF2EA84E9A12C7DC3A37A
3FD77B46CCA2AACFFE7F848D35BCE5E82D9C03B22996536F2532F29BB6C55AF7
087BA48DCB5C8D35CAE3F78F40E9A45653BBAF2A5DCA560DB5B8C47B38C4BAB2
DD04B1A7097D668CEBB575FA46330B0C262DBA7167A4E9931F28981F37461BD3
60D2D3A2CF436384F0717532E4799F0DCF5D2FAB1DBBA602BEDD835814FCA3B5
802F2C9362414E03C6EEED2E7FF81453E4D9D0681438D3C338E0D630D17D8523
603D3AA96F07F9BF88259580F3B9D0D8DF0356D99ED3DCE729D844262D01ACFE
1A26E6C7F496EF2D2E5A6DE68E1C879FC57905F16D765BD449CAB44552529555
42B51E2D4E23BF1A75C78A77CE2BB4368A7C8F48639FC3A0B1D41FA366ED709A
0C2579ECFBCFB7E7721E07C9503B48F872302C030D29FEF6FD6AEFC263C2A95E
45CFD44841B3676F481D4F7B40F065B01D1C41C9D73C75DA9ED1851F91324734
BB13A16DD0175A1E5A46C49A663A888F8F0E39E669628898FAE6DAF369C50781
157E739C254AD0E5A0DBDE4FF2094B444A1AF803E9EA9F974327FE718B250F6C
11263A0B11C7D838FB6135F9BF8DCCC03323FA0AC92E483E112DAF52BD9C89C5
509E0B8D13574FC2C215FBF82DC5B0B8383ACFEE3B6938E48D3D951EE81BA922
4ABBB65155F6786FFBB998B5175764E68AF9FE2FFCAAD11210EA3D220AC1798A
5781DFBE3E47C31D0B5A0CB37D9B81A2598C9422463D8B1D450DC7E71CA5DE4E
2083CCD24E8DB39775D460226F20C8152D57CF19D4FB047FA1A08290D454C45F
1895A94EF4FC8C536BA65159805893BD0B8D065FE015825CF153F8E257E41BD1
FD84BB311DB67D0136E0984ACFF19D2AB6FD302285BB0F8E883C2A3E8826B5A2
A74206C0A2FD237CDA518FB2D7F3C1DAA7F1FE10CDF6C081F3345BB234239D34
25231137450F303950EF8E8D07ADCB5CC5AA4700F787EA06E1948A86634EC7C7
96B2FD4AA6CD16C3AAF2110E2E632614C7A10746754F71394CEE48B89DB4C199
0E870E808AF014CBB494457AB6FEED1B5EAA0BDA5226BB7BA94965776150E93E
8C71D54471DC7736959BC5E8D6B2F37E8612CE3D6C55C23ED1D5F6000B28C00A
343D7CB4DED434D67A4B4EFC491A14EECACCE33F5965574BE6FE1505687BC460
446A6D2B1DA8F972FBF7AF899967BBFBB287D51BC5D58156CE1A7677B8F020BB
C56812819590F1255EC6623B8A66CCDBA4E740D44E35B4560DB12A7687A8F775
5DF8FCB621D02C36E94ED8BCD1821B7F9D99E477681456C190CA3F47F31DD298
5C6A786F986313E42684EAC1825BD25B4AB893C8D0239A29AB3346E68F425B91
ED751049301D6D6002727219107DE5B3830E1CA33B59389D437531B99BCCA9AF
0CE810691077FF87D9A8704022FD9EA83287E390E7165F1C1D33CB18FA48C58C
45EA8AB030FCBA02691B005747BCD98377DE82C1F71C7F0D5ECFF6A53718E4BE
C0954E1391127278913451D82F08B6D4D644BF03C6D46D5553A1BD1AFD247434
2A59BA17B023ADAA911578E0CBDB3BA84AAD95301F9199D9E98C5FB5088A6746
C0C99EC3981F8DDC78ED07024F304225AA6561CCB0E856558C8B034CDC1563F0
8BD06D3CD6BEBFBA593CE34E8DC6B5506ED3EBCE191B0F18974AB381B583222D
FAB7C105A7104FDA2B17E22FB1E841BC6DB9DB6786CA35CA0DCE692398249D21
FE9ED9C1002FD8DD7250DCA8FF84519AF3280921CBE78483B265B95D8A0D05AD
493E6BABCF9C8309EF0360B0BD12ED547BB7BC0230FE55B7618DFA7691D76BBE
539ED10A15A3BEE03BCEA454B92EA1D206EC846A68B3EC19CFB7C208155166BF
DBA528C6A92646975A56E261E3C16937CEA1C949AB1B9DC0086F205415C83F32
23178394A917C85BCF3DA4B311E7E531E835A00CB7BF1BF23E88BB7FDABC9B78
082619038C6FC92E4D81CB7723A14C83E11A4E961F1FCEF55EA33D2C2CA9514B
84DC676AD2B699CF2AF95785775669DF3F5615512AF0F3CD0034CD2799F90576
5ABE73081E0B6795CF0D93839AE2F8C4A3A06DE22FC1FC8C4F065447F5AE375E
90AB1DB8E6C65F0B04BB3A779935CB4646CD6315F6D4218CCAA2EBD92F9B1206
0FFC2D0D5F19E0DD33E4AE73BA9233C8CC7827BC83DCB6B7F457913F37CCED26
12E1B01DBE716432983B505372701FFC741679197360213A13F9863EC563E752
6A427499AFAF4ACD6C6A475373979424F2F027008EF53B1D72088642CDFBF5CA
CC3AD41CD762C47E9238830C4C8235DA5F8C16BF26533B564B2A5DD9AECD8892
AA2E5B0B2D36B70B46A1469509A5FE8968FE5967A229E3DC9063F4DFF450CF26
3B5C9CC18EFB659E73D1C34EB4F81E8848CB5D53D76AAE7582AA3AE49DF0956C
43E524B36991806FE106CE986A4E6FF18204616B94538894E120FF8B0AB25D95
3DAEBE2006856F96C8893AFC342A5B2537EB96BE26E0342E4165D30208448C93
133ABB66C156FBCAF9D5F433634FAF4502B84153B1F9E2B6AC8E035080E67E0C
B7B9F64009BF18DB7F0A6D1A0711A82F6F76C4F0D91BCBF04C06CEE5F3D120F5
D419654F753822663BE497CDB6E6A61BC91BC2BBE4FE6FD0E9F121F1D66AC222
11BC7C44AA5D4394D446DCBF1DC352212F0AAEBABC36C4D5B71F1D84EBFE2F44
AA6A619E8AFDC49D86095BE64A36FA7BD995527F6D04E36873FF262DE20C74E6
9DB0A2448A0F73E8CE1FA0AD827050EA60EFC994EE1F6397B0105B675EB2F1A5
BF25461C605B6E5FF90C7382C8BFA25B7A648D21067F8F5DF8B16C8CFECEAACF
A19187A0ACAE8CFD363CE13CA8990DCA805E7E6311D79CEDBA8BEEFE2CD529F4
B45382F3E6E1BAAB55FC00A521B5941B4A74D09E1EC4F2201CA9FDAE75354A14
6153A376198EB6A60DF3BF7828275184B22F8699406ABE5A15D3B8F74B1D316C
C1E04050A272AD105C37356B03974255AC1FA8FE9A26CE1AD7250DB693EDECAC
7FDA79275F4DCCD14C35346631E39F2B4AEFBBA0F344D7EABE7118F71AC74257
4049DCA0F0CC0FEA8683E7E4461F10B8C0035BB079C538EE56D3ABA76A889703
C23C59305C7A2A6DC4A14E614AAF8BBCCB6A7C02F9743F82FD9E988E6D65EA79
9E908958B1BD102E89A0738B1A8AB1FDBD2D897611D6AAC4F958DB61B11F19C1
B2805823D50EB25F683639BF15122AC94C6C420932B6C5CB918A36C7D05BFD8C
B9057B3992FD6756F6E7286057215D9B2DE05BA12A0E227A1245FDA84738BE16
5A609F79CBF49D51AB8BCEA2F817747D88A77C5C5009DA281F29ED78B547A4D8
3149EBF2B4D90FFB8BE2F427D339D1EEBAAD58B0946C6B8219C8B8E3B1270C1B
EB1C4042BBA0D34125774CAC77BB96291A35B5A1EAA58C8E135C5DBE19ECD785
1035CE55AD0F5F03741B47E291575E3BDB0305B7E996AC870DC86C3F9C5DBE50
87EB9122DE23199AC72B491FF847637520181312C29069BEA6501105C9AB89E1
42758EF9A6FCF8862C73958676B313F2C3E279F66BDDB5707060196307C0F75D
F58F1327470CE1E04D3505DAD2B07E1DA89EC5F15FA00BAFCF511263B3A764B1
8922CA8EB3E14081C50DB65EACFE14B23D41BB7CE7AD930FE34705B91AC51041
034C88DF0082E6A8CFCCC7A21F5A74905ABE9530283E6BC72AEB17EE83CF1DC0
E5AC5BFCFC0EC8839CD9931CAE4CF7FB4DB60AF2685C507C467E54790062892C
274817774286E395ADE506EFC30EF1455ADD22C031A21714D635BCE7CB887F75
4D76EDDED45FF14D0FC49C5E0DE7D26F8A3102CCB29DB62FF23ADAA51DF3B1B6
B8BB4CE97E870122A0A46CCFD6B4158BE06C768C73F79B133382DCEC91583A2C
59F530DC560BA854234631EC5931B5F15529115D38B484207D8F70375F336851
87937771761909AAF09F2E35801FD76EB4956C28D804A740260BAEF3DECF25AB
C9AD8033FC8EB4655A46507A8521E344F01CF73CEC5B7877077E421392293506
C391705E1A54452944B5BF3F9610B68E57D33378ACB8ED7DE1B36A8B65D86C58
DB747A2455B41E7CB3D8C64769914F77ED4A69DE18407AB99EEF38F110610C98
2A479732DB114B9033E9C9B38EF5D524E99EAD57A66C587F16F3B416CBB140CF
C45DE1634C04CFAAD333FDF84E0F33A2EDCA7C7FBDC351D190BFA2C1B8017808
1AFCD61C03E32FF1B045FD139E015E0D1D3591BE5930C356E6B8C1A4F0ACD804
357147F7DAF2599EF2718C9E373F756659C9D1BC3B025B714F42F028BD9006D1
91CB13CC68C5724813C35695AAEB4D5D860FB4056762E90A093C6AC148D2631A
E31720BA31A6CBAB1119096596442CE5B2C145DAE2B6128E6C913C88155C0C7F
5424CD1FB71F629BE0847718ECA5DE4ACCF88AB8EE509E53C64477D228181C86
CA902B7D2421704F4B6C4D16D5B4EBBD4AA6AE4716F3DA13FCA60EC3EDDDCC09
941309F2048094FEA7BFE9B364A389CF37828097BDCA20108D2CE83A98D4D92D
ACE0A7B40687F27A38927B9A5BBE97AE20E178B818C5D38E3A22E3B6AD98F74F
D037431B843CA8F72733B7F3B44F48E78519E114A8BDC93D400AFC1AE3F49E2D
6E5CBA9F47D591269CD9D9B9600F500AEAFD8C3397DF6052EF6435BCC52F1F27
8910A7453E1F35A260249D7EFDECC8DD734D9BFC4A3D813CCF13D5DCB046651B
73836E6207CAABEE74A7306B6D86834FA1104ABE3AD710BCBFEE6A59B9B386BE
9C3B49C3C94D1FDF43F5DAD0116E0271E215FB6C5256F9498116A82CCAB8479C
3051B934BD01C5F1E49E26A75C2311B21C2E9BA2D96F5278F2C172CD702255BE
42C0D46909A3D892F83A2264C4FEB938FB1027D141234E6CA6A3054626010313
3D05A38DBD5FC1D9DA1534C9032DEE7074D7CD3FE36FD16208E2D56B10220FC1
CEA674D56637B407679812A0890AB08FDC34502673993A968DB1C85B5B9A43E1
C1874610A1EAE14B126674010EE3696D11291F2E3F06359FB2DF0ADCD550761D
A22C764E0B6B9844988AD8D05FC7B11B4297559BD9C3B61AF18761BACBD19C6E
1C9DD963F1B332A3CF51E5BA7802C3AEA4369E4D84762655252E4EA50689C363
1005135EF22BFCDD25E2C8CEFD0151FF96E6CF58132ED4ED053A1AD9C8B08F37
C8247738575EBBA550A80E9DBD86329CF7489512BB4C19E927A66BEE5234AF5A
C8932A3573EE290CB761F06D0551715D1F9C18CF250FC5195ACAE06D28074A54
E0785BD51DFFE90077736717DED0EA616651C2AF25E5EBA344D34F8CDFBC3BF3
2EBB01BD6D017B54D3CC7C8C48CDD889C389D35E4D4BF0BCF9866DEF43936488
81DBB4C9005F56BCC025B22B2276C87FBD212A280B99D60757CB814F513009C4
F8EA0E7C610D9A8EB5D40548A9CC009B87404941B1C18BF3AC52BD2CD3B3BD7B
F5029C4A8FD472401BFFEBC8BD4A7DF0884F7C49F03DA7BE791B44427DAB18EF
CE389A6D7CBB108D64A11282B53CEFEE5A5C18087F2C3B28BEAF58B3EDA563C9
CFD9B5C3175698CF322A862B47E7445D94821F3804DDA8E840E604BC8FDFEA80
0285691576EDCC717D5D177FDE4C5FAEF62A44FAD2EF16CF9F3AD2D7AA13FDD1
3235C6D108916318648507B20993DAD6BFAFA574C89BC62032F460C2ACADF218
9757500E985E8AEEDB05D506686757C7604B69FF988BC2C044BB842ACB9009C0
E5BE859855009BEA75B2334B6D01123E1DDD60294B30F15695D26D0259B67933
F701659832C8FB7C7667A58DE4AB7B8519C0DF7B5A381FF8E1C166978EAF3F4D
AD45C84F6C4592ED8DC4174033A33F8824F4936B937988FFE43A262B74C52BE0
EE005451054D243B6D5D056AF16FDAE623110FB41F8B5C84082494CBC866E410
65DEBF0051EE2C4BEB23ED154E30F1FFB8A486483FB09DA826F677BF6ACC2410
A6836C0A0C9210626778ED2352CD5E55393D0D97ABBE2E2C3F7F8DCC638666E9
458B2AA416677F8CA940DA3730FCDB8E902D1438E9C14862F5B9D7E218877590
C769C1112D2C1206FAE8F5F752A36C01D95CB3DB66B016182945F9649153EBA5
E4A91EA73477B75333510D419E477E7E100FFD898FAF5022413AC49AA92BEEA2
5BB7C0D502F020C52746C788F104490DC1B3A97937AFE44F3CAC59765653F048
42802CD6A52B8964407D1DDBE9AFC81FF93996F3AA0A304C84B6D6F5045E4801
19476362466410C94A9CF538F9BE7DF07DA89B3E96228B547ECF895540EF6064
264B358F97AE8DC81463B61B3B4FDB3D0F13766F42BE68A04FEA4802441A526A
9299FED8421E7259543464ADCF9FE2CD0A10327E472F8E76C5D0D56552050C90
9E9257DC8E902D1438E9C14862F5B9D7E218877590C769C1112A9967F3B69012
94A6FA251F64B7353A6EBFF04C43B57D8E18359CE4B4648049569D425DB71358
AE548F8B9B2E0C32937C8CDBD216CF480044F96A1C9F166E156FE1FC75D9C537
31DDDBFA0A0B019593BF22319C02486B31CC52C6272165A2DBA4978322F3B706
D42300C96FED259D98E5465BFA656C08344C43DAE47ECC664BCF70081984B32F
5910268E28689F546805A26884C73258346B52A431D82EBEACACC718F5905E86
4DD54CA062EA1FF40021E812F1744F0C101D3764B8BED3E225780F2D9BFB593D
C7FFE3C7FCED238E4B22808263B7D46ABD2530630A389F09E1D3AE034EAC20E1
5E45388EB3D1414B4F2CCCA150C5D9085586D7C4AD69B519ECFB308316902D52
AE6A36620F4FE4806D72FE0E3A4988777B0BA569208ABE98554AE907BE8FB2FF
E6E0661FC2D1434F51D6F7DBCCB9A306323B28D0FA17A0A07AD7169CF56571C4
EB11494F7D17B3ECFD029189D64B4E5030544C0AAF14B2BFD19DCAC84A6165B4
64ED3A078E2FB7F38FA45B8809B4DE6A601479BEF7D843DE9B52EFAE2B5CC829
F65A1E2C4D8BCA67EEB5993FA4ECA2771CB099F24A2684FBE4E08CED552C09CD
B80ADBAB2BFB7CE1476E4855121FEEDC70965D0185F5E174F0758420612492C3
CA6111D592F4184FABB849A3676A8D175D44E71D70A7A4080A732B877EA2DED6
026CFA1807B087EAB33A3D8B581602A206FD79BAEAB05CCF5B81D99CD34D142A
8AD98C89BEDF58DAB6334F4800695B15D7A73C7B544CB96ACB0B93C351BCDB70
5B0820E139D55D686C7E96E5A9C09707114DD547128F3C4A4A2428B51852D4DA
802A0A6D7C4D00623F8A7C29ADFBEE0043D4664253B09D53EDAB776F44F0AF34
047C9A780F3B520A8E750230D502FA738BF61AB70AD1C6615B51881FB83E438F
A71159209D013A2BF0E6BA1DE5D3B93CCFFD454B0717C5CC75BB56311370D560
276298242DDCFB5B93FEED8AFAE28D54839B0DBBC50EDC121CA1ABABDCA567BB
9D28CB3E5AEEECC9F2031306AEC35BE49D9FA599C7AA78251241B46DB45BE6E4
B11B1B3C178225B2108D94089E6544907FD98B9237784963F8243ADF0C07C67E
39E419204FFE6A3781C87C0B63B470C295AF97A8DA58235F1C315EF0A2CBCD12
622C131CCFA722266A137D29655E487EEAB7641ADCD5EE4081BE8C4E2F517F73
DF13A25D9FFB8AC034C9BFBCA627C65B78A8F4796FA9767EBC8C3F90ECE5DAE6
0B268AA809245DE5FC9388B2DE22E4845C63809DD183D74FD9845455F4F39629
920D97C36F4AF1E5E72A5E77D4FDCB68063B65B26A95C303711943DCE9AF05FC
F280CAAB3479CA9B27527C68B896EDB1FAE22EE3B71C15AFBCA71EBBD2FE4DC3
5FA945B109E02BC9D0CA8F2F54C31EC1533C509385AC067FEE10435B8D61DFBD
BE592A170406011BBF21045DC09C95C9AE4B4EF735A5414D985EB505B8FCF4F8
A5E53DF6E447AAF8A2F6C1E1BC9061A24744FC6A6F74FBCA5445D5B4F43726D9
BC891653DA629F39C2D6CF82E5601CC587F79AE0608318B9F7889E08B9F88DE2
00DDAD63AFC6D0AA511271CBDA82F68343446349281D512AFD064D4B1FE9C7C7
33C01C811C7FBFE76331AD7FF3CFEE4D4DF2FA84E2F9199F8D2C7C5F905227DA
1EB2AB94EA3FAF7156ED458C74A0469B9EB8BA5B8D9974EDF580FFF16F3C96BA
68D89F628676ABA7407CC293D83746F08FA2A68B78C65C5A6B62014A5B7AD32C
DD614AB398840568881E5062A25F890EDD95B96D610A286628FE70E074C3417D
E43DB4F5E00282A0044F1BFBD6BB48946BD058A0C86C7F73B60B9749C1033BF3
AF51455B475EC9692E9E99F6AF2AC3EF0221B8690A03412DBCBC3FEEAE3DC364
060DB70798B595949C052C711FFDF511E0F97AE2B7914DD0576FA4779A9CF33B
4FC3A6252B39AAAF7045B8A0E597F5444AF4A37CC2CDE157EC885EA06B2CD478
20190BEE004634EC9DC489CF3B73A64C16A89D2886F2A9725FE657A087077876
527CD22799C717C1B3CA5F33D69DC71DB9988DEA4965350D00C399F981F01EB7
982F75ACF33109F82EE372139FDF9BB04EACDC938537D01F7A76DD5424B7FF76
DD533C148BF0071B5F2A17574791E596848744E8CEAD6C3C935E56C071592219
FA754F24B92D067A9B3D8B73CA6FBB71A29738F86AB71889D8D23B2247144F40
839F4AF5234F4F7BD282EE253C0F9A3966437278D2BC10C7F2A23A6E53060729
85131FE8656379EB7CAEE08AAD181CAEB09F77B90A0B5182A472C51947CBFE36
42A27B70CDDB848C59D20D684EAB8E9702FFC9A67192D20535A58AFB59C030C9
399192E3DB67A95501614B17DD34C73A0D84229C2226469F186646142572C5AD
EA18505C688F95FBD8ADC21EDD6B2F5B0BE0C63F3529A34866FFE1C8766D7B1D
9EFEF7BDACE49A306CDAD9721011821E73E15756ABCE785972DAA0925FD1FDB7
93FD97EF05E22DAFC207F82CCD82EA5E1949767A5D442F6761AD482357815037
1A96FB3A00F31C0BB02996DF993A8BE13EDB39F894C421CC191166297B825768
8DB5202B83A56B905EE4EE85C54681A8C18C643B499CE78F0DD4FE30359E7B39
4A3C8010C272E252E14E58B0CF1CDF712E78F3308A3F7FDE8C83E1E701E61381
17678C7E3C3908B4D748B24073EC27A368DD60461529E52630ED1E72ACAA11F3
56294AFFB34491A7FE943C3A2479023617BA56D5A170E839327417EBAE11ED83
5A6F5D37C6D81A1567FEFED3604E68BD5EB4D315942E379E7DD7EDF6A1B9E1F6
A8962038453FE4FE443A4F30766A7909689DAAC26D4284B80FBC5D012CA70FA6
9CF4CF3D6F0080A7D1CFF3BFEAA81F5DA805FA7A46D8076C9F11B676FDD040B2
2E854CEFA23605650564F98CB091B751A52F982C421E63C3C1C6ADD834117617
4AD94847FD4DE2F38D0F6536690B84855AE5F1BCA46DE29C84C15930A35AC2D4
824528205B8D64E857BEA607B86539E93D4646417EB01CF677425004D2861CC5
2A882465D8FF54ED0D24E152FC728998D53E43160A9DF1843AA423DF6A372D73
6BB46D429280394C5F1C85D75592D99EA5B94E44C8F07F3A98DB4D7B924A62AE
10A9C48AD10D5230F782C2654542F4E8D1934FC9ACDCAC3ABCD56287040BF71A
9A9B3699BEE8FC8C7D93DECCF39B2DF24308BBA9EE7809E50F0285B79DDE4398
46717F96B1F5DB9E74B7800501B9C0D3828D53956A19B93F1C5F1D13D0E7F605
94DE749536FFB3BCFFDD6CC34CF460A4A392D5CEE38FCAF3926F48D99813A45B
2AD71D926AA9E2E128442B7A37609837A93D8C76370C879432D410C97D171E29
0C1FE895E29F791BE569DE8EDAEB2DCCD7C4B742DC9D7E0C439640CF16D513BC
D29A54457691F415981970261741F760009BFB63F3FEF65FC3FBC1D18FC54638
323C8E10BEE19391FF80D6B75834754FFDB2A639DCFCE89E8D7C95BD5CAF0FF6
9FC8885EAD2CAB26E15B0C004C9C3C35DEC1970A337F3A7FFDE6FC2C6AA9FF14
EC18C83C3CDA117AE2AC9CE03E6AD59FCCB60E75FBFB7818EB68A6B2BDECC66B
903C293C8480F2897CAB502BBDB486F949D3B329299A3B989DEE2BAF2DB21ED2
CDE28E00422CBEC21393A6F7168681C055D562FC8EA2AC95CE3A063EF8BE879F
336D8813752E4E187CE130C759AC64F3CB8EBF3503604B9C67A2B6E48FFBDC2B
925060D5FF17DE29B13A0322D912F2BBD95862F2884FFFA1E05E272699DA0351
A2DA8179B466B18A2BB01A0043201222A50524E29D778979CB436A64070D8E05
2F8DCB5367D9FC51A77E9DD1C72C236F94737595D2F3E69FFC39CFE0DC17D996
F53D112DFDDD7FF4E06BC3B763DB725C956BB4375E98B16D8045106216DFE0E7
208F7EF6EFF9A1C975E8314331020F1316A1CFE7D192081823FAEDB83E260F0F
A5E06027F33440D6F544D38AF334C81B1C94DC03FB008389395068F9C7B9B4D6
E1D0EF9D7DAB9BC3FDBFAC5730BACA89D60B7F358C33D454E9A71628B1EB7F5F
761355A1D9E2A844124B95150C5A4F900412A896CD6CFF7F4D02827AA4213ED4
19A225C71EA2D4DC3147EC63E3172AE28697C6FE9010EA03A062887C53CBD2E0
B0CEAB76906F13388CE0AC08AD7DE1E1D7EA4616AB7BB91D7D4BCF7314A6EF12
1B02BD283B08CD30A404188F71E908136349E80CE0BE8DFA389C9F499704FC12
7E4DA9EA2FDDF44729D9A151152979A54605A0BF9F3F0CDC3DCB75619949EC79
D31CE4F7E8825E416E22E975678C98EC8A2E62C4F9440F7F92B7C5E405DF42FB
566EC8EBD6236766D842CC9881E05E3BB45F4044095927C572FA9077EF8CF2E2
D98E0CDB984FBD63235777E1A171A284124CED819464A60A5A1D2F8DBE62EDD1
8DAC47AFCCBB6EA9D1C03B69203A60CB64033AC9F7428BB56F970BF81334F2F8
43EBD13C4A43D4342A7024A36F45677157A5D8A04EE5C8277A7ACB3C766C747C
F374624091A80A6D52090D064CCD32B583D070168C7F3EAF8CFEF5ECE416CC58
830D98ADD8BE5A831129591E35038AD9FBA47BBAEC673A59CC3779C5BB52FB19
7AC93283996094455F389D8CB0C799B2C5A03FE509A46BF4E105CA5BF9F30FEB
6913AECAEC33EACC293A539C569551EFE0CAA60432FB851542BEF0DA449E03AB
917A0F348FD1C2794CE56861BC8EDD4E9E76A31DD7FF4CB7F37723C0C4BFA4DF
59CC273D727F1E2434965FA990D5E4ABE3327DE15BEC5EA371C0AF732C8CC36F
9334E113E03CD6D3BC81D0725CB9FAB7C86BB5E41F79E5B66084A50D806B0C65
70010DABCD130E496C66FE2198EDAE31BDF9758342C05E04D727E4BC3087DADB
20E574BD1ABEEDAD6D36953E1D5181080279DA451DAF6B62533F8A7C84A804F5
74FCBCB4D2DA5903D77A20FF9AD7A658A89DDB310968973F436A8DC819E4096A
5AD9912D442D4CFCFC85BEBEBA9E02D089B4E1E270E856C38F8D69A855DF2773
309FA0756CD1631D056ADF0CB37230AE9012BE347CF5FBEC7A8B04B50AB4BCEB
B3FD3BC9A5740E46F094DC29BA1B4F59F97F2A13C2672DA386D8BA8CF8750F5B
C4DB534884A7B8573DA111F4DECF25ABC9AD80334DC5C4BE7F704576E37226A8
3DB09B4291E5D93165E36D4F085D100A836188F3D4D1A0DF6DD22AA8BDFC9DD8
F1FC5C6732E99ADADCC9F0E218DFAA40DA2E9B66B669F24BC3A1FEF2BCF5F86A
42BAD2F846471188422025F9CFC6D42601C85495900B33C8206039ED2C2851B3
A23328E31AD24C3E2479891859673BBEE1AFA053BFC34BC58D61FE2C03D3BBC1
049C1F2D1DE4D5E64F461BFFAF150E250037C2B71EACCE186BAFC739A47A4F23
E9931F3622E873143CD9E708F3C0C8B19E0A3008CBD5FDAD9448B6167065D4E2
6A1B917A55866DD6CA0CF1079C65528A85374F57795818374F5ABFED1FB08F7A
D8855393CF6119A9F2405A282E1B51C5009A26AA27DB448D1A5182408F69CDAA
CAABCF196F44475375C49819C9B87F03EDE63B5A1823F1B699F4D21963FC9859
1914CF27F0E71C5748ED37DCFAEC1872D38422D7F47E69424977CF88172D252B
B1F4126F8A5FC5630797F8DC9447BC842E70E9F3B647C734110AFD28165891BC
2B72DF83F7FEDA11CFCC8E6027FB020A59BD00A035ABACC1DD3520E00D091E53
C7EA36C540FFBB274428E6CAFE147B1B50DB1BC59C0A7ED47CB0CD5A3C41E495
9C1D818C394E0F1D2148619B736555329590DFA364A9D4C6D4DBE2E0970EF244
3D1542D764780287BC4E2FD47C03C6A1EC2E1196CB68A03CD70EB627D06BB45D
06B6E28DA7BBCCF89720E87F7E4A1BA5A94D871E272D00506E8E8547DBA28323
FD5387CFBC7A89B55B19DC32D7BC3B583940C3BA0147BAA42831428E51F23E66
A4535DE9589CBE59860576F759421FA30A53301C134A756B52E750270CED9E1A
4B4513666AD5DDD4EAE075395DC2C137C0CF86BBBD541D41BF1DD98B7A144FD5
8911BF76B26B67C381CF46B237C023D4B01D91DB6BB6C1EC1406810B1D9FFFB8
AAD4005C800A698FB1ACC260FB47E6CF291424A53E58B2F07B36EFC3973D3065
06D3C1EA8C0D25361BFD6BA114917B5F0A1B3829CF75D0481F55747455E4E3B5
8B9830DF87DF833588197D92594B3B50A0CE1CDF389C227CD2C367DFE32BCEA6
1A15F197DE0F9D5BC44F5B57DAE1A00C249624
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/A)
@start /Fa 206[406 406 48[{ enclmrm ReEncodeFont }2 664.176
/LMRoman6-Regular rf /Fb 153[288 102[{ enclmec ReEncodeFont }1
885.568 /LMRoman8-Regular rf /Fc 173[959 82[{}1 1328.35
/MSBM10 rf /Fd 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fe 207[255 33[470
13[732{ enclmmathsy ReEncodeFont }3 885.568 /LMMathSymbols8-Regular
rf /Ff 151[542 448 32[595 70[{ enclmmathit ReEncodeFont }3
885.568 /LMMathItalic8-Regular rf /Fg 177[830 12[830
13[553 1[553 2[307 46[{ enclmec ReEncodeFont }5 1106.96
/LMRoman10-Regular rf /Fh 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fi 149[369 72[1328 7[1033 23[369 1033{ enclmmathsy ReEncodeFont }5
1328.35 /LMMathSymbols10-Regular rf /Fj 203[993 1[993
50[{}2 1328.35 /wasy10 rf /Fk 198[470 470 470 470 470
470 470 470 470 470 6[366 366 40[{ enclmrm ReEncodeFont }12
885.568 /LMRoman8-Regular rf /Fl 162[361 1[361 29[1012
1[361 361 650 650 1[650 650 650 650 650 650 650 4[1012
1[506 506 17[650 22[{ enclmrm ReEncodeFont }18 1328.35
/LMRoman12-Regular rf /Fm 135[739 1[629 1[470 613 5[1138
4[749 623 641 17[762 3[838 9[842 1[1080 1[988 975 3[650
1012 361 59[{ enclmmathit ReEncodeFont }17 1328.35
/LMMathItalic12-Regular rf /Fn 650 2[723 5[650 17[650
13[1012 17[975 73[578 686 686 939 686 723 506 513 506
686 723 650 723 1084 361 686 397 361 723 650 397 578
723 578 723 650 6[795 2[1336 975 1[939 723 957 1[885
1012 1[1192 813 1011 668 469 975 1021 849 885 993 939
921 975 6[361 650 650 650 650 650 650 650 650 650 650
650 361 434 361 2[506 506 6[361 5[759 8[613 1[613 16[{
 enclmec ReEncodeFont }74 1328.35 /LMRoman12-Regular
rf /Fo 1098 8[1076 49[1625 73[956 2[1554 1136 1196 837
849 879 1136 1196 1076 1196 1793 598 1136 1[598 1196
1076 658 982 1196 956 1196 1046 12[1497 1196 3[1616 1682
2041 1293 1685 1[801 1682 1[1353 1412 1649 1554 1530
1625 7[1076 1076 1076 1076 1076 1076 1076 1076 1076 1076
1076 598 717 17[1255 27[{ enclmec ReEncodeFont }55 1912.83
/LMRoman12-Bold rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1629 x Fo(AN)718
b(1.3)f(-)h(1)f(\304nderungsma\377e)e(-)j(MC)g(-)f(BIFIE)p
0 TeXcolorgray -741 5102 a Fn(1.)p 0 TeXcolorgray 651
w(Die)538 b(nac)-36 b(hstehende)535 b(Abbildung)h(zeigt)i(den)e
(Graphen)g(der)g(F)-108 b(unktion)536 b Fm(f)679 b Fn(mit)537
b(der)g(Glei-)921 7094 y(c)-36 b(h)g(ung)432 b Fm(f)142
b Fl(\()p Fm(x)p Fl(\))369 b(=)g(0)p Fm(;)p Fl(1)p Fm(x)11362
6612 y Fk(2)11889 7094 y Fn(.)p 0 TeXcolorgray 0 TeXcolorgray
9135 33920 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.89334 a add def
/d 0.0 a add neg def /h 202.34677 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9135 33920 a 10686 32430 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 243.87755 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 188.88408 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 243.87755  0 -14.0158  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -14.0158
 243.87755  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-13.46269  def /maxTickline 188.88408  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 188.88408
0.0 -13.46269   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 243.87755
0.0 -14.0158 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 188.88408  0 -13.46269  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -13.46269
 188.88408  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-14.0158  def /maxTickline 243.87755  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 188.88408
0.0 -13.46269   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 243.87755
0.0 -14.0158 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9441 29565 a Fk(1)9441 26416 y(2)9441 23266 y(3)9441
20117 y(4)9441 16967 y(5)9441 13817 y(6)13601 33775 y(1)2679
b(2)h(3)f(4)h(5)g(6)f(7)h(8)10686 32430 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10686 32430
a 10686 32430 a
tx@Dict begin  { 243.87755 188.88408 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 10686 32430 a 10686 32430 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10686 32430
a 10343 32716 a Fn(x)10686 32430 y
tx@Dict begin  PutEnd  end
 10686 32430 a 10686
32430 a
tx@Dict begin  PutEnd  end
 10686 32430 a 10686 32430 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10686 32430 a 10686
32430 a
tx@Dict begin  { 0.0 0.0 pop 243.87755 188.88408 exch pop } PutCoor
PutBegin  end
 10686 32430 a 10686 32430 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10686 32430 a 9638
32762 a Fn(f\(x\))10686 32430 y
tx@Dict begin  PutEnd  end
 10686 32430 a 10686 32430
a
tx@Dict begin  PutEnd  end
 10686 32430 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.4926028799460468 def /x1 8.57131234392381
def /dx x1 x sub 199 div def /F@pstplot (0.1*x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
10686 32430 a
tx@Dict begin  { 216.10426 164.51195 } PutCoor PutBegin  end
 10686 32430 a 922 x Fm(f)10686 32430 y
tx@Dict begin  PutEnd  end

10686 32430 a 37683 33920 a
currentpoint initclip moveto
 37683 33920 a 921 37904 a
Fn(Kreuze)379 b(die)h(b)36 b(eiden)379 b(A)-36 b(ussagen)379
b(an,)h(die)g(f\374r)f(die)h(gegeb)36 b(ene)380 b(F)-108
b(unktion)378 b Fm(f)522 b Fn(zutre\033end)378 b(sind.)p
1062 38871 44260 45 v 1062 42204 45 3334 v 1770 40927
a(Die)391 b(absolute)g(\304nderung)d(in)j(den)e(In)-36
b(terv)-72 b(allen)390 b Fl([)8 b(0;)221 b(3])392 b Fn(und)d
Fl([)8 b(4;)221 b(5])392 b Fn(ist)e(gleic)-36 b(h)391
b(gro\377.)p 42912 42204 V 1 0 0 TeXcolorrgb 43621 40870
a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 42204 V 1062 42248 44260 45 v 1062 47573 45 5325
v 1770 44304 a Fn(Die)435 b(mittlere)e(\304nderungsrate)g(der)g(F)-108
b(unktion)433 b(f)h(in)f(den)g(In)-36 b(terv)-72 b(allen)434
b Fl([)8 b(0;)221 b(2])435 b Fn(und)1770 46296 y Fl([)8
b(2;)221 b(4])436 b Fn(ist)d(gleic)-36 b(h.)p 42912 47573
V 45277 47573 V 1062 47618 44260 45 v 1062 50877 45 3260
v 1770 49674 a(Die)435 b(momen)-36 b(tane)433 b(\304nderungsrate)f(an)i
(der)f(Stelle)g Fm(x)370 b Fl(=)e(5)434 b Fn(hat)f(den)g(W)-108
b(ert)433 b Fl(2)p Fm(;)p Fl(5)p Fn(.)p 42912 50877 V
45277 50877 V 1062 50921 44260 45 v 1062 56172 45 5252
v 1770 52977 a(Die)i(momen)-36 b(tane)433 b(\304nderungsrate)f(an)i
(der)f(Stelle)g Fm(x)370 b Fl(=)e(2)434 b Fn(ist)g(gr\366\377er)g(als)g
(die)1770 54969 y(momen)-36 b(tane)434 b(\304nderungsrate)e(an)h(der)g
(Stelle)h Fm(x)369 b Fl(=)g(6)p Fn(.)p 42912 56172 V
45277 56172 V 1062 56217 44260 45 v 1062 63086 45 6870
v 1770 58158 a(Die)925 b(Steigung)f(der)f(Sekan)-36 b(te)924
b(durc)-36 b(h)923 b(die)h(Punkte)f Fm(A)1204 b Fl(=)g(\(3)p
Fi(j)p Fm(f)142 b Fl(\(3\)\))924 b Fn(und)1770 60150
y Fm(B)437 b Fl(=)368 b(\(6)p Fi(j)p Fm(f)142 b Fl(\(6\)\))434
b Fn(ist)f(gr\366\377er)i(als)f(die)f(momen)-36 b(tane)433
b(\304nderungsrate)g(an)g(der)g(Stelle)1770 62141 y Fm(x)370
b Fl(=)e(3)p Fn(.)p 42912 63086 V 1 0 0 TeXcolorrgb 43621
59984 a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 63086 V 1062 63131 44260 45 v 47992
5102 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 7094 a Fg(AN)h(1.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
67159 54804 45 v 0 TeXcolorgray 24746 81281 a Fn(1)p
0 TeXcolorgray eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)718 b(1.3)f(-)h(2)f(F)-179
b(reier)716 b(F)-179 b(all)716 b(-)i(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fn(2.)p 0 TeXcolorgray 651
w(F)-27 b(\374r)333 b(einen)g(frei)h(fallenden)g(K)-36
b(\366rp)36 b(er)333 b(ist)h(eine)f(Zeit-W)-108 b(eg-F)g(unktion)332
b Fm(s)p Fl(\()p Fm(t)p Fl(\))h Fn(durc)-36 b(h)332 b
Fm(s)p Fl(\()p Fm(t)p Fl(\))368 b(=)43761 4230 y Ff(g)p
43761 4491 480 45 v 43766 5259 a Fk(2)44465 4800 y Fi(\001)91
b Fm(t)45395 4318 y Fk(2)921 6792 y Fn(gegeb)36 b(en.)434
b(Dab)36 b(ei)434 b(ist)g Fm(g)417 b Fi(\031)369 b Fl(10)221
b Fn(m/s)18032 6310 y Fk(2)18991 6792 y Fn(die)434 b(F)-108
b(allb)36 b(esc)-36 b(hleunigung.)921 11330 y(Berec)g(hne)433
b(die)g(mittlere)h(Gesc)-36 b(h)g(windigk)g(eit)434 b(in)f(m/s)h(im)g
(Zeitin)-36 b(terv)-72 b(all)434 b Fl([)8 b(2;)221 b(4])435
b Fn(Sekunden.)p 1 0 0 TeXcolorrgb 970 14221 a Fl(\026)-699
b Fm(v)416 b Fl(=)3480 13322 y Fm(s)p Fl(\(4\))295 b
Fi(\000)g Fm(s)p Fl(\(2\))p 3480 13911 6173 45 v 5104
15132 a(4)h Fi(\000)f Fl(2)10154 14221 y(=)11668 13322
y(80)h Fi(\000)f Fl(20)p 11668 13911 4225 45 v 13455
15132 a(2)16395 14221 y(=)368 b(30)434 b Fn(Die)h(mittlere)e(Gesc)-36
b(h)g(windigk)g(eit)434 b(b)36 b(etr\344gt)434 b(30)217
b(m/s.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 6792
a Fg(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 18718 54804 45 v -2331 24019 a Fo(AN)832
b(1.3)g(-)g(3)f(F)-179 b(reier)831 b(F)-179 b(all)830
b(-)i(Momen)-60 b(tangesc)g(h)g(windigk)g(eit)830 b(-)i(O)-60
b(A)832 b(-)-2331 27042 y(BIFIE)p 0 TeXcolorgray -741
30349 a Fn(3.)p 0 TeXcolorgray 651 w(F)-27 b(\374r)333
b(einen)g(frei)h(fallenden)g(K)-36 b(\366rp)36 b(er)333
b(ist)h(eine)f(Zeit-W)-108 b(eg-F)g(unktion)332 b Fm(s)p
Fl(\()p Fm(t)p Fl(\))h Fn(durc)-36 b(h)332 b Fm(s)p Fl(\()p
Fm(t)p Fl(\))368 b(=)43761 29778 y Ff(g)p 43761 30039
480 45 v 43766 30807 a Fk(2)44465 30349 y Fi(\001)91
b Fm(t)45395 29867 y Fk(2)921 32341 y Fn(gegeb)36 b(en.)434
b(Dab)36 b(ei)434 b(ist)g Fm(g)417 b Fi(\031)369 b Fl(10)221
b Fn(m/s)18032 31695 y Fk(2)18991 32341 y Fn(die)434
b(F)-108 b(allb)36 b(esc)-36 b(hleunigung.)921 36878
y(Berec)g(hne)433 b(die)g(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434
b(in)g(m/s)g(zum)f(Zeitpunkt)f Fm(t)369 b Fl(=)g(2)434
b Fn(Sekunden.)p 1 0 0 TeXcolorrgb 921 39424 a Fm(v)48
b Fl(\()p Fm(t)p Fl(\))368 b(=)g Fm(s)5441 38942 y Fe(0)5752
39424 y Fl(\()p Fm(t)p Fl(\))g(=)g(10)p Fm(t)921 41416
y(v)48 b Fl(\(2\))368 b(=)h(20)921 43407 y Fn(Die)434
b(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434 b(zum)f(Zeitpunkt)g
Fm(t)369 b Fl(=)f(2)434 b Fn(Sekunden)f(b)36 b(etr\344gt)433
b(20)217 b(m/s.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 30349 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 32341 a Fg(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 47215 54804 45 v 0 TeXcolorgray
24746 81281 a Fn(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)718 b(1.3)f(-)h(4)f
(Di\033erenzenquotien)-60 b(t)715 b(-)j(L)-179 b(T)716
b(-)i(BIFIE)p 0 TeXcolorgray -741 4800 a Fn(4.)p 0 TeXcolorgray
651 w(Die)460 b(nac)-36 b(hstehende)457 b(Abbildung)h(zeigt)i(den)e
(Graphen)f(einer)i(F)-108 b(unktion)459 b Fm(f)600 b
Fn(mit)459 b(einer)g(Se-)921 6792 y(kan)-36 b(te.)p 0
TeXcolorgray 0 TeXcolorgray 11332 25850 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 218.18863 a add def
/d 0.0 a add neg def /h 153.16055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11332 25850
a 13438 23583 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 188.45644  0 -19.01942  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -19.01942
 188.45644  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-20.4821  def /maxTickline 132.67845  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.67845
0.0 -20.4821   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.45644
0.0 -19.01942 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.67845  0 -20.4821  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -20.4821
 132.67845  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.01942  def /maxTickline 188.45644  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.67845
0.0 -20.4821   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.45644
0.0 -19.01942 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13438 23583 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 13438 23583 a
13438 23583 a
tx@Dict begin  { 188.45644 132.67845 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13438 23583
a 13095 23869 a Fn(x)13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438
23583 a
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13438 23583 a 13438
23583 a
tx@Dict begin  { 0.0 0.0 pop 188.45644 132.67845 exch pop } PutCoor
PutBegin  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 13438 23583 a 12390
23915 a Fn(f\(x\))13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583
a
tx@Dict begin  PutEnd  end
 13438 23583 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 14.22636 43.29387 14.22636 43.29387
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 15.09772 42.60269 14.22636 43.29387
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 15.96863 41.92845 15.09772 42.60269
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 16.83998 41.2707 15.96863 41.92845
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 17.71089 40.62903 16.83998 41.2707
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 18.58223 40.00429 17.71089 40.62903
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 19.45358 39.3956 18.58223 40.00429
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 20.3245 38.8034 19.45358 39.3956  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 21.19585 38.22815 20.3245 38.8034 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.06676 37.66896 21.19585 38.22815
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.93811 37.12627 22.06676 37.66896
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 23.80902 36.60008 22.93811 37.12627
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 24.68037 36.09038 23.80902 36.60008
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 25.55128 35.59718 24.68037 36.09038
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 26.42262 35.12004 25.55128 35.59718
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 27.29398 34.65984 26.42262 35.12004
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.16489 34.21614 27.29398 34.65984
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 29.03624 33.7885 28.16489 34.21614
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 29.90715 33.37778 29.03624 33.7885
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 30.7785 32.98314 29.90715 33.37778
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 31.64941 32.60542 30.7785 32.98314
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 32.52077 32.24377 31.64941 32.60542
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 33.39168 31.89862 32.52077 32.24377
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 34.26303 31.56996 33.39168 31.89862
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 35.13394 31.25781 34.26303 31.56996
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.00528 30.96214 35.13394 31.25781
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.87663 30.68298 36.00528 30.96214
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 37.74754 30.42032 36.87663 30.68298
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 38.6189 30.17372 37.74754 30.42032
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 39.4898 29.94406 38.6189 30.17372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 40.36116 29.73045 39.4898 29.94406
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 41.23207 29.53378 40.36116 29.73045
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.10342 29.35316 41.23207 29.53378
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.97433 29.1895 42.10342 29.35316
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.84569 29.04189 42.97433 29.1895
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 44.71703 28.91077 43.84569 29.04189
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 45.58794 28.79616 44.71703 28.91077
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 46.45929 28.69803 45.58794 28.79616
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 47.3302 28.61641 46.45929 28.69803
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 48.20155 28.55128 47.3302 28.61641
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 49.07246 28.50267 48.20155 28.55128
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 49.94382 28.47011 49.07246 28.50267
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 50.81473 28.45447 49.94382 28.47011
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 51.68608 28.45534 50.81473 28.45447
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 52.55699 28.47227 51.68608 28.45534
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 53.42833 28.5057 52.55699 28.47227
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 54.29968 28.55606 53.42833 28.5057
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 55.1706 28.6225 54.29968 28.55606 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.04195 28.70541 55.1706 28.6225 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.91286 28.80484 56.04195 28.70541
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 57.78421 28.92076 56.91286 28.80484
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 58.65512 29.05318 57.78421 28.92076
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 59.52647 29.20209 58.65512 29.05318
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 60.39738 29.3675 59.52647 29.20209
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 61.26874 29.54898 60.39738 29.3675
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 62.14008 29.74739 61.26874 29.54898
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 63.01099 29.9623 62.14008 29.74739
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 63.88234 30.19327 63.01099 29.9623
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 64.75325 30.44116 63.88234 30.19327
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 65.6246 30.70512 64.75325 30.44116
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 66.49551 30.9856 65.6246 30.70512 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 67.36687 31.28255 66.49551 30.9856
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 68.23778 31.59601 67.36687 31.28255
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 69.10913 31.92596 68.23778 31.59601
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 69.98004 32.27243 69.10913 31.92596
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 70.8514 32.63538 69.98004 32.27243
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.72273 33.01483 70.8514 32.63538
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.59364 33.41078 71.72273 33.01483
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 73.465 33.82278 72.59364 33.41078 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 74.3359 34.25174 73.465 33.82278  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 75.20726 34.69675 74.3359 34.25174
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 76.07817 35.15869 75.20726 34.69675
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 76.94952 35.63669 76.07817 35.15869
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 77.82043 36.1312 76.94952 35.63669
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 78.69179 36.6422 77.82043 36.1312 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 79.5627 37.1697 78.69179 36.6422  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 80.43404 37.71368 79.5627 37.1697 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 81.30539 38.27417 80.43404 37.71368
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 82.1763 38.85117 81.30539 38.27417
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 83.04765 39.44466 82.1763 38.85117
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 83.91856 40.05464 83.04765 39.44466
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 84.78992 40.6807 83.91856 40.05464
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.66083 41.32368 84.78992 40.6807
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 86.53218 41.98273 85.66083 41.32368
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 87.40309 42.6587 86.53218 41.98273
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 88.27444 43.35074 87.40309 42.6587
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 89.14578 44.05928 88.27444 43.35074
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 90.0167 44.78476 89.14578 44.05928
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 90.88805 45.52629 90.0167 44.78476
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 91.75896 46.28433 90.88805 45.52629
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 92.63031 47.05885 91.75896 46.28433
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 93.50122 47.84946 92.63031 47.05885
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 94.37257 48.65698 93.50122 47.84946
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 95.24348 49.481 94.37257 48.65698 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.11484 50.32153 95.24348 49.481 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.98575 51.17812 96.11484 50.32153
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 97.8571 52.05164 96.98575 51.17812
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 98.72844 52.94121 97.8571 52.05164
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.59935 53.84729 98.72844 52.94121
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 100.4707 54.77031 99.59935 53.84729
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 101.34161 55.70938 100.4707 54.77031
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 102.21297 56.66496 101.34161 55.70938
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 103.08388 57.63702 102.21297 56.66496
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 103.95523 58.6256 103.08388 57.63702
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 104.82614 59.63066 103.95523 58.6256
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 105.6975 60.6518 104.82614 59.63066
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.56883 61.68987 105.6975 60.6518
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 107.43974 62.74442 106.56883 61.68987
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 108.3111 63.81505 107.43974 62.74442
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 109.182 64.9026 108.3111 63.81505 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 110.05336 66.00623 109.182 64.9026
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 110.92427 67.12634 110.05336 66.00623
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 111.79562 68.2634 110.92427 67.12634
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 112.66653 69.4165 111.79562 68.2634
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.53789 70.58612 112.66653 69.4165
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 114.4088 71.77223 113.53789 70.58612
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 115.28015 72.97484 114.4088 71.77223
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 116.15149 74.19394 115.28015 72.97484
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.0224 75.42955 116.15149 74.19394
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.89375 76.68121 117.0224 75.42955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 118.76466 77.94981 117.89375 76.68121
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 119.63602 79.23448 118.76466 77.94981
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 120.50693 80.53607 119.63602 79.23448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 121.37828 81.85373 120.50693 80.53607
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 122.24919 83.18832 121.37828 81.85373
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 123.12054 84.53897 122.24919 83.18832
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 123.99146 85.90613 123.12054 84.53897
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 124.86281 87.28978 123.99146 85.90613
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 125.73415 88.68993 124.86281 87.28978
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 126.60506 90.10657 125.73415 88.68993
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 127.47641 91.53972 126.60506 90.10657
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 128.34732 92.98935 127.47641 91.53972
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 129.21867 94.45549 128.34732 92.98935
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 130.08958 95.9377 129.21867 94.45549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 130.96094 97.43683 130.08958 95.9377
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 131.83185 98.95203 130.96094 97.43683
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 132.7032 100.48416 131.83185 98.95203
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.57454 102.03236 132.7032 100.48416
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 134.44545 103.59705 133.57454 102.03236
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 135.3168 105.17824 134.44545 103.59705
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 136.18771 106.77592 135.3168 105.17824
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.05907 108.39012 136.18771 106.77592
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.92998 110.0208 137.05907 108.39012
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 138.80133 111.66798 137.92998 110.0208
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 139.67224 113.33167 138.80133 111.66798
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 140.5436 115.01184 139.67224 113.33167
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 141.4145 116.70808 140.5436 115.01184
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.28586 118.42125 141.4145 116.70808
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 143.1572 120.15048 142.28586 118.42125
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.0281 121.89665 143.1572 120.15048
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.89946 123.65889 144.0281 121.89665
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 145.77037 125.43762 144.89946 123.65889
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 146.64172 127.23329 145.77037 125.43762
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 147.51263 129.04501 146.64172 127.23329
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 148.38399 130.87323 147.51263 129.04501
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 149.2549 132.71796 148.38399 130.87323
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.12625 134.57874 149.2549 132.71796
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.99759 136.45647 150.12625 134.57874
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 151.86852 138.35068 150.99759 136.45647
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 152.73985 140.26138 151.86852 138.35068
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 153.61076 142.18817 152.73985 140.26138
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 154.48212 144.13188 153.61076 142.18817
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 155.35303 146.09164 154.48212 144.13188
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.22438 148.06792 155.35303 146.09164
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 157.09529 150.06113 156.22438 148.06792
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 157.96664 152.07039 157.09529 150.06113
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 158.83755 154.09616 157.96664 152.07039
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 159.70891 156.13841 158.83755 154.09616
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.58025 158.19717 159.70891 156.13841
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.45117 160.27243 160.58025 158.19717
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.32251 162.3642 161.45117 160.27243
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 163.19342 164.47202 162.32251 162.3642
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.06477 166.59676 163.19342 164.47202
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.93568 168.73758 164.06477 166.59676
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 165.80704 170.89532 164.93568 168.73758
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 166.67795 173.06914 165.80704 170.89532
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 167.5493 175.25987 166.67795 173.06914
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 168.42021 177.46669 167.5493 175.25987
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 169.29156 179.68999 168.42021 177.46669
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.1629 181.9298 169.29156 179.68999
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 171.03381 184.1861 170.1629 181.9298
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 171.90517 186.4589 171.03381 184.1861
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 172.77608 188.74818 171.90517 186.4589
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 173.64743 191.05399 172.77608 188.74818
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 174.51834 193.37584 173.64743 191.05399
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 175.3897 195.71463 174.51834 193.37584
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 176.2606 198.06992 175.3897 195.71463
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 177.13196 200.44127 176.2606 198.06992
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 178.0033 202.82956 177.13196 200.44127
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 178.87422 205.2339 178.0033 202.82956
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 179.74556 207.65474 178.87422 205.2339
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 180.61647 210.09209 179.74556 207.65474
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 181.48782 212.54593 180.61647 210.09209
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.35873 215.01627 181.48782 212.54593
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 183.23009 217.5031 182.35873 215.01627
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 184.101 220.00644 183.23009 217.5031
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 184.97235 222.52628 184.101 220.00644
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 185.84326 225.0626 184.97235 222.52628
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 186.71461 227.61499 185.84326 225.0626
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 187.58595 230.18433 186.71461 227.61499
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 188.45688 232.76971 187.58595 230.18433
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.66845823698629 def /x1 6.623496527724776
def /dx x1 x sub 49 div def /F@pstplot ((--1.8271604938271606--2.962962962962963*x)/4.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 0.0 28.45274 34.07286   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 142.26372 118.3774  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13438 23583 a
tx@Dict begin  { 31.29819 19.91682 } PutCoor PutBegin  end
 13438 23583 a
996 x Fm(f)142 b Fl(\()p Fm(x)15466 24778 y Fk(0)15991
24579 y Fl(\))13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583
a
tx@Dict begin  { 143.4381 71.13185 } PutCoor PutBegin  end
 13438 23583 a 996 x Fm(f)g Fl(\()p Fm(x)15466 24778
y Fk(0)16287 24579 y Fl(+)294 b Fm(h)p Fl(\))13438 23583
y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 82.51277 39.83366 } PutCoor PutBegin  end
 13438 23583 a 922 x Fm(f)13438
23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 22.57341 -4.26773 } PutCoor PutBegin  end
 13438 23583 a 571
x Fm(x)14177 24353 y Fk(0)13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a
13438 23583 a
tx@Dict begin  { 129.73705 -2.84544 } PutCoor PutBegin  end
 13438 23583 a 922 x Fm(x)14177 24704 y
Fk(0)14998 24505 y Fl(+)h Fm(h)13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583
a 13438 23583 a
tx@Dict begin  { 85.35823 -3.69899 } PutCoor PutBegin  end
 13438 23583 a 922 x Fm(h)13438 23583
y
tx@Dict begin  PutEnd  end
 13438 23583 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 28.45274 34.07286
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 142.26372 118.3774
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 28.45274 0.0 
 false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 142.26372 0.0
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
35485 25850 a
currentpoint initclip moveto
 35485 25850 a 921 29834 a Fn(Erg\344nze)358
b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f
(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360
b(ric)-36 b(h)g(tigen)921 31826 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 35316 y(Der)434
b(A)-36 b(usdruc)g(k)p 9436 35316 3150 45 v 13058 35268
a(1)12586 35316 y Fd(\015)p 14180 35316 V 3583 w Fn(b)36
b(esc)-36 b(hriebt)432 b(die)p 26297 35316 V 29918 35268
a(2)29446 35316 y Fd(\015)p 31040 35316 V 3584 w Fn(.)p
0 TeXcolorgray 0 TeXcolorgray 7111 36689 14049 45 v 7111
39773 45 3085 v 13810 38470 a(1)13338 38518 y Fd(\015)p
21115 39773 V 7111 39817 14049 45 v 7111 44513 45 4696
v 7952 41758 a Fm(f)142 b Fl(\()p Fm(x)p Fl(\))295 b
Fi(\000)g Fm(f)142 b Fl(\()p Fm(x)14137 41957 y Fk(0)14663
41758 y Fl(\))p 7952 42347 7217 45 v 11186 43568 a Fm(h)p
18750 44513 45 4696 v 19459 42497 a Fj(2)p 21115 44513
V 7111 44557 14049 45 v 7111 49253 45 4696 v 7952 46499
a Fm(f)g Fl(\()p Fm(x)295 b Fl(+)g Fm(h)p Fl(\))g Fi(\000)g
Fm(f)142 b Fl(\()p Fm(x)16488 46698 y Fk(0)17014 46499
y Fl(\))p 7952 47087 9568 45 v 12362 48308 a Fm(h)p 18750
49253 45 4696 v 1 0 0 TeXcolorrgb 19459 47237 a Fj(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
49253 V 7111 49298 14049 45 v 7111 54193 45 4896 v 7952
51239 a Fm(f)g Fl(\()p Fm(x)295 b Fl(+)g Fm(h)p Fl(\))g
Fi(\000)g Fm(f)142 b Fl(\()p Fm(x)16488 51438 y Fk(0)17014
51239 y Fl(\))p 7952 51827 9568 45 v 12104 53049 a Fm(x)12843
53248 y Fk(0)p 18750 54193 45 4896 v 19459 52077 a Fj(2)p
21115 54193 V 7111 54237 14049 45 v 0 TeXcolorgray 0
TeXcolorgray 25658 36800 19769 45 v 25658 39884 45 3085
v 35217 38581 a Fn(2)34745 38629 y Fd(\015)p 45382 39884
V 25658 39928 19769 45 v 25658 44990 45 5063 v 26366
41795 a Fn(die)434 b(Steigung)f(v)-36 b(on)434 b Fm(f)575
b Fn(an)434 b(der)26366 43787 y(Stelle)g Fm(x)p 43017
44990 V 43725 42791 a Fj(2)p 45382 44990 V 25658 45035
19769 45 v 25658 50090 45 5056 v 26366 46895 a Fn(die)g(1.)g(Ableitung)
f(der)g(F)-108 b(unkti-)26366 48887 y(on)434 b Fm(f)p
43017 50090 V 43725 47894 a Fj(2)p 45382 50090 V 25658
50134 19769 45 v 25658 55459 45 5325 v 26366 52190 a
Fn(die)g(mittlere)f(\304nderungsrate)26366 54182 y(im)h(In)-36
b(terv)-72 b(all)434 b Fl([)8 b Fm(x)34519 54381 y Fk(0)35045
54182 y Fl(;)221 b Fm(x)36366 54381 y Fk(0)37188 54182
y Fl(+)294 b Fm(h)p Fl(])p 43017 55459 V 1 0 0 TeXcolorrgb
43725 53129 a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45382 55459 V 25658 55503 19769 45 v 47992
4800 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fg(AN)369
b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 59531 54804 45 v 0 TeXcolorgray 24746 81281 a Fn(3)p
0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)718 b(1.3)f(-)h(5)f
(Di\033erenzenquotien)-60 b(t)715 b(-)j(O)-60 b(A)717
b(-)h(BIFIE)p 0 TeXcolorgray -741 4800 a Fn(5.)p 0 TeXcolorgray
651 w(Eine)416 b(F)-108 b(unktion)415 b Fm(s)369 b Fl(:)g([)8
b(0;)221 b(6])371 b Fi(!)e Fc(R)417 b Fn(b)36 b(esc)-36
b(hreibt)415 b(den)h(v)-36 b(on)416 b(einem)g(Radfahrer)h(innerhalb)e
(v)-36 b(on)921 6792 y Fm(t)433 b Fn(Sekunden)f(zur\374c)-36
b(kgelegten)434 b(W)-108 b(eg.)921 11330 y(Es)434 b(gilt:)g
Fm(s)p Fl(\()p Fm(t)p Fl(\))368 b(=)9403 10807 y Fk(1)p
9403 11020 471 45 v 9403 11788 a(2)10006 11330 y Fm(t)10476
10848 y Fk(2)11297 11330 y Fl(+)294 b(2)p Fm(t)p Fn(.)921
13875 y(Der)465 b(zur\374c)-36 b(kgelegte)465 b(W)-108
b(eg)465 b(wird)g(dab)36 b(ei)465 b(in)g(Metern)e(angegeb)36
b(en,)466 b(die)e(Zeit)h(wird)g(ab)g(dem)921 15867 y(Zeitpunkt)433
b Fm(t)7425 16066 y Fk(0)8319 15867 y Fl(=)369 b(0)434
b Fn(in)f(Sekunden)f(gemessen.)921 20404 y(Ermittle)419
b(den)g(Di\033erenzenquotien)-36 b(ten)418 b(der)h(F)-108
b(unktion)419 b Fm(s)g Fn(im)g(In)-36 b(terv)-72 b(all)420
b Fl([)8 b(0;)221 b(6])421 b Fn(und)d(deute)921 22396
y(das)434 b(Ergebnis.)p 1 0 0 TeXcolorrgb 1054 24315
a Fm(s)p Fl(\(6\))295 b Fi(\000)g Fm(s)p Fl(\(0\))p 1054
24904 6173 45 v 2678 26125 a(6)h Fi(\000)f Fl(0)7728
25214 y(=)9242 24315 y(30)h Fi(\000)f Fl(0)p 9242 24904
3575 45 v 10704 26125 a(6)13318 25214 y(=)369 b(5)921
27896 y Fn(Das)451 b(Ergebnis)f(b)36 b(edeutet,)449 b(dass)i(die)f
(mittlere)g(Gesc)-36 b(h)g(windigk)g(eit)451 b(\(auc)-36
b(h)449 b(Durc)-36 b(hsc)g(hnitts-)921 29888 y(gesc)g(h)g(windigk)g
(eit\))434 b(des)g(Radfahrers)f(im)h(Zeitin)-36 b(terv)-72
b(all)434 b Fl([)8 b(0;)221 b(6])436 b Fn(5)217 b(m/s)434
b(b)36 b(etr\344gt.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fg(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 33695 54804 45 v 0 TeXcolorgray
24746 81281 a Fn(4)p 0 TeXcolorgray eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)718 b(1.3)f(-)h(6)f(F)-179
b(reier)716 b(F)-179 b(all)716 b(eines)h(K)-60 b(\366rp)60
b(ers)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -741
4800 a Fn(6.)p 0 TeXcolorgray 651 w(Die)512 b(F)-108
b(unktion)511 b Fm(s)g Fn(mit)h Fm(s)p Fl(\()p Fm(t)p
Fl(\))501 b(=)16818 4230 y Ff(g)p 16818 4491 480 45 v
16823 5259 a Fk(2)17779 4800 y Fi(\001)348 b Fm(t)18966
4318 y Fk(2)20003 4800 y Fl(\()p Fm(g)550 b Fi(\031)502
b Fl(10)221 b Fn(m/s)26986 4155 y Fk(2)27512 4800 y Fl(\))511
b Fn(b)36 b(esc)-36 b(hreibt)511 b(ann\344hernd)f(den)h(v)-36
b(on)921 6792 y(einem)388 b(K)-36 b(\366rp)36 b(er)388
b(in)g(der)f(Zeit)h Fm(t)g Fn(\(in)g(Sekunden\))e(im)i(freien)h(F)-108
b(all)388 b(zur\374c)-36 b(kgelegten)388 b(W)-108 b(eg)389
b Fm(s)p Fl(\()p Fm(t)p Fl(\))769 8784 y Fn(\(in)433
b(m\).)921 13322 y(Kreuze)g(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 1062 14362 44260 45 v 1062
19476 45 5114 v 1770 16281 a(Die)i(erste)e(Ableitung)g
Fm(s)13897 15799 y Fe(0)14641 16281 y Fn(der)g(F)-108
b(unktion)433 b Fm(s)g Fn(an)h(der)f(Stelle)g Fm(t)31530
16480 y Fk(1)32489 16281 y Fn(b)36 b(esc)-36 b(hreibt)433
b(die)1770 18273 y(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434
b(des)g(K)-36 b(\366rp)36 b(ers)433 b(zum)g(Zeitpunkt)g
Fm(t)33586 18472 y Fk(1)34111 18273 y Fn(.)p 42912 19476
V 1 0 0 TeXcolorrgb 43621 17251 a Fj(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 19476 V 1062 19520
44260 45 v 1062 24634 45 5114 v 1770 21439 a Fn(Die)i(zw)-36
b(eite)434 b(Ableitung)f Fm(s)14721 20957 y Fe(00)15720
21439 y Fn(der)g(F)-108 b(unktion)433 b Fm(s)g Fn(an)h(der)f(Stelle)g
Fm(t)32609 21638 y Fk(1)33568 21439 y Fn(b)36 b(esc)-36
b(hreibt)433 b(die)1770 23431 y(momen)-36 b(tane)434
b(\304nderungsrate)e(der)h(Gesc)-36 b(h)g(windigk)g(eit)434
b(zum)f(Zeitpunkt)f Fm(t)38718 23630 y Fk(1)39244 23431
y Fn(.)p 42912 24634 V 1 0 0 TeXcolorrgb 43621 22409
a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 24634 V 1062 24679 44260 45 v 1062 29815 45 5137
v 1770 26620 a Fn(Der)i(Di\033erenzenquotien)-36 b(t)433
b(der)g(F)-108 b(unktion)433 b Fm(s)g Fn(im)h(In)-36
b(terv)-72 b(all)434 b Fl([)8 b Fm(t)32504 26819 y Fk(1)33030
26620 y Fl(;)221 b Fm(t)34082 26819 y Fk(2)34608 26620
y Fl(])434 b Fn(gibt)g(den)e(in)1770 28612 y(diesem)i(In)-36
b(terv)-72 b(all)434 b(zur\374c)-36 b(kgelegten)434 b(W)-108
b(eg)434 b(an.)p 42912 29815 V 45277 29815 V 1062 29859
44260 45 v 1062 36906 45 7047 v 1770 31719 a(Der)342
b(Di\033erenzialquotien)-36 b(t)342 b(der)f(F)-108 b(unktion)340
b Fm(s)h Fn(an)h(einer)f(Stelle)g Fm(t)g Fn(gibt)g(den)g(Wink)-36
b(el)1770 33711 y(an,)527 b(den)e(die)h(T)-108 b(angen)-36
b(te)525 b(an)h(den)f(Graphen)f(im)j(Punkt)e Fm(P)707
b Fl(=)526 b(\()p Fm(t)p Fi(j)p Fm(s)p Fl(\()p Fm(t)p
Fl(\)\))e Fn(mit)i(der)1770 35703 y(p)36 b(ositiv)-36
b(en)435 b Fm(x)p Fn(-A)-36 b(c)g(hse)432 b(einsc)-36
b(hlie\377t)p 42912 36906 V 45277 36906 V 1062 36950
44260 45 v 1062 42160 45 5211 v 1770 38892 a(Der)322
b(Di\033erenzenquotien)-36 b(t)320 b(der)h(F)-108 b(unktion)320
b Fm(s)23737 38410 y Fe(0)24369 38892 y Fn(im)h(In)-36
b(terv)-72 b(all)321 b Fl([)8 b Fm(t)32027 39091 y Fk(1)32553
38892 y Fl(;)221 b Fm(t)33605 39091 y Fk(2)34131 38892
y Fl(])321 b Fn(gibt)h(die)f(mitt-)1770 40883 y(lere)434
b(\304nderung)f(der)g(Gesc)-36 b(h)g(windigk)g(eit)433
b(pro)h(Sekunde)e(im)i(In)-36 b(terv)-72 b(all)434 b
Fl([)8 b Fm(t)37490 41082 y Fk(1)38016 40883 y Fl(;)221
b Fm(t)39068 41082 y Fk(2)39594 40883 y Fl(])434 b Fn(an.)p
42912 42160 V 1 0 0 TeXcolorrgb 43621 39888 a Fj(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
42160 V 1062 42205 44260 45 v 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fg(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46233
54804 45 v 0 TeXcolorgray 24746 81281 a Fn(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)718 b(1.3)f(-)h(7)f(T)-179
b(emp)60 b(eraturv)-60 b(erlauf)714 b(-)k(MC)f(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fn(7.)p 0 TeXcolorgray 651
w(A)-36 b(us)383 b(dem)h(nac)-36 b(hstehend)382 b(dargestellten)j
(Graphen)d(der)i(F)-108 b(unktion)383 b(T)h(l\344sst)h(sic)-36
b(h)384 b(der)f(T)-108 b(em-)921 6792 y(p)36 b(eraturv)-36
b(erlauf)461 b(in)11020 6310 y Fe(\016)11545 6792 y Fn(C)h(in)e(einem)h
(Reagenzglas)i(w)-36 b(\344hrend)460 b(eines)h(c)-36
b(hemisc)g(hen)460 b(V)-108 b(ersuc)-36 b(hs)921 8784
y(f\374r)433 b(die)h(ersten)f(7)h(Min)-36 b(uten)432
b(ablesen.)p 0 TeXcolorgray 0 TeXcolorgray 5418 34832
a
 currentpoint currentpoint translate 1.28426 1.28426 scale neg exch
neg exch translate
 5418 34832 a 5418 34832 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 253.10463 a add def
/d 0.0 a add neg def /h 168.43092 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 34832 a 7085 33334 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 238.04208 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22722
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 18 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 154.90265 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22636
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 238.04208  0 -15.06255  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -15.06255
 238.04208  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-13.52827  def /maxTickline 154.90265  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 154.90265
0.0 -13.52827   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.04208
0.0 -15.06255 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 154.90265  0 -13.52827  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -13.52827
 154.90265  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-15.06255  def /maxTickline 238.04208  def /dT 1864790 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 2.84544  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 154.90265
0.0 -13.52827   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.04208
0.0 -15.06255 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5369 30470 a Fk(10)5369 27320
y(20)5369 24170 y(30)5369 21021 y(40)5369 17871 y(50)9999
34680 y(1)2680 b(2)g(3)f(4)h(5)f(6)h(7)g(8)7085 33334
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 238.04208 154.90265 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 5.0 50.91719 9.0 3.0 140.  Uput UUput } PutCoor PutBegin
 end

7085 33334 a 4267 33667 a Fn(t)433 b(\(in)h(min\))7085
33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334 a
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 0.0 0.0 pop 238.04208 154.90265 exch pop } PutCoor
PutBegin  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 5.0 100.70805 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end

7085 33334 a 1511 33667 a Fn(T)-108 b(emp)36 b(eratur)433
b(\(in)10688 33184 y Fe(\016)11214 33667 y Fn(C\))7085
33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334 a
tx@Dict begin  PutEnd  end
 7085 33334 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7 def /dx x1 x sub 199
div def /F@pstplot (-0.008980203035689095*x^(5.0)+0.13719708284602655*x^(4.0)+0.3561102134564625*x^(3.0)-7.997836965184824*x^(2.0)+16.530060508880833*x+23.84460102384072)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 7085 33334 a
tx@Dict begin  { 86.65244 75.41841 } PutCoor PutBegin  end
 7085 33334 a 908
x Fm(T)7085 33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 33435 34832 a
currentpoint initclip moveto
 33435
34832 a 5418 34832 a
 currentpoint currentpoint translate 1 1.28426 div 1 1.28426 div scale
neg exch neg exch translate
 5418 34832 a 921 40808 a Fn(Kreuze)g(die)h(auf)g
(den)f(T)-108 b(emp)36 b(eraturv)-36 b(erlauf)433 b(zutre\033ende\(n\))
e(A)-36 b(ussage\(n\))434 b(an.)p 1062 41849 44260 45
v 1062 45182 45 3334 v 1770 43905 a(Im)g(In)-36 b(terv)-72
b(all)434 b Fl([)8 b(3;)221 b(6])436 b Fn(ist)d(die)h(mittlere)f
(\304nderungsrate)g(ann\344hernd)f(0)36878 43423 y Fe(\016)37404
43905 y Fn(C/min.)p 42912 45182 V 1 0 0 TeXcolorrgb 43621
43847 a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 45182 V 1062 45226 44260 45 v 1062
48444 45 3219 v 1770 47167 a Fn(Im)i(In)-36 b(terv)-72
b(all)434 b Fl([)8 b(0)p Fm(;)p Fl(5;)221 b(1)p Fm(;)p
Fl(5])437 b Fn(ist)d(der)f(Di\033erenzenquotien)-36 b(t)433
b(gr\366\377er)h(als)g(25)37004 46685 y Fe(\016)37530
47167 y Fn(C/min.)p 42912 48444 V 45277 48444 V 1062
48489 44260 45 v 1062 53813 45 5325 v 1770 50545 a(Im)384
b(In)-36 b(terv)-72 b(all)385 b Fl([)8 b(0;)221 b(2])385
b Fn(gibt)f(es)g(einen)f(Zeitpunkt,)g(in)h(dem)f(die)h(momen)-36
b(tane)383 b(\304nde-)1770 52537 y(rungsrate)433 b(0)8425
52054 y Fe(\016)8951 52537 y Fn(C/min)i(b)36 b(etr\344gt.)p
42912 53813 V 1 0 0 TeXcolorrgb 43621 51483 a Fj(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
53813 V 1062 53858 44260 45 v 1062 57076 45 3219 v 1770
55799 a Fn(Der)347 b(Di\033erenzialquotien)-36 b(t)348
b(zum)e(Zeitpunkt)g Fm(t)369 b Fl(=)f(3)347 b Fn(ist)g(ann\344hernd)e
(-10)37603 55317 y Fe(\016)38129 55799 y Fn(C/min.)p
42912 57076 V 1 0 0 TeXcolorrgb 1374 w Fj(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 57076 V 1062 57120
44260 45 v 1062 62330 45 5211 v 1770 59061 a Fn(Der)302
b(Di\033erenzenquotien)-36 b(t)300 b(ist)h(im)g(In)-36
b(terv)-72 b(all)302 b Fl([)8 b(2;)221 b Fm(t)p Fl(])302
b Fn(mit)f Fl(2)369 b Fm(<)g(t)g(<)f Fl(6)301 b Fn(immer)g(kleiner)1770
61053 y(als)435 b(0)4596 60571 y Fe(\016)5122 61053 y
Fn(C/min.)p 42912 62330 V 1 0 0 TeXcolorrgb 43621 60057
a Fj(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 62330 V 1062 62374 44260 45 v 47992 4800 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fg(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66403
54804 45 v 0 TeXcolorgray 24746 81281 a Fn(6)p 0 TeXcolorgray
eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fo(AN)665 b(1.3)f(-)g(8)g(Abgesc)-60
b(hossener)662 b(K)-60 b(\366rp)60 b(er)664 b(-)g(O)-60
b(A)664 b(-)h(BIFIE)g(-)f(K)-60 b(omp)60 b(e-)-2331 4515
y(tenzc)-60 b(hec)g(k)718 b(2016)p 0 TeXcolorgray -741
7823 a Fn(8.)p 0 TeXcolorgray 651 w(Die)547 b(F)-108
b(unktion)546 b Fm(h)p Fn(,)h(deren)e(Graph)h(in)g(der)g(nac)-36
b(hstehenden)545 b(Abbildung)h(dargestellt)h(ist,)921
9815 y(b)36 b(esc)-36 b(hreibt)326 b(n\344herungsw)-36
b(eise)327 b(die)g(H\366he)h Fm(h)p Fl(\()p Fm(t)p Fl(\))e
Fn(eines)h(senkrec)-36 b(h)g(t)327 b(nac)-36 b(h)327
b(ob)36 b(en)327 b(gesc)-36 b(hossenen)921 11806 y(K)g(\366rp)36
b(ers)433 b(in)h(Abh\344ngigk)-36 b(eit)434 b(v)-36 b(on)434
b(der)f(Zeit)h Fm(t)f Fn(\()p Fm(t)g Fn(in)g(Sekunden,)g
Fm(h)p Fl(\()p Fm(t)p Fl(\))g Fn(in)g(Metern\).)921 38836
y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 340.20338 a add def
/d 0.0 a add neg def /h 220.17924 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 38836 a 3550 35911 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 316.45688 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45428
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 193.762 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 316.45688  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 316.45688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 193.762  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.762
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 316.45688
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 193.762  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 193.762  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 316.45688  def /dT 1864780 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.762
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 316.45688
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2305 36197 a Fk(0)1834
33047 y(20)1834 29897 y(40)1834 26747 y(60)1834 23598
y(80)1363 20448 y(100)1363 17298 y(120)3315 37257 y(0)2679
b(1)h(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)3550 35911
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 316.45688 193.762 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 5.0 26.82921 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end

3550 35911 a 2065 36330 a Fn(t)433 b(in)g(s)3550 35911
y
tx@Dict begin  PutEnd  end
 3550 35911 a 3550 35911 a
tx@Dict begin  PutEnd  end
 3550 35911 a 3550 35911 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

3550 35911 a 3550 35911 a
tx@Dict begin  { 0.0 0.0 pop 316.45688 193.762 exch pop } PutCoor PutBegin
 end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 5.0 47.6532 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 3550
35911 a 912 36243 a Fn(h\(t\))g(in)g(m)3550 35911 y
tx@Dict begin  PutEnd  end
 3550
35911 a 3550 35911 a
tx@Dict begin  PutEnd  end
 3550 35911 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10 def /dx x1 x sub 199
div def /F@pstplot (-5.0*x^(2.0)+50.0*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271
mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 38580 38836 a
currentpoint initclip moveto
 38580 38836 a 921 43373 a
Fn(Bestimme)634 b(anhand)f(des)g(Graphen)f(die)i(mittlere)g(Gesc)-36
b(h)g(windigk)g(eit)633 b(des)h(K)-36 b(\366rp)36 b(ers)633
b(in)921 45365 y(Metern)433 b(pro)g(Sekunde)g(im)g(Zeitin)-36
b(terv)-72 b(all)435 b Fl([)8 b(2)p Fm(s)p Fl(;)221 b(4)p
Fm(s)p Fl(])q Fn(.)p 1 0 0 TeXcolorrgb 921 49902 a(Die)604
b(mittlere)f(Gesc)-36 b(h)g(windigk)g(eit)603 b(des)g(K)-36
b(\366rp)36 b(ers)603 b(im)g(Zeitin)-36 b(terv)-72 b(all)604
b Fl([)8 b(2)p Fm(s)p Fl(;)221 b(4)p Fm(s)p Fl(])604
b Fn(b)36 b(etr\344gt)603 b(ca.)888 51894 y Fl(20)p Fm(m=s)p
Fn(.)921 56431 y(Ein)430 b(Punkt)h(f\374r)f(die)h(ric)-36
b(h)g(tige)430 b(L\366sung,)h(w)-36 b(ob)36 b(ei)431
b(die)g(Einheit)f(nic)-36 b(h)g(t)430 b(angef\374hrt)g(sein)h(m)-36
b(uss.)874 58423 y(T)-108 b(oleranzin)-36 b(terv)-72
b(all:)435 b Fl([)8 b(19)p Fm(m=s)p Fl(;)221 b(21)p Fm(m=s)p
Fl(])p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 9815
a Fg(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 62231 54804 45 v 0 TeXcolorgray
24746 81281 a Fn(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fo(AN)679 b(1.3)f(-)h(9)f(Mittlere)g
(\304nderungsrate)e(der)i(T)-179 b(emp)60 b(eratur)676
b(-)j(O)-60 b(A)679 b(-)-2331 4817 y(Matura)717 b(2014/15)g(-)h
(Haupttermin)p 0 TeXcolorgray -741 8124 a Fn(9.)p 0 TeXcolorgray
651 w(Ein)480 b(b)36 b(estimm)-36 b(ter)479 b(T)-108
b(emp)36 b(eraturv)-36 b(erlauf)480 b(wird)g(mo)36 b(dellhaft)481
b(durc)-36 b(h)478 b(eine)i(F)-108 b(unktion)479 b Fm(T)661
b Fn(b)36 b(e-)921 10116 y(sc)-36 b(hrieb)36 b(en.)526
b(Die)h(F)-108 b(unktion)525 b Fm(T)707 b Fl(:)1053 b([)8
b(0;)221 b(60])529 b Fi(!)d Fc(R)h Fn(ordnet)e(jedem)h(Zeitpunkt)f
Fm(t)h Fn(eine)g(T)-108 b(em-)921 12108 y(p)36 b(eratur)453
b Fm(T)181 b Fl(\()p Fm(t)p Fl(\))454 b Fn(zu.)h(Dab)36
b(ei)455 b(wird)f Fm(t)g Fn(in)g(Min)-36 b(uten)453 b(und)h
Fm(T)181 b Fl(\()p Fm(t)p Fl(\))453 b Fn(in)i(Grad)e(Celsius)i(angegeb)
36 b(en.)921 18637 y(Stelle)612 b(die)g(mittlere)g(\304nderungsrate)e
Fm(D)648 b Fn(der)611 b(T)-108 b(emp)36 b(eratur)611
b(im)h(Zeitin)-36 b(terv)-72 b(all)613 b Fl([)8 b(20;)221
b(30])921 20629 y Fn(durc)-36 b(h)432 b(den)h(T)-108
b(erm)433 b(dar.)921 25166 y Fm(D)405 b Fl(=)p 3787 25166
18898 34 v 23118 24684 a Fe(\016)23644 25166 y Fn(C/min)p
1 0 0 TeXcolorrgb 921 28057 a Fm(D)g Fl(=)3919 27159
y Fm(T)181 b Fl(\(39\))296 b Fi(\000)f Fm(T)181 b Fl(\(20\))p
3919 27748 8135 45 v 7336 28969 a(10)12620 27575 y Fe(\016)13146
28057 y Fn(C/min)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 8124 a Fh(___/1)p 1 0 0 TeXcolorrgb
47998 10116 a Fg(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 32444 54804 45 v -2331
37872 a Fo(AN)826 b(1.3)f(-)h(10)g(Aktienkurs)d(-)j(O)-60
b(A)825 b(-)h(Matura)f(2015/16)h(-)f(Neb)60 b(en-)-2331
40894 y(termin)717 b(1)p 0 TeXcolorgray -1391 44202 a
Fn(10.)p 0 TeXcolorgray 651 w(Ab)503 b(dem)g(Zeitpunkt)f
Fm(t)488 b Fl(=)f(0)504 b Fn(wird)f(der)g(Kurs)g(einer)g(Aktie)h(\(in)f
(Euro\))g(b)36 b(eobac)-36 b(h)g(tet)502 b(und)921 46194
y(dokumen)-36 b(tiert.)433 b Fm(A)p Fl(\()p Fm(t)p Fl(\))g
Fn(b)36 b(esc)-36 b(hreibt)433 b(den)f(Kurs)i(der)f(Aktie)h(nac)-36
b(h)433 b Fm(t)g Fn(T)-108 b(agen.)921 50731 y(Es)434
b(wird)f(folgender)h(W)-108 b(ert)433 b(b)36 b(erec)-36
b(hnet:)1054 52650 y Fm(A)p Fl(\(10\))295 b Fi(\000)h
Fm(A)p Fl(\(0\))p 1054 53238 7548 45 v 4177 54460 a(10)9103
53548 y(=)369 b(2)921 58086 y Fn(Gib)427 b(an,)g(w)-36
b(as)428 b(dieser)f(W)-108 b(ert)427 b(im)h(Hin)-36 b(blic)g(k)428
b(auf)g(die)f(En)-36 b(t)g(wic)g(klung)427 b(des)g(Aktienkurses)h(aus-)
921 60078 y(sagt.)p 1 0 0 TeXcolorrgb 921 62623 a(Der)387
b(Kurs)g(der)g(Aktie)h(ist)f(in)h(den)e(\(ersten\))g(10)i(T)-108
b(agen)388 b(um)f(durc)-36 b(hsc)g(hnittlic)g(h)385 b(2)j(Euro)f(pro)
874 64615 y(T)-108 b(ag)434 b(gestiegen.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 44202 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 46194 a Fg(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 68348
54804 45 v 0 TeXcolorgray 24746 81281 a Fn(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fo(AN)492 b(1.3)f(-)g(11)g(Ableitungsw)-60
b(erte)489 b(ordnen)h(-)h(O)-60 b(A)492 b(-)f(Matura)g(2013/14)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -1391 7929 a Fn(11.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)
-36 b(olynomfunktion)435 b Fm(f)142 b Fn(.)p 0 TeXcolorgray
0 TeXcolorgray 12164 33721 a
 currentpoint currentpoint translate 0.98079 0.98079 scale neg exch
neg exch translate
 12164 33721 a 12164 33721
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.13591 a add def
/d 0.0 a add neg def /h 197.46167 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12164 33721 a 20983 29311 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 127.46815 0.0 -79.66776 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 157.628 0.0 -39.83366   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 127.46815  0 -79.66776  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -79.66776
 127.46815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-39.83366  def /maxTickline 157.628  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.628
0.0 -39.83366   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 127.46815
0.0 -79.66776 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 157.628  0 -39.83366  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -39.83366
 157.628  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.66776  def /maxTickline 127.46815  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.628
0.0 -39.83366   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 127.46815
0.0 -79.66776 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19738 26447 a
Fk(1)19738 23297 y(2)19738 20148 y(3)19738 16998 y(4)19738
13849 y(5)19006 32700 y Fe(\000)p Fk(1)23898 30657 y(1)2679
b(2)h(3)f(4)-16584 b Fe(\000)p Fk(1)-4351 b Fe(\000)p
Fk(2)20983 29311 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20983 29311 a 20983 29311 a
tx@Dict begin  { 127.46815 157.628 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 20983
29311 a 20983 29311 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20983 29311 a 20640 29597 a Fn(x)20983
29311 y
tx@Dict begin  PutEnd  end
 20983 29311 a 20983 29311 a
tx@Dict begin  PutEnd  end
 20983 29311 a 20983
29311 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20983 29311 a 20983 29311 a
tx@Dict begin  { 0.0 0.0 pop 127.46815 157.628 exch pop } PutCoor PutBegin
 end
 20983 29311 a 20983
29311 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20983 29311 a 19935 29643 a Fn(f\(x\))20983 29311
y
tx@Dict begin  PutEnd  end
 20983 29311 a 20983 29311 a
tx@Dict begin  PutEnd  end
 20983 29311 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.8000000000000007 def /x1 4.480000000000007
def /dx x1 x sub 199 div def /F@pstplot (0.1450365624797774*x^(3.0)-0.4450365624797774*x^(2.0)+0.02978062512133562*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 20983 29311 a
tx@Dict begin  { 26.74564 58.3282 } PutCoor PutBegin  end
 20983 29311 a
610 x Fb(f)20983 29311 y
tx@Dict begin  PutEnd  end
 20983 29311 a 35093 33721 a
currentpoint initclip moveto

35093 33721 a 12164 33721 a
 currentpoint currentpoint translate 1 0.98079 div 1 0.98079 div scale
neg exch neg exch translate
 12164 33721 a 921 39697 a
Fn(Ordne)331 b(die)i(W)-108 b(erte)332 b Fm(f)11300 39215
y Fe(0)11611 39697 y Fl(\(0\))p Fm(;)221 b(f)14638 39215
y Fe(0)14949 39697 y Fl(\(1\))p Fm(;)g(f)17976 39215
y Fe(0)18287 39697 y Fl(\(3\))333 b Fn(und)e Fm(f)23565
39215 y Fe(0)23876 39697 y Fl(\(4\))h Fn(der)g(Gr\366\377e)h(nac)-36
b(h,)332 b(b)36 b(eginnend)332 b(mit)h(dem)921 41689
y(kleinsten)434 b(W)-108 b(ert!)769 43681 y(\(Die)499
b(k)-36 b(onkreten)499 b(W)-108 b(erte)498 b(v)-36 b(on)499
b Fm(f)17004 43199 y Fe(0)17315 43681 y Fl(\(0\))p Fm(;)221
b(f)20342 43199 y Fe(0)20653 43681 y Fl(\(1\))p Fm(;)g(f)23680
43199 y Fe(0)23991 43681 y Fl(\(3\))499 b Fn(und)f Fm(f)29602
43199 y Fe(0)29912 43681 y Fl(\(4\))h Fn(sind)f(dab)36
b(ei)499 b(nic)-36 b(h)g(t)498 b(anzuge-)921 45673 y(b)36
b(en.\))p 1 0 0 TeXcolorrgb 921 50210 a Fm(f)1704 49728
y Fe(0)2014 50210 y Fl(\(1\))369 b Fm(<)g(f)6209 49728
y Fe(0)6519 50210 y Fl(\(0\))g Fm(<)g(f)10714 49728 y
Fe(0)11025 50210 y Fl(\(3\))f Fm(<)h(f)15219 49728 y
Fe(0)15530 50210 y Fl(\(4\))873 52202 y Fn(A)-36 b(uc)g(h)432
b(zu)i(w)-36 b(erten)433 b(w)-36 b(enn)433 b(das)g
(\022Kleiner\020-Zeic)-36 b(hen)434 b(fehlt)f(ab)36 b(er)434
b(die)f(Reihenfolge)i(stimm)-36 b(t.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fg(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 55936
54804 45 v 0 TeXcolorgray 24746 81281 a Fn(9)p 0 TeXcolorgray
eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fo(AN)479 b(1.3)f(-)g(12)h(Finanzsc)-60
b(h)g(ulden)475 b(-)k(O)-60 b(A)479 b(-)f(Matura)g(2016/17)g(-)h
(Haupt-)-2331 4622 y(termin)p 0 TeXcolorgray -1391 7929
a Fn(12.)p 0 TeXcolorgray 651 w(Die)402 b(Finanzsc)-36
b(h)g(ulden)400 b(\326sterreic)-36 b(hs)401 b(hab)36
b(en)401 b(im)g(Zeitraum)h(2000)g(bis)g(2010)h(zugenommen.)921
9921 y(Im)562 b(Jahr)f(2000)i(b)36 b(etrugen)560 b(die)h(Finanzsc)-36
b(h)g(ulden)560 b(\326sterreic)-36 b(hs)561 b Fm(F)34148
10120 y Fk(0)34673 9921 y Fn(,)h(zehn)f(Jahre)g(sp\344ter)921
11913 y(b)36 b(etrugen)433 b(sie)h Fm(F)9105 12112 y
Fk(1)10064 11913 y Fn(\(jew)-36 b(eils)435 b(in)e(Milliarden)h(Euro\).)
921 16450 y(In)-36 b(terpretieren)470 b(Sie)i(den)f(A)-36
b(usdruc)g(k)19783 15927 y Ff(F)20378 16050 y Fa(1)20840
15927 y Fe(\000)p Ff(F)22167 16050 y Fa(0)p 19783 16140
2846 45 v 20735 16908 a Fk(10)23233 16450 y Fn(im)471
b(Hin)-36 b(blic)g(k)473 b(auf)f(die)f(En)-36 b(t)g(wic)g(klung)472
b(der)f(Fi-)921 18442 y(nanzsc)-36 b(h)g(ulden)432 b(\326sterreic)-36
b(hs!)p 1 0 0 TeXcolorrgb 921 20987 a(Der)359 b(A)-36
b(usdruc)g(k)358 b(b)36 b(esc)-36 b(hreibt)358 b(die)h(durc)-36
b(hsc)g(hnittlic)g(he)357 b(j\344hrlic)-36 b(he)359 b(Zunahme)f(\(durc)
-36 b(hsc)g(hnitt-)921 22979 y(lic)g(he)330 b(j\344hrlic)-36
b(he)331 b(\304nderung\))e(der)g(Finanzsc)-36 b(h)g(ulden)329
b(\326sterreic)-36 b(hs)329 b(\(in)h(Milliarden)h(Euro)f(im)921
24971 y(angegeb)36 b(enen)433 b(Zeitraum\).)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fh(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fg(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 28779
54804 45 v -2331 34207 a Fo(AN)718 b(1.3)f(-)h(13)f(Sc)-60
b(h)g(wimm)g(bad)717 b(-)h(O)-60 b(A)717 b(-)h(Matura)f(NT)g(1)h(16/17)
p 0 TeXcolorgray -1391 37514 a Fn(13.)p 0 TeXcolorgray
651 w(In)433 b(ein)h(Sc)-36 b(h)g(wimm)g(bad)432 b(wird)i(ab)g(dem)f
(Zeitpunkt)g Fm(t)368 b Fl(=)h(0)434 b Fn(W)-108 b(asser)434
b(eingelassen.)921 40060 y(Die)544 b(F)-108 b(unktion)543
b Fm(h)g Fn(b)36 b(esc)-36 b(hreibt)542 b(die)h(H\366he)h(des)f(W)-108
b(asserspiegels)544 b(zum)f(Zeitpunkt)g Fm(t)p Fn(.)h(Die)921
42051 y(H\366he)434 b Fm(h)p Fl(\()p Fm(t)p Fl(\))e Fn(wird)i(dab)36
b(ei)433 b(in)h(dm)f(gemessen,)h(die)g(Zeit)f Fm(t)g
Fn(in)h(Stunden.)921 44597 y(In)-36 b(terpretiere)432
b(das)i(Ergebnis)f(der)g(folgenden)h(Berec)-36 b(hn)g(ung)432
b(im)i(gegeb)36 b(enen)434 b(K)-36 b(on)g(text!)1054
46522 y Ff(h)p Fk(\(5\))p Fe(\000)p Ff(h)p Fk(\(2\))p
1054 46832 4221 45 v 2328 47600 a(5)p Fe(\000)p Fk(2)5776
47142 y Fl(=)369 b(4)p 1 0 0 TeXcolorrgb 921 51680 a
Fn(Die)342 b(W)-108 b(asserh\366he)341 b(nimm)-36 b(t)340
b(im)i(Zeitin)-36 b(terv)-72 b(all)341 b Fl([)8 b(2;)221
b(5])343 b Fn(um)e(durc)-36 b(hsc)g(hnittlic)g(h)339
b(4)217 b(dm)340 b(pro)h(Stun-)921 53672 y(de)433 b(zu.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
37514 a Fh(___/1)p 1 0 0 TeXcolorrgb 47998 39506 a Fg(AN)369
b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 57147 54804 45 v 0 TeXcolorgray 24421 81281 a Fn(10)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

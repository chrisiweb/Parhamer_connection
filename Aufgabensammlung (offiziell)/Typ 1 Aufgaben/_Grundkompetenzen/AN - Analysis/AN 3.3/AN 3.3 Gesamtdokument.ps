%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Christoph/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 3.3/AN 3.3 Gesamtdokument.dvi
%%CreationDate: Sun Jan 14 10:57:14 2018
%%Pages: 25
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular LMMathItalic12-Regular
%%+ LMMathSymbols10-Regular LMRoman8-Regular MSBM10 wasy10
%%+ LMMathSymbols8-Regular LMRoman10-Regular TeX-feymr10
%%+ LMMathExtension10-Regular LMMathItalic8-Regular
%%+ LMMathSymbols6-Regular
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Christoph/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 3.3/AN 3.3 Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2018.01.14:1157
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: pst-eucl.pro 0 0
%!
% PostScript prologue for pst-eucl.tex.
% Version 1.01 2012/09/21
% For distribution, see pstricks.tex.
%
/tx@EcldDict 40 dict def tx@EcldDict begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Pi
/Pi 3.14159265359 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% e
/E 2.718281828459045 def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> true (if |x| < 1E-6)
/ZeroEq { abs 1E-6 lt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> a b c (ax-by+c=0 with a^2+b^2=1)
/EqDr {
  4 copy 3 -1 roll sub 7 1 roll exch sub 5 1 roll 4 -1 roll
  mul 3 1 roll mul exch sub
  2 index dup mul 2 index dup mul add sqrt
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch
  4 -1 roll 1 index div exch pop
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% orthogonal projection of M1 onto (OM2)
%% x1 y1 x2 y2 -> x3 y3
/Project {
  2 copy dup mul exch dup mul add 5 1 roll 2 copy 5 -1 roll mul exch
  5 -1 roll mul add 4 -1 roll div dup 4 -1 roll mul exch 3 -1 roll mul
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c (ax2+bx+c=0) -> x1 y1
/SolvTrin {
  /c exch def /b exch def /a exch def
  b dup mul a c mul 4 mul sub dup 0 lt
  { pop 0 0 } %% no solutions
  {sqrt dup b neg add a 2 mul div exch b add neg 2 a mul div }
  ifelse } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> Dist
/ABDist { 3 -1 roll sub dup mul 3 1 roll sub dup mul add sqrt } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 -> x2-x1  y2-y1
/ABVect { 3 -1 roll exch sub 3 1 roll sub exch } bind def
%/ABVect { 3 -1 roll sub 3 1 roll exch sub exch } bind def  %% wrong version
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x1 y1 x2 y2 x3 y3 x4 y4 -> x y
/InterLines {
  EqDr /D1c exch def /D1b exch def /D1a exch def
  EqDr /D2c exch def /D2b exch def /D2a exch def
  D1a D2b mul D1b D2a mul sub dup ZeroEq
%   { pop pop pop 0 0 } %% parallel lines  % --- hv 20110714
   { pop 0 0 } %% parallel lines             --- hv 20110714
   {
    /Det exch def
    D1b D2c mul D1c D2b mul sub Det div
    D1a D2c mul D2a D1c mul sub Det div
   } ifelse  } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a b c R -> x1 y1 x2 y2
/InterLineCircle {
  /CR exch def /Dc exch def neg /Db exch def /Da exch def
  ABVect /Vy exch def /Vx exch def
  %% Dc==0 then O belong to the line
  %% First project O on the line -> M (-ca;-cb)
  %% l'abscisse de M sur (OM) divisee par R donne le cosinus
  %Dc neg dup Db mul exch Da mul 2 copy 0 0
  %ABDist dup CR gt { pop pop pop 0 0 0 0 }
  %{ ZeroEq { pop pop Db Da } if Atan /alpha exch def
  Dc abs CR gt { 0 0 0 0 } 
  { Db neg Da neg Atan /alpha exch def
  Dc CR div dup dup mul 1 exch sub sqrt exch Atan /beta exch def
  alpha beta add dup cos CR mul exch sin CR mul
  alpha beta sub dup cos CR mul exch sin CR mul
  4 copy ABVect Vy mul 0 le exch Vx mul 0 le and
  { 4 2 roll } if } ifelse
 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% R R' OO' -> x1 y1 x2 y2
/InterCircles {
  /OOP exch def /CRP exch def /CR exch def
  OOP dup mul CRP dup mul sub CR dup mul add OOP div 2 div
  dup dup mul CR dup mul exch sub dup
  0 lt { pop pop 0 0 0 0 } { sqrt 2 copy neg } ifelse
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x y theta -> x' y' (rotation of theta)
/Rotate {
  dup sin /sintheta exch def cos /costheta exch def /y exch def /x exch def
  x costheta mul y sintheta mul sub
  y costheta mul x sintheta mul add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% N -> x y
/GetNode {
  tx@NodeDict begin
    tx@NodeDict 1 index known { load GetCenter } { pop 0 0 } ifelse
  end
} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> ch(x)
/ch { dup Ex exch neg Ex add 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> sh(x)
/sh { dup Ex exch neg Ex sub 2 div } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x -> e^(x)
/Ex { E exch exp } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% x f g -> x y n
/NewtonSolving {
  /g exch def /f exch def 0
  { %%% STACK: x0 n
    1 add exch %% one more loop
    dup ZeroEq
    { dup 0.0005 add fgeval
      1 index 0.0005 sub fgeval sub .001 div }
    { dup 1.0005 mul fgeval
      1 index 0.9995 mul fgeval sub .001 2 index mul div } ifelse  %%% STACK: n x0 fg'(x0)
    %%% compute x1=x0-fg(x0)/fg'(x0)
    1 index fgeval exch div dup 4 1 roll sub exch %% stack: dx x0 n
    3 -1 roll ZeroEq              %% exit if root found
    1 index 100 eq or { exit } if %% or looping for more than 100 times
  } loop
  dup 100 lt { exch dup /x exch def f } { pop 0 0 } ifelse
  3 -1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/fgeval { /x exch def f g sub } bind def
end
% END ps-euclide.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BE16201B404
07019A28B699901B1A6F7C9D6981CD0DC5CBD97109E9E4E462E58A293CD1BC4E
240FF934EAE9355F75676B21D53206AB65DD1F7D423FB9FA7332AAF569948EC5
5BAD355BBD85D66D616844C0DAA6DD5D5492CA1736A52B8B9D95AE23A9C62EA6
A323C0FB989D53EB4A5AC25A0858B10DC043CC9D5E8CE27B8C4B6E8B4F056867
F1C0B014E2B65B5C3158BF4870481D8FA433728039209E7FDD13ADBB921F3715
DC8998AC0E556F16DB74C13D05E062FF9089F981D89FFDEA459395AEB1FD2A23
13C4619C3924D516D06D7C952B12E6646662A651EE4185C5725607F457AE1E83
C41C6AB175C3200BE7F1396F9CAF46C80BB7C866CD45B80656513B6871E5258B
4F80702ADB01E522A4FFE4E1A156DDF0127E2C87A8AD82DEE1B8090D5B0E4BA8
59C4668A7EAC8CFEDABB124F8CBF10A621372FAA078DC8AAB00146550EE703A1
4B531D522B476453DE7C661ED5D3477A95C24980073E63DD9C90CA8D00E81400
9234E2A36EFBD854F868BC9301D33D0762434E5810C493EEEC7F9BE98C8E56CF
86C591B705CAF70989799D9D24281EC83E6536996D29B4A70F4A479D38E0ECB7
3664581BA1552F680511B5FE3EAF7C61513691DC7010505C0F1C9BDDF1747CA2
F97096DFB28E72BEF671339F900E204FDA3CA9C2B6D2FEC695D860792433C3DF
19EE7B5C27E7BE0538ACEEDA4C755FCA8F3572C613CCC6B7436CB4445C100492
702A703EE13DCF5C2E244DC85556F666C7ED81894089B685DC8A4A3A66DC9C52
96DFDE89C5BA45AA1E939DFFE83840267D7D1A70288C3CBA2FFCDF1A4368603D
692DF9729847B5A4A1E37B766568C833B98C74B15426DF65C9CEEE3E3153FCAB
3050CA75A82E9483EC5B384BF87B91E7273975069C907199D36165A282C7C6E8
5A1C921EC9198BC03CE04A0F0B2113C7B19A19D7E3B17E6B882EFEDDC7E7567F
116654EF98052AFA60869686385A3FE61B5BA1369DB20EC80C8086DEE33D0297
BE0403E7694909E0D4657B9A187A73655F4CD055362BBD43CB8103899EA8517A
B8C18737EC2FAABD1DA7EB3D39A3B9FDEF15DA1F1505CDD37755796CD5FBA681
D46CF9314CC3D7E9AECA005DB43AAE1E43E95639D799B5CDCA5A5527048775EB
15B80C65DB647AED3D3068FA9D4ADB75BEA4DF343AD30344E6B4C7F83808900A
54D9B875E95CA8166B84CCDE9FB92FEF1C8224A481E31A42902243B83DA90CB0
F503589D4D806436C1287938562B2203565FD277C13BD2342C13A687C6CACA5E
2D35E33B794FD84C274A4D9C2643EBEC142CDC1A985E6F3CE8B6695B3C201F4B
7CD67C0896DA7E0638810834D55746262B47195560253D16818C5EF8A7D897D7
E9C788459B39B30321C6ECAE276B63BCDCAAC66E6F6EE4CE4ACFE894C33EDAC7
5933CF06BFDCA9E282359D114C1015DECDE764D6A2B3B5DF5C4A154702C42C30
D07D729FD4F2FCC3A6B97E1F5FFCC19203D7FD140B5D3C78CD706A23DACE1AB5
B13A4DEEFD88C8AF7468EB28FD5E0CBDF9E23D1FF320EBF19F28142D78CD96C1
1B52FE223AC12C65643F2111724CCA0EF177EC0C2D3AAD49BD2A0BF511A722FD
CCD19792FE94B9FDBF4065FC6CA66B02202BFDAA805E647AF9BF332D5EB49BE2
1977146C8872ECAD4D82A933A8A5E16FA17CBE3F977509340FF834EA210BF0CC
D3EC84AC8DBFABB91D54CC819680322EAB72E1250A760A2AC753F817F94AA693
9DAE286FEA07B203E7227497062C30026AB518D1BE399DB38FCEF12C4E988752
A88D8C98DC43DB22C6537028798198E2D3B0453ED720B08BB46736BBB09EE961
0D507A44794CEB9A3EAB4998A31F59584455FCA7617F2744370D43F5E2B9EE5C
AC85A80C440A6FDC9D19E8E4F78CD805598AD98987F3158905238F53B5565761
668A6EA34CABAFA33A7C345CCD46EAAF3E000C9245F536030DE2F2AC2B228E07
453FECCD0AF58C15FBDD5D36338CB0ECF40BA237177F6DFB6E00260EDCED9A6F
C8E5B7B915712E24D97A3E013429A238307E3A46BFD486834A752E5C0D519117
BB643C87DD94CA2BB185BCD37C128178A0F79CC8ACE6774BCE7CC77605F93ABF
EBD803E01C35504AEAA61F56E5B463649E058E104A8537D3D81053D9DB65EF6C
050296ECF0188950E744AB53050CE216C016608427C3FD501865604B85880B05
3A592E36D0A04CD581917A0935303EC1823825BF2E2F5C26BCB2EF1C38F3C951
2D50FAA648A9822FEE5B4BB37010E988D53382FF192A77346C86A5D1487047CA
DAB6064D531B1FABFC5730E478369E2FC89F2F28C168E6B988F7655114E5FF71
10BFC9D5E0419ADD2F5CC1C09AD68EB2CE58E9288356FC2CB43FFC49E6767BD7
DFCFA10CEFCC78AE7264D6AC158960359E31A4379AC573D700B7780D298520C2
D0698C337BF594D24900FECB67287A8B4CDB963B1104272310678F74491DA157
2344FA545EAD39D3BDE3E416E13D6B23272517D28E9E093AEFA728236C3F0625
42EEFDCCA2D1CE0A5DCF82C18687DDECD38E11AEA8AE17B02D3D65057422BD31
1717EAFC337558AA398E37BF984F934C66986C2EE9A510A9C87045DDEC6576D7
46C1AEC54ADE2497021A2B1380CE9F69F2A80BC2BA01FAB65ECE0514ED2F8CD9
0861F80D2C9BF60DBCE86FEFEF496AC7B23474DEAC4ADB7FF6B72CBBFD3B611B
72455DF41DEFAE3EF8FE12D52CB89184ECECFDC9A90A49DF2C1C2E47999DB23E
CCB74AA8F9B65CA96EA82B8A241DD366C3956669BAA979C0C7596E61997B9C81
8DA3B882966F6B909CB12D82ADEEFAECD240805D78448DF7E49A11B2F211A64E
B78A90BFCAAAC5B80EC514976A747B8E08E66BC3DDA8287F5E44788AAFEB2E05
BB7966CA5034B8EFD58FC08C1C182F83D34FA65B3FD76716D40C47CF247250C1
34FF33B4D8D885544C9A64BAE28239DA8BEB1A6A96E95B783B19DA7B1CC72721
564B8709C55F98E7C5F18E48575769447F56E70EA3FC9218AA9AA6EA2A3CCD85
51CD1AB6EACF05D059DB33A4A8A1BE6742EB71BC09CF1FCC9E7E83A13349D4BC
F8AB4CB14661759C675824F94CD151CD192AB4CD68C2588CE112A6D2ABD44B74
8AFED5F42AECB983E0C97BDBE9BE1744123AC8C0F438B7780BAE139B47680B3E
A235BDEFE3E247B0C763E132A0CC5F403CB09F7F5BC5378CD303C411BC079366
B9E331D0A01FCD55C9562E1FB2D410C3641A1DC59A816C933FF53193EAAFE6E8
70382132172F06F105BF2DB51EC3DF2714148469458A1ABAAA7CE8CAA45A9CF3
2034CD2106773B47C4BC871065E8C41CEFA4148A2827452E7CB712C1049B9D8B
99CE058CA4994F6AD3FD93A2EBD338C28CDCBBA3BD8E28289EF48A40723E39B7
EC79F2D3822C6F45A6AE025B3B7251C5F475F0C42E877B96009E065BF3653115
B309B3AE2E0B1F5CABE244D8F1F6D29DB3997620BB2E9F8F840048F96BD4AF2E
AAA6B47C55626F5C6488D48375B20B61BE229F35324501AE0F98009DA9ACC5F0
2B837CF7A3D467865B963C6CB6C2BAC0238F0A2AB3DA2768995A63AAAF50D6EB
1A77F44DC13FBBD93081B66089B327240A3BE0633C33C8E4823681BDBDD2635C
3E87602F531C59F95F25C76E0550BE3A0CA759150DEA693AD05F6FCA529C0B07
5B82B28489526829AFA5269D435D1D91636B826E97FC91A0A25FC7955B4348AD
DF7CDF13C26984F7E0035E5BF66BDB22301ADAFB260DCDF734710F51387DBF7F
59869CC9A2D5E699820F4CF92C09C7B8739428F2881E4C77381AE42D708DF8E5
C93474AFDFF07356C98DE52FCAE577C7EF0A72CB1F4170BFFA48734F1EAE0165
D6FE43CBD8FA5C85EDCD122FAC36F59FDA74420AEF97D620DFFCD216CFF0DB2E
60B9053B0C71F73BF2BAE6B0B60411388FD7F8F95FC7A4542DD071B9BBA94C49
6DCD748D1F24E11B7818B6347AAAA74FA8A5BC6F63F55B2A9F922A4995E08362
2B36DEFFE1A6AD802B4C6AF1F169805580F4EBFF87B92A0E4040F9F5A61B558B
A7502D0551DDFD1B445C6BDFA438D70A555F767B79213E14EF7C24C48C184E2B
C4350D72B6956D0C2F549618A5188F4F3D785A31C1CF5B24D127CFD021D684AF
84A8CBF988CF6C34BEFE7A9F38537FF36ACE4F4C186B6AD43875BEF479A567BA
B3764282DA78B388D27A6DEC10E31F1070B7F934387FDE0B8736AC99C312BCE1
CB7C2B074D386AEFB764BFC86DFE3CE4A2AD2F1014CD74242AB2821DF38563E9
D926F0DA88423DC2849432C1F9581422696BFA2AC17072EA6C9F52E42816C85A
F34C21215E773478561500E9ADB8BE5D338698293881FF237E9135E1DA3CDF10
9AB7631B321258281DAADA221C4D03BAA1C893DB536F4BE3C86F9764E9D7F431
3861B4D82AC0887211C58DB0AE8D8FD27767696A71E401C3D7EFA3F690695CB7
DAF3EC66FA0B727FC6AE134C01819BE812383102DFC5AE3F0F649948253EC51D
98A20B1C4150AECE1B6076A57364A56FAD9DD85AE2E3CDE1A4CFFA3B012398F1
6FB210FE1BFDCEAD62BC0C4D9CFFECDE469085BCC3A247DD47403BA7FCD1B57B
6C8C3E0553729B37E4FFFAD130F37CA200B432D886A12EF6332152F0E30D38E2
B0F1C316C4111563ABB27AB6E746CEBF9CE816B349CE7E2C8EE3A00E3B6A0740
8043CBFAD9A3BADDFC68DCCF67E30306F803C21AF93B4DCC5AA19DB2AB45BF26
4FB98956E358AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8337290BB34F9C
9378F5EECF7AB9804EE6F29D00C325FE6E644B9A34F6D0492707FF62210299A4
423C3ACC13EA148737942B3ABB615C574286277CD3EF604179CE6CC654B087FC
10B4C71E24BCFED96E689908E9D864BE3DDF1EA078FF00A40E236B7BCA3A8319
2D97B128519E4CCF2738342D8157822D42F334B8793F13FB6797C5E5249F87F4
EE8D2B2380848306F12A275DE016D08DF4EEA409ED0825634FEF2BA64D319E72
F99A7F085D9DEC3446B39CDE8886C5917EA8C3D12C66A4CA6D951C5831F822FD
91C71A737C3C3B405D049314F14D6FF093684229CF7A810D9FF2AE1806BE73E7
DAD8CCB7E454B088821A9F14B14855823DB7D1D12E2435634CF69890D14A1FF7
6CDB488E576319AE8FD72E288AB89F4ABD066FFA0C1E746B4D3945C2101451A5
903126FD80BD493627782C24ED101F4140C494B0AFA172887001E098FA34E89A
BAA7573D1485E21F13FA431B7B117E787AFD9B6F938D1783115590610C8526BE
DF26F171C5F4C80871ACD7CD327CB21346320CD3F2792ACA6EE48DB376528012
DF50DB540EE406F86B020BDCC75B131B92A963902D10C5468AD2BBD7BC209831
FE44C13336BBC3B0569784320814C4FA99AAB02B955569B4CF96EAD1B32729DB
E4756DEF299974B5B02B44080CB70534647A4C09D8C8BA4A3DF138CF7418003D
E88FBC1FDC0D203E28BC6425C308D02CD968BE87AC37C0E0F40739A4EFCC2554
F65D9BA49E0247C276A7E4411D3999209B7C8C8E880198F62F1EE7D0DF4029A9
0A8DC295D102DEC16E24B0E822A9BF2F4841144E5B06E3583F5C997211E5081E
B83DF4D9F3ED021857F33C1ACEFD2CEA6ABA7AC14F35734CFB25ECE3A9EA5EA8
03DEF478A1DDC7BF0C5793831F89BFE0A70B1DBD9977A5F4C77183F4CF9B18D3
648CE36D5ABB16F60486F9C38AF072F4A6A07BCE44699387DBC9B9F89DB6EF65
77F372161863C546327B4BC36E956EEF8CF19B47E871B05E8ADA834E775AD694
8BE41E7CE3784F49073B8A3EEB12EFB77E7AABC37F57BFA2BDD7C1143BA3C5CA
077D8042C15732284FA8C066B5436D54B97EAE0CFDA85B3EFC1C18FD44FF2BC9
93B88B9FDA9A8BC49F224A8A389D0F351D3C74500EE5012C07BC08690DE3BCCD
E19E8B67B5DC829278B1120A3A5D37A68E599900A96500D75CA74B270861D027
B81EB14663E3073EA5D1D9D55A0BC8ACE6E7972CDD9318A247900C698EB3D318
C1E33758D8990D8EE81BAE03AD70AF745817CA28E17D34137157DF2F0C16900F
279E3E77591E3F95B9158CE71477D7CC62FDEA43428C6F79C332342E15F75B08
A1E0A25D766B378FE86691BB1283618D234ECFE8B485CD72D666FDAF3771EC11
8B6420ED41D724F6F33903DC93B2A8D6F3EF87869378858BA7E6E918D5E46449
525A4A5C89902E175AD3FD3DEDD4C85EE5217379DB414EF338962847BC752EB0
EFF7BE8B688A3622826EC83CC42DCA4C808DF9894AACCF6FCC5C78714AE6F776
AD12743DCEA3C8C9D08E167B32B266A48D168A7B15993737BE0E6C288711CD6E
BF9453B2F632E36A15B373FF3FAE535329F1FF83125F1EE19256CC5053025616
EEEF28F24F95FA92776948AD4434F8B41FD8FB187D24F232C6D89B727968420B
73207821859BB191D53398A26D610D53AE6A1B04E7BDEF7E850602B6815EBCF3
E19A3AD3094F5C09CAB3EDCFE19EDE2E31F837DF86F1800F59C89EF6401112A9
920EC9C57B38834DF8ADB373A5B5BDB1D57F414F3B9580E3A2D1A275297514E7
62C01CD9930799BDAA3C034F4466A9AA7EED0A2C9DC58C0E1C62AF2EFAB5813E
8C5F1250F2589FE68B29179A3E97A3F0B35A3FE8DF5B2583CD5333D961386F3C
0BEB0B0E360A3343249D4A6D0E97CF931207960C9BA56892999790016B0236D7
19FF602DA5224C0BAB8B6246766D5D0383CBF71F3159B5B1D9A6E3BBC4518671
B8D6440A282859DB641ED9F940FE4ABD8A3824795F928AF04C833497F7C4B1B6
92D0495AB0787EBA30853A9B90DDDF7AF372B76FE598D19AC35D7988F76C9041
485C16FE9005D865F680319DA302AA75A3E4AD0DD628D2D969B17440CA9AF1A5
4675CBD7ABF2B2F054AE1254675CD0EA94A638DBBD0D0627A5AE85B3B0609E57
994F61B3289BC269D6321696B1D9C4208BDE9E79F9A6FA677F1EDFFB70E37A26
C6C3F2E101693C94644471363E157B01E8B11BB02FB00762A522A3DF2BD0251F
D7822007395A5D78C698C7366C1C453FD7CC6E94C47BA2DBDC17A5FFAF17078C
C55DE418D9573497D3911E976926FC81BDA50FC3126234044386036954E9BE82
3A79C27A4408AB95CC3340C7BC2658981FDB476C67E8BF823884C97FA6FD2DE5
B292D97D0335BFC690BCDC1C21BA7219C6A702B7E6453B1672D45B719225BD4A
B0E5451D335381488053602966F43A43037554E44CDC08B36BA9CF1C1C78A880
0AE691524E1C6FB25F41A15D8BBEC9250B35760D221A457E0EF8D3509E398373
59BA3562E3DF1EC0530A838346B7C97C616E393DAF3553A5328129E033146AE5
5A893A5F9B7B3709B544C8412F8BF64203D554E47F31B7AE43ABEAD548324A5D
AEB9AC7E77DDDC367975577DDDEA8FB03F750A52C070289822BB03028524D9F7
34EB854BE550341FD8148EBCF4482E9D977385E7B94A9DEAAB1B74EEB7B90824
5CDDB7A093C1AA3078E504231708623163ED2DB636BA33208269330C24A4E0B2
183FADFD7E2B2575116286D1C2A40545F973870CB8CC759E6CEB1E2B2930DA14
63937707D0661275B66BBBF9BAD3F33E0E13DEC23F367F3CDAADB9A370228BDD
712FB3E6E3B114C105A187E4ADE0186B8ACBDD4537C9821B586C1AA0E3D26C56
EBDADA436649A0E14AB04AB9A374E930A868D4872655A2BD4F485C7FBBFC1A88
E17F145078D8B20BF06930D39D4AAEF7F72881909BF65CB09380CA8135AC83AC
F355B3085E56A4087ED0849BE7D62640649C18E72E35E5721ECC6A9B55431994
50D4DCF85355B62186878ABAD0E20B2DC4557602FE6F058A6045973BB2EBC862
E482643DCE6A8EB4E099D4A15B609E3064DC9FE24A1D4E922593B8D115267A56
9CCD715FE50EADC5978C60627E06B99C73D440591249C8468ADAF74767FF59DA
5904DFB6386ED196F743FF57EE7DCC2FE096C5565DB42D5A4BB5A14E1217960A
56E41FB7F566D32F10D41D5E07065AAB5CFCACB826EFB41D1A7A6F59DC8AF874
E461A239212F05BA154584A312D0DC1C199035B90E8B3A19D0573BAC967DB056
85E1E2031A7EA3B7A971E7669D6413FCC65C406B8A7DA92EB22F6DEC316C5898
6CDDF0161F8F98CC3027FB5FDF901190949B4B6A3297CFB9B7C1C0F575F4A979
FF04F1B3C17864FBC8B92B77DC4C2A52659DCB7D2970392C6F0911FDFD11B254
DA5A7E27E60E386F32B5BC0788181F511102AB15CDC60F6EF061341F4D3A8A3F
C67D9F369BED60C6E321A55CB96FC41F9FDA1FD2D967EB9B7F6B389EE22D1C08
02FACD28FFBB1FD06344F73CA4963E8ACEC1D74254D65FAB990CD2DE0ADBFE59
B74C19F6098ABCDB06E2D56FD40D8CEFA73DC32A2614E905203DB858BCF75E95
321A7131547E0F2BACC0D0B67706DA244B8DFDC8E62D3C37D431F6ED8353D14D
C335D2BE90B5C581D6E786B578AE7262FC845FCCF787429F4A3995CE613728D2
6E6E3DF9B321D1550C15C0E45EC2EF425AEE66B4BF6D4477E72DC3B753BC0DA9
4017AD3ECC7AB7872B90950DE333A444BE5476340C4F274EF8D30ADEFB5B856A
8C34BC6B1DFBB5E5E0FD6150E4A8F7948D77CD88A995C71A69F35BD0CA454282
4B1F4329D05463C019ECA4A7C3C21E322AE6C2B6732D60633B59C2D874151117
1B2040FB6637140BE927369F803A4FF311D467EC797A7675CDBD7282B6F1E814
F280483A55C252B0A40E7584C71AFECE41946AE57589E52A9DAB9B4C1330A789
52043093DBCC03FC0A022D504EF495A6B5D5A0181B21A1268D6E761CF9B88320
7F1478ABCD112D3ACD5829460DFB26A3E003F3B3FBBF28863BD0C4165279A8F0
5A7CCAFE3F27CFCB8FB95970989532011E12FEA1EDCEF3786FFF98C2969A2778
4051AB6D62A72179B3A6C7AF7262FB22E5DD6D1A43DBC273DB1BE1C5360938A7
15794B78307D3B0114860A6C96BF87BA567F795DE7D59F934AF63B21B8188396
2192FDFE7ED39A2F4EB718886E4FF6A985BD93B63B69B0539E5B60B9B751BA8B
96989AD1878C8A5C000CBAAF4D8B1B920CEF000A151C43D8460E822184095395
E09244CE34C8E2F3833988827CDDFBEF79999598E57464E82D184CF76BE6CC54
6FBC0F3B272BCFC8EE865A632AB4A611CAD82809B72668606C1F992A1D8ED0E0
5E441BBF12394F7EEB8B3819183C0B4D2F92C01428AC9051C9F5AA344BCA6CEC
10B732679DA262C5151B948E529F0C7A21052F1A28CE3432A48774F657E6CE1C
BBA31DD5B6A2A51DFB6604687AE4E6C3FC0007733572C4C243D9DF0E9D06A41B
396DEBEF9C74E4017237825DB5F7B38287124B1DF043B0FCB636084A0251325A
A04438BC14D47CD354A980A539A617AD6932D9D66638FDA8BDD4DE1F10153D55
1CCD7325032E3856BD6E6C845E2379D4B42D8D19FA6D540368BA9F7BBDDEF785
603AFB76B55C10426C6B620BF1890A7406C7A73B7596DD9C1EAE6D72382D60A1
A753062A05C1F131CE46A71C51C1B1D3F58F626B0C4F0382A7A3F51A65171E8F
6E05FD0EAEB026BEB5B1B2ED69589587A48B075095F4999DFFED7C736E945F84
53ABBCA099EAE8CEA000FD30953CFB21EB332B423034CF5D6DA93D934D5C58DE
02DC65C84D914A718710D358014F05D7703139CB3914A6C9BDE8CDCEAF38C0BC
9E406A35F44C6B412ABEC732BA0C53F153AAC4D8526D51B72E18F4D380225458
93B5D04818AEBC01F60262586BDD20A1184ECCA49857A849D09E0DB940A5951B
BB6FD4919B97FD653F0D102D2B7810619C4BE23EE4244A76684DE444A8B5E1B4
37D934C50BEF51FDD152F3E1D16BB5DEAEE0CD3290E421B6313DAE88F83FDA1E
8ACC3588B776A0F38DA32B37B3D6B8701CE2C2E237091723377A30F50EE2D9C8
C41FCF68538E049F605961485103BF3C2DD396E682EB072BFE1C08796A7B1CC5
A228D37AED24A6B76E20BFD980910C422AB3AC370CDF22BCACAC6B2846EE2005
39F53F833F07277994D2904DC557746508623BCEB72CF3851245881C86665B77
8CA1824DFEC5DBF19D4E9789D174520A66E3DBFE628A6567768FD3A156D5C125
B46B837416E74BB617AB42062B7C7F46A2508F86BB55BF9735D016B803C38B89
2380B03933CF7AC339F7B421983E6150DC5E83C804BAA57C6E19CF8471A5E819
CC19FD7DDDC82A1E46EF79FDC5CF1DF72D2275F3857BFBB4FE70DDD0A2713820
D615BA8AE46DCDCD93BF182F0D752C9B56270A188A7649D8D1437039443AA946
A7630D1876FB0AEA1CFB78F69F2F4C1262A94F8E3D2ACB0A383AF5124A5A0C14
3F7D89F5A7906D76138611002FE7E928296A30F501DAFD59EBCD8504F5FFF188
84570CD80BB698387BA9A9D4DE33CD6D813D150A71DE3CF9D20F5FA45FB3352F
C60563D081F110CBB181C03581AE7F5CFB6E2CC811296D37D0B3F10D8795B37F
4231A18A53FFE7F6E2AFD4F1259F366FB11B9A9D5FBF66C5988D9291828004BF
D1506E19FE361FE6870EF2EB19DC31D08B3B506F8977119DB201F51DE0923D0D
96041E11FDA9750E1F4E6F65FB245EACF240CD5E1806A89D6122B7F23C4C6B1B
456EB717ECF3B8886671E1B1081AA96246E185C477A9D3E90928C19BBDACAB70
E1FF207560FABBC42680DA4692B70C5BDC3190C4CAC7F46D748B1FB871C97A78
FE15CC07DE7FA831F8D98B9A1E9FE0D79698ECDFCF6BEFA01D9EC1E9C7A986CF
2EEE20EE2DCF174188380EA574CD7D927A71662AD1F1404A836A801A94776AE8
FF003132928A98F3ED13B3A092119275C4A4E8E7635BE88FDA3523B8E87EE260
9E8397C2DA3E0F382A4C8057DC812849489EBEFF8D46AC997C8ED678DBBECEC9
5B1E3EB16DD6D9288D01300D51C912BE7CBA6297E68387A161F72C8751797854
D24B672F4AE01822A9E0A89E34E2F500E5678EE0E9433AB4F7CDE57AA7490C08
03B59CCB38B77BBF8CA0584C11295A73FE3649A98308BC5906C1DA356869FF6B
4DC925E8C00BB3E642A64685456B6BAF629AB8085CEC7C0EED7A3B6BF6112C35
C2953F4A76FC5F90AA018907D25EF38327EBE4A4D71078881731C0445AFD7EA2
01785F7CE75AE288A81702B5D53D7FA71F20E220317B91916BD508870C6C6208
61E751C779512C404ED48FF12B79DBB642914AD1214B8BFB43159501BAEAB263
FAF927BE2708B21D9B6D5A3669931BEFCC716F622A9652257E0469310B4681C5
8D18345EE64DC11A1319A075FF8717A86574669C7D9712D975674948A0C76CEB
DC6D0CEE926120656B73B1A1EC29E2AC3B8B7A0430AEF9BF9DFCBB814B092618
2486AFA66185016F9E506375D1E089C674CAC96C3233AC20FADB3505BE2B8C29
DB3630B72D102B8809C634549DB4DF0C90A4B15CCEB79085BE0B5CB46EB11E57
B71E6713B98776F95D3128349CE319F1E98BBF6959D8DFD24C4CD8D9B4A021C0
D6ECB58B929D51B9BAFEFBEA9A1804A05B350671BA8D9838EC6FD9269FC730E2
D105E1ECC35934343FFF768A9C7C69C1DCB4086F1C2DA5482BC6A803CD7CBE72
97EDB0D63A166BDA4DC1E9C77C262F5C1D848726B4230B4F8D878451CEFEAFA4
974E3F1E88BEDF8B54AFD478D9E939D0D4956846605418F3A87CB3A0749412DB
BE8555BCC1C9301918B98CB3036AD9BEC1CCD81D28BEDE22CD263C60160BEC9F
A8BAB9A3FC2CD04488D639D423941364192AA53E84DA5A4DE530CD4DF1E45ECD
B7329F90BB064E90631978245ADC09D8BA1FCA6382226C92B9537DF8C4F37383
902B4E1667173B62202487944A1FC201C6C5263EDD2A7CC63B5B775019F11E2E
DC39FF4DBC037FDEEC19CFB7C20815516316E3733B9A89343A3AD1D072E9FB6F
4FD96BE01DD08C6C539A6483A9BCF868B177F15C14A034E70C5AA4687613C37E
1EB159606D2297BC192D312488ACA3A78A2BEF253D6D1B216F57E649801411B9
3613AE10E6C7EC3198B55A098D5FD28E46480B0DD99F4679772820B94DC7FE83
00821F105AAD8F008A01ECC02E7933E19CDA965A884BE6F2B792C0BC289B8FA2
4D22A82C90A63566472F67838A67117694133A3248571E032FA87046115B7083
074B633F7E7065EA1ACA0B22F411E04AE47B92F8CBA53F25371A95605F8A120A
04A3E08D6749F21CE313BD5A80C3A2DD17590E8EDFA7C7C277BBF9E386D35F95
636EC0307954ACF32F737961660719E8594F3D869FAB0C30EAEA3A58039F45D8
7E787DC0EC3562E8A8F95F922F3AE3020D344F1D4D782CA0ABA987541FFD5934
A377B4E670B5F2DF83040BF71A9A9B369976055E2BD80245F249EE3B890E33B0
6E3DF0CA28D9626A7DEEE92DF84CF5967893ADC4A8C7BD0E74E4B3142195DD8F
5B2A24F02D547171668B1612C379841BC04CA5D5C9E7B9326E24A0D47D6C4E2F
881EA0D64F3BF02C625B92D884416C53CB94E66F3F50F55A041447594422EEFF
ACCE6AF7CC9768F720A33CF4229BF696B159AF031D2926ED0C9A92315083D99D
5BB8B016EED1AE2A0123C15585E849BC46825B83A5610C3A29B98BF9BC188EB6
535481A757C2255E5832AA2DCE5CAE2594D4F72E5FB7E033402B2679E21A616C
8EE824E4B46F8EB3B207344F9CA52989AD8A876F13387DDC0686A09422A17124
B098EBB0C3F25994A3516862892CA34548B4769A0AED35C6A162A2F8042E0762
A9360A77D39CCA3E498E6672788DE2F61EF7006D89EE6E8F2B7EB66114FE9DFB
07B6529FD752D2FFA4E8E41BE6221D59646155ED2C2E95398C0BE9BC7DC784E4
ACBC3A4A0EF41516A90F3B8A854B7EF90FA0DFA208E4C47AEE28224DE50DC4D2
9EF5120477430432067801A15476104F287263B114853CA1BF1C54B28F3591C1
B05ACF3D46952ED7C735BD3065066563083DE066F1E9B3F312F1EEA3FB272DF0
32CA0DEABE21398FDA5FBD5500DCA48E4802CE99214F66E2585DD7181AE09F38
A8152E34920B956EA77BF7EE8CA94484C8D06F0C5EA658E1E27E801178FB40CD
091CA3CBAF94EE7552736029B38142005DCFDC0DB99F04C960DE81273E2CC87A
FCE644D65932A5F34BD976E8CC2AF7C0152DADAD834A43DD5CB510F4E2813868
F64E427B56ABD8AE83CD6836A2A624A32128393B9D4638F0A9BB009B09A4C293
ECEB28980BBE80093D74FC73C15FD1819DA9EE1F6F67A0D65D35E3D0EF63274B
611B23987085B0C1A6D5250933CAFBC2CBC707BB968B61EEE568D34742728286
23E396AF3355F932557CCC2FAE2B10F9E5FE82CD6AA69212F7C45DD001CDD50B
27558998789A9665A76F64D7D5EB49B35CBA7981059C65967C51EFA557909650
BD9404BED91639395DB88CEF35A4B85061663B70F9A37D5032501CA2C904FD03
00ECCAD06E7BDABF230270BB9367AC291B5554ECEB61CA3FEDB24200F34D9051
89C29DF8F410C6BDC20BC853E357D674717EBD4461CA415362050ECB9A7C3AB8
AB6C697AD5845D58D83C5DF04B3BF096B274A94FCD5719F163517FB66E333C81
C7738AFF44731B6DB8007749D1B605F397413DF96D60AD4A66E5F8C165CD0D25
4DFB8F56C192F0F96AB797B70956F01DD65E1DECC56BAF8D3062CEF9A2B89179
CFB08CD31335BF56C3BFA9A6819731D70E62616DE4997C6C883ECA60623AF6D9
E93D1D93EC8C8C2E8D9D06EADD9B67BC0CBC2D312B443B447DF41125FA6BCC77
2A6A67ED1E3E4859826310476781777382D05A089F2CEE01C9E68921F58EC322
B1D86E58CE46F9982113791C051AE4F33632D2B7C11EF06056690527A4EBD1F1
355C3BD6C8641DE8AF71499D39CE0567AEA286091BEA9D6A443A5A773349515A
B10DFBF0BC3B537C3B1E57934EC351A8FFF8A878FF00A40E236B7BCA3A83192D
97B128519E4CCA3DF3D3E0197151EFFBD0C3AC4C36967A941825BEAB6C5ACEAF
10CF6ED9FF7180E277C771BBC84A300794A6EC7AD19594162682F9947E1A097E
36367B9D631483124BE3226F6BDFBB08490E8968CD02762CE02CB727B8B6F518
1D399378863E3AC6FD31927C8FBE090DFFAEFF60864D049ECBBEABB9AB7AE452
21207CEEE97EF66017F71D67430DFB26A3E003F3B3FBBF28863BD0C4165279A8
F60C36F81075FB9C13F2418FA6F805C3413C81B051C4409DFB641AF333A71119
C04E7C670E03482CC063B751457AFC19FD124FD7CD9341AB55C7294195B48964
E2F4A96FFD97B4D21C5AE58CBE93BCE3B522FBC3532394EE454709A2A06E998B
C239F96D24325048BACC9ABDA9206804375A8AB16E3C947A011221956AE269FF
01BC597921E9A872037A8909560E5E33878408EAA317D42BF6A57FC51FB377F6
5FBBED4C3200AD75E44E4CC080AED96338392E8A7CBE4369FC52A6A243D4ACAB
37996C3541108281E5CDC599E8BF2CE72DE9FEDF547B68A41FC346A14E09865C
4AF4C0E9655171298F07DF376DE565D115026FC43DB779E11299E7A4D9E7D8D3
70CFC9EAA5658F702B1EEE0B5F523A8B2E7812E325EA858A25C26ABBC4C25B96
2DD5B440190F11C953C3C8FCFCDF5C20A99F85CF1E4EEF5A38478C0F43CE39C9
A9EB8F8FA55020FEB0FDA41DE10DC4D29EF5120477430432067801A15476104F
2874C240FC359510597C3ACDE5E2829FD745C84B9029A95F60AA27FB7279FA09
966098754F32657FB3C5AB5CA033213722074E8876405E2368CF3BC650406488
18172B14F5B87DE5AC09FD05A1762B36FA02D42C15F4551678E7E57803293097
6128CF0D4E36F4147CF1BE39E1089B4E8CD7DD9C0DDFF09EAFAA8D67F25F80B3
9F4A584B95A9DC63FC2F876B779DC3E8C553F076877079FE2C27A4B959023EC0
FCBE6548410923051F875718FAC168E4E59A7AB90D4C37C4E6C970F7D4EA4D83
33C5B27CAEB1C72F096247F8F1C697A6FDA6211191D8856DA7689FFA37F8E0CB
8C621EAD3929CA3359322E25A5E9FF521C76D4AEBF9756DD3301F4C4EB5F7A46
D1EF564F9D4A077B576EC1EF005C040A9C6FDBFBE1B6577633973D5A09174E14
00FD3E56E171C25804C38478DFD3C9EF826C2CABE871AC7BFC460AF16C5AB083
3A996F6895C2B27804D8A3F901EE03A3ADB919976D4DBFF11B246AF9C2FE922A
8CCD848D4DC7D81815E0260D9F69D2E42819E144C77720F9EC60494281C0ADD4
A7DD834FF84339766A71803F1C6B5305C897B2DAF5748CC962C2E032AD6D106C
AECCB45EAB880F202DD21BFD7CC9E5E7B232CD9570DED42DA921FBB1DFF31785
3626684DBC914B43B953D2EC5687607D122DF7FDDDC3E32466F9F87266BBBDB5
0946432A4B4B5D283C822A47B5069F7527ECFB9E79DF4FFBF19FD5EA3EC20177
6EFF8C4D4B6B7A4D7D18E8F9AA8DE19082B5707160EE6EA3E6E8FB3190B7E1BF
4C2BD3DC8A8774E3E046819FA3CDFD931CCC6900B258DECDC3E77C89E6FAB2BF
AD96F77A39A1311917C8506BC967FEE4D90ADBA060396D9F990892C2D7E95B15
9A68B1967CA98D2A8BAC586FE6BB16A2789F0C4CE7806975398573D65BFE4FF0
5D157C03EFE10F06F1A23130C0BB4B083155753E239AFAC3A05017A993D91DAB
C265A39EE4A494BCDEE0725B0F11F95F8ADEFF72173E9A5F2AB2F62C427E5BDC
0DE2696CE3474CC7DD07E691CD9AA1950FE5D3ED2A5AB00895E827694FD82DFF
58B3F2848D455ADAFA8F7470FB315E82DDD7A545A4496B56480919654F753822
663BE679C05B4B7668B9D71129FCD524AFF3FCA1C73129BA85EB41CD483BF1AA
D3FAB74C2B69537837A2B70DC0908FBA28E63CC875F86A646F1492C18B24E846
33052EA5DDC12CCD62C502212ACD4ACE665C932C85AF503A78F1425F39CF0194
1C2768D80733E456821FF981702745D81FC4EF9BD374804808C980CFC1AD9B5C
F9DA1F1E6EBE9A14A590837CBE55E8818A643F3F3F88BB227E90541B119B7306
6A485F3B1D0C21299E38A93996A0EB7A3357EE47E07E13C4711484075AAD24C1
0874C856F4FDA49C612ECE7D8AAC4A74715CFC76B176E1104CE528460DD02F14
960521ED35A9488016DC834C3F251F5A4E3AD99E43A62A1FB0E2487E6B157525
363E1ED15520097495048C30EAE3CF25BB0C4EE70CAB7C5DA7C9BCDCFB67F1B6
6DD995DC518CB551334B31801C22BAC713DE7CEEF020D20C043E1D02CD57C896
1D1E0EA51C02097026083440BA42B2CBC71F9DA6B570B4451375B9EAEDEA1115
846E09ACA21EBBD2FE4DC35FA945B109E02BC9D0CA8F2F54C1BB6231BA7DA2BA
D9955F9061A59C954D39C688341996749BB68FA387BC053E36BBF9C0955610BC
B009883037A11177D54798FF0F3074A82D3474850D054DBD9ED91FC2C91C4992
B14CA7B8F884CF0B65E50AB3E501CB5D7274B154629AA70CEC4B9A451A119943
E2ECB4304977D9156198F440E5A3CFDDA5A71F8DB20E14DC06904F0684E742BD
3E2A4E824433934B7C586B986BD69FD39E64A4A5AB99C2D6657E242BEBBC0D9C
6CCDB639869DB9B6465B364BD9A0170CC19568A0E08CE6352CB79629CB55B772
BF6361D35B0C05E68E1C0C20518533DA77B3495C30DC53A7F96392D67FC82ADA
13FC4493F50CF3D97EC8E3A679D804C5B83051BC46076F01E2D91BA27FAF9AB7
A7FA0CC5A286E5461354ABFA8BD2B6DBBC8AECB140BDDBF533ADACFBFA00F3A9
244BA837A3603450748CB9D0D1ECE58018E16ECE31415E2010323BF7B94C460C
35EB74BC3C7ED241D48F5DB2174A712F0A1E33ACFDF4F850DDD4B26FB8B5C997
DF742A415DAA0CE1B8745736395AE80A8BAA07F1893EE9DAAAE01D549A252D77
E79AD37BF1594E3ABD9F8F9A2FCF96A2FE44B06C66C5A798A8B8661662842642
E43962CD0B203CF0C34C4E0A6D5C41063DBE65E34060F98FC38430DFD56AAFEA
4135F59E74D468E05988BFE7F399175DE7D08904B7A508E489571C79B5310054
E8AACA4ACE065E9060B8ED8671BA724909C1A3443991ABB04CA2D32CDD53F0BB
71EBEF1D3FAB9CEBFE5BD9DC1454D461B2681AAC16693FF62D9E03AB3AE268F7
C2F3919739DB56F4522D02299507F5DF31CA0AF4D72077111F936A36E33A15AA
AE3D4A2A56DCC2A73404E970D68CF5162AC51A6AD727D94AA242D99B153AB4FD
74DD116AA1E3C01687A658F558B8F61516680DB3C059EA8A23137AD2A30F9CDE
995E06A82E0E3D4D0616EEEE3D23AC8E183D32A58D3C67AD87A413F6D9746B6B
CFE2EDB8FB0A974AFDAD1A5ABCE8FA93A340D6FA33885C9B9B69B1C23A4E6B60
8D86B95CF89CD7510A3E65B51023E7310BA2D369E9DD9EDE9AC14E4FD09695BB
DBD7994FDA0707B4820157A9D93B6B6511AB4FF1A435EF8D03A4E346E54963B0
5614804C9235E28F5D93FD74122FBE17C4645285B9FAB32BCDC051BE4025B683
9664B8ACB442D8672C7E742F52F8B85D78805A95B8CB191C775A2DDEB43826EC
7EAA37C1097D33F137E4E32BC68D8280472A48152FF1E41C94D9928885FADD5A
7E59CB42872E6AA781F4570BC50881826A306E1DFD7A9290CDCA4A16FFE88CEE
D47740E0685E046AE1B99F5177F66C4A4B2D5FA12F6D881F390A0F59258E4C76
8AC0134A614BFB94C297FD39889A5CCED84E6A9B242B04ACEBD27260F059F014
BDF376CA48DF034EBCF26BF1541090805059DC8CA6BA8D3ABDB9EE1538E9B119
28A12D7760FCF854B593ADA3B57A15F8AF7771A5099DD25A70A0126D126E9C7D
4E169742EC5D2B6043E38F9D3D350C7AA1644047F74A2E0794D9AB80406E055B
5274F7BE5100977C6FC6D6D689AE576507F3A39B8057F1202A83E86015A3E255
BF5F610A61CDFE7F1EAA77D169854A04A6DE12D47876613723BFF4A68DAE8B5A
7550FE59B6053CB900760BC042A642E33E78B960BB15A2E89395A49AB5121BEA
666857D012715E3B92493BB601205A40E58A483766BE159D101863B1CE6E7D80
0138FDFF7F5B941C7D4C1A6BC35BFD2F387D01E4F56E5EC1E636E9AF44D989BC
AECCBA2C9619BA020984777DC32533D1B154381BA3ACDDB9797E3595FB04365C
D4B4A5FF216BD8534C4ED6F449E969B40F89C7BAB3F09769CB0CCADBEF20034C
2F59E19726BF8E436DE292F16B38803D5D94C3C8199AEA2B6647A883A461F0D2
C819AB1BD86DC885DEE281E53E2BBA2BBF84D8D4DD7FFD836407D51EDFD1383B
E1BCACBC9B10E2D7FE4A6A28499638957480556CA407E57C5BE21A9DDA0AD4D9
24949FE07C887741C0A255A16DCC32BB7BB54CE2DC59D4DEB7F340C8A71E60B4
CEB9383ED0A8391D817BF93003D99EF3EF4BD87036A247571D2628CD9A1A562F
1481E59AC6A907F17A4C84ED0BF61A99266AFE0BC2925DEC6603425478F90B09
7142D73136458A6868587A364E5DE440E3671EA82ABEA5D6505375C53C1C54F2
74A2ABC15F6E90F7ACD4DC86B73EBA2F8F54CDC503FE67ADDA409BDD0F731B90
C4F19A0999B940D7B30E13B1118FD1A28784C055B8679004B35D754A18A615A3
D23ACD78645D8908B6DE06EBB5886888D4A6C5C7AA46BF45AF4BE80774788776
78AB3E75F3244DF4FF6E2C70988FF57F1229543E9F505EE9EA569397DD2D8B63
33C5647E33ACCE6F11AAB9974BA91A037E8F82032B7F7ED9E61AE94E5AA7D00A
C8FDE35422E18D1107544C13AA382A565F697D561034581568304D52C6D83326
0A4EA5EA2E051985D4BA9ED64D12AE542515AC1374C62651835900CF9323BDF3
2FC40F93E50CB84097243D32C2D1B6BAB87489E74A732B9B7F6CFD3DBEF46E2F
7BC79D272D8074CDD68340D52E137B1DB6FF17B6678CB3F1C9B1FF14094FEBC2
24D73D391F0AA6AF31B474E27B25B6AAB2F67D8F7A9DDA4E8CE8CC248D31ACDA
955F9AA5E0441B3B388BBEEED1D3056387A8F66056F954E4C9090E4A38386A63
47B7446990DED4390410057B008334DD2A25E3326F02BD117F82FE4F8D74710D
32187BAAB8C78E9ECFDDDE7F42128EAE3004F46894726A7AF96FAA938D96A6FC
2785A8C80F736AD31612362758E8DDBBA646816DD1E6EAF6999E13D836C7B0C5
7117C97D842DF6AAE5843C949952BE48F9E5C850205DBA7AFA87273053365758
F50534E61D650001BE80A48A2B1CAC0D9DA56472498878636226AC34ADA1597B
2B23416193A2C89F08E56C9637125725BF8CAC5473F8755B70B4ECE61DD6435F
C6A7C2B91B672FA23D9F875C001E76EA321A5B0A94FED862564AFE70CB777340
59B1B136DFA65DEF4997F7CBB7FFC71FC82F8D173315A44103BDF54398519B5E
05F8ED25325368D4BFE10ACE43981CCE9FA80DABA04B73CB2E4EBCF70184C5E1
D9C9E3DF6D0AB7F392A3C7A4055D56B801F96254FE0E52E4700CC663CD9F1C91
C479F86CD53E8CC9DE6B2DDB148E81B1F6B9E2B123994334BEF890240C606276
B34A7453D932AE04BA8DC50544C74A96F6CD2A907CD9398069A573964AB81D00
731AA12F78CCF3BECEFDCA01075C07B67CC7F6C981A1BFDA28D5BF0F0F1E3905
5E86180C7D70697B73BFADE92A6D8B2AF034C738EFD85CDB54556BC6C7FF68FB
D043603C6C26CD0F254CD8A11ED77D05FCB64F261AD82C4A6FAD3B996A4BA457
7C38C8D4DA614E158F4693FBC3115A5D0AB5D098057BB2FFC2399D9F67A7A438
1C9283191844BA8F78896DDFEC3016130B68017CE4B928BD9A8633E12F5F0E15
73B4EAF93F32D4DA0BD5BB4D841672A26EA389C49E7CBCE3D62B490CD8884C44
6855340F9232A7E8D4FB1C5B6D1A5FDA8E7B6EEE1454EC78D44CF0A3C96B3CC1
2B868DE5F556B5B7E9971232DE58D373297150A1BD25542746ADFAE256888BE8
E7AB32A13A3DC4FAE0E34E485C31FB2952DAD2A6167A48606C83FBE5FC602B7E
70A0047A05623D54F22D03931C568D68DF1CCA64E069D10DE577C4E43F0E4BBC
06F20AC7F81248FDE0B428EB05FDD26BEEDF3943D11F3E54411986461CDF084B
59B5786859662242E4FB891859F8D245C74A25AAFF389346BEC4AD125FB66DCA
12A965CBA2123F9C30FF7F2B77E767A4C9492E72CFD9691204C1D900CF57932B
A4C9DB0F15FAFF7CBD701050A1DB9F05E30A67FA23F60759FECFDF1379E61C14
31AC809D401D2B7BC4256EB11057091DF68C3A9475CC0A3F8F2E4F70BC2C42FF
FD53ABAF7ED904BC8AE20B2B15F19F8A03B3AD6B1DA2D5D8FCD132607964E58D
19D8317B77DCB33EB74DAC05EF13006A116C82E1319A636C7D42C6CAAEAC3FD0
AB6AEEAADB72DE788D21EA16D247D6D3A4545858AA7A9DC070AAE46948ED4831
B9682349058F0AB3DD3C34E9E9DBF1728BE7D46E0435F3BF94F2F019832A6D1D
58D1071D3D286386BC415C75B275E6C81F049B145F14BB6A57A8209D2961D621
F6CDCF1A1A7561B5B8F7AEE37C714CFE26A3C1C28E91DE1632FB202339095AEA
546B0A3F05C7789F3E9C32180B57AC2F081726B5230D7FAEFAF02DC8E4C2826D
76AECC974203B482A98F151CA288979D907126C6A6BCDF7DD623DB7EBDCC5EA3
5F7C4AF039C7D12B6BA9169218D70EF87874B2524592D4D6813FA53700775B2F
6459EDB9D667FC68BB092854DAA7B54F9E18142403BE85D1E2F89F77160507D3
66B9CBC118E355CDC5E86364FF13B34B86F0669D4D1344E414D0D88A66D6B4F5
6BEB9360478E29A025ED6D9481F53CB3E5279437695F4A115F669DD6039FE44F
8E33DDE269A3E703626A0F204E36BEB8606041ED5B9C21CE4207DEC332AC167E
282459BDAF6F4C56D862C75AFCD3E19A4F5D703731C17E595D0E697FEC6C9A25
B8249B6BE348681CF88CE442026AA09F828E59584BF2C6B3A5776BDA43E4B128
3ADC30DB82832166A9202C67C9E65F1047EC22A936598B5E50FC8DDC8DEB238A
2554A33C7358C2AAF242059AA51DD77F8A56C433059E839702F7EE08F27E984A
DFC4099E1610A8F1ACBC0DFE56DEF7D42B2D20D6BDE27B65F9176558D8B65362
F61FD87D9D67AF025C9F7479F64DE90E4A3DB09F7D4988BEF2B66E5A06922C91
F5C99F9CC06418549D42176DEA4E100EA4BD6388E57AE9B7B392D167B63BFDC1
102565649B536A78D0269E8D4CDB7F92E030156C7AB18411EC8745F5A2504B35
3171B8060DAE8A58AF29A28A5E7AFF8DF1AFCBC64D00EA6A7AC505A4349861F3
FE8BCDB2B447A5343C788D95DABC4ACF593CA80F3E58961CB4947776D74FB575
71A6C97A4FB2C2CA4E89F6003274118D0B8D1E0D16E12F268CD34DE9BB73AF0A
E804E361E17E714A55EC6B6F452C1367BEB5D5FCF8A418B61D0C3D28A6836364
A9D17B40FAE3FC5EA21CE3A2075A5E0121CC9E245D34A6F1B4B45EAE75E17F79
039819178A985CF7B2AF77E68314DF7F0434C9599D055D786DC25523AF3CDCD9
DC0AA1123723667CAA346973A0F5066F1FE1971379E54DD05E408C110710DDA8
5C1C16CF7895C54CDA7C674957535E6146F7B92074669693172749E9A764A603
BCE0348D5D22B2733E2833762D35C21692444A5D7670BB0984D0874BD9F92903
AD7E78E974952DE93A5E9F665AF8A5A7AE483E4D141F7DEE6553BA479B6B5969
C0D267A71A2DD629108761E697057F013763629BE817F053F9C6A4F1809222FE
151DAA84C3F9FB951E4C6A881D35642453CD33E37CC71D425F9409954DF16896
6159B2A302B801CBA1E63238135BC312D0784932BE8D96BF2009528DDF1BC337
BAB8BECA6430A9BDD541BB58FF5F7DF72EB99C52765F4E3ABD9F8F9A2FCF96A2
FE44B06C66C5A798A8B8656230CD7B29380EEC1C415FE398C7CEFD524F132A4B
87685C5D06D306390158C91859859A1422520BECCFCC4A5E8E98D5A9292428B9
368284EDCDE7B6926FA86E48621DD51D09636D8DFE49F75A1FEA7FB038BD30EB
76410AF00AD9A05AA68412AD77CA3723487975E0459FCAFC4FD61907FFFB8D75
440D43A1842CC1C2BA1D8A19CD2CC2E74DC37083316BB788B8144A0C237CD01D
837AA0FCCCBAC8F301C6AE40B1E8069D42CA641ECCB3F274EE68F698A5F04C18
90793107C2B1A92D074AA7858330EF365B3BAD7CB21A2839A6AA51098822900C
C86908B9D3FE4A1A5571EC629648920C1E93A885AA32B60705B9F91F177B3C28
B94BF98BEB5E954654E6B6FB2372DC0483E3FB479CF362CD3E0E82CCF3800919
71A8087A61383E01E648353C0694949F1BD28A6201A92B2B37B9D012B8BC5C0E
00DA9ED1EE234C9E8B874F03F423459E59D373C12206A2E4CA7873DA692889A6
6771DA94EBB0ADB9C6FE5301F6BE20A18A2606939F993310890EA3D630838F6E
008D31F68D465247CC08127C60B94A181D75FB34147D95813FCE9879E4C129CC
139E86E1BDC3F13FAF7100C965DAAD35575A237C9637BC3A58D7BB96AFD1BD3F
1808F700F3D71E36014C5E4B546CEC445793129113559E917EE43B7E540D9AA3
C82AE44C3A37CF0E60BE926315049E5F3DEF67E0DF4748B39BBE76D32933BFB3
185C3972FFB6923C9582F7A23284DADDA9B1AFBB80F5A0BD1C7A2F77538152B5
947CC3E44AA1EA09B9E232EFE04EC4E57125734B5243FAA234C7B6DAF3900E7C
B303DAD397B2D35418F4916EA7047E5C8557AB268C927DE9A9F7C124E31954BD
56CEF3F4E6DF31CB57F3203B2EA9DAF365763EC4B13359CAB5A34569ABD98115
93AC6AED960159774FFFC6E9FBAB623021FAB977DBF011E7F0FD6C9B3E98788F
F1528C9A23158682DC0961E419589E32AEDA5BBD35B37CA39B7EF603BAD30752
8DF5312399FE4A770520FE70622847AAFEDC471ED6488AA685D04243BF460051
DA59D5669B75B16D071E432931CD32FB8C360C24FBFD400EB6582D664931A748
FC9DED39C458A8EB2F78739F2B7CF3997CF96CF1DE87958E94147897470374D3
3501DA608F4A8CB980B95A2F77EC3E049D527B3C51560442A175D247B53EDA4C
AFB3DAE3C39B1E9D5222A83F9E39E4E85F8E13CFB9D2FE13E54BC833576A95C2
262EAE7BF29420234376BE5E02D7DC4613C87ABA83D059ED0635D5874D55243E
40222126B2F695F1A7E22D58E88CE48EBB539347FA442A4806BD491A18FC70CA
F6FFBEB70AE878B9F8512CA06DB14CA1F713A8EA6A54D4D4D8A18B49B704821A
46FAB0CF0C068ABE8311584D42DC94734B633C9824BB9C3B61627ECB39D5BA7F
8E095B9F852E5F33B05455FD22B180CC4F6E2E9E73D5148A0EA43D89ACD8EDEA
ACDDF65B2A9F922A4995E083622B36DEFFE1A6AD802B4BB204C72A1F623BD124
5357B25695DDF5308F5C5C3C7202CD44D769594E031390BC67BD982A9F3BBF00
8B956BEB87358B8649DA65F548C6ED1A1BF9F20ABBD8D6B0FDE4F3E768E06011
44B6E3AF224B6029ED2F2A0D5809CDECA243C2122F18ABCC0D24CC8C08E7076D
8D7079F3CD67379F3C1A1D113CB87969B0370D0DDB829296DCB0F194F0122801
8A6DF526D5C66A9F11AEC07A100C7CCF0598725B71B194517E84068E49784990
D3377486A6E2D6AF18D39DBD4BE29E699D9E44B7A6E99ACE99DB14455DA3F94C
AC068A62E2B9D20DFDD5A0B1D64C656EEA8A476BFF735486A45A6FAA91966B43
31FEC05449AD7D0EFCDD1AD39D700E23CD325C78530B4647F4462F88BEE48FCB
8EF47B21A1B617B4AE15F2F5C02EBB5C74893583675BDE1B50B9A16545A27E0F
FA72D79C7D48B5A11B07D68F5C193DC6A2967BC611E1A0E232A0FF57D067A939
E94F7CF632B8E1AE26BA4CC08A38139660C9A3A2B1307551D85FD13434A949BC
F4CBEFE16B4C6C53AEBAB9AD1A618D406F7F4BAF61516F52BCA6767BD06B2121
2750EF53CBD60190167BE5425BEBFC580401E723102B682020B16CB12EA00AF9
56F97BF607D65A6C8F90CDA90EB5BB2A7B6E8184FAC01F1A052E2320B23F2F3C
EEF3D5A8D4E7C88ED67B3A0F9FC331F65DBA098C7757A3B34E5051A927E861C1
E3B3D0547E1F861FB0F3087A7CA4D0F1FBB0C7F6B0E852B1FE8AD303E24F3DE4
86F92FDA197833A0CF88A8F4B9FDB477010C1E685F759A9F3F1B4B2CC627C779
AFDBA3F62A119754DAEB4C88C6F6D2CA046B557000AEE3099557CB16B5DF771D
52B18ABD206531B6B4968A465EF633F78E4E2174E4CA868698A7B0FF83E34837
6C2350F02A266E492B1B5B5FF9F02CECAAEB60BE4ACDBABF6407AA8CCC637332
22D0687E1BA843C2E0831CC5C9941473B3B1B5E150E69AAF6BB795029ACCC87C
BFE7BED6E33A994E2F6DD48446BBC06BFFE286C366E1F387AE1ADB3E2D7E75B0
A8C76AA6C998C9AD482CED7C243C9688349302A5B242630B515554702965E146
ACDA25AD6858A3F2417E314A83705E9D91A2FBE40D45B43CE00941BF12D53BCC
A7AD72305F06A987174DF0D9A5FD9C2FD58F91AC367C67CA2A599F1F4BA039BB
B26179F2A72599892A050197AA2B3B5EA40431A79BB15A93FF08E3782FA0F58F
F4DBCFE49EDA5C3506C20409D6C7E5A56F93F114B0CC66EBCE127F142339F566
E12D07B1944DBCAAE4DAE588D8D7C24466E5410DD289DF78C335D2BE90B5C581
D356C88228BF9EAF57081F57DBF9D74E7C3017641863963AD4CC1BB1EE4DD1AA
03DFC8ACC8BFD0FCCA75F4FC8F3786D2255515DF5AE0BDD7D9580A0C213E6E21
3C54D0285908CED279613FFAA3D65FFDAAB3B89F357F7F55A273863460339AEF
AF4FCC58EA396431BD4F95BD5F6DA6A7373976E4602903337BF4700C384C1397
A1C73E736C5F9CD0520E3BD010450623261C5AE48FEAE00B6F2E354C21F37535
9A1E169D72539B6B282A8FE68032B72C34E8321EA5ECBC5C34FCBD8F76C58F12
192251EC2B1F95118E275101FA3EEDB73500B7AB35DD7F93E4DF60BA32109DF0
1134ADBE2BB894EA141B160B3A6BB1A35F0E7FFACFCEE5D0DBE738084795BA93
8A28FB17FB62CFED083AC493055F56769DE68B5A430916F45E36D0FBB705DB00
4CDEC5B425EC8BA4590DD3555C2E4BB60197FBB2324E16E784DB558D875B609A
4EE86A1212B92B903556C5BBD7CECD978DEC483D4DCDDD173894CAB70B73187E
5BBFFFFE48BB752B10439B1C9A22F6F2C0297F26F5E4F61718AC73AACADC529A
2B37845CADC5D1C00E25927E8522F64737BEE41CFA13CA06EAD9BA13FE15B781
EF82A766D7B2288B6905EC04ED310E37BD380A32270F4981DA73601D40EC171D
E0B4C6A03AD8C04C59A7A86BF1BD10D45C621F75AC6C8238797C13451EF9C9E2
1B9C60F64B250F2C271677B03D7B7109D7E2882951375BF8E9EC27CB2BF9F9B5
0806C8FE8DCD943DAF3FB4E3A363CE18EBC25DD3051000381027F2561397EB2C
00C2C8E4CDE0FAE8765850D7D4FA086B02F42B2EF6104F0437D55A4BA4FDD09F
58F253A769F6124346CDF97050E356F2216D58A6C3F04416E90772ADBE89EB22
97A025219D0B26577B79D8CE6C812437F4652FC3F2D13B57FAA8454EEB264E63
9037B49179A30521980A2F726D175D3D2DBCA69E498F32062B9F76592A199EF3
0B7213B4E0207DA1714D4FD23C2A41D2AC04770904A626401F96F39B135A0771
9C60E8C7FDC5A23F9612B8E33A7E197F53A51DECF3C15409EBDC8373B81B6643
420F1ED8619221907D5FBE2DA7B09218D52CACAE1A04359919D7A483FA023989
C732BD7E0F9B25F3B832585776052FF4259FCEB707A5C6C2EF271D1F114AF6C6
B54A7B670B7EF3DA9BD190734430A722BC5771EDC49791B4517F269BD5D12A2A
442B34E1887B77E83D5CE017FCC070EFE5436B5217141196B0C9FAE339109578
2AFC3D84143127BEF91CF8BC3F5BEEB210E4A52724E729C277E902195DB76404
86D1E58C2B1CB5633E89A7CA6CFA4DB4C08432BE4C7B86AB11BEB8E4DB8C27EA
0282527FEA9665609F8665673014ED96902B67BCDC6AFEA2CDA4C53332359B81
5CB20A0255ABDEB555EE5EA7AD4D7782A8387E49B8F47377FD2DB400DF06C703
97503DF67C10B47377A99EBF014C9CA4E3B35C0BC7079A2CF2E2A1529550D55D
4475ED7FBD93C1F87AE8E2EFEC6049BEAD2690BDB45E16CE51A5BDF5ADD237D9
11F846A5870C5C77B675F10EF340B414DCBBA762DD19774B377CDCC46D47509D
E2EAF3188FFFB04A0D7F1783EAAB80313773E1AEEA857364EFDBD889D0B0D95F
F70261749C498DA498FCBE33353764317D1B48CBFAFE44700EC4BF9802995709
60375835946C8E9396CBD0A038B6BA98B6078C9FCA1556AEB8E16DC835A10AD7
ABE3064F74DE76B69F4B120AFB3B01762047EB6AA63325C7DCD0C3807EF985FD
69339A95AAEC516B2246E28BFF45165E55F75184B73917E43FF456B5C437ACBA
EB9ECEA7123064ADA03DB2711DB0E843C914E2523230A91A1CB9421DE1DD7BC5
D109B52B7093D785F43B93495E92D63D8CF4BB41CF35ADCD5851E214DC90AAA0
AEC5D6BCF7C2E9B30A6238761A2CA14C65D8E32F73D4E8B543A8E15583074434
0826B71B9DE34E73FE10D63F204C3C38D574BA9A237BD00A733EA05D613301D6
A4D192C3CA3404EDE621A85F81C42418F86A00F9E86AD2073FB0A5C97B6B8F47
63D21E005D89FAEBBD7D8B06F3FE17930EC9C57B38834DF8ADB373A5B5BDB1D5
7F414F3E36D7738248D16339B87792FD045C0498165673ABD3E9F4CCE8B0B5BF
7C93F1B7E133F3CE574A44A0C8B129D039D172AB4C64DDC84B9308951D2E3D03
E1F9908BA096FCCBB914737AA5CEA6BD1810DB78052DCD299EEB942958E49EE9
B8C416441356F36BBC9C5B520D70A7790A0DCDEB8C7DD2253359BF88813E02CF
B65CEE1B258548A869DFE590A228E9F7A70A7F40E6350594AF318C9157FB09C1
BE6A726ADBE3DDEB36BCB784B51270EEE16B0138C1732A5446FB125CBDC8C2DB
390FA2BF1C1B653BE9ACA74DD371CBFB3911504D585603B92C1EA90C5E2AB594
402045BCBDF550793A4D95D4D5188EBD111ADAF13004B95BB6A1F917A8019CFD
9CFBB246A971A093D8E5027D67A89EB217AB4A3CCEFCB8A59AE9FB7ECD21F133
B000DA6224A258409A914C01FD5FE881F9994498B9CA251192A91D5EE103C5AB
672FBAA34480102661BF79708284028C82CD973A9E6B2430EA4F8FABB522B95D
C2DAEDE74C22B157C997B49C3B0C01D06164CF75F70F676D9E02F18C584BF5F2
330AFCE8FF92E2DF9B35F469A1D0FCA9165CAEAD2464D8D80FF6C61F4410BE76
99FF13BCFA7CC1EE9EB90AA437D14EA2377CFD4893E36CE805EB7688E1838090
95E88840F703E9BF997E8A66669190862021076B58A9D69B6A72F68743A3C4DC
4D7CD5BAF0E97E3DFD0C7883FB18213C770555759AFCAC5C084DD5A3639E861C
93447BF902FD4D1EA7EB2FB58965634046A4B8E83FBF92FCC32B212DD9568D55
A983BB46DFD9578CDB410D411CDA75C4C5C7864FA957AAFEEA79FEC8C5BEB893
92974E09C2413E9C5122A11A7013315C3951AF975940C61989DC798351E5887C
989E252F50035966EB750906512FE791EB65AE23598A51E2CDF7714D94E9A2E5
B7E8689F2965CCFBCA090FDC33F885179DAE71D90EF50666EB10A2A8A57A14B7
F2D4815E0733979B9FE7F8996A9AC2D5492238EA2FBDCB2AF1F9D4FE05F4BAC0
CCB1EDCE8DE15C91AD9BBAA1548F91570E488636BF698A52D1FAC1883222A1C9
0CA4E940136520C8AF7DC481AF377EB6AD29D1471F677B7B54A3B04F2658BD81
7D1433692207582534D5F0F263FA4C86EAD88DD4B09584544A618C33DDE269A3
E703626A0F204E36BEB8606041ED55E56104B09B71A9DE12DF6BA8E12A369E2B
8947FD5F53B850DBEE6D4A863D81138795F521C6A95DEC14BBB3E9E510D14731
1B7C07C17737878305488298DEF3FCFB72D94590990DDC70334FF6D7B446F67B
F70AEBF35A2AEA5EF0E6C62B7C89ECF3F7C1839FEC5F71C3D5C65C82140AB25B
31026B49433392C8930BD9661B23C2EC0E0BCEE06185B5393B876ECEC4101176
BE636CB678AE18A2CBC5B611D0E9CBD331ECA61B000C13A681B5D7FEFB9C02EE
90DB7C4531253BFAD3180DBDF8DEA31BD5BB3282BC71979FD087F5EFCA127055
FB6906D32A51B388222736EE20045E9BB177F9AB0CB24740C030986DC5780E65
F298434A12E8F25CC476C28E885813F6CE09B4A3F3913BF564184C28C9658C9D
7CC9537381646D5C05558F6D4DD6152A1D5DA2D0F052EDF14B2DD01F6F2CFE73
1360E35AD60073525038B0684FCB2D9EBF55A0F30B143C5F6FAD3E4A3F05A56B
69CAB3E6415627E4909A1235F7A30D9AFD5CD418FCC94287A5836FF8C17C48B0
F9D652DBA3D4B800D58CFC32379D202E9FE870D53EC343C1153C1AAC0C6105BE
A2372072096958431641E18570C8426BCC41A5F11E5AE7C363134DA775544B63
D281D68BD2540DC36ADD31D495CB4679DE11F5856534B80E1124A7837CEAE15B
B2C2005DDD22E105216B07102B19D097203E35CA5E34D787526FF92D4B6849EF
0307A64CBA38ABE4F77143EBD6C7A518F01C5F5FE5DA048E15F885C0A3B24E09
0B54A955BFB6FFEFE7D6D6BB6660DCC1DC1737FCDAE025AA14564DC6C315283E
72EC447BADD5BD58B053A11BD770399E3F38664C5BF95DBE48FE4DA1BB5D3B1B
4DA1454568CE4D5FEF9344CA2E9C00B041913AFEB4E45707032333B217499A6D
6F2508D429C62585777EB9E6E9DFCA889F03C40646EF8F61627487113ED4682C
5B84F61C5C898692358FCDD0C64D459276BF2D8F25F13137C7F1CC459CB3BFB2
518FBF5523D79229E9BA352E4193A44EE745F7603CA4EF14CFA31029F8E45D5A
2095DD40AE0EA50D2705694FCB376B60F312DEC324B31B9925463626648DD1F1
9EFB4B49D5E120C8C3C96A3D38A88E5D4A95594651916C64B1BD50276F8595FC
6E2DC97AE7BD985281BDF4F0BD8B4794896CAB73A2F2ACED52AF9D066794BEAF
0EB7FC303F544B8861F1B9AAF83F3992B724FD0BC240C4212A46ABC9FBB66F8E
0190FD4FA2A01243ECC2FF706CAAF1A1EB8AD846B5E4499D2BA1C06D0A411013
BC1C48DF7998C8984AE9658C1D31A1146AC68937BE06FC429FE06F9182268D3A
75B7CE7B869431B9D9ADC70707F1E303A7121B4844A95183E9A00F23B160EB76
9999035BFF29D6477B2C3EF7CAB079820BDC766B82B3FAB8CF0E009CC38FCBE9
B1D6160099E34746ADD66A33DDE113947D62A2B534DBD92DFBECE8BD97365FE4
9B49FC6559F36EB99954FA1F8110F1CF64F796A69B56CF8D19A92FDA9D92D528
BEC808F6D1E19C7B9EB91E9D437BC0D3C5F88D274A1B0AD7C2DC92998386AF12
D726FDE9DB363B64FB386AE5D97206CEC98C42B1B44DCDCF875F2F50712433B0
35FF929C9246E565CBF60C005DF6A5B72CAFB92972405C31BC9B38606618CC56
BE4C33EF004E9D81DB3D3D073C788E411688DC384DD5E84CA0E11E8CC50606CF
C2CAE764B3EA319C4999B89EC06B5F5D7402EF740D8269F89DDAD2B20B08FDDE
BD276EBF15E19487EC79363ACC8A5F238E3DCBB390BF65906DF738F1021C0916
B16B7B850F198585027044829AA9FAEE6B4DFABA37C3D6F4F3FA9D692B72FDA4
87FC97405B40E4D96CC0B2442B2943A06D658BADA1B04191E4CF58CC1BCDA670
0277DE0ED84321704FFEEEDF65515DC8D31867261528852D44DFB79A392548A4
3F807BCA85680633807C2B2C1AF28456A2FDB26C73ED513588E0AAD3A215685A
826C2339ACD72FA593B7F4BAF3DC9AA25EE49872B3A5A9CACF0844B0B6D3A34D
3EA576C6B0758D49F3F924675746C155677A26C9B34AD43B50E195EEF2F9BEE0
2740BE4D1168DC5C66DB2C1A112AA70508BD399E341B2754EA785B1222602B28
69689EEEDEC6BA0A77E416B3E1E270E856C38F8D17F9BC97774E7DCE203A2E9C
0AD449573284DB5665C60E4D1C76250F53756C2336AFCF35E7888916AAAFA53A
798B85C7A583C8EA2BB496915DE6681C78A58C4228B9175DFABCBA1DE60AF5D0
BFCB8556835F398B0973BFEA47B84C70DA2A7C674E763CA703070EF01CA42AB8
F78DE027E52F8ED988B3E132363BBADADD81C75FB18C5847CD6A5B2ED1DC99BA
4C6CB86E19871E1B2707A5C5EE2CF6CF8A8BA9A40783066F41C51550D658473E
7E5A9C0E785AAF34E909F2BEFF817D85FDDEE6C05958FA4347B00F52FB1052F1
EE39E64DEDF80BA158F65CEBFF831DDFA4F8E374995194BAB1EA2D03009FD701
2C7129FCD5D8ACCD47DB88B34B4A41E7E6C658832FFE9B82060A18DF35DB6D69
3ACE08D1DFCF3F7FC13D6CDD94F432BF63E378DADBC7D821656831E90C5C4A2F
296B0F47219D57D3643DCC629341F79646303C1BE331
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols6-Regular
%!PS-AdobeFont-1.0: LMMathSymbols6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathSymbols6-Regular known{/LMMathSymbols6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols6-Regular)readonly def
/FamilyName(LMMathSymbols6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathSymbols6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -948 1329 786}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F1E34D6494BB6367FA2B172011486EF5
844F5B89DBD01F38E82689CB16E2BB46A5E39043E718382C77B554CE0F5BDA45
B555F543B5A4669091DF58B79AB8A54B63C4D96C02C4B32021405D3A086D8A06
2E73A4A478789C6E51C058FDFA980ECB2F964EA385ACFC9A15416BFD38DD998D
35255414BABB9C6DD923B8E866EB22731B625EB76647E680B79EDD64B5B6D9B0
ADE8F024B2CE77FE9D87C1A1286ED288D3FC51CED96F6009F87E505A8B9D4288
4AB9134B8325BEF5BF60359BD06C20186FA72EED84622454B0848BB74A51C541
E9F8468308E20E4D41FE78074ABBEFB80E7B5B58641F660CCEFE5A36C7E1DCC2
862B5005575BF1D4A7845F976D9A52A7E2A33558953A65CEB6601B904A42E75B
92CF31D9B57842CA62CC666700C974D6C7B88C4E3D1A1B143DAE1E2DDF725758
E2E6EB357406DF364D2720E373DCE143CAD7FEC1812EEDFFDEAE20D75039850B
0314C68931A618291AD30A299FFD982858215E9CB25FFE9A6A805EFEE2B01B62
8A682DB0C011615552F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D8
80BE1AF192DE2AD3600CFE96D7F2280FF1D7AB28635B3FFE975FDC6329DEC300
1F56A4424DEA4A64D855B319ABD08B73E84F536BD6331778706987D7AB15DD1A
4BD7C272B4A0B383C6A680B6AB91AF0A3442AA8D1F163221902D87F9923FA77E
3346F09DE23C25D4CA5909B956FA16229BCBC3FF36EF6933F33D529CF2847EA6
D3A482CAA539ACAAEDB0299025B307CA410FBA6D82B4733763DA07D521E34DD1
6523917F436B78AB481B669A0FC3045629580338F4299BA3791CE905ACDC0521
A97B1B4CF963EFAF9A4B6076068BA5EA2291546CBAB47266B4A1084BE1F19AD4
A0BBF8F63251495D697C3F27431322487428769535A695EE6E68E20ACEF6C80D
3CFAF1D64328E1F2ADC486385B04884308AEED7EDB2A5EE1898351F145848C92
E12BF63F2AA0563C5BFC7704BF708AA5581DCBDF10BC2580E2D471AFCE1D4A8F
42CD07261DB7020A2D36E903F8D17B22D7A298452CBF26A187B818CC88A327E0
97018749375D926936612BF41AB7675BC8181D74B98C710EA49B78A6043B4911
F61CD2A8D4DDBEF9708C030EFA9DC840A44D3A4C6BC14EDA6F08AFC50478008A
160ADA2E50ADF94729FB02BF36187852372EC1A74B3AA100F0D9CB24159F97F4
75BFD6642658E9092BDD1DD2CAB396F55E86236BB24E7AEE3CA7889EAC159F69
CCBA8931CC2CAAE942B9BAA2E157BED7565ECFE1712AE2A33DEEA3A05C10362D
184E17DEC1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3FCE3A9E67ABD53AA2095C2217F80B3EF7AFE49961F4
61F60F250ECF1329A62A5D6C3F882A44310C4916ADBC3DA9B6BD436AD86BDB2B
16C0E63EB1257ABFAD25F281D32B547B31CE48D82E48819606699CB2A75A64B5
D1B5FA98029D7CE623B3B8E9274798F32EB5455A608A969848587FB4216C3C35
4877EC108D8DE8FDDF058F61DA3D0EDA68EF579CD4EBFBCF2F88DA535DC05FF1
5EE718E01518738F7E6B887898261117EDC211226EB3AF880E5F0AFAB2498FE1
D79954BD53619CA37601F681AA949D18BE7A0C27B1870062A9EE8AE41F58328A
DB5170FC710F29B4CF6AB780A4E2A1732B3626515EDB3004C44AEAE92C7D6E49
A68F23BC5D249C4A3DF3CCCCAABDCEDA355F4FDF613364034860D574B000252A
5D8DA8E25DC55CD4EA45809FA89CBA0CAF97C045A54130D431695D45CA66952C
53923653511BC070AEEBD7A6206DB51E022B378073A32722BEFDA8D1EA7BE1C4
6858AC7236A130C5BAA5744ECED5515C36F27E883157C7260465A657929DADD5
64021638AC293FF604364E19265E828274EFA7943AD449C7EC1FB3A6E71B557F
C25850E187FCC3DD5B2466C6615CA30C3F71D10E1D5D11BD5A31DA3A305FC549
F4D79F4BDE53501E2ED5A81D91A820DE59A9AAC76D12FCB66B4CE99B98936F3A
AA59EEE03D5356625E72E37AF4E0674B33FB71C3A77EC1A63C24330197667FC9
0BCD004E429AA00ABB3B68B255C69242F195F7585165B848830E6987404A4ABB
B490D44EE8874E54DE3E991946936E71642D04AB88C9E9214E2C9E8B8E5C5E5E
CE2FE007319FB5EBD4E557D0E27ED3249C0D357983FA4F9EF4261DB88C753421
BE1BFF2F18BF6FA92CFB8D56EBDA0ABDAFF561681D2E55676B54C8083FB9F9B1
F745C9C1ABCBD0A3840BC12A50536D456D91F1A7326A617411A994889E5F4C12
B7DCFB82BDE1D085D424A7799AA802CC16A540A8010F191752C91D28A7E9A438
1206E9C9BAE2480B22D91F760BA9E9DD64471815F80890529C9CBB634123A9AA
05F2A23D9835CAC73676379B1C9EF2DE00C0678A9A41D8EE678A9F13829F5C33
DD8DC933EC51C29F69C16A4BF4B5FE40C7A1F2A0755A8D364357C3C182A4F4CE
D4563D1A1058ECB1B65D7B0FE67BE7065E9C2819FE1F447DF88A027408705982
72256473209B6AC1DEA07B2F816E362984CE1195B394ED9261DBF49C77C205BC
F6EC70486322D809D88A85607A13533C0F1A35D17BBE2C155617C891DCF8D72B
1C02DD13F028C2854D5C92A837C95CDD6F52C5E106913FFFEF5DCA9DF9668ADE
0EBF02416DD38F1E799C62E8CE9B29B28ECD84C6B6B50C712B0E67952BC6B80E
C514976A747B4544A6E3FC4E8F16E9E1C694127CDE0638BB7E1E70728E7DE9AB
CA2719F6D40FCFF8CA65EB7625F44D770D9FF8337EB42B22FB5B412CF90E3853
893D96D1D156762034582BD3AD59FC1E283BC219B829C21EF7935E4C3D1FE64D
079B52E7EE48603B6E1966B7D4EFF6450757594A9F9E18FDF8EDCF5DEF1973E1
6BD83ACCB957EF4B4E2A556E9BF132379786216155C16771B264CE2E10382729
CD435B3D4CF60E6BB7CE747A419E0820B923D58D36C1B07D0CB7FF290ED9B9CB
78BE0504474F51E3DF784E3E90713D11BCCEA206B044B57C689A24FAB9AE0897
92DC22B8AA4C735582F6628E83CB058BEB183D64A28EEE13F569D70638B3F88E
65EE6326DF35FED9F3FB0EA334FAEFD14EFD754FFB19E9763628F8597B11E16D
20C03B37C617EE7E26708613DBA5F1B1193A7468F952E73FFE70B068F7474BCB
F17622B3F6C7786128691734609F5F48AE632762C6E7846AB7A4B4A6DAFD7C53
1B07545F5792C8581CC85E22DEED692C19BCDA675EC2DA40AE2087446A733EC2
42CF4CB1B4EFA861AC2688DA7F50140E0430227E73BE262237920EDBB1326B38
292EBE583EB6343EF089ADA0BD0B40F8AA386B1494A0DD73EF0B43407046FC01
0CAE43F8A3FC5CB9C8CEE9E1EB5369FFCB1FD3F5BC32979FF0875F443E3FAD4C
DB0D49654AF81B26BCACE1A9BA76BA3718F8FFFEB88875754D88283158892031
6656A23FA31F74EEAD0DBCC8FA9B6BBEE2E84F2E1885CC063F21924FF4F3C9FB
D0DD3D478B13307614E4A39BD8C9D0A37B31F74F5AE5AEDEA243C5FCB1175D16
B9FFB7374F26C7EAC2674882FC38AF392A170C6D9800CEE55BA4D8D06C1B44AF
14CF73D397679676192782369C2D7E5ED7C1DC954BCA0FAD4A34FBC0C0EE3E6F
29E112DC9A321B2B1B852ABAC19844512F173B4F83F2A9DC4F24574C300E9A31
AE7A2A7CCFC22F7CCB52A2EA8B06964F9AD204CB46299EBE53DF1DDA9C12F66A
2178F6F6C9DCBD03603B344A89F8C3692527A675C44C643FAC53DD86310F941B
B18F2CD4505CD1EDAFF941DA8086F2E526833CA88418A8623EA36640944A7861
6A1A6DDA3C820146846BCB352FFF6A9872F7560A32A3280C1367C53AA176D4B5
1BAD98417C90000AFB2D9E3C3DFA228D5C10A19DEF6D0BEDEF27E1D371016194
E2854AED5E7D933CB743A145E6F4476E9222BD5B47AAE2FD0DB2566E2C01C4B7
9E3DB39C892A5CB3A7846EAD860D64E9EBA0B28A8EBC72A5C2C0A78748538B09
3D0D8CEF5C045CDD1B94EDCC31D4B62BF1E698B54565E3AE3EBCC91938D52C64
4E37351A52206D02EFA6C3B3FE55B174066361557CE788BCC217B5CBDB5F258D
623758C96548029E481A247F252BC6ADF7DE9D2B409995B5EB6A8868937F1642
FA9F49D13B79A9C2C5000B894B86028C3B19D76BAAEB69CEE3FD5795F1F55270
0FC7B55E7C3CE9619402465334BC312C4C1A51BBF32032F44485A022F6BAF182
E121454336695A4A68A3E6136079A0432237F91D64604A7676D6143F8442C1F0
7D4ACCE8643AFBD50217C0521FE9F2DEE736E7E8C67E2AD447F095ED7ED6EA74
87CEF5B21A1F656664DD8B78D9F20DEA076C14576187744EC2EA5DCF191CFFA2
6A0B8B71ED26BDB7A91470FC88C8D7DAFB503F53F4E383A841FEAE5EF5A1D1D8
5830F34B16F6778D2A2285E9D0F5D7E8EA94F880C624D69821A34D7EE76BCBA1
713174CF38D4AF54CEBE07054081C92C1ECFB93C52EF68FF9583B287EAE861C7
10496DD8A4F01D08EB861945571604F5FA6766ED30AFD0BE2C93A273629AB9F4
07A4006A38F902D7AB33AE1F4ABC2325BA84A75B3A6F9EBC416233E0DA3831ED
F4F8F9A565FC117750DBEB78AF37349F57B26E469946D412BE8F594480F86F92
CE3D06D9B6F732900DB1D7F959C39B0B472283169A00C1FB11806D384AD2687C
9971DA6373501B5A682A1EF45015C5540A3AEB7DF79EDE7D5643C0AB0D709AFC
220C6416877F7FAA14E8D3468ADD5EA1FA75BD24AFD38D45566C71CAFE860024
C78E3B1411FBB28971167B8567158237B45589A461F96CB351A482E291360BEE
BFEBC8326FFD640D22832721B2D009202392A74B58BEB745DC12250F076CAF49
EB1421B5A4A3EB09582431E446F53C30D642DF3AFF8CB65833DF1850FAC9589F
B234765677D1DAF8151BA0CB30C54C8C2F49E109CE0E1EE15AAC286A9B13DBFE
F7BAA0AE1C69035C8900A309CCF1CA0A25AB10E0D9579492D2CBEA272B3720ED
E721A1EA8F0E9708537401CD8A3BDB7D962045DEBA3867DBE13DBA9793E085BE
94C9CC9B0E99F9B8DF9860C3EE327CE138B24C312F33E0BAA2E053D400A5B455
78604AD2A166F2E13F13045D88B6A2556E2AAF4A08B989230294788E0C57B8D8
78D9F6CBD08E8274FED8914819EFA1CB43525353701238ABC4C36E5B152B72D6
AB72A0C4A9BCEDB2624835CD1104F4350E6F5CC6BC3961A4BBE46CCD92B949AC
165D01D2FF0BF94CA0F404B679FFFC5F3030A81FEC5BD8D87E9568C6006CF24C
788B2369F577143C4E7B607F75867C2507329AD8E9E84D62820773056FEF7B85
F951883B4F3C91E8BD42FEE0DC7467D41249E48DC5E44871D09F99AF8A31ACCE
660E6A17C10A97E859F0A484BE34018DDA4952BA5E5F62C6CF708BBA2D7617BE
3A499E43A9668AF884DEA364935BB6A0FFD4D412455C74FB03E2FE8A20AF6ED7
D972FC3A3C4B7896A96FC1A59A491B969785CBAF79F92147379DB49E23D4E890
777D33C5C293B005782AFBB07627121582B8C2D3BF570AA84DD3F57FC19730DA
183488FCC49DA9B7F100A2FC7F0007C487635A461D60F73099EF468499FD55AE
BE853C022546FC63EC65CD7528931A92C59712866C227BC9202A9AF31EDFC48E
9A1FDA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A229961ADB1D5023BD93644E4C23176BF787664F
CF245203C8C3E557669BDD382731E334C06F4B6EA145D5DF351211A0511605B2
8C540290A08A304CB1279FEB8FC14062F495A5EF2072B2957D98A1AB2E4B2A21
6F53829103F9CA4A8B6EB5766A44A7EAE4D5967EC3646F54568E9FAB28736D70
AE87CA7F3E445B1F49315332AC4AB47D5296FC1D3B96A166865C2FCBDEBAB3DB
6CDE74F5FF556BC9358EFD0B43F697D889D0331D1EBEC40C00DAE0BAC2DAD9ED
755E5FFAD0632FF3D5892056ACF4634141A65185648E9BE7618B21E769198824
986C5C3F170FDDFF4B885D21DB95B862BAD159556ED739212A8930CFCB8D90DB
985C54281F417EB7F7544F4F099716124323E7B15735A49A9192B5CF06FE5CB0
A521C4DE15B36F2EE8BEA8A33CD2665616C30C870276A7A62C70BFFE9E3772ED
E5CB9CEEEDB093E9C5505C5F242CAF04F4FEDB26F1CEF7C78BCA26CB3900FE46
A2070171C18F49CC96EC104C424F68692E8EA44AD1F83AC6A73502B0B4D08371
1D6689637C45F1892772939AAF1719C86B15C104868DB82A8E7EFFE3FDB63739
0E50ADD73A0CDCF54E94EF52FB47439709BCB32D32865087AB85D98FC2D13C1A
2DC04FE29C69ADAF9E8567923E2F37C5870CBFCBCE59FA3693043709A66BFEA5
C6340E56EDEC0D80935A9330AA3A1630950404D8557F1CC8115FD5B4A46329EB
A2A877D4EEE08B80F38E9CA8FDC76FFB14F3131FAC6D13E30B45D3ABFF1B10AF
D77FF4B1CB68ED850758D1CA0F97AB4744E878002723A35E502ABCEB8390B2F5
A7F835028605F660F99CD2B64CEEAA69DF777CD381580426C8FF617C48868247
67446172DD2E1BAB819FE4664741C4BD094B8ACB1383BA390FD1FE3E6D837385
50EDAFC646E91BCB710B500C93211D78067924AEB6F51A2F
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C071D06D71D60CEEC9FC68AAC0ADD1DD74B262
0156612EB4B21A3F4ABD34403540C124221FB9DA5EC6C7229DA9A1D033AB828E
9D80023B2C8E68FAF7A38C925E0587A1CCE432EBBBA598B201F5AD036BE7C8AD
B8C411BC79646781C4519B89DA648B919EB362176B83298EE2D8B405DC66D81A
9AC387913FCA9209F9142F9CEB88DC7864ACE2139716A8B8BCE22870B2A8AE03
61A40FACAAD0F82B44B4D6E4ECBEF48C6E2F39CBB2B53B18DF7F144E9FD272CE
6A23BADEFC0FC80B646A2FC08C8AA1C44A2A00554667CFAFF8A417D246F28CEE
905824D8C0FB19279F86AE6C8C6B3B5D4AB4CFAC640686BC6FEEB9C1DE214972
4C015A2D62C7ACB01966717F9C4AAE6203DBC7E60275D3E38C7F66058EB798DF
3A42628DF4378C539BAE628054B5C31D23B50C2B33943C5AB05E8304A43319C5
8B569F751361768EF816F30DA12ABDF5C63C5B1602823BBFC0C03B7A421A836A
CD4083FDE377A8E800BF093CC74B3F067CC1DF9F37F37B225D1A63E440A719CD
8CC6D148F1442F1386DBC7309C37D13848552D03C07E06969315884369E30CFB
BD715C131435EE885780EC50DFD4D90B568153D7F09788C8877FF9D119C062EC
9DB71DDBB40357DF31989908E4FB3FDA3303E6BC7EBC8C3F90ECE5DAE3E02206
E93022A0609D842ACA6AA03E96F8C117951E672EC54FCF9A8273B7989D201B16
1E870432822FD897B71CEC0427D5FA06B29F527B6A236CE267095F2193898745
610FFAD3AC143DC9CA8CB1C3931E36AA844248234F51BCA6F444C2905A4E241A
269ED51FF329D5C0C86D9C66ED01B85534A1E39BD5C20DE216B33240C40D188F
4E304C4610FA7CCCF0512FDD24CB36B40AACA15B0FA0098083597E359F090380
51C4BC551BACA6F728980ECFB1E999F4E0E329B15FE526F0C6285E5D05CFB53B
F7212E2933DD050FB0820AFA1B2ABFB2AED5544B06AD48DAD5E377C2F375CAD1
3A904419D9E7F6D38731EF1E8CB0917657EB749149E1D61A1EF50C19E72FC8AE
9D835BE39DF765ADAAA523C72A653D19D310CC10E9080C619F102E6C0EE4F80F
05C1AA36C2027A88763A7F0AF2DD0CCE40F2CEFD4D785A43264BAD874D4FB758
1C7082EA167108BEF6F7E34D958D6105130AE25923E7EB77C0FDF5286780C376
3D9D24E27F7FECB251C07A0CBF632410D7D948427FF6782B8850466A1FE66362
4FC26E88758AC01C1C98B568253442AD48691C2A47DF05F6A7466E87D3020FB2
D824E71394F6605CBE638D9A6B5A0DF28C4D81535BA76F76B16C6815E977CA50
513DA81445E93555250A43815E80B39AC00F7086BCB4B36C35CF2E4A42B114C0
7AC99ED39EF436CBA30F8EB1A6E543782DABE3FF805D54945D6DC2C09A0F32C2
954C689BB04A12A787B88A966DBE3F4C2EC9888B56E96241D345CBE471FFB513
9002DD5225DAD211F5C72F3127A60A33D311387E6DBB2951640D74E59891DDBB
4526022E00B54489023B0FBCB6540E7EB3B2ED0460F81AB38B9240BAE8424443
749F272CA43BE6C9B5CD3E674BCF858A46BB2D1898684401E25CC37C0FF9DB9C
5064E2E468F5906C1338EBF0AB1F2B5C97A5E4D6127212AB225F2857D0014DE7
F40568FC538A0EA2E76E1F62790DA67887A81FED8BABAFE9416AA5E06C7C4C60
0BF38B70C87E5ACE2C713203A64DACD5FD072694C71A3AF841F9E3D07C7B3788
5856BBA23EFEA2AB1902F879F1361AF8C0421A296FEED926836406E96C49A48D
AE1DA613DD54D9C840D4896A183FF4E395EB7A69DCE16AF779DB5DE506A534F2
9DCF33411B194DEE2EC1B99F36FA1A11D14A28C0E938F608AF10E3B31B98C36E
5AAA15FF94A95B38469000FBF31BAE9CE8703754A099D21B3329E0471463D457
0D4E89F4CD31A93C312EA4674730466C3EBE9F8964D358AA76DE110300CC7B89
8FBD8BAA1FEEEF4E78760F8A25C60981E6372E49D71614BB4E6EC7B1ED60BBA0
8F874D9E1B1661393BD85DEB50C29E3DBFD4613BD0DB2A70E57CB73CEEE6A51B
72B52020AB471FA444491570EBF12F70F2863F9CBC2CE3E571F5D8ED5009FB80
9985FBD9A3E99D1D6124A3B4DE50749E55267744E046627E381FF09727EFEBB5
2E59282E0199771B95DB671D4B2AD846EBC0109861075A936D6F2508D429C625
85777EB9E6E9DFCA889F03CBE5A9FB59C55523ACF1E394505886FBE4D6F739C6
6BA65248D16465F0743C602C6E12438E7E9CF6405EEAE7CDC599E8BF2CE72DE9
FEDF547B68A41FC346A14D58EABC55ED2D98DA057A876FB35F46EFA6A949A75C
F1DAD4E176B50DB98341C8D442F31C7CA70CA4411B4511BE399A1EFFE6AA02EB
E529146BB9E0D14D16625D3C830ACB43B26371195013F74FC07E862198AB570F
44DAA7CD767C726E7BF288414284CCC3E6FB3DBC5D11E9807F8B247CB591852F
EC9392079A91D02F4954FF97236F55AF6FBCD9AF0E167742D0BD0E131BE7AA98
E955D662DC9AD78F82C29C3DDC08B6A551B0CE96E180903891204F4EBE911581
EA3BE89E4CDAA342B9E52F30E55B902ACC35DE87E70DE8EDFE7D803CB0770A2B
0B8180E5389A54B85BC69FF37B8CE078CBFF5CC6F11D65E7B61ECADC94491C5F
F034CEA604CDF5412886758D49CE07427C96AEECF83C52A4555178C7AB4DC1FB
491ACDD3A0CE09DF3D2AA01AFC9DDFC002A9863D9382764DC241811B3912F36A
B2CB1440EAF4C36D14A899C877A1F71CF5F205C8FF35460B37921BABF917E5CB
A23CCBA7C46C157E3088F4D1C99603A5AE29019C97D03FA54726D906264C82E8
AED7E4AC8F66E56EDDE14DB1462E4F9859384B15882C6B0E2219186DD528D0DF
17F15FF78FCEB2CA616D526C530E1BF18C3FC7EFAC5BC5F623465E81758FA863
78485C3F65040DD351580824450D62A12078BC053A65AE1FFA91D645A9E26C29
A8311282A2DFA57985CEEF4463E64E0B7DD8D11FB10DC168A704C2C70DAEC483
F6942ACFB86DB9C4EF5E16FD6E2A4523B99D267AA808751385186A779C73E575
948744853BCF5547A7870E7F6196444513F4AA8D5FECEAC8EE88C8830B526ED9
264D4F56562FF445F348D19317A058A4FCC154CEEC13E60A53EE79C07932518C
BCF295C49DD58CF10B322634A4B9ACF5325B842EF91A19C55CCA6ADEB88B59E2
4FE4A96A8CFF57627DD17FCDC5BFFCC5CE9C78BFA2B830328F9A6D45FEEC239A
D76BEED158DB3BE2DC4BA1DC216B2D085F251E56B085F80C7C11DD39ACDF31FF
8D01256B7CED1EDFEEE0376E57B6E45D2F375499F8118EAF5C7F6607DAFC48AC
6FD2258F0314DA293F61D30028BB0FB43F50BFFB3005B677A74AC48E341259FC
DD1E8D932840FCA3727301C942C987A026992772DC2A0B06D5E4AB1186D81001
AE4288BC2EADC60BB6225D9CB6CA887922B117EB0E7F81000CCC4A20522124F8
B7DEACA9E6FB322B9B66DE572DA955FF06BBF51728AE6724360C97CE27BF0DDC
551716E8E06DDDE418B6E3E407307088DF1BF21C09F61DFBD19C30D92CBBEDE0
59D026A5A2D9B65246D93E36A7276E70D11DE1DFC7E967F6DECA7277FCA73E84
1737D9AE81C25EFAB95DC9FD91A124F9F5AE28E844C6C3EAF7DAB0FEED7AF2A9
13FB2CE66241C5102CAEC3992BEEF1999CE2A5574EAC934945ADEA6DB4E4DCB6
4BB074C6094FFB7D2AE0633C33C8E4823681C0A61ED898C571006202CEAFB5C3
E352E7F66C743DEB4EC14A3AE0EF469A2CDB23445830D0F304FD7A9EB6B8AEE7
919322D2FDF6C7D7906EDC7EBCD9E9B6AAF63DB3AFB9D9B87CC743CD66342BC3
BABA111186A0F38F642261843011FB3389DD944969E83C1B8315BF63C3BA9B84
9EDD5F620C7E451943A4E3868D2F9A6B78E6AC615258E663C9D255FBECA07BE6
FB4B14EBF66B06D640012D108ECD3329117185F2DCCD3CFCECB7224FC5E7E437
7C6E1F717DD65F6A274994CC40546439FA5A60BC3719653E525E49FF6F778D8B
ACE4664D86C8FDAD35CA3EA60BE1E28418837CFC7209F4A7357804EDDB05D506
686757C79C2ADE54B913F1ED476E3D86BEEA512B1FC55E137D23FE61B7D69D1E
E48363146DB3EB9914CE42558ABC90B623AFF1FA2CB3EE64202B74F76E195C0E
3F2B12B433D7DA1F634865DA6E5ED7511E1D930D074D76A35F19891E3842733F
8AC91FDEBDF9F8A426019EAF34A2B13634F55E964F8B7C21D937310590871C58
2F30C6DF5FA2097A078ADFACAE547DA592695486DEDA95AD49D2958D1F43A3CC
E7B7B9DB269FBAD050E6082D8DB99454AEF0AD0088753DEB92924B8AACE496E7
45ACE597058C23D84C0FB8BAE6E8B396D944701FDF7FD723D145E93B12A799B9
D0210E411564EF88E75FB2380977263E4EB261F6718EBF15ABA15B45CE0008CB
D8D2B7A1FADD93BD3CC207D8623EB59F6B3FDF302406C8F16686E31B66D8C1D7
E8DAA6804AAE5DE138E8A311A4A1330604D0E557EE03662BD31AF90587A45AE7
42E8CF9E4697F94F59B8AD259D2DDF433930B270C63EEEBF992ADB20C9F233D8
85BD42C04DC9300D4CFA004F89A55999A93B5A3EC2D3098ED38FC4CBC6BE50F1
4FFF4452CB1B96ED0E58AC65EE13077831824210531E56CCF19CDD93E462A12F
35E45673FB121E1AD75F20A8F4E8B29789DD95CA5047CDB13FCDE826D3AAE15B
CC039B1C6A9C21674AD3ADB75770688524E0B4D3151C5E51D640C741C6A05E85
EC79363ACC8A5F234575C256306A3E2B5F6A6ED4C48F6D4440488AE7C9B57B85
DE61CE78FD299609DE1D6795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD1983D
695AD1DE3E935E231AB657C704B4FAADE3CCBBDC7C31C1FE52D8A57D79602D65
BBA312E072096DC25768434E7B56ABD8AE83CD6836A2A624A32128393B9D463D
FF8B865FBC10316F6EC4806316954E90817A74BFFE390FE7B5348DB0B4782BA6
D48AEE80D379CFEE11E4F1CD9A521023438259A1AFAA427959EE4927606F08F4
255EF756643EB591366950DCA06596B169C9665511507959228D5480C7AA0DC6
1F197A9CB5C80A00332184637C6FD2198C1D859D45F35E20C5554B0D72C262A2
3CCB48B112D5ADD2E056258AA295803C60070F8E89217F14F953CC4015C38151
4C1E1BDF36283AAFF8AD785A49E091119556FED39BC1843053FB2909D78D0CC5
BD0202C8FB9DFE45DC35209300AE63A15A7D983219EB991B300213F2BFD5B477
A7342D64AC059315DDAD1A2FA1F4E8CC6969A0E25CD23969EF9E387BB3BE62A3
51C14DAC4BEA7FB4C8F38C6C51F6431DE0F8FEB6C3091AFBCAEEC0FB3F3992A7
7ACADC778ED2784B3423154B7FC03D43F47C6F505869EC5039310EF1F4ACEA1A
40014BA27BD58490D243E14831C19698C0C0C9683827A13C1735D2C649C0D4A6
BE354B0E303F96F1A7DA6410CC5D3F84EC5C9F615650160747A724AF9C66AE82
CB864AB947E3582308319FF3BA95FAA268D83B462FC0BD10BBBB8DB7B12BB101
1EEA4891546F4AC7FCA094F32499C0F8AA33D2C7D00283804FD75276BF2C4F9B
E9BD77A75D5A1E7BEC988F06F62D50278904F0928D97C2A77894DADB216105AC
441F7544C3EEC8F09A260BFCE7C040D10575084BC081821FB759B9016DBA3AB3
9FC05FA6C191F7A83C324AF0629A269BCC414DDA1570B980F3596906BE0D23A7
1396BA0A0F3335B74FE5BC3367497C95A462341C8707177AF767B83F28AF4C0C
F952EA0D9C4176D5ACFBC48D8A48074357B1B8E5B17C698F2052A9C6410435FF
3D114F67EACD436BEEC8ED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A6FDD
7D52F256FFCDF706B456B6886F5FF5F416C079AD248559BBDD2767549450C680
3B603B312979604965F7E8298F454E098DC4EE83D9EE5A229DA5B97FF0861841
31743AFD0DC1CF828D0993C56493FBD38744296B82E3908A1A0CE811E0CA2E52
A0EBB9F4998D40FD7B001C660CCA6AEA8C43CE8FFC9D1AEB97BAF55DA23B2FB4
A868BA0A41CE90D7BB6633CB481DC110FC14AAB8E9264F5EE49798BC49D9D9D4
9B9CB9429CA197321B545625093FAB4BE53BC96D108520D9CE9193DA216221F8
42FD0F3CB18D4D9C66FE5891B484C4F3ECCE8A8CDF069387E4FF4967E9F11717
A630BB0422421290360984C499D5C2F4750008B8107BD17C259B723F956B5B14
7E7C0D6AACEB4C9F0ADEEF68329D5CAE9EFC75DC15A9494E876104FF7675D11D
E1DFC7E967F6DECA7277FCA73E841737D9ADD1D1BAB1961E212D20880069F0F3
B5536CDE53D4A4D5012B54B227A0C18DA8A43ADB7593E98E5E0C75197138FE3F
BB31F876BEE000302935A55EBFE1CE914272A8F50A983AADC0604FD17B2A2F43
06AC9C0E2C687D1D9ACDBB674244037384B36372980DE4F1819DC2B4F825D7F6
AF5769BA3C34DE43B531F84B485EF8F360082659FFD797F6E37B87EAE0447EDA
DEB00764A38DAB429277B77869A70AD62AEA3CFD663916700C95E0023599AD8B
F5E4383BF2D5B1F79DBE83B6B7836E42C2E1AE0093867B0F2F8C4E44A16A51FB
C10F2F4BD0EB7475E396C85116A9D3FDF82014EB00C07DCD76514565D3E6DCBA
5BBF1E7E65EE55B3A8CC8D2229A01DD3EE09EEFA659502F90DEA0CEE99851BA7
2A097446FE8D54CEE9CBC3B88AF70F6D0234ACB6350CB1C56BB44AA5D7005841
0088780E87F8A0D2F6D2FA07D508BF3F6314B934962984C7FE400CC9AB1E5F79
2699F15AE7E181FE3ABC4B4C70E21F3AD9AC49685171C47A257EBC1FA6B40E10
B77C81889061E668B9444D08F3EC366CF071C473CEAF7FA64B863164AA97F309
B76EBD1D860A54D8E656ECEA88768396EFEC282AB93B7CCADBEE9CAC7E77D79B
A760EF4C53A3C983853C30DFA6B0093FC96F298AD1B5807C33A89AB14673D370
619267FFE6A05DCE65C7B986CF466B6A832F1921A6949469ACC2B5EAB9F109C3
6C9122359A60190E6C42C713A9BC911105DDAB231758BD41BEE389B057A1F7D2
5215EB9D0F26C738D1E8782D670AFDCFCBEF6BD68AA64D6CE1D7C82A1E46EF79
FDC5CF1DF72D2275F3857BFBB4FF234B2192EEE72D2CD5E415EA5C1C28F4B537
D15C66B6CA739B8D92F22E3DDFDA20460C55C375A40A34BF6BDB012F333DA135
67389FF89C666BAF1696FEE4BDC1B32589E1427C1749969DAF3B72CFD1F579F4
A62E705B6DD2AEF3D166BA507A1EDB131616EFCF91246FC75DE3D8A915DBC82A
1E46EF79FDC5CF1DF72D2275F3857BFBB4FF2296C19E66F93DBC8E9CA5E86793
FA37889936F823DA9CBA746BDC1BA4A84F7B70846E33CE5F285F32FC4E53A284
1E737ABB84A750A16A4999D5A59AEB5FAE6FA51F6C8CCF447A19D91B8CC30481
B5C49B6ACB4DC451F9C524349EAD4DF1F0DBB3869B74C2373223236E809ABE92
C2630C9A877AE16BC30D56A0B208DA546903B801BE445518F14E701BE121A6E3
C832FDC31C1546BF0855A6767030D9B6B47266B4A1084BE171D03696A026FA7A
544E4D106B9A315700669D9D8A3D985F44DE6070E8E4AF6424F3048173F52CB3
EECA756C4D24FC6054D922F59B105DBB74686310F635AE6153D9E18A0514882D
4CCFE9D44B8952190FB9EC8360698A45EC064FF735101C9B16BC27110FDAE792
2D97BF0BCEDAEBBDA6BE7764CAC582CDFB785921653201A8230C66DEBA105E89
909D76D034C9A5C6A216EE8C2D9C96FF0A04F2EBCCA2467174529C592950326D
E46CC1E57DD4B2A8821A8506BEF79EC524565788A28F5870230E9DA69ABC8078
8F2F72CEE5F5594F71A24092D1CA9BE1635F769E2AC1459B0B3AC1DC117B6296
C31A438AD167AD6C39AA2FE5CCA6028CB3A7EA6A0BB569A91BCF947E682976A4
A993A413FC97F6F1331B12604C28FE4D8F7FF429F96D0DCE41EEC1EA29EA44F3
F8493AB33413FB84F35B3C0016089A6C4D67EA0050A0381699FE2E38BEFB071B
9FFE3D7574FBB32CA8ABAF8CDE383085DFFD5EBEEF83D696C0FA27B86904477A
22C09610E936D310AF8455122F4C6B61307071FBEB6E8DA8C43C5E1C317DD3AF
44E46800FED97CA40252808F6AED21A9D6F3EF87869378858BA7E6E918D5E464
49525A4A5A2932DB6208081585CD9A312B09793B1C1FA05637430A13E5AE3E1A
3D5B471CAD468007C4A6BFEF07D313E1ED2F47BDF624179D8827CA4664F96F70
03D7D0BD14633673BF1A66D0126713294E13C1A4571B8A9E6D98EE5C2084E767
98939F0AEF7E64F621BE09010CB6F43790AC69F122BD9618E23C7FD95CDB02DC
661ACA0D9FA5DA0CEB0D82EC823434BFCFE218A4B5FF0264F1EC9818FC80F9E3
E06FA21B47A2C431ED3DEFC7267AD9DE87E23C2411D06FCABEAAA6D87458CCF2
5F198AA55DBC4F8AFB25E33D6830FF6333593140C974A8B13E94CF0E77EFE6EF
C2F0C2FE513C93C7EB2528CC8B0472B5A579EC88E8BBC1480D4976695D2851AD
FE75F0E8AAEAF174FD8B2D5264FDA6E40432CB09DCCF5C286D5EB04E5A7D952E
716DDE9DD17F51C40339BBD717BA9555F70DBFCE390F10FFC62821D7082423D4
6EB801F8502449684418493C3E014D603933A576C6B0758D49F3155D448D505F
73A5206D1647639FBCAEA8108A2649D23FC552CAD67A60480964C6CB0783A8AF
EBB8E005813FC0D89420F1930E18323460DB56C9DF95B90D45EA22620C2FA7D7
521D7D4B3FC1FDA5061C6F4B994301864942F3C18428C06EF16DAA37D7CAE4F8
5E3CC5AEF1EAA75C658E90F0246C18C21CF073CC1D7732019B86C11D799B79F3
3BB09CB6771F637D534DE9FE49A53A3812D7DBF47D9E8A2D353B48627891CB99
B8C759187CF9112E3619F9ACCAD376725BFF2760B9ED7576B9D9EADFA0D51077
ACDE9DA732031E629834097D62B5D90F48DA5BDB8D01BD0DF36D531892BB3AAC
16F85A63CA278DCC38682E1BC6D134930242730DFD14B49376780164C5A1F030
379CC9E763CF518CF9E2DD410B31012ADDA5B9ABA7F5EB2EAC54DB67BF9CD44C
49474B134D42210504E4254BC7510C4BDFDF53EB3D5F54D0C6A53862B4ED64CD
18471A49B62240FEF22F4D82468E075498FE2FD44122E511E5FB2FDC8CBDF6A6
9012CF9846CE3A9A6DE5C947140AC48B22EFAE3EF8FE12D52CB3A260C7E0FC2D
A6ED47D61F83DBF89585DAB88E81AE9FD0426205126E4CDCC23EB4C431FC6C1D
BBF79938BA64859723C4637574DAA16916B8CC6DC32495D5247D877E4B863070
61E7A19A3AF4137889983657F78257CE77F03D0E9DA4E29707C31DCF1707AA65
83AFB9A309EB1599591812BBB5C8F3CE43DCDA76D261E3F7734DE2DB7D9BFF35
01E5A6D23CF1541ABF3B301F226510EBF89944E4E9C5376A9F2841845CB62FDF
58F84CEF83450F3CF96A040F4C2047DEB00A172677774217ABBFEDC33DF60D1B
D15D023EC0FCBE6548410923051F875718FAC168E4E2720E8D959D339DA26151
5C42555EF75A03385FDF6C7DFA8FD7D02B80E1A845766CDB597CACBFE0700303
409164B5CD1CB0F12CC3632AFDA9076C2B4D0CA7D89ED2FD03763D20BE507F7E
56122CF46DFFFDB6FDF9361520D2E388DBC639CAD5B2E83C049DA71FA49785EC
5565D2B3A261A66C9F2C8501A2E9324D5E6F0F1294E1C0AC67EBF4A840618B23
172EE2D3E6538CD9B1E12B834A6D01EB50C781646E30ABD086CF9C09A6B0FEE7
416646141CCA188014A29CCA5AFD1215D847550DC0F06DD1F83FA50D4F154867
B579F69E34040E2AFF508CE7AF4B0D544E70294FCD49BCCFB65347FD1767DFDB
6F85337F7B399827B860FB08BF9D15DA7739FAB5D8E03BD8F283FB6832C3E10D
341F8D147A88D61C5990E609001B853B273DB140A7DC69895E465C1ABABD4CDC
88310748221F5BDFDC2306912DAE1934E475C3AEB56C96D1978FC7659ABBE845
A08BC6EC9EDABFDB1CAFF5FB8203CE3B25721168DC1E382A5267627FEF41D963
44A05EEE4C43E2AE24657176B6C8D3A0EB5A8C229616709EDD4096C1D4D817E3
96C6A55FFA4D67E59B58C6D9BAD063D247787282EC4820B3C3A8D7EAC66D120A
3911D284DCAE2018F883AA804CCEC457CC6213EEDC75C8890DBECB670000924D
3BAE8E7A8066D804B89BD943B49ABF548E5D92C1D6151D1ED96241CF76510076
26E9D2EFFD007A8E985FEC263E6C90BAE36C27D704E88F1F7BE09A971CABE15B
724B62BB0C1A5263449707BC0ABED19F4F1ABEA27322584D473A1A888AA4DAE7
7864042EF587A6D6C04DCE664BF83492D166B205011A3E283257FA60C5AFAD3B
71CF6D6772E5E77FC5742D4D77F4B9576213835AE7E32A2B401C36C3D58214F6
DEAB86E06EACF7F5DA3BC32030E4E23C5E0E7E82C4D1F9BD7278685C4CC54FE1
C1C4332F05F5AF14E70FADCA465393A7DEB7DA08B3012A99FB2FC7F6FF7AE570
BDBA718AC1E0ACEF9AEAE22E5FA653C2698E05E0E072A7DBA0702C0CBE5EDF6B
D0A5B47D7929F5C9317680A392DE0CD7AAC72A99F351D824F86D33CC89BD70DD
41F435624F598030F2E7121F6A610D640FC7E512A28BF6C12496361A53953D75
312631D6F07794B1D853251462B4D522B6EF8FE6D2DC18EB4C02C6BFCEC3E71E
20E6D98720013BBF6307EAD2720BD9674E2AED09E56CC6D3BF927657BE2D0749
3302A5492BEA01CB223FEA3B6CA4D0A35D6F2C5D17804371F9AEBC100D7A6D14
14C37CBD273EF593B596973EB054344F62115963E3F61A1A2774E6837D2DB796
482A00E2BEFBD6E3758A5A1CE621ACE547811799B1D7893DF52D57BD6C1A6B74
4024CFC65AAF320264BA65EA8FE3B2E77F515CF05968797241B5BA06E190C023
55C664139419373923D5BE1FDD292F80E973E271248B2E3AF05887FD5142811C
2572A1D4B9F9539CC6D9F441AEB22F4E871755911D8FAEA73E35EB7835FA1C6D
A4635171C47A257EBC1FA6B40E10B77C81889061E6696F50954EB8B347918C49
20C7142A2AC68231DD2AF574910705DEF2893D8D4BD1C3ACFA2BC75EB9471489
0422528F5121B7A7D7A973F2EF67F2795E6DD8CF55B98238D6654F8B47476E40
98ED693455F82F098F49FF48762D1C9622E0B64CD190A4AF3020654123563C5D
6ED62F1387AA1BC5F00137C6AF5840026DA68D8DF87CD5567644A09B52124E10
51A715399BBD1A6D3704BCBBE1FFF89BCF8129B98D35736FD2CCBB0E36AEB664
3C283A61B6E8613BC8134939CD28AF21976B42B06A63719C44432BDB419B04C9
19DA628C6A5B0F4F626E8935AE2943365C505CF5C7955AF2EFFD964AB8EECB15
C33CFF111F801E31FA0889D1561CB28638D1D24AA9F358AAFF93B9564AB4CED5
632C12606449ACD326A76B011D9FDD66C24C5342A5575E940A10EF9A7C4E0857
59F390036755C4BFE971F6DFB9FFAC965ED71736140A0D41AD571329C7FE5460
ADECF79C3543E3592283C6770B4087ED9EB76ABFB56774C4A21133E594461685
A92D372D4ED3F9DB786D7E7245B9B5DE70958048F037C56C14FDBCE691048469
BC488E501EB5DBB042B02CFE90432FA7D98B533F89DB0F21A61657E268166431
92F6AB4C4265A5C2599F55E134AC2DF346CD7C05F0C4B63DC1C10E03B9D34C67
27AACF1040ADBF7713E3898334BD99CFBE66C4FDBDD9B9180626E338FA32B67C
16195DE9D59A0F447B8DB69CE8FD6E2ECA90C6B424F1D39D11670BA89B298DE4
0E91D1CBAEDF3D811318D493DC71793E84BBF3E2BEE2EB813B03690C774E6DCC
F2D7221490784231EA6CF28982A4470A7156F1C7312FFAE07D32B62AEA32B58B
8D127C00F3B953C795C84E1A158E799D50610BA45F2003568AF44E2EE4DE711B
A128C91C36EEE43CB41592BD13837B9EC9735996A1376BC209B8D579F6A057A2
7AEF243C4B389CCF9385CE645C882CDB6A03A7921BB9F85B93AC64F9C82C455C
AC60CC9896FD453CF3AF2307B191F79C5C6F070D7E814EFF05F881CD7EF43871
21F72EEB3A9ABF13F7A9C46AABD4D0D976EBE8AE53D3AFDDBB926B54EF0C41B9
8D10342A2BA4F9908402DEF9AACE7BD76B3D4A244E3AC7442DB6A705BCD7E2F9
DD7C73DE15B222ABDF7DC3B76EEF17AE4CBDF387FB03FAA5AD122CB4A90F479A
EB32B0CA993ECF07D050F04D4CA153663EFF8A63016F79C7D0E464A57671FED1
E50936B0CE6E364B62411E6DF77D4A4DDF74455394437C3A7B477AC27F75850C
FED5BDB2F07349EFC5134BBD646BED8080D44243E74485FB82236249FF6726F2
D6775F15948A9D4DC82D6F60D7DC6F714656E89DC882B95552C5215183E5FB51
605BAA7948D6E5102CCC8E7AEE127E914C372C6E2DD84989E78792EC3F50C186
322A81E6A8368780A2E815A7EC49B29EA2F4594EFA2C1C079B0C777ACD0210BD
A4F06EF57BFEFA0FBA572A16A81DD123F8434BE971D9EC8149468CC0F2C45ACC
D61E6DEA7CCE2D711A218FC3953EA7B36F464567F208953F9AEEC1EA50C522B5
A42C4A99B079ED011928C2C8CFA17D95D50A7C1599E62D4FCAB001D5F9DA84FA
530D65FD2738BD6BC724446933E8927F3AACE64BE6623CC4CDCA1DC0B686ACA4
41E316ED0CB3CCB6ECBBD05FB823FD79EEBAD2F9F0891F553381C5E352B4D7C4
C1678904B22D75C8E8D4ADF7A319E9EAC6238093C798878E5D5087FC5390338E
CC499C043E346A4DBA66B7EDE932FFD9780C75301CDA60558F65241DEE49409C
10DB07153317E1A13947E293CC426E38653A16E2A7EDF6D500E9237793DBAF2C
6AB5E2DB571739092A476FF45FA1A1CF898E3FF479C1EF67CE435AD93677B705
BC81144F2E45854E93CA8D00E814009234E2A36EFBD854F868BC9301D33BA670
0EEC06C030DC43B2245F9D24D31A31F06EBC65712C870E62BFDB244441198618
3617BF19EFB5DAF155F0957D038B6FC5BF776DB24668F0F4594572EAE33CFF78
6BFADE79FFCBAA6606E892B2E41A173AA590B6C92E254AE642A2EEF5D51BE02A
C50855B9158840F97FA94CC03CF388C8AF7468EB28FD5E0CBDF9E23D1FF320EB
F19E60F85CB9568AA9C68C085E87B32EDCAFFCED2FA9A1619C3D1065724C6F56
79589C83053D4C8C9B53912E217B51E90F13A589F452936A798BADF461C448C5
480CA1D7A929044CC07FCD6CF9DD7FCE413A0B2CF777529685854F63EC8FB112
3A12157DE158671515E8FA0324852EF95789F16A8421B4FA121305A1AE54DD69
30796B192862AD337BAD6CC06279077389A26E7EF7030CB43C182223AFAAEE62
0EB7E7F02C11C1B52C95B6B66A2DF1FBE1991088128B8B12C2B28A050B50BD46
CC83DDD732C8EA609E2857FE8377112784FC50B3E2940B0D30B506FB4732B2E8
8F32140F3893EFF849FE4E17A69F02E7B4C69CA806A1A347B174992DB8D542BE
C631C8069D0DF3B6F3A5A80891684979154D98437D6BBE4C8EEC74B6D9BB7D6B
C5924BF9AB0BC0438C5F9AB06D6FA688C48C7DCAB3F09B9350C42F6BF7A4521B
21554098DCD8F7DA254922301AC847E5CE09E60F0839874318C8389E298F5546
71CFE508839634A81ECF5A229D2B16EF77A39178507E41DE72C0B30162242B3E
F7756A035C0529533E59108C550FB89650C5B0600791191AE0D2C2D576DBD6A7
3FB4C0722AACB08ABBB932D5E6A03F957B7C64E89BB59C4ADF019950C6276EA6
1AA9465BBB3A56AAC8D14E62B83EF68CDE87804FE10153467FC0AFC951B645E3
0ECCABC655E635DB463BE72AF1223D0690DDB88C7DA9D59148324E7CA0701024
42574818D8E2E330E2FE5102B7F4DF3E4FF521CA5741D8C57CCF85B7887E6A7F
6B6E4F61160966AF27B74B21C9F3D6882E3E909D80E0762C58ECC4E243CCE91A
946487E546C6E433A5C5B9FB7D5B97F2B4B202F94545C8C3A9D70992C1F31DC6
753222850ECF459A7BEA8D8482342AEEC5762713C43E7E94884C06329D340EEC
ED08ED58B05FA74B94FD084CB58F31EBFD5EBC6440498768C234573DAA11A489
B87A3C6A208E9CB0B30F7AC129D5E7217B10FF89AD4A78408DF8ECB0A02D9EED
19239FB927915A02D3D85B0C237669DC17FE1A48D20EA8C5D2A68A4127CA7332
E5039A2A7E32F2389255B0491050D86369ED418F2926916FB309B314347EE3FB
1EA13799ACEB62CB55BE2301E115BF38D18AE8461F466E207613B6C091C7A10F
D77A10F08ADDB19E494C72ED471DF04820F4F3A6713E67E7C08467C617E31DFA
524A30DB697FB4139002DD5225DAD211F5C72F3127A60A33D311387E6018F5BF
F946CE8D7834A3410F5E6EC14CC8E47337898E5E8367724E6A7662499EA3FCC2
78B616531C0CB5BAD1940ECE80B6479023DA0394E3CCA13502D03B122C2218B8
7DC1A0A15DCD491B2BA40939A647E01CA6143950A0D13DCCE128401BAB4E3322
2A22ABB177C6607F014F0310C1E7BD29FDC20E11094E2852779FC5C0D5DB9D39
648317DD0820EFEB02CDE5BF84E5F1E8C8572A5A86DD74D4FB3A9FE077F2E6D4
384BE6BC394E71C5DB81E42B90ADB935FE3468186ECD90E2F15FDBB395191E6C
465F4AA552F9CB59DC4B0FEE8C937A0920796C09CB74B3EA1DA5B74EB358437D
0CEBB9E03109C593BAC09CA9962533B3AB0EE6EF76418EDA7CC6B8795043E5FB
6F899C3CD8486A6DA3E670E6D13BC51C01FAFED3D47621376F2A271728AB7439
3AB3183B6CFFE1D0E2948B24D2A7E6A98712527A7F3FDF0C07D30FB6436D5875
3F6AE969F727C534CE5C9001F9E7A0149021BE5A65DB754E14D890F42F4D23B8
5DB5F2BD66726A544C10942C271713B28F9F33282D2063886DA7006EB5C0F757
82A3C48BD6B7D4DA8C112653B00D7E484A88A248FD17FF0E7A075A554F98C451
C7059F491D1C8BE038ADD1FA4019E1C78B8C7656766444617C98548A8EC0CC14
829F7C67999234D302FD1E40C28703DFB713F881EA0F4B81A8F1FDE4B3C92CED
078A98A433D6F3C4B442E014E3E5A5E82E52DB5332A895046FF12D01742E9AAF
ACF2CFCAF0517858C28A24FAED300D643F1880D27C0F7D73029F171028FDDF8B
55080BBC908D26B5CD10691FB92BC2FA54A04EB649B111671B43973E31253DAD
08488B1C71AA6F08A5FE3F6222ABC942F7B152702F7E48B93155A7DE83B3A6DC
7FAF8C2561841226C56160914266B1D28D74185B0E0FAC89BEC8ADC3FC027EC4
7FB0EDE4D2906CF1B55597831D98B643B81D2FCEBC963155762A1019FE6A9467
DB7E5464F6CEA824787BF86ED78492C31CE4E8AD0913637E245B375AAA5B76D5
95F18A4289312E74FA9C289A53647EB6D776E3BBBC735D9E7226D2B353CC752E
FEC2E91DF8E2DC63650E22804A5B31B13418130BA661F22AFB71F8026DC8F788
188647382BE1B7891A84B9697E22FC61EE575564D48A537CB190E26707CDE0E1
B29B2BB9C4F4716519A4A62A05A7B901F7AB8E77C6FB72D7CB3D6953F1416C40
FE153C7E73D86FD65663DA0E08018ACF34CF9BA5D7A937AEBEEC84B992D45A26
80BAC63497C593C90728B12A42833DA3C710044C03A37A680D1F806296BBF942
428E9FADC28CB5AF48F8947D9BFAF2F57F0F6C4AD7C698D46568068F98C3564F
42D2F7F26014DE37C4DCCB6B3082CD71C69A1E1A3AB1C1298DF12BB54B3EAC9C
3325FDF74E1B6222A84D10CF5EE66EC13A71302C6786D05D419441162EEAD0BC
CA6315D5D70AC07AC571FE97F03509863B9CF7A0E4A8D5214D07B149EABF51C8
5F0C8A7B7BA0AC8B5A90540E5FD5922F512C0A83999C07CEB7A37F71BB8C4C08
F359CB4473250995CB6F5DA6838536F3FE0B38EC7BB696C8285F78C66D154289
455C5FF2D23C1A59A2944DC972F44474CB35738074BCB9FEE4077CC0C49D7185
B623A143311EC892D1BB9554D34547816955434DFF68BFBC34A074CB3BC8C175
4662B5D3FC0462AC4967765A50D653FC3FA379FB4FA0AD9F83269A99D550366F
C8714B92BD48CCF7CFA30A7E92FA628D056602E7EADE6F2B3E168EE1B0AEBB2A
BAC2B90A514D97941B12553B13AE64F9F960EE62E049E6D9BC9858A3ED3CAA1D
77CFB4A424858251438F05B3EA1F686B35F0072DCABF52B26423E8BA630090AF
D344BB225F08F47868D6C4D857CF0A3C6CF4B205301FE5A2F54624315981DB9E
59213A134B651EB7A024989A6D910914C0224A700E1245ADAD0C701A6F5E771B
E54B09E2D6EBFD77645845B7C08389FFD5AA6D6AED2DC26C28A403BBCA3435C3
FB7971E9A56226D46A1174136F0A04A5CEB915B8E21F640745A0AB62F15FA8D6
5B74900DE1EA95B981FBBCE8D846DAE64D91AA7BFBD49CADFF1DC7AD838B897A
D728B35D869CF7874A1F48CA79E025C3D54743A3B0CFA14625FBF274F3794F04
4EDB9552BE2C55747D7AF3101C5F1A2A1BF6C0E2572AA0624592BEBF74CDD683
40D52E137B1DB6FF17B6629B871F0D3AF01E55645C56BFB97243ADC4813F842D
E44CD9352178217879909DFE3C012CF2809984881E57668BFAA1644FA922FC56
B0B93D32362BA966DDE41AE6A21FD20EB82747C47F18DC85145900305F388143
6FF377B1500EE02F9B9B8774237EF1899A326BEAF8EDE7CF319D42D7B7B61296
2A9DC4B8DD8DD87504652967C679E5629FE5449DD1BA7DE9ABEA28C4E2496F87
61C0638E0F7508D281F5762ADE506C2DA47286A8A2312B11DE4B488136EDBEC1
4C5256B9940F0800E6DD26001BE1FD4BF642AF9525279536814044F4AE7DAABC
43A230FDAC3D9FF0B8CCCB4C1E7696D16531A5EED36C30AA15C66D5398C145AE
DCE5826302220B185F12F8DC154E4B79B163C08F53AE78243C52D4E02E82A4A4
310980801A463964F3A0BBB90D85756EBB96B5021481EA4E845488B79682BD09
F8D07481630EC3129072AEA5778A135D164A571B22D1D619980E73841F84F59E
0500496E84FD5E9A7E4A28D9EFBDD34A443F263B41A3B2076595CE2A7DAAA94A
4B95D7E9C281194A84A9ECEFEA5023317F88FB64830A2CDD5277003D6F1D46A6
DDD51B3C62188C66D7D12CE54F29D09DBF020D89506CD1270C0B3EA235BDEFE3
E24373517FF148B2CDA2B90CB5884440F464CD57295728A8AFB1A5C97B6B8F47
63D21E005D89FAEBBD7D8B06F3FCA5D7107E8B918D946E250F561E5E394ACA6E
AD2890CD407F38C53B3E51C9FD432F22202E89A91B046BA4CDDA6E23B0AFB2F7
9CA39D61350D26435EB900ECE26C5AFC283144EA933E003739EA80DD65A63FD2
020938E02C1C72FD8A4A14DB003C5D21197F835B183FDC1269D70A0B14D4F9BE
76C4CAED815AF7DEF664098CF1A167444F32FDE1796595709294CCAA488C37CA
EF08DFEF5DFA13FE0CCA32024C378A87CFE7506B67F7A6FBF8635703C7EFF67B
9F15A7315285D2565D7434FF3C75A20CB3C1B57AF37CA806711890C1AC5997F2
1A14E7523CEDB295474F36E7AB3493706076D62F4C407BE252B5F31039CFF52F
2855C8AF27ACFD99EAD434BCC277A4805E6F068CF203053B151CD82DDFA79D31
F0B4A0485F51334BDF5CD5E855A60000B2D49835C34DE75CAF4932693BCE009A
5801BF822C193040C8E053C3F1EE0BB0AAAB446819939C850C76B37EEC59A516
F15F22949AC658037300F1E113F3BD1B4F3ED7F9F55C21A04F1A6DF8168FA228
6D8C7EB944B03F3907EC73E5B4F9B71156B357F62608909B7E4BA8223446F5AA
B34189E5C5ABCFEC51A249DEDC76E04CEABF371BFE2347C17AB8C17FDCBFD6F9
553E8BCDA3094DC141B331BB999963089C9E8131AC54F43D9D7AB95C97BD691A
D8934FBF8FDC7B97C76DF5FDC62765D55AD993DB7F0907EA177C36ED9FAC7854
AC865B2BFEBAE6EFF4DDEB727B4321E24A2D8C7D3358EE391B31E80FA5998089
7F9471F36AF42899E7278ED6D5DB95FD665B591E12E4DF06B3CEC7D015551B07
AAD8C85C6196DC28076CF4C4A1C62A4647AC1D5FB8AEBC6481A94C6ED5EAD255
0500073598D17F51C40339BBD717BA9555F70DBFCE390F10F87B5A4D7682D1A0
AE125DF60CFF05C7454B82F991CDAF3344A10115DEA01BA7890B3A1123170D99
3F727ACDC8C0F00E871C90A6175956C54E9E368CA67F79A9DD91ED489EAAE76F
173FBB4663DE44D9F0B3A184AFE75609B62AAB76074CAA13A2355873BAF0F0D1
B5262B824ECCA9A0C7F74A4D13C03D0948B6F864DCD1251D26551CB2337693A4
3B080FD17A292531B5F5E64B876C58A4CE3CA66EC2EB0A098A5D9D4D41C9E55A
7E4EC94240107FE7909AFFA25FBE1041A54E0C8A79511ACBBD91ADB807ABEEAA
542EDAC9B6ED8F254F6BB7D73551EE33D4FD3CC697DF01C1F094DECCDD9F43AA
B88640D0E9347881AB1F62D9A8E4A799A0706A34C9C8A243A6890CE854E3EFA3
B883E515D1C4E5829166B8DBBB1DD948462957711B3A26FC69AA03ED308F28A2
3FE7A7DF7F4EE6D26CBB6620076B0AEAD03AB485F43DD669E9F6D78F7F3A3D17
9B8593FC3F87DEB0F663278B252DE788A0B966B6BF54AF8DF51679CB3AF165B1
9E278ED874F8E46362D3ABC30D65F4C45137F1848A3687D5BE45FEF3D084AE1B
3DDDD239B928EFDA00F21BDC87DD2D8DE1BBD7947B76889EF72C0DCA22B640D8
7E79D24C2B8F38438B6E4F14296B301DC46D7041C10BB06215A25BD1913C7954
B5C60D0F7BF68D98B214195ECDA182220298DBB1EB1FD9E609F1B4C62F58C1E7
29F224EC05FB4EC009EF48E7E56CA1F98D0CE749F731509FB6B908695967DE2A
007A5F489A2FBDAC9D5E5B894645DEAF72A185AE5BDD16F3039A9B67071F0C58
187DD47CDEC4452ADC8A683A2610DB6EE097EF1AD94FCD6D373246804BA5F217
1C5C56B6562A17EFCDB0BB982F75ACF33109F8AE7ADE4954D0B1E18021CFABAF
619DC53F5A2A0C89BBF1AB58C3DBE99A3FD440A7D3BC5E4EFE77037671FAAF08
633A13C303EAE11BC5E99B48E34D0C2E929AEF3C8034A681E5C185DB2E609482
36429CC8E4162D346EEDC7260000BBF6A73BCE98BB53AFB2C6694A816A7E1586
15829E59EE7357336300680C95450394AD4A2DAACA192E92CF195742D5AEE902
297EE9520CA7EBF85DE9F84D3AAA119AB947B5F5B9E5E1A0C6124B1D4E67DF3C
21F1D051AEDD11F65FE0F14DAC42A2880B683118A3A2C7C7355F5E45FB504F62
6A4AED7CA434A95AF0B24B801710B398D9E9A95138859A8193A17D1369E2E54C
06B408FEE2918DFD868DC4480DBD8130BA96CD51D02FA1999CB88EA646C764BD
2088A3EF04FFBF0B61BE229F35324501AE0F98009DA9ACC5F02B842CD02CD8AE
FDD97BD87B20D735CE102C0F60A9D44BFF1C27F03F6D79DC011146CA28EE32BE
98532AF24D5D2991A3AC877F8E16E0C392019E33F268CC072F36EF12310D3095
32C303C68553C91CE83431F239BE883C519B66952A2595A07CBF1BD05B68870A
A4FE5CEAEFF2DCF00027A9D62608D532F4F5933A228601B780BA2B6C5C54074B
89611AF4987F7203DDCE93170428CB54EFDA16BCA544851B91A8F1296749A72F
7BEA1FCBD8592BD24249231076ABE1BD29285BEA0FFF15CE9237244C917A134D
A39E567075C6FD56077C00902CA6AAF0C12EB5696A397DB7699DCDD94BB71BDB
3DB5D727DA85BB43C88FD0F434D5AB83BC9B7DE897744D2CD1E94E3A3EEE36E2
EBFC879CA86CBE62103F587C5DF7D09B914ED8C78CCF45320151142D1CD4D451
CCA2F463235BA2C069E2E976668478860F81809CE7D928D72A21FC9F4C00BE8D
8CFF4DC312E6A454DCCDF83FF2BBC7B17EF8C886C4679EE1D81DC3E988A7D9BB
43AB6E6B63E503BE0AB6A71A1D06D2FA9ED0B02168B32F6CC0FE765F2AF96246
1626B5EC47DDE14A666942B10E15F853CC86DAC21F1A67DB235577B68003BA14
073E2702296B284F803745DEC5FBCB5BDED0C269EC967551FAAC019A93A7A160
4830272EDAF5E261C77D4130BE3FD062801BEDEB1BABFAD3DE6664E363591C86
F9882372BF002C07632B519225237A100E865CED746D25302D405F0492BD7ADA
007696765A4CE85D0762327E13536498C50760182535BF238B1D0DA5C2AAE493
B2D97F55D69D35C0404DCD54C21EA62F91951BADA960055F44D04264D92D6F13
267A724482A87FB8CB88CE0C0ECCB5C070C96FB7C7C7B8F1CA0747D9DADF2C98
FE196B0EA52B4479D078E44B99DBDA167714218DA0554750299F7A6109C7527A
3D23763B76BD8F81F317A7974C5A29C373261FC67D9C9FD61BE5C587D864754B
774DB9CDC2DBDEAF1B31D8CF1437D6B136DFE42B145626CDD287909F4E902B14
59DF1E36014C5E4B546CEC445793129113559E917EE43E836C79D6AE577A3784
FC94031C64514BE9CE80266F62A5FF87059721A58539EFA64EBE9014BEE383BC
B280D84ED26442237EE2121C14F116A1114838B333EF11A87895C83CBDDB25A0
D1A489EB0BB10369D89E5E7CF8E766FECE6BFD3D847DA4F518B81FADA8181433
2B622EB0CD4AE4C7AD117137DDC1A13F7AD8BD899F9150D97CB8BF6E77DA0A0A
BD46A72802B0912C5C20B3BCDCC053DAC866127A85D3D37535EB04FDC8F5D9F4
C526815BD2BC47E36D2CFE3CE783D1708C7B09F9A92B658455FB81B767DA7E07
50770213BF6188DC183302136FF6CC18ED1A45D5D133019C4ADC916AA6F4F5FE
8A642DA2E54F422145BEF3E6526AFD58333B551D1907126E0FF3D8FCAD4797E1
2CA1757A9B630AAAD6F1CD463AA8E928FDC8155408EE4D3AD3BFED9D1DB31CB9
069D9C3FF5D78DA7FA71DDE465C0D66A993ABAF34BB243BC19DE3909DA113261
FE646B3B9FE10A0E27F605C0005570FA47070FC79D81820CAC77FA44C3B89C72
55A4F118846B7570803990AA1C1666B68CCC383E5403F0A734ECAD86937D32FA
CAB278DE94035C5AF7538DE81B5B4A7A4AC5F69B87DF1F877DFD7C77E8A28931
AC48A54635501C98C38B816811216A3D3A3F46401469C834216DF6E346AA93E4
203538720A95874ECEC5C8683B558AFED820387436E05EE2FBCFF44CFB953DDC
6288ADFD74FAC115C77370504EEE4A84753C33CB35844961E68842CFC30E62F3
92C5C166ADC1F3FB1559C371159F0D61B7E1CA292AC7A96CEE551D9189977098
F67A41B02DE27C7914F1F0A96E74D38961ABF1146F5E771BE54B09E2D6EBFD77
645845B7C08389FC49DFC204AE4868012441E36CCEB83971E3268925E47605B8
7766998E83E5365136ACF7F9D099F66AA8A0584CC439FE263FDD04A29FDD1974
485126E0DC86B790B2388ABEF2807862C3BFF8017A84BA6BFC1BA5940ECA3071
C1980C466DA9C531E1F1D1F093F794EA44C40A9D57214DD89FC8C589974C5551
3AE70589392CB5599C78917AA1C2D3D02D048B943D50B0081B2AF62392F4313D
144EBC7F73BEA16D73BEA8CD5127E5BF5701F9D4D8E417058AC3FB2F3A34AD00
EA828769273159D4123E00A6BBC3134E5C47C34D835DB493AECF6389494276FD
A4925399C22D4924000D2B35448E633F319D5CF793DD6C37FFAB63689DAD9B2E
82A7FFAD8A82C46149A381494CC9A9FFD3F9A0EBCDCED96FF1576600F1389BAC
04F9EFA7496374CC886F5949790A7E4B850B6B8E31EC18B7321E63AB41C5D766
69DBD8FA9A0CFC2D221EE4C0BAF1C49F2B485A24A736A894F1EBAEAC18CB4B7D
1983C85DEA0EFAB36D1CE3F1A80BC2BA01FAB65E3C91AF82D5201412387C5C3E
DACB7BB8E5682658AC6F300ABDB95B176FE85484DB0E94CBD27B6384116F985E
D4FC0CF7A1C204D4BD2D6AE28647D8B480F14B9D9A5B20898C25C34DD931F1B2
73E3A94B20BB08490E8968CD02762CE02CB727B8B6F7FEED25B1A51E10221B4E
F82D270EF712C303999771049F6A51C42FB9B6A9C4362429C2FBCD39A24463D3
E0ACBD81605DD868C8F663872B230E921494B129F80EA04F868CDEC533A7F975
9BF94C667916F166A4AD0D7458BF22EB926389B997E7182C83525F3704A64316
24D00AB9AF9F8EB2E53E15F94647C5EABC7C20BBB90B79A821F0377F09852707
B51EA42C0BCBF43D12C109FA7F552931E2C9272B577AD0616D09DDA2A16584C8
D40E7F673FBBD653BF01CC178DAD3D35670F258C5D392138E7847EE8F522D480
9F6CCD8766C637919F05E3BFD1EAC2B12D952D9B6CC48999B19367801BA59E66
0FC5B2B1E296511E8FB28339DEE85CE619109DC5B0CBA8EAA63129ACF3AD9459
AC97AB16CFFA3F66FAFBD0B269C85A2743EA91492DDC2F0F3FA60911C921CB16
4D3E4DA74037035D226F9883B68D6CA9C60D3A774AC7448624EBE6A7D0067E35
6F5FF40C89B75E7FBC53EF85680076F0A90CBC58D0632E74D42C3CBEE053515E
87D6C4094BBE3F2AA63EF2CA799E15322A392131FB96C14CCBE65E59BB4D23F8
2F2DE3EF5F034ECC85F78DC9DFEC342E27A763669EF26D60529E8FC6212DD2CE
8D723DEAB785CF0E1806D7B4826D421046FCE4E987E770A4A7512B5276E36EC3
072C6DC675A2DAE6040C150F8FCEE87A7483F92277B32B4863B8E1579B599829
376AB867F43B2F6320B331A6EA21B51B03F280136F3A2C060587C6798E098A1D
4AEEFA5457E09B1C60BA9D54EA09C0E2FCE8507F619CDA4BACFA4A91B27C809B
7735371FE5A2F54624315981DB9E59213A11EDFC1D01EBB4F43D271F5B16796B
6E9FCD7713EFBAFB09A6CEDA2DE760A98868ACB45CCC8CC2370FE267830A4D0F
2409A4459BC9CF7B2BA769BCBBE17E81F552B601EABD3DE0BC0C3844480A8AF0
4EFADF5D4F908165B1838DEA82825E379F4A7EDE97DB40ADCBCE6D67206C7D11
79F265ACE1585E331A8F8B5AE06FF085C1F349215584090AE7EC27EA837EDAF9
DBBF7EAD3B2858BCFE820B4503BD5F29999C7A0E3AC55C7435402D28F2E84D2E
E64520D20DAE1D863047ED474E472430B205A38708508E366309BACD4A217669
C30B543B9CA91FF11E59DA20A8E9CFBBA5CCB1A9DAAF125E79D5AD7DAB05959E
694040B3A4B0F23D344B5B3F2A805F8F3BBBA4BD19649A69BDA0DEE6B17CB6C8
2D7263DE921E4F22630D3B3B95B790F3FDD35E4640BC1D08E083BA4D822D74C1
473FEBC4F1851DEF7E13C4711484075AAD24C10874C856F4FDA49C6389BEF3E4
1B0F3C4A5DD8B590DD235A5E32DA7BA7C5416CB1585074A85023AAA9730364B5
B8B54C1627D63C58C1BFE6B6F2583055770EFF67496C00AFD0E4B4C9307FBDBA
3C5FE93DF12830D995534A8D82E4B822F07B115A331A3BEE244542BFD2849D49
8C239237ECDCB23458C113C2E75BBAE92454507BBAB460BF0CBB95B97314FBD0
DE871581DBF1739EBD93CE53DF85531821C23E4DE1D2A886CDBD8B600FFBCFA5
C1900BDB11125CE2C263BE33460ECE4FF7677CEE2603269D5F288AB410ACA8C4
1E720CCF8DB6EAC00A0AD9A3D55C4A7AF95B79602F210CC9FDA0B6813DB5D7FF
A4D0D4CE63891BF0A2BB9F3FD7213492DB7C4531253BFAD3180DBDF8DEA31BD5
BB3282B3325B1C9C1670B8A568F69091BF0FBC9AD619AF7C3141F3BF49BF2C28
599EB66F071FFCE3410C547A9B74D212C964E312A2D5ADF6881FBD66D03721BA
9C1B8016258F5BE116B1B605357F60A18B6D6EE4E5D1A32026B5D6109BF472D2
230BF4BA6428F8EBB500802B6D2B8A73C45807856D80A2EF8CCAE1564F2D3FE9
ACEC391B579C16BA1AE8BED36EB2C52BA18EF531DE09B52B7093D785F43B98BC
1DFF4721707ACC1E45E4D50FA5D878A7BD6CAB588B84CB37FCB36482DF85E9BB
4725630BF0B5CC539DB1312AE27EFE633C28A2F142B8069EA0BA7A8CE3B177F7
3BB5805D48E87054CE92EDAD3E4E503B07EC3DF25246FA9100A7BCA663C43289
67C977B430B63CE6CDFE50A0BAD205E6A62F64EF5974CD8E25A6906CAC83605B
885A4ED63F4BC399F6BC4CC2760F7973D6FE77F7AB2E72FFBDA53C2377D779DA
1F0DE6FC09910A13B23860D75CE5D4383FEA6A7AC505A4349861F3FE8BCDB2B4
47A5343D2F42500A28A6B2126EC9DB90BA60D4F0CEFF050A2D0C361DBA96475D
3AF367496E34A2E63D693D006CF3E86C24F49D200E2BB4A8AA530ADF5EEB2DA9
FB58AB983090B83B89E67D5EFCDA9560134AF22DF5DA92FDADFD2B6BCE818234
2AEEC5762713C43E7E94884C06329D340EEF7131E803A7E943672A1CD5715F33
9292048488706530FD15A0614101B04CBDDA982E68D06BEF3405EEEAF0EB2F2C
EFAEEBE5F14FF089AC9771948B6A6CA310BEC37379CDA9B76A56A327053E0F6D
96D1C2B699867EB1007E5DC5EA6B562AAAFE1CE74489C9049F0F4999FC5108D3
0E0300F41101A7F4A280ABE1C7F736EE916ACFE714A6B9B8EAA1C995B7D1A07F
F0F73B0283C8843E9A3001BB96E55CD0C1369B201B4DA7CE2B7194624D33B425
27A37458A934221765FE0CC6A3A745FEB2C1986547967104C20BB07933495A95
4F676F7DFA49F81BA6B221FAB4F9BE46875FBB75E16CFFEB450CB8BC91FFBE6C
83D561EF669E58F253A769F6124346CDF97050E356F2216D58A6C06EE1A99350
025F131D697CC0ACDE8CCD15659B544FF00AB76C39EA6587B515F5CAD0858001
D0F08DA33F15A77A5BC024835129BC973464E42088642FACFD91D0DA472B7A12
45FDA84738BE165A609F79CBF49D51AB8BCF5446C01C12DF0BB6864399601696
27640B4ABA46A9C504E1D3078192F37463DF15E7FD87D172622D47714FCF9186
9575263C4C2DAE8E5FD3CCC8747BD12E63220BA21FD9E81986BAF8AFAA241DBD
42E7FC2458BE65CA6107E74C1638DCD31FB2283B5F192975AADB6E27FA797874
CDBB0288B81EE909C1C6481A61401BD72C146D133AB705B2C95F99B731FD6966
0310783BEE1DD3D04EB580E039C2A6D3663AFF2DE36A2249BFD2DF460161D3EA
5C1FD48BDB642F09E20933D1022D57370B9BB48DBDF15D0CFAACE523B36A2AB5
F41BAF1D6771576B4D367AA58DB75319204D8D0EC8AB2AB23D244FDBEDE09861
0F35EA1270FE584EFC5ED60AF6B276713EF5869F582AF9C2D268844EE86B58E2
8A9F5670A5A21ADC5159077D035218E54FAE83264251DE61694597FD026472CB
F13D266D599AB1EC96F5B69456110B9A8BBCDA8551C3C14F979F3CBEE18F1B61
D9AF69A47DF33A789FF79255ECF2AF644EDFEA8330A2283B586870FE655D6308
126DE32C494C6AAC602AF5B9CB036BEE99855EBFA4EF4B7B119AFB50293D843F
7A4E04BBBB4676534794CEAB380B1E461C5432ACA19E2F156ECC4E82D4CF8E6F
87B2A2DAFC69673E1FB81997633C312BAEB63990C31F1EB7DA809BE9F612EC55
D5A9C1CAF14A0F012805FAA4DE2E937E03744732E3FC27B12CFB717869B7EDB6
649D987B1654AD20D7CFB9509DA585AE4898298C84706D59C727C55EB86C8253
596C70E8AE60AA436618C281E0A0E3B3A9303CC927663E45ECF5C7965E5E2A13
03E1863D4979A4D16E807CF86488DE041D6692D29D19C4CAD31A9169AFE4B6F1
293846B7C544718297254186940D6305C96EE2B9E3E7C9A622D43076C7FF8258
27FE2A6C008801304DCA2BBA8F01DFC24EBA89793BC051BBBF440365B4EACB09
32EDB316D35424CEE4FB1687A50867043566AC7938C812D690765D2AAD322BE2
E7EA49AABA75AEEEC5DDE1D8BF68483C3D2F616CA0F6F9D726CB2CD81B49A9F4
7C12FF76284D3B0E49FCCC1041A6FCD1E20CAC60BA728EE459CBFB2869BE3566
AD877E9208260AE6AF24100E2B365BF89C5B67986633AE820590CF22DA6BD562
1A494EA63AB3321C9FEF1B6401D2862D912B670A8E4BFF4C49067AD2D7F96127
78739907C3E14616874AD27FE89777BBAE47CD1B4DA8AABDA0113472B8A6F118
86174A37BB8BC122F8F3D7EFDA0CC4B5A78173F07E3FD7A174C40F2366A89977
6626190CCCC3A752A37735B9C1F81610054A54D7696562872BEAEB44D3903FFD
37E0BF9115CE2FE02D8A3FA89D55F8B4EE3580C618C1814F112E445F32C09708
17BC405BA17A8DC92C1620641CC75AF1F20897BD0FAB1B2FD02D8858BD9EAF32
1A2AF2256EA0675264922F9A98E6FBCFE8EBDD09F60C7E4966B4FAEB0406B72F
8FF605BD06DF2FCF59CD95FEDFB910B6371422CDD07263005CD57093D705D445
AA4B08E97B5BD3466C6897065446F765344F395FF6F56CFB6FDA12DD94D5837F
8101D3D65F56FC7F03149B9B7DF58324AE6E3B639DDE323A6EEAFEA964BF4076
068AEDF0FFEB7DD80B2AF0AD023ECB8F8B6686E678F02CB217DB07076D4391E9
9DF321D0D871A37C34F2091D7DB7178BD882E77D1781093F956E26F8437E9BCF
11C6EB1984E30EC73AE00E97EEB44B3FCB53808E0E4886406A9D33DFDC628688
61B6EA02DA05D223700B79E4CE12D3C314505BE94706322FD8812BB27937AFD9
64103EE91B3C44DC05BF90F7E1C0DC50899D11BE76EC06EED3099779E5FC0575
729CE67A777CC63C4C9E2FD5412246BAC474C4781B457EDB416CEFF6B6CB9AD4
F9A371E1CE10D1447846216EAA9017CEAD458F7A4D93E623023908E9E810DA01
91D78DC4590C6F4A4A6E856625268517B9480A1FA7EE5A3EFD38C40BC331DA68
9C88D488A05BB7FF49A02C19D15ACB2EDAC4132FF682458C372C56F0089D820B
417C95781BFAB6A0D8B08715514B0FCD8B218F5D6F402974C4ABDB3265849FE4
C4DDA6930768FE6AFE6D28C37D65824F530A6DFB468D532C2D87ABEF72CEC766
81F8FF7ABBFF2A12FDAEB449EBACFB570D76D01209F22F4D026A3744BF5BA2E4
509336B00B60CCEB075B7A849768E3AF8E18EC31EF1282DB5560640BB17710A5
ECDADB2CDB17ACEFDE8AA1B618BC61851AD5896ACA01B2989993D432EE93A758
60E50752896D831ADA61B11F5EC2A7D2C1CEE14D1A67BCB8CE617B764818176A
2720844B18EA91B95602F465D1AD44459C0B6301B1902F233736792B3CCAE73D
EF3F7438E0E130C03711927D4E8BCF6DC82DF9608B80D8E86E8DDFC641A71C9E
0244FE096571F074F07CC1AAC1DF294CF5A9982514018792CA5E16B365ED83C2
4C44A68CC2E0CE3049606D0467149176EE154BDCD604A3A3A5769147F2341452
34D9D6EB4DBCF69EE93965D4CC8D86D95693B04644EC4506909C1B4904CED6AF
B3EA913918F7F9AB043708BE502673FF855FE49B1B3DCEB358E59045747E0164
0867A82845403A4DCC892D2809761DB613442B58C7A2595EDAAF9896D6C10980
A09DB34E084C8A754E31BF57102DF3066AAB60C5346E0446E0EFA5A948531F89
CB6FA0473726E1F3D6DA978D71BB0A50519CEC6E1EC23F475ACAFA3A1CC72F7C
D60952852C53379530E0A6BD411EAA3DD5D71B748F6814D308FDD1F2E214177F
B453C00B249F51D04092795F2EFE5D8F7E4DE009307129C04F732D4405A8DA2C
3ABF2B3E9255B1CB006CEADB9B9B0FA5B6805A9F7769C3FB1EE4DEB7FA2E6C74
B7B0FD749F1BE8235A5FC9E2821663A5B9ECE9F7A044C3775D3A1BA43AA1AC0B
DD648BD4985112611A61E9A0BC91EE0DBA5A65D0367FA04BE436D92E1D980CFF
D78371E3B56BEA2F73F484E5CF75E9DC90AD1FE38A6A175563D9848ACD3B1C76
E9E0DEAE85DC7A673BB17F6DD0D58ED7928C5B6B00F617F1B8AB2E2A5D69DD11
F6760850FD87EA797B9231E72D0B5C6C21DF6FEACE550A42593EC6AC7AA8B27C
FF05C50D710572B9755DD5E23B191D0F4F6364347390B355E5F85B449A296930
A074E05C82101A3AEC9EE2CFAD5144B78C30DDB18D53DB226FC21A99664773E3
E4AFA69D200AE2AE695674C0BE048ABD7D334D4A2C46946F570C6118915EBE78
7DD3F082675FD2C53652D20A78F84AFA88CBFE8A2DE758406C701EC0A2E7CD85
8C24BB8A4703D4D84D1B7BFA5D342C1F9C574DBEBE5FA4F63BBD7A6D35563B70
55E16394D78CDD74A0FBA343AB7090DAD70223B199F2133EBF300D96657ABFBA
F38CE72C8A833D3C6A937A1CA321B950C8CB71D66E45C9986C6298A1D8D41A5F
7D1DFD3B04EA0BA35F1EBC62C3043F683DCF8580B1D12808020E2E2275BA97FF
BB0AD2C5BA7EF9CC64977116C3920F4479A729819AB872F18A2FE15167D17959
E993D4FCC84A43F02E224A54E7CB5770B8F2B3EAFEE32CE2A7626C25265B2F1F
AC587D68CFE9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B35575207D2AA2476912EE771037F8D51B80
31B5BA4FA023A643AA617DC3B38D8B3697CECC8AA4F174F5B2C1124A9CC2E373
ED1F6F3EAEBD1C8C533E943977A590361A53953D75312631D6F07794B1D85325
1462B649443CE79BEBA97AE481AD4AB1DC86D8BDB89DADA55F2D1AE640852657
EBDB5BBF685EB2A4606DE426020640D534E795EF9019F887473996793F6FC92D
A11EA37B2EE094302A297311DA3110A873E6F7DF8F113DDE6AB0E182E5162DC7
0CD52C99C5542185168CA1F712BE96EE3F15292DEE4B72E4FDC197E724033F7B
B9128F40DFF15856EC96F5C3BA6E6CD5AA138B168C23814295B0BCA199FDEBF2
CC7849276A1AAA5F1598EC7A9A573A79CCD04CF98E4C6E81DE8EFBBDD3C355E7
3E38FF48F0FC3A3DF5B4891F92369E9379CE45F6CBE7E3178917EF80132FC8FF
0C7E7C01CED707EE67D626949BAA454CCF3DD58FD7DFF7B255BB8D78045C6F33
68050136CEEAB37F705812FB77CE978619015F83689687231C03FEB091AACD0C
096AC82B79642D2D6137A0EAFAF7E99E776758DE763ABBDF4941EE3F019C50D6
95AB27025E5B23E9EDFDC28477D4089FA7FB24903DFA8601A9A94DDC7CA8856A
61906BB7CD5369E9866D34B4787C34D8333876B55306EFD1EB85F4F7C4373DED
D9ABC33FDCEA9CEE604BA070EA8AF73445F2B3D162BF0BF4CFE393FC90D13EF0
3B05D613B253F34117B33916DE07122452693669CE60E1EE687CB3C92EFDF198
20959B28F5D6AD0907B6E4B8B338BB46DA634F07DFE77A4B16D1842C5AD87F0A
6ACF0E5B159F8FBE4AEF2681C2D96902480E4D107381C72D203BBCC9341E8242
EF8C770B22DE47BAE6D026B56A63B31C16A51E7B81164771440C131B17A026B1
1C35C6417958B3D6F3495EC3D1F62640E4F7CAFDA130212E40A68E47962DCB31
39FAF4746298CF54263F982CAE3C82B9619E3DBDECB17038BE25A83B43CA7FF0
A296819C753E396B1A1CF8E4487D117421506063ED26C7B061
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE5020D74C7714FF08F5AE00F69DBED351708B1C760171CE5
5D0FE3BC5F6769FB19C7951CD5DCA774B841330A2C8CF59CF458230A1642F956
21D23843C4332F05F5AF14E70EF052F02F7E3F51D6E7D68A4FED8D2C4A733AA3
8973CF4CDF768C31E35C395C3BF67A79F8B1AC292F38AB2EF22A87A8ADBE2C55
747D7AF3101C5F1A2A1BF6C0E245A1ACA692EB09DFB0B9564767237E134B2789
D25D2F628C2DFCE0C21FB4730D9EFA2BFF8BD3B45540FF72F828729D3CB5DA64
7B3EADC84B1D25AA90B0A597B39F50D34C0380405F8E70FBBFA27DF0D9A200D2
2EBE60111D64086FF83162CDDD96166F795E3C8185F36C8D567C8BDA504CAD36
73DA0FADD3EBEFEA15954F01DB19D0B2217A275F139F173E270CBCB6037C927F
524EE70AD24F140AF825F8A370870919E9E6D97837356B4B1F29D4B0F67C8A86
43289F767FB1901DE7CE1A8A0168690A2244E27C67003C1D6911750F761F9907
A438DDF4506C6ADBAE868F8AE268A0B023DEE119BF95755142A91F7303A2EF44
8FC6656EF72C8DB903C21CE30CC7FD16DD4BFDC262ACA6D622516B67987197DD
3E233670D60B90AD71DB8ADDDF5B7963E6EC917BC6FE271EE6C23FBF532ADEE1
A1ED0BDB25651C9E60B3A5D08B4068F1E152127ADE5581E40BEEAE93DB98DE23
6DEF8BA32A536C00BA8B7F5D4B754C6DD160206DBA83310D820B6904B356A920
6AD494E98DCC4745AC6826691EE0B50291436D71584856B446219BFC477FAD4A
47BFBD053AD083848FC6F3CFA44B7F502767A655DCA4D16C84E03F225D2B3290
B5B971299074ED65C6A50CB049EE1023B43C363F913D92A36F25317C55A8E22A
F5E672C76ACDD40CA076EB1C423A75A50F4957E04A25069E1A59E605544030A0
0208BEFD228AF95A0020FAB757002CDC7DC857E47F1B8BE514286D4ADDC1EE6D
81CC0A30B3760BF9B593A873A285371846D289D845D72F07C85E7F7FEA874548
8834C2305F779C7F7585636D131910EBBBFDF05BD161F3C9F0EABBEEEA663C31
910979151AC7FFE5C95D0766D73F37CD0936452CCBF0DBEA7ABBE93B503DF6DB
02B34290329CBCDEAF9EC301CF7DE10F501011726767829F82298BB34B9E15D7
2CFA1136AAF37E865689264851FC0633C2C4A9CC9EBAEFE2A0C319B6CCEED3D5
B48059C5DE26DD90DF59D407B9806C3F10E837F7DF58F9ECE061E9946CE52012
41B9F81623F8487DFAFD10EE01A7E4FA1CCC5A0AF6FB3A875943D0A0EA15D877
D7493895BADF948F64658A056769C3A62DA5B453AA618F178315A8CE8E179FDD
C8566F8AE746147056CCF275B6639768CFC95C4AEF916DABBDB0924D62313FFB
14DDF4DFD1DC1E3E86933B02CC10D47E2FC20E9A258350CDB97056F9B4CFCE50
22E0E1DAB6AD207AB971107D297A6C6B4555FBBCBE6BABFA2B0FCB91501AFFF8
A604F3011B893A95DE8A80500E3A6EAA73E6CAD23216B1F26CAB5136073F74F4
62036F4A825BEC8A36FBDCE8240A736FE292F156BA268705B8A09D6DDEC28C65
15B5E5BF72C810C34456BB68171C757DA19B28AAF53C73E3115D2619064A4BAB
C53B0548AB87D89108FC04EC671708307638EDC15EDF0D9F33F92C1AE10E4281
AA9BA50E643ED15A7C233E6FF40599286293CA59BC7073F9322816492CA10DC6
309122F98EE4CA443992756A83C45A156237C1284DC488C2C4A218D528FB2057
CE24DB47976B7DA0B6ED69715309F1D63C72672684F02FEABBC09DC137C927D1
91857B892798781C43C70EB71F2E7FF0EABD2EBA1547FAFFBF9CFDB16B14D949
3B0A987110098B535D65CD912FD493A506DD68C9B404BC5B8AE6A26F1908DDA9
EC89E2F197EA2B99CB66DFB1C49C9745F7FF52D8B31C782099D5EDD07724794A
32AC8634ACD670EA6A48046EB66976B750E2BEE83FE05C5A36F89B0D3E47FD5F
26A603566FB745C49EFC360AE887C9CBC1E183E3D5C91E8014A4F744CA389752
E3E05A113C5585B1B3EC9A0973259809C77EA2508DFB15ECA1D00F79A7B85936
13498B83F608972C9C4B8C3C34CC6CEFCA9E24FB4C8B7EA591A67EBDA91AA415
2DA96126B68219747AB12A0AA6E5F46ACDB18BE29DE3E347E9E281716427EE84
1D8755EBCCFF0A41D41F0E6A1DBFF2FBD537CC238BFE8E721BDF4724BDD8D57D
D2A05F1C4E11A8B48F5449CEDF0CD39BE640
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F4DE2DC90
B8D31A953343D5DB78B1F2CC6CE631EC7E3D0041A823DF2A4702AAC0F0A2F018
E5ADCD42EF2EC8AFF6F4705D30042BE7B6F866C14AEA1CEE04DFF82BF14931B8
D297C38E6DA6E587C23EF0864F69BB0DBC9C1EFBBB97B92BADC336A4AFAC6A91
0A6B158DC42E975CB5D8D2054CEF367FB112456AF50684C41F80B1E7ACAEA853
B843CABA76BDE9582090299F423519EE3AF8F83AE7F7828B314B6E36E9127419
F274E9FBF5622C5E48D7E95664D6C0C1006661038CF2C93BEF1DE34A163A2C86
693A13F4D0F052D2E183F36401F0C29862BC1B36A086524F76C7EE2C6D436A23
7009F146F1756DCADD3F70C51FDCE610E30C0F4AC538A2703423A07976ACA74C
25F4CFD6A92969E206375FB0C672E45948B0E832F2BE688EC22FEEB3E06BBC3A
272F73081A30830AE4214F2F029918FCA40BAEBED6299EDBECA01E08F27E5627
F53BC56F4AE7CE2D6273B27323AB829E2D51672A4990E3AEE84331583A99DA4E
63610AF8F10C50FE6196E3F4C1E4FC9BA6BE0ABDC81A0A7BF6A5792A97BD0A7E
7BBD31C3FDC01D734550843C8D84C6CC0B492CD1A6CCD57428F03A863E959C77
457D401028FD00FFA9BC422FD09D8B8A70446A61CB256A2FA0B59A2646D9C5FE
961894DB8B315C52008B4416AC35439E010BF90E43A05FCB2FBE8E62385E220E
588B7FE5509F1BB71150E159D01D24EE28008D4213227FE9BCAA34364B1039F6
BC142AAB19C8E9B15F0113781DF9C9B3BC145955552A901AEBA588D39D7E87F1
CAF27D315E168807021B0CD1B2CE13B611A7B5FC28DEB4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492847AE57C85675CF04BFD1410B56E616F
68C3927EA7267C0C4BBA87AA3EC7166170B80B7355E802532D38053D427DA3EC
5D297AB110438F9AA9CEDA887E63AD877E9208260AE6AF24100E2B365BF89C5B
679912C69C51E8D0541100E3DF71D501F4BFA0AE8260EA4119883BE0E2CCD156
1113CDC4983460A31A70C6614DA60CBEA3A564539DA028D46BD8A6C8E870451A
F92C3A3D555E94EA81503E0D53C0AE8AF190625DF8F48C433C5CA5E61B61960C
10E340864F2D181B835CC0F9C87C9CC0E95FB3F1824BF5ABE0DA3110FBD87806
4770B0F94B263E2C7A3D9DF14D9BE01BEF9882A1EC2C8DDA5931F895D02E4FF1
CAD0158061CC26D5256590E51541844B9AE3A861D6412B59941B7186BC31AAD8
9CC7F07EF9A36CF5C32F54ABEE8B83306227DF64A1F4E9B350DB04B85024FF0E
6FF4C8FDEECC5DF7106C24975E54928A3679928D4D84C98B3D33843CFCBD8AED
A1A74438EFDB0BD68AB2061EF46D65CA446C190A6BF6E0D8DEFA1E8EDDFB5541
473187ABC3D34172433CC652E9B2516AD0EEC9F452135D6AC8D97A90DD4C972B
69C05585BD438731D0DA714733FABC30765D6775BB68C69704D0BA5D6DE6BC5E
10342040FAE3CA1C359295C7D2967195AFD2D94BADCE1E95F17F0F95B5A683ED
8DA83806CBF2B803C94B5A135004A20823158454E29255E8846AB1AB9E444B82
AC000DE047EE32B5C7659AA3999D8CA1D3941D1FF042DCB7834420A2CB78723F
B40B625D7418A892CFEBFF58AE1CD0F128156868B917147969EF8319C216ED3D
620588A8D3D13C4737BB89F1FE17EA91AD0A119E1754916E4957C40F7642AD75
0E847F04D456B101A89F4E76E6BD785EB1F605D78CC0AB1425CEB017B47C1D40
BE68CE2BB94BFFF5120F91CB493BAD5966F870FFA6AE560AD6A82C3B0AF0C810
C12CA6C41677519886FD5CD163D6FB351E2918F4E5B5D5A27FB8E57A24EDF9D7
42EEFF2C7558A4479E25DBF75353BF0CB3E744B9009BFCB1D37E21EC06E4D7E0
2762A656C0E348FB75DA17FAFCFA53893D1ACEFD8C3EB97C9E7E5C3C5A303193
004DF6B0E2446527C65DDDF917C6C8B730247D89C817FB276D85EB671AD64DB3
4BB09368AB12D82CC4A183ED86D2841E499B785084AA21B81AF837A206A50773
FDDBF92515FD7870D5A35EA64BA957FB2F6990DCDDDF2859681D7B7D5566779F
26081CE1DCF8FCBF985B41005EA0771D928990C0BA6CB7E33875B819AEB1EFE3
7A3656C9B2060A89B3D1A0ED127FEDDC4387DDB2E10EF3FA3985EDC86947215D
585BABD246585FD44C7FFBD5B878504A44F08C38AB4A35ED5CC53EE38F810C49
4CDE233ED8AC7E692EDA8CE219D733D37296CEE1118362904F622FC22656FA58
65B5E26CAD7951FBF3D7B27121FF01DEA6F49C7A4498656B8A12ECA7752E0477
CC7F945AA8CA30ECC8B017D3365E4F2C4D6F555DAC9A6D17C263F63D55D6424C
58ACA31C6B17A617B342EC92A2FB13D4FDD77DC3A85B2508B70FEF36DD289991
A16B4097497EEB38F0274AAA1341AD3BB645B0D7F97ACB233FFA576119456D0E
E8D5F85BD47E3C79CDB4AD769ABB374D1B705D61C428B44B213057725969D808
B280BE2A969D2207BDDCAAB6AB26EFDBF7E27A57CE61292AAD6582B3A661F4D4
8AFE06644856C8C9DCCC07407A115D6D45B7DF6929B1C79277F3957EA1805B97
8529CE833B1EECAF947E67DBA704AF3F29618A894235D7DBFC1153A5F74EED26
102EEDB139492E743E82CB61CEFAC99D77B61F60FD9B0C1645E399B20090DBB6
8DFAAF4C6C1919FEFB6E3E8EBF926C2A91C5281153D5B28BEE5E71772C8921D6
9D11ACDDE095D43077D6D8E8EEF114F60F85935BDBDDA3362A11E0BF7854BF4B
BC52EAEB261E696CD413485DF93CADCED318B5FA421EF0BC594EFBA262EB2C41
4E43D8ACC9CB195D12F3B2ADBAA0D95A443F525372BDE229F13C485324C60FD1
D7DFE515B666ED51FB61F69E18AF955D6620C95021DF41F66204845581723BB6
B76B4C3C2E2E5B8584AD015374BE36AC1E08E1C53C079B8BEAA3E0F907086AA2
3BCD6FA9812375C8E8D4ADF7A319E9EAC6238093C798878E5D558B30ADAFC1AC
17B04381C6754327FA7C65AEAC1A2839A9FF799456B6E5B9BF421E82415746B3
63938E88CA325AE4BC6B36475154CACD25A07C74FEAA2928802611B4AAC8DA96
F7CA93B7288B2491380B2F4F87646F6BA42247F5B593A0787ACF533199348D11
730EFF7C25DD5ACD0221075ED47DD6FE8909C387D8F02A88FD24540AD71A0FED
2665CFCF412B99167152D35BC0E671E657EDD876C39BA0ED4E790A79D8AD6723
4A2C9360790E4981671E3F898A1157850F48A5E0F299DD9078866AC4AC771A7E
ECE3275C26835080FD2AC78DE88BF65298A8EB4181F1646B5867D0EA3446F4FA
176517141B75FA51F69D54478E279EC2855938CB532FC260FEF5CF3FE05F4F6B
1A6AC463C1D1A24E7B41EBAD57574D43E06E13690F831AC63F570D466C8DE97C
2E08CC01056475E95FB467E2F3B08917792C1DAFD35FDA10C0E14D125C730ADC
BACC2CBB9BCBB0BB982F75ACF33109F8AE7ADE4954D0B1E1802506DBDA73CFA3
DEC72E83650F240B54E88E51C065039ED16C5B958CF632FAC74FB900E04B0B13
B26BFA8A80D5663FAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCB04097EAF
EF211683EB8F6FF2306B741C9455B48094D2958B832B76458887F0FD9D971D2C
75AAA237EFCFBE0F14F797E71B0E19D074858D2BB30FEDEF6C34FAC40779F603
770BA127BD4B9E4F5EC52314B25837FD118062685FAF4391CC91AC0ABAE56089
30E599D101B7ECAFC159AC2335D6DFEDAAD93A074010C5626DD9470582E82C12
2DAC32220AEE7C75A5BAC24E9E43AD56BA6B5B915CA1A908C4180B7DDB99E3AF
5C45072D5FDE12DD81276D7304AFF3059366F293191CE257782F236FC2299F6C
60070DD031F172CB2FAA0C0BFDAD40BD3AE7D647B0FFC9298FF9481A19CA03EB
E2F1EEE59A3D6E3FC23B65AED24295DFD94966CBFB46E98286E8AB5BBCC5A8C4
31D8D7BB6D38C459ED7811962AD08A130D7781F378AEA20293910A7716341DA6
4093C33CE11E30603EAD00851CC85FB116890A7C58F795071033711947B65B0C
07BB7FE129E446F1A58F097CC13CA9BC695F782ADBE50737CE43B15AEE7EBCB9
0CE9D7EB1913D307114496116FF0087A48789461E310DE9062984F6951B5AA2E
BC98536501922114CBB2D9698493EEFA925E555E776D6916E68159716FC183FB
83834CA958EF2A4210A873E6F7DF8F113E86D87F7B364763BBA1AA81F9D7B871
D7EAAFDE0578B3E819F2D472E963C4FB539A61127D80FD783E271DBEDD8994F8
A2E9F96F4F81D178EDFD36B63A9E05D8F4BD13318C16396253CDCB9E1EE7A887
8F02E0B498DE9C1A5F110347B7B612146B59530538023BDA6569691729EA004A
3D96F0FBB300F40752DDCE278F26B5D50F9C8BBDC7B3D5D144869BE59F0BE9FB
57853D65DB474E4CEB98EAAAE80FEA3557FC29E982F4E43B182BD85FD6FF9604
20E3B5F8A1C120887EEDD7CEC677E95307847599B02E5AF54BE91F662979D0BE
A1CC2205A8493A22D252AEBA66664B2A0FA2AD5C2BFDC446E8217D3E5D67616F
A9C8D25588F1689221B896E4663DCB2823847EA18AEC15EB3464CD20830192E9
FA76A8D8C8454C7E9ABF6C0F725BC64477D228181C86BA782F4FE02493A70F60
73CE5AC25BF5C0579654DB07E4ACEA3666110AE5DED90584F99E14B24C7F8229
7BA7530C442B5E22F23C7CC8F7E46228385681473BC971AE241B38AF02B14565
A533E6707D255BB42CD9DF0629D03971CA5998C47A82E39690B59C49C936C145
CC25F858E34B6D27E13A4E773B8D621B25C8B8A3F6A927E3BA6903B35183A80E
B555699747DE2975C0D60DFF13F4B2BFF0C2D48D73A369A4A30AEF829A5B56DF
AF7E3886C50E125D3838DDC8AD6B097AFF22FA89583F307499638173A4543C6D
27822D960AC1783EFDC753B71A0900E9740FC2826ADD5FD8FA44B8F4493AEBE4
6B1A95FF11B58FD6F8C64EBAFE0814DB9D98B3A4D7C75B9BCC81BC4C7C5B4EB2
F0BB2232BA259FC908247A47D56938F3FDF31D90D46A1124E27587935F9E83CE
1430E3EACFFDCFBD4F291D8D47BF8B69F6F59CE04301BFE7C33A8371EC60CA1E
C6E086E9B7B057AA3AE9D82F4D1453B60FC1560BE2F0BDCD3C5F4602EC0964E1
E28AF026A9FD1E4BCD68D656301406C1FD474D98B7555DABFB9933BDE94E7B47
ECE15B865346D956FA91D2C2028FD64BC5AAC437310F1A7D586CC05048684AF2
7EF3C09F73527FCF94D46E085D6B51FD3EDDA3EBD21CB5B571D21A64935A7A2C
587659A74FE3CF535DD1901154F701F3FE52F9576A0FA938B0A6615694D1A837
41D4F258C06B008E5CEF86B63BDB575DAE9F7E1E55AD308CD97CA63ACEA48B66
6F2A639E1FD66B020C2CBC5CF51F32E0F85CFCD936B00928A71B769371B2366B
CDCAF59B1C2BB8D58EF2171FEBA2728C2B0985C065194465D1DA737BE911DD03
2E8B51C5A80C5C7238AB883E083EA59959A3000F6492EFD60548FC8B0996B192
D9CEEE79A7012A045FF72E042FFBF8A7CFA315D2A1B0FA5117C21FB2DE99DD2C
1C515AD8D2AF4ED82E1BF056123ED8131724F0C8DF5E8504CDA09408587DA7A9
3B760B3D6A6C9D8552BFBF3E3BEF576906C3E0A204A8F86CA2DA812DB4F23DD7
676EC3BE949F7AD05C717514E523E0440B2254E0962A81910C6EC8950DEE6B6A
9C306F2B40E28DCDBFEB8719FD1B960C1297C7925F24BD5F1D9AA016E3419AF0
E9E6D69B9452D47689B24A6535E6A04D18A0E3064F5B674211447D44706674D6
34A37B2E3DDDCF25F9748E9C7C3457F32359513A8A2AECBCAD09552AE8213873
2AF2EDD4215BBA84E5FE4C18CA96E889C36DAF2D9A65E1FCF4A665960E5A0AB6
86F9AE782F6A1AA23FD70CFE0C2768667D456D79BD93C1F87AE8E2EFEC6049BE
AD2690BDB45E16CBC88E02E471759DE406C018F9EE020A5F6C02176DF5B9AE7E
63DF2BD3F3C6CBB52E5D75AB74E830939CEF9EF8A94E89AEDFB50EC74C20E497
DF7F8B51EA86B1D6F5D713EF85B2DCCEE85F7A35F8246393C202BDD6920DABD2
DE584E5A2FA8061F68CCC3D5063D001BA3949F96D12EADD820721F4A9C360505
0501628C3994C49C54795101F25ECACC2C965491B245135F08746EA00A28484A
FEF77CB101565CED14C8ECC6DF72B8D560BEF735ED052622E6770150DDE8EAD6
7981C7F8C466F3C351EFC4332563944D9F0B39019E61F6A967212A94B65456F1
3DB459A5F8DCEC48495F00E02C48F732ACEF5D27A353C5CC3393B2C32E6E1F3C
E48BB89C85B9B0B2622B0351BC30602EBDBB815DB969781F9C6B1CEBEE69CB03
AA08FB060A2ADA681DFD540B6C1366F6AD6AFD1AB243502A86FB184B3F8407A3
7A4B011776C7A572D2FCF18871BB569C2DB5B8FC1C56823C9811B3B5ED20AD2F
E457E763F1E38A6ED91990B27A350233112B0A339366B7373CE058456E0E1460
18F693BFCD7FD07158CECA1F10A5D75C8B02FB448146ECE1F32E3F90B51313D7
430BE1825C90D88DF40E76FAEBEEF1C6D4E507FE6C285D244462E06C90DF1FA0
2FE9798974079E36D67129C17A6FCC288B9CB288231E1169551E1B859901766C
1A7C54F22342E068E261FA07D7F71FEEB9CF08C2BAD47CA484F64080B76D7947
EFF831722F16AA125501337D3D039AF45D8E99BBD874DD4429221164AAAEB4B0
BE5CE51D102BC0EC8B0E3E69D117EFF571C1B37599396DB70424C67B69A678C8
D5CDD137A9E80B4EAFFD8C81AC0484F0C03336ADBFE356DDD6B35E3BFB360146
2693C32FE5B20E2D3CCCEA810BDD12127EC21130215516C50BE417BEB7108A77
DE7108D85BAA9D005115D8D1E6F076EA41F64539056FD6F12A603AA2DCEA355E
493D7A642A63F8C286FC69F1DE5A80C4C8B98B9B20BD03520B38959380B6F051
ABBD09BD9CD5004F455D099B398EC368C55FD0BFBB72346513081DED184AE12B
B6F2A0B8B954C1931A423352ACC356032136221AC340391697A1B020389DEB88
41CB34E59B660CAF50371D6FA4D84359D5C57E07C0131287CB8A1CD7229ED655
CBB2FC2F05D180DF588DF93B6925100D074E11C6D2880420219E3FF5933ACD29
38305FB7CDEFEC635C4E3E11848D6943D5C63D07B8B577D80F66EACA440D77A9
179EFA630BBC9D924302C969561C704F60EAD3DC1DFD8ABEE459FDEC1AD8CE41
047A2A4284D7A08F95EF2F9B2355F42C0201BCB01465B2BC0429162BE040639F
2EE9C0FA967A2666CBA7AE6E3F2757EC5A6B046DCE9DB8F8CB66CC726C0EBD7E
0BB5ABE6B5DE82FF252600C67408DE17270E0A6B60951CE771C000FAB997C869
9AA219CB578D5384599625410D9DCC9FCD627C9341EE5EE7B62160EDBB0475F1
B7E81EFAF7223E9D7B39DEF7203248BB6D5ED9A55D61D2D8A66A55FFCCC8EBCE
C593DCDB97D883FC87418CC6B88C5C7E080127212E2FDEC1CCAC426117DDA7D5
07623FCE556CFAAAF11A5DEAB4A0A12E2C7221F8D06EAAD43B675E071A5052BA
0E3B73895A45C1B6C1465432765BB6FD433DB543EB9CF74C2730621336930A74
2028FB422DF59EE85D2CCF2D8DBB400361FA1F9F3854C9EA86DA22AB40A3B388
6A6C0542C01CAC614AD832E9CAAF95CA8FB8D7D6F8E6B1F1470D1BFD1C6E4F5B
3F37CCB5C6F49F964FB9EDAB8FDE5AF3B0271B0147A8E7CF22C48D74DD85E83A
3C976FE83802D4CCD92815B69D985F3B1562AEAB09969F261EAB2991CF141394
3CAF186B136B64A55AB66D790A65432FEE0369E74E2EB935991C9D7A835EB88B
C04EB2B195DE98DA506D8AF6D5EB3D2751503DE9FF66CE21FD3F18EDE6972EF5
476A0448CB709DDAF100179C41CDD34E70639018C1D94157A631DC2B95C562D9
F08098FF6D334E1EA12831EB854BE550341FD8E4CCA7D7A3E18478AD3F1F1627
C7226A19500DDC798B57B6D7B7724B92BD48CCF7CFA30A7E92FA628D056602E7
EAD96F26C67B2E10B620750E2C44E5CB9DCE747E296F7E721CE090148AAAC9F3
C2A26C00FD63316B1338F012EBCB1549844D1A9F70EE29B069A97BDE7AF2209A
9F760CD4980686D6A0CA26D77F403C06D65B7394BF1FC7D06D3CB4D93CBC1CFE
349AED0167FEB6593EECBC997193BEC0BA17470659666D3DEEB203D4F89B1D0C
9F483DEBE503150EA72F5529C6856A2ED6DEC7F70D115725622193430953F8EF
2124C64E01DE0AF5CD890470A9A5F179902CD32D6AEC688F02A7365B66797DE1
EA02281B8CC461A2C93D616618D9CA254878ECF291309CBDB0A9F287067554D4
64306A44A49AF8095E431F91B8EA9CE5EA5A6AC021E852C3A8F8B27BD5EEB828
B2BA0301AF9EF77428F5D92F0D318ABB61FCBEE8E8B0B00C0CD028FDC8D49ABA
27F0C96DFFBF5A41C82EC805FC436052C08C11F14B3AD58805DC0020DA959EF5
24B8BE47F16C08B3A3981E2644AE0718BBDC6A43328284068B2AB05CE92EF92E
2E897C1AD9E6A375D7771A6AEDB0E02641A97163CE1760E7B2BD1AB594E30D79
7581F5A0E81AB0F7ADA1991DE42B2B781312D14C0A9051B17B14FB582DDFD9FB
29BC4EB03896F32CE12BC890FE786622570A50401A5E45A38F0A186733A85239
92CBBF6DFDED8BDE4E6DDFAE37DA6564E63E4448BD86AAF678BCB0B56BFF435F
C4E4109DB382F2181EC00A0208E0451F6B0CA3360AD99CD656E25305A846700E
91F93C1653145AEC22331C2DED3F4CA87451BB8D3A8FD9FA7E1522A322816CE6
DE933CC81D83A39CCB7E05896DE7069693EFC870CB86162612B23A4316EA2278
A65E36711CE80A4360D829E3905EFB8012302610AD7CE0DC20FF7AD70ECFB5C6
2C42B8B0B295E48F873407D8ECC2D0DB427E8E9D7FCC7FE4A04027261E419451
5E87FC36485599FBC9DAC6933B8A61A1267A07C80F9ABDAD878915286731DE01
010A7C89305D2E3DA554350CB8CB8E904E7535440A065493480FDA1C5103D54C
652E1387BD302832DA3B044A853EB94D553D568AB7D8C63B4FCE2D86964B7DF3
0DB1230AA9F2676882927A517090BE92D4EDC366D10C640E2BEEA25168B07B49
F4D258D6E0B6EB6A57B74E63A3518EC7667E07BA5B2FB2D7E017CD595009E52C
CEA351BF5650FABB9895623BD4768C31E35C395C3BF67A79F8B1AC292F38AB2E
F547DA895BB5B6E1C1BAFF90F1E16665998AB7612444953E619153EBA5E4A91E
A73477B75333510D419E477E7AD9D2433C7E7C3968C89EA69B3D0DAC30D4B655
52E3867D63B89B54CE628FADB2EF290290F23E9C3698A870C13DBCE5203128A7
7567906187C92C4F2B91E12092BBFA9867B165078A64683C37CDDDA453154EF4
1FEA71E4E811982F7E0E9E9EB25202A01894C458AB9007A524E4F3BEB8947E8A
116038BEB06DC30ED8E89BBDFE4480A36CD4F92F867E6C48ACFF17E976B3DE3B
C15BA502F6F1BC4B4589AFEB2C75EA7A1E22AAA8F03A4588EFBDF346148A60B2
EF074B9F6D550FE6080A7F4735504B58E07898EB92D4F0EA71ECFB467841EDF6
F53A943B0997BE3AE95EEFC0D4F5349BF23EBFD6F7D9D4618054064D0A6D0235
ED4B346A14E08620C282FE1094CC0EA2676BA81D5448A78AE62F82E58BCB9BE0
47B377F3257BCD12030D71140AE06B4329157208E3B37B9CE3F1D0C616D951BA
702DBBF98024CB40D1DAFA83D894B657908A112B91C0E426E31761BC68186C25
AD5CE0BDA86D6C602F27D4D17370D21A96AAEB8342C2773CE38E1EC3132A28B1
5C075DA951F8E47789D55B7579A895A905D0DCE8A41DF8804A6F855C349652B0
F2EE315A2ED05A5189E0C5A31E35448577FCB0CF36C3CA5680F622117252D1D7
2A6D9D057A413F748B33FCD51D6CF5DC1E2B1CED5D9B69ABB3746877771AF7A6
0BCB4C0B890E4E8A779653C1E96E17AD82C65D792A9F4A6E1D3A4BD9F0B7E0B2
8447E741364E315E7A1E493A13C6F89B4DBC3027B3CAF2C6EF0A5000F53914FB
AD2DE5D9D36A9AA32C283B25D9E35BED54243580FCB5769FBCC991BF7A13A3A5
BE34409C002DCF2B05C095A1C272A8B534173F947839FB3654757E4DFDCE1FC1
0241AD94EB503A2D1437C4008E97C76D74AD430973E848F8454CFA132CF54473
AF0AE80410C4FBC3A45FBE3BA4418FF63CE72DAFC207F82CCD8250F4BA04D50D
9B6D7AB5280337FA5B49AA4D0AC7248E1CB5105749E30C15E1C8CA95279F0DDC
C564D440B4FF85F92448D42014DF2B22697002932576183606F932E5337D2E44
7C602C3B2862E6553F6357B54389C5E44E2817807494BDA2645D0FD91FC847E5
CE09E60F0839874318C8389E298F554671C80734ADD9140716CBF1C5624422FB
5D2B891586DBA349D378D1E3D4AF398B968C9DFB8B3383BF9817F355C5BEADA6
8AF61B53AFA57A14B7F2D4815E0733979B9FE7F396DC883022A7F459CF47F6F6
ACF7812C886C93F399DEA8D8A824044819A5F8BB070D16A44EFFBD0AD41ADC94
59C94A47A9FCC007F910998AA28D18D0C0D347BD4A22E7F602498AEB3445D8CF
8CEA7FDF03568AF44E2EE4DE7E9775B7A95B3DE028283DAA7F99A55DB028501D
5255CD776183B075036DF7634B34983FEBFFFFBB7464003CF08D8A125A27BAF0
BFB58CB89C444F4564C1ECBC4CA5AE10BB3E2B65D78732C40F1F4B6614F932F9
8837F999C10772520647FA07B7B6A0D06F3C5A9923AA703FDE1724A942B2DA26
4DF7A88FC29DC6E8BF9A9AA611233045CDA79CA11FF988ABB796B6595823707D
1A37CD0C8A8A0E062F37B10826AA7F8D15F5A74F536B4F63EE567924173736AA
0E1ED55B70BC0079CC996AC611A934830E222B06854D19E01AF0301997B8F6DF
9DA616F6D521685CB67A8D7F27643D015A4423506A9A2A9E1CFFF120534F7077
78863DBAACFDE460906281D5BA5ACCD188EDB290DA5B8055D1622C478F8FDA34
2685F858DE3F53F1CEA18D2F4891C970A04C42CF7216E5DB8CBE124D00B4AF86
4EFFAAB871ECDD9C87C2352AB057C78C12B423635C60AEE5C82C9F43A7491015
09FEB31E38C10077F1BAFD0E1F114F695F5FCDB616F45FDA682823143D7430D6
5217B609A365378685B85A9826CBA11C00F4BCC269C84754F7BB1FCB5723D669
53BD9D0A313F39A6A3DAAD30374AA19514DBD893D279F20F49DC8C5F2C43537E
DC6CF4428CD1F4516895203B8B15293B65444080B62ADDDCA6FF23229B9DB1B4
B788BE82AEBDC173307D77DF3F66505F11BF1A13100AB11746A2053E0C5E6E8E
C7D1D9B54A573BBA224E42869DDEE75801F5F379101BE0E37118C5C4CD3BDCB4
7B5C404D62BF45C7F684E59B9AA6628DE7594364F1A56F65B8FC21FEC40F4059
C2EA3DEE94D79A8FE853BD9EAF321A2AF2256EA0675264922F9A98E6FBC4C35E
7E6F40B4A6BEE3B6989C474D1843A471576D48963927A54AEF3F5D38202A50A8
3FD3C8CEBEC959F88C7AB2E251292F1C935F264BC41873E40028AA8F3DD3F0BD
70AEC3B473C5EF5EA99AA922FAA53D9D03C54706B5EBA2142EE89817433A4A9F
9F19726277ED18E144743054DEF0EE8EE1EDC4194F1012D8BB958B6940681AEA
50C11778304F60092DC6D54944FAB3AE6F055641C5D50553D115033EC0330451
8C35E55502546E62683AA3563662CBAE642FCAEB99606BC079F3230443D11313
D6EBB93420F14FDECB9089DE5CC2DDB60A534461E5C023C137C2FDAFEB3D39A3
B9FDEF15DA1F1505CDD37755796CD5FBA5E25E5E97328618BF64DE4BEE2CB0F2
63EF782C0D4C7120A3AC5C7AD5348F07AFB5F7A27C2B8D494E4EA141C166C711
C5DC5DED743A7ED41E852DC45BCA016BD8169F5A87F51AB5DDF2041BCC6827E4
5A0370F0F2D6FDBDAC994E26E01B08DA208FE08B4C78C603DB2E5ABA40C4DD94
9D10C0CE6B2EEAA9BD1E83310FB2CBF3D51FBDBAC9706CA8B4D3FD1F68A5290B
345A721122FEF6C4B721ACC874FC2BCEF49359244D0E44C3533C0356C7D6AB6B
E4CCF1C2A978C9A8DAA2BC54439B2B53ADED366BD57798F0A499C68E97E7D0CC
D7A1A6215EE09FF45F2D070A7FF5391AA9BB2001FF877045A5D34BB1847473B6
50C674E740A1D13FE57614EFCABA99498E429AF9B1DC692F852BB697E9DE42E2
782FED4B850739675FFC9C10517B0D218C2C21DC0F3BB8B3BBDDA722C42CE163
3636307C390FEA9AC4785AA1A2B368DF676011E1096709BDB6D8C9510DBF277B
31B8BF2B8673F652833072010FFE6F743B14204876579A1A5E93702D6C388DB9
A763F1BA3386E051BBC1C7FB8B5CBE3D295F38E17F77E7D5423DBE0776FA1387
D7DF0DCCFBDA67F3038091B1E0C419DB3E99A2E08D6749F21CE313BD5A879274
20ED677569C646EA23E316AEE1EC29BA8D4A7B93238FEA7AF4618DA0CE348EA9
AD3FB54CC715CB71601B9785933E3498B2EFF70B8FCDE2984F8A0763A9D322E7
93E01F2C158167C6BA509BED34E0B0DA099434D7FE9074A7C89ED4BAC0C5A0DD
EF52F121996E2483E9C4F22F89B7D68E527DFEC6C96CF09019822C2A7402CC77
A43C03ED797BAA3658B8AD58435B34B1D7D501B561D3E182D4F6E18E43FB703A
7EF38F9CEC2CB0BFFA436CB8AB9D2A83B1A441900C9DFCC0F7FF114C014E1DA8
00226FFE97D925D44DEEE670BDE0278B68EF896E2B0FE4E7F1CEA0E6ACFB570D
76D01209F22F4D026A3744BF5BA2E45C7979E01325199C2F208A02EE453F545D
C69D66B1ED95F48C420A8C664C6F732F6D1E62401C3DAB3E3D1F7E61738274F0
A80A2E23211930F1C5D7F231365BE2C51E7060E5DF213AEA97259581392B9BC1
71B1AE1279F582DA9CE6E3788194F96259F8A07ED67DCE8B5ACA00EA4C0D6EEA
27522E182DAB2869CD2C2B0F39016EB778060F30BE28C36F1608E534EA5FFF06
387DFD9185BD17E8FB9C4C5E00E53F9062B80F9C42F94BB9E6ED833EF0A00E38
AC4E0C5D6E4A678BD8857D176A4260494A7158A6856E3D6F3B1132EECED22CA5
FDE646DEB782D6854E3569ED522FF4EF8333C5B326D850A5DED9EC17E11FCFDC
544B2885995EECD3F730344E37F91B322CBE82AE7C765CA988D678E038BC437C
16AD70B17B9AFE2E0C0729E5F10461A8DDBBE6640DFF9E7FC2A676500E1947C3
7951947D838F69F7D2B3C866CD45B80656513B6871E5258B4F80702ADB047C13
F9C188FF1D9C3BA73A8A85887A7B273A60D565A7A994C0EAAF3DEE9137411609
2E029686E4AC0E2699EEA0F535FEA295910569FE6DD5995512562359CC821E80
B902DCD028639F8848A001E1964C6A9D4A07A4A5D2F265BAD7102CFA11FECE10
7BBD8ADE967101D476F631951F47752BADF79F03E033D5873D5292B58642A9D7
9D68F0B33A03BB379BDFD1FDC40E678BC42FB3835475F09F8C13F50EFF6DEC3B
15060C553536AFA1AB550740F72869DF65CF0A519FB5A109CA9D14EB30F6F4C1
B85C7C52B3EC98716C9F052D6C66D3FAEE0166ADE5F16BE5F1CFCA90DF305869
58C707F0205C3F9872476833B252DE2529140804D743E635733BE09CDBFDFC9B
81ADB62601A220201D796DC4A59A6A3159A5DBF34A90316A3FAC59C726C2F2B2
5832107BBECC4E114D01464F125E0A6B762C08901AEBF22F7CC829A95B90E4D2
AE72DE0693356B50903C9007A31D2ABED531B1A7987236B8B5D9B2843FED7BF9
BF332D5EB49BE21977146C8872ECAD4D82A933AA06F1F3D015EF92053C4E1985
A755F7D487F65519A038BBE43F3BD56E64C499CC12657367D229E8407E6B4214
4E4283BA4D1423C3A254862F58552F1351D19B8831BF5E2A948E4161E155D032
627F85C230D6F644059C93F2267DC438EAB0760147536E12FAEE38C5E9C1F2ED
14F7540B0627C6CBE1DDC9F21A1D791553BCB871494BEB79AA9868027EB12A52
2288DE0855C190299C45FE2F475A8F9B2BB174DBA5176E223CD1756D75E38082
637565A0F1DCB613EAC826F5EF4289B3C210DB4B98B063FA07A3191D14F41C39
32EEE241576C9397E05345B2970824C2F658DD3A5515AC21C4095336244CEA0D
A1EAD35032A921A71D454422B97803DF839374F0F39B5843A97596469C4FC616
A15C3D502C97B96C9022AAFBA220894989F530574E91FAE43057B3B99CBF92A2
22C93F4F133B7D8B9BB4622785DEACCACDE2D73F48883C45B83134E7EF125A21
7C4D3255BF596B3D0A577155DD96F7150D04E31C13E0E870643BF1932E9C2E07
95FDB85B2E950E0241A7E7A67E0AA588529A0ED9CAB30484FB1FF2CFEF8434EF
E3A7F33788772CB2ADB0F925314161F2A98CCA425A9CD24D88278A099B054FD2
75A34754E7E3E85E027D77A0CB1994B8B6D5F3B8EDF9D4D1459A3A389B81E762
65FD28FE6FA4ED3D2B15998D82DFA024EB0714E20CDF54DD0B2AA2517B477448
1A762496D615BBE05D3B9071D4712047C0C06B874EAD47C5C7B594BBBE87DBBA
1BAAC706A993031C631BD56861BE764280A05B17A8BB05F1C48CDED9A7FE1FA9
7AD854A9D9D8778236CCAB9E8E99EDF2E0E7E451B36EFB7FC8BC573573E2AD66
0AAFDBAF04869E7911B96CA6F1981610A86ECEF9A89BDB88ACF3EDC3CCA3FDA8
CF815962A4B28D95D7EDE01A7B2415CD6C23A43E8292922170AAB7CE6C7022C9
C244E19BE9E13A2D31BF42786BCC9C4374EA6B2CCF8EB0F311BC59856BA05522
33328EA146D4053AED9EE7FE4B49556AC51921AC36317C3A45A371AA503529C0
DE7DB8403D9D15EDC6DC3EE0EB06E463B626F1593FB6923B7EF2FCB634E920AC
3F44C671417792352C6D53D8710B090D5805E6C36751EFB25ACA6AD05E3FDDD7
7FD7F2D8E3AB400B5CE81225BCD9473D61D7C3EA49982D21DCD3EBFD271FFF4B
67CEA22CEEF9A1E492B882EF62215371765118BC00AEF21060379ABE2424EBE7
88320FDDC854BE740514CF6FA939A06A28B1C1C96285F356F3579D244080ECF8
9253257EF21B4F8A11F108907141F502B9B79750C7D89F1B6F249BCAAC5D6AD4
EE2E4942EA6562C59C5C28F8C40B10FC9DD9000407A4340849D8DD239C43F24D
7965ACF4B3891C8B2AF37FC2C6F1614B92D90D8B1C2E8683F68F392249446177
8D2B9111AEAF2C622D160CD6AFD86461709E44E08ED4BFFA0B73F90306ACE5CE
5E03578615884FFDD75EC55D2C7B9A957A2051DAF44B40174C913859C40817EA
7CE631F92B92FECCC1EDBA99245FF0C96F67FCFEC90C8FCEDACAAFD6FCAD5238
8214E34D14C0648033C8C5AF3921873550ADB49437372C44D66156FAD940D5D3
CFA91092386D7BC197DF434E8E0AC21F2EA065FA81E3A5F31BA9169EB8426EDE
FFB5554DEABB048EB8F3BB85C9124EE0641A8704FC0B84621688A431AB0E7409
73A4B091F55B016661D0BF5541EEBE74D8A27F59321177626EF86BDC49D29559
6B9EA1BAAA64BE507FE28A5DEAFEC517AF4D8AD13C03257F25F3488BE3098C91
3228524E428E3D495A52DFE1A3B9F404182CFEF87FC1A8B55C6C11D2D60B1DA0
F827610B0295570B9A2058AF0E6EB2BD918D918E70F85635AD95CCB13C4FDF15
FA9771943CFA8EE1DA0893F01233B297D8C3ADC82B06160E7489A57033461295
4373AB66CC420BA24CB8B61FA2303D3C5BAEFE7E283261CBEF630689BCA1D582
3E52D299AA129BD5EFF84E00F4586124B621CC78D64AE635C7BFD891842DDA82
0C589C341EC8E14FEB245720FF5705F4CAB72941B069A37D3B80C5A93771D8AE
7E37C343373F59CF41FE4D895DAF92F37EC4598D86C82449BE1FA9583F01F582
B195CAA6759210828DA9D5A0359BDA0880804F7784F68B23768839969569FA12
D5F1DAE84FAF8A3E8C13BECE5BA78B7B393C3B57B5E787EEDD1791448EDA9417
6ED62D5638FBA67A17E223B57173C98D881306BAA478DFB04433709C64B62642
35F1C02795659359F02EFD5BC92C3F0E4244FEB6FA4349A180D029B197F0BF13
C841CF9C20554FACF5F4CC76612973A545E32412A5A4083F975271167F5C1DE5
C8C7197834A7B89AFECB7D2B1CC2987CF9FD351271180F55D417785FBF550B85
44C736C45C9D7AD2FBDBABA88B6C2C394552F51DD19CDE0A0E523823AAA93D58
80DCD22F22698840E71CAB493A5E93009686081D6CCF544CFC5041D35B78DA9C
4FCB37749D2A96FF670851BD7F308274AFBB1DF68B9A2D9EA67EEE7BBEBFEF50
E4E5DD835BB53314D914184A6953417F786ED98BE23B45C3657BCA226752B21D
219E887EA447B0584D28F6E8A0197C16F29FAC0342BC6B0CB07E18B5FCA06CC0
6279077389A2EE0D2267AB5637CD85795ADBE4B49E9FD79BF23C6A5C17139C83
89E8E7ED8F1BEAE0B4E14E7E6D4005AF52344E650E30E1DA3F18C1FADAAF8C1D
AE0EB5594E141B526CAF5E057AA225FCCB15402480E59C2510CBAC8F84B096AB
7D6A7755E4ACF013B634D6DAE3575BCB6067B6F75E9D3EC2E6E762AE8DABCEFB
CE800553729B37E4FFFAD448DDEF0AC13780C618C1814F112E3906B9233ADDD9
8E94CC6BFDF69F38664BA5524ED6229641195AADAB2BC4BE75DEC20390FAE140
5CC174F017D60B471A2415601ED8F9100A7F8AAF23483E6985FD9E7E6BF234B4
74F4A64395F213EA1FD6688B369ABEB57839EB19E004D1041C420F19FA747FD6
F39E4DDDAABA84CCF4D81C9F711BC77AD81A9444826A2E2BDAF2DD4662165F69
712216A5F6E864B1F1D7A81C1CB0414EFC87475B252F92F54A45AE8D7D8C0E74
CAFDFCFA1A8D7E9132C6F6704BEEAED43C5ED8E87CCF5FA0C948B5C0DECFB513
4DD46C874040B8B4DFC0DDDDF3EFAB051C3BE26BD22862FBB603738B2776D1C1
1C1CA08BC250CA8396BFAF8840D8CACA5F0DCD4EDFBA1117BE957084D9E7B724
8C49ED1BFF4FD1A6930B10F0C74439BB910E5941100D11BBDA54C9A5CEF653DC
C6E35879CF95056CA8DEA628390F1E06254DB0D68D00AE7E270433CA8428E449
103369B08B38AEC7C675AB599AA8BF913D38722617C82560B4E187D122322BBE
C4C27E4249C50A9276B934B38A9646349CF84C57CC454FAD6259AA2AE8F5AF6C
E6D9185F37A0B20E87B08D781BEBEFDF91058E7AB0598B8ECA06EE80B07D8D7A
19AD05D01D59CEF0035C2139B91257102A115286952201ADE7696F8273E05ADF
B24C8D62307B341A04E50A635CCC70A2ADA5B544D64BD880C69750523E9DF6AE
C4B8D38648E645A9C21242F4F0CA4FE78CBE1348F48AE0AE1B28C0D3EBC29C89
57290195D6547799C749E9637404B37062DCDF0B0B42BC050C9C8C764739BA69
555FD8125AB0348BF7867C315F37D8469DB77CAC475D12E43E43F6E039436104
05AA645A21F8B1DD842931D70B0E74DC4FA62A4646240331BE87367B00A7F1A3
11404492337FB4DAA100BC983B0B074768216CC58CEA9430599F5819014B3B06
28374604D04FF27076F59463F6C49F4766877BC361778BFDC13298D22D47DA44
A0D2A9F614B466CB2CF2EE7B3299AA5D5C8C03DC5F93CCF5A2FC7BF65482A1D0
038F34F6420E633F0FE9A9BEA72888D0B2102894D7FECB5B225ACBE62F7A7D96
11F4B900A149DF9D95D5D24C4B6B2795D94BDEB015C731EDFC7E6E8067E2749D
BC3A4A5914E16FA0AD5BBFB465628B1D84EA7824B140166C472F99F51740EE6B
698FB6AEBC7ABE3EBFDF69E7424DA1FCE4998B792DAE17A72EA09E81ABCB8BBE
BC7E8E66099C8881A4B446A79E0666918C98A7DE05DD82032A763F833E6A5BD6
BD4F4C0D34C5441FAF1A925E22FCBD6DC2344FBB736C7AE1F7BA64512E601031
49F47334EF9388D9AA4E0D52BA1DBFA7071E3405B3E415E947C3A6EE9ECDDE8D
D5AB6A6510CF16E8CAA48D18DE6EE7813549529C50C4DC5EC98D6E3653DD6F2E
8C544EEC4BA1C0F4E33A6264DE84A40C06FC6D0BD25564763CD289BFE1D8098A
D8AFEA12A6996B5315168CE78717742A29E276F04A7C630CD6E900EA836520D2
9AD1612D6ADD582B2B22BFBEBD00710EDC8D918AEEE0778EEAF7C537C246D7F5
3F6F791C077C0830685BE0F465B63395563DDCBB3CCD4AD11268ED6CF45ECEA9
0E68E425C035EC3EE73A7EA149580132082317DD4A19E976C6BD1921BC340D99
771B95DB671D4BAAB75270092CE6F0370328992E9D4A0EECB6A4B3260B8AA8ED
BCDC009AAD40AC713EB192BFC81DC8B1AD37A568BA2EA7056C62CD5F4C04E82F
4600EFE083F24AE8F75DD6E4DD242FF4D537807C5F7F66395B4EB8F29B0BB156
800E165AB7D4A01E50A691B689EE714B755ACEA483F67F3D542131C60418D244
656DBCABC60B10A85A4ABCFC637803167EDBDA3161459EF6B7C8C27D70518456
9C1D2F84FE3EA83735042DCA08350836AFE9AE5401B1BC74ED6FB843DA748D9C
5DE6E1C94A421533750AC9FA8E84FAE4C42F2DCC93AE7D6BCEC8F07ACA6F58A9
24D4EF697393A2571C69F0F7E241B363BCD8C6872B8A4153501AAA070438B90B
FEE652C8AE68392237D3030BBB940F9EC37C3FA756B438C67E8FF81098FF084D
1EB64570E87CA158954217726DC1DFA1637601E18D40A54C3A7D4BEA27BD7AA1
1D08A2771D29833893CA79B6A20FCB9B4D974883EF18E6B4FCC8107981F92312
1444BBE50799BD7474C2E205B8893E1629F503A6CA9BD0789A74E60B622EA4CD
FB0E34E5BB44ADFB7558DD91FC87933E3498B2EFF70B8FCDE2984F8A0763A9D3
22E6E2DFFA6732FC4F39FFFAE347AFE8B5084386844FA4FDCD787F89A7C2DC60
4FE2331D47B4DE87E586BF27CA41437FDC0B2D9927036898466F9D8909AC81BE
BBD5FDBFB7513873D49AB0B965BEC1A8B100500554145125FB0B682616AB4616
9C413A36E810F50B37CF2FF316DC4A6EBA9E2159609AA63EA7FC392881EA51A1
B4B84F49A84E5582BA5ED366650FF06432F6AFC956912CB7B9F5B7FB9569BCB5
05544B343B46AD62D55700BA80D45B80D2410C32313ECE50304DF4F25F0190A5
3220020DB0F6C55266BA9BEF2AFB09ADEF1755CD6509EB82CCB23EA9307C7F02
5388B48E8DFFD792B7ECD64FED0002AA9376E5E4F6D25203B72D48CB2023FFE0
185B218228603A4B6ED4641FC2032B4A81F266C82D654F8A51037A08084CBFA7
986E687BF8EB3FEEA31CF7BF83B50F3E492F44CFAB64D86EAE334C2265937701
4C41CB10741EF5624F8B6F8855C8F47852DF0CA1EA25E01E65EE17523737245A
7CB2E69D5606F9E8DCE575ED3F5C997211E5081EBC0E78B6AB339F5A19177BBF
30C4391A96EBC859B9EA4982E831CF1F4072444DDB2B60B14C591641AFAFB4E7
4A37869FA24E2375675939E6CFC1621D71D9F75A2B7BE3FF5F9D62FCB92D2F22
6AC3F6018A8032EBB1668FAD2D18955CB29AE4A26B76D8CF52EFB6332747E5A4
593A6821A6C4424EBE5EDB0B3364476354BD4D83445BE718E7D28E9146307DF6
03F2DB91BAD7ABC7B7BB402B679770FDE5D92BE7BC5EC380823A85534DC1B358
CE61FA4B9A8A2DC1BBD437830EF1663B6E7916CE9E6DB66F4979A1C7B3936FE8
D5F3908D984C95650AE0888ABCCB68DEA6E73EA158122B3BE493ECC6833D425D
4EC9660C93BEA55BCE5F5B50AD67FE6352691ABC00DC655202B184E0D5644D17
BCD68654A118FAE7E31C12BE7F831D55C4A6E95C110E045BB415B0EA6B4B82CB
73BD5E4C1C988226D1D7E9D3BC11AD3BBF404B153605402F9454FA615FDD1C22
24576E688E38BFEBB227DEA101496461372D1EFD513CDA9B2EA8F5354AF18A18
06282457D14AED9F26856649B09AC453EE5A119628D61872AEABC8E5D363F43A
398B24EA1415BF519EC05DA4043885F028D80A83C90D0560365297FD4421CDF6
F1AB2E63235155A2E98E99228498633C312BAEB63990C31F1EB7DA809BE9F612
EC57B85BD7F60753223CE3C96EF56E267DCEF5ECE6E305C5276190AEEDA1165A
608AD05E24AC4E03F9F405DB58EA23EFAF59997D23B022C9331ECB17CDDE741D
EDD405AD4B1ECD2E85C524BA43BEAC84A3378601F8BB576598F7E0393C468401
1713F553CDC503FE67ADDA409BDBA78FC6B34C95810DA0A805C3D76CF3FEB505
5E0D429B6BA948053C6DBA83493431D3024ABA793267508AD3D67461744622AA
A1960A7BF4416F8798E1D564F7973175D4786D7ECA6C8FA41713181DB5896236
4BF6DDCA29500B7B07B876A5190D48BF273409D75DB6D8F081842CCF20352026
443381C8DB3FA8EBAAD4F6A033669E1D9F459EA1793927F359319269D099D5D3
13B8FB1B33A25F4BCC90B6ADFB4DC714D6D08324ECC10422A4362A89E46F7DC9
1B557A4C8683B529559BC6AEEB87AE29CB7A543B33ADFBBB910F7D17E9E03402
F2CE232D218AB3AD5D60F9DE7BFD96FBEC84F711EAF76E3E12D1627DD8FFEE28
1984678327DB75E98F1E16DA8BEC9F73F328464493375174867ADF43A6505529
3BB023481B3F78A23721FA878B7C823C9A54AE749DA62BB919C8AE2BA57CFB1A
FE0254AEFC005CD625EC5799C5650826ABB04BEA402C76C4E513358D0BE500A6
2FF3F71E5E5E966DFB605D18E4B1CA2F5969798FF57E607CA2BD6EDA120F1EAB
AF82C0383256CB36700FB944193197DD6640CAA6F371095A260DE5DC01B8DEA9
5D1789E5D88807C44B06016EF562568E13176BE4B24F8A77B0CD418C2A756C3C
DDB31A05E1BC6EE7D64A4E99B7BBE7581F45323964BB5903037DBE6DB91228CC
30B25EFB3C94A88BFCBE99B8857DFE2E30ED9B1227D8E0707B10A90895D85CC3
5C917DFD7BCFA6A0E760F961698126AA71F351324B6EDEE53E5ACB468A187E2A
ED2D268CBAC815709317526672FDCC24EE7F3EF93DB577D2E225B5250B8DC671
6DB25E68E4DEA92FD943B1D0E2B410854AB14DD53E5D3F0CC02853C53929B2D9
366CD4D33CDCD6C03274D112254E4C66DBDF92DC4EB5CC73992C256A261044B0
3BB413B6414A1F72750FC4DBB48289BBAB658D40986D5D7339906CF6388C9CA3
A8FB70315526C9B010DD09D73DCCA36D0CF0B2BD75AFA2312982129B32E7BFE6
8272493C047F5E0B3CF3A37D0CF77537AEDDDBC779B6FEAE7BCCFEC0578BF0D4
E078420FFBE05A54DBE58A61A1E473C3DE45081BDE5EA1C7F6BCBF217F253360
0E23041427DF6232069BE17FB840D8610443F2C3CD18D192C35061847FC9A4F7
16B09B512A591D6D15E3A0079E4CC60A09BEA9A64E8D434F9BFA83C8E7312010
0452BF56BCE5BEF9161A199127E3BD25C27F3777E2621CBC24E0B1E3990A7881
DAFD198D46E375561112B4E451B5AAA86DC2318BFF5094065FB3D254E3578926
92EB4C004F059CC5B5D27B15CFD48527F20D471B7C228958E8B4F313E92CD6B4
103EBB92A3F8019D90EDE8B837C6DA37EB05E84145CB0223E17759A525BC0C44
E257C7355E8B7660BDF18F004E7EDB603B7501C20C876AF7D7CA2927F6299140
3442B1C9048283D4E42F034585445E36DC0CAE1A854576297F88AB4CB70D5A95
38CB3BE629BF80000787A76D1053ADF094DEEF52AF7582590C7498E5BBF429CB
E12DA950703A90C352983D6F88861882EF3B6D42EE5B4144696F69D130E3278D
B1B54FE06DDA28FDA7C5654DB006810A59959543E9C5F58A22D1B04E01E0B47A
11DB78BA51E35003B7C27BDECB561E7C1A8D5BA49145EFF235EC929D48E28A0D
E8BF481DFB48BBE23661270F759CFB8CA81CD3D122FAB350688236BF66A4EAEE
A0E6B037497DE8AE398F0ECD902D07D988850EF4DD9314C0FEA2661CF8688C3D
53F22AA0E6A805811477B1D1D365CA8F3FEA225E24C025CBF933C12BA50B937C
AD740A4B6ADA2FA3A8166D54CEBB399BA88AA6307E17CF667C944F8D7995D313
DAF7DF55F67A9306A6D893AA703C18D9919B7474FB4A731C78E03416AECE309E
B09C776256C0E934F6A013AA553645AD3979D2F4AA17C624CAB35B85963C6DED
2139D8766202A6CC5310ECA243489540684F9E1968FE7E4F15089BB0E91E286E
5C4053B226EF5CFA459E7BFA5F71559E1A0E2C3DCC34AF36AF6DE029B557BD4F
D1AB52AF9361B2ACF813169FBD13EAA22F4D74160A5B28ACEAF24C57C027211B
4712D56B35AF4D8B5D5D586C424DE65237FB22C8424FC12497D7A39ABAD0AD5D
1C9F8C0592C934FF2AC5B6A919821732AEC95B0F747F782B1E1D2342AA68EE79
4971E263FF566615B37588D446F2754FA0EF46C18582C73F7B080D3034252093
797D26BA4DC129F333C960D54DFB7CF986F915FD63EFFF25FAF6DF4816FA6ECD
BB9BE7D62159482D0EBF83B142EEDBC0076B919C9508F5087CBF8B4C40AEB0F7
B210A16F187998265FAABEC625523524D35AB6E300303E44B6BE8B3EF7FEB401
C3A6618D893617452E027C57A5C821A3036815FDE14020373E974576BC7C6449
8F550044B64BE50AFF31DDEF8B5E1423D95DDA33A05D3366C412B04DA7769B44
4F6886A2BB170FCE8B597415F43E46C5C8D9229C35435A18684DF377B73F918E
DBF84BC2F29B7E4E26CF3F9C49F4C4CB745517C4BD1DECFDDFB62B7A133A6EF8
252167B8AECDE7BC051DC12FF5396FF3009ED0B98260A4FCB645CA378C2D56F8
35B62F9A97E0919BE67E9379DB13884B4D2DF8E6E996C0B013156977CDED3DF1
7602E2B896CD51D02FA1999CB88EA646C764BD2088A3EF070E32F2D6B411A70C
229A20B9BF0611F41A1B1BE73D1A156B94310E4C81D9D739DF88C655165C148C
A55C7A1AE9D6E690AC43900237C38B326E0AADAA395EF316196D434723EEDB07
D78CE919C5A396F798EF22DD3AAE8D185EDE9C6E238795A66FE9C57B4981A6CE
DCECFD566DD136C83A9882513A94BE894217DE360A2BDF60C277D83353830B97
910C943417FA1759FF0E55C17F628BF7547B3CF7F63B01E80ACD248A623A42A4
2E5BD5403AF51A836439BCC4312BBD1B8E5D503CFE7AFD097A544A146ADEA4A6
0E473254E77D5926E15A353FC453C77A8C08CA503CF1B69F2D9C993B7AACFBA4
8F1C92395546C8735984E4C8C732B307EEEC5CF6A97D301AD558AEABD657AF7A
5C2181FB96B155BB193DE01C881915C3BAAC0CC33978205427B60A553C3316C7
EDDA3AD5A84ACE6F8C51299E860EBF0E2A31DDC53442C8E081852C775C29606A
3C2C734389027A9444844F41E5A2F473A7FB09C8195118B33EC724072290189B
787DABE8CF9B4DABA14B5AC85D1B8AA0E7844C6CEF8BFC8599BD75756358BB4F
5517DEF704E600297D5A97E8A24F612C59C467F3FEF8B8304E65519B600A540A
194AA85BAF11F98DF053B87D2DDD7DB751EC8C146E17EAAFC942F80C2313118C
DFEECB4BABDD25D939C03B73F2C63FA91A4A4AC3B7D94A570A5B3F1F4EEE9CD5
092CFC873EAD13BD61461280298F9555C6568EBCC27140D5B879793032323E4C
D7F653C8D0D56F0399419F6E6ADE9FA2FBEFA7757609CFA585FCF9756DC0F836
B77B9824C7FB39D58E12728A64E1981BB71C1FEA217581860729E94F85E4BCFE
FB4002EA3DD59C202574A26E29E089A4DDBFAFF0AAE9FBB89531CA018F857C2E
9E1D3D04CD3171BCDA876BE2EC1500848CEEBCF1796117D88C2972055E2B93A9
A6F9B4874D9107BF276F4A6739934FC130D2AEAE603888E74770C07DF34EAFE3
6D3104DADE5D30F66DD064061423632D64DE939F56369223465FDFFA2B6BD579
1E4350DCA843AA863071A7B86715E2BF7BADF8473EF4FB399D621E90E7A0F109
41DE0F2AC2D901074A7BD30F9B6D6E42B9B45BFA74F9361A0D65BD272128AC72
D8D3E9ACB79888AF725FDD44F3B23F8FBACF1E5FFBEDD740C01A924BB9615DBB
6786DF6522B4AFF4D46E8B566571DC0B2D9927036898466F9D8909AC81BEBBD5
FDBFB1A94F4F90FF43CABCCE04E27E3D9DABF95CE121CA4D94250EF677518CB4
E8CFD3A1B17BB93488AD49A4871B94A51147D2C508F4B5D5F2C6B9AF36C1CFD6
66524C7BEE05916C845187A13DB878E84C9A96AF47F9E221687BEC8E04AD8793
D1DA4B067D56F698F42C05DA534C6262A66062D87CA358DAE2E668B1F9284D07
A93415FA3072ADFD23B74508FD70975E3A0C72D376407E684570CF6C8FDB960B
9CC6E9435D6577D1CFB71AAFE74BEFBBF77C6C32B88FF3F1046E4EB2CD942E70
76DD5DBE427F4C91C807F1A3B23B0DD937C0CBCED5F1639A16B52F91F43507CD
4475810C2C0738174FDC062FF7B8CD9F6E21CCB01746D41D1EC44BE55DF5BBD8
D6B0FE9C646767FF1A48838221A3FAB6E8027A10873C04482CAFFC9BBEBE2E4A
C9E2B9D116034191A1A804EA935EF39413EFC0E88AF09C8E66A6F27EE257E88F
34E6654EDDDFC4E11DAE9DE6B7B84AF75B803BEF087EBD0E089ED0CCBE37728C
472129D5873626AD83C06F5F6D240266F00EE0B6A02EC450AEED11A88C14B2EF
359715015FCBC1D701666B105BC2A710839D183B5FE0BB1FBCF5AD7E7C866164
49FE094A5F904979074CFD2728ECD18DDA85175E3CE67FD4A6528AC2A2055705
EF0AADCD191C733C69A8568994AA48F1E8FF8189DF2AA366D32A016419BE70C6
A51AA50B388946F17ECF1C3AFD515FF3ADA3660E7BAB2D60CC1E8B2684501871
84B4E0086D59D92DA199C747317E04433930B270C63EEEBB4BF65B5A21FB57B4
45CC3B9E9DB8993E4F73FF91CFE479A0DAE7850A668174CDABD0BD1FD8087DED
F5DE86384227EEB6A027BEA7EE7554248140D0CEB6EFA6CD0545D1B2A29F76C9
5C2F8D3C3EF4C1190B633B9866031EEF02A2A346EAAFEC10ECA86DBCD6F5A23D
6449EEA3D952E6FAED1989E6A4051172B33B1C9636EEFB7846160C551C45A647
612CBC4CAF9078A3252F817F43CDDE0466C7264C3442EA0112F1804CEFA65B16
56B08697E1E6E683D2545B0E60463181DE5BBFE5E7503090D1C3345F1392AC3F
9DEDC94F7D9CF9CB546822358228CAED6B287ACC8ACC173C0BDF7678E702E15F
6574575E85CADBF9DEDD098FA72678AFA443ABCACEFF8F837083F21026CF303D
B053CF063E378F895969C0737C423361DBA528C6A3F1C26417AD3C2D8F7215B1
A4491290BFA0A606925120878D67D88D27A7F0B33AA8FE7A11D2A1417CF5412F
0F1FC1F5AB14D74A2B4070AE5531F75AC8DB5AFD978844C404A5C45E809A5D84
596E341CB47F538254EA6EDB8D706F9CD30EB1E18685CA6B1514244AC5E5AA34
1B421FD6E2898FCFE9B5B43066C63D995F05A82E4E96E6EEF36B325ABDC44921
6B6174010EE3696D11291F2E3F06359FB2DF0ADEB80863B80594AD4A2DAACA19
2E62E437CD57CE163A83A4797022A18F938FFB4CFA758238B191600C970F18C2
A194A130DA23EF0C9F9286FF746A94B6ADE21988A3D8F64CA95E2F916133FDA0
C0AC392A2F772A9E3D9EC530266427264D65C79D12F49D560B38FAA060611926
A12356177D21B2B2D4AF5BC30B233EDADA99405D12FF47F19EC140E5A09A9C71
728F393E5DA04DD41549D7AADB6A4316B5D548E61BFBC50CA2AF1355EFA4BDE5
74AA4AAA211C4BA454BC0AF83C45D6A8280E946861782EFA8A4942B6B90FFF84
ACF5535FEB1867A1526B2BD122E7A2BA60639A27F3130EF5A172BC89FD256DF8
63D6C61AA006B42DF451F29887446DB781729BAD92181A86C9D3EB23F502C50D
DEC566F2A6A307C32E83943574AA0D48D2D05A34B1150DD6BA5247D7A25500B9
A5A9C2D016EF4B68FE6C546FEF5AA0AF60E768B7C30323C77D1485E0B74F6877
D6EE6D9365D195CDC0075FA68DA86AADF1966C6EE3F8019AA397125D0C212983
122902301AA9375E46CDF9352A88E98158207EAF44EB9BEB5FF854E57CC26B78
3C83F0C7925D10BCF0814A767FF20535AD3070F54E3CACDAA384692F2E4B01F1
81807BA25685A8F38562DADF54B92301C08957738B722E6C9782A441BE9D7A88
BFFA6251CA1FD37DC6E91446BD309C1540D06FCBF266295BE92A624BCE6EE9EE
F09589FEAD46B76C07B6D5F290842B8E7BD5FFA88AED9D5E2C2985D67CA76A6B
70113D5EE7B15C46E393933D2C0C9B6E55C66CF7862DF5DD9E900D3D5BDE6424
12D953F70268296BA711723DCE48D82E48819606E978EA55D01878C314A1DD5F
EF516B3A2F5A8284AA2FA9187C32D91D47628C1727E355B0EF3B19BBDA0A0644
DAE35A049C2B647126364A1046FCE4E987E770A4A7512B5276E36EC3072C6DC7
220FBE502673FF855FE49B1B3DCEB358E59045747E0FABD33DCF43A8125A48B1
3EF3A2A58BE5C428B49AD359781AD3BEF65A453E0B03EA8558AF07DCEDEC16A3
A9D54DC88F11AF5CB6F6AE3C75E7AD696BCBF2FF9E02DF62FF7970CC98D0A48C
C30949BC1F2C60922C20215BAD4D4B6271543A4BCEA5CD5453F32A9C88F60EE3
94976F0A2F4883E90D158E6AAC6B3F38084EA0CBBE351BD1553511D514DD5679
6BBC975E46E7F6BA1DE906AE6423F826872DE5971095EAB6A558AEF66B185F42
1EB41F1DCEB1349D281A1FB11595B16AF9E044066353662414DBD469C92C458B
117B396F9D298C9D8BE918437CF68E73236B316339124C2F5D4F076B67AE5AA9
8E48FAE1E66F75814CB29713831631E9A7B3DFCA99B0AD54B9FC39DB05F8D151
BC608A70CD5FC6FF92A905DEDC4924F4833CFFEF0158768D48F3BD89EAA11B5E
8927F707C666AE250D2D80AE99A46FE5E911B5391C8D67CDD3187B1C219D1EE5
2399714DB2C24EA2D2D80B069BC867B0545B9E40AF2250043A3819FA85AE0A6E
65717EFFD1FE3C8F5190E4C1FAD58B0ECB7DC475CE1900B6A7F787677CDC3C2F
1C7C2EA34848A22666386FCF292930D06EFC1D0B11CF902E073909594EFC2CB2
393500E1AD529F2D701A45CBADA7AA9EE85A837BC3D021F5E7438D4E3F52A811
0547FD7753549B29C6CB87329D8AE47B8A922BA7D9B5F34F552DBB2815DC37B6
174B0B31213A96CED1455F76D582967B5F912BCD391D32BEB9B23A66C26C674C
83FB7D429E1C5C7340358060C7CFFC76259E25860A304761A2A8FC6FAA5E9812
4881CDB5FEE0F8F2E4678DE588F996D570C7D6CD35FBA972B23FF46CBAABBD1D
70C73E63AB14E1BD0092E180AAAEB24BE07091A9A2D6029AB9A0E6666CB5E72F
5BE5CF856D27BB12FF9B399DB1AF4BA9A5705502F55E4CCF73C4F90767FCFB1B
ACE58B9B77225A134F852F6EC3B1A49CFD8C3331D40F4BBBA35573624C97FB16
5415E1368C74B822D4419F76D05CF9CE51247239D410E6F153F6F3D51F42F960
68EE819DDD5CEC3D63192BB5742B728C27802A407F265666D7579B44B8598203
17DF5B9760055595ACD5730D75E92EB47445DCB73C06F34FC9EFFFAA9339A8B9
B1D17E40886BD121FFD93EB214E1FA04F01C16906BB305E2111EC5326DCD0180
A8F14FBC5B5194C22313C5BA9A5B364AC04F853C9687F355583A8BDABE31C55C
7B54CAEF8C9EA367FAD5C916164A90776FE11CF4D03DB92B3582205649D92C8E
1C2DAB56438F1FBFEC5A9BD114ECEAE9E2018FFE5B97E3F9B57EC4711590F3AC
F14A9A09A5DE47786C8971F16E82412250D46A1C7B45BB79D2E49B68B09F4C53
EDD6811B8B957051EFA29D2AAB9D2EEAB87AFE44D4DB747259A6E92D305E4097
4B03FBA831CEBB0999EFCFD079ABA71327FBC15077E17CB3017A035AAC02B405
90A2A6EE2542B885DDD5652727A5A1736F5ABFB20CE24ED96E7EE72A3AD5AC65
4B29BE5BAFF659DFEB9F2CD9452CF89BA16E5EC1E16F206873FE89896809CE7B
6DBDE25174B6919CC88FB05D871D43A5848A2063425683D5BE3BDE0D932DEDC0
63635DE82367C6FC80C6C02FA0A7EDE99D6B633973360A351F01137B006C8481
E975525AB6720D5081E12FF59520A2C952F8EE651448AC8781B19CE8AA275C60
0A3B022008646BE73DF766E26BF6D52CF2432F7439215E4FEB569B289639F11E
54EC3D9F6D664439B4056535AB57E17C1176FF97B5219F76A7C91DD62F3DD65A
9DEDCCE9920B3939DD770973871B1756F77E37143B2E58225D84934141A0CA89
69232E07F74D696E55B08B672A1118DAA72C369DAA397886DB8E6710E5735D36
40FF12684721C29E73925C0556E927FACBE5FF219A1EC21C08DD4EB01AEB2B11
6CD619A3FBA103454670351EA58AA957CE36E19B5D9564B980FA031F3DE8CCE4
6322236535465088F03DE2881BCECA4E7832BE2FA8FB5AE053A92B95B480BCF3
2568643D68501E226278CC78AFD5F49FF530E9B2BD0828AD99A4CCD131550D80
ECB0A5DF681B3608B8F9664C7AF49295FE114987AC7E6E96F7634194A02412C0
1F921D6983FA6B0338C8C7584BCC1D5EACB1484FBC186A4FD02E96AD2955DD8B
1A35CF3C5B7A83B0A8F906F48E3A645A3AA18DD416CE541A9FE5F09441A79B36
FB5DC3EF61746B5775575ECA9AF3F87C5532FD8860FA1B3E1DC2CE2D28AAF55D
5E31DDE304F2498F905D1D74E554B61CC07CBE503584E62B43CAA0F386D14195
BEEF43B5A3C5EA17DF66C57FCBBB9DE54C55B0B14E89D969270BA2FFFEFFDC90
20FF837F6B4CCF578F66A783B67E1FE389797BCADC8A32BCFEBFDB16A0642E5C
C69E5A25A6601E7DB420EBB0B19C1AD3D1F5B8685D1874C7454D9AD820C9D2F9
3158A6728EB552FA09202865142FE8D130092360B3601A4BC132ADADC92CDB88
8E7BBBBA0E10BB4DF76DEB7C738A7D573E2345E735B39F7B013982983829B74D
2773A8F41983B1FA5937DF92DB57F97113A372CC0D66055EE2742F9F46329A82
4BB74C158B332EA3220117A509BE90851DD6BE4EB86D93F2A83121E5B8A689FF
7104DEEE225EC6F016725E4813E0578268D4E71416A61492B40FB7B98DD62912
3E020B0DDE5A78D6200B86B6A39F1F6F98EB75A71960D7CACE686D7914DAFFE2
CD8748559D6889CE6444A7951CD669008776A1720790B0B6722BE1CC6CCED67C
FF19363D6C588829CE4AD23F4E8FA70F5CDBFD46CBBD20182F0A8EC46126837E
39E4A474ECD60E8A06702C5766F5BA03CEE08AB4E79A67878237E30DB8618BB0
4B765781A7EAA080503F9515F7DE5B1793C85BD9F09D4B89468929ACEA607BD5
22A91D24A02FD6203C6C7B995B87DB07FABA1A0574109B813E504DF0270D909E
03CAE74D6724924921C3233691CE6A5D66A866BFADE0CAC16C59006D0F747E8F
A4C6BFE47C868308F3906BEEE44131B11B2B14E32402CF736455DB75C3E04AEA
E3F27483B70CA523FEE939DFEB49022643BA8F7835F74B3716979645E1798086
95DA48ACD138A5FCE849691E92F7505FDFA934DAE59747DA6E1C5C9967F21836
A114347EE3FB1EA1379B0052BE2D44D1DA4F460189CA642AA5F61E4223E34F5C
9E63293E257BE8A74D872D3833ACFF0CBCB83D1954A9BA4DB92E68EBECD26F9B
B7E8DE0B8935DB5F3372B8F47C464DF19C69ACB3BC0566E2F25023100A52E231
C267046C4EA27240E41504D3E851A062066F6E3B9E181071101E184E8C207262
119E30EB552EA4B6E46728AD90E833F397246EA4C44A12EF33A54D245D2DDF4B
5AB8E1B0DC311FD77D52210EB2073CEB06E1851FD0608B2273DCF4CB3A1CB631
AFA51A23677CF06FB9CED3A270530780EEA08AEC4786551B7514AFDF16285D41
EF8A29BA9972B1C7AA6BA53BA32A081D3006CF35BDAD5B882DF746F9505BB13D
08E34AE233023A69E023A02AD5E50433EF517BD0FD04C73FBF1058A8907ED43F
84856383AEA24BEDA70A1ABEDC08AFAEFAB484948D1FB978D8B47E300E3F5F6B
8B75060C761A63AC861E5E7ABF58FA1FBB37C05C42A2AF30EE2331AF58C67AF3
1876D91A32CED604E5C99BB929FC13E4918901141B022CEB5927EA00D07A318A
426B97CCCA4FE1A03FC0A77BCA95B6F655020E2964AD82AD77382DFF490C1F4E
C01B13F40D3F8D619DB75BBA85281C413245BACBAABB5B85EE305279ACAE4B74
8E596FAD4BB9E1AEE8F9D47EE4D15D0E8C5B0F468202F91976A5D9C8BDB55144
FBECA246311A598DF8D7D37C47518AE40EC33AF485744F58DD2472E3C0F8EDCA
A3573EA8446BE6F8BC46AD98AABBA29DF222ADED151D6624378D9C444A193D53
60D24C91D9277A7ACB3C766C747C1997953D2DE0551410F01AE44E1912DEA252
81CE4DDC8BE953FF658A1117CD4692B543DE608AA42A1678786D34C701AA0836
863119C4A5ED06A6EABC6CE4CFAED0E1A07845153B6D4F7B38E5354641383124
196569481872D2637F7C40061417CF919D6749F9EA398CC60728D7C95068BF6A
C0B5EDAC01E8BD29BB3198970371B6103BB066A7B83FED38194369C78BFF5542
21DB715334746FB31E330BE538F4FB8BDAD01BC664D35CE925F6F04405595BD5
A8A00C08040A5B9B4BEE1ACDB86500AE72576A26FACE3A2E73979A43355F8A42
F97C89601CC5160BB2F5077D86CFB2CAFB6B8626653D6B232C2EE82267D5DE05
9B030E72CB71D8D1E511F6313F6A014C998B467A6F54CF50DAF7B7D09AB23E7E
F673457B2BE4D78E3BCF8A293EA692AEEEA4CF88404EB707BB5F5670A5BAA1E0
4EE3BF6E02276F54CE31DD63B80DC627F5EEFB75D34DC5F77FEB379543761196
1E8B5C8CE701BDF2C61126DC5B096EA4EC8522782E128FB13A6A072B559074EC
FBD1A56F5F260ED94E0E0713E7D690942C8552F4AD90CACC759B554310724623
70676C2560F4D7BFDAF2A5151630EB09E1A21FFBC5DE2429EC0989A3F2B6AE42
90A005FC9C0300F1DBAC1F9BD167FCB36205F5C3579801427AE8E96265F9F845
E184CC0594188DC4771B8904EEEBCC23C1D0D2156928CFC8EE865A632AB4A611
CAD82809B722219F73C9A08CA4892D103A1F8AB083FA47CD422BC7E548FD4A4E
65206075496627BC0662BE3C0D7617DD59FEEC2355E3E3D95D977EFA49F17222
3DA6A67682A05FE03222DD7431C2668C37105B253DFBF3B93A82EFB83401F569
257756BC85A00D0BED08E92556D105DBA38F7F008F1981E2264A4DE99BE97A3E
F025D258E728E7710F5F10BEF2075E515C68E52E31EE805729AAF4F844F31EC0
C55E634124D8ED9E9AF7A2159F8EE8C9F376DECBFA60159D5F7377BEAA49275B
DC9CE8397808D9B01B3D00817CA44626FA12E001F791BC5853D4BDF9D9229509
E2A4D837DB17FF267D0F21C35D5D4599BCB0A95A5445B5800D0B521FA3E6464F
7F38ADAC4BCB899BAACDC2B89BF3A5CEFE203A08309AE92A69BB3B71E040BF06
E5259F68F0117115BA7AA3BCEC0FCD4B4C7752E56D5D6398A33090DC464744A2
BCCA83B5B972D2508CD48F77E4718BEE8D58B32C0FB6B0FC8AC4439A37411A46
6AF6FE31F4F711F0E227D43E0BAACA03CFFE0409146995465B82CDEC68276DFF
F44153598A17A015A93C68C30AD52B57382F43530354AEBAB1AEAF81EB832C4C
485AA946B5A5848C28634C55827DF3361CA086A1F1FB33869A00CF375B55B890
6C9A0AC65A055B0EBA4315CA9820CDE8798BCF4B7FDC6D666CD1F2349F8D5BB2
C31BA3728A7511BDF21EF0A62A7512D5DD95CA6641B9CE61C958091ABDF028AB
C067885B5CEC63276131A125992C686832DA19007A512B2432256C401CC59B6D
8EC97E89ED5CD37A5D14188AA679C8D06FE448AE0B5F9288C410487290808B88
F9421D506386AC95C3A3355E4B745066FC878C3635F884009281799053F2ACEE
982B2613CD296ABC2B3A537DBC042E3BA32D6008BEB4229E731333107A831FBE
6A6CAF1BB6D934295DDA362DFD346B63A6444A311CED27BD539F7866D7B3B832
1F25808BA3A235E795A2D32193DCAEF043257ED45BE42AB3F18F5BD2B591BE74
C6F18D690E71A7EB2FB5896563404931A74C034238FB747EB6E236A366D80464
77D04EBE5291ADA3E5878CF3795A0514FB67759ACC4C6FBF1E3B70E6B949B93D
D14AC40A4E4226F5ECD3DAEA01CB26040199840D09354E8F53CB33BF9AB33E09
D5B369E715639121293DBEC5939E31FBB3E738624359A7E1D56F2266CB4A995E
77D369B625EC6C6132CEBA6D7B35526797A8C94EA0723B30624091871964F407
CA937D4D90887795B84C8A54C899C531EFC8E812AB2F720FC5142AF5CEAAD07B
020D3CCBFC275E75D33B83A5BB16398367DD2F1A196CA7536D2B345D867CE1BD
8D1AFF871DABB59A9B6DA2825B02D03F173FFA65DEF93CD41779F141E8D2033D
BC86F2AC80C3BD7CF0948B120920D7F80F1D8062D7997ADC8B4E49EFE61413BA
043CAC72FC56761B2BB48CDAE721221F65A62190C341427D0A4107DD5BF229CB
415246288A003AB850F59ED62CC812B1A69017487AA6CE556B3BC263484034C1
55B5B1CB46509C18CE7C61EE43346A44C49541A5D85A3ABE25D10788A7AADDBA
BFFF82CC4E4AE64C608EEE0A2FA4E6E74BE7E3358EBCB4E303F8B56D1161CAF1
4DC202B636DB484CCA84030A023A8D0DAAE8AE94F744C02B876A193E6B64DABC
195059266C1A079CFBBFCB2E979E034B2A952B7CC4F25889CCCD84E335E8408E
FD7FB7442E6955E3B3610101E96B6074B8A221EAB47A93E4553C8610D9DF31C4
2A62BF096B816BF1E6EA224B739AC8595498140CB8C6350C36E0E9313F4B641B
70C5C0F3F1C293BBF681F43E8C4790E17923AC043C711CCFDEE4231FA5F99FD3
8217A00AD065B8AC071C64258CF588D652C3ED6A78D53674E54B5EBE3DD150D3
545AD089EF30DEF39254B9D307093215E63A55899A71BFFBC96D21F893E2F85E
EEEB0C32EE8A2F40E30BE8EC1A9A84A3A32A1CF636704F0E95633C6E65A65079
83B4F3E713B1FD759A0F2748A4F5B423E15C8D72E1E39D192DCEF6D7E2B3CA86
13DE9300FB2099A0299A8F743D418E1D967FAA9AB9BFAC15FE313FA135EE23C0
D5C8CD419F06D18EED5C630A43380708A59D6337736BA2184DA061F6AB3B2389
3CA8F72733B7F3B44F48E78519E114A8BDC93D400BA0AEF9446FD3908090F860
D024C0006150642DBF74FE609B8593AFE260F9E5F5A40A469C0464406B7A1AE8
632C78B378B00586F8A890443897F479F5C27BAC92012DD3FC48EA4479E6F02D
75E2FC0A94AC3448BADA5C84867926F440BB8106043B89324AFE19A881799DEA
617DFF00FF1B9920AE84C085461C1F5C08F4251173001AC87E9CA0EB3FBE055B
AED0E397DFD15A3A53981A5F158B492D4200B75B56BCA5D899F157DE02D11CB4
A6025A8F4BFE66C711128C794F77BD223CF144C0FDBF1576BC1C20DA8B60F191
B34F09E5AC07A93715F48270096248080DBFCCFB2433A6DF57FBC274FE9A63D8
836E4D96857CF54776E063E6D63FE08D4AE24CFC868359F3186B759EFB6CB444
5C100492702E4FDB597BAE4D4700A54726D906264C82E8AED7E4AC813E2A0024
272A6677F20E75A8F7FB6C1EC7E50A4654E990DBCE8031E1273A9000C8139BAF
088951C2DCEF712071959A8F5A1782F8A664335F6702BDBA842252929E5527D8
18DA0A0D31894C3C4DBB5C185E1C1D6C25AD5CE0BDA86D9ECE2CE05E2A46DB56
D664B5EB1D1768CC47C32A88B0DA5642EC0664A8C32A7059E8DFCF2CC97FCF1E
30D0DFB9638E9D647B5632CE0647F0009A42B7B0813E13B172CB8794C2AFE0CF
39A323160879EBA37D90BE3412E7634D9B961E705EFB3AB05406065E634E8A35
F6E726E65E678567BC1C2EBCE6E0FC453B90FEA4A7E3B085700B0A732B877EA2
DED6A038A1C3721F3BA7525AC68E2884F5A1EE30F1B1C586C9B06A2E3F4E207A
A2B1DB9D42364FC91AC88F98EE11E8609E02E01CE344566607E624B24D44ED1E
3D3F761928CD2D8CA7A1B133A25AE4245C285B171DAA6BE705FF575048CC768B
B8F13C1812A6C1C3A5B210E9C2146C0797AE355583D824B2BDE4561DF4C97A55
174CE26087BCA16DA5C250762E9828A7335C74A18D419001AE35BBF8B18CA6A5
D431F7883116525346764A3433F54EAEC49CCEF4256758083F708A757543BE40
FA74B2B0831154ECBEB291524E49A4642EB3F899C4CC22C5A0C62C074F3C2FB0
93560B7FE9B3AAE9CB895E561FC8B7FEAB73C6F9FFA2CA867C2CB50BCF37C599
134A2832CD7CC85B9E09A7E4A3E6E6A2A78B0670047D86DB5424750CEA579D03
9411C1E91001090A4A7B7CF164186EA9C5E4B14BF26A5DC40551FDC72EDDF857
7A2AE4B46F8EB3B207344F9CA52989AD8A876F13387E8C76D2C41573894FF976
BF8EA5425292C2414566492709F34B4EFE80D7134114B90B489D899977A437BE
48E7556D0F2045A6F3E55D5F95FEE2380125D05E7497810EF1DA43A534429AB6
7EC0C4DE496A308467D610DB38E30A63DEC9250C6034393976710A6BDC390D54
91DBC3972C320AD6BC09192DDD53DFDF8E8079274026E66E2A509CC7D767D9C4
0F686860AFA12A6A16B27F48D424A6142717724E94C5003B7E5BF85CFBAF1576
D7D2A9F49939A0A7F17E3361166DC4C13F36F2A0B60F826DC17D5142621B8BBF
08896FC7D0F75790571F65D0A1C9C90ABEBEAD76B11CE9F6EDC40DA05FE876AD
AE3DE5D771C6C8FE9FBC6F8532553B4FCDC045766FC921B131A5C5838FE24546
E67F499621C57BB4CDC2BE2DC3E3B3ED867E15B1A4491290BFA0EB08864029B8
DD73592A117CBD5F4D655A3A0D33724469DBF06FBE811DB0BDEFD84BACA81787
9C68AD1219FA6D88C48CF2DBAC1F9BD167FCB3CEEA019596D61A49FA6C2D64D0
DD73F00EAD18BED7A4F1330E25B741CE1C8334AC35B08B331333B16532045FEB
119CC8757C7912FE1A5D8C171181D7BCA6A97BE491382FD0B45D91B25B3382C9
30F90EECEA3CC72CD6212B1CC466E53AF0AA10EC746F309393FD46A564338A19
E25BB6DA21C3DE3D57408F4C293B146CAFB5FCE0F34BEEB435DAB88B5D5DA1AC
737006F97BB73F641E2D30C8DAA996A848C7F932A287BC52FA90B5512A6014EB
F1F14B6720C84850EE8938960579C4A6637793191F2FDFF7AEDF61A071D1C50A
C592F2B32D7E6FCA429F39BAFD7110CCEBF6F466A9D01AB145A2F1BE4C62B4D4
187154FEF5729536E191E4370AA99FEDD2330B07E6AE63167FF19874CAF658ED
822D5990DBD6DABEE36F99214F20D6BF1F40F6A5AF972AF22618B2EACB350018
21FA92CEDD093013DA9364A66CA28F687154967FEEBADE8D72C59EB9084BBC0C
B1E5DE7C34C2B8AEA302EAEFDA7F94D4BE608EEBF7AFB349074766A8C314DD73
C4A127A5A423AAD41E126AB8ED94DA6EBA37E197A9BE60203B05AA903C9B5209
3309FA7206F5FE8DEE36017C30754CC10F874FEF6B423AB37040B7427EBCC9F8
6882CD283B404946644539884E840275565BD21F93DF8F306C707B01BCBBB9B7
20B47E4D4CBF75234277DBA4487E2DAB3849AC16A69FDA7085003A44F0A76B54
046A97B867C89CD4EBA42142764F95CE32B69C14B7ACA96BFE862126AD8F99AA
CFEC5B364E3D1AFB38E64E526571B040DE3DEB9D49E3F8A19E93F3142C8400F2
8360AFDDB03EA681C193DD177C0AEB3F305ADDE4AA887096235318F052887F8D
B03D70F959EFF8AB820EF2CC25FAA838A33CD9E7280A9446353D6CB4EECC0E6E
EE75520708E67FE0047A5AF36BC3944306E692582B811FEC559B5145377D6FB3
0F0EF38C4179BFD5E2C2A0DCABC394CBD0D0A11E072445D16813EE6D6F61E492
E848D7DD88181124ABF609D90871FF84F68829BFF490C4E91334293644647E84
7316862D90BE64B5F3F437B9A57559611B34E547C0439B8565B790B03FC70EE8
03F23DB7153AF0B3B1B31E116B6EA8534BBC2EEFE8AF5B450CFFB3BCB539BFFF
7BCE184AB16BB02E7BE045311AF31E0DD72AA1D6CCAA06C39932D05AF1A7EF79
E75753FC9EBBAF8BE9DC7FDEB0E2C18BC7B83451D94EBB1CC0F769E981D2747E
88D516C1E8055902BEB848343177BB542BB235C53193A26D8E4DDBE7460BFEBD
AB6EC94A71B9D3E7F9880837E5C1A75F5EBB128B5C888DC44FBA56A6F2DA02D8
422C7CB00E2E0B0DFC0588A39309F7E664F42D1794F6605CBE638D9AC5343EF4
22BE84B97FA2BD634FC79FE4A1A1BF445A21B98871A2A56E70F9D48262A3633A
07B92541BF83CCDE4A38F4C2CAE36C91066F73A4D3318C3254DC8EA4D6C283EB
E9C7A5A76641E597C80505BBFDD6B5C8C4979061ABA3E7FB4658E1A071E7EBD3
B36B790D313A271ED8DC33F05D8405EB41F825BC02F333B07E17B5AE364B87F0
3C454133D2FBEF4F3A57C38880EFF68B1F19D340ABBF5C857A45AE736E63023B
F59550D156B82CB205CC3AD37AF33B1FAAD1781C2FD35A1FDEA1FE8268D0060A
EAC4FC276C5770D7693CA1627F18B105D935DC284D169F4C6C3DA3A9762E33D8
0C97F8F12A60B520F6EAB72E622495521F50DE90D1306B2FCF49EE8269A8C4AF
B109D06A772F6DDB4558C0006067716B334B6BB3BFE3BD09CB90354A08907FB3
31C1514470367CE9ABB20B2EB4F490D24A1C07AD339FCAE342915B6D647C63E5
42AF1CEA70FEB6FC8B3B2B70EAC11B5112FF14A3424AE4992147E3F15E0AF6B8
E3F89046923D93865D6E98F151227C34254CACDF8509BB599C13F61D7A856F62
45F472C4129B04C803E7186C886276BB7D9B1A3175944B976FD67E0C6A857CDB
AD4C351CF32530DEF5BDEC6A369E826D1C21D6ACC2A5E0B42E1E943C28C7EB68
DE604375D374BFBCEC5B68D43CE1A38E84726A6FCDA1A34B48FD97ECA2935F34
63195DE990D124FFCDF54039C2D6BB431CE268583131DAE9D0140A499A2B12B9
53D0AEB405B2950763948BB3ECD92061AF075982CB30899F61888C6DB1305A00
5789CD9655DFC3BAF47097313139031D943C5A743B47AAF013C862FF6E6DDFB2
0A4D971661E2596EFC2A04AAD0D528C122AEA77C53A6EADDD56AACA1416721C2
A10E5F882440A3E2270B9477D1DE181FE6988C31E0807627B74BEBA37FAD93E4
B44D1D3346EDB69B9F6DCF11647D80D0180048503C41CEB2692606CBA4D0EC56
3B34D10FA3D6F475DA740B1049A1657D37D8C2DA147602F7491040C32C03ACA3
3858B25D0FECB049F89EFB292F31267BF2B0150F2F0E355476CCF1B2360C20D3
C856112BFC7C7A781B1A39DF8E794109DBBA12A5C926EBE5C08265415F1D5E35
69FBB947710460CF06C211ACC9C35088AC27642239FC4B3201383FF3E64BCC22
C70630893319755C6C5188F69530B0345E25042A6C6A5258CA8E6C56255DBABF
314489635CCE2BFE3B12D6354663BC13B6D90EE76A7C997C3970EA9DBB1ECF37
904471C06EDE0991EBA89539DADA484B1E91C19D22D7928EDA17379526106A8F
FAF6E5BAEA0CDDCFF9916C9FA1A2EDC19D54057B88ED8A7C19FE9BA51A9E44FF
0123710C57CD6B1B5610950972EA434839682723003262414281BCB53CA4D60A
34675AC76C2EA46E26A1D65EE71289D5BA04B3C96251A5689967512AC8ECFD09
296F305D002FC77404D09A6B86693316A777A28F31421BCCE9BC068EC9C1E62C
BA7FBA9DBE98DB82CDA9F69D55E28F1C35B04F65036317E9F5E8EF42E4EBF7CE
34798D20A4D71BE0F7AACC1300AC200F053045B5487865E395F8F650EF3FAF5B
F74ADE5FAB19EA936D0B6239F79A5E9D66CBE7386826C7A7E68095B7B6A5D6A9
D9614DA307A0CDFC782280B889FC907CEBE66113B5B145BA379CE75B29CF886E
5FABC6C2DA26BCF2A5DF59E40F11DE0A5C7988C45660297BE08313C645D24529
95597D7B6283944D7293D6FBF6BADFB8651CC3649D6D4709FE5B8A66C7A0F845
2BD5EA99515496C142D484638FC917F95BE2D6046501DBBE64AFA4CBA411BE11
C94DEAB6227878AB0014DE78703515BF6930A8CF27C757FD42C2F56F25C5F12E
D7BCCF33CACECE30E6DBD1D85DAB5587EE1F682EB30337C7E5B916F6F27A487E
774FBDBE54A401D038E2FF2165821FDCCC474A5E683B7B50D372FBB99AE81B98
62C1B15E8E1587AA11A552FA8D7D2F167E88A4CFC2A7AD5718C61BA09A672409
F59D5C9F420BA85A0932A2430A6BF26D1C9316D6A950EEA1816650178A57F089
B5464BEFBB17A79696841ACD74E6FE808A06E067099660F0257F15FD1D3DF7DF
B4A7648E4701774A061438E21D50D8ED5A3EFFB1C1F7430B12962FB2693174D2
18345260009233FDE0B38C1D90C887D23FF0041D2B86F513CF0C9B2EF4EA5AB4
8A328F97C3BA688C7A1B81C06C5ED2A14C05F579EEB4B2637F64848DF88F06C6
51F26DA5011DA8FFC279C745B7C611A1A49719C68F84B2A288783EEBCDD5BBD9
3E881DE4D6D477F851AD1BC5863B0C1C1CB0F6033F45752BA4A743ABF2C47A01
5F35BF4C89ECDA3A07157E72C9DB62C9AB7E555A756FA53A80110CF84930C01C
AD7C22880CDCC98F1B01066BA36B19BF71FD98F4C6902FBFE8BB64D129AD6DB8
6709EA155463D705D4E4806F020BDC66E775A117DDF5824ACB3E33A267296E6C
54D3AF2F0728294FD9C5DE6B7645FAE1D1F31AE029653006874B7FCD227F562A
A916774B4FA823679517A79A835CC6028E852A03FC1F45647A12DD32538FC379
90204DAE0A2D8B5C6CFB2A9BAE18B1998D7296657FF341E3B7E2A79228FEE466
DBDE5468FB4C536CBB2F4B10DBE3A7B323B193610F966342B844FDD5D580CC6C
050CDA60E2D70C24235EC292D404AEB5F52ABD9B0D43646E58B5A91AD4823E18
AB823D8560D1963B3AD8D36BBEEA1CF22AAC5409B812DE677D241853F391FF02
8841159553389037B301AEB435864726D54BAAAEC52C0AE31C2116EBDC04B96B
46097D26D2A33C917A2EC41A9D5725C620098154B59E65A804A08FB3D1C4AB46
53BB0A675C699DDEF2B64AB766684474438B7462C548F1F47210D235519F2291
421583A571D4CDF3FF3DB5F168E8D42A2E79D140DAA4A65523ADBFC66604BEB0
2813ED68ED3BD2B987CC3D98FD5766D6F1AD8C2B3C268629D79848FF4970D133
15D432AB3A61FB3C8731456FFD6CF43E890B0BB8FB3F75E00637B025D571EF95
8527CC1D481D990B4C1652BFDF8E9CE2F18749BD22A141BCB53A3653981DCA64
AECBCDE1FE8437C4F93B02FFE937398DF08352DCF9DBF92515FD7870D5F392B4
9B9688E2181E90617056899719BC47BD4A1C465A8BCA7554E8ED6251018D17BF
0D3201E1EE51258BE7F075CE96A536DE29D561415269608E3B69F7655664AF71
34D7640F5016E9E85908A9CB3A597180D5C84AED0A63E401D7F746EF0618B4FF
AA5C1117B723DE8851474673265AF4BA68A21FB916A92D4F3A66ECE6A5341DEB
217928BF27540CDA817C66E7A210365F0D80CE304B27CF4AE37EE535106364A0
13F4CD4974DDA57381E0626858984E0E2DB1C5DB1AB369DA569A77ADCAD62C6C
BA2BBC512CFF5B3F1098D001D67B610D1C13BBC860D46F37007C4A4309E2C78A
9776A61DD80EA64F78753371F19D35CB67B52820BFF64232AA0A1405514C1CC7
E730A29EBFBEDB0207D320C978F525D6B24515E5E08A8DA810A77A76B4B044B3
1363BEAE6DB51369AA043CBA5E02D7DC4613C87A70B914D05D5CA75CE8896476
5C9B9CB45F949F5819CFB3439BA63B3228C8FD43137C429E5DD1833D05EE613C
417394625105B5F049410DA34AD45CF0487FC9C0AA07BDDCC91CA7EDFBEC3D01
727AB907FE878B15255A2FE440D7EDC6EBCD8F7037ABC7F1F000487298007608
F578CDF32D5D25C8847AE48BF7E9B86B13EAE503B14AB592747520A147CD26D2
FD3517C082D9345C1E60252FA9602A8535E1BD829A114E733ABFC3E58945CFCA
DA419FD6B64BF03A46E1CC047E2D5E52919E015623D7F1122DE01DEB8F3E0881
424F6D7775AF4E9AD4AB6B4A9E94A9D6D2A179E29ECF6E001B94C7A8A6CC8556
EB2451B8065CCAFCFFCA485CF3E2BDA5C77B45F8E3207858E7E9B10240A344C9
11FF16EE1D44A00017AA53B734B1F84100ECB8C9C67C376EA9546D4BDEA0432B
5A081EA69D0A80893FA16A01D361FE578BCBE28C49E2EE484C4D1FF27FCF565E
821963D54526D038E7A306AA686A4BA05A2730D07160927CFF10954DEC53DB8F
69E7A00B64B297208326A68B6F501230B6C3BDE923DCDCC060F66ECC54482544
3D351A2F9AAA671D057C103EB64B55D8D1D9D541A64BC0E75E00DDF97AC976BC
1C749DFAA9073B4C60D221BBA730F4122E593B5AD4A6426221C2A5594C8D6A03
84738E48C33E1D685AFC35E0BAF314AB3BD51B5C44C53D309D6BDB1A6DE9A6AB
A52F4FDA348385C78256DBBEBDA6B8EF328EA773067D00D4107D2EC29CD5E88C
AD6818C7FEEE268E920DF4E35AD7BDA27032906BAA817663492326E8CAD9F033
51FC56EE0E2FD3BC2A1888AFE629AA9473DCA0EBB5709D0140B7D5E52F6B5CC7
92CA5EC0C411821831C69FE834F7F01D47BF35F4B101965937FDD1CF5E1F8F19
C1F2C99F5631E063986C2DAFDF1D6F6960E6951724EAC8F87E5B8247F8A0C2AE
BFAC9216FBF3357EB3B801729255CE7580AF4BC5A759EB151A227A6A71F34239
8F75A9BA7DC390BDAD0BC293A1724E3EC3CD5609821FF73F820B00E188F5F705
012CA5AB2C17FB949B3CB4AAF31B24B0EE865D9642D400D9E7D46DA8B26F6C76
53D30C53416A412FE4D707490811348585353B8B4AF7C081B1CD72F48E8E71B6
08127A8B02D6991ADC293B48C1E7F126861DED56091D3FA53413DB48C7285BED
7574BA875065D7C0E335BC83FD35C53746A591D973017BF04B63BD6DC9FC4647
C699B3AB80C4B40BFDF54C4F1DEAED1448C6BF145F9DFA2505C28E02AA3045A7
D8F5ED0DBF7482F193A6E03E932AEA9E694F735E44AF294F488ECD2DD8DB4873
E396A4A69E1431DED2592D65E1C63963C46B50B9FD83465DC0FFD54B90CF0768
E5E1869B841442060514C254EF49668B73D047E7CDA7B3C570853A51BF99CA9C
67B10E3E245CF10BC0517A162C4BB057533596823870E7D10EA7D651D211E750
249604E5C10E7BB1A2436F549945232C43B3C3A492C7C839A94A20636B17E445
47E245A31DC4B0D528A4A805A4848C0233FDB0BB2691C0BE18D9A9003DF1EAC5
66555627E1C283F90C0C6549A117DE217DC830EC87393F64C6CAC65D82184048
1DAC11745115B1F2B44ED3FDB769F6DD7C46D714DEE0293AEE0ADEECE7D57A37
92EB2FADAC6C382946876A32EF35BB7FC853C5471C6F3DDCEC80915631CB2616
537969BEBAAFE2DC0C87884AF6368CA0FC5A2A2A32304C5B509EA7ECE7C3191F
242109211A9D1181B56218AF49338BA85768BD6BC6CCE3A1FA942A4E3E66EE7A
B1307A393EB5DC8A53D9E6433D8367D8CDEDCB313CD847DA5CE1AE099B0C9275
989C6E0C091A7A2F6B6EACDC47A31ABB5752C94C9CED21C042173BB9C6D7FF52
62B62C401FE34878F883416E4B3F03192FE22040A427AA6670E1FA8713CC82B5
345448AF95DBFC52FEBEFF5777C5F9FCE908FE762BECDFCF028DACB45A4E1AB5
9CFE9A0BFF51198BEBD6D39A178CE8319A4A2E5D3DB727176AB19FAB8E5D1B42
8F0698672E38A573AFC95EF22896F1CFFCDD3F51528DC0388AF6DCCF2C6CFCAD
9E2737B520D147EB81F802FDFB82237F18CA66A06F8D7EEF83B83F8262001753
B1B6BEB7532B34F925CC90BB3E0A5D5381620D1F1BFCB194C12715940228233D
8A28574CC218CF6E682A13D50F0A7025D7ACCE4C170B69BBC9CA360B2426CA6B
C01679B9C0D3C7E21AAB24DB3C7C7FCF52EAA74C5A533853D1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC8A55AED62F74BE1D6DF5A50A60BB2E9B5EEAB01EA2E3
783E834FE54117D804DE7A4C2A8D1295DF3CA75EFD6C23EA2B258E26E398918A
8376C0B858A8330981646E985FA3A62B3734AF782E067931871DCA4DB9621B9F
DCFDE691BC8F3AC143488EB42B699CE80A7F069577F96C329B8DDF6D0863DCCF
D3D9B0BD935B9843C2E6468CB946E742529B6D950E52E0EB7A4A5B00AB550C45
1413A237842D91C888C71ACD68ABC3B289208E41AEB71171EAF17A4FA9A82E31
52AA8A07127BE1AAB3F661219D066794BEAF0EB7FC251CB83AC5FF4ADCA84FF6
594D3A339B1435E294394C84282FCE170211469F7561253DB432054B212A9BB3
1CE742F0CF21276EA8AEFCB9A1D5B98143C044592EA5DF587F965E1CDF3D423B
FC15EAED7B631627F0A869BE124A2A17E95A1BDDD4859A31CF7AF51A89F07EC4
7B7AD3F8AE9285B9BBF9F73753F3BFBD3AE67D989B0068CE01B8AF0E70C1A896
DDD437E2E1C2A3DDAEE7B5C9EA3A48801CC51BE0EA94A2872E6F5E4A4B898478
E85967181CE537CBFA92EFFAC4A9FEF0E0BCF582A566C69197346E8C49EBE953
0E1B5AA1B360184D33CA2CF107E95891EA57595401C16DB6B6452FF3EC6552ED
956CFDCB1108752B057FDB7D8C9F5A244AD7F60C1CD47481630EC312907224F2
8967F4F07E0A2A0C8886092A93D377FDCF3FF3E7EDBC6C8D4E4B5526EABF32B3
111F2E98CD1EB95B0AC95B44C4C6E4937E7899142E5AD18D415CB1027B5805B8
CCD48CDE08E0CE339214EF47FA6A52ED2F1DD38A57AB132C6D7FC1D7E465FD4F
F63EC4EE72EE7CA9F5230EE7EAA4406088B008AC22F4E6D1361A1956704AFB9E
00CB36C472F678C6B0BA4B2F85902C3835C0942AD6487F553499F1EEFB408F22
2758ACA17DF8FFBCD2474597B4176B14AB7A3CC80023980A5A4FC29BC9A22B87
7C862F0C7343DBC2ABCEBC6E4965F613EF4F03F3D22E15A2087B61FD69FD16ED
6151A6578C304C2E549F55D61B259B3A78188C3508D2A41E30EB5AE2604485F5
78B15926D0F02F6991FF22F1710B9A723B113FC46E2C5E6DC6AB39B45A1237C0
183425321CC7F447DFA6D249F9A5AC913AF78E40914D40A9EBF70848F27D9062
6DB0BEA4E2334C8B988AEEBA4426B01F4C7340DCB98A8C094AF6D011702B3F99
60146B7D8D298EACD96F05A36947C729BA11D53BEB168DAACA5007861EEF13B8
4037C85CF942445EAFAB32A2F00E5FF6D387FC9426852425BFA0295E0C1DC6BA
C7BF89DE4D09A2233312B56C664F7FF5D3BA4450C985E9FA2045FD193EE9B407
68FBAFA49D370B7A475CDA6D1C75B6C22F385065212559185333CCB7CDDCF211
CE7E6259097DB14234C003CA115D75428B80506F4C56D862C0FB7EF87FC74899
D1667D16306506EE806011CFFE9C7FA5EA3B407C3A0ED107EA48824D9EAC0CB3
8E3BFBED774C9B4C660A27F619ABC07A6952B77B02442EF22B8B78F9E8094665
F9D8F737462CA6F6469ED17F4EDDBB43F65B92C0919094E896898D8329EC6E67
425303B8067646B58DE9FE4AA80F52668004A58C8D2BC06C5F920DA5D0CD22C8
C1CA9703EF943547B80CACF8E1C522722070C00F407DCF54610F7FAA56936257
24E6EFA7FA812377B03871F094CDAF1D7AA97BF99A43ACACCB9988570F9F8459
762E34973F90F4CDD8112E0B4E9849B66C27771A9C4A23691C2A286DEC73DBD3
46DE3E01DBFB16E106C70A097035549861A8B6D57670833F82D30530F18FDD8A
8691F3FE1D7B2E99C9AEB06AF330380D25B52A57EFB4563110CAB79306492706
69FE02319FE847248D54C82E7BD92510B42E65D9B1034D0314F4416403659D65
570A587EFDE43E95C39EE93EED6A2C056D1760DA8E60835C6EAA03B37D75A196
404C116C57DC4B7603038D6D6C62EF17CEF3806A39140CD5073A6E046DA695E4
F0E9C8527662CC0F00E35FC8D748E1071C14C88C17638985900FCBDB3C5DCCE9
29A3A58B44647B4DF84854E5D8E5DA448A1F38FAB0558DA686AE49530800C138
9DAF682A41B1161868E40DD9F2893D8D4BD1C3AC73A93ECDD50A49C6B2D14C28
24CF492D96EA75070D2AEB10CFAFF2B694EF1A330738502B4DA0FE01CC35EAD8
54A96B1EBE737EAB2666941E34661E46A2CCFC2A276E7502892F26B8E36F84F6
7C419C76D6E57F45FFF9ECC814325EE5E13F9ECDBDD275B767211E2FB87D059C
EE28073F982C9EC093D7101FCB5DBB911943552AFD46FD9FAB5C5E25644A973C
C501BAF387F68AE9AD311D20E733FEE9A123D6B4063CD49E6930F4972DD16BA1
B5E7B09F31A0851A91A61D9E56BD185F2C69C5A729A58D93007F72741B9430DC
243BBA146F02AFEF0C27DC1524B0F048C2F099F9DE74618AB743347A560FE203
044E04CFC9BC845C641025E71D68C6F3BD4699ECEF9B9929D7BB0916E835C4CD
8B60DDAA418B1E95824FB0179A2B8FE353E6C9CFD5FEB783D8BA29CCBDB0ADEF
0A1721D1D362ED4D2DB50D8B0D361A0933ECF6B66112069470209F554A5F2DD5
3A9ACF8E7879B21FDC78BAB303FAD520B0C5A59CDD7E6DE7A661B95CB84CC83B
4CDBC95FB1E056D0DE181FEB67FD6C6785A23B80575B705310E91B8E6EBAAE4A
CAFD9E216BDEE58F9DFAF8A66B99AE1333D13ABBA20764F3971806F758F142BE
49B872FFB60FC23622390FDD824DC84E09F305AD472F057D66709CF0C0FF1EA3
1B60D95EF2C605EE4B78476524B130388B348807B73FBF9B1D4B0B42B9622D06
365C68CCCB9DC7D57994824A1DD1D7E9AEA6B80248B3D7976D823E654ABDD638
07400F599D4607EA11573727E096743027AA6993443E6BA71C5D42370C0CEE2B
C6FB93E2DBEAE234F47F573D9028A291B617FFC7DE4B3B22A6E2D6B4C9D87C0D
C1EC0CF4F9404CB71DBAA1BFC4F819C37B48D86B0BC80D7E981B6F6BF12F39DB
1EF68167A1747925DA8025BD65BB1853C954CA064F097A7FAC4883DD336027E6
83F1E7C421F3848D6BE44251C45504161473C702193145B68E218F50E0512AB6
2FDE5FE52264F9619A90A04936FA6ED73DD695089EEFB7C455053AA9BE1B04A0
A7637E4079782701ECD70176C5FF9F5F755CCEA4A1845D9499FD37A93751BC46
076FB12E8ACE9241974CCB7D1C76FCD215BA613221C0FD6F2C242FFFDE6AE094
E7ACDAA55016739EF0C56D9A955C08623F932F1DDF0314BD12457180F1418751
36DB6633408FB60F0E1CD0F534933D813A0E199FF42D3F7E94A168111A286D59
FCB8A631C30A359ADF753DC1FAB1529FD84BB95C4439056BA76DCED8A4FC32D5
DFF60528AC2D8F7248FDC31A976C819688C96D18F302945807A097240E71CB6B
27C39FEB34D96463333CF6C4C63F2EF9B18BF91B423B22C6C365E0B998853FF7
0F847C5BDDF400C334308246773376E8C64B2468B76D4292C82BA49439CBBE0E
28881C2DBB2AF4FA1E9FE5297AEFCA511E4EE851C4ED1250FE363812C36C5A4F
0B51736AD45AC5EC19E7321CEB326658579229C3B9C287192A3E17AA858034EB
A43AD58ACA39517AF3DA2A90B0CCBBC6E3A6D23CF1541ABF3B81DBB1F2DD1727
43B44F15FFF1B5FCD205AD3BC1E54F65F300AC4BEDC1FFDD61A8A881D4B5E065
07C86666CB95F9F91AA2A4AA7EC3E27C6E4F3B65B36F956BF009911E57563AD7
5D5A2ABC6EF15955174F28D39D5CDA5409FCF73CF92802627BA37457CEF91306
74DA3BBD07E6DB06E0ED6D782ED5323438D4F6120313BE073B78B68FDD2F7B8E
E8FB4673D57A1C19612848F59DF200F7D47C4EC0605F3F118F219451258D1229
488FF5B76F712EA316CD50D0723CE48BD12A96738B7E64A59A904E91E93E15A5
32AD37ED56329BE45FAAE10B274CAC26AF057AD77A97803F77C2198CDBD5816C
493639EC06D2D7404CE95B828E0B7AB3BA144F458CC3B6896304201496D22891
026E690516DA1E69B1097F0B8D8900C3FE1BB1A119B77BA679016CFA9071256F
BAE343EB3F720168D463247CA399C7285C4A8F3EC26F9BA027D47090C51F1963
9CBC5B0B87044F8305425A634C6DEBE4C369AAB718599C7733816DFA512C7E85
5CE9FF6DE99AA1A8C8AF3C061521499269AFCE275560983579A40F37B1BCE0A0
6F667D6619936BD68B0E956CD8B6A3630BB003E736C25F2378F0E9533F723D1C
FD0BFF186A40A6D012D6BA42F249AB68CF8D198B3D1600BE24301E86B3DE8FB0
DAA24759CBDE9A18C6FD8DA48B041707327BBB1B9CEEACB920E8EED8675586D0
C00843062115467C432633E6876415E90670F9031E3E49034BE2DE1FCEDDDF34
17CED53841566B1EFFF93D7CE6E4D2E9400FE89E62C829E568F7AE3DA855C4A2
6A840088995BC856FB7E75345DFAADFFB18C4655BCCD73E0F973D82A443481E3
D9D0DF0E79D73AAB974A514705A754062A28A2CC54B4C09D2685A2CDC05DB47E
A9C09AA9EBCB0CE326518BF19BDCA78888EB266128F16C6A05EC2E20693EB4C9
1400C955C179C7C9769E253F142012380D85DBD193339B49F621698F310B079D
DF2BFB55E52D0C28D53D6B03A397EE0EAE93069990592077980AD0525AD2BC04
A636DED9C1ECA7F404ACF5082C8CF53C4C273040F111CCA1FFC282D04DDED7C6
9940AFFFEC1DD91C6B5053471E2CEEC7C0BD05E23534EEE1805308BB760FF50B
2A0D4B0526FFC9448A33F9E8DFF5317DDEB5210315714C05F25724C969C56615
91D5B84C9EC36E5A449BCD61BF37E788FBECC2F2F7ECE7527CD912C9F77DBACF
647581361772166FF9A659FAB65F3E8E1B3F1AA8461B76CF95DA3EB7944141FE
30576ACC0550B4FB9CD48D4F04C9713674C6865A1DBDBDE5B806CD7640D03B53
CD75EEB1F0E1BA9EFACD547A6DBB470175A0934983A5494E99CC08367D3A0AB1
4A0B9235C8CD10337F6DE8E3AD76ABBB94E34D01FF4D473649C880BB9CDC008E
E24C324A0A35882070D596770AC86693A99F6119E1C0A8773C1FDB9EDAD6982C
4A77AE00E34601BC17F65C92B9EB0AA5572DEB677EBD57CFEE02C137B2E940EB
5C3E78D57A7D536BFE652B05C3342AF8F322AAE5551756C8CF6424F73DD21192
DF3083217DDB4B1155FA4DF8EE78246BDF305732CB2A15FBD9A587A61D52BDA3
448C8C3DC7611EA2AC9D124768D3437160141F196EDD3FD03E057D72C5F1FEB6
67AAB93399266882A04EDC92DB1600FDA5D8A9C987BABE0A96C90BBE576ABD56
8943DE1A68599E9D3679C1F49FDA1ACA55F8E5AB47ECD9FA9F60172D890DE194
969A5340C54F0A21101A7B7EB6B8C2806D035258D625178D9956F635B396F5B4
B45A52DF9D889A5BA3090A4A3D9FA915FCB2549C847455C5A3DC752FA1DE29B0
FF75ED890B10FA6013E152C7C0C9BF24A4DD69510D32BE7FB88A3F8CD3054E6A
F6D3CCA8982D9FE774C650A0F8E612B145C468BF739FA8CA0C734A624624D097
C52D4A7D6BEB8597669065831FD773D343E35C506955BC0CAF658F8D744F66A0
206A54149BF66BE61692B55FCF10E56274B33AB7B76FE513DD54A9CC7BAFF5C6
EE312067D982A95403B05329D5E878D18BD700ECAD6DF64182AE046BA3FDC09B
D135D3527D677620274D0DA01E51918E379D4E64F7DE2BD678F418475C39F1E1
202286B9DABD0AA45E8309E3997CC58EACFE5FACAC80B0F93CAC562D72EA4FF0
D217452C45F889ABF904A3BFA1142610910AE617E5EB377266FA14A0EE705F92
18619017F2FEFF78C75CD7EB37280CCD7F33817E48EFB0015977B2402E443003
C3C0ECDA055270A1F0630098A4081A73808A7A2CD21031836140422652F7DF84
A112417E2DE1619D98E8D8895EA64772942167F3D1750C4BEDC34C7DBA4A5A82
FE1A88C57D756DB8ACE8FB0AD734710CC1B977ED5D8F37B922E0957482E553A8
4A132021AE67B095247386611CAB7A9C3D5AE3CE594737A4D790586CE82B89DA
1820C7A9623EE5DAA3CA6C1E426DFBDA67F2CD9C621E7ABC49FFC879035B7758
43C57B1264EFFFDB19FC7F95F353CF15A185E6B6F695E6A5C2B152EB917313FB
D86D047D7A75420A12A01F2FB585F64E5E487AC8E3F0CEA192A34CAEC4CB3AD9
22EB37A0A9B90C2945C2C47D105A0030EEB6AC903C3C11C979418F9E9E1A81A9
98FBA0CAF875077A89FEB9B905FBBDEA838EC45856C9308E5E77A3B5AC435DDF
C34836356F6577D6060E4ED00422D857C1EBE297A1C78F7BF87B5DC78DD8BD3D
37F1780EF7C8E374875B16830392F3829949F897FD4316388DD3B8851730D5EB
013A8253BD3BD90395C1A946E5EC54022EE6FBA0A2D2B125262EA09AEE4FF6E3
B4FF98B761D56A0ADE2207AE28E94A4E3D99B62E15F5A49D594892384735C596
501A99FB4B3A81E707E45243D522D1A23675581B1FF598B5C2975E78A963E889
C4EB8195DD2EA30A35FF6EE50B05FEC276B53F1728C5D2E35B7CA35FDA19D5B3
9FBE6DC79AE856162364D63518AB6C877A501D1174E54675807D32ADE0D30E7E
C5EA8328B2D8B4F0A0D5D2FDDA8EF07566003A0FA9A0769CEF6D0AED10BAFBCB
36D51D37586691788FDC53E11F6C6CFF9C7BE2D98C82544003A2D88439E02A18
D7DCDF238AF042771385745269CBADDFE9503E581BDAC5B7F67658D878AAD062
A739BC87FA87FB2BD7D98507BC4C1C8BAC24C7AF246F33379DF586DF2DCF668B
76E1DE044F9FCDE0CA4D2A3302DCD3BEC88DB1E9193B96416B096E0E79FB4930
469DDB50191DD295CA2CB83C85F04DB2EB91E42A8C629A30CF01967EF104CF99
25AC36341F8201DB6090FC2B876A1C6EE0071403EAF80F81B1190D33AD0A9129
5287EB10819AB6748B1A8AB4AA33A90A3F11317164C24CBC6E19022D2448CF3C
50BF9D278EC5D6C7B10B9FB7D09748D5C3370F08B2CED8AF3C6010CA326395F4
E4B7AFABD02B45FF8A2B2732E50CF6DC27BF918F67DC775AAF5F219725F6C005
A56FA73D0D402F3CAFC76E677925BF69DE1ECDC5E85221F57A774859D3C13919
9FE5722CE1D199FBE7C37BE2377BE941D69084A8A879E4F25ECF61909318CD4F
7ADD14BFDD1388D93AECED02B101F6AF6F9A3F3B572B26ED91290E0A4A531A60
E0302BDB941575F2C28FBDB7DC9EBC1CC076CFB4BB0259E842E514A685E1084E
675CD44E1120CCC7DDE11ADA444459EE085A8CDA76093049DF0E9F52685B731C
203F4C7B68B9F91AC650E1E8529CFFCE32686736B4D0A9805ADB0ACEF9249A47
A360E04852E7DBC79C95336BD6D4A9425B070BA44FFFB17A0E8B0F42A8BA0D93
DFAAE75336F142E9516C902171902F1FC4BCF75E8BFE1592B42F5B53B71910EB
C136677730809418EC462BA6035205BC3E0B7BC91D38653D07AF8A9DD74C571A
E55656E2EF4F6E865398A208E2929C8B7759CE4A7CE8D78E4EA8921C1335F060
6FD56C4FD764F9F41577063F1B8A2AA36329FB359955E433247B0426962CB385
4B97E3B963EE17474429D45E3A534F4AA2735FE8853D39931C20C9BE4F715610
CCE5113D5AA815300723073545EAA0B33F8524A3BEF40A1EEC86F396288497FA
90EB3C8E54F693138FA2A44078B2311CF910DBFC573FA5DFD9E183EEF39AED66
4EC4001FEE1B276F8CBF971C3A75B3F427FBEF4E0F962C983D852C3DD8DABAB4
6F2A5C0DC600CBFD2DCDD91E8F5330D75F3BF9A0D5D9B562D7D38E9B29102B14
5E846086D5C7626C37C40F89F28F4383E5ABE23CE46658278EB51AEA7435DAC6
4B4D070F33E84E2FF1292AECF6A7EA3665A4908E7576489AE4CFBF33A54E8695
3D5D19F164F7871ABCDA3922A66DF82E43E6D4B48F286E4733A1C7AD5A22EFB7
5C1002502F5CDCCAB3811156643F62F2BA79F9034F1337994AE36724D47CF8BD
E5D7CC3F8237AF7A34634EB0CE185A919D024AEC4A2DBE898CA8AB442266C721
09DF66A9C29D1CE3B7EF62070C277F8FFBC3BC7C8B6F69715B8EB736EAACC0C6
0CA6B6A584F069C56F00D0F6BFB9238C6D45E07D56F9859E9ECB23F47432317B
B4739CCEEE98AEED031D96C9F6D0BAA05B2B4D5B72FFBCA66749616443D7D293
0C40487D84D147DDEE7A81D76C9830A2BFD6727AE7CA570E739E6713D519A28C
44248F4B6779A799C8E046B9099239423B96FB86F01C557746262FE4CC2B556C
CA02C7A8F8D4FEF978FBD62E64A0059FD24E9E541D0C60D8A5EBB33D638D265E
30E0104BC22CBCC8ADFC7F200F95896727C909269FA14C5B966A76A7E8EC4F4C
43767003D4B1F42C835AF1F8B9B9149D49390AD8215C617CD36EC59022170929
9EB2062CE8F09F6AB4852D5D04CD24CC37AB142CE5643F638BB9701A5F72394C
2FE0F481BFD29B6D9288B15FFCE2F21A99CB988A41DEF271D3635F31C4337A93
71B8F3E22EC946B9FDA73379F34F342A47936F9BD4A3C4D41039D61E81DB3C09
E4E28C882EAF94FB74777CBD7E0CA454C0034CF5A42F1949FA8436C48575C209
38F76C47927FA31C3AB6F37204312FF9726B7E0444B9AB2B8DDDD34F30169B02
463596BD26785AC96DA62B2483F8BA64C3026E80231828E50723531F0ECD2501
C27309E16210AF9B3B652672B4A073AC0F66CC1BA094DD73EF5D7F6D8363CFED
954FB70B27CD51429B269642E34F204747E8674DF8C5B23847E2B7DB12FF39A9
94359E0164C3C563683784579BDBF73FF192D53DF6A5A780047AE78E338C39C5
12F668344229A265287C65DC1459114F3FB6C2774F461BDFA5549055BA6AB727
F49E3DB79DA9DB5774D43349FEE8C5751982CFC0654B291EDFD644E45156D793
72DA2291B3852F55EB619D24649479735FE7B82BBAABDD0D920EECBE48F20A30
F230489F2549576000E32ABDF95C249ADB5438BED0ECF559A70862BAB43DCF35
647F274B687BE3117CDA99E4FE067B80AEB15CFB9357AB9B0243A97C0CE047A8
C4B81D2DFA07A3F61063FECDD38764BE3A313C8BDCFBD5C1B1AC8DF33CCCCB70
5AEC51E51EA36DB115FF30FB94D9CDFA592CD268CCD5C8A75192DDFDDC48DB50
810D15398D77932F1B7247C6B78AFC1CCAA05ED93125623EE2FA8F131731D0BD
2AC4AC8E7F3C78D26C89F171E67E2DEA674725EF7B22F6DD86F030DA8FFEE8B2
C95369D1F8E726DB3A0F375B4C60E60F5BA0705AD850E6E3D5AB0923020E5BF7
2ACF5625A1D921AB130C76DAE52C80D3078284D99677831E000716ED42DC67F2
DF09EFC4499BDF058234104446F1BAC5B9D422936318740ED5F8B35F6C32F443
762E11ACDFA0504C5F8E631E99E576E54C2C3FB7775252193D5376167134D70B
8933343C287705C34C71C1E6062E25A581FADB4BC85C083992132D51B6074F93
6EFC7F07C937E3847E801BCC6E95ED001E3FCDB4A513AC53DA7F08F3A7E06BB0
62860541B9D51AF109C9616899C0A6D9A254987B24B4A2C67078BB8F75902379
804F8641B17C8FB166EA0CB17E3B7C2AE682EEA0DCBDBDD24C0557B1991C1D5D
9A67C6A726FCDC90727B985EB8C0EEFEB3F1172CE085668E20A1C7400A41CD8A
BE961F1321631967B2D7AC5D7E3EA30038A326AA86BA8D0DF6406FD1C953F217
475B9392AB2DD9EB625955D60910ECFF0ACCB7860870A42A72AE1913B1596858
08F4CAAFAD1E7BBCDF10B6F116686A8342F8D95D3BADA2F3B613347353760B35
CDE22F415B2E5CEF022F3C456A907508044DAF4A4FA63236AD651FA8F24D85EB
32214ED6BA689BCE0FB2EB8BB71CD4A8EB02295C3B251F1256496B724FCE3A61
2CF2A8AB83F8269605CED3057984ECAD20452466A17BA5178FFB7E6B755F90D7
EDFF9680D0ECD1415280949BB1B38DB7279D7EAD4E8CBE6386547E0B8DF53E1F
B7660E8BBC7DE0664D64E7FA51392809B26CFD5541F7DA19DB9C6F62CBDDB8A2
4CDFFDE1D89225F31A188373AD47E6778E52EA143F650C448922284CB843690E
8A365A836B0AABC83311CEE504351DA9D306D9B6DE0B4EE5D2EF03D0742CC9C4
2553454D62EA19BB83DCA590046F9798DEFBD58D67875FBF5CA184B212E52295
9FB10C026C9D400E1858B618AA7DF811B575BDFCAC89D0B0BDB3859950F5531B
2DBF7A2954359FF09FFFC35DD92077280BB8B5F2F1CFCE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80386C872B556B363517608
42271DC8BCC8A7AED0FFA3EC0839B104B3D3399D3C2172D3C2F4A2A6DD033D6A
0D6B362EF493A53C3C1B37349F51BB5EB83237C7A488381A17E3ADE2F3BBAE34
04AF40A5B687B14670190FBB954E10D29A3F0A68C1C2482A0BCDFFD9613AC0C4
6F3D057FB5F47E2DDDF9B56C3617FEA2E7FD05520E996C0B3F3FEEAE3DC36406
0DB581E752429B985F23EBA0C9875AD055D8B1F640D10DB8F40BBF062F476691
EDAA1D05C5591EEDC1B75251BFF8576F1C9CC5C0E521392A2F0D5F869F8AA462
B3883A673A976328E1F0DAA22B80CB7737DE2537E7B54F5E1643E30046E87CF3
8D9A45A973757BC16CC50504033125D2A68A1C97CA095C56B3D62783960780B3
1693596869FAF5692AA8FA6643FCD7F55E72948D2DC55AFC5016FB2C48AF9D85
192393C682B739EB43CAD8C3FD4053B2D53CF911352E2BA87A65F8949B0B7918
EA727DE4A08DE07B71365B8F31103159F65D30A7A318C1056BF638CD20BB56D8
6F22ED3EACC46F750F405FAF96268E80A409CD8AE0F36B68AA8C5FD2E0E871DB
D2628AEC086AAFC9F04CC93440E1A8B0ACC1DCADB778837360339A25C08E3B0C
E768240F0E8CE9FF939E4B1A6365664AAB69761B7A9C7B95BD29B09B930B0D82
F2C39F9BC0B94E56C48DCB22D8F0CA6C633BE68E5977EB3D88103E4230C6A08B
B4FB0CDEA7D44636102D47AB90B92FA42243943EB3E77E6CC38DEDBB2DB8BE77
78936B70FAE12EB1E2913B766CA2BAC3FA555CBADAF2CBF6B7A216FC93470554
2C841542BC1FDB26DBE389CED193E28A19CE9CBA64FCEB47C4D9C7891741E0A1
23FBBE971ED93F797C02EA830678317452481FB78DFEFDB25A3645AD3979D2F4
AA17C624CAB35B85963C6DED262AED5DE92278F31B2E573FD86696D98800443F
32CF695BC103A3ACA687FBB3F42AF9C89123C719005844588667C3DA28AFA523
BAEADF7BED1F3B5D595DF571540D0855FA377DFA6880F525878D6A3D1980C7D1
05554ACC5D07ACEA1E0D27664F6DFB6EFF878D0A68604565D0BF75FD8BE023FA
36D164B7BE25F9F811A466CE04C2CE5A774EE3288A245769B7ED30FCFA10230A
D6C9E809341BF5E55E58F3288F7298D62092922F07027352BC7C9612CFCB7018
B3394AF7EE7076395E67C3CF9B71BE069AE6C6C412F86A496E7C77173A0CDA0B
CC46683C239700CF259CF668B9F5C990DE3196B84BE792F51E17583FD4A83178
989638A37897AA769D74E0B3A299DD94B314F9BAFA7217AC70D8D9D02544A545
F6880EED34399A835514CCB97938F3E012AF4D68C140C6CE231015D93CEFC522
CF56EDA6F3147B3861904FBF8BEE6DB3D2E71479CD3A02BE03C555B0808D40B9
53D2EC56876076A116EE7E81836676237F88C519F8DBF39EC35FE41D78CF1665
E3FFD09C78FFF428AC27BCF0318D0849935822699E31F5115E7854A22F46951A
51F24526F7190B18B313DC58AA2EAF631A48ABE394668C6F1CE9AEADFB56116F
FB38C388F96143BA870537CC8B3E5F2DC39F9B930ECC63475BBB8C5F9A45218D
E05C4E6F250F6E544D6011F65EF4808D3D0158097CDB6E280AA402229A6B78E6
AC615258668BFD3469CD663592BF1214E5EF1C116C4DB47B805E2F60771168CF
79CF10DC2DA8F2BE94869AA570DF2AA5852113C51CFC85C1E41516CE412CB410
BD026231E22A9CD0F664D76D385CC1170476B17BCDA45C640C583F16DA207028
0C58570A966383AA9F7CE59375525369CA6A559BEF0E05F11CA9C72A278C045B
1D2572EC08DE1424D2420D550177794FB3DEBEBE9E4105AAD34FF119AB2483CC
A034A95AF0B24B801710B398D9E9A95138859A819011423AB5921DE8EAC56ADB
58FB18C27A41CE503CAF2E7EA6F673ED5F34F1C1D20B609A152EDECFA26872BC
3C8C802A1517D9C6FDA3474591F19D573EB051F551990D0331B2DEBFA31B5010
3F6332290E522C15C69352124E1051A715399BBD1A6D3704BCBBE1FFF89E56CF
9C3EF605898309C7C3D20DFBFD10DF5FA30F409A76AE8021045DC09C95C9AE4B
4EF735A5414D985F6F79100E7045B930267F0EEA9BE820E13291132AE91118E4
7B8432BD1AD7A9CD912F2BFF83A2C4705A26FCBB7F8E45CB2FD9AA2EA98E381A
01BA4C4E31747123F20A0A721766F9D9A6769FF80B400B1EDBFCAC63CE15283E
72EC447BADD5BD58B053A11BD770399E31FB3B3D856FBCF6235BAD1F0D38E26C
3518FE6411F2A5FD4809C085AC2D60FA311DC99B9100C1A59CEF4C877053161B
59682BF5F2D85F2DA7EA0FE603D477F6E80DEAE0F250811BCC646D8CE2956C78
B897A5000D73AD32BD99B92E6E63BF8D79777859EC0F7FAE47F5A0CA878106F5
5462D3027DEA15E36AACC0E7349C8E60D6F2439E2D50DCB9D96C6C20D11266F7
913970C783EF6D587F638339D1E89A4878ED27E515FED0D26FEEE69602B2BD58
D146C077FAC71FD55A5490C89142F2844CB7E6352B01A448D4BD7A06D8EC0F00
E69984EC55E0B487FDEBB3F7FC3F4093CC6E13B87084E461E23A4D6862F0EEA2
84DAEA8343FE913EA90B9ADC7D025C2B8EA3689D75AA38B5222166C447B82E75
52DE05711B3883394BA9D683C161A48059A0463B17F3DFE8A73B46E913B99D2A
38E7FCC667A5B810B665519E7E1450E00BB9D0279537763ACA5F131550E83404
04E208B9C0B0A118F40332BDBB431AA70981E77AA5E5E76F43E730D9D3D047D0
B3EC66EF1D37916398FB8CE955E12D8A89ADEB1AE1EDCF91BD788D8F261962B4
3870D5928D160218A297BBDF6B6D329ABCADAF9C19EAC5F36E1D210044B6EE67
81817CB502BE94904916531564BAB2A6BEE21B8195CA8C2C239AD3F5E6367118
DE229885DE2FF1F9AAEB59A728B7F0E9CD9B977E0FD77C2B28FD79C68B02B494
2C1BB525143CBC8BEF7F9831A0E0A137ECC98C66873C49DC522636D5B7FB6EF7
64097A17DA725C3AF90CF297872CFCE56CCE1582A3A05CBC51647CFF73CDB3B3
8CEDA174CA001B312141BA6CC5B99C850C4A730ED50DB3F2F775CFFA46A74C3A
092A7D5B7274DB52066B6DA2CA24E020A0FDDCC0498D74594AE3ACB0E0AFD87C
47C937209B3DDB4F2FC6DDE67D9ECDCAEB8255FF96F06EA28A98D40DFF9A4EB0
9326163E0BE257546798FC4EF75EA4F294EA8496D032ABCB2D78109875A1E454
EF28C6D432330FEE56133F3C323F865B46D03457D17C81740DAFE000798A2787
814333C50AABB6966275AAE8D8CBE9ACD7740ECA4A47A985E2E16052A8C0A764
66650B00DCAF38B8C9332CA8DC2E6F45197653F5A7DB9D25F0BA34EA859BF991
D0354BCAB97DA3AD0210C33F871D66D40597E4F20CAD0CC21D2C3A11820AA663
1D8DAA61F415A48B0F77F4A231F76CF009FC101B4A0A95F9E4E435043FE03050
AC8844641B1DD28CF1325D3CDE7E16731A336535A8231320B310E52436CC4611
8131021402F19CF7286586D1DE7A371B537C1630B06C33F7273ADF8801A3A75A
21C5E44E033F2BF6960992A383636F6E73AA9410881AB9BEEE451A3871DE4536
ED469B863B655F084C94FC6DAAFFD6FC5D5B523FBF1058A8907ED4383E343147
A45701BB16F608B9148CA790F2B232A67E71C893B96FE305B9AAE0C5A246A6B1
8E275EB0CF680A06BB8AAA21828F98DA44728B485BE2CFB3AF841623A121D2D3
EA73BAB53FFD35C67AC9C3B91DF9A4D1BF35CA6A8CB8F15F9144E36E456648D7
54560459B7CEC323F8B488B6F5A8EF8D69FEF91E13323FAE6EAAC2E5ABF665AC
E1585E331A8F8B5AE06FF085C1F349215582AD71679D4266E65DE1A3A418E02A
8BE169C5D0B120623BDDDDDD4A4A3EA5B0A1FA84E55ECA7617A41124595DB723
ACE8B379456632E7FD1AA490E97EF1BD458DF08168DF0D73A1817FDF25DB83B2
72364E00602BE904C3104E28F1BC97F954526ED470061A1D580BF1F0BCC7FF3B
CFCDA3F50A2DCCE206FD51CD406098F09718B87F4D3D2A68B2366102ABAD3D8A
BE1CFB0A9DE45E663E52C1F8296D44549A5ACB293CCA55299C1B7FC3CF0FCB89
4D177FBBF1DA7D23111F9CE050A46D17DA14ACDBCBB6E7A547A5C29288C628E0
8F20AE2DDC41E023D259FAD30150CBBFEB1D3DC912991825B88393F92BA66563
61B8B298F5AD8541C707E88C117DCC0D93D513E3EF946D3FCA5B2C139389EA1E
17D5EFD54A58829D95A66680C9339C7F2D5A32252668776C2D25F4CA2B2F4469
CDC1D3648EF2F9569EEB91A95B06AF1B105524D0399B1BCE69A7FC64C0DD2326
B351F08CCB96F77FFF1961031A81A01220F86251A0A0C857CED149B20C1E9544
784DE4B5CA81DCBE03C2521964CA6D2D249929BA4C2D6643EE070F391890241D
7561153358E44F4754A1913957458FB78C6ECB6460A281A80F502523BC02292E
1D0EA9D8964E0ADE352E5C7E82DBAB63CA3B171E6A9AEE11257AB2DF361B2AF9
5849F3AF9E42B66361134916C8FC32E3D7CF21012FAAAB5E2837E315B5547BD1
FB64BE54A05ADE88FBF2D6B94F12E4EA3A9BDB285BED8323998156DAC28DD4FF
A619E7126B864943EF75ECEBCD0033111B4451A9ACC99D10B2322E42089693DA
081DC876A8168186169D71BB76457D1ACE41005A314344E385DA423BF8B104C4
3A87080E37D1D7305E7308D2A3984290DA1F431FE391C16E60AE53C9151DA7B7
2ABD919C5BE2F0FE186BD6043C9CF23B9B6C2A6176056CE5DB4AAFD345FB1CFF
4792BD162749C3142978CBDFA53DFCE348FE4827947CDD08A647D93504EA067D
21563F33124B63BC44D8E6C03B4E655BF2A7957D95FF01CAE1DC020E577AB8A4
EE680C5ED8C8CB4191E9505B336779DFD40DDF62F323A4622EBB2D09BEBAEE80
31B0CFF132F8AE3AC666C85D86A25E591E0531A442F63B6D86590198C5957330
A3FF5053D505D1698DB2175A63130FCDF172B811333896DC81CF23FABAC0975A
C960D4C07E4AB64B360AFFA4B589793BC051BBBF440365B4EACB0932EDB316D3
52B4D816D717AE899B9AF5487B7FEADFE2B7D651B09FADDB2CCB10424212EA90
16A34634CF88893EBF53D8D282F6D8847358A6856E3D6F3B11C1F343EA1AB3E5
96E20D67052F9107F2A18F70ADB7D0125C7326058030E2B5A9E5CDC20F9EF9B7
CB7F1D174B2E94953F541C3B84D43365C11B5470133F24B7EB6B0A4C88BD415F
F70F0BF5813D54D384CF892AF4BFEE6C45D4349305256ABFD5523A0CE70C4E6A
2E6A34DC95A52D4F1AF404E211AB3D3362FE2F81A38F80257890A6B6D9CDBF50
68CC6B6E5CE804B7463204E9EFDED7776124F9A2EC8C8C2E8D9D06EAD8954E85
D6A1E672DD1096784ED2206D80192C2787656B2A83D7D667D4808E9FC8F28213
E5C3BDE4B43501482B50DA21111B76580BC4A776DD86B46D526B0F88F5D96B30
B607DDED01318BC9A9C8A9E8D714B1A1D6BF89D4CE200573B4F25EA15E67C07A
4AD81B3CC862A675AD5B46D2B03929758B9138A49391D6F9D2F7FDF792C5C06C
1E530E96FAA85824C39E398363346E7C2CED3A99469BCF9EBD0491F249787F44
18A4A802B852FC51099532780C8F8B7409E940831CD6D08A28C8C9F9EB2C09ED
1C38C34B695E681E57BFF5EF1088EC186353B9C4B21D7A86F61DC5FBDF3F5EFE
F44E17D7E788181EEDD08D432C97B7CF7BAF9833CBD71A5C9C8207965CF783EF
CD286C4A69B2D48512BA6F67ABA560FD903432A3A9A54A710D942F8A6C4128F6
5484A823D685E103F25E1F42FFDA16D4A3B4645ECC5F4CE312311B641EDE7B07
C21A7FD2CE803A205B482B03FB11F795AEE3DFC6405AD73520B4A78AEEB96AB6
B0BC37A1713625FC6FE892E4C2476717C6A77397FB210D86CCFEA3718EC6D982
C26C96439392577194BE04D971C721A76A3B09ADF83D6F3FB82AB1D7E7359826
4523AABF9FA7B177315FB05E8304A43319C50BC682088D57629592378E21B17D
D79045D0CB167BEB8857F344D54EEBF46A3C36A4C792D1685C8D2A2CC5EB8C06
D81593CDD9FA6B3A09E4B3F5007A5C4CD14DE469F38E0F06360EF0D8809502A1
6F712FDA4C681B2E850B2C6AF698EB8100A8847CEAAD3690C5D73FC232347B4A
3852F42E5B4D66ABE1553D2FAF26EF405C4D00E4DD9F83370A2A1FF8388F7B9F
AE2D16C78DB978CA99B7CD78F3DE751E5FDD77E6B768F35E7566E858B2CC4E9D
D3BFC7614951CFCCB0BAA5F85DA68AAFC85A7FA1C19E2004530E8F736DDC5BE4
E6F286D27D731EE30D4871387A7476DAE2FC80A38AF1A0B3BE75E98F6E712917
BE7D4DCC8E5F7C5531DC67B70C5D841AF76E112AFB947365B17DDB1A85B9328D
5BF14E72341790C7D753E73571F3FB1CBBF390680C8614AF3F36DF5FD7E36597
96103F5B013D89DC6BB39B51F230448C09073A73F51F7E4AE79246673B080001
7C60791293D5BEC043B961C52F408C0C4DDE1AA36C332BB784E7C159A8AD8558
F0498638015C78FFDC3100418BD1CE83E9D540C5C7F066FEF89D9F1096586FA8
8B76E645219321E41EA5FA846C05226796D86CF4415C5B7136945A7BAE80380D
6CFDBD82D34A78EBD78B3998FDC5D94CFF69DD34A0A93BE91F9745A63AFEC351
6B02EEC5BDE3E09C2C63CFEEEC12351C5B069D0B8C6A16A9C18890847FE92008
A5DEB59FF71B33DAAED2DEE10380BD051149AE056AA2B7755C4BCE15B185CBF6
F362C146A2D2AB50D6835705FEB79025C1CA73F8E589707FB215F7ECDC89049F
C5317E4517E94A9D3E5CC7DBFA30295A8763F1B4A5CCFFD4B7A508F64FF002C8
332CB1E5505E7640BB2ADDCE62E56BBF35D257EAE99D627535F8E5ACB4A77C4A
614096A284A278C9D194AA32E3C58F8D7F803B5ED3382290691DBA3D105FFA49
D59C844204CC485B2C6409258DD84A9A652307B7EF8B7DCBEDF2FF5011A06D5F
3FCF98C8CAE1F50A8D81F244A01498B59AAD06E09E5C8B06416326BC9E7E152B
DA1C4D030F5FBF77FF2B931C9FE64A9AA6DEFFBA6153C4A2E04748B104D2FD8D
54D9AD246C5D6B452AFF11328F28A30EF625446D346B346EA3350F75AD6D546A
A06A2D78641424814F2BCF083E0B5BCC7BFF6D08F61C9C35814B17D84CF28A39
38EDEE01BC88437393D604FB707B759DDC5C6C5A4AC9E21CE0ACF1C02A9B72F3
C264E79717A5EF8237CA9D177321F9F6B14AF21276B0F2BA263365534F40CFC7
F7F2350C62A192333E15418156EEEF92AADBDE4FF2094B444A1AF803E9EA9F97
4327FE718F7E50777BF90A75073302BBE80809A0E934D63F193DFDD2680C68B3
01F3F440B7ACF7F73486DA4826CBD2C1C82926FE472415598E1470196F65230F
7B80B54EBAE4893DB857935C81CF7CC61260CF2B227DED699ADDE69F0BB3A0C8
69D720DEE0FD278EF3FE724AB849B4CD288D6AB731BD094687B76E2D4E16BFBA
C62ECA4C3EF29948A14B133FAC7C61DA6E683693241EB0CBCB1EEAB6E939167E
7D5D4F2D6944A68175A656514425E96DD970D81D4DE19450956E25AC33EA5F2D
B7978E8581B39E56E5A0FD31A849D3AE53F560771D493F83C8EAD6D875F8B1D7
A0A1EE3766FB9637DD6898F678844E4A0ED167E25A2A51D8331A045A4349F7CC
8F1D5D180FA2C10BB2CA96A7BBAA2A7BE60CC0152340D9B5D918247CFE6240C8
2AAF61A7D3FB6C48487185D766D187F588A061153A631D123B037B74F7F7116D
10592A3BD69A4FE8FD49FC9C8914C4A02DCB27989E0752A84FDFC5ACE6774BCE
7CC77605F93ABFEBD803E01C35504FD6537C14C426F6F84DB84A549211C1570C
DDEFE0028E125A9E89D8AC1890E5580074E9FA4B87601FEC1A6E5807332A5B25
37EB96BE26E0342E4165D30208448C93177B6DA960ADE0663431603335A8DD49
D99E769BD73857E4B8A10A436108F0D6B87BFF46E7E197D8541D72B9E0A20459
3388E8E516647BA8DE567D174EC90945404C580A08E40DA2C7842FCAED2E3777
3813AEC6F95B1351635D8BEDC382E4E0A6FC3A0C6CD232E26BBD455BCFEC7EDE
FC2B2D6C7F0C18639A13E6F3845521A2C5536DAA1BC807A135D7AE5E37DADEF8
D6A3AA4917F2630E1A57771D1E94A269173938DC242F0812442BE5650ADACD7E
601A6BF46D57B576A3AB64998A45B8254494C5DC53690FAF7F415B3CCDE7AADB
CF72697BCC9D14678F555AD63F2CA0FF6BE3B8CC09301BEF5ACCDD50E32485C9
4F7D4291F449E017A00E84DD26D1356B116DF4425CBA9757564C25A956EBA242
C7786BA7372EF6C093D3EF9D9BFCA6138FEACD5E0E0D21CD6BEE84155870EA37
05D3D364B37D0610685B8577EFC6A7177E512A02E4681019A2F1C34069E2C1D8
881540047B466EDDA8610C578650E9B6EA14BD49F329D1C66EB4EDA345525FD4
FCBB4E5CB711DE81DB9C1537F4A4CD704E8EAFC757116FE3012E01AEBF58488C
4FC28682534E57DF995F87B37C537FD5D25484B3B0ABF3FB8D48D04F98492972
699B5667C0D2D206F4785EAB438B12590B6EEA0E1A19CD139622317F5DFD2EFB
D8A02F137E7C4FB2B5A8ADCA103826093F27AD276C7EBDD514AA351598EF607B
E11D603F92B2607D41C302903248475DEA4E75D61036020AEDB7754226F422E9
551CBEF1FCC8586AFE88F80719C82B41676A4AF3E762FFDD4796342A5AA48B22
8CF68EE0032B1968EB88119A375D4C1120BA73EC097E978C1A3277A9E33B6810
E923D716119A9AB7E35FD7E5081A85A41D0968025443782BD29EFB5EBADF7AC2
1D9B88457317ED0F6CF9FF5A2907997EB273FCABCD2E99512D7844262AACE40E
04F2BC627789E7F09E077963B5017C7EBB3D29226084B9ABE03EF7B5D9A3B9DC
9E20AE49D3FE7B47F0B4C5BE36297E9DA5DB6B8E6CCB0B93C351BCDB705B0820
E139D55D686C7E96E0A14DD999B464B9D996437C978A252CCC767AD09AA9E89B
F322B2AA7037F55F05E547ADB16F56669A201DA41ABE02C6370D566B96C5079D
12C9D4F0FEE8731D378814FD3BB8575A607D19E71AF5CD302837BA49E58F8E0B
FD099D6F0A724352B2DF600A2268B35A13531DCF1743D6557A102442574818D8
E2E330E2FE5102B7F4DF3E4FF34E340EFEAA6C8CE3B066A7C6A2626635CD202D
49907330FB4CA25B5CFE5D573FB3C2BF3D2905CFFAE9EAF0BD6A61595A23B2F3
2A46B578F76FE7027B3CFB43CFEB594F2B05D180DF588DF93B6925100D074E11
C6D288042020E9DFF165186D73C5275BC9638D8A733D3E5905EB602687F0D107
0B27D4919792C03CA93AFC986C34C0835E5EF6A1795816E7C3081360CCA52463
59EB0C066678A94075C9A48FDE4591DA17E070DC8FCED3EA489CCE98D6396E44
A5667B7AD3C4ABAC3316AB259322226EE6A4C6526AE5D9916DFEBC66B2DE12D3
184BD3E12FD234E7EEAB5F38DF634D6D13A5689E2FBF58CF0BD6F3B32A59FE9A
DEB63633F1C21E5441B02D336DEFAB4F12CCA2818D6019FC1622A804C1238FB9
A0A8C6E374C62D397C3D4B3BC97F1CC3EEFB3E577C48B5548AF3928EEE93592A
6CE609354C2D51A2321554AF2252858B32B8CB3397338DE5C961B3AA70DA22E2
4F5D5F7DF0EE62FCD97A409E3AA30836AF4FB165FE08F16214F6DAC9E34FA9C8
6D8E92256042E3E88F696D4EBFE58F65127073AFA078F29CA500BCCEFBC89C7C
7BF1CBD87891D43886C5F8A914D883F38EF4131EAD223717E66736B72EB976A6
8DB4D503F271A9E25CDBDE8F162EFFD0DC69628217D540F8673345263FB59BF0
D7FD22BB800A96B2722961A3FA39B2B4830DA2FFDD7B721978DD641CDF0C0459
1120FFA2F13C74F4AA95AB062740E852B137500A6F32DEFFE1F82195E1E684CD
9C7F7303D3D810D4914B8AF9A0E5BB2185833ED8F5A2349BBABAC94E9F1B99B3
92E7569FE39FC6E8DC70B433B74131B549571402F18650A1E588234FE582EC23
47A9D9D5378725934B35E2E80EB89F4782D8F34A5DC8CEDCEDEDDFFC23C11D46
982BC42D9DC23475C397D456E05B2BE7BD8925D153A515079CC4F3EC104592D3
D38E10A40C93CDE4E2ECECB2A955FFBE9EBF4BDA365A0F41C522044D80EF4616
335E5AF1AE9BA5C543F4A1B5C4BF78895E49CC6FF69C287D243D1823009C3E15
4D9B94338BC8126131A6A4306EB0CE8E5ED397746F08AAA990E81BE87FEA27BC
D1382A83DC20215D19C4ED3E81846A8D10F604E10AD60B635D2F72CDB12CB4E3
0E5BAE26B394E8356F6C295B3A746BF7C326962725ACD7CFFA37FF627F4756AF
F88FF10A172C60310C10FC10EDB86786C8552127572A7A00C9A6E8795A982063
AB978D87BD6305E84DBF237C074120E9A595ED91541B42E478B67C666E254938
BF6A44706AFC1CC092741BA7FAEC0CD09ABD9A75856C0485CD976FCC99FF82B4
A73B2444CB6DE10F277743C54C36FB1E6FB57DAFCED1D207DDDA075A4B8425E8
038116DCD604A412FF23A2FB117C47F69FAF6894363B2114294E66864446DAA5
CE25911215112F268C69FA557DD87D25E83CA0AF91A866DC636196BD21704D54
1B1DBC252F782DFC48D7726661BDF8AB0E5026FFB9B77297F69E0067FDCA793A
1E9E31266FDE21B199969A0D6C120A6621BD68991FD5593F3197223C9950D7B8
CA978D6AC89C5D7D115D20015326BBB45A5A150BD977E669FD770003EDEFB74B
9BCAC40C589C79ED8809DFE5BBE7CCC7F6D6093495DB0E6D60D62B0F2F6DC30E
50EB9DCC214E61E8D1E091AEEF1864ADC733AE203F763BA905BA1C18590A9C8C
A124D1175381EDFE59BD0C37E7F3DE2BD2DFA545A711B2BF58BAB1D382CEC272
0CDC153B1BD1720380BF14DE59470962F632C45DE55DA79BEE02B261721845AD
34384F239A820E20864EA84119DF0B68525AB3089C91D6A134411D948AA2F90E
D6A01996027251032597B9AFA1B3FF320C672715B6FCCE554C22B807A3B343C6
18E5D060218601080A9395F9FCF7BD8F3CF67B93BE909C4403FE3258790FF1B3
FF67F4C95F9336883E481BEAB54023EDD9BB94E7780DEEA577ADA8BBAD57945B
E9186686583FA8B733579DE8AAE808C895A4B1A8A9D5FA08DD485C3B1D952361
F75B6CA0D9B4B66EEE85839038CCCDC8A77458E3291269248EC5989049760592
FCFC8615892C4304686401B0AAE619F7F850A8B7BE0C5B4D1370DD12DEE8DFCE
EA352A32E88742A2D5D53532D66EB3AE461EDB7CC7A45957BC5C6B1992738971
50D990BBB61011C47808B516BED05C8D05C1DADAE8F6D3932E15D629638EDE89
741C64AB1DFFDAD7476498A2FDFCE63F70B669768CC7AB6E79DA32FEC9ED8B48
DEE46895FAEE9A9CAB9E821B14F1A8898DCCEC3F2CC8D87939E7BE15D539B138
BC5CAC9AB89EF4E9B8905961E7C6928B4A4802EE340B1BE67048A14A8654219F
5E55187DF09674F324FAB81E61751AE6213EF1DF926ACD273FE63A16FE984DD5
FFF5F83DD310DC7BCF471F939D0F143540CA685A536CD1FF4DE4FB36D11A978A
1EC3203062681DFB3A2BEBF5913DDD852CE7E52706E5DCF7155D293660ED7E91
867553D12CA559E3D625BBEFBBC4518671B8D6440A282859DB641ED9F940FE4B
6EAC391163D68C0C3A76CBB82A5CA959440D18A5F1861B289DBC399B8750B554
55FCDED45FD58E167824952C2D7A2268104AF92926C6A8E6EF20560845FF806E
502A9D68C8776DB8001F8685FC95EC7EDD60506506EDE0ADE2663981D4C77975
75C9D319B53086DD9F4FA1AFBE7168DA2A50F5F7063127FCDE7BF947CFF3565F
70BFFB86BB5DB06ECFAE2165378F8EC2FB09DB3CA8EE884B5342D4DF3EF412EE
A1488622F560512DD5FCFDBA9199FB43D0B78577C2A05B4D68FFA0100BF564B3
DB31B4D4445DFC46FED61F219538D8185042F86BB762F723CDA26983146996DD
709A239A40BEBAF05CA22C94624084DA4815D56199EC8BABECDF11FC1FFE6726
AE7DE624006CE68A0A5888BFE7F399175DE7D08904B7A508E489571C79B3503A
52AD7577C8EB4BCC88ACBC5A62EA1F054D8C429F0E4559E568C7465E6DCD933A
FC7C4F37904B6F5DFC712EB3C1C003F982B905BD7D67725C83EF7119C2C4ABAD
F13B462708DA8F5C29F60512FC389917ACF73444EF91E44AC1A2D5AAE1CCD2BB
E06270B5A50A2C749EAF88665E2DA3C3490B8B4529805E0E306E95001663F0EE
1568903E4AB57D15D6C78153E9C5533E181B368CA08340FBCC7C464AEAB154DF
C2C08F8C1098BF71196B775C4AB13C2EE4B13948F568CE739D1DBEA0F7EBBED6
B1E29CDAD681F0A0444016A191133F19542995636B1F993002C653D0E082162D
13926D3FBE136A04BC4FCA63B1271C7CD8AA642B13AF7C2E28DF5904959122E2
00ADEB44D45CFE3E723556073465C30981210962424D9BC090DA2B27AB2797DD
6FFE8D8B8EC081349683FC5E1C323236F7159B77E629F307A64B286C02409330
317B4FC830F5415762F6313B6F0D8AD8488BFA8F1FBA7A9E0ECB0CB937CC18F8
2087FC991638FFF960D0D38234AA1C9900C092C16A47FFCAF261538F608C93AD
F044C39BD2A560B752BE17F0E768E0601144B6E3AF224B6029ED2F2A0D5809C8
FAED3FE5F40AC5A42258DC11796E8F834E7FCC4C523B3F4AF3FE3594AFE83C60
5102C08CCB046B807975E69C127B630E8CD6A2E4D13A42A534EC7EC672D7560A
D5C0AB3F8E6F08BDF26AD5A9DF5CEB562F68C8689D5B67DD98A5E00AEF1C2E77
ED22D3BE479644CBE0FF57D5829745A76334B97295BFA4099D149EE93FBCC627
2AF549BDC92F2BEAD105A169AC099700E454C9B0FAAF6F2A73D5ECDB01F1DAB1
66058080D42F90499B415AD8AAFD99AAA7DDD91B1CBE1F8EAF96A1FB9419487B
C7A82E60F8B23313A4F5F3C628A3AFABC5D0922D917CDB0ADD125F3A09CC9568
468579E06CCBDFEDCFD18369F27ABB7F266E3C71144E5291FA4017E674E4E3F6
B8002890F8CC804495E9638B25282A209E9D8BBEA3ECFA3ED46C2DBA5CB468FD
29A4FA8C83E4AD433C084D0AD5E2164D50C910B8CFF5F16FFC043540E044AF93
86759E047307A965F5ED38334010FDE34C570D7BE76A496A58242F51E7321382
AFF6EACBDC8A87EC94DB4BBBB4DE6B4C3AEE41404924B3ACFD19DE22BAF340B6
2D5AC2E94108A856F807519A9E8D79AD6DFC8C619CE8FE1EEE3B9FE2203DC6C7
5B2165E5581F3B8F165270E90C727DB9E454670D51D7F88218D4E032AF808D30
E08C4AF6C4536D1C9FDBEE7B1B280A3260E9DC22081E65320BCF3099187ACC0F
680A66A818B23165BB4DE936CC3A4BF19EA1C5D6C0D79F9DB3B28EEB54292D44
D3A7CCBDBC747B40045F68CD1E40099D9BFEC73588593FD61E5A0DC97EA2E4AA
2D6C07BC2971529FA865E7B124F886D8AC8881CED68C7E9ECF4FE402381E958E
99FEDC664150D66C7614AAD9EA02AF73118B778DA4C7012428ECD18DDA85175E
3CE67FD4A6528AC359C73A371C859E3865644E0FC66933CE0D60F86764C1F529
293EF880D1B9147A7CAA0B6C48D3ABD53A40501212E2C906E04EBEE5F8CEC3FD
EA36B201E774592CC4056B2B704D541B1DBC252F782DFC48D7726661BDF8AB09
6903AB1256EBEB0D9B5DAB1C7D96028198DFD7488D9566644AAC54ACC206DC00
F5B58A70D546BDE99255756898830B30F96DE8440B8B6C0A4A50043A59F3B636
DFD4128A45D768BD28D6A2FE2A4184C7771A108CA7C1D254D8E288CC6626651E
D6388A1C711D875943A84DBBC24C1711CD31CCB7C0C7F7B5FBBFE76FF489DC22
9E9D659A24395BBF46B92CDE3C52068336290D74705098D4582DF3342E1E5D97
6C33A4C1B9D5384F70ABC8F9F74EC964592EA3CCC0066047253D42A7FCB3C178
0A0C4E8BD600D07D8A995E5405EB5449AD8CCDFE6615E39270C3A6F3AFEACB8C
621EAD3929CA3359322E25A5E9FF521C76D4AB10EC9C9749EF2864DAAFC2B488
6C6E9E9D214EF74C49E55CD3BA66EA1C024FC80466EBFBDB0F04B473097C19B2
17EE2B77300EFA79F5038C2F8C18609D8770C72525A5F5832E0D2619B8C1EC00
24EF9121CCE324DBD5304CCD9239790F6B0B3DD6FACF052D2E1C0EB34672AA78
A7075C6DB3F15DF83E0185CB1398EDC35E34404FCE1CC6F1EE5E5EC8E91FA2E4
FB940228C74017D2A82AB724012A9DBFF1CF4487E0A932F474ED91EFDF386E7D
B94943364A4BDCAD32202C7F74C30A4646D8726DD73FFCC34AADF0D5FF99461F
3A9DA8509E7EE6AB98B4BB88F6753A46EE901940795D0F15DE5A23420BC6DB59
314AE0FE5C57BA3BF562260792EC1857BCC050B841774BC20AA88592DE0C9EFE
0C9232665F5E893D8500CB57D81CFED36567F652DD43DAC6C32C9548A6F7607A
1F49CA66CB10279075B62842A62135305EE39948429FB62ADDDCA6F84624EB07
1D57E293719487CF5D51F3F8FA688FA1B9F5196B6CE08EBBC0C484315EE485A8
714EB6009A9C06DFAC8144FD672DF548C439A883086F14F419820F312F34B8DC
BDE30E5E1DC183CA471A63C5F45A0225ED905D98AF46BEE7C595B123A580A6D1
98644049DED12F4BC68666EF41ED4A22883CC403C4D9B3656E83BF407D06A0FF
2A0929546000672DD480C23948FBFFCEC3E9374E5D2A1653592268E393BFA046
05EAF9BC3D8611E3607832D6802A336C627BABC4737FC72F8F4F6BB7D73551EE
33D5AC67D413E79CDD37FDB07131FDC420EF525CC0B5377AAA95412BCB80AA73
07A1C978F414458F9A7EC07EB5F54E9ED3FAE75852C3BC7CBDBB5EF23FC98FFD
BECC7BF827A380F32B4934A768F89217A3DC055A807F57BCD3B6AC170C7C563C
C2D2EE272B0674040D7B82B7B40EAF78A6164289A675DFE39DF546A3BFF3244C
90733BA17E4346834B1361AC326E0471866927E3B6123D75DB1F5D1B6A2463EF
171CCD22DCB473B8173E8F9133A6D45FBB5E17CBD0C05E728F7ED87EA484A596
A6A62D6E8252305167A430D56CFE8FC26805B455CAA9BD0A2A3286810DC211BA
4A66717F5EF270A816607FD71EA26DE3B6A58A3A73407018AF73FA75BA8DC8C5
0A59E684259BC3089D9CC68152679D99FD6E52BA3B72784952D6F078BFDFAE49
D3FE7B47F0B4C5BE36297E9DA5DB6D604B29FEF6B211BD4356914FF31EF22D4E
33B72BD8E8261897A02EF8DBC323983FE3080CC0BE03329FB9B408DF64CDF685
AE08E368090C56CC9F59ED573A530FEAD783E1EBF094D3B7F6541DF57D2C3DD3
02EF1A8522595A839214DA56A83FC9AF59940CAB5680A26E061D2F6094584EEA
D08ADBFAD028161A01E97B0A9DFDF088978B97B923495490F7D4F3C059CECBFB
F7F20EC5431691AB86A4502EAC2159B49C1DB34B2567B50D0B0F2BAB32DD9843
C560E1F28340DF37AA75DB61EB4929AB62872DAFA2D4DBC37C2FFC1EF76FA2A6
9C9AC171C388750C9BB165F79AD01EE5ABEBC875173CC3CDE4C4D73E774173D2
127139BF2645040109A3D2D98CB563D4CEB5C030A7D2F1D18874F01B52945FC6
ABCF3ECD8410335AE6CAAA4F72AB17F8EDC3A3B494F3809BC20E03E4DA37DA7F
ABD00AA3330D317A2CE6B61F2E522FBDF3F7D10C8785024E6EDA735590E407C2
CA961F03D1762ABC486E717CE9A1DC45274DF89B6FB3948163350E034A3CFA56
8DD26363E81BAF2CE1E3192849C4397A469C12B20727A4CA38A6CD685E92E3A6
7CB21D5890C62CDA0789E408523360ED8356207629286D48D6529E15ADC93E62
1833FC3E90469BD13AA482E6B4F79EC50CD4ABC417F3BA55D92248B51067A9DD
415F312D653513ADE6EDE9E560BA16573295F14E3289E6301D04E91DD624D25C
17C01C6EB24F8BD764FCDA08167AD025F24591E5C2F51F98C01BF41ACD72DF8C
42C7EFE3A8D63D2276C4236933CA08C51C6CFF8FA8B33B7CCADBEE9CAC7E77D7
9BA760EF4C53A3C983853A5D32928CF1FDFE2CC8A3BCCEDCED8FAA3B94D43153
1499F49D26DB6321F2C415B3480FE85EEE4795AFF4DCBFFB2A2E27F48B2C67C6
CEFAE589ACAB962ADB405130B8BB127D41068712CEB8DC2E7D3A6A0C0C9B2355
CD7F4F40D5891465F222BF72A373F0079E75D9FB730FE225D6B87099B5ACBA5C
72A71670B10959B8E6CECC10F110B2ABC8A3C355001DF77ADDFA843E5BFD60BD
A597FA7CED48F3E449025F5201A3A7DBD3777D601CD43A6E7B2137E3E855BDD7
DDD0EDB2042202D2B861ABF69A14FED1809C269CBA36BA0C7627630A9B04301E
65E08B7BDE43B616967A0B57292667580D72B8B6C26077F84D4D40D8472BE995
EFF4A7D33AC0E31071AB77E3BFA05D65C71BFD6EB789B718FE5F389213133727
440714E9A35976C161A248BB30F0593A9E33050E59BE128B8315F1394A627CDE
24E04BF7B32FE6CEB6D3CBBB378822CF2D66C8E030A857021B85B30886959C47
547CE17DBE63505319323CBC4AD424E8FE128D846B0D835A7F3ECD7BDDFE60B5
1F80862C3E2766154067DDDA5E17650677FDC4BF017E780763E889B13FB2B9F5
6537E77E7BEC314607B404DDC863F27113B024BB2986AEA92215A8015252171C
713B12D8C3C12AC3E7A9252D8056A65A8445682D8FFBF8EC1BDC9F72CECCFA54
30369230078A8DFF6420249E00F57D0096EE45A7C742269CE4100CC195912732
E9E391372CF831B258963C4374298E4C7CB0CFD8C21BA8B556A7D3AB2BE31C36
2B36A6E479006A1615D90A73262337A8C03A60C48C64F23F85A0C92199CF745D
C7DC97E8213ACE2F3916D71C99C312BCE1CB7C2B0249F28C37C6EB3E34DE35A5
26038487F08ED263D8A822DCC53BC77DBAD2747952F08F4003FA6C57B313B26E
CA109A4DF5896256C9165AF12FB491A78EF81E7696532224131FE5987DDC5486
5462CE44C68602BC836D82E1624541FA4CC2935DD1D5B2D70B89855C374A5DB3
2A59EFAA7B39C7A80EA6CAE0F1EFE86776FA2C7C4EF2FEC06E8294A4893F704C
B146ECE076DFCE4FB2BD8B6FB04BDB8EA72D2C4CE24A06C2B3C58C77C005D243
60D365C263ED3040EF672E7B0281012C7935297F71EB9CA2CDBF2E30A8B683E9
49A747F2B0EB4B867F41F7079D801B8D685C8BD073C4451A79B93D434460958E
FBC1E0947155F737E8315268AFABFA3B9C4E205884B4ADF0C259AC744F13A90C
BC25E0728CF06F370412B02585CB54ABD44E9FAB394F22B25CA4CC8F4016F572
1AECD116ABCA49C239ACFBF2C2C7CD5903D20DA2D9ABAF9A8FEBA8AFCB76CFC0
9A5DC24CCE2F3295DD579450BA1EDD6D44314D39FEBDAD84B61CEFB8EB2D4EF4
9E380BC2370FF4CE0F71D8402CF292588D074C0ADFDBBA12D90812D32AEBA54F
E4AC07560BA0E091F80038B5D7034525B274EBDB10D0A51E73BE5F7373503EF0
3918FC4E00A688664BE9EC7E9E154132E1585E972E777A363586B066C17CF431
24F59A7C330236307128A0DC9DE650298EB0421C23B97862BA39E8E12300E4E6
27D8EC039D665A3C03D806D194542F49861CA93E84FF757C56B627F5080E7246
E08BDB454050FDF48AD8723FD22B79825BD2E58531BC8668AACDCFF70BF7700E
A80B1D3CC545DC9B357B8261662D75B0349F5689DDE80E782FE6D7979C72E10A
5D414AEE97DD6FD6F33AE6E8BF2C3DAB0BF069A854C87012B26032F80BBC9995
7FC2E08B5C5CC015C3A76CC91D4FA1805C1D3B3B6EAF05A5C46F786E198F27A0
0F8E6FDB7CD96A59579632D493B004EABD4F52105AF3153E878D4660CA92627D
9F250C41E223B688B67F4E77ABC2E03DA55A3895C3B9C02B010BE559168DB1CE
78FDF425D221D66B2917A24E90BAEB4126E9FD85BEEDA88EE28EF5B578B5DD78
4BDFA095FAB3B5A089DCB7E04631009EE358E45CECEAE54A85CD2AD795EEE27B
5EFDEA3CD9EB37E47BADCC1E0EEBCBAC11F2AE5C7A008D5D6D8FB2DDDE41498C
C6B6D44366F3F72D668127F480DB722E014B646C4EBC7B0BE56148AAFCAABF7A
ED3B407C3A0ED107EAC60492CA85DBF25E40678286449B561F1ECC3C68878C02
9F4827C2105CF569F0262FD6A8F66C55F6C3A247E0B9DD9B6360DFB0679EED46
413E58129BDC2C03785293A3E5F4FB7EA6971620060A05CB8B843F4DF619F3F4
6D36593C934C48276C367E859CDFFCE5120B219EF499F201EE4A0C90F00AE0D6
D5A6787559B2741F69221D9A99A6C1666267F419BD326D830BF6AC0D063C7154
914D7C9D72ED7C58840D8AC3E5F108C0A86912A0754B59A17381840DDF5C643C
CC8CD9BFFA80604DF35061B43FF34635F73F6801A8D444C47FB698D76C578D00
9485AFF2DB92C2F7CF01B3F2F775CFFA46A7CCD62BA9E1D80954AD98C36B1956
4DB840E2BD8DFB41667EA0D76981F21EAE11C4F154EECEC7C0B1B4221621CE9F
8D68F8BF5864C101C6EFC20051017AE15B3A6FDF09DBB7F3F731142EC6A3DA13
5C6A18F165314FAF18EF10D9E682AC4FCB2FA0E9E767F3B1FDEFB042DCB5E148
B3E45A7806333198EC195BBB2FD9DBBC158618BF04C375EBE05436F5BB92F714
E4BFE0D7A135AD150A62BBA417FF230720007B8BA40E0364EF38E6A9955C7EF7
A039525B7357CF0923369C96C2A59799EBE964DC476B38DB114E85B67E0CDC4B
98AAA3F52FBEDDF76F1CD1F79E5A6C6E8F011C3AF0E874BBB57914D29D3B5948
58E96843C4DDB99AFD10BFF904B418ACCE58DCF8F68B260A1AA94FE32D3BD04E
0D71808FC4D3891E156C0ABE147C9F4EE52F4B02A5C75484FC4DD9E2B7C8DF1C
241030B68FBDBA63C29C3A604DC9E8EEAB50A684882F5AFA6776BEB4765C6ED7
0B6CA8A22D765F00D47B7AF675CAA98CC1B3FB81DC7D3C75151FF72CD29057FF
0DED6661CA2100B0D2BCD3586FFD95A845F46C1EAF779575CC45CE67F2FDBF77
626A7C0856B054068FA85B0D95CF9E69148CB8359B91D223E3DE3DA6A5AEE282
59DBB72448B644681CC13A10C8D2AB684D07218E3A1DBB16CBB2324623B41DAB
9977B3844DF8A686DFADF395E7F8DE0C6CFD41439D467EB7032503BAA62CB7CD
AC71EF3C0E3D6145D430E4D4EC51DD68E391CE83B2875BD0F593DF24CA8DF204
8E0E35A39EB6EE412F54DE75B36CF42A525B7B47A61DB30E81B11C337DED862B
A6BA7EB6D5F7FF91060D433F8846F455FD6660A2A10773D129AF8D7838435D8D
2949BC29477C7FF86C250D15FD0020499D19C4F1BA9CB8B02A9999352FFB3FBF
38071056098AF6ACF78E43E87C74DA7728F5D23B02171EBEAA69D8704BC1F3A0
11B67DDB6DCD3CAA311F1F7CE694477F749F82198FFFDAE1393586EFD2EE43BA
5D9A50B153195536AE6A6E83FC0D04CA55D146BFE039D45886741463E26AD685
C330FF9B4020A256C1B867DE12468FA4A0EAF113D7DB461D274B28EBF428BDC4
829EE5C4336BA197985EB4CA7A5B8EE8753162AE09A54C06AE936B708E7D2BEA
709E1A066FC9928D9C8E19909F71BAC75C857D6CB0808BFB75C8268B3819DFB4
39091E9EFB030FC62C107B183F1387F03645244B9848559FDE08E225B440BDE9
2BE7C83B43F4DFA3B278AE98D88D30653C66F5EF35ECF508E48CA91EB94C710A
5A931E464BBB17A996636A805B9B90A9A7A38035BC40111250442400959A62CA
CF58C835CA856CC9FDB88C51B009070AFAB115C5FCDD1863FCA55242DEDA2CFC
1099B1C95A296106DE15CF1B4D769253D1E914FF9ADD9B3C8745E15C01290269
6AFD064FA62135D7A1E7162E501AEFFD43AEEE9AC38AAD2250EEF834D18D7121
F308C43A9529954572A185F24287F5084CCC7FCFC92376A501426AC6E3EA1FA3
D51AF49202DA91F796C7EC8D06CBE1BB5956D642BA0B2FBA342B1DF20E208E24
6C56FBC64BFB26F9FA7CA1CDD32145B297E9B6E67DF9E67945BB1607D323634A
792CC33EDF1BC3602605E91B0AEB5E669D85B963F62CBC2B6DAC4A600A144502
EC6C0EE3C81B9415DC5805BC029D41853B2E785D851C737C08709BF1AAF6841E
10876FAD5BC26D3B61FFD53AC81A234EA8922D9DAC147FEE61C68184F3EBEA20
A72F11B4B5841DC1D3808691B578E6B2F9AB53051CC5DB7EC6B18E270AC63D41
B8F252737A52D262D39815D6AE116C47D9DC874A173734CE69D708E10DCBED2C
D5576DD8C42DCC9BC4E939F934254C531C2B5639E91B97483486C42CDE2CABFF
6D61EDE3925484E3FAC5CCA9CBE9617A26DB99F6D99CE2D37285EA3491A351A4
4DCCE13FB636F9B04F3634894329A9C64B28681EE8A5B757F9F91FB918559B7F
018FEED03E4D49FF241256193C95520E5BF9E08D0F1BC1D4ABB801611C35EAB5
81C83F8F7F1AB6AB8021CCC0954F4A4CB531E491065D57658C87769CE18EB822
74BCFE2E9DAD577B66232B3192CFE4C5001081DE16433B664AD0FBCD335C4F7D
AF9A7AC45F38BFBCCCC899EBA81175526D2DD96D712E62BFCEC18715696E3D46
A7125F364237560ECA2D6D4DA2BDB7A11E6DE6A0CFD1CF5EC2DFD155FF5E1397
151D12768682F390D05657267008A1A6A06844FF770C3E39B771AC43C4A2CF6E
92D7B8AC88FEA84D888A79AA61E3FA41C753FF10C45D125D6D8FA13F07CF7AA1
0FDA592A4DBE65CC5365D8BA1909E68219FA2E22646A2E1979C67F8109FC141B
B4920A38D5BE10DE4E2FD8C5AFE61D68B9230ECCF303F9F6F688990919429B21
C62F2B7F4833572DC48559DDF19EC5D9BD28E14DE2B5747B80F035A9CFA5F137
E009F22D12B45A7607780AB1607876290F3F7DB10A30FF2AC6F9B9F851312236
F3CBE922C16874DA9D9504DC7AC275A55575E88AA5F16F7BFAE034661E8FD89E
08C8CA250CF25911F98E9D1C7CF02AF662D513C6DF6C08E57EC0555A814A38F0
A6F3C79EE602FF70906A2D6F09F287F31612322A325BEF16B1FD96C23E5A3EA2
03DA58DE056B7B0FF3293F39C3EAB5DE0CF3C4F797369BEE15ADCC7FF3843619
C4DDD44A995559B145D58B26E762A1E0EEF91AFB70650949272124D76A15E1E0
D82417FEC11511632BAE4E471F6CECF5CB681246D5B269E050AEBD8704900595
AC3498F44D7048949BC4CA030CA173F632C384D4B4DB19BDFAD3B93787CE13F0
F375B86826CA1A3B1B670469EC6CF57A1A00F90F25D6ADCF5225E537266DF9E2
729F08033A0EB87FE3614BAB803823E8AC600C4DED19E2BDDBCB6D59DF82986E
9A5850AECB69FAB487AA75F31F8316F621EB08E5E6B81D0A3CECB71EF5728B36
54A2E14F4EB24E596BB2CDFBE0826C0B6B7BC7ABEA8A82786499703418A1F0D4
8AEC9032F1BA873A0518AB3F64C61F6C48CE942285201FC213A55B99B65B9B80
0B015E80DB2C9CE914BFF64777F8FDD45418BA7DEED9C3ACAC1F7C1C713C5FC1
60E6609DA559E0BC54632E70F5A484A9C99F97034879761C40DBE2A9AD81F700
2A27F2EDE3459E49C2701CE159707EA00C3BF24A9F25549196089F79E7494DB5
3F8CB26A8650D868C8F663872B23FD67CB72F491D038A408AFE8FAE57816B8C0
449CC173BE76A2E3BF5F7BE0BF1BABAF9DAD8E5C2C3132B45344030C0B4CB9DB
C9C80D1B71C3CA57CC8CB5FA636890E9FC358ACB084686BF5D3FA8ABA4302F0B
796985A7EC5807E3BE7EE0CCC91597D3714CE97F51B3569F97CBAD6FEAF52E60
F00F9D37D2A93353BD57DA6B3B031B0608A63E81C976266C3DC920559EE4F734
96FDD2B58F8B140D41A3E3BF98BE634FD17B2A2F4306AC9C0E2C687D1D9ACA2D
39CE55BA163B3830C989DF407911AFF7F13E409399A126F2972B2709137B3801
A59D263270E7C6E74CF5C798133E3B73AD31825806B884CAC0E35D31A79216FD
8C694571EF061F4DC94FFF9F09D369E3E6DFBFEB90C040826EA6312F0F3693B8
5EA7ACAF7479F67A010D4BCD78BAE1B1255B139A4B50B093D58C17846DE6D984
BA16F6F1C7F336F597D22184A553B7A3AE81F79AA60A24BFCCE963F89BA1451F
39C3A7752BD478B2CDA3E6ADC0D7E0E881E755D62BF45F372676489823119D38
22449A46D7F816B8B862BA968FEF0DAE1019366D30C10797DF4CBE72DEFCAC98
355025CBA0E01E94D6BE0D28B6011DD86FAB15574900C968832E8634C8713601
89C7CF8ADA0085E2AD58AE7E5BCAE123AC4D7CEF6E182077C1220C85B0781E59
491F326DAF49224341ABB0748FEE5AE7C8C1E88DD15F978F656314D34A33341E
E23438567CDB0BB0F334C1DBB454B2CE77D0D30DC8A162B40D7779B52BC69579
43FB5D0628C634F25F3C68C4C40092BD50A76B81ABD3FDB86ED609CEA2E46F25
2C7C7C229885997D818321B3EE726C661C368400DBBFEB56F3B9C5A52B60A36E
DE79BF9451CBB78962CE0387314072572E95531C6395982E34E9C0959BDF66FE
3A202E3BBAAEF0DFEABC4B7AFCC50CABE6EB1D7755F6A24F3C648FB2EC6BE4A4
93CCC0603B7B8792A2591A9282D7420147A30202CC95AEC5F422D61B09D6B76A
1AAD42F963A33ACA623C41DD3F999565460DD6DA231E0433928318C7B774E6EC
83878CE9C3969ED77CD6CD6D44F8F69CA4B90D3498F8B27C6EFE638549E0E441
A55276CC09F6681213B26C3E31395A65775D329E93C5FD2073B7232D8038E07F
9354285371B63412DC49C0DCD4CE2042C83EA8D5947F3F947D8D8EE09FD522CC
6612548D2825592712CE89C88FD2C88984677B0E582E32EDDFC118977B28A830
ED9762AF8C577BED0798F4209C5B8592BE056026C8C5391505091A434A3A19CA
C124561650FCC4B0F0FE41F611AE2FFD7D88703C8C503CAC8EC194852DA9B819
095EA2BDA747E870CDDB7F0409F7E6C345F8C525E2A20D97C3A0C468FB2535F4
BF70A00EF11AFE46402BF4B9CC3124D951AA227D0E15285C599631DF173F0000
3E01E9CE00B1D69AAA9200143DDD543E621833FC3E90469A231490D8D7992287
9682A8D0D249B98417E234A3D432E9CB56432A5EDF12E3C0B4B776BF12554A9A
FF313F7E8686802447FBFFC7F38EFED2AA80791D3838A6A2971889E8E4587D91
4EEFD3A462040E7321F4E1B75D1054FE4754FC78BDB594803739CE5C949AD55B
DD35E02398D7527C829453F37F722EB87F27576C44C75C7B52E355DE386E2A72
FF45F35781461FFC94C69C62018D6429EAD8B7F87627F929FDC37141AA375205
EFA304780653717F1B35DBBA4256C4F037F6F37D978D7F85C94B7E8E426BA238
743695EEB9C7D3D61045E286DF190406401006FE080134A789D47636B034AAFA
E9B67A068518CC042E27426B061B7A012D655D230D944FE446C4CE10EF9D2597
193E8756DD66562B6188D30A0508F1BD2E06D04F81D49343D8D979E8F2184A40
A6537DC7AD15982073C8566B3D02FFE3024BF8CA99B6A46D666F09C8F83EF26D
D9CC7A4DB07DD2708DFC10CC6266C3D87FAD079E563372321F9675E87B3425FA
A062167F18C210CF4F438EECD4861F41B26480FA1619FF3042D3E369695C3D7D
63F12AB50A10F1A3A8AB7FC15623EE305E63D8B842DD36C6D79F4BCD2E8E911F
98C6DD3D2D620034A7F203E4DA37DA7FABD00B56B1B14925D98DA373A781FA2E
806348D819D9E5E0F5AF242CC243EA4F406B2DFD782A5BE77AFFF651CC1FC7D3
5D83046F09A49B4F450AC32F57BB07B566D9A86EFA25CC4E1CD102A2D3952ECE
B87A5DC56491F990A9480C77A1A62B4355E48AE9EB227FFEC63AFAB6C4C03FA6
A71FC346A14F3E3107F9A86B7A776C63DADDCD54AE07C0BBA6E3765FE1E539DE
62DC072A34FDFEEC25BD67F04079B6FDD34654D4AE25CD208BED77850E3857BC
20F65BC7C4A2C440B04504780D63A1C530446229BE6D18C615960A4771DF234E
DFA82975D2D0E3F002D3E1D91316191105652876E50A89D2AB39244F7A69BD5C
FBC1087D8F27F7A7BDCBA14D16D3F91C8102B7A5FB218F21948E6F165046DB49
7D73A803F6AFEA455CCAE28C6A3F296936F0123CC8B7C00333A5553F5BA1B3E2
618B3B41824A76028201435E38A8F55A6C606372AB44A108FC0EFB95CD6E35D9
E098C8881FF0823015736E8DE1BD6AC475A08967CC11F63099482689C1A119F0
ACC56106A31F581B394013A5BFFB2C21038E63C2288D862BDF971212CCC7F398
B49BA5705514B56F8E0190FD4FA2A0A6266B9A9511819D1F2A37DF1918D057CA
BA61FA9B11ECA74AA6EA50796A9EC1DA3D3A3B25DEE61AEEF9862229F060E7D9
54B16633EDFDA0DA607FDAA9068E73E0937FEE29A79ECFD4FB8AE0BE5218D53B
278305E0BEAD8C0E412A2D3F33C57E536D0FAC8E2BCDF1B437083F40F58D8B1A
E3A900879B375DFE675D805543D70B265FDD57193B8E0B74B151593F070CB823
A16CC93EF2960003FDF6820C45D8B4C65F28876A91C7DB6F1E2FAAA42C96B138
0734AF60C7418E654693A493B3794F13BCD4A6400FC06B3FC27BDDB5FE7FCDB2
6ACCDAC6ACA5946E12DC1A4DF45EE9D1CBE49DA04577EF0E88535280104FB0CC
695D238F69A4CE6D68C26E0A5D5D6312A00545B4AF54AB64A7B57DC2A2CE4869
20A3E949ADDC4C45AF685EF032C04B74B591A56F6AD8C843A614E6AFA5226CBF
8022133CCBD0B97F45BC22BE29E90BEE45ECAF084EDA0B96B3F32229A550643F
E9AD227EB88E279912B638563A1B51C0CB31D8154C8C48D36D325BD229AC9133
6E40475264897D47EA297564A3574A9C02A9899CE0C16B339B68A2AE14996476
3D524549A09EF7E53CEC2BBB0B04FF7A6B6B145DADEF0E8842D7AC997867EB02
1731CBA41F726C9D4A032BEC0DC863F84F7B0DD24B880B9C0D89FE9EB68EDBA2
37CAD414236ACD0DAF8C39EF4540C37994EB0D0567E717EA97A8E466514611DD
AF3EB4D6BD528B66438B134C02AED4488EF8785AA204AAD0C16154899FE60BC8
052CAD0678B172BBBA3274E680046E29349C96A4FE99463A73C8A5F183EBED69
E888FBA1E2A88E5BF3301F979AD87DC4AC4A68F9D3BF40B82CA4D8E7E4855C77
5127C14002ACE5568CA9FAE2FE6723D52BF0BE7E1F5CFC9C9F06F115A812BA44
33611C1B01D9CF4381B084C708DC6BC40C82F3A7EBD951981C1FBA0C457C2DF8
9FFC8F337C0295C11C7B0D21268EA495B4C5AA5461265EE9F63FCDD8D816B61A
4E13DC34EF49B59011EA1CECEAA02ACA17996EF53172F8F32440E8544B34C9AC
26FE5EF8FBF004D5AD3F4C5AEEB2CBA35E7F77FF2251CDBC8A884E58ECE1447B
01606886E06E423D371257512495CD7FF7CBBC417DBBF9D784583F562C0537A0
625C655CE74883CA502037451B79C52B101ADAA48FB0A4614612258F6693EA7D
A862DC3D3E6426D42279B1853D20A31C612FDAB0C31FBC84A663DBE4E3FED369
6B649CFCC81026105F11FA3B61A759C707BD7DB9FADF6936E97D67897C63049D
A8962DCCDBA5432CFA52050EF03C0F93AFF4095834D4763ECF666139E66CF7D2
77ABA5AAEA55AA790084EEAB9FDC5CA2472D1E50FB666EE9CD5F2A592C27004F
DF02728011A4E0F2D07A01A0C7B27C86A5A58A0F460A9EE39D476FD2FC56FCDB
A6777B31BFB424421ED6047E3751D72AC7474753A387E4FF6B9907F28808DC92
2FBA9B543AFBDADDC996E9EDE4945EFAA728C4A18A407BCE83BA24340D570FE8
40E1141502C1218C55773CA3C6D7163E67DEA7F016221CB34AA4EB20552294F3
AEAF6C98EEA5F0B89AE754BF7F8203F0C857CFAE8A868BC65847D168D1E19C06
F9E6851A64BEC3F7869EE3181CE8AA1AD6709C161E40A8A8AD8074AABD6A06EA
11E40F1F4F4D14E64997F7CBB7FFC71FC82F8D173315A44103BDF543985ADD24
72E3C0F8EDCAA3573EA8446BE6F8BC46AD9BC52C13C8343C21E274982FC4533E
EA16716151F6E7C56C8AB26C4928CBC3C8D3E114E264BC85D3ED2103D8AD1344
365B42246117A5BF1DEEF73D15FF20CC36B4125888EAB6F9BF56E8861EA17A67
2070F488B0EE73ED1F62C19751391B49C6C4867AFCC7CF8CC9CFC4121A19F0F9
64D0402AB738AD6B9A54234FE30854F35CD9C66C9642DEA31B90D6B105699394
A2C6751C96E21FE03E3159BA40F062053908C2D9AE1AC51B14DDCE037D56471E
EBC885EDA23DD95BDB69D652D658A684EA25298A1CF417C17343950F65DDD320
6D4D9072461F746CC5F0D642F4B65616E2A22223B0E9F7715EE1E8617FCAC06D
1EB6DF1DD36642B5A8BA107BAEA2B7086DC2E48727F4215B45237FB451C43EB5
98CCE17080F41FE5FFBBAEFFD0B7D8CFB9B1CA3230F1E2C958B51E46ABFC7C6D
F02F15BF94047C8452AB9ECC02D6BC9E9E8CB677AE00A39E8A74EE9C51F11304
B9EB2F2DAA5F57AC92671C4E22CDA2B70E4B5790968DE52B960F67D6D5336CCA
54CEC1D50D63C550BC4B0245A1B0C108B6BC5870BDD31792C59A72D961F1DE4F
A843FDCDDED1A63ED5F8FC0E62FA1E572797BD1341553FDF6ED52274BC7E475C
56DABAD14F32804F0747A3C6E7374F542DB5CA8557D4A9EEDADC0814487E67AF
3608547CA934DD0AAB719F6B84DFBC58782E1C0A4FDACD3B0BD26B9EFC593F00
644D679B9F17FFED44F44192525D19AC5A478E10D3A5157E4115CE3B6A3BB452
417F1D87BCF3623BC20C8981C733BA78C0DEB8FCB97A1FD637C9D945D3836914
839F400AE54BEA21DE7BF46E00A3CA9C0080D3E8E82373A6E5C7F478ADCEDDDB
C01ADDBBCBCAE0D1C27B5342D62B68098A7C22BD843E8B35532EAE18188849E7
08A4E69F2C5A3E08AAD4A9BBC5EA2BB4310AE24068B586C679D09BFE9CA36B46
B1A4A91DF9C859EBF7D280D4CEBA3BEE9409F87C520180CB47252A726D5C69B0
59AED17AD3428AB4EA6966FE8E7EE470F4E30ADB4B1DA284418B21F7C2E912EB
B61D6F455A39674FFFA01435669C30AD13D2515F250803020CCA4DF8E8EDEDEF
F68DA193DDD85DADA3A7F8445ACA65DD8911F2D2FC8B6C4CACD47A917B8CD182
7922BF5BB094E09585730A4930EF1E3E733292C806C80C8865645C65612D8AA2
169A24F246F586326169BCD4B8508F98E9A12E5B04D585E6AE259EA0C1E060B1
C495ED215C9E3B58976FD8EAD0226D540527F17881ADDE4814AFAD697EE6F87E
201DC7DDDC1247CE9F836C4ECBB1D5775A0DC042342464496CA2C4C96CB2709F
857F15F0E459E3C8B6D764189B89472593831E1FB99B83BF35C8C3C0F03DD8E2
21098CBC3E05C475752BC0A6B7211BCDB9E4BCD0DEF17927C9D06F5711AD3F53
27BD0ADA8E33534A2FD4F07688258F627E7E6AF47FD056A88074D90437A6F795
9C5FD2E81F4C91A07F8913E1339218AAE7C03C6C968264CC1B61492AB91D0E0F
D50AFD9740758FD5FF801A167C0322F52C3B92C29F8FD050130FF7C7D8E43342
9A5511967B2ED0D075C77B57701608B647B4E462D04046973A8BB20A52DABAF7
035C750C124BBD8162F6AD76602415DF8B3850B466F48EB4F3D90344E0EB287A
A14DB5A465911DDC0D24791E25F5D42D77350002A86A895DAB0CEAC693810ECC
15C53E710CC7E4C77401CF19BE5A1AA944C54DB9518F931EB97DD9D881E50D87
232711C91B90C11A6D6512428B0CC7E43E676816D8BA1E033C6B8F8981AF7707
EEC3963C09630229E5DFD1BB280F12EB92739BA992268D8C30721A136B95C0C6
CE31886D07DAE3C15F438FCEBA71E121386CED0321AA1103F0F6BE1298F10331
8B37BD96C9AC146B7A62925850B9E11C6474671DE9AA697807EE15268774225F
D2E9D3B5C43DB05B306119AC8D529BF3F2FF4E5B724BD4DF89696014C055FFF5
1124191AF49DFFF661B46919E0726683D783ABC33574A5E48DA7FA2788B2E841
F0256A95E20C35C187EAF63F04F9415D7FEC70294D5F5E73ECC219CCEA0491B3
112CD86B7967C8A437C182E6CC1F40105B8F8BBDDC274AF58A2A949ADE888AE4
DEBB0A62DEE58820F4C3ECD7CC083D269ABE2C58F858D2434DDF5195AF3BFF93
F51E11E00A57C7968A5758E1DB98003421272862666F8BD1C70B142755DE311C
2733E43D49BA205B49BF7E094EBCBDA9147C71FB30791F330A89A9A02B694F6B
2056997F2D35C37EF36DEC95AF26E9BB0E08EB185DB88746CBDB5AE1ACB7E338
371EA9E7010EDAA133E800EED4DCB43B0B1969A53C181C52D9DCD913B45B5998
2940BD5BC0BB3EBCE2E77B7AC95A169504FA68C9D079CA39603F9D7462F2A4AB
66B0AADE6518574AC83A36244F9A5924C37E2B6952DF9E8F97FFA645F8868729
B92CECA783F8CB967470F1D1EED7C89DD3F0B3284982A6FE0FFF13FBE0B8FDAA
78A622641D49610E3C186E07A0332CC252E367BA46D70314D3AB6F122A82F9BD
D43C28D539E0910FC80B646A2FC08C849821006A4C9BCD0BB25E144CB990A1F9
1618595AB6D53A6012C4823D47156B6B2D1ADFE1C36DF0A81A5D74D87140A02E
05B02D4C6603B5D62633D4DC6CE91B83AFF19D6B27A633D126CD63FDEE48E210
E261C16EF1A023668CF81461872707B51EA42C0BCB085A5C6B6C979DDDC0B97E
AC19556872C32687D2A39FA12701B684BB8749887ED8199B50193DDCA689F27C
F7DB788DABE303F21C10B6F8E9D1D9C9580B3E2E74A70F7AB8C4908AEFCAFC2C
9DDF2FD174E528ECD945C83693BBD5EE8A0DC352E21E70F50120CEEE7ED99E68
283E0B911C01DE04749766558BDF222A20FE01B30792CD038DC7A4E23C0F1332
41F066096999887AD4D12DDAEF63FA2B432F29B522FD421A10185A9F60E43610
FC334F420C54D49D520611165AAF3711B005AD3DFBE56FD103E86CCB0172E299
B1F6353CA60FB57A0FEF4F937EE71FED0B52E247D95BAD5D9ACED37A7E9CDA86
B3581FEA2DD0ACF8513FB161FDCEDE6E8DEB1C6C2BDEC9E6EADA4544BBE45CB5
402826C52949BA958A4E4E57F1F0D63CA0B3F923CC12B6228C0105AE5F8C1D03
3F0ABCA75BFE5FA89C72207BC789EEC011E3B29A07F16CFCD9CF65AC6F5F1680
59DCDD7D5FFECB83EA16BFC72CAFAED1EB85FEF272ADCD6196E6FDF82F6D92A3
F11C7EA1FEE81E091E7929F33FF9BF11DA75BD2522BEDBD63C6BAB785CB0C43F
28A336C866A28BBA8615D153419A8C046091358D0FEC6EFFF366CC46D6D8F389
9D5B7ED1DAC77D333AFDA88AA91040B3E7D7388E2EB15651D468B4CB3D55BAB3
E9D4BB6BA67C482E6A0F19866DBD95E41C04BBDE92874AD111E591E92E88BF0E
850B2371FA02C60043612E8AA99A1BB481D0E573FFB14CF86DAAEAB3B5B2D86D
3CD8E721EE1E0A4096C6AFBC225A5F5E1D7E8116BCA48281D0B4103EBB92A3F8
01177BDE9BDD61E288E9C42B5EB4FFFC731CEF46F384CCABC24E71650FD2487C
271B77BE21D8264E60CC2552CF26EE8C8BB1C0E16F3CACCD5EB4FE7B7ACA2170
66183B5069034F3E27083364608B6A6A7ADBD6EA7163DD1362A8CE7A17C1064C
B861BAB26B519684ED10C155D1022B59B4F532B826B877E9B8D826334FA3C999
052EC6A2A12E79E2C3476614D0B1E854B893818FD377EA3A9BDB285BED83244D
30AB22827038D5E2DCF97D2AB8EAEEF6071317CC31E07D6CF9A6D08728DA3D95
ADF1C5C812B03E2569E0FEBDC1440780DD8A31A0090A7C0F269C98F80E60A525
243AF40D831F397C007DD33D751438705C8DBF12B6F67A5AE3536983B7001FD3
4DD01DD9EBD15AE4C65321DD0ADAD481DF9D5C54A211D8F0B67EB8912484B18A
69F1D0399BB28AB378E225D414729B60E661F96C76B25277138851E38B2B81DC
22CDD8965A3F0A33989EC38FD6372FD614B3A67B1451591E52749178D4E133DA
E0E07696962EED3A3A13C4041ADC5F52005A6F432DE9CDCF42546F422F2272A7
7C7B24EA082C8B28D31CB498D32C9487CE5089F7ED4D8217F1F0DB37E3FEB335
A6A423C7DD79831FEDD65BC403AFD0A9A11D8B4FE422F5EB9256410A727E47F1
4F7B9E530ED94405E884874F14EE2CDC8F0BD084CAB30272E8F065218BA88531
8CAE84B53AD78A8A6FB59D58C1E794FCBBD27B060EDF50260D3FE03EE61C774D
39E1F2A3D374AB25B33CD03F810441A82F21FB94C2D83DB8D42A9E6C43BF0B5B
58D89E8DFA7324D59D8CD75108CDD538E1C5C8C568FFCF5871FA07ED300F9C0B
E105928388C9CC470E6FE9C1DB628B02BFD2325DE4E377278A30791AE8DD894F
48AE762283F1DFEA6F94F63BA7AD4803207277D3140B4AA22256DAACF1B9CFE3
74403C5DCEFB7CD8DB57C9E529732F99DCBF7C75826EDAC8630477C0DD63952D
7835CD2CC6032BEC0AD00C68EBE5715B51CD930287BB242241884BA9566BBAFA
4F33974BF335D97B7AF95B79602F210CC837788B4018CA0C7AF81DAF1E403F55
2653EC2A9E090BE3461C966210F711E747B22C5E73B38B7279F9D19500271779
F1990BD3858B8FDF4445719EF487B22532E894EA0089D062FF7E5E2C57FA9762
ABD83F4858D32AF7494144413C3602323512D5D98E29A6CE6EB31F175724D7E1
0108B8107BD17C259B723F956B5B147E7C0D6AACEF8DB027C0A838609EB1473D
8CF92B969C07398319845B7308A4FFA1AB0196CF0B21F0851081A26969E75BF0
26B6E34D25BF3D41D92425E94CD05D880C4EC59B599F5A0E750C96C7B9CA647E
44F7C808B103D657353EB568DC7729AFEEEDFAAC035ED733BBDB078952E44D67
77D904099C518DB9EB523CFDB347EAE7611E3C332FD10EF7D3F858326DE46CC1
E57DD4B2A8821A8506BEF79EC524521036BD0D3DEC9CAB1588E1268772307DC1
68E01E7948BA950916793412AEDD15191DDD1B6A3FCCE3EBB841B445A52D7721
1A860F0CFEDA2199DE30E50EC3777E8D09CF9F9A58AD5661E18ADF577A7A03ED
A5E31FE9CC126DE98BC8A7089D52EC267DC47A32AF566AF1D75F66C83E885A16
7F78C241D0FBEDCC43893291BDCEA2DBB162B85E7721EE2CD5B6FB32CE3B50F0
179B0131D0551F3ADD7AF1C05394AEA5A272502D2A60197A6D99ED151912F966
FCDAF245547BB2DC104E45B02002887372A7028342D5DA1ABDD2FE557EA83704
2CCC330766EA028CA0FD447F078D8C9932156D67F7A6D7B5F711E2B3A8146BB2
49CF5A61A29DD3E55307847599B02E5A127089473EF2D6224163ACA3C179FA27
2A70FB2947504ADC434D49F59CF0EAA23581478C4B70F8BAC1FB7FC9191E1738
20EAB8A5D47C615DF567CDF14BF056FF0804DEF6183C5AD5CA2AF41A312DE451
7C016BB06F5BF6BDA77649B3D84ABE6D113D7FCC36B14A80414DEF5E701BDC76
E7B9700EBBB54DEAF0039BFD9445FF9AB02AB229B8D20C7CCA131B23CEE3EA37
47DE93F77B4F77F75F2E2336B76A11D14A9518E4B808DAFB6C69057BE93BEA6B
23FA0D592C03BA3BA078F55FC5DB772FBB6AC3949FF9CB12318E20B680A50E70
0B9A05B3E905DC00FD5ED52EBD4B10AA2776133BC2CBC99AC09C6DFA307039FC
12D3BDAF7171A4DBFC5104E252775E45FFABD66C1C0D26222A91C0D9191F8A28
1E6314A368C017753C4BB8B8E6121EEB51C5F469E6A082DFB54CAC3C66A8B873
A7339DEE670AD4769B9E763F69F5F53EC7560F366AE06337119B2CBB45FDA60F
526C6C598BBB6C806F2EADAF2B3B5EA40431A79B31C59E4C60657C074ACC8A0A
CEAB05313DBE5D6F378915F689BBE57717C29FEE0A4E301D7EB67FDE27917F53
B28B06930BA5DAFD4DCA68502A1AD8659BC38E6DA6E587C23E70241F9C323674
E061FBF55BBB113B7C6C1047358896DFCA5854311C92BDBF34C573D3984449A1
F998C318A8FE36D0D5020E18A49623AFDC402FD0AB800B022A9B59AC93D44CA1
463EC3CF8992D926C8204270CCE76467E3A1F8D5BAFDFD3DAC5A6BF69F1EAEB8
C5516B4205E2419B5EA3CBEFFCF06FE0F31590C0A70F58A3967DE26F93EB7C10
19B8A18D4135AFFC921C5503156920B7AD241AB7A859EB07BBF5A02A1D0B9888
8A475D24F3025604295FCC52C694E3414CE51A628AD2A423EA8BF7AE91239DA1
AACDB3AF227B717D3E2A53E0694272879A0E32367E181775C72CA87F97215FB6
0B609B48AEE9B3401210A6AF67C73C2CA3BB7BBAFD7E3B4C95E7922F4D6DD044
7518D11B4CEF600EB51343396453ECBBC6D66BBCB322FC0E5EA78CA5E1C2AEEE
1911E9BAD1E0359BFB52E8D60EB8F10020FCC25236E092554E32D6AE3417035D
F61605DE9C91B05BFD80CDF441BB5F6468B08484D515C0D9BC826EFCDB25CC23
092555066AB387394E987600DD4D04CC5246DA7AA16DAD7A3EAE281FB6B0F733
1F7864291A3B3F7557AF0920782C6ED603B79136CAA577847B72D260200DE079
8BEE56790BC3866E20C58C388174CFC7515F73F86725E64303B4E15384FD809B
87619E237CF2217EE3A1584E72490C57DA93D0027D617FEB2C807C63D2F56C93
D6E9F8AC3833A612643316CB420AF3DB29F008BA36A2EF042F4ADA2C386289EB
D7CCB6319582D7B0F7571F47A666028EEA649134885015C2E04D6FDC463C1510
C782FD96DA1396EF9322A1BEE0095949F22E99CBD1AC1A0CB1E5D800A335A7A8
676A83FA6E29AAADFD82C6585E084B8166F385CEEC11E6F8121282D88FA80DAE
185A6CA1703A60FDF469BE383F47BB8E249300A4E2A66056BB18F8C023BF903F
B71AB68FAD4E316BD62804CA36D4619D8885FA06630B0957DF2E49E5BB06A1F3
8A85CDA6516BC36BA3DEA3D131971EC182E6F85D3E166976A1AAAB6BE715FAEB
14CEA517B3D0F963892C7AF156CF7EA685278A1A45A532BB082A571370B50E57
1B449C3C6BE95E6133522021C59825E35CBC11D4DFE8EFBAE640A2F4B94F244D
365B70C3747ADDFDA6A5FF6E1016133A1B4FAFC8294E84BB9A0A439D7E0ED44D
117E1C942F56B51E615267D9FFC1975CAF0E7AD5C3C5D5B1BAABA354F932E780
31D291D5F301DB7CCC0E927EF7D853D4E937E83A49AC57D38A894FB28F60239E
AADD0D24164AC3F8505DFC7A4862BCB562E112E4EB78C1A95CFEF5D63253821A
866F13CE96048F2BC2B7D9B3874138C7E04994CC74D5443843F1A6D6B54EB806
FEAE1AB340D59F4D95B79EF84074F350F57D74C24AE9FFBD9C7300D3C2260F96
33816ACF8132B8CB3AB45B424F267E9713229F7B3ABA30559D9E4B6B06AAF005
3BBD08C428FCE711882EFEBB8E278432D6E9D53ADCBC4DA0F99F8692F0931B64
5389E20ACCB40407A97ECB5EBAF9896DA7BF3FA1F78CAE44240BBB58CBE8626E
724B27AFEB8684A322202AED4DEDF80BA158F65CA471A4D5D3F0D6E512304A82
2093CD4DFAD4DD3CD469E24B979DB7A71B289E968411A4E0F2D07A01A06A457D
8855670C5DF920AE954F2DB9D18E9DAAA4348AD38AC73A15FC7A6AEF112861D3
A8E8DBB9F4F41DD65E1DECC56BAF7E624152E533414A1925087EC67F4F074AC7
EF7B325589280F69965A381E988069565F7B9668197BF4D3EDCF0267A48EF271
D6AD67DEA1649F56244B6E5152EBF506F0D50391833BBC2230B8BEAA3ACE9B4E
F23BB4F42F155C81CD0A69588E4AD3C11D0D92D477615255FEDB891F79982A07
5E7A1654FE5F9262B46163DBFE3A9E1B363EF5FA426A242A4761372D68B5C88B
C116C33D4FF442F40AF64CB76961831E5F2BD08BE6346F664B36A286CB84C14F
BD5C09AF84E16A5EEC8E9AB7F78A8C6E882D97673A70BC845767366CDE0D37A8
2F073B5D4B3EDAAC1F28BC96B2CA44854FD16417A7461A558C3E08EE8FE60D5C
71D367B7D2A6BD0C527C07577F3E8250D80FE8A7B6C80DFEDBA2A03212B688B3
7BAF7CAB06FB5E25D98DA373A781FA2E008F22E3792513C2AEC50737366436E5
8A4DA1ED8D66C2509F2756BEC93C6434B7192933FDFF5F9C602EB47F15219CDD
489083E9086B360CF9C8BF47AD2CFB938B0ADC4336125473E7FA6FBF5DC99AB7
89ACD0FE5A2F6587BA6A0786B3CE8903141CA59FDF80B2AD965E8A5A3ECEEB4B
5B5A18CD6D14B56109C91E9026545EDA3144E78CC3C1B8ACC9DC6678342E8AB2
4E5109E56307D4F90DABF8F42769D2241F9275C6C4F96623DD8B014AA6FE4866
BBA0E9B43AA49F579F37813C23D980EDF2DDCB2F443C4E4DD34A2EC1F5C5C771
CEF6497FCBB7C1220C5FE36799601CE72DF8F2762BBF37195A4C76D86C83882E
D85FFB721A5FCBA3AC1C1F700CF9862F2CAE2F8B6A8DB26A1287AB3DD941A92A
C5794ADFCCEED22733C4FA131A51FD0D4D032ACCE3241BB45C231D7BF2AEE866
4D6AD229D31B6E7713609222EC8D9FD30D7B576B958780A86E89DF637B777B16
C0F388D52E4B3AED6F03D917F0C8BB0CB3120C3CD743789E435C2B9F05232486
F108053A082AF365FDE86FA40B544AB03314F050E9925ED99C5094595F57B223
08AF01513D82F879794F86ACD235A8530DC532B2F8AC036436F7BAF47B59F93C
6779718F7C53E34C503E60CAB370FE07CF2C011A08277174FDA31F7F7791E2C5
B0D34B834CB126C8C7703713D824D250AC3F036BF394467FFF368360D913343B
271209AF0A0BB6CBB9521988279F491B522BAFA53918320A848F2E8C0A77E7FE
E8428449ABBC01F60262586BDD87777DCD4700F40CF5B7EC833AF41288E08E7C
CA5A601A3206F39A2BBAE0007448F08C1B770748C0A22BF194362C862C473F4E
5E6E996025F7E6E58FEBA6A9CB9CD1FB6E7314FD27D322E790C84FE81298F59E
C226D074269CF66DD5C7AB327907B0E58D3179CE028D0204E5961C043798751C
15EB9374E10CEE6B038836893707E4BC370ABC24C1E2328F2A5E7C87E52AF23E
1144C8A2430BB1F7F66B5D6A243AF3EB43C1AF1C3BAD41FE8DF249F6987E16B4
7B9A778037FAEE74D59267FA32ACEFC5A2B59F4AC1483E56F7184D95D0AC340D
278C6C485D0A6DA41BA91344545FAF6A15723113E18DAF089D76A3DBF2FDC87B
6B5CCD4A00A486C8473C590A74F35F54CB483C90BFC29774B0576788E0967C53
DE2FA1564011A1B74D67E72C8AD5BDD635ED4F55DEA7343E8F5E559659F630E3
C7026189566386E9F66C4DC139D27DB1E68863F0945F7051F016B7B274ED9017
7216D16B3EE680AAFE3E1FD3EB096284B41F24BF5BFD07F9BCA9D7C4A894F80E
6C93F2E61E1FCE16EAE10A0F90CDDDA764F6AB6878737DFA5056AB81A59C1A49
350AD2CBA32CF6C392962463C2AD2AF67E91EC2BF149246CF1DDAD49710654CB
3EAFDA594B430BC903AEEF80F976D14537C6E4664ABA5120C36995ABA438039C
705E77BD045EA389053E92BE09C1AE2643DB0FF8FF5397293571DC962D8CD08A
354E369E7AD534BD0F2A74DF504A9CB35D61932E2A63D2FAEF08A907DA098793
EF629F5E15673A89DCED579E0B7970CA862D143ED8F12C86267163298FD02352
EC222704F501329AC69D417756A28BB1009D5FCC690B2975F9B299C67EACCBF3
E12E9EF84C02DD92DD623E304EF1D5A5977056472788524795787DECC9355746
4F9F3CF923ABE6B20040C938E04BD44B551177208F4F911DB59E53945636D915
BEDD5204A988998DCA6C3ECF7A3D2BDBA57DA671A26AD3706D00A7A1F670E901
BC551136929411AB7D7762F6AECD7D70B5E6928526F8EAB8A42EEFDDEDA79F30
268D1EB767E95F10A2523DF7691D3261EA84CC62B4D57CC00E77B48D06CA6DD7
703C38FD2D016D587B5AC93AB9F8BD41EABC4149EFA0FA80D628A1BE75A026D0
609A4AB6C0A90DA08B488000C438F2CDC915898AE65C6D682C460FDAF66076F0
30B8686892DD0B9466FBF331D25584F3884F3CBD2B3B9EA28C070F7844D1AC43
3E764ECA2DEA2F35E0FA8BC87BD307C4F42B967FDACBA446FF8A729F95BB7A29
B31FDB9CED994238C395F9E9BDF738568FB4B3BB11998C6EA183B1C6019FF9E4
6B22D3349E3876EF0BB142D2D300E880EA95A80D93CA8641B7729C303DAABAF0
500F3BDAF7EF32D1114681AF8C3961D07F7E89311856CA69C5590022E29DFD50
19701B823F14BA9C6647EE9D3BCDBE8DB9F210B258906F12246B7A5140514447
7DDD2A5A609340C47727BA7C8C1E01DCAF9E8E6D394BF5F1D967DF82A51FDFF0
B2B665BCF78D15BFFCB7656834269020315FADEBDB5533462F98CB1BFEFA29B8
4408F988095776A3F84D35FC4BF260C9C364B3D0116EC71076AD765C982C977D
234A28B6C0F667F168127E74B697D7CF676A5E10A72977C8F507D6EE6253DD07
517660B5AF6FB6443AB383489434C6636D7EF3C3BFC78205DFDBC7ECDA793F53
B8598AB893337E488369D382DF6715D78810E98E2EC504A1E1FFDB030C8E3229
71F6A0B8C2FA29AF819EC63884834B565FA61452B203AC52BA2C07D590E2D9CD
F138A03ECC556A495701757FD221096C04CF104F151526484B2599339C875A2C
500D9255A2BA03CAE604231E3E61D172523CD2891B97DAA4EA4F989DE9C6ADFD
5B0A94C03778DC5FB29B08D5DE58300C3CCF495D740FE1AAD44452D0BBDEDD7E
E33A21676062CCDD447C85AA8347A2660B90A70A148F153383DBB31CB5DDAB0B
EB24D57802551912A89D32739D504C5DFBF237726336366FE0FFF6164A0F98E8
B89451F218B6ED72826C0FF003D11EF5C075E6CAA41FB6562BFED261CDC614B8
199852C68182F16AEC16633555E3780E09CB792D988CD7445F9F58A5ABFA324F
4B89E041568EACF8E27FD2EAE78A3767D9D9C74368446461C05ED8EFF65915E6
9CBFF0BC9AF3520F91A836A476D1E231CF781FD023B4961428001128BFF2B8D1
FC8AFBF4EE5E7A2CD877CE162E26DD1D948C42D4D239D1FEC85AC944F5052924
D61819BC8515959C319D701EB3B49F4546C997CFA39DD6B2397526B2F1E34CE7
2A3E43269E8ACD6D71F52387DD87BC8236336A4709CCB12F41056E649F76661F
8B91612605ED32F136463BC0350C0A74387B6C04F28FC9D69E8B5C053EB01AB5
AC9B812DC041E894A8D3E5EB0F343351FB6753B0E71F50C02815D29878A207A6
06B7DAEFF4A6C0B24669D2C8E2B6A88C7CB2C47BD0B1F7543215A5D359CB0131
B8467C84530D2132EAF983EC74D0E7F5635A8B1FFC05A228773FE0AFC4F3DC11
69758DE6A966DC4FB511F64A6C478E92CD035900986B6AC07D40292FDEA8E0C4
C3AB3566DE3912A96D74840C6C701B95009F3DB87B0D0C8B3FF7652DFB5B83A9
15D6278D4AD09F14F3FE1E8D63284B7C655AAF9871FEB6206FCEDFED42B5F488
E58F4EF67F74D218D16815554CFC9672A5128C1968E9DEF97FF744200BAD1232
2F06544567048392D4597E491C20E8B58FCC6940967105F661F130A2F9A8B1EB
0DBAD28396D8B7F11CA7B29AFB8B7EEAD7424BFB22B681037BA72BF30EFEE2BF
48C4C1294E06E5AFBA17A2DD0894DC0D5A9DBD1E496763A8E0AB9A0A114EF6EA
D68ADD64E78F2030305F3D78B39DC735679B221DC72900E98666A70B73164D15
2AD58FD87722D80F2D25503C93150922D97E8910448DB938D523A964D3CD498C
5623F61D541D50FE0F2F3281611296438D9EE29D4217A1FA558F4AF0792A4498
C87B1616C2BF32E161A3598DB48953E5C34D623CBD64B11ACD5ACE7C06DE2876
7888D209BDDB3E6E501715915EBBC1D5FAF3E50681390C67B61C835F0054591C
860CF67478EF2C96D28994E79FD9DDD5BBE845EBBEB1070482EBA48259A09C8E
942F86D672E41F565459CF21C2FBEF0F1F5DDEF0BD2011F58CA17FF178063C39
CA1C023DF80C0B8DC6802C1B0ED2D2FAB4D26F25A6124067295C840CF6ACE300
51D6E7D6C83969A4E97E15823D8296D0FBE12DD5636AA4AEED3A7F68C4BF02AD
D1FD018639EF1B00C52986F7F7B0B6A5E8C220CF38EA0499AC9B4A092C9AEF4F
61884ACD3C44765D74E4D2ED07EAF06275CF17C5A954D02D55D65A53AC7D0183
B3B94A476F0C57CA9B13CFB56C3172C8DF624A82B485C369AEFA43E7A19A2C67
6F27E6FB508E5AA6B24BB1F5FF90925D17F495756A43F09F7E106F0288AECFD1
F72BFF12ABB1C71F26BC3039E9FFE19EB1ECA920DBE349BD6B9626009A292DAB
A23A08868BC3842B9BF5512489F6720626B5230D7FAEFAF02D00A568BEDF4C60
7FC600FB17DE217DC82CB3662713F3E8A5A080D9EC5818E564995FBDEB306BD5
9380499D809AF2AA38D396981A5659B0D26497170523B0AB202A9A6F964F7C88
B4C2B2317D3C80B10F8AD11EBBDDEE9744C8020CF1E2E4CCA263393F3EAA0115
65A5FEE7BB1858C0AAFC15116C1BA378DD9D84A163729DEFD04891B2F876A758
F7ECBBBC92C15C61D3A67413151E89DD83679950A87CB73032F71CFB6E7EA5F6
BDA6691C895170D29840A4E589EFC02CCA7B0AFB051ACD381284C5A9C573E53A
A482F367CCFEFDEF1C426CD3DF9FD7D09A28A83ABC1CE29873170E1AFCDD04EB
DF64DBE5620DF69238BA2E3E5308AEA4131E58405215303663E9BBE85B3E669C
3098666CDFB1755BAF5D601EE226C641305C5F4CC77A6BB824A34EF107F41B5D
ACB6DE81B0D41455F619EB95F2480E5F7AA623BBE48D60249FD085307CE8D411
1EF35C1B3F887988E01E0B0427C812113DC54A060942A2B55B087DF042716F7B
1E34F2C79C8CC2B520437E50EBD0E7D9893C2407C0D4398A95BB09E0ECD41976
A1ABAE17B98C792CE8D349CA4991C5E49117DA9DA1078C4ED45CACFADB4EA85C
9632C41A478C99833A6645272E386000100B1D7106958FD8538998FAF4591A6E
11A4B1F5DF71E52FA84E66E83C40281C33DC1E3C7F3D1E591AB226407E6C5B3C
403E17E0A0B2DC3D5B5102A3063F306CB7031909FCD313E0F9192165250E0BA6
B7C62773B59915744B8BB9CED2FC923F6A672353C82FE342011E70880A8AEDA8
B5C3FA9F60E916DBE626A7A31D7A0FB873A54E12906BD42626C327C4B8E952FF
AB4F9474F306CD2272E40489D5E75FBA6A08A5B30261B00FF578CDF32D487201
D14D1C9676A575A0657AC6B70F3C41E627120BFD779EB60FAC9EB9001827F059
4AF52A078CADA2F103CA76442C8D153365C4E020187112527038A0E3DDEE555F
7803D87AFE17F524BFEE680D110515566DE769535BD3AB082BE19BB36185128D
BE18D07979800B6259B1800BFBF251E18EDE8AC175ECCF457879DD7C1CA4F428
D16701199DE0C9B4C8B56365D20095D5247D885D1FF6F5EBE227991764BDE5C5
3ECA35F95C1EBDDB05C359252EF934C536DA69D5C1AC5E2DAE473C5FF9CB6EAB
A0B1444EA6907F81DC41BD47932463
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Christoph/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN 3.3)
@start /Fa 153[288 47[470 470 3[470 470 8[261 39[{
 enclmec ReEncodeFont }6 885.568 /LMRoman8-Regular rf
/Fb 207[243 48[{ enclmmathsy ReEncodeFont }1 664.176
/LMMathSymbols6-Regular rf /Fc 153[452 27[514 408 773
733 595 690 772 671 710 705 65[{ enclmmathit ReEncodeFont }11
885.568 /LMMathItalic8-Regular rf /Fd 222[876 876 32[{
 enclmmathex ReEncodeFont }2 1106.96 /LMMathExtension10-Regular
rf /Fe 154[966 101[{}1 1328.35 /TeX-feymr10 rf /Ff 177[830
12[830 13[553 4[307 46[{ enclmec ReEncodeFont }4 1106.96
/LMRoman10-Regular rf /Fg 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Fh 207[255 33[470 13[732{ enclmmathsy ReEncodeFont }3
885.568 /LMMathSymbols8-Regular rf /Fi 203[993 1[993
50[{}2 1328.35 /wasy10 rf /Fj 242[1594 13[{ enclmmathsy ReEncodeFont }1
1594.02 /LMMathSymbols10-Regular rf /Fk 173[959 82[{}1
1328.35 /MSBM10 rf /Fl 198[470 470 470 470 470 470 470
470 470 470 48[{ enclmrm ReEncodeFont }10 885.568 /LMRoman8-Regular
rf /Fm 149[369 51[0 3[886 8[1328 20[1033 18[369 1033{
 enclmmathsy ReEncodeFont }7 1328.35 /LMMathSymbols10-Regular
rf /Fn 162[361 1[361 29[1012 1[361 1[650 650 650 650
650 650 650 650 650 650 4[1012 1[506 506 40[{ enclmrm ReEncodeFont }17
1328.35 /LMRoman12-Regular rf /Fo 134[634 739 3[470 613
2[653 2[1138 4[749 623 641 1[676 560 553 683 9[1228 4[990
1[838 1[1042 2[1107 1[574 1078 1026 842 963 1080 931
988 975 2[1012 650 1012 361 59[{ enclmmathit ReEncodeFont }31
1328.35 /LMMathItalic12-Regular rf /Fp 650 2[723 5[650
17[650 7[975 23[975 73[578 686 686 939 686 723 506 513
506 686 723 650 723 1084 361 686 397 361 723 650 397
578 723 578 723 650 3[361 1[361 795 2[1336 975 975 939
723 957 1[885 1012 975 1192 813 1011 1[469 975 1021 849
885 993 939 921 975 1[614 3[361 361 650 650 650 650 650
650 650 650 650 650 650 361 434 361 2[506 506 361 5[361
3[723 723 759 27[{ enclmec ReEncodeFont }80 1328.35 /LMRoman12-Regular
rf /Fq 3[1196 23[1046 105[956 1136 1136 1554 1136 1196
837 849 879 1[1196 1076 1196 1793 598 1136 1[598 1196
1076 658 982 1196 956 1196 1046 6[1315 2[2223 2[1497
1196 2[1470 1616 1682 2041 1293 1685 1[801 1682 1691
1353 1412 1649 1554 1530 1625 7[1076 1076 1076 1076 1076
1076 1076 1076 1076 1076 1076 598 717 15[1196 1[1255
27[{ enclmec ReEncodeFont }60 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
/setpagedevice where
{ pop << /PageSize [595 842] >> setpagedevice }
{ /a4 where { pop a4 } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fq(AN)1060
b(3.3)f(-)h(1)f(Eigensc)-60 b(haften)1058 b(einer)g(P)-60
b(olynomfunktion)1057 b(-)i(L)-179 b(T)1059 b(-)-2331
4515 y(BIFIE)p 0 TeXcolorgray -741 7823 a Fp(1.)p 0 TeXcolorgray
651 w(Eine)2113 b(P)-36 b(olynomfunktion)2115 b(dritten)d(Grades)h
Fo(f)2256 b Fp(hat)2113 b(die)g(Gleic)-36 b(h)g(ung)921
9815 y Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b(=)f Fo(a)295
b Fm(\001)g Fo(x)7585 9333 y Fl(3)8406 9815 y Fn(+)g
Fo(b)h Fm(\001)f Fo(x)11965 9333 y Fl(2)12786 9815 y
Fn(+)g Fo(c)g Fm(\001)g Fo(x)g Fn(+)g Fo(d)433 b Fp(mit)h
Fo(a;)221 b(b;)g(c;)g(d)370 b Fm(2)f Fk(R)434 b Fp(und)e
Fo(a)369 b Fm(6)p Fn(=)g(0)p Fp(.)921 14352 y(Erg\344nze)358
b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f
(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360
b(ric)-36 b(h)g(tigen)921 16344 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 19834 y(Die)407
b(F)-108 b(unktion)406 b Fo(f)549 b Fp(b)36 b(esitzt)407
b(genau)f(eine)p 20771 19834 3150 45 v 24392 19786 a(1)23921
19834 y Fj(\015)p 25515 19834 V 3556 w Fp(,)h(w)-36 b(eil)408
b(es)f(genau)f(ein)h Fo(x)369 b Fm(2)g Fk(R)407 b Fp(gibt,)921
21826 y(f\374r)433 b(das)p 5517 21826 V 9138 21778 a(2)8666
21826 y Fj(\015)p 10260 21826 V 3584 w Fp(gilt)p 0 TeXcolorgray
0 TeXcolorgray 6080 23198 15080 45 v 6080 26283 45 3085
v 13295 24980 a(1)12823 25028 y Fj(\015)p 21115 26283
V 6080 26327 15080 45 v 6080 29586 45 3260 v 6789 28383
a Fp(Nullstelle)p 18750 29586 V 19459 28289 a Fi(2)p
21115 29586 V 6080 29630 15080 45 v 6080 32890 45 3260
v 6789 31686 a Fp(lokale)i(Extremstelle)p 18750 32890
V 19459 31592 a Fi(2)p 21115 32890 V 6080 32934 15080
45 v 6080 36193 45 3260 v 6789 34990 a Fp(W)-108 b(endestelle)p
18750 36193 V 1 0 0 TeXcolorrgb 19459 34896 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
36193 V 6080 36237 15080 45 v 0 TeXcolorgray 0 TeXcolorgray
25658 23309 18072 45 v 25658 26393 45 3085 v 34368 25090
a Fp(2)33896 25138 y Fj(\015)p 43684 26393 V 25658 26438
18072 45 v 25658 29771 45 3334 v 26366 28494 a Fo(f)142
b Fn(\()p Fo(x)p Fn(\))369 b(=)f(0)434 b Fp(und)f Fo(f)35118
28012 y Fh(0)35428 28494 y Fn(\()p Fo(x)p Fn(\))369 b
Fm(6)p Fn(=)f(0)p 41319 29771 V 42028 28436 a Fi(2)p
43684 29771 V 25658 29815 18072 45 v 25658 33148 45 3334
v 26366 31871 a Fo(f)27149 31389 y Fh(0)27460 31871 y
Fn(\()p Fo(x)p Fn(\))g(=)h(0)434 b Fp(und)e Fo(f)35428
31389 y Fh(00)35994 31871 y Fn(\()p Fo(x)p Fn(\))369
b(=)f(0)p 41319 33148 V 42028 31813 a Fi(2)p 43684 33148
V 25658 33192 18072 45 v 25658 36525 45 3334 v 26366
35248 a Fo(f)27149 34766 y Fh(00)27715 35248 y Fn(\()p
Fo(x)p Fn(\))g(=)h(0)434 b Fp(und)e Fo(f)35683 34766
y Fh(000)36504 35248 y Fn(\()p Fo(x)p Fn(\))369 b Fm(6)p
Fn(=)g(0)p 41319 36525 V 1 0 0 TeXcolorrgb 42028 35191
a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43684 36525 V 25658 36569 18072 45 v 47992 7823 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 40598 54804 45
v 0 TeXcolorgray 24746 81281 a Fp(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)680 b(3.3)f(-)h(2)f(Zw)-60
b(eite)679 b(Ableitung)e(einer)i(F)-179 b(unktion)676
b(-)k(MC)g(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(2.)p
0 TeXcolorgray 651 w(In)426 b(der)h(nac)-36 b(hstehenden)424
b(Abbildung)i(ist)h(der)f(Graph)f(der)h(F)-108 b(unktion)426
b Fo(f)36511 4318 y Fh(00)37504 4800 y Fp(einer)g(P)-36
b(olynom-)921 6792 y(funktion)434 b Fo(f)575 b Fp(dargestellt:)p
0 TeXcolorgray 0 TeXcolorgray 9135 29671 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.89291 a add def
/d 0.0 a add neg def /h 185.34311 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9135 29671
a 16710 20526 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.46454 0.0 -68.42838 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 102.73091 0.0 -82.6122   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.46454  0 -68.42838  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -68.42838
 189.46454  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-82.6122  def /maxTickline 102.73091  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.73091
0.0 -82.6122   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.46454
0.0 -68.42838 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 102.73091  0 -82.6122  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -82.6122
 102.73091  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-68.42838  def /maxTickline 189.46454  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.73091
0.0 -82.6122   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.46454
0.0 -68.42838 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14732 23915 a
Fh(\000)p Fl(1)14732 27064 y Fh(\000)p Fl(2)15464 17662
y(1)15464 14512 y(2)15464 11362 y(3)19624 21871 y(1)2680
b(2)f(3)h(4)f(5)h(6)-22883 b Fh(\000)p Fl(1)-4352 b Fh(\000)p
Fl(2)16710 20526 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16710 20526 a 16710 20526 a
tx@Dict begin  { 189.46454 102.73091 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16710
20526 a 16710 20526 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16710 20526 a 16367 20812 a Fp(x)16710
20526 y
tx@Dict begin  PutEnd  end
 16710 20526 a 16710 20526 a
tx@Dict begin  PutEnd  end
 16710 20526 a 16710
20526 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16710 20526 a 16710 20526 a
tx@Dict begin  { 0.0 0.0 pop 189.46454 102.73091 exch pop } PutCoor
PutBegin  end
 16710 20526 a 16710
20526 a
tx@Dict begin  { 5.0 27.99968 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16710 20526 a 15160 20858 a Fo(f)15943 20376
y Fh(00)16509 20858 y Fn(\()p Fo(x)p Fn(\))16710 20526
y
tx@Dict begin  PutEnd  end
 16710 20526 a 16710 20526 a
tx@Dict begin  PutEnd  end
 16710 20526 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4049893887185867 def /x1 6.658925835151265
def /dx x1 x sub 199 div def /F@pstplot (4.0/5.0*x-2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 16710 20526 a
tx@Dict begin  { 95.9429 59.08754 } PutCoor PutBegin  end
 16710 20526 a
974 x Fo(f)17493 21018 y Fh(00)16710 20526 y
tx@Dict begin  PutEnd  end
 16710 20526
a 37682 29671 a
currentpoint initclip moveto
 37682 29671 a 855 33655 a Fp(W)-108 b(elc)-36
b(he)433 b(A)-36 b(ussage)434 b(l\344sst)g(sic)-36 b(h)433
b(aus)h(dieser)f(Information)i(eindeutig)e(sc)-36 b(hlie\377en?)921
38192 y(Kreuze)433 b(die)h(zutre\033ende)e(A)-36 b(ussage)434
b(an.)p 2268 39159 41848 45 v 2268 42377 45 3219 v 2976
41100 a(Die)h(F)-108 b(unktion)433 b Fo(f)575 b Fp(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p
Fn(1;)221 b(1])436 b Fp(eine)d(Nullstelle.)p 41706 42377
V 44071 42377 V 2268 42422 41848 45 v 2268 45640 45 3219
v 2976 44363 a(Die)i(F)-108 b(unktion)433 b Fo(f)575
b Fp(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8
b Fm(\000)p Fn(1;)221 b(1])436 b Fp(eine)d(lokale)j(Extremstelle.)p
41706 45640 V 44071 45640 V 2268 45684 41848 45 v 2268
48902 45 3219 v 2976 47625 a(Die)f(F)-108 b(unktion)433
b Fo(f)575 b Fp(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fn([)8 b Fm(\000)p Fn(1;)221 b(1])436 b Fp(eine)d(W)-108
b(endestelle.)p 41706 48902 V 44071 48902 V 2268 48946
41848 45 v 2268 52164 45 3219 v 2976 50887 a(Die)435
b(F)-108 b(unktion)433 b Fo(f)575 b Fp(ist)434 b(im)g(In)-36
b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p Fn(1;)221 b(1])435
b Fp(streng)e(monoton)h(steigend.)p 41706 52164 V 44071
52164 V 2268 52209 41848 45 v 2268 55427 45 3219 v 2976
54150 a(Die)h(F)-108 b(unktion)433 b Fo(f)575 b Fp(\344ndert)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p
Fn(1;)221 b(1])435 b Fp(ihr)e(Monotoniev)-36 b(erhalten.)p
41706 55427 V 44071 55427 V 2268 55471 41848 45 v 2268
60681 45 5211 v 2976 57412 a(Der)434 b(Graph)f(der)g(F)-108
b(unktion)433 b Fo(f)575 b Fp(ist)434 b(im)g(In)-36 b(terv)-72
b(all)434 b Fn([)8 b Fm(\000)p Fn(1;)221 b(1])435 b Fp(rec)-36
b(h)g(ts)433 b(gekr\374mm)-36 b(t)2976 59404 y(\(negativ)435
b(gekr\374mm)-36 b(t\))o(.)p 41706 60681 V 1 0 0 TeXcolorrgb
42415 58408 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 44071 60681 V 2268 60725 41848 45 v 47992
4800 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 64753 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(2)p
0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(3)f(Lokale)g(Extrema)g
(-)h(MC)g(-)f(BIFIE)p 0 TeXcolorgray -741 4800 a Fp(3.)p
0 TeXcolorgray 651 w(V)-108 b(on)536 b(einer)h(P)-36
b(olynomfunktion)537 b Fo(f)679 b Fp(dritten)536 b(Grades)g(sind)g(die)
h(b)36 b(eiden)536 b(lokalen)i(Extrem-)921 6792 y(punkte)433
b Fo(E)6256 6991 y Fl(1)7150 6792 y Fn(=)369 b(\(0)p
Fo(=)296 b Fm(\000)f Fn(4\))434 b Fp(und)e Fo(E)17115
6991 y Fl(2)18010 6792 y Fn(=)368 b(\(4)p Fo(=)p Fn(0\))434
b Fp(b)36 b(ekann)-36 b(t.)855 9338 y(W)-108 b(elc)-36
b(he)434 b(Bedingungen)f(m)-36 b(\374ssen)434 b(in)g(diesem)g
(Zusammenhang)g(erf\374llt)h(sein?)f(Kreuze)g(die)921
11330 y(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an!)p 18362 12370 9661 45 v 18362 15588 45 3219 v 19070
14311 a Fo(f)142 b Fn(\(0\))369 b(=)g Fm(\000)p Fn(4)p
25612 15588 V 1 0 0 TeXcolorrgb 1373 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 27978 15588 V 18362
15633 9661 45 v 18362 18851 45 3219 v 19070 17574 a Fo(f)19853
17092 y Fh(0)20164 17574 y Fn(\(0\))g(=)f(0)p 25612 18851
V 1 0 0 TeXcolorrgb 2096 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 27978 18851 V 18362 18895
9661 45 v 18362 22113 45 3219 v 19070 20836 a Fo(f)142
b Fn(\()p Fm(\000)p Fn(4\))369 b(=)g(0)p 25612 22113
V 27978 22113 V 18362 22157 9661 45 v 18362 25376 45
3219 v 19070 24099 a Fo(f)19853 23616 y Fh(0)20164 24099
y Fn(\(4\))g(=)f(0)p 25612 25376 V 1 0 0 TeXcolorrgb
2096 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
27978 25376 V 18362 25420 9661 45 v 18362 28638 45 3219
v 19070 27361 a Fo(f)19853 26879 y Fh(00)20419 27361
y Fn(\(0\))h(=)g(0)p 25612 28638 V 27978 28638 V 18362
28682 9661 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 32710 54804 45 v -2331 38012 a Fq(AN)1071
b(3.3)f(-)g(4)g(Ermittlung)f(einer)h(F)-179 b(unktionsgleic)-60
b(h)g(ung)1066 b(-)k(O)-60 b(A)1071 b(-)-2331 41034 y(BIFIE)p
0 TeXcolorgray -741 44341 a Fp(4.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)315 b(ist)g(die)g(F)-108 b(unktion)315
b Fo(f)457 b Fp(mit)315 b(der)g(Gleic)-36 b(h)g(ung)314
b Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b(=)f Fo(x)31691
43859 y Fl(2)32271 44341 y Fn(+)54 b Fo(bx)g Fn(+)g Fo(c)313
b Fp(mit)i Fo(b;)221 b(c)370 b Fm(2)e Fk(R)p Fp(.)317
b(Der)921 46333 y(Graph)417 b(der)g(F)-108 b(unktion)417
b Fo(f)560 b Fp(v)-36 b(erl\344uft)419 b(durc)-36 b(h)416
b(den)h(Ursprung.)g(Die)i(Steigung)f(der)f(F)-108 b(unktion)921
48325 y(im)434 b(Ursprung)e(hat)h(den)g(W)-108 b(ert)433
b(n)-36 b(ull.)921 50871 y(Ermittle)462 b(die)g(W)-108
b(erte)462 b(der)g(P)-36 b(arameter)462 b Fo(b)g Fp(und)f
Fo(c)h Fp(und)f(gib)i(die)f(Gleic)-36 b(h)g(ung)461 b(der)h(F)-108
b(unktion)921 52862 y Fo(f)575 b Fp(an!)p 1 0 0 TeXcolorrgb
921 57400 a(Die)345 b(F)-108 b(unktion)345 b Fo(f)486
b Fp(v)-36 b(erl\344uft)346 b(durc)-36 b(h)343 b(den)h(K)-36
b(o)36 b(ordinaten)-36 b(ursprung,)344 b(daher)g(gilt:)i
Fo(f)142 b Fn(\(0\))369 b(=)g(0)g Fm(\))921 59392 y Fo(c)491
b Fn(=)h(0)p Fp(.)506 b(Die)h(Steigung)e(der)g(F)-108
b(unktion)505 b(im)h(K)-36 b(o)36 b(ordinaten)-36 b(ursprung)504
b(hat)h(den)g(W)-108 b(ert)505 b(n)-36 b(ull,)921 61384
y(daher)433 b(gilt:)i Fo(f)7991 60902 y Fh(0)8301 61384
y Fn(\(0\))369 b(=)g(0)g Fm(\))g Fo(b)g Fn(=)g(0)p Fp(.)921
63929 y(Die)434 b(gesuc)-36 b(h)g(te)433 b(F)-108 b(unktionsgleic)-36
b(h)g(ung)433 b(lautet)g(daher:)h Fo(f)142 b Fn(\()p
Fo(x)p Fn(\))368 b(=)h Fo(x)32585 63447 y Fl(2)33111
63929 y Fp(.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 47992 44341 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 46333 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 67736 V 0 TeXcolorgray 24746 81281
a Fp(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(5)f(Steigung)e(einer)i
(F)-179 b(unktion)714 b(-)k(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -741 4800 a Fp(5.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Fo(f)575 b Fp(mit)434 b(der)f(Gleic)-36 b(h)g(ung)433
b Fo(f)142 b Fn(\()p Fo(x)p Fn(\))368 b(=)32032 4277
y Fl(1)p 32032 4491 471 45 v 32032 5259 a(4)32635 4800
y Fo(x)33374 4318 y Fl(3)34195 4800 y Fn(+)35635 4277
y Fl(3)p 35635 4491 V 35635 5259 a(2)36238 4800 y Fo(x)36977
4318 y Fl(2)37798 4800 y Fn(+)295 b(4)p Fo(x)h Fn(+)f(5)p
Fp(.)921 7346 y(Berec)-36 b(hne)433 b(den)g(W)-108 b(ert)433
b(der)g(Steigung)g(der)g(F)-108 b(unktion)433 b Fo(f)575
b Fp(an)434 b(der)f(Stelle)h Fo(x)369 b Fn(=)f(2)p Fp(.)p
1 0 0 TeXcolorrgb 921 11883 a Fo(f)1704 11401 y Fh(0)2014
11883 y Fn(\()p Fo(x)p Fn(\))h(=)5648 11360 y Fl(3)p
5648 11573 V 5648 12341 a(4)6251 11883 y Fo(x)6990 11401
y Fl(2)7811 11883 y Fn(+)295 b(3)p Fo(x)h Fn(+)e(4)921
14429 y Fo(f)1704 13947 y Fh(0)2014 14429 y Fn(\(2\))369
b(=)5559 13906 y Fl(3)p 5559 14119 V 5559 14887 a(4)6457
14429 y Fm(\001)296 b Fn(2)7772 13947 y Fl(2)8593 14429
y Fn(+)f(3)g Fm(\001)g Fn(2)h(+)f(4)369 b(=)g(13)921
16974 y Fp(Der)434 b(W)-108 b(ert)433 b(der)g(Steigung)g(der)g(F)-108
b(unktion)433 b Fo(f)576 b Fp(an)433 b(der)g(Stelle)h
Fo(x)369 b Fn(=)g(2)433 b Fp(ist)h(13.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 20707
54804 45 v -2331 26009 a Fq(AN)718 b(3.3)f(-)h(6)f(K)-60
b(ostenk)g(ehre)716 b(-)h(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 29316 a Fp(6.)p 0 TeXcolorgray 651
w(In)542 b(einem)g(Betrieb)g(k)-36 b(\366nnen)542 b(die)g(K)-36
b(osten)542 b(zur)g(Herstellung)g(eines)g(Pro)36 b(dukts)542
b(in)g(einem)921 31308 y(b)36 b(estimm)-36 b(ten)474
b(In)-36 b(terv)-72 b(all)475 b(n\344herungsw)-36 b(eise)474
b(durc)-36 b(h)473 b(die)i(F)-108 b(unktion)474 b Fo(K)569
b Fp(mit)475 b(der)f(Gleic)-36 b(h)g(ung)921 33300 y
Fo(K)95 b Fn(\()p Fo(x)p Fn(\))369 b(=)f Fo(a)295 b Fm(\001)g
Fo(x)8004 32818 y Fl(3)8826 33300 y Fn(+)f Fo(b)i Fm(\001)f
Fo(x)12384 32818 y Fl(2)13205 33300 y Fn(+)g Fo(c)g Fm(\001)g
Fo(x)g Fn(+)g Fo(d)369 b Fp(mit)g Fo(a;)221 b(b;)g(c;)g(d)371
b Fm(2)d Fk(R)i Fp(und)e Fo(a)h(>)f Fn(0)i Fp(b)36 b(esc)-36
b(hrieb)36 b(en)368 b(w)-36 b(erden)769 35292 y(\()p
Fo(K)95 b Fn(\()p Fo(x)p Fn(\))433 b Fp(in)g Fe(e)p Fp(,)h
Fo(x)g Fp(in)f(mg\).)921 39829 y(Begr\374nde,)479 b(w)-36
b(arum)480 b(es)f(b)36 b(ei)480 b(dieser)f(Mo)36 b(dellierung)480
b(durc)-36 b(h)478 b(eine)i(P)-36 b(olynomfunktion)480
b(drit-)921 41821 y(ten)492 b(Grades)f(genau)h(eine)h(Stelle)f(gibt,)h
(b)36 b(ei)492 b(der)g(die)g(F)-108 b(unktion)491 b(v)-36
b(on)493 b(einem)f(degressiv)-36 b(en)921 43813 y(K)g(osten)g(v)g
(erlauf)434 b(in)g(einen)f(progressiv)-36 b(en)434 b(K)-36
b(osten)g(v)g(erlauf)434 b(\374b)36 b(ergeh)-36 b(t.)p
1 0 0 TeXcolorrgb 921 46359 a(Der)528 b(\334b)36 b(ergang)527
b(v)-36 b(on)528 b(einem)f(degressiv)-36 b(en)528 b(in)f(einen)g
(progressiv)-36 b(en)528 b(K)-36 b(osten)g(v)g(erlauf)528
b(\(die)921 48351 y(K)-36 b(ostenk)g(ehre\))404 b(der)f(F)-108
b(unktion)404 b Fo(K)499 b Fp(wird)404 b(durc)-36 b(h)403
b Fo(K)25899 47868 y Fh(00)26464 48351 y Fn(\()p Fo(x)p
Fn(\))369 b(=)g(6)235 b Fm(\001)g Fo(a)g Fm(\001)g Fo(x)g
Fn(+)g(2)g Fm(\001)g Fo(b)369 b Fn(=)g(0)404 b Fp(b)36
b(erec)-36 b(hnet.)921 50342 y Fn(6)268 b Fm(\001)g Fo(a)g
Fm(\001)g Fo(x)g Fn(+)f(2)i Fm(\001)f Fo(b)369 b Fn(=)f(0)421
b Fp(ist)f(\(f\374r)g Fo(a)369 b(>)f Fn(0)p Fp(\))421
b(eine)f(lineare)h(Gleic)-36 b(h)g(ung)419 b(mit)h(genau)h(einer)f
(L\366sung)921 52778 y(b)36 b(ei)434 b Fo(x)369 b Fn(=)f
Fm(\000)7577 51879 y Fo(b)p 6707 52468 2293 45 v 6707
53689 a Fn(3)296 b Fm(\001)f Fo(a)9133 52778 y Fp(,)434
b(w)-36 b(ob)36 b(ei)434 b Fo(K)14815 52296 y Fh(000)15857
50829 y Fd( )16733 52778 y Fm(\000)18769 51879 y Fo(b)p
17899 52468 V 17899 53689 a Fn(3)296 b Fm(\001)f Fo(a)20325
50829 y Fd(!)21570 52778 y Fn(=)369 b(6)295 b Fm(\001)g
Fo(a)369 b Fm(6)p Fn(=)g(0)p Fp(.)921 55132 y(Daraus)434
b(folgt,)h(dass)f(es)f(n)-36 b(ur)433 b(eine)g(K)-36
b(ostenk)g(ehre)434 b(gibt.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 29316 a Fg(___/1)p 1 0 0
TeXcolorrgb 47998 31308 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 58865 54804 45
v 0 TeXcolorgray 24746 81281 a Fp(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(7)f(W)-179
b(endepunkt)714 b(-)j(O)-60 b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray
-741 4800 a Fp(7.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)296
b(sind)h(die)g(F)-108 b(unktion)296 b Fo(f)439 b Fp(mit)297
b(der)f(Gleic)-36 b(h)g(ung)296 b Fo(f)142 b Fn(\()p
Fo(x)p Fn(\))369 b(=)31878 4277 y Fl(1)p 31878 4491 471
45 v 31878 5259 a(4)32482 4800 y Fo(x)33221 4318 y Fl(3)34042
4800 y Fn(+)35481 4277 y Fl(3)p 35481 4491 V 35481 5259
a(2)36085 4800 y Fo(x)36824 4318 y Fl(2)37645 4800 y
Fn(+)295 b(4)p Fo(x)g Fn(+)g(5)i Fp(so)-36 b(wie)921
6792 y(die)433 b(Gleic)-36 b(h)g(ung)433 b(der)g(dritten)g
(Ableitungsfunktion)g Fo(f)27769 6310 y Fh(000)28590
6792 y Fn(\()p Fo(x)p Fn(\))369 b(=)32223 6269 y Fl(3)p
32223 6482 V 32223 7250 a(2)33196 6792 y Fm(6)p Fn(=)f(0)p
Fp(.)921 11330 y(Berec)-36 b(hne)433 b(die)g(K)-36 b(o)36
b(ordinaten)434 b(des)f(W)-108 b(endepunktes)432 b(der)h(F)-108
b(unktion)433 b Fo(f)142 b Fp(.)p 1 0 0 TeXcolorrgb 921
13875 a Fo(f)1704 13393 y Fh(00)2270 13875 y Fn(\()p
Fo(x)p Fn(\))368 b(=)5903 13352 y Fl(3)p 5903 13565 V
5903 14333 a(2)6506 13875 y Fo(x)295 b Fn(+)g(3)370 b(=)e(0)i
Fm(\))f Fo(x)g Fn(=)g Fm(\000)p Fn(2)921 16420 y Fo(f)142
b Fn(\()p Fm(\000)p Fn(2\))369 b(=)6281 15897 y Fl(1)p
6281 16111 V 6281 16879 a(4)7180 16420 y Fm(\001)295
b Fn(\()p Fm(\000)p Fn(8\))g(+)12274 15897 y Fl(3)p 12274
16111 V 12274 16879 a(2)13173 16420 y Fm(\001)g Fn(4)g(+)g(4)h
Fm(\001)f Fn(\()p Fm(\000)p Fn(2\))g(+)g(5)369 b(=)g(1)g
Fm(\))921 18966 y Fp(Die)434 b(K)-36 b(o)36 b(ordinaten)434
b(des)f(W)-108 b(endepunktes)432 b(lauten)i(daher)f Fo(W)549
b Fn(=)369 b(\()p Fm(\000)p Fn(2)p Fm(j)p Fn(1\))p Fp(.)921
21511 y(Die)318 b(A)-36 b(ufgab)36 b(e)317 b(gilt)h(n)-36
b(ur)316 b(dann)h(als)h(gel\366st,)g(w)-36 b(enn)317
b(b)36 b(eide)317 b(K)-36 b(o)36 b(ordinaten)317 b(des)g(W)-108
b(endepunktes)921 23503 y(k)-36 b(orrekt)434 b(angegeb)36
b(en)434 b(sind.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 27237 54804 45 v -2331
32538 a Fq(AN)1049 b(3.3)g(-)g(8)g(Ber\374hrung)d(zw)-60
b(eier)1049 b(F)-179 b(unktionsgraphen)1044 b(-)1050
b(MC)f(-)-2331 35560 y(BIFIE)p 0 TeXcolorgray -741 38868
a Fp(8.)p 0 TeXcolorgray 651 w(Die)632 b(Graphen)d(zw)-36
b(eier)632 b(F)-108 b(unktionen)630 b Fo(f)773 b Fp(und)630
b Fo(g)679 b Fp(b)36 b(er\374hren)629 b(einander)i(im)g(Punkt)f
Fo(P)887 b Fn(=)769 40860 y(\()p Fo(x)2014 41059 y Fl(1)2540
40860 y Fo(=y)3824 41059 y Fl(1)4350 40860 y Fn(\))p
Fp(.)419 b(F)-27 b(\374r)417 b(die)i(F)-108 b(unktion)418
b Fo(f)561 b Fp(gilt:)419 b(Die)h(T)-108 b(angen)-36
b(te)418 b(P)h(sc)-36 b(hlie\377t)419 b(mit)f(der)g(x-A)-36
b(c)g(hse)419 b(einen)855 42852 y(Wink)-36 b(el)434 b(v)-36
b(on)434 b Fn(45)9055 42370 y Fh(\016)10015 42852 y Fp(ein)g(und)e(hat)
h(einen)h(p)36 b(ositiv)-36 b(en)434 b(Anstieg.)855 45397
y(W)-108 b(elc)-36 b(he)666 b(der)g(angef\374hrten)g(A)-36
b(ussagen)666 b(folgen)i(jedenfalls)f(aus)g(diesen)f(Bedingungen?)921
47389 y(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an!)p 15396 48356 15593 45 v 15396 51574
45 3219 v 16104 50297 a Fo(f)142 b Fn(\()p Fo(x)18132
50496 y Fl(1)18658 50297 y Fn(\))369 b(=)f Fo(g)48 b
Fn(\()p Fo(x)22829 50496 y Fl(1)23354 50297 y Fn(\))p
28579 51574 V 1 0 0 TeXcolorrgb 5427 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 30944 51574 V 15396
51618 15593 45 v 15396 54836 45 3219 v 16104 53559 a
Fo(f)16887 53077 y Fh(0)17198 53559 y Fn(\()p Fo(x)18443
53758 y Fl(1)18968 53559 y Fn(\))369 b(=)g Fo(g)48 b
Fn(\()p Fo(x)23140 53758 y Fl(1)23665 53559 y Fn(\))p
28579 54836 V 30944 54836 V 15396 54880 15593 45 v 15396
58099 45 3219 v 16104 56822 a Fo(f)142 b Fn(\()p Fo(x)18132
57021 y Fl(1)18658 56822 y Fn(\))369 b(=)f(1)p 28579
58099 V 30944 58099 V 15396 58143 15593 45 v 15396 61361
45 3219 v 16104 60084 a Fo(g)16775 59602 y Fh(0)17085
60084 y Fn(\()p Fo(x)18330 60283 y Fl(1)18856 60084 y
Fn(\))h(=)f(1)p 28579 61361 V 1 0 0 TeXcolorrgb 7526
w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
30944 61361 V 15396 61405 15593 45 v 15396 64623 45 3219
v 16104 63346 a Fo(f)16887 62864 y Fh(0)17198 63346 y
Fn(\()p Fo(x)18443 63545 y Fl(1)18968 63346 y Fn(\))h(=)g
Fo(g)21895 62864 y Fh(0)22205 63346 y Fn(\()p Fo(x)23450
63545 y Fl(1)23976 63346 y Fn(\))f(=)h Fm(\000)p Fn(1)p
28579 64623 V 30944 64623 V 15396 64668 15593 45 v 47992
38868 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 40860 a Ff(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
68696 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(5)p
0 TeXcolorgray eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(9)f(W)-179
b(endestelle)714 b(-)k(MC)g(-)g(BIFIE)p 0 TeXcolorgray
-741 4800 a Fp(9.)p 0 TeXcolorgray 651 w(Ein)338 b(Bec)-36
b(k)g(en)338 b(wird)g(mit)g(W)-108 b(asser)338 b(gef\374llt.)h(Die)g
(in)f(das)f(Bec)-36 b(k)g(en)338 b(zu\035ie\377ende)g(W)-108
b(assermenge,)921 6792 y(angegeb)36 b(en)636 b(in)g Fo(m)10304
6310 y Fl(3)11466 6792 y Fp(pro)g(Stunde,)f(kann)h(im)g(In)-36
b(terv)-72 b(all)637 b Fn([)8 b(0;)221 b(8\))637 b Fp(durc)-36
b(h)635 b(die)h(F)-108 b(unktion)635 b Fo(f)921 8784
y Fp(b)36 b(esc)-36 b(hrieb)36 b(en)432 b(w)-36 b(erden.)434
b(Die)g(F)-108 b(unktion)433 b Fo(f)575 b Fp(hat)434
b(an)f(der)g(Stelle)h Fo(t)369 b Fn(=)f(4)434 b Fp(eine)g(W)-108
b(endestelle.)p 0 TeXcolorgray 0 TeXcolorgray 5417 36136
a
 currentpoint currentpoint translate 1.19499 1.19499 scale neg exch
neg exch translate
 5417 36136 a 5417 36136 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 272.01768 a add def
/d 0.0 a add neg def /h 191.4282 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 36136 a 7238 33768 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 255.5741  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 255.5741  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 170.03743  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.03743
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 255.5741
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 170.03743  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 170.03743  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 255.5741  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.03743
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 255.5741
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
5993 34053 a Fl(0)5992 30904 y(1)5992 27754 y(2)5992
24605 y(3)5992 21455 y(4)5992 18305 y(5)7003 35114 y(0)2679
b(1)g(2)h(3)g(4)f(5)h(6)g(7)f(8)7238 33768 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7238 33768
a 7238 33768 a
tx@Dict begin  { 255.5741 170.03743 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7238 33768 a 7238 33768 a
tx@Dict begin  { 5.0 28.72252 8.26648 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7238 33768 a
5648 34226 a Fp(t)433 b(in)h(h)7238 33768 y
tx@Dict begin  PutEnd  end
 7238 33768
a 7238 33768 a
tx@Dict begin  PutEnd  end
 7238 33768 a 7238 33768 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7238 33768 a
7238 33768 a
tx@Dict begin  { 0.0 0.0 pop 255.5741 170.03743 exch pop } PutCoor
PutBegin  end
 7238 33768 a 7238 33768 a
tx@Dict begin  { 5.0 65.74617 9.51021 3.0 -40.  Uput UUput } PutCoor
PutBegin  end
 7238 33768 a 3599
34128 a Fo(f)142 b Fn(\()p Fo(t)p Fn(\))432 b Fp(in)i
Fo(m)8952 33646 y Fl(3)9477 34128 y Fo(=h)7238 33768
y
tx@Dict begin  PutEnd  end
 7238 33768 a 7238 33768 a
tx@Dict begin  PutEnd  end
 7238 33768 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (0.014970220434915651*x^(3.0)-0.17913968982498327*x^(2.0)-0.02502066476408853*x+5.017520661157025)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 35529 36136 a
currentpoint initclip moveto
 35529 36136 a
5417 36136 a
 currentpoint currentpoint translate 1 1.19499 div 1 1.19499 div scale
neg exch neg exch translate
 5417 36136 a 921 41780 a Fp(Kreuze)f(die)h(f\374r)f(die)h
(F)-108 b(unktion)433 b Fo(f)575 b Fp(zutre\033ende\(n\))431
b(A)-36 b(ussage\(n\))433 b(an!)p 1058 42821 44702 45
v 1058 48031 45 5211 v 1767 44762 a(An)g(der)g(Stelle)g
Fo(t)369 b Fn(=)g(4)434 b Fp(geh)-36 b(t)433 b(die)g(Linkskr\374mm)-36
b(ung)433 b Fn(\()p Fo(f)28892 44280 y Fh(00)29458 44762
y Fn(\()p Fo(t)p Fn(\))368 b Fo(>)h Fn(0\))433 b Fp(in)h(eine)g(Rec)-36
b(h)g(ts-)1767 46754 y(kr\374mm)g(ung)432 b Fn(\()p Fo(f)9631
46272 y Fh(00)10197 46754 y Fn(\()p Fo(t)p Fn(\))368
b Fo(<)h Fn(0\))433 b Fp(\374b)36 b(er.)p 43350 48031
V 45715 48031 V 1058 48075 44702 45 v 1058 53285 45 5211
v 1767 50016 a(An)433 b(der)g(Stelle)g Fo(t)369 b Fn(=)g(4)434
b Fp(geh)-36 b(t)433 b(die)g(Rec)-36 b(h)g(tskr\374mm)g(ung)433
b Fn(\()p Fo(f)29579 49534 y Fh(00)30144 50016 y Fn(\()p
Fo(t)p Fn(\))368 b Fo(<)h Fn(0\))434 b Fp(in)f(eine)h(Links-)1767
52008 y(kr\374mm)-36 b(ung)432 b Fn(\()p Fo(f)9631 51526
y Fh(00)10197 52008 y Fn(\()p Fo(t)p Fn(\))368 b Fo(>)h
Fn(0\))433 b Fp(\374b)36 b(er.)p 43350 53285 V 1 0 0
TeXcolorrgb 44058 51012 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45715 53285 V 1058 53329 44702
45 v 1058 56400 45 3071 v 1767 55197 a Fp(Der)433 b(W)-108
b(ert)433 b(der)g(zw)-36 b(eiten)434 b(Ableitung)f(der)g(F)-108
b(unktion)433 b Fo(f)576 b Fp(an)433 b(der)g(Stelle)h(4)g(ist)g(n)-36
b(ull.)p 43350 56400 V 1 0 0 TeXcolorrgb 1615 w Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45715
56400 V 1058 56444 44702 45 v 1058 59662 45 3219 v 1767
58385 a Fp(Es)433 b(gilt)h Fo(f)6693 57903 y Fh(00)7259
58385 y Fn(\()p Fo(t)p Fn(\))368 b Fo(>)h Fn(0)434 b
Fp(f\374r)f Fo(t)369 b(>)g Fn(4)p Fp(.)p 43350 59662
V 1 0 0 TeXcolorrgb 27194 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45715 59662 V 1058 59707
44702 45 v 1058 62770 45 3064 v 1767 61567 a Fp(F)-27
b(\374r)432 b Fo(t)369 b(>)f Fn(4)434 b Fp(sinkt)g(die)g(pro)f(Stunde)f
(zu\035ie\377ende)h(W)-108 b(assermenge.)p 43350 62770
V 1 0 0 TeXcolorrgb 44058 61570 a Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45715 62770 V 1058 62814
44702 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 66953 54804 45 v 0 TeXcolorgray
24746 81281 a Fp(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(10)f(Lokales)f(Maxim)
-60 b(um)718 b(-)f(L)-179 b(T)717 b(-)h(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fp(10.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(P)-36 b(olynomfunktion)435 b Fo(f)142 b
Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 5417 30089 a
 currentpoint currentpoint translate 1.1411 1.1411 scale neg exch neg
exch translate
 5417
30089 a 5417 30089 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 284.86345 a add def
/d 0.0 a add neg def /h 165.73886 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 30089 a 7879 27412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 262.6278  0 -22.23564  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -22.23564
 262.6278  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.18196  def /maxTickline 141.5569  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 141.5569
0.0 -24.18196   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 262.6278
0.0 -22.23564 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 141.5569  0 -24.18196  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -24.18196
 141.5569  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.23564  def /maxTickline 262.6278  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 141.5569
0.0 -24.18196   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 262.6278
0.0 -22.23564 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7879 27412 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7879
27412 a 7879 27412 a
tx@Dict begin  { 262.6278 141.5569 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 7879 27412 a 7879 27412 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7879 27412
a 7536 27698 a Fp(x)7879 27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412
a
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7879 27412 a 7879 27412 a
tx@Dict begin  { 0.0 0.0 pop 262.6278 141.5569 exch pop } PutCoor PutBegin
 end

7879 27412 a 7879 27412 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7879 27412 a 6831 27744 a Fp(f\(x\))7879
27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  PutEnd  end
 7879 27412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.7814904010589985 def /x1 9.230315974383739
def /dx x1 x sub 199 div def /F@pstplot (-0.08682831909928161*x^(3.0)+0.9239298007232759*x^(2.0)-2.084425983432184*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.805 115.44426 161.805 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
7879 27412 a
tx@Dict begin  { 159.47272 -2.16989 } PutCoor PutBegin  end
 7879 27412 a 572 x Fo(x)8618 28183 y Fl(1)7879
27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  { -9.28699 85.01567 } PutCoor PutBegin  end
 7879 27412 a -172 x
Fc(f)7879 27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 36951 30089 a
currentpoint initclip moveto
 36951 30089
a 5417 30089 a
 currentpoint currentpoint translate 1 1.1411 div 1 1.1411 div scale
neg exch neg exch translate
 5417 30089 a 921 36066 a Fp(Erg\344nze)358
b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f
(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360
b(ric)-36 b(h)g(tigen)921 38057 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)855 41548 y(W)-108
b(enn)p 4706 41548 3150 45 v 8327 41500 a(1)7855 41548
y Fj(\015)p 9449 41548 V 3533 w Fp(ist)383 b(und)p 17512
41548 V 21134 41500 a(2)20662 41548 y Fj(\015)p 22256
41548 V 3532 w Fp(ist,)h(b)36 b(esitzt)382 b(die)h(gegeb)36
b(ene)383 b(F)-108 b(unktion)382 b Fo(f)921 43540 y Fp(an)433
b(der)g(Stelle)h Fo(x)9247 43739 y Fl(1)10207 43540 y
Fp(ein)f(lokales)j(Maxim)-36 b(um.)p 0 TeXcolorgray 0
TeXcolorgray 11174 44912 9986 45 v 11174 47996 45 3085
v 15842 46693 a(1)15370 46741 y Fj(\015)p 21115 47996
V 11174 48041 9986 45 v 11174 51374 45 3334 v 11883 50097
a Fo(f)12666 49615 y Fh(0)12976 50097 y Fn(\()p Fo(x)14221
50296 y Fl(1)14747 50097 y Fn(\))369 b Fo(<)f Fn(0)p
18750 51374 V 19459 50039 a Fi(2)p 21115 51374 V 11174
51418 9986 45 v 11174 54751 45 3334 v 11883 53474 a Fo(f)12666
52992 y Fh(0)12976 53474 y Fn(\()p Fo(x)14221 53673 y
Fl(1)14747 53474 y Fn(\))h(=)f(0)p 18750 54751 V 1 0 0
TeXcolorrgb 19459 53416 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 21115 54751 V 11174 54795
9986 45 v 11174 58128 45 3334 v 11883 56851 a Fo(f)12666
56369 y Fh(0)12976 56851 y Fn(\()p Fo(x)14221 57050 y
Fl(1)14747 56851 y Fn(\))h Fo(>)f Fn(0)p 18750 58128
V 19459 56794 a Fi(2)p 21115 58128 V 11174 58172 9986
45 v 0 TeXcolorgray 0 TeXcolorgray 30427 44912 9808 45
v 30427 47996 45 3085 v 35005 46693 a Fp(2)34533 46741
y Fj(\015)p 40190 47996 V 30427 48041 9808 45 v 30427
51374 45 3334 v 31135 50097 a Fo(f)31918 49615 y Fh(00)32484
50097 y Fn(\()p Fo(x)33729 50296 y Fl(1)34255 50097 y
Fn(\))g Fo(<)h Fn(0)p 37824 51374 V 1 0 0 TeXcolorrgb
38533 50039 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 40190 51374 V 30427 51418 9808 45 v 30427
54751 45 3334 v 31135 53474 a Fo(f)31918 52992 y Fh(00)32484
53474 y Fn(\()p Fo(x)33729 53673 y Fl(1)34255 53474 y
Fn(\))f(=)h(0)p 37824 54751 V 38533 53416 a Fi(2)p 40190
54751 V 30427 54795 9808 45 v 30427 58128 45 3334 v 31135
56851 a Fo(f)31918 56369 y Fh(00)32484 56851 y Fn(\()p
Fo(x)33729 57050 y Fl(1)34255 56851 y Fn(\))f Fo(>)h
Fn(0)p 37824 58128 V 38533 56794 a Fi(2)p 40190 58128
V 30427 58172 9808 45 v 47992 4800 a Fg(___/1)p 1 0 0
TeXcolorrgb 47998 6792 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62200 54804 45
v 0 TeXcolorgray 24746 81281 a Fp(7)p 0 TeXcolorgray
eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(11)f(P\035anzen)-60
b(w)g(ac)g(hstum)716 b(-)i(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fp(11.)p 0 TeXcolorgray 651 w(Die)529 b(H\366he)g
Fo(h)g Fp(\(in)f(cm\))h(v)-36 b(on)529 b(drei)f(v)-36
b(ersc)g(hiedenen)528 b(P\035anzen)g(in)h(Abh\344ngigk)-36
b(eit)529 b(v)-36 b(on)530 b(der)921 6792 y(Zeit)560
b Fo(t)g Fp(\(in)h(T)-108 b(agen\))560 b(wurde)g(\374b)36
b(er)560 b(einen)g(l\344neren)g(Zeitraum)g(b)36 b(eobac)-36
b(h)g(tet)560 b(und)f(mittels)921 8784 y(geeigneter)445
b(F)-108 b(unktionen)443 b Fo(h)14680 8983 y Fl(1)15650
8784 y Fp(\(f\374r)h(die)g(P\035anze)g(1\),)h Fo(h)27624
8983 y Fl(2)28594 8784 y Fp(\(f\374r)f(die)h(P\035anze)f(2\))g(und)f
Fo(h)42819 8983 y Fl(3)43789 8784 y Fp(\(f\374r)921 10776
y(die)542 b(P\035anze)g(3\))g(mo)36 b(delliert.)544 b(Die)f(nac)-36
b(hstehende)541 b(Abbildung)g(zeigt)i(die)f(Graphen)f(der)921
12768 y(drei)433 b(F)-108 b(unktionen)433 b Fo(h)11118
12967 y Fl(1)11643 12768 y Fo(;)221 b(h)12974 12967 y
Fl(2)13934 12768 y Fp(und)432 b Fo(h)17284 12967 y Fl(3)17810
12768 y Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 5418 43364
a
 currentpoint currentpoint translate 0.53987 0.53987 scale neg exch
neg exch translate
 5418 43364 a 5418 43364 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 602.07489 a add def
/d 0.0 a add neg def /h 478.01093 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 43364 a 8782 39256 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 17 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 571.68323 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 22 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 440.89421 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 571.68323  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 571.68323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 440.89421  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 440.89421
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 571.68323
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 440.89421  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 440.89421  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 571.68323  def /dT 3729358 abs 65536 div viceversa
{ neg } if def /DT 2. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 440.89421
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 571.68323
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7537 39541 a Fl(0)7537 33242
y(2)7537 26942 y(4)7537 20643 y(6)7537 14344 y(8)7067
8045 y(10)7067 1746 y(12)7067 -4554 y(14)8547 40601 y(0)2680
b(1)f(2)h(3)g(4)f(5)h(6)f(7)h(8)g(9)2444 b(10)2210 b(11)f(12)h(13)f(14)
h(15)g(16)f(17)h(18)f(19)8782 39256 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8782 39256 a 8782
39256 a
tx@Dict begin  { 571.68323 440.89421 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 5.0 86.49237 9.0 3.0 140.  Uput UUput } PutCoor PutBegin
 end
 8782 39256 a 3995 39588
a Fp(Zeit)434 b(t)f(\(in)g(T)-108 b(agen\))8782 39256
y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

8782 39256 a 8782 39256 a
tx@Dict begin  { 0.0 0.0 pop 571.68323 440.89421 exch pop } PutCoor
PutBegin  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 5.0 78.65541 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 8782
39256 a 4429 39588 a Fp(H\366he)434 b(h)f(\(in)g(cm\))8782
39256 y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  PutEnd  end
 8782 39256 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (-0.04210203007154861*x^(2.0)+1.4097473919609318*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (-0.004513999874025487*x^(3.0)+0.12102207500187186*x^(2.0)-0.05864538379486307*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (0.0418190236099568*x^(2.0)-0.015434862840929712*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 8782 39256 a
tx@Dict begin  { 244.19101 308.62039 } PutCoor PutBegin  end
 8782
39256 a 922 x Fo(h)9531 40377 y Fl(3)8782 39256 y
tx@Dict begin  PutEnd  end
 8782
39256 a 8782 39256 a
tx@Dict begin  { 276.11916 249.32489 } PutCoor PutBegin  end
 8782 39256 a 922 x Fo(h)9531 40377
y Fl(2)8782 39256 y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 375.55267 261.18425 } PutCoor PutBegin  end
 8782 39256
a 922 x Fo(h)9531 40377 y Fl(1)8782 39256 y
tx@Dict begin  PutEnd  end
 8782 39256
a 72065 43364 a
currentpoint initclip moveto
 72065 43364 a 5418 43364 a
 currentpoint currentpoint translate 1 0.53987 div 1 0.53987 div scale
neg exch neg exch translate
 5418 43364
a 921 49008 a Fp(Kreuze)g(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)
-36 b(ussagen)434 b(an!)p 1054 49975 44710 45 v 1054
53193 45 3219 v 1762 51916 a(Der)g(Graph)e(der)h(F)-108
b(unktion)433 b Fo(h)16863 52115 y Fl(1)17822 51916 y
Fp(ist)h(im)g(In)-36 b(terv)-72 b(all)434 b([1;5])h(links)f(gekr\374mm)
-36 b(t.)p 43354 53193 V 1 0 0 TeXcolorrgb 5344 w Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45719
53193 V 1054 53238 44710 45 v 1054 58116 45 4878 v 1762
55179 a Fp(Die)413 b(W)-108 b(ac)-36 b(hstumsgesc)g(h)g(windigk)g(eit)
412 b(v)-36 b(on)412 b(P\035anze)g(1)g(nimm)-36 b(t)412
b(im)g(In)-36 b(terv)-72 b(all)413 b([11;13])1762 57171
y(ab.)p 43354 58116 V 45719 58116 V 1054 58160 44710
45 v 1054 63296 45 5137 v 1762 60101 a(W)-36 b(\344hrend)433
b(des)g(Beobac)-36 b(h)g(tungszeitraums)433 b([0;17])j(nimm)-36
b(t)433 b(die)g(W)-108 b(ac)-36 b(hstumsge-)1762 62093
y(sc)g(h)g(windigk)g(eit)434 b(v)-36 b(on)434 b(P\035anze)f(2)h
(st\344ndig)g(zu.)p 43354 63296 V 45719 63296 V 1054
63340 44710 45 v 1054 66558 45 3219 v 1762 65281 a(F)-27
b(\374r)433 b(alle)h(W)-108 b(erte)434 b Fo(t)368 b Fm(2)h
Fn([)8 b(0;)221 b(17])435 b Fp(gilt)g Fo(h)19312 64799
y Fh(00)19312 65610 y Fl(3)19877 65281 y Fn(\()p Fo(t)p
Fn(\))369 b Fm(\024)g Fn(0)p 43354 66558 V 1 0 0 TeXcolorrgb
20283 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45719 66558 V 1054 66603 44710 45 v 1054
69821 45 3219 v 1762 68544 a Fp(F)-27 b(\374r)433 b(alle)h(W)-108
b(erte)434 b Fo(t)368 b Fm(2)h Fn([)8 b(3;)221 b(8])435
b Fp(gilt)f Fo(h)18661 68062 y Fh(0)18661 68872 y Fl(1)19187
68544 y Fn(\()p Fo(t)p Fn(\))368 b Fo(<)h Fn(0)p 43354
69821 V 45719 69821 V 1054 69865 44710 45 v 47992 4800
a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
74004 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(8)p
0 TeXcolorgray eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fq(AN)978 b(3.3)f(-)h(12)g(Lokale)f(Eigensc)
-60 b(haften)976 b(einer)g(F)-179 b(unktion)975 b(-)j(ZO)g(-)-2331
4515 y(BIFIE)p 0 TeXcolorgray -1391 7823 a Fp(12.)p 0
TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h(F)
-108 b(unktion)433 b Fo(f)142 b Fp(.)921 10368 y(Die)406
b(eingezeic)-36 b(hneten)405 b(Punkte)h Fo(A;)221 b(B)67
b(;)221 b(C)23 b(;)221 b(D)36 b(;)221 b(E)78 b(;)221
b(F)36 b(;)221 b(G;)g(H)512 b Fp(und)404 b Fo(I)510 b
Fp(liegen)406 b(auf)g(dem)g(F)-108 b(unkti-)921 12360
y(onsgraphen;)313 b(w)-36 b(eiters)314 b(sind)e(die)i(T)-108
b(angen)-36 b(ten)312 b(in)h(A)p Fo(;)221 b(C)23 b(;)221
b(E)392 b Fp(und)312 b Fo(G)h Fp(eingetragen;)h(in)f
Fo(B)67 b(;)221 b(D)36 b(;)221 b(H)921 14352 y Fp(und)432
b Fo(I)538 b Fp(ist)434 b(die)f(T)-108 b(angen)-36 b(te)433
b(horizon)-36 b(tal)434 b(\(w)-36 b(aagrec)g(h)g(t\).)p
0 TeXcolorgray 0 TeXcolorgray 2218 42009 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 382.85384 a add def
/d 0.0 a add neg def /h 209.84897 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2218 42009
a 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 279.41222 0.0 -103.44162 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 116.81055 0.0 -93.03842   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 279.41222  0 -103.44162  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.44162
 279.41222  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-93.03842  def /maxTickline 116.81055  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 116.81055
0.0 -93.03842   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 279.41222
0.0 -103.44162 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 116.81055  0 -93.03842  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -93.03842
 116.81055  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.44162  def /maxTickline 279.41222  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 116.81055
0.0 -93.03842   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 279.41222
0.0 -103.44162 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13669 31710 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

13669 31710 a 13669 31710 a
tx@Dict begin  { 279.41222 116.81055 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13669 31710 a 13669 31710
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13669 31710 a 13326 31996 a Fp(x)13669 31710 y
tx@Dict begin  PutEnd  end
 13669
31710 a 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a 13669 31710 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13669
31710 a 13669 31710 a
tx@Dict begin  { 0.0 0.0 pop 279.41222 116.81055 exch pop } PutCoor
PutBegin  end
 13669 31710 a 13669 31710 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 13669
31710 a 13326 31867 a Fp(y)13669 31710 y
tx@Dict begin  PutEnd  end
 13669 31710
a 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 9.820220603907824 def
/dx x1 x sub 199 div def /F@pstplot (-5.555110798399976E-4*x^(6.0)+0.019850289694066662*x^(5.0)-0.2687826512955311*x^(4.0)+1.703233896493089*x^(3.0)-4.815576026222835*x^(2.0)+3.5949090632028415*x+2.147480666169065)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6355667060082197 def /x1 2 def
/dx x1 x sub 199 div def /F@pstplot (-0.007933237741692101*x^(5.0)-0.021919040655537094*x^(4.0)-0.13556938065418442*x^(3.0)-0.22315688536656297*x^(2.0)+0.6692093264838113*x+1.2433321919548455)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5 def /x1 -2.5 def /dx x1 x sub
49 div def /F@pstplot ((-6.453782600701254-2.4979275335670845*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8 def /x1 0.6 def /dx x1 x sub
49 div def /F@pstplot ((--1.2707402119495215--0.803770489476355*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 1 def /x1 2.1 def /dx x1 x sub 49
div def /F@pstplot ((--3.8502573771817783-1.8049947678049099*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 3.5 def /dx x1 x sub 49
div def /F@pstplot ((--2.745588972279339-1.5273264011153778*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 313.9644
102.25204   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 325.33316 68.75356 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fc(J)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 226.3846
-38.55681   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 224.77649 -35.36969 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fc(I)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 113.30562
-64.6521   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 110.96552 -61.534 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fc(H)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 76.77238 -39.13684
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 79.17456 -35.90369 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fc(G)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 46.43585 25.73405
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 48.7386 28.70628 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fc(E)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 58.88393 3.07597 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fc(F)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ -85.35823
29.59065   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { -82.08296 35.11397 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fc(A)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -19.31291 20.63275
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { -24.41467 26.03624 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fc(C)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a 13669 31710 a
tx@Dict begin  { -99.5846 85.35823 } PutCoor PutBegin  end
 13669 31710 a -259 x Fo(f)13669
31710 y
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -56.90549 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { -59.75093 -8.5359 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fc(B)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 22.50612 44.24162
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 22.76227 47.3949 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fc(D)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a 44599 42009 a
currentpoint initclip moveto
 44599 42009 a 921 45993 a
Fp(Ordne)432 b(den)h(angegeb)36 b(enen)434 b(Eigensc)-36
b(haften)433 b(jew)-36 b(eils)435 b(einen)e(der)g(markierten)h(Punkte)f
(zu.)p 0 TeXcolorgray 0 TeXcolorgray 4666 47590 18684
45 v 23350 47590 4523 45 v 4666 50923 45 3334 v 5374
49646 a Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b Fo(<)g
Fn(0)p Fp(,)434 b Fo(f)11886 49164 y Fh(0)12196 49646
y Fn(\()p Fo(x)p Fn(\))369 b(=)g(0)p Fp(,)434 b Fo(f)17925
49164 y Fh(00)18491 49646 y Fn(\()p Fo(x)p Fn(\))368
b Fo(<)h Fn(0)p 23305 50923 V 0.9 TeXcolorgray 23350
50923 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 25092
49771 a Fp(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 27828 50923 45 3334 v 4666 50967 18684 45
v 23350 50967 4523 45 v 4666 54300 45 3334 v 5374 53023
a Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b Fo(>)g Fn(0)p
Fp(,)434 b Fo(f)11886 52541 y Fh(0)12196 53023 y Fn(\()p
Fo(x)p Fn(\))369 b Fo(>)g Fn(0)p Fp(,)434 b Fo(f)17925
52541 y Fh(00)18491 53023 y Fn(\()p Fo(x)p Fn(\))368
b(=)h(0)p 23305 54300 V 0.9 TeXcolorgray 23350 54300
4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 25119 53148
a Fp(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
27828 54300 45 3334 v 4666 54344 18684 45 v 23350 54344
4523 45 v 4666 57677 45 3334 v 5374 56400 a Fo(f)142
b Fn(\()p Fo(x)p Fn(\))369 b(=)g(0)p Fp(,)434 b Fo(f)11886
55918 y Fh(0)12196 56400 y Fn(\()p Fo(x)p Fn(\))369 b(=)g(0)p
Fp(,)434 b Fo(f)17925 55918 y Fh(00)18491 56400 y Fn(\()p
Fo(x)p Fn(\))368 b Fo(>)h Fn(0)p 23305 57677 V 0.9 TeXcolorgray
23350 57677 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
25128 56526 a Fp(B)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27828 57677 45 3334 v 4666 57722 18684
45 v 23350 57722 4523 45 v 4666 61055 45 3334 v 5374
59778 a Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b Fo(>)g
Fn(0)p Fp(,)434 b Fo(f)11886 59296 y Fh(0)12196 59778
y Fn(\()p Fo(x)p Fn(\))369 b Fo(<)g Fn(0)p Fp(,)434 b
Fo(f)17925 59296 y Fh(00)18491 59778 y Fn(\()p Fo(x)p
Fn(\))368 b Fo(>)h Fn(0)p 23305 61055 V 0.9 TeXcolorgray
23350 61055 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
25077 59903 a Fp(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27828 61055 45 3334 v 4666 61099 18684
45 v 23350 61099 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
33159 47590 4567 45 v 37725 47590 2436 45 v 33159 50849
45 3260 v 0.92 TeXcolorgray 33203 50849 4478 3260 v 0
TeXcolorgray 34930 49771 a(A)p 37681 50849 45 3260 v
2484 w(A)p 40116 50849 V 33159 50893 4567 45 v 37725
50893 2436 45 v 33159 54152 45 3260 v 0.92 TeXcolorgray
33203 54152 4478 3260 v 0 TeXcolorgray 34981 53074 a(B)p
37681 54152 45 3260 v 2487 w(B)p 40116 54152 V 33159
54197 4567 45 v 37725 54197 2436 45 v 33159 57456 45
3260 v 0.92 TeXcolorgray 33203 57456 4478 3260 v 0 TeXcolorgray
34972 56378 a(C)p 37681 57456 45 3260 v 2478 w(C)p 40116
57456 V 33159 57500 4567 45 v 37725 57500 2436 45 v 33159
60759 45 3260 v 0.92 TeXcolorgray 33203 60759 4478 3260
v 0 TeXcolorgray 34945 59681 a(D)p 37681 60759 45 3260
v 2451 w(D)p 40116 60759 V 33159 60804 4567 45 v 37725
60804 2436 45 v 33159 64063 45 3260 v 0.92 TeXcolorgray
33203 64063 4478 3260 v 0 TeXcolorgray 34999 62985 a(E)p
37681 64063 45 3260 v 2505 w(E)p 40116 64063 V 33159
64107 4567 45 v 37725 64107 2436 45 v 33159 67366 45
3260 v 0.92 TeXcolorgray 33203 67366 4478 3260 v 0 TeXcolorgray
35017 66288 a(F)p 37681 67366 45 3260 v 2523 w(F)p 40116
67366 V 33159 67411 4567 45 v 37725 67411 2436 45 v 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Ff(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
73778 54804 45 v 0 TeXcolorgray 24746 81281 a Fp(9)p
0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(13)f(F)-179
b(unktionseigensc)-60 b(haften)712 b(-)718 b(MC)g(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fp(13.)p 0 TeXcolorgray 651
w(Die)355 b(Abbildung)e(zeigt)h(den)f(Graphen)g(der)g
(Ableitungsfunktion)h Fo(f)34383 4318 y Fh(0)35047 4800
y Fp(einer)g(P)-36 b(olynomfunk-)921 6792 y(tion)434
b Fo(f)142 b Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 9974
41713 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 242.72269 a add def
/d 0.0 a add neg def /h 297.13525 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9974 41713 a 21058 29797 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 142.59714 0.0 -100.12555 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 189.4819 0.0 -107.65335   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 142.59714  0 -100.12555  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.12555
 142.59714  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.65335  def /maxTickline 189.4819  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 189.4819
0.0 -107.65335   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.59714
0.0 -100.12555 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 189.4819  0 -107.65335  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.65335
 189.4819  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.12555  def /maxTickline 142.59714  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 189.4819
0.0 -107.65335   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.59714
0.0 -100.12555 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19081 33186 a
Fh(\000)p Fl(1)19081 36335 y Fh(\000)p Fl(2)19081 39485
y Fh(\000)p Fl(3)19813 26932 y(1)19813 23783 y(2)19813
20633 y(3)19813 17484 y(4)19813 14334 y(5)19813 11184
y(6)23972 31142 y(1)2680 b(2)g(3)f(4)-16584 b Fh(\000)p
Fl(1)-4351 b Fh(\000)p Fl(2)f Fh(\000)p Fl(3)21058 29797
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 21058 29797 a 21058 29797 a
tx@Dict begin  { 142.59714 189.4819 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 21058 29797 a 21058 29797
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 21058 29797 a 20715 30083 a Fp(x)21058 29797 y
tx@Dict begin  PutEnd  end
 21058
29797 a 21058 29797 a
tx@Dict begin  PutEnd  end
 21058 29797 a 21058 29797 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 21058
29797 a 21058 29797 a
tx@Dict begin  { 0.0 0.0 pop 142.59714 189.4819 exch pop } PutCoor
PutBegin  end
 21058 29797 a 21058 29797 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 21058
29797 a 20715 29954 a Fp(y)21058 29797 y
tx@Dict begin  PutEnd  end
 21058 29797
a 21058 29797 a
tx@Dict begin  PutEnd  end
 21058 29797 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.519015652326958 def /x1 5.011717602655804
def /dx x1 x sub 199 div def /F@pstplot (-0.32497368781752023*x^(3.0)+1.004188921320476*x^(2.0)-0.08780357360374604*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 21058 29797 a
tx@Dict begin  { -42.51239 148.40569 } PutCoor PutBegin  end
 21058 29797 a -172 x Fc(f)21608
29312 y Fb(0)21058 29797 y
tx@Dict begin  PutEnd  end
 21058 29797 a 36843 41713
a
currentpoint initclip moveto
 36843 41713 a 921 45366 a Fp(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
2757 46333 40871 45 v 2757 49403 45 3071 v 3465 48200
a(Die)g(F)-108 b(unktion)433 b Fo(f)576 b Fp(hat)433
b(an)g(der)g(Stelle)h Fo(x)369 b Fn(=)g(3)434 b Fp(einen)f(lokalen)i
(Ho)36 b(c)-36 b(hpunkt.)p 41218 49403 V 1 0 0 TeXcolorrgb
1372 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43583 49403 V 2757 49447 40871 45 v 2757 52665 45 3219
v 3465 51389 a Fp(Die)434 b(F)-108 b(unktion)433 b Fo(f)576
b Fp(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434 b([2;5])h(streng)f
(monoton)f(fallend.)p 41218 52665 V 43583 52665 V 2757
52710 40871 45 v 2757 55780 45 3071 v 3465 54577 a(Die)h(F)-108
b(unktion)433 b Fo(f)576 b Fp(hat)433 b(an)g(der)g(Stelle)h
Fo(x)369 b Fn(=)g(0)434 b Fp(einen)f(W)-108 b(endepunkt.)p
41218 55780 V 1 0 0 TeXcolorrgb 4912 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43583 55780 V 2757 55825
40871 45 v 2757 58895 45 3071 v 3465 57692 a Fp(Die)434
b(F)-108 b(unktion)433 b Fo(f)576 b Fp(hat)433 b(an)g(der)g(Stelle)h
Fo(x)369 b Fn(=)g(0)434 b Fp(eine)f(lokale)j(Extremstelle.)p
41218 58895 V 43583 58895 V 2757 58939 40871 45 v 2757
62157 45 3219 v 3465 60880 a(Die)e(F)-108 b(unktion)433
b Fo(f)576 b Fp(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b([-2;0])h(links)f(gekr\374mm)-36 b(t.)p 41218 62157
V 43583 62157 V 2757 62202 40871 45 v 47992 4800 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66230
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(10)p 0 TeXcolorgray
eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(14)f(F)-179
b(unktionseigensc)-60 b(haften)712 b(-)718 b(MC)g(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fp(14.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(P)-36 b(olynomfunktion)435
b Fo(f)575 b Fp(mit)434 b(der)f(F)-108 b(unktionsgleic)-36
b(h)g(ung)p 0 TeXcolorgray 0 TeXcolorgray 14555 8453
a Fo(f)142 b Fn(\()p Fo(x)p Fn(\))368 b(=)h Fo(a)295
b Fm(\001)g Fo(x)21219 7971 y Fl(3)22040 8453 y Fn(+)g
Fo(b)g Fm(\001)g Fo(x)25598 7971 y Fl(2)26420 8453 y
Fn(+)f Fo(c)h Fm(\001)h Fo(x)f Fn(+)g Fo(d)921 12105
y Fp(mit)434 b(den)e(P)-36 b(arametern)434 b Fo(a)368
b Fm(6)p Fn(=)h(0;)221 b Fo(a;)g(b;)g(c;)g(d)371 b Fm(2)e
Fk(R)p Fp(.)921 14651 y(Die)519 b(F)-108 b(unktion)517
b Fo(f)659 b Fp(hat)518 b(einen)g(Ho)36 b(c)-36 b(hpunkt)517
b(im)h(Punkt)f Fo(H)615 b Fn(=)512 b(\(2)p Fo(=)p Fn(2\))518
b Fp(und)f(einen)h(W)-108 b(ende-)921 16642 y(punkt)354
b(an)i(der)f(Stelle)g Fo(x)12728 16841 y Fl(2)13623 16642
y Fn(=)369 b Fm(\000)p Fn(1)p Fp(.)356 b(An)f(der)g(Stelle)h
Fo(x)25821 16841 y Fl(3)26715 16642 y Fn(=)369 b(3)356
b Fp(hat)f(die)g(Steigung)g(der)g(F)-108 b(unktion)921
18634 y(den)433 b(W)-108 b(ert)433 b(-9.)921 21180 y(Kreuze)g(die)h
(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433 b(an!)p
18079 22220 10226 45 v 18079 25438 45 3219 v 18787 24161
a Fo(f)19570 23679 y Fh(0)19881 24161 y Fn(\(3\))369
b(=)f Fm(\000)p Fn(9)p 25895 25438 V 1 0 0 TeXcolorrgb
1629 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
28261 25438 V 18079 25483 10226 45 v 18079 28701 45 3219
v 18787 27424 a Fo(f)142 b Fn(\(2\))369 b(=)g(0)p 25895
28701 V 28261 28701 V 18079 28745 10226 45 v 18079 31963
45 3219 v 18787 30686 a Fo(f)19570 30204 y Fh(00)20136
30686 y Fn(\()p Fm(\000)p Fn(1\))g(=)g(0)p 25895 31963
V 1 0 0 TeXcolorrgb 1373 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28261 31963 V 18079 32007
10226 45 v 18079 35226 45 3219 v 18787 33949 a Fo(f)19570
33467 y Fh(0)19881 33949 y Fn(\(2\))g(=)f(0)p 25895 35226
V 1 0 0 TeXcolorrgb 2662 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28261 35226 V 18079 35270
10226 45 v 18079 38488 45 3219 v 18787 37211 a Fo(f)19570
36729 y Fh(00)20136 37211 y Fn(\(2\))h(=)g(0)p 25895
38488 V 28261 38488 V 18079 38532 10226 45 v 47992 4800
a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
42560 54804 45 v -2331 47862 a Fq(AN)718 b(3.3)f(-)h(15)f(Monotonie)f
(-)i(L)-179 b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391
51169 a Fp(15.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(reelle)h(F)-108 b(unktion)433 b Fo(f)576
b Fp(mit)433 b Fo(f)142 b Fn(\()p Fo(x)p Fn(\))369 b(=)f
Fo(x)27715 50687 y Fl(2)28537 51169 y Fm(\000)295 b Fn(2)p
Fo(x)h Fn(+)e(3)p Fp(.)921 53715 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 55707 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 59197 y(Die)434
b(F)-108 b(unktion)433 b Fo(f)576 b Fp(ist)433 b(im)h(In)-36
b(terv)-72 b(all)434 b([2;3])p 21943 59197 3150 45 v
25565 59149 a(1)25093 59197 y Fj(\015)p 26687 59197 V
3583 w Fp(,)g(w)-36 b(eil)p 33919 59197 V 37541 59149
a(2)37069 59197 y Fj(\015)p 38663 59197 V 3583 w Fp(.)p
0 TeXcolorgray 0 TeXcolorgray 921 60680 18175 45 v 921
63764 45 3085 v 9683 62461 a(1)9211 62509 y Fj(\015)p
19051 63764 V 921 63808 18175 45 v 921 67068 45 3260
v 1629 65864 a Fp(streng)434 b(monoton)f(fallend)p 16686
67068 V 17394 65770 a Fi(2)p 19051 67068 V 921 67112
18175 45 v 921 70371 45 3260 v 1629 69168 a Fp(k)-36
b(onstan)g(t)p 16686 70371 V 17394 69074 a Fi(2)p 19051
70371 V 921 70415 18175 45 v 921 73675 45 3260 v 1629
72471 a Fp(streng)433 b(monoton)g(steigend)p 16686 73675
V 1 0 0 TeXcolorrgb 17394 72377 a Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19051 73675 V 921 73719
18175 45 v 0 TeXcolorgray 0 TeXcolorgray 23409 60680
21236 45 v 23409 63764 45 3085 v 33701 62461 a Fp(2)33229
62509 y Fj(\015)p 44600 63764 V 23409 63808 21236 45
v 23409 67141 45 3334 v 24117 65864 a Fp(f\374r)h(alle)g
Fo(x)369 b Fm(2)g Fn([)8 b(2;)221 b(3])g Fo(f)34540 65382
y Fh(00)35107 65864 y Fn(\()p Fo(x)p Fn(\))369 b Fo(>)g
Fn(0)434 b Fp(gilt)p 42235 67141 V 42943 65807 a Fi(2)p
44600 67141 V 23409 67186 21236 45 v 23409 70519 45 3334
v 24117 69242 a Fp(f\374r)g(alle)g Fo(x)369 b Fm(2)g
Fn([)8 b(2;)221 b(3])g Fo(f)34540 68760 y Fh(0)34852
69242 y Fn(\()p Fo(x)p Fn(\))369 b Fo(>)g Fn(0)433 b
Fp(gilt)p 42235 70519 V 1 0 0 TeXcolorrgb 42943 69184
a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
44600 70519 V 23409 70563 21236 45 v 23409 75699 45 5137
v 24117 72504 a Fp(es)h(ein)f Fo(x)369 b Fm(2)g Fn([)8
b(2;)221 b(3])435 b Fp(mit)f Fo(f)36315 72022 y Fh(0)36625
72504 y Fn(\()p Fo(x)p Fn(\))369 b(=)g(0)24117 74496
y Fp(gibt)p 42235 75699 V 42943 73463 a Fi(2)p 44600
75699 V 23409 75743 21236 45 v 47992 51169 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 53161 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24421
81281 a Fp(11)p 0 TeXcolorgray eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fq(AN)718
b(3.3)f(-)h(16)f(Ableitungsfunktion)712 b(-)718 b(L)-179
b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391 10102 a Fp(16.)p
0 TeXcolorgray 651 w(In)442 b(der)g(nac)-36 b(hstehenden)440
b(Abbildung)i(ist)g(der)g(Graph)f(der)h(Ableitungsfunktion)g
Fo(f)42422 9620 y Fh(0)43175 10102 y Fp(einer)921 12094
y(F)-108 b(unktion)433 b Fo(f)575 b Fp(dargestellt.)p
0 TeXcolorgray 0 TeXcolorgray 9336 45000 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.24992 a add def
/d 0.0 a add neg def /h 275.93463 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9336 45000
a 23476 31415 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 126.51866 0.0 -127.73126 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 153.21178 0.0 -122.72285   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 126.51866  0 -127.73126  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -127.73126
 126.51866  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.72285  def /maxTickline 153.21178  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.21178
0.0 -122.72285   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 126.51866
0.0 -127.73126 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.21178  0 -122.72285  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.72285
 153.21178  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-127.73126  def /maxTickline 126.51866  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.21178
0.0 -122.72285   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 126.51866
0.0 -127.73126 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 21499 34804 a
Fh(\000)p Fl(1)21499 37954 y Fh(\000)p Fl(2)21499 41103
y Fh(\000)p Fl(3)21499 44253 y Fh(\000)p Fl(4)22230 28551
y(1)22230 25401 y(2)22230 22252 y(3)22230 19102 y(4)22230
15953 y(5)26390 32761 y(1)2680 b(2)f(3)h(4)-16584 b Fh(\000)p
Fl(1)-4352 b Fh(\000)p Fl(2)h Fh(\000)p Fl(3)f Fh(\000)p
Fl(4)23476 31415 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23476 31415 a 23476 31415 a
tx@Dict begin  { 126.51866 153.21178 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23476
31415 a 23476 31415 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23476 31415 a 23133 31701 a Fp(x)23476
31415 y
tx@Dict begin  PutEnd  end
 23476 31415 a 23476 31415 a
tx@Dict begin  PutEnd  end
 23476 31415 a 23476
31415 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23476 31415 a 23476 31415 a
tx@Dict begin  { 0.0 0.0 pop 126.51866 153.21178 exch pop } PutCoor
PutBegin  end
 23476 31415 a 23476
31415 a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23476 31415 a 22054 31747 a Fo(f)22837 31265
y Fh(0)23147 31747 y Fn(\()p Fo(x)p Fn(\))23476 31415
y
tx@Dict begin  PutEnd  end
 23476 31415 a 23476 31415 a
tx@Dict begin  PutEnd  end
 23476 31415 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.48924462184089 def /x1 4.446627650059073
def /dx x1 x sub 199 div def /F@pstplot (0.2904063017168803*x^(3.0)-2.613656715451923*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 23476 31415 a
tx@Dict begin  { 83.14967 88.15852 } PutCoor PutBegin  end
 23476 31415 a
974 x Fo(f)24259 31907 y Fh(0)23476 31415 y
tx@Dict begin  PutEnd  end
 23476 31415
a 37481 45000 a
currentpoint initclip moveto
 37481 45000 a 921 48985 a Fp(Kreuze)433
b(die)h(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an.)p 2743 50025 40898 45 v 2743 53243 45 3219 v 3452
51966 a(Die)h(F)-108 b(unktion)433 b Fo(f)575 b Fp(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p
Fn(4;)221 b(4])436 b Fp(drei)d(lokale)i(Extremstellen.)p
41231 53243 V 1 0 0 TeXcolorrgb 1374 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43596 53243 V 2743 53288
40898 45 v 2743 56506 45 3219 v 3452 55229 a Fp(Die)f(F)-108
b(unktion)433 b Fo(f)575 b Fp(ist)434 b(im)g(In)-36 b(terv)-72
b(all)434 b Fn(\(2;)221 b(3\))434 b Fp(streng)f(monoton)h(steigend.)p
41231 56506 V 43596 56506 V 2743 56550 40898 45 v 2743
59768 45 3219 v 3452 58491 a(Die)g(F)-108 b(unktion)433
b Fo(f)575 b Fp(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fn([)8 b Fm(\000)p Fn(3;)221 b(0])436 b Fp(eine)d(W)-108
b(endestelle.)p 41231 59768 V 1 0 0 TeXcolorrgb 6161
w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43596 59768 V 2743 59812 40898 45 v 2743 63030 45 3219
v 3452 61754 a Fp(Die)434 b(F)-108 b(unktion)433 b Fo(f)12147
61271 y Fh(00)13146 61754 y Fp(hat)g(im)h(In)-36 b(terv)-72
b(all)434 b Fn([)8 b Fm(\000)p Fn(3;)221 b(3])436 b Fp(zw)-36
b(ei)434 b(Nullstellen.)p 41231 63030 V 1 0 0 TeXcolorrgb
6101 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43596 63030 V 2743 63075 40898 45 v 2743 66145 45 3071
v 3452 64942 a Fp(Die)g(F)-108 b(unktion)433 b Fo(f)575
b Fp(hat)433 b(an)h(der)f(Stelle)h Fo(x)369 b Fn(=)f(0)434
b Fp(ein)g(lokales)h(Minim)-36 b(um.)p 41231 66145 V
43596 66145 V 2743 66190 40898 45 v 47992 10102 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 12094 a Ff(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 70218
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(12)p 0 TeXcolorgray
eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)752 b(3.3)f(-)h(17)g(Charakteristika)
d(einer)i(P)-60 b(olynomfunktion)748 b(-)k(L)-179 b(T)751
b(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray -1391 7823 a
Fp(17.)p 0 TeXcolorgray 651 w(V)-108 b(on)525 b(einer)h(P)-36
b(olynomfunktion)527 b Fo(f)668 b Fp(ist)526 b(F)-108
b(olgendes)526 b(b)36 b(ekann)-36 b(t:)526 b Fo(f)142
b Fn(\(2\))526 b(=)g(0)p Fo(;)221 b(f)38515 7341 y Fh(0)38826
7823 y Fn(\(2\))526 b(=)g(0)g Fp(und)921 9815 y Fo(f)1704
9333 y Fh(00)2270 9815 y Fn(\(2\))369 b(=)f(1)p Fp(.)921
12360 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
14352 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 17842 y Fo(f)575 b Fp(hat)434 b(an)f(der)g(Stelle)p
12254 17842 3150 45 v 15875 17794 a(1)15403 17842 y Fj(\015)p
16997 17842 V 3584 w Fp(sic)-36 b(her)p 24454 17842 V
28075 17794 a(2)27603 17842 y Fj(\015)p 29197 17842 V
3584 w Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 13805 19214
7355 45 v 13805 22299 45 3085 v 17157 20996 a(1)16685
21044 y Fj(\015)p 21115 22299 V 13805 22343 7355 45 v
13805 25602 45 3260 v 14513 24399 a Fo(x)370 b Fn(=)e(0)p
18750 25602 V 19459 24305 a Fi(2)p 21115 25602 V 13805
25647 7355 45 v 13805 28906 45 3260 v 14513 27703 a Fo(x)i
Fn(=)e(1)p 18750 28906 V 19459 27608 a Fi(2)p 21115 28906
V 13805 28950 7355 45 v 13805 32209 45 3260 v 14513 31006
a Fo(x)i Fn(=)e(2)p 18750 32209 V 1 0 0 TeXcolorrgb 19459
30912 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 21115 32209 V 13805 32254 7355 45 v 0 TeXcolorgray
0 TeXcolorgray 30040 19214 15857 45 v 30040 22299 45
3085 v 37643 20996 a Fp(2)37171 21044 y Fj(\015)p 45852
22299 V 30040 22343 15857 45 v 30040 25602 45 3260 v
30748 24399 a Fp(ein)434 b(lokales)h(Minim)-36 b(um)p
43487 25602 V 1 0 0 TeXcolorrgb 44195 24305 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45852
25602 V 30040 25647 15857 45 v 30040 28906 45 3260 v
30748 27703 a Fp(ein)434 b(lokales)h(Maxim)-36 b(um)p
43487 28906 V 44195 27608 a Fi(2)p 45852 28906 V 30040
28950 15857 45 v 30040 32209 45 3260 v 30748 31006 a
Fp(eine)434 b(W)-108 b(endestelle)p 43487 32209 V 44195
30912 a Fi(2)p 45852 32209 V 30040 32254 15857 45 v 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Ff(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 36282 54804 45 v -2331 41539 a Fq(AN)718 b(3.3)f(-)h(18)f
(Kennzeic)-60 b(hn)g(ung)715 b(v)-60 b(on)717 b(x-W)-179
b(erten)715 b(-)j(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-1391 44846 a Fp(18.)p 0 TeXcolorgray 651 w(Gegeb)36
b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b Fo(p)e Fp(vierten)h(Grades.)p 0 TeXcolorgray 0 TeXcolorgray
5417 69947 a
 currentpoint currentpoint translate 1.13388 1.13388 scale neg exch
neg exch translate
 5417 69947 a 5417 69947 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 286.67953 a add def
/d 0.0 a add neg def /h 183.81792 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 69947 a 14555
63787 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 204.12985  0 -82.54968  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -82.54968
 204.12985  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-98.32816  def /maxTickline 128.16888  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.16888
0.0 -98.32816   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 204.12985
0.0 -82.54968 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.16888  0 -98.32816  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -98.32816
 128.16888  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-82.54968  def /maxTickline 204.12985  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.16888
0.0 -98.32816   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 204.12985
0.0 -82.54968 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14555 63787 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14555 63787 a 14555 63787 a
tx@Dict begin  { 204.12985 128.16888 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14555 63787
a 14555 63787 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14555 63787 a 14212 64073 a Fp(x)14555
63787 y
tx@Dict begin  PutEnd  end
 14555 63787 a 14555 63787 a
tx@Dict begin  PutEnd  end
 14555 63787 a 14555
63787 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14555 63787 a 14555 63787 a
tx@Dict begin  { 0.0 0.0 pop 204.12985 128.16888 exch pop } PutCoor
PutBegin  end
 14555 63787 a 14555
63787 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14555 63787 a 13507 64119 a Fp(f\(x\))14555 63787
y
tx@Dict begin  PutEnd  end
 14555 63787 a 14555 63787 a
tx@Dict begin  PutEnd  end
 14555 63787 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.9012837549228814 def /x1 7.174341949391406
def /dx x1 x sub 199 div def /F@pstplot (0.04476746827082035*x^(4.0)-0.39849247750651484*x^(3.0)+0.4810583904695643*x^(2.0)+2.195760884972902*x-0.43693110431769716)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14555 63787 a
tx@Dict begin  { 39.44162 97.67128 } PutCoor PutBegin  end
 14555 63787 a
572 x Fp(p)14555 63787 y
tx@Dict begin  PutEnd  end
 14555 63787 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 12.72896 17.2928 12.72896 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.90561 56.75179 113.90561 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 12.72896 17.2928
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 113.90561 56.75179
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 12.72896 0.0 
 false NArray  /DS 3.0 0. CLW mul add 2 div def /Symbol 0. [1.8 0.0
0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale <B4>
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 113.90561 0.0
  false NArray  /DS 3.0 0. CLW mul add 2 div def /Symbol 0. [1.8 0.0
0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale <B4>
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 37151
69947 a
currentpoint initclip moveto
 37151 69947 a 5417 69947 a
 currentpoint currentpoint translate 1 1.13388 div 1 1.13388 div scale
neg exch neg exch translate
 5417 69947 a 921 75592
a Fp(Kennzeic)-36 b(hne)433 b(alle)h(Stellen)g(auf)f(der)h(x-A)-36
b(c)g(hse)p 15120 75769 8859 45 v -1 w(,)434 b(f\374r)f(die)h
Fo(p)29581 75110 y Fh(00)30146 75592 y Fn(\()p Fo(x)p
Fn(\))369 b(=)g(0)434 b Fp(gilt!)47992 44846 y Fg(___/1)p
1 0 0 TeXcolorrgb 47998 46838 a Ff(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 77960
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(13)p 0 TeXcolorgray
eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(19)f(W)-179
b(ac)-60 b(hstumsgesc)g(h)g(windigk)g(eit)714 b(-)k(L)-179
b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391 4800 a Fp(19.)p
0 TeXcolorgray 651 w(Das)455 b(W)-108 b(ac)-36 b(hstum)453
b(einer)g(Bakterienkultur)i(wird)f(durc)-36 b(h)452 b(eine)i(F)-108
b(unktion)453 b Fo(N)592 b Fp(b)36 b(esc)-36 b(hrieb)36
b(en.)921 6792 y(Dab)g(ei)434 b(gibt)g Fo(N)139 b Fn(\()p
Fo(t)p Fn(\))432 b Fp(die)i(Anzahl)f(der)g(Bakterien)h(zum)f(Zeitpunkt)
g Fo(t)g Fp(\()p Fo(t)h Fp(in)f(Stunden\))e(an.)921 9338
y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 11330 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)855
14820 y(W)-108 b(enn)p 4864 14820 3150 45 v 8486 14772
a(1)8014 14820 y Fj(\015)p 9608 14820 V 3691 w Fp(p)36
b(ositiv)543 b(sind,)e(erfolgt)i(das)e(Bakterien)-36
b(w)g(ac)g(hstum)542 b(im)g(In)-36 b(terv)-72 b(all)921
16812 y([a;b])p 4028 16812 V 7650 16764 a(2)7178 16812
y Fj(\015)p 8772 16812 V 3583 w Fp(.)p 0 TeXcolorgray
0 TeXcolorgray 3206 18184 22452 45 v 3206 21268 45 3085
v 14106 19966 a(1)13635 20014 y Fj(\015)p 25613 21268
V 3206 21313 22452 45 v 3206 26523 45 5211 v 3914 23254
a Fp(die)434 b(F)-108 b(unktionsw)-36 b(erte)432 b Fo(N)139
b Fn(\()p Fo(t)p Fn(\))432 b Fp(f\374r)i Fo(t)369 b Fm(2)3914
25246 y Fn([)8 b Fo(a)p Fn(;)221 b Fo(b)p Fn(])p 23248
26523 V 23957 24250 a Fi(2)p 25613 26523 V 3206 26567
22452 45 v 3206 31777 45 5211 v 3914 28508 a Fp(die)434
b(F)-108 b(unktionsw)-36 b(erte)432 b Fo(N)16320 28026
y Fh(0)16630 28508 y Fn(\()p Fo(t)p Fn(\))h Fp(f\374r)g
Fo(t)369 b Fm(2)3914 30500 y Fn([)8 b Fo(a)p Fn(;)221
b Fo(b)p Fn(])p 23248 31777 V 23957 29504 a Fi(2)p 25613
31777 V 3206 31821 22452 45 v 3206 37031 45 5211 v 3914
33762 a Fp(die)434 b(F)-108 b(unktionsw)-36 b(erte)432
b Fo(N)16320 33280 y Fh(00)16885 33762 y Fn(\()p Fo(t)p
Fn(\))h Fp(f\374r)h Fo(t)368 b Fm(2)3914 35754 y Fn([)8
b Fo(a)p Fn(;)221 b Fo(b)p Fn(])p 23248 37031 V 1 0 0
TeXcolorrgb 23957 34758 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 25613 37031 V 3206 37076 22452
45 v 0 TeXcolorgray 0 TeXcolorgray 30155 18295 13545
45 v 30155 21379 45 3085 v 36602 20076 a Fp(2)36130 20124
y Fj(\015)p 43655 21379 V 30155 21423 13545 45 v 30155
24683 45 3260 v 30863 23479 a Fp(immer)434 b(sc)-36 b(hneller)p
41290 24683 V 1 0 0 TeXcolorrgb 41998 23385 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 43655
24683 V 30155 24727 13545 45 v 30155 27986 45 3260 v
30863 26783 a Fp(immer)434 b(langsamer)p 41290 27986
V 41998 26689 a Fi(2)p 43655 27986 V 30155 28030 13545
45 v 30155 31290 45 3260 v 30863 30086 a Fp(gleic)-36
b(h)434 b(sc)-36 b(hnell)p 41290 31290 V 41998 29992
a Fi(2)p 43655 31290 V 30155 31334 13545 45 v 47992 4800
a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 41104 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(14)p
0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(20)f
(Ableitungsfunktionen)712 b(-)717 b(MC)h(-)g(BIFIE)p
0 TeXcolorgray -1391 4800 a Fp(20.)p 0 TeXcolorgray 651
w(Die)397 b(nac)-36 b(hstehenden)395 b(Abbildungen)h(zeigen)h(die)f
(Graphen)g(v)-36 b(on)397 b(drei)f(F)-108 b(unktionen)396
b Fo(f)43265 4999 y Fl(1)43791 4800 y Fp(,)h Fo(f)45190
4999 y Fl(2)45716 4800 y Fp(,)921 6792 y Fo(f)1562 6991
y Fl(3)2521 6792 y Fp(im)434 b(In)-36 b(terv)-72 b(all)434
b Fn([)8 b(0;)221 b(160])p Fp(.)2683 22328 y
 currentpoint currentpoint translate 0.6759 0.6759 scale neg exch neg
exch translate
 2683 22328
a 2683 22328 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 22328 a 4056 20175 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4056 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4056
20175 a 4056 20175 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 4056 20175
a 3713 20461 a Fp(x)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175
a
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end

4056 20175 a 4056 20175 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4056 20175 a 2598 20507 a Fo(f)3239
20706 y Fl(1)3764 20507 y Fn(\()p Fo(x)p Fn(\))4056 20175
y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  PutEnd  end
 4056 20175 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (15.0*ln(x+20.0)-30.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 1.42271 mul F@pstplot 1.42271 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271
mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4056 20175 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 4056 20175 a 570
x Fa(50)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 4056 20175
a 570 x Fa(100)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end

4056 20175 a 570 x Fa(160)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056
20175 a
tx@Dict begin  { 72.9871 71.13571 } PutCoor PutBegin  end
 4056 20175 a 922 x Fo(f)4697 21296 y Fl(1)4056
20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 30829 22328 a
currentpoint initclip moveto
 30829 22328 a 2683
22328 a
 currentpoint currentpoint translate 1 0.6759 div 1 0.6759 div scale
neg exch neg exch translate
 2683 22328 a 24758 22328 a
 currentpoint currentpoint translate 0.6759 0.6759 scale neg exch neg
exch translate
 24758 22328 a 24758
22328 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24758 22328 a 26131 20175 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26131 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26131 20175 a
26131 20175 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26131 20175
a 25788 20461 a Fp(x)26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131
20175 a
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26131 20175 a 26131
20175 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26131 20175 a 24672
20507 a Fo(f)25313 20706 y Fl(2)25839 20507 y Fn(\()p
Fo(x)p Fn(\))26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175
a
tx@Dict begin  PutEnd  end
 26131 20175 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (-1.989065674500714E-5*x^(3.0)+0.005568228690189832*x^(2.0)-0.053735655918526345*x+5.936048947883409)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 1.42271 mul F@pstplot
1.42271 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 1.42271 mul gt { moveto } { dup
-1.e30 1.42271 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26131 20175 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570 x Fa(50)26131 20175 y
tx@Dict begin  PutEnd  end

26131 20175 a 26131 20175 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570 x Fa(100)26131
20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570
x Fa(160)26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 72.9871 49.795 } PutCoor PutBegin  end
 26131
20175 a 922 x Fo(f)26772 21296 y Fl(2)26131 20175 y
tx@Dict begin  PutEnd  end
 26131
20175 a 52904 22328 a
currentpoint initclip moveto
 52904 22328 a 24758 22328 a
 currentpoint currentpoint translate 1 0.6759 div 1 0.6759 div scale
neg exch neg exch translate
 24758
22328 a 0 TeXcolorgray 0 TeXcolorgray 13289 36757 a
 currentpoint currentpoint translate 0.71906 0.71906 scale neg exch
neg exch translate
 13289
36757 a 13289 36757 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 13289 36757 a 14663 34603 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14663 34603 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14663 34603 a 14663 34603 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14663 34603 a 14663 34603
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14663 34603 a 14320 34889 a Fp(x)14663 34603 y
tx@Dict begin  PutEnd  end
 14663
34603 a 14663 34603 a
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14663
34603 a 14663 34603 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14663
34603 a 13204 34935 a Fo(f)13845 35134 y Fl(3)14371 34935
y Fn(\()p Fo(x)p Fn(\))14663 34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663
34603 a
tx@Dict begin  PutEnd  end
 14663 34603 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (x^(2.0)/450.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 1.42271 mul F@pstplot 1.42271 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271 mul
gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse }
ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup
1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14663 34603 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571 x Fa(50)14663 34603 y
tx@Dict begin  PutEnd  end

14663 34603 a 14663 34603 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571 x Fa(100)14663
34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571
x Fa(160)14663 34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 85.36285 35.56786 } PutCoor PutBegin  end
 14663
34603 a 923 x Fo(f)15304 35725 y Fl(3)14663 34603 y
tx@Dict begin  PutEnd  end
 14663
34603 a 41436 36757 a
currentpoint initclip moveto
 41436 36757 a 13289 36757 a
 currentpoint currentpoint translate 1 0.71906 div 1 0.71906 div scale
neg exch neg exch translate
 13289
36757 a 921 40741 a Fp(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 1213 41782 43959 45 v 1213
45000 45 3219 v 1921 43723 a(Die)h(F)-108 b(unktionsw)-36
b(erte)433 b(v)-36 b(on)434 b Fo(f)16657 43241 y Fh(0)16515
44052 y Fl(1)17474 43723 y Fp(sind)g(im)f(In)-36 b(terv)-72
b(all)435 b Fn([)8 b(0;)221 b(160])435 b Fp(negativ.)p
42762 45000 V 45127 45000 V 1213 45044 43959 45 v 1213
49922 45 4878 v 1921 46986 a(Der)f(W)-108 b(ert)433 b(des)g
(Di\033erenzialquotien)-36 b(ten)434 b(v)-36 b(on)434
b Fo(f)25908 47185 y Fl(3)26868 46986 y Fp(w)-36 b(\344c)g(hst)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b(0;)221
b(160])1921 48977 y Fp(mit)434 b(w)-36 b(ac)g(hsendem)433
b Fo(x)p Fp(.)p 42762 49922 V 1 0 0 TeXcolorrgb 43470
47815 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45127 49922 V 1213 49967 43959 45 v 1213
53185 45 3219 v 1921 51908 a Fp(Die)h(F)-108 b(unktion)433
b Fo(f)10616 51426 y Fh(00)10474 52236 y Fl(2)11615 51908
y Fp(hat)h(im)g(In)-36 b(terv)-72 b(all)434 b Fn(\(0;)221
b(160\))435 b Fp(genau)e(eine)h(Nullstelle.)p 42762 53185
V 1 0 0 TeXcolorrgb 5759 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45127 53185 V 1213 53229 43959
45 v 1213 56447 45 3219 v 1921 55170 a Fp(Die)g(F)-108
b(unktionsw)-36 b(erte)433 b(v)-36 b(on)434 b Fo(f)16657
54688 y Fh(00)16515 55499 y Fl(3)17656 55170 y Fp(sind)f(im)h(In)-36
b(terv)-72 b(all)434 b Fn([)8 b(0;)221 b(160])436 b Fp(negativ.)p
42762 56447 V 45127 56447 V 1213 56491 43959 45 v 1213
59709 45 3219 v 1921 58433 a(Die)e(F)-108 b(unktion)433
b Fo(f)10616 57950 y Fh(0)10474 58761 y Fl(1)11434 58433
y Fp(ist)g(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8
b(0;)221 b(160])436 b Fp(streng)d(monoton)h(fallend.)p
42762 59709 V 1 0 0 TeXcolorrgb 5347 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45127 59709 V 1213 59754
43959 45 v 47992 4800 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 63782 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(15)p 0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(21)f(Nac)-60
b(h)g(w)g(eis)719 b(eines)d(lokalen)g(Minim)-60 b(ums)717
b(-)h(O)-60 b(A)717 b(-)h(Ma-)-2331 4515 y(tura)f(2015/16)g(-)h
(Haupttermin)p 0 TeXcolorgray -1391 7823 a Fp(21.)p 0
TeXcolorgray 651 w(Gegeb)36 b(en)337 b(ist)i(eine)f(P)-36
b(olynomfunktion)339 b Fo(p)f Fp(mit)g Fo(p)p Fn(\()p
Fo(x)p Fn(\))369 b(=)f Fo(x)28725 7341 y Fl(3)29352 7823
y Fm(\000)100 b Fn(3)g Fm(\001)g Fo(x)g Fn(+)g(2)p Fp(.)341
b(Die)e(erste)f(Ableitung)921 9815 y Fo(p)1574 9333 y
Fh(0)2318 9815 y Fp(mit)433 b Fo(p)5355 9333 y Fh(0)5666
9815 y Fn(\()p Fo(x)p Fn(\))369 b(=)f(3)296 b Fm(\001)f
Fo(x)11515 9333 y Fl(2)12336 9815 y Fm(\000)g Fn(3)434
b Fp(hat)g(an)f(der)g(Stelle)h Fo(x)369 b Fn(=)g(1)433
b Fp(den)g(W)-108 b(ert)433 b(n)-36 b(ull.)921 14352
y(Zeige)441 b(rec)-36 b(hnerisc)g(h,)440 b(dass)g Fo(p)h
Fp(an)f(dieser)h(Stelle)f(ein)h(lokales)h(Minim)-36 b(um)440
b(\(d.)h(h.)f(ihr)g(Graph)921 16344 y(dort)433 b(einen)g(Tiefpunkt\))h
(hat.)p 1 0 0 TeXcolorrgb 921 20881 a(M\366glic)-36 b(her)434
b(rec)-36 b(hnerisc)g(her)432 b(Nac)-36 b(h)g(w)g(eis:)921
23427 y Fo(p)1574 22944 y Fh(00)2140 23427 y Fn(\()p
Fo(x)p Fn(\))368 b(=)h(6)p Fo(x)921 25972 y(p)1574 25490
y Fh(00)2140 25972 y Fn(\(1\))f(=)h(6)g Fo(>)g Fn(0)g
Fm(\))434 b Fp(An)f(der)g(Stelle)h(1)g(liegt)g(ein)g(lokales)h(Minim)
-36 b(um)433 b(v)-36 b(or.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fg(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 29779 54804 45
v -2331 35081 a Fq(AN)782 b(3.3)f(-)g(22)g(F)-179 b(unktionsw)-60
b(erttab)60 b(elle)777 b(-)782 b(O)-60 b(A)781 b(-)h(BIFIE)g(-)f(K)-60
b(omp)60 b(e-)-2331 38103 y(tenzc)-60 b(hec)g(k)718 b(2016)p
0 TeXcolorgray -1391 41410 a Fp(22.)p 0 TeXcolorgray
651 w(In)657 b(der)g(nac)-36 b(hstehenden)656 b(T)-108
b(ab)36 b(elle)658 b(sind)f(F)-108 b(unktionsw)-36 b(erte)657
b(einer)g(P)-36 b(olynomfunktion)658 b Fo(f)921 43402
y Fp(dritten)433 b(Grades)f(so)-36 b(wie)435 b(ihrer)e
(Ableitungsfunktionen)g Fo(f)29626 42920 y Fh(0)30370
43402 y Fp(und)g Fo(f)33755 42920 y Fh(00)34754 43402
y Fp(angegeb)36 b(en.)p 0 TeXcolorgray 0 TeXcolorgray
14576 47542 17667 45 v 14576 49534 45 1992 v 16464 48936
a Fo(x)p 19048 49534 V 3095 w Fp(0)p 22155 49534 V 2132
w(1)p 24611 49534 V 1806 w(2)p 27068 49534 V 1807 w(3)p
29524 49534 V 1915 w(4)p 32197 49534 V 14576 49578 17667
45 v 14576 51570 45 1992 v 15567 50972 a Fo(f)142 b Fn(\()p
Fo(x)p Fn(\))p 19048 51570 V 1980 w Fp(-2)p 22155 51570
V 1915 w(2)p 24611 51570 V 1806 w(0)p 27068 51570 V 1590
w(-2)p 29524 51570 V 1698 w(2)p 32197 51570 V 14576 51614
17667 45 v 14576 53606 45 1992 v 15412 53008 a Fo(f)16195
52526 y Fh(0)16505 53008 y Fn(\()p Fo(x)p Fn(\))p 19048
53606 V 2042 w Fp(9)p 22155 53606 V 2132 w(0)p 24611
53606 V 1590 w(-3)p 27068 53606 V 1589 w(0)p 29524 53606
V 1915 w(9)p 32197 53606 V 14576 53650 17667 45 v 14576
55642 45 1992 v 15284 55045 a Fo(f)16067 54562 y Fh(00)16633
55045 y Fn(\()p Fo(x)p Fn(\))p 19048 55642 V 1372 w Fp(-12)p
22155 55642 V 1373 w(-6)p 24611 55642 V 1589 w(0)p 27068
55642 V 1807 w(6)p 29524 55642 V 1590 w(12)p 32197 55642
V 14576 55686 17667 45 v 921 58786 a(Gib)453 b(an,)h(an)g(w)-36
b(elc)g(hen)453 b(Stellen)h(des)f(In)-36 b(terv)-72 b(alls)455
b Fn(\()o(0;)221 b(4\))455 b Fp(die)f(F)-108 b(unktion)453
b Fo(f)596 b Fp(jedenfalls)454 b(lokale)921 60778 y(Extremstellen)434
b(b)36 b(esitzt.)p 1 0 0 TeXcolorrgb 921 65315 a(Die)434
b(Stellen)g Fo(x)8290 65514 y Fl(1)9184 65315 y Fn(=)369
b(1)434 b Fp(und)e Fo(x)14989 65514 y Fl(2)15884 65315
y Fn(=)369 b(3)434 b Fp(sind)f(lokale)i(Extremstellen)f(der)f(F)-108
b(unktion)433 b Fo(f)142 b Fp(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 41410 a Fg(___/1)p 1 0 0
TeXcolorrgb 47998 43402 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69049 54804 45
v 0 TeXcolorgray 24421 81281 a Fp(16)p 0 TeXcolorgray
eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)512 b(3.3)g(-)g(23)g(Graph)f(einer)g
(Ableitungsfunktion)506 b(-)513 b(MC)f(-)g(Matura)-2385
4515 y(2014/15)718 b(-)f(Haupttermin)p 0 TeXcolorgray
-1391 7823 a Fp(23.)p 0 TeXcolorgray 651 w(Die)468 b(nac)-36
b(hstehende)466 b(Abbildung)g(zeigt)i(den)f(Graphen)e(der)i
(Ableitungsfunktion)h Fo(f)43203 7341 y Fh(0)43980 7823
y Fp(mit)921 9815 y Fo(f)1704 9333 y Fh(0)2014 9815 y
Fn(\()p Fo(x)p Fn(\))369 b(=)5648 9292 y Fl(1)p 5648
9505 471 45 v 5648 10273 a(4)6546 9815 y Fm(\001)295
b Fo(x)7949 9333 y Fl(2)8770 9815 y Fm(\000)10232 9292
y Fl(1)p 10232 9505 V 10232 10273 a(2)11130 9815 y Fm(\001)g
Fo(x)h Fm(\000)f Fn(2)434 b Fp(einer)f(P)-36 b(olynomfunktion)435
b Fo(f)142 b Fp(.)p 0 TeXcolorgray 0 TeXcolorgray 7913
42084 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 279.97531 a add def
/d 0.0 a add neg def /h 250.3842 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7913 42084 a 21519 28478 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 157.05927 0.0 -122.91605 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 127.46815 0.0 -122.91605   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 157.05927  0 -122.91605  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -122.91605
 157.05927  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.91605  def /maxTickline 127.46815  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -122.91605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.05927
0.0 -122.91605 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 127.46815  0 -122.91605  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.91605
 127.46815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.91605  def /maxTickline 157.05927  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -122.91605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.05927
0.0 -122.91605 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19542 31867 a
Fh(\000)p Fl(1)19542 35016 y Fh(\000)p Fl(2)19542 38166
y Fh(\000)p Fl(3)19542 41316 y Fh(\000)p Fl(4)20274 25614
y(1)20274 22464 y(2)20274 19315 y(3)20274 16165 y(4)24433
29824 y(1)2680 b(2)f(3)h(4)g(5)-19734 b Fh(\000)p Fl(1)-4351
b Fh(\000)p Fl(2)f Fh(\000)p Fl(3)g Fh(\000)p Fl(4)21519
28478 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 21519 28478 a 21519 28478 a
tx@Dict begin  { 157.05927 127.46815 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 21519 28478 a 21519
28478 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 21519 28478 a 21149 28764 a Fo(x)21519 28478
y
tx@Dict begin  PutEnd  end
 21519 28478 a 21519 28478 a
tx@Dict begin  PutEnd  end
 21519 28478 a 21519 28478
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 21519 28478 a 21519 28478 a
tx@Dict begin  { 0.0 0.0 pop 157.05927 127.46815 exch pop } PutCoor
PutBegin  end
 21519 28478 a 21519 28478
a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 21519 28478 a 20097 28810 a Fo(f)20880 28328 y Fh(0)21190
28810 y Fn(\()p Fo(x)p Fn(\))21519 28478 y
tx@Dict begin  PutEnd  end
 21519 28478
a 21519 28478 a
tx@Dict begin  PutEnd  end
 21519 28478 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.32 def /x1 5.519999999999995
def /dx x1 x sub 199 div def /F@pstplot (1.0/4.0*x^(2.0)-1.0/2.0*x-2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 21519 28478 a
tx@Dict begin  { 99.5846 -25.60728 } PutCoor PutBegin  end
 21519 28478 a 974 x Fo(f)22302
28970 y Fh(0)21519 28478 y
tx@Dict begin  PutEnd  end
 21519 28478 a 38905 42084
a
currentpoint initclip moveto
 38905 42084 a 855 48061 a Fp(W)-108 b(elc)-36 b(he)433
b(der)g(folgenden)h(A)-36 b(ussagen)434 b(\374b)36 b(er)432
b(die)i(F)-108 b(unktion)433 b Fo(f)575 b Fp(sind)433
b(ric)-36 b(h)g(tig?)921 50053 y(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an.)p
2617 51019 41151 45 v 2617 54237 45 3219 v 3325 52960
a(Die)g(F)-108 b(unktion)433 b Fo(f)576 b Fp(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p
Fn(4;)221 b(5])435 b Fp(zw)-36 b(ei)435 b(lokale)g(Extremstellen.)p
41358 54237 V 1 0 0 TeXcolorrgb 1373 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43723 54237 V 2617 54282
41151 45 v 2617 57500 45 3219 v 3325 56223 a Fp(Die)f(F)-108
b(unktion)433 b Fo(f)576 b Fp(ist)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fn([)8 b(1;)221 b(2])436 b Fp(monoton)d(steigend.)p
41358 57500 V 43723 57500 V 2617 57544 41151 45 v 2617
60762 45 3219 v 3325 59485 a(Die)h(F)-108 b(unktion)433
b Fo(f)576 b Fp(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fn([)8 b Fm(\000)p Fn(4;)221 b Fm(\000)p Fn(2])436
b Fp(monoton)d(fallend.)p 41358 60762 V 43723 60762 V
2617 60807 41151 45 v 2617 66017 45 5211 v 3325 62748
a(Die)h(F)-108 b(unktion)433 b Fo(f)576 b Fp(ist)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8 b Fm(\000)p
Fn(4;)221 b(0])436 b Fp(linksgekr\374mm)-36 b(t)3325
64740 y(\(d.h.)433 b Fo(f)7215 64258 y Fh(00)7781 64740
y Fn(\()p Fo(x)p Fn(\))369 b Fo(>)f Fn(0)434 b Fp(f\374r)g(alle)g
Fo(x)369 b Fm(2)g Fn([)8 b Fm(\000)p Fn(4;)221 b(0])p
Fp(\).)p 41358 66017 V 43723 66017 V 2617 66061 41151
45 v 2617 69131 45 3071 v 3325 67928 a(Die)434 b(F)-108
b(unktion)433 b Fo(f)576 b Fp(hat)433 b(an)g(der)h(Stelle)f
Fo(x)369 b Fn(=)g(1)434 b Fp(eine)f(W)-108 b(endestelle.)p
41358 69131 V 1 0 0 TeXcolorrgb 6379 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43723 69131 V 2617 69176
41151 45 v 47992 7823 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 9815 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 73204 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(17)p 0 TeXcolorgray eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)512 b(3.3)g(-)g(24)g(Graph)f(einer)g
(Ableitungsfunktion)506 b(-)513 b(MC)f(-)g(Matura)-2385
4515 y(2014/15)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fp(24.)p 0 TeXcolorgray
651 w(Die)379 b(nac)-36 b(hstehende)376 b(Abbildung)h(zeigt)h(den)f
(Graphen)g(der)g(Ableitungsfunktion)h Fo(f)42487 7341
y Fh(0)43175 7823 y Fp(einer)921 9815 y(F)-108 b(unktion)433
b Fo(f)142 b Fp(.)434 b(Die)g(F)-108 b(unktion)433 b
Fo(f)16740 9333 y Fh(0)17484 9815 y Fp(ist)g(eine)h(P)-36
b(olynomfunktion)435 b(zw)-36 b(eiten)433 b(Grades.)p
0 TeXcolorgray 0 TeXcolorgray 921 39220 a
 currentpoint currentpoint translate 0.8905 0.8905 scale neg exch neg
exch translate
 921 39220 a
921 39220 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 456.27283 a add def
/d 0.0 a add neg def /h 256.75978 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 39220 a 18033 28255 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 301.69086 0.0 -154.58197 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 17
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 157.7105 0.0 -99.04929   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 301.69086  0 -154.58197  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -154.58197
 301.69086  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.04929  def /maxTickline 157.7105  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.7105
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.69086
0.0 -154.58197 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 157.7105  0 -99.04929  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.04929
 157.7105  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-154.58197  def /maxTickline 301.69086  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.7105
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.69086
0.0 -154.58197 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16055 31644 a
Fh(\000)p Fl(1)16055 34794 y Fh(\000)p Fl(2)16055 37944
y Fh(\000)p Fl(3)16787 25391 y(1)16787 22242 y(2)16787
19092 y(3)16787 15942 y(4)16787 12793 y(5)20947 29601
y(1)2680 b(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)-35716
b Fh(\000)p Fl(1)-4352 b Fh(\000)p Fl(2)h Fh(\000)p Fl(3)f
Fh(\000)p Fl(4)g Fh(\000)p Fl(5)18033 28255 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18033 28255
a 18033 28255 a
tx@Dict begin  { 301.69086 157.7105 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 18033 28255 a 18033 28255 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18033 28255
a 17663 28541 a Fo(x)18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 18033
28255 a
tx@Dict begin  PutEnd  end
 18033 28255 a 18033 28255 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18033 28255 a 18033
28255 a
tx@Dict begin  { 0.0 0.0 pop 301.69086 157.7105 exch pop } PutCoor
PutBegin  end
 18033 28255 a 18033 28255 a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 18033 28255 a 16610
28588 a Fo(f)17393 28106 y Fh(0)17704 28588 y Fn(\()p
Fo(x)p Fn(\))18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 18033 28255
a
tx@Dict begin  PutEnd  end
 18033 28255 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.4329346942751044 def /x1 10.60322300949462
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(2.0)-3.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
18033 28255 a
tx@Dict begin  { -118.87364 103.86449 } PutCoor PutBegin  end
 18033 28255 a 975 x Fo(f)18816 28747 y
Fh(0)18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 51429 39220 a
currentpoint initclip moveto
 51429
39220 a 921 39220 a
 currentpoint currentpoint translate 1 0.8905 div 1 0.8905 div scale
neg exch neg exch translate
 921 39220 a 5976 x Fp(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 3009 46163 40367 45 v 3009 49233 45 3071 v 3717
48030 a(Die)g(F)-108 b(unktion)433 b Fo(f)576 b Fp(ist)433
b(eine)h(P)-36 b(olynomfunktion)435 b(dritten)d(Grades.)p
40966 49233 V 1 0 0 TeXcolorrgb 5447 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43331 49233 V 3009 49278
40367 45 v 3009 52496 45 3219 v 3717 51219 a Fp(Die)i(F)-108
b(unktion)433 b Fo(f)576 b Fp(ist)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fn([)8 b(0;)221 b(4])435 b Fp(streng)f(monoton)f(steigend)p
40966 52496 V 43331 52496 V 3009 52540 40367 45 v 3009
55758 45 3219 v 3717 54481 a(Die)h(F)-108 b(unktion)433
b Fo(f)576 b Fp(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fn([)8 b Fm(\000)p Fn(4;)221 b Fm(\000)p Fn(3])436
b Fp(streng)d(monoton)h(fallend.)p 40966 55758 V 43331
55758 V 3009 55803 40367 45 v 3009 58873 45 3071 v 3717
57670 a(Die)g(F)-108 b(unktion)433 b Fo(f)576 b Fp(hat)433
b(an)g(der)g(Stelle)h Fo(x)369 b Fn(=)g(0)434 b Fp(eine)f(W)-108
b(endestelle)p 40966 58873 V 1 0 0 TeXcolorrgb 5956 w
Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43331 58873 V 3009 58917 40367 45 v 3009 62135 45 3219
v 3717 60858 a Fp(Die)434 b(F)-108 b(unktion)433 b Fo(f)576
b Fp(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434 b Fn([)8
b Fm(\000)p Fn(4;)221 b(4])436 b Fp(links)e(gekr\374mm)-36
b(t.)p 40966 62135 V 43331 62135 V 3009 62180 40367 45
v 47992 7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 9815
a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 66208 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(18)p 0 TeXcolorgray eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fq(AN)747 b(3.3)g(-)g(25)f(Gewinn)g(und)f
(K)-60 b(osten)746 b(-)h(O)-60 b(A)747 b(-)g(Matura)f(2014/15)h(-)-2331
4622 y(K)-60 b(omp)60 b(ensationspr\374fung)p 0 TeXcolorgray
-1391 7929 a Fp(25.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)398
b(ist)g(die)h(Gewinnfunktion)f Fo(G)g Fp(mit)h(der)f(Gleic)-36
b(h)g(ung)397 b Fo(G)p Fn(\()p Fo(x)p Fn(\))369 b(=)f
Fo(x)36844 7447 y Fl(2)37594 7929 y Fm(\000)223 b Fn(90)h
Fm(\001)g Fo(x)f Fm(\000)h Fn(1800)p Fp(.)921 9921 y(Dab)36
b(ei)434 b(wird)g Fo(x)g Fp(in)f(St\374c)-36 b(k)433
b(und)g Fo(G)p Fn(\()p Fo(x)p Fn(\))g Fp(in)g(Euro)h(angegeb)36
b(en.)921 12466 y(Berec)-36 b(hne)433 b(den)g(maximalen)h(Gewinn.)p
1 0 0 TeXcolorrgb 921 17004 a Fo(G)1947 16522 y Fh(0)2257
17004 y Fn(\()p Fo(x)p Fn(\))369 b(=)g Fm(\000)p Fn(2)296
b Fm(\001)f Fo(x)g Fn(+)g(90)921 18995 y Fo(G)1947 18513
y Fh(0)2257 18995 y Fn(\()p Fo(x)p Fn(\))369 b(=)g(0)921
20987 y Fo(x)g Fn(=)g(45)921 22979 y Fo(G)p Fn(\(45\))g(=)g(225)921
24971 y Fp(Der)434 b(maximale)h(Gewinn)e(b)36 b(etr\344gt)433
b Fe(e)651 b Fp(225)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 28705 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(19)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)1149 b(3.3)f(-)h(26)g
(Di\033erenzierbare)f(F)-179 b(unktion)1146 b(-)j(MC)g(-)g(Matura)-2385
4515 y(2015/16)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fp(26.)p 0 TeXcolorgray
651 w(Die)349 b(nac)-36 b(hstehende)347 b(Abbildung)h(zeigt)h(den)f(A)
-36 b(ussc)g(hnitt)347 b(eines)i(Graphen)e(einer)h(P)-36
b(olynom-)921 9815 y(funktion)434 b Fo(f)142 b Fp(.)434
b(Die)g(T)-108 b(angen)-36 b(tensteigung)433 b(an)g(der)g(Stelle)h
Fo(x)369 b Fn(=)g(6)434 b Fp(ist)f(maximal.)p 0 TeXcolorgray
0 TeXcolorgray 5418 49877 a
 currentpoint currentpoint translate 0.86546 0.86546 scale neg exch
neg exch translate
 5418 49877 a 5418 49877 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 375.57611 a add def
/d 0.0 a add neg def /h 372.7311 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5418 49877 a 7623 47798 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 355.65929 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 353.9522 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 355.65929  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 355.65929  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 353.9522  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 353.9522
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 355.65929
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 353.9522  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 353.9522  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 355.65929  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 353.9522
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 355.65929
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6378 48083 a Fl(0)6377
44934 y(1)6377 41784 y(2)6377 38635 y(3)6377 35485 y(4)6377
32335 y(5)6377 29186 y(6)6377 26036 y(7)6377 22887 y(8)6377
19737 y(9)5907 16587 y(10)5907 13438 y(11)5907 10288
y(12)7388 49144 y(0)2679 b(1)h(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444
b(10)2210 b(11)f(12)7623 47798 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7623 47798 a 7623 47798
a
tx@Dict begin  { 355.65929 353.9522 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7623 47798 a 7623 47798 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7623 47798 a 7280 48084 a
Fp(x)7623 47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 7623 47798 a
tx@Dict begin  PutEnd  end
 7623 47798
a 7623 47798 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7623 47798 a 7623 47798 a
tx@Dict begin  { 0.0 0.0 pop 355.65929 353.9522 exch pop } PutCoor
PutBegin  end
 7623 47798 a
7623 47798 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7623 47798 a 6575 48130 a Fp(f\(x\))7623
47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 7623 47798 a
tx@Dict begin  PutEnd  end
 7623 47798 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 12 def /dx x1 x sub 199
div def /F@pstplot (2.9890266176687913E-5*x^(4.0)-0.012428419189220467*x^(3.0)+0.21617919832944305*x^(2.0)-0.022775063325552704*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 7623 47798 a
tx@Dict begin  { 214.5335 213.39557 } PutCoor PutBegin  end
 7623 47798 a 923
x Fo(f)7623 47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 46993 49877 a
currentpoint initclip moveto
 46993
49877 a 5418 49877 a
 currentpoint currentpoint translate 1 0.86546 div 1 0.86546 div scale
neg exch neg exch translate
 5418 49877 a 921 53861 a Fp(Kreuze)433
b(die)h(b)36 b(eiden)433 b(f\374r)g(die)h(gegeb)36 b(ene)434
b(F)-108 b(unktion)432 b Fo(f)576 b Fp(zutre\033enden)431
b(A)-36 b(ussagen)434 b(an.)p 17090 54828 12204 45 v
17090 58046 45 3219 v 17799 56769 a Fo(f)18582 56287
y Fh(00)19147 56769 y Fn(\(6\))369 b(=)g(0)p 26884 58046
V 1 0 0 TeXcolorrgb 4384 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 29249 58046 V 17090 58090
12204 45 v 17090 61309 45 3219 v 17799 60032 a Fo(f)18582
59550 y Fh(00)19147 60032 y Fn(\(11\))h Fo(<)e Fn(0)p
26884 61309 V 1 0 0 TeXcolorrgb 3734 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 29249 61309 V 17090
61353 12204 45 v 17090 64571 45 3219 v 17799 63294 a
Fo(f)18582 62812 y Fh(00)19147 63294 y Fn(\(2\))h Fo(<)g(f)23342
62812 y Fh(00)23908 63294 y Fn(\(10\))p 26884 64571 V
29249 64571 V 17090 64615 12204 45 v 17090 67833 45 3219
v 17799 66556 a Fo(f)18582 66074 y Fh(0)18892 66556 y
Fn(\(6\))g(=)g(0)p 26884 67833 V 29249 67833 V 17090
67878 12204 45 v 17090 71096 45 3219 v 17799 69819 a
Fo(f)18582 69337 y Fh(0)18892 69819 y Fn(\(7\))g Fo(<)g(f)23087
69337 y Fh(0)23397 69819 y Fn(\(10\))p 26884 71096 V
29249 71096 V 17090 71140 12204 45 v 47992 7823 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Ff(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 75168 54804 45
v 0 TeXcolorgray 24421 81281 a Fp(20)p 0 TeXcolorgray
eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)784 b(3.3)g(-)g(27)f(Eigensc)-60
b(haften)783 b(einer)f(F)-179 b(unktion)781 b(-)j(MC)h(-)f(Matura)-2385
4515 y(2013/14)718 b(Haupttermin)p 0 TeXcolorgray -1391
7823 a Fp(27.)p 0 TeXcolorgray 651 w(V)-108 b(on)384
b(einer)h(rellen)g(P)-36 b(olynomfunktion)386 b Fo(f)527
b Fp(sind)384 b(der)h(Graph)e(und)h(die)h(F)-108 b(unktionsgleic)-36
b(h)g(ung)921 9815 y(der)433 b(Ableitungsfunktion)h Fo(f)15260
9333 y Fh(0)16004 9815 y Fp(gegeb)36 b(en:)434 b Fo(f)22098
9333 y Fh(0)22408 9815 y Fn(\()p Fo(x)p Fn(\))369 b(=)f
Fm(\000)p Fo(x)296 b Fn(+)f(2)p Fp(.)p 0 TeXcolorgray
0 TeXcolorgray 12164 33688 a
 currentpoint currentpoint translate 0.98079 0.98079 scale neg exch
neg exch translate
 12164 33688 a 12164 33688
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.13593 a add def
/d 0.0 a add neg def /h 197.4621 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12164 33688 a 20920 26066 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -79.09859 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.60652 0.0 -68.85558   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -79.09859  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -79.09859
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-68.85558  def /maxTickline 128.60652  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.60652
0.0 -68.85558   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -79.09859 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.60652  0 -68.85558  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -68.85558
 128.60652  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.09859  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.60652
0.0 -68.85558   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -79.09859 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 18943 29455 a
Fh(\000)p Fl(1)18943 32605 y Fh(\000)p Fl(2)19675 23202
y(1)19675 20052 y(2)19675 16903 y(3)19675 13753 y(4)23835
27412 y(1)2679 b(2)h(3)f(4)-16584 b Fh(\000)p Fl(1)-4351
b Fh(\000)p Fl(2)20920 26066 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20920 26066 a 20920 26066
a
tx@Dict begin  { 128.03734 128.60652 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20920 26066 a 20920 26066 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20920 26066 a 20577 26352
a Fp(x)20920 26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a 20920 26066 a
tx@Dict begin  PutEnd  end
 20920
26066 a 20920 26066 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20920 26066 a 20920 26066 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 128.60652 exch pop } PutCoor
PutBegin  end
 20920
26066 a 20920 26066 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20920 26066 a 19674 26398 a Fp(f)36
b('\(x\))20920 26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a 20920 26066 a
tx@Dict begin  PutEnd  end
 20920
26066 a 20920 26066 a
tx@Dict begin  { 22.1931 48.36957 } PutCoor PutBegin  end
 20920 26066 a 610 x Fa(f)26 b(')20920
26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.78 def /x1 4.5 def /dx x1 x sub
49 div def /F@pstplot ((--4.-2.*x)/2.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
35093 33688 a
currentpoint initclip moveto
 35093 33688 a 12164 33688 a
 currentpoint currentpoint translate 1 0.98079 div 1 0.98079 div scale
neg exch neg exch translate
 12164 33688
a 921 39665 a Fp(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p 1054 42623
44710 45 v 1054 45694 45 3071 v 1762 44491 a(Die)g(Stelle)g
Fo(x)8408 44690 y Fl(1)9303 44491 y Fn(=)369 b(0)434
b Fp(ist)f(eine)h(W)-108 b(endestelle)433 b(v)-36 b(on)434
b Fo(f)142 b Fp(.)p 43354 45694 V 45719 45694 V 1054
45738 44710 45 v 1054 48956 45 3219 v 1762 47679 a(Im)434
b(In)-36 b(terv)-72 b(all)434 b Fn([)8 b(0;)221 b(1])435
b Fp(ist)f Fo(f)575 b Fp(streng)434 b(monoton)f(fallend.)p
43354 48956 V 45719 48956 V 1054 49000 44710 45 v 1054
54137 45 5137 v 1762 50942 a(Die)400 b(T)-108 b(angen)-36
b(te)399 b(an)f(den)h(Graphen)e(der)i(F)-108 b(unktion)398
b Fo(f)541 b Fp(im)399 b(Punkt)f Fn(\(0)p Fm(j)p Fo(f)142
b Fn(\(0\)\))399 b Fp(hat)g(die)1762 52933 y(Steigung)433
b(2.)p 43354 54137 V 1 0 0 TeXcolorrgb 44063 51901 a
Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45719 54137 V 1054 54181 44710 45 v 1054 57251 45 3071
v 1762 56048 a Fp(Die)h(Stelle)g Fo(x)8408 56247 y Fl(2)9303
56048 y Fn(=)369 b(2)434 b Fp(ist)f(eine)h(lokale)h(Maxim)-36
b(umstelle)435 b(v)-36 b(on)434 b Fo(f)142 b Fp(.)p 43354
57251 V 1 0 0 TeXcolorrgb 11410 w Fi(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45719 57251 V 1054 57296
44710 45 v 1054 62506 45 5211 v 1762 59237 a Fp(Der)434
b(Graph)e(der)h(F)-108 b(unktion)433 b Fo(f)576 b Fp(w)-36
b(eist)434 b(im)g(In)-36 b(terv)-72 b(all)434 b Fn([)8
b(2;)221 b(3])435 b Fp(eine)e(Linkskr\374mm)-36 b(ung)1762
61229 y(\(p)36 b(ositiv)-36 b(e)434 b(Kr\374mm)-36 b(ung\))433
b(auf.)p 43354 62506 V 45719 62506 V 1054 62550 44710
45 v 47992 7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998
9815 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 66689 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(21)p 0 TeXcolorgray eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fq(AN)881 b(3.3)g(-)g(28)g(Extremstelle)f
(-)h(MC)g(-)g(Matura)g(2013/14)g(1.)g(Ne-)-2331 4622
y(b)60 b(en)-60 b(termin)p 0 TeXcolorgray -1391 7929
a Fp(28.)p 0 TeXcolorgray 651 w(Die)583 b(Ermittlung)f(lokaler)i
(Extremstellen)f(einer)f(P)-36 b(olynomfunktion)584 b
Fo(f)724 b Fp(erfolgt)584 b(h\344u\034g)921 9921 y(mithilfe)434
b(der)f(Di\033erenzialrec)-36 b(hn)g(ung.)921 12466 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(A)-36 b(ussagen)433 b(an,)h(die)g(stets)f
(zutre\033end)f(sind!)p 921 15425 44583 45 v 921 20487
45 5063 v 1629 17292 a(W)-108 b(enn)433 b Fo(x)6053 17491
y Fl(0)7013 17292 y Fp(eine)g(lokale)j(Extremstelle)e(v)-36
b(on)434 b Fo(f)575 b Fp(ist,)434 b(dann)f(w)-36 b(ec)g(hselt)434
b(die)f(F)-108 b(unktion)1629 19284 y(an)434 b(der)f(Stelle)h
Fo(x)9956 19483 y Fl(0)10915 19284 y Fp(das)g(Kr\374mm)-36
b(ungsv)g(erhalten.)p 43093 20487 V 45459 20487 V 921
20532 44583 45 v 921 23750 45 3219 v 1629 22473 a(W)-108
b(enn)433 b Fo(x)6053 22672 y Fl(0)7013 22473 y Fp(eine)g(lokale)j
(Extremstelle)e(v)-36 b(on)434 b Fo(f)575 b Fp(ist,)434
b(dann)f(ist)h Fo(f)32681 21991 y Fh(00)33246 22473 y
Fn(\()p Fo(x)34491 22672 y Fl(0)35017 22473 y Fn(\))369
b(=)g(0)p Fp(.)p 43093 23750 V 45459 23750 V 921 23794
44583 45 v 921 28856 45 5063 v 1629 25661 a(W)-108 b(enn)433
b(die)h(F)-108 b(unktion)433 b Fo(f)575 b Fp(b)36 b(ei)434
b Fo(x)17043 25860 y Fl(0)18002 25661 y Fp(das)g(Monotoniev)-36
b(erhalten)434 b(\344ndert,)f(dann)f(liegt)1629 27653
y(b)36 b(ei)434 b Fo(x)4500 27852 y Fl(0)5460 27653 y
Fp(eine)f(lokale)j(Extremstelle)e(v)-36 b(on)434 b Fo(f)142
b Fp(.)p 43093 28856 V 1 0 0 TeXcolorrgb 43802 26657
a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45459 28856 V 921 28901 44583 45 v 921 32119 45 3219
v 1629 30842 a Fp(W)-108 b(enn)433 b Fo(x)6053 31041
y Fl(0)7013 30842 y Fp(eine)g(lokale)j(Extremstelle)e(v)-36
b(on)434 b Fo(f)575 b Fp(ist,)434 b(dann)f(ist)h Fo(f)32681
30360 y Fh(0)32991 30842 y Fn(\()p Fo(x)34236 31041 y
Fl(0)34762 30842 y Fn(\))369 b(=)f(0)p Fp(.)p 43093 32119
V 1 0 0 TeXcolorrgb 5774 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45459 32119 V 921 32163 44583
45 v 921 37299 45 5137 v 1629 34104 a Fp(W)-108 b(enn)433
b Fo(x)6053 34303 y Fl(0)7013 34104 y Fp(eine)g(lokale)j(Extremstelle)e
(v)-36 b(on)434 b Fo(f)575 b Fp(ist,)434 b(dann)f(ist)h
Fo(f)32681 33622 y Fh(0)32991 34104 y Fn(\()p Fo(x)p
Fn(\))f Fp(f\374r)h Fo(x)369 b(<)g(x)40463 34303 y Fl(0)1629
36096 y Fp(immer)434 b(negativ)h(und)d(f\374r)h Fo(x)369
b(>)g(x)18153 36295 y Fl(0)19113 36096 y Fp(immer)433
b(p)36 b(ositiv.)p 43093 37299 V 45459 37299 V 921 37344
44583 45 v 47992 7929 a Fg(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Ff(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 41372 54804 45 v 0 TeXcolorgray
24421 81281 a Fp(22)p 0 TeXcolorgray eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)522 b(3.3)f(-)g(29)g(W)-179
b(assermenge)520 b(in)h(einem)f(Beh\344lter)g(-)i(MC)f(-)h(Matura)-2385
4515 y(2016/17)718 b(-)f(Haupttermin)p 0 TeXcolorgray
-1391 7823 a Fp(29.)p 0 TeXcolorgray 651 w(In)438 b(der)g(nac)-36
b(hstehenden)437 b(Abbildung)h(ist)g(die)h(momen)-36
b(tane)438 b(\304nderungsrate)f Fo(R)450 b Fp(der)438
b(W)-108 b(as-)921 9815 y(sermenge)353 b(in)h(einem)f(Beh\344lter)g
(\(in)h(m)19803 9333 y Fl(3)20328 9815 y Fp(/h\))f(in)h(Abh\344ngigk)
-36 b(eit)354 b(v)-36 b(on)354 b(der)e(Zeit)i Fo(t)f
Fp(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 7850
32006 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 281.1128 a add def
/d 0.0 a add neg def /h 160.47343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7850 32006 a 11377 26651 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 249.24586 0.0 3.41418 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 112.10387 0.0 -48.36957   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 249.24586  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 249.24586  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-48.36957  def /maxTickline 112.10387  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 112.10387
0.0 -48.36957   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 249.24586
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 112.10387  0 -48.36957  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -48.36957
 112.10387  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 249.24586  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 112.10387
0.0 -48.36957   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 249.24586
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 10132 26937 a
Fl(0)9400 30040 y Fh(\000)p Fl(1)10132 23787 y(1)10132
20637 y(2)10132 17488 y(3)14292 27997 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)
h(8)11377 26651 y
tx@Dict begin  gsave STV CP T /ps@refangle 128.  def grestore  end
 11377 26651 a 11377 26651 a
tx@Dict begin  { 249.24586 112.10387 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11377 26651
a 11377 26651 a
tx@Dict begin  { 5.0 28.3962 8.26648 0.0 128.  Uput UUput } PutCoor
PutBegin  end
 11377 26651 a 9805 27109 a Fo(t)434 b
Fp(in)f(h)11377 26651 y
tx@Dict begin  PutEnd  end
 11377 26651 a 11377 26651 a
tx@Dict begin  PutEnd  end
 11377
26651 a 11377 26651 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11377 26651 a 11377 26651 a
tx@Dict begin  { 0.0 0.0 pop 249.24586 112.10387 exch pop } PutCoor
PutBegin  end
 11377
26651 a 11377 26651 a
tx@Dict begin  { 5.0 66.99416 9.51021 3.0 -40.  Uput UUput } PutCoor
PutBegin  end
 11377 26651 a 7669 27012 a Fo(R)11
b Fn(\()p Fo(t)p Fn(\))433 b Fp(in)g(m)13186 26530 y
Fl(3)13712 27012 y Fp(/h)11377 26651 y
tx@Dict begin  PutEnd  end
 11377 26651 a
11377 26651 a
tx@Dict begin  PutEnd  end
 11377 26651 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (0.25*x^(2.0)-2.0*x+3.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 38968 32006 a
currentpoint initclip moveto
 38968 32006 a 921 37982 a
Fp(Kreuze)378 b(die)f(b)36 b(eiden)377 b(zutre\033enden)f(A)-36
b(ussagen)378 b(\374b)36 b(er)377 b(die)h(W)-108 b(assermenge)378
b(im)g(Beh\344lter)f(an.)p 1001 42674 44382 45 v 1001
47729 45 5056 v 1710 44534 a(Zum)433 b(Zeitpunkt)f Fo(t)369
b Fn(=)g(6)433 b Fp(b)36 b(e\034ndet)433 b(sic)-36 b(h)433
b(w)-36 b(eniger)434 b(W)-108 b(asser)434 b(im)f(Beh\344lter)h(als)g
(zum)1710 46526 y(Zeitpunkt)e Fo(t)369 b Fn(=)g(2)p Fp(.)p
42973 47729 V 1 0 0 TeXcolorrgb 43682 45534 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45338
47729 V 1001 47774 44382 45 v 1001 50992 45 3219 v 1710
49715 a Fp(Im)433 b(Zeitin)-36 b(terv)-72 b(all)434 b
Fn(\(6;)221 b(8\))435 b Fp(nimm)-36 b(t)433 b(die)h(W)-108
b(assermenge)433 b(im)h(Beh\344lter)g(zu.)p 42973 50992
V 1 0 0 TeXcolorrgb 6276 w Fi(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45338 50992 V 1001 51036 44382
45 v 1001 54099 45 3064 v 1710 52896 a Fp(Zum)f(Zeitpunkt)f
Fo(t)369 b Fn(=)g(2)433 b Fp(b)36 b(e\034ndet)433 b(sic)-36
b(h)433 b(k)-36 b(ein)434 b(W)-108 b(asser)434 b(im)f(Beh\344lter.)p
42973 54099 V 45338 54099 V 1001 54143 44382 45 v 1001
57361 45 3219 v 1710 56084 a(Im)g(Zeitin)-36 b(terv)-72
b(all)434 b Fn(\(0;)221 b(2\))435 b Fp(nimm)-36 b(t)433
b(die)h(W)-108 b(assermenge)433 b(im)h(Beh\344lter)g(ab.)p
42973 57361 V 45338 57361 V 1001 57406 44382 45 v 1001
60469 45 3064 v 1710 59266 a(Zum)f(Zeitpunkt)f Fo(t)369
b Fn(=)g(4)433 b Fp(b)36 b(e\034ndet)433 b(sic)-36 b(h)433
b(am)h(w)-36 b(enigsten)433 b(W)-108 b(asser)434 b(im)g(Beh\344lter.)p
42973 60469 V 45338 60469 V 1001 60513 44382 45 v 47992
7823 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Ff(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 64541 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(23)p
0 TeXcolorgray eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fq(AN)601 b(3.3)f(-)g(30)g(Zeit-W)-179
b(eg-F)g(unktion)597 b(-)j(MC)h(-)f(Matura)g(NT)g(1)g(16/17)p
0 TeXcolorgray -1391 4907 a Fp(30.)p 0 TeXcolorgray 651
w(Die)567 b(geradlinige)g(Bew)-36 b(egung)566 b(eines)h(A)-36
b(utos)565 b(wird)h(mithilfe)h(der)f(Zeit-W)-108 b(eg-F)g(unktion)565
b Fo(s)921 6899 y Fp(b)36 b(esc)-36 b(hrieb)36 b(en.)640
b(Innerhalb)f(des)h(Beobac)-36 b(h)g(tungszeitraums)639
b(ist)h(die)f(F)-108 b(unktion)639 b Fo(s)h Fp(streng)921
8891 y(monoton)434 b(w)-36 b(ac)g(hsend)433 b(und)f(rec)-36
b(h)g(tsgekr\374mm)g(t.)921 11436 y(Kreuze)433 b(die)h(b)36
b(eiden)433 b(f\374r)g(diesen)g(Beobac)-36 b(h)g(tungszeitraum)433
b(zutre\033enden)f(A)-36 b(ussagen)433 b(an!)p 1086 12403
44646 45 v 1086 15466 45 3064 v 1794 14263 a(Die)h(Gesc)-36
b(h)g(windigk)g(eit)434 b(des)f(A)-36 b(utos)434 b(wird)f(immer)h
(gr\366\377er.)p 43322 15466 V 45687 15466 V 1086 15510
44646 45 v 1086 18632 45 3123 v 1794 17429 a(Die)g(F)-108
b(unktionsw)-36 b(erte)433 b(v)-36 b(on)434 b Fo(s)16360
16947 y Fh(0)17104 17429 y Fp(sind)f(negativ.)p 43322
18632 V 45687 18632 V 1086 18676 44646 45 v 1086 21799
45 3123 v 1794 20595 a(Die)h(F)-108 b(unktionsw)-36 b(erte)433
b(v)-36 b(on)434 b Fo(s)16360 20113 y Fh(00)17359 20595
y Fp(sind)f(negativ.)p 43322 21799 V 1 0 0 TeXcolorrgb
44031 20570 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45687 21799 V 1086 21843 44646 45 v 1086
26898 45 5056 v 1794 23703 a Fp(Der)h(W)-108 b(ert)433
b(des)g(Di\033erenzenquotien)-36 b(ten)433 b(v)-36 b(on)434
b Fo(s)f Fp(im)h(Beobac)-36 b(h)g(tungszeitraum)433 b(ist)1794
25695 y(negativ.)p 43322 26898 V 45687 26898 V 1086 26942
44646 45 v 1086 30005 45 3064 v 1794 28802 a(Der)h(W)-108
b(ert)433 b(des)g(Di\033erenzialquotien)-36 b(ten)434
b(v)-36 b(on)434 b Fo(s)g Fp(wird)f(immer)h(kleiner.)p
43322 30005 V 1 0 0 TeXcolorrgb 44031 28806 a Fi(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45687
30005 V 1086 30049 44646 45 v 47992 4907 a Fg(___/1)p
1 0 0 TeXcolorrgb 47998 6899 a Ff(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 34188
54804 45 v 0 TeXcolorgray 24421 81281 a Fp(24)p 0 TeXcolorgray
eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fq(AN)718 b(3.3)f(-)h(31)f(Sprungsc)-60
b(hanze)715 b(-)j(MC)f(-)h(BIFIE)p 0 TeXcolorgray -1391
4800 a Fp(31.)p 0 TeXcolorgray 651 w(In)583 b(der)g(nac)-36
b(hstehenden)581 b(Abbildung)h(ist)i(der)f(L\344ngssc)-36
b(hnitt)582 b(einer)h(Skisprungsc)-36 b(hanze)921 6792
y(sam)g(t)433 b(A)-36 b(ufsprungbahn)432 b(und)h(A)-36
b(uslauf)433 b(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray
11352 25948 a @beginspecial 0 @llx -1 @lly 481 @urx 334
@ury 2170 @rwi @setspecial
%%BeginDocument: GrafikAN3331.eps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: cairo 1.14.2 (http://cairographics.org)
%%CreationDate: Thu Jan  4 13:27:38 2018
%%Pages: 1
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%BoundingBox: 0 -1 481 334
%%EndComments
%%BeginProlog
save
50 dict begin
/q { gsave } bind def
/Q { grestore } bind def
/cm { 6 array astore concat } bind def
/w { setlinewidth } bind def
/J { setlinecap } bind def
/j { setlinejoin } bind def
/M { setmiterlimit } bind def
/d { setdash } bind def
/m { moveto } bind def
/l { lineto } bind def
/c { curveto } bind def
/h { closepath } bind def
/re { exch dup neg 3 1 roll 5 3 roll moveto 0 rlineto
      0 exch rlineto 0 rlineto closepath } bind def
/S { stroke } bind def
/f { fill } bind def
/f* { eofill } bind def
/n { newpath } bind def
/W { clip } bind def
/W* { eoclip } bind def
/BT { } bind def
/ET { } bind def
/pdfmark where { pop globaldict /?pdfmark /exec load put }
    { globaldict begin /?pdfmark /pop load def /pdfmark
    /cleartomark load def end } ifelse
/BDC { mark 3 1 roll /BDC pdfmark } bind def
/EMC { mark /EMC pdfmark } bind def
/cairo_store_point { /cairo_point_y exch def /cairo_point_x exch def } def
/Tj { show currentpoint cairo_store_point } bind def
/TJ {
  {
    dup
    type /stringtype eq
    { show } { -0.001 mul 0 cairo_font_matrix dtransform rmoveto } ifelse
  } forall
  currentpoint cairo_store_point
} bind def
/cairo_selectfont { cairo_font_matrix aload pop pop pop 0 0 6 array astore
    cairo_font exch selectfont cairo_point_x cairo_point_y moveto } bind def
/Tf { pop /cairo_font exch def /cairo_font_matrix where
      { pop cairo_selectfont } if } bind def
/Td { matrix translate cairo_font_matrix matrix concatmatrix dup
      /cairo_font_matrix exch def dup 4 get exch 5 get cairo_store_point
      /cairo_font where { pop cairo_selectfont } if } bind def
/Tm { 2 copy 8 2 roll 6 array astore /cairo_font_matrix exch def
      cairo_store_point /cairo_font where { pop cairo_selectfont } if } bind def
/g { setgray } bind def
/rg { setrgbcolor } bind def
/d1 { setcachedevice } bind def
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%PageBoundingBox: 0 -1 481 334
%%EndPageSetup
q 0 -1 481 335 rectclip q
0 g
87 332.026 m 87 331.526 87.5 331.026 88 331.026 c 88.602 331.026 89 331.526
 89 332.026 c 89 332.624 88.602 333.026 88 333.026 c 87.5 333.026 87 332.624
 87 332.026 c h
87 332.026 m f
98 332.026 m 98 331.526 98.5 331.026 99 331.026 c 99.602 331.026 100 331.526
 100 332.026 c 100 332.624 99.602 333.026 99 333.026 c 98.5 333.026 98 332.624
 98 332.026 c h
98 332.026 m f
166.102 330.327 m 163.301 326.526 163.199 326.424 157 322.225 c 147.301
 315.624 144.699 307.327 149.398 297.526 c 153.5 288.624 166.898 278.026
 174 278.026 c 175.398 278.026 179.199 279.225 182.5 280.526 c 189.801 283.526
 189.699 283.526 190.398 280.725 c 191.199 277.225 197.801 270.124 203.5
 266.424 c 211.801 261.124 219.801 259.026 231.398 259.026 c 243.398 259.026
 249.199 261.225 255.199 267.827 c 259 272.026 l 265.5 267.924 l 276.5 261.026
 291.699 258.225 299.699 261.526 c 304.898 263.725 306.801 265.624 310 272.124
 c 314 279.924 314.898 280.526 319.102 277.526 c 324.301 273.827 327.699
 273.526 333 276.327 c 341.602 280.827 345.398 293.225 341.102 302.526 c
 336.602 312.327 329.801 314.026 311.602 309.624 c 305.699 308.225 299.898
 307.026 298.699 307.026 c 297.5 307.026 292.898 309.225 288.398 311.924
 c 274 320.624 264.898 322.827 258.898 319.327 c 256 317.526 255.699 317.624
 245.199 321.424 c 224.199 329.026 211 331.526 205 329.026 c 202.301 327.924
 201.602 326.725 201.699 323.327 c 201.801 321.026 198.602 321.924 187 327.526
 c 173.5 334.026 169.301 334.526 166.102 330.327 c h
187.301 324.026 m 197.602 318.924 203.301 317.725 204.398 320.526 c 204.699
 321.327 204.699 322.624 204.398 323.424 c 203.699 325.327 207 327.026 211.301
 327.026 c 216.398 327.026 232.801 322.624 245.301 317.924 c 254 314.624
 256.699 314.026 257.898 314.924 c 261.301 317.327 264.602 318.124 268.398
 317.526 c 272.602 316.924 282.398 312.225 290.398 307.124 c 296.5 303.327
 299.301 303.225 312.5 306.526 c 324.102 309.424 328.898 309.624 333 307.526
 c 336.699 305.624 340 299.327 340 294.327 c 340 289.827 337.199 283.327
 334 280.526 c 330.801 277.624 323.398 277.827 319.602 280.827 c 316.301
 283.327 313.801 283.624 312.102 281.725 c 311.5 280.924 309.5 277.424 307.699
 273.924 c 303.699 266.424 298.602 263.026 291 263.026 c 281.5 263.026 267.801
 268.424 261.699 274.526 c 257.801 278.424 257 278.725 257 276.424 c 257
 273.827 251.102 267.424 246.199 264.725 c 240.102 261.526 233.199 260.624
 224.602 262.026 c 210.801 264.225 200.301 270.526 194.5 280.124 c 192.199
 283.827 190.199 286.026 189 286.026 c 188 286.026 184.801 284.924 181.801
 283.526 c 175.398 280.526 173.102 280.424 168.199 282.924 c 159 287.624
 150 299.124 150 306.225 c 150 311.827 155.898 319.124 163.398 322.725 c
 165.301 323.624 167.102 325.424 167.801 327.225 c 168.898 330.124 169.102
 330.225 173.102 329.624 c 175.301 329.225 181.699 326.725 187.301 324.026
 c h
187.301 324.026 m f
11 330.526 m 8.898 328.026 10.301 325.624 14.801 324.026 c 17.602 323.026
 19 322.026 18.801 321.026 c 18.398 319.124 14.301 318.526 12.398 320.124
 c 10.5 321.725 9.398 320.526 11 318.526 c 12.602 316.526 18.398 316.624
 20.398 318.624 c 23.398 321.624 22.102 323.924 16.5 325.725 c 12.602 326.924
 11.801 330.026 15.398 330.026 c 16.801 330.026 18.199 329.624 18.5 329.026
 c 19.398 327.526 21 327.827 21 329.424 c 21 332.225 13.102 333.124 11 330.526
 c h
11 330.526 m f
23.801 329.827 m 23.5 329.124 23.602 326.026 23.898 323.026 c 24.398 318.924
 24.898 317.424 26.301 317.225 c 27.199 317.026 28 317.327 28 317.924 c 
28 318.526 27.602 319.026 27 319.026 c 25.5 319.026 25.801 326.827 27.199
 327.225 c 28.102 327.526 28 328.124 26.801 329.327 c 24.801 331.327 24.398
 331.424 23.801 329.827 c h
23.801 329.827 m f
47.801 329.924 m 47.602 329.424 46 328.827 44.199 328.827 c 41 328.725 
l 41 322.827 l 41 319.624 41.398 317.026 42 317.026 c 42.602 317.026 43 
318.124 43 319.424 c 43 323.124 44.801 327.026 46.5 327.026 c 47.602 327.026
 48 325.924 48 322.526 c 48 319.327 48.5 317.827 49.5 317.327 c 50.398 317.026
 51.398 317.124 51.801 317.526 c 52.199 317.924 51.898 318.526 51.301 318.725
 c 49.602 319.327 49.602 326.725 51.199 327.225 c 52.102 327.526 52 328.124
 50.801 329.327 c 48.898 331.327 48.301 331.424 47.801 329.924 c h
47.801 329.924 m f
91.801 329.827 m 91.5 329.124 91.602 326.026 91.898 323.026 c 92.398 318.924
 92.898 317.424 94.301 317.225 c 95.199 317.026 96 317.327 96 317.924 c 
96 318.526 95.602 319.026 95 319.026 c 93.5 319.026 93.801 326.827 95.199
 327.225 c 96.102 327.526 96 328.124 94.801 329.327 c 92.801 331.327 92.398
 331.424 91.801 329.827 c h
91.801 329.827 m f
31.301 328.327 m 28.699 327.327 30.102 325.924 33 326.526 c 34.699 326.924
 36 326.725 36 326.225 c 36 325.725 34.699 325.026 33.102 324.725 c 29.801
 324.026 28.199 320.725 30 318.526 c 30.602 317.827 32.898 317.225 35.398
 317.225 c 39.801 317.327 l 39.199 321.424 l 38.398 328.424 36.102 330.327
 31.301 328.327 c h
36 321.526 m 36 319.924 33.301 318.327 32.301 319.327 c 32 319.725 32 320.624
 32.301 321.526 c 33.102 323.526 36 323.526 36 321.526 c h
36 321.526 m f
54 320.827 m 54 316.327 54.398 313.026 55 313.026 c 55.602 313.026 56 314.124
 56 315.424 c 56 317.327 56.398 317.624 58.301 317.327 c 61.199 316.725 
63.102 318.924 63.199 322.924 c 63.301 327.124 61.5 329.026 57.398 328.827
 c 54 328.725 l h
60.5 323.026 m 60.5 318.624 57.398 317.424 56.398 321.424 c 55.602 324.924
 56.602 327.225 58.699 326.827 c 60 326.624 60.5 325.526 60.5 323.026 c 
h
60.5 323.026 m f
66.199 327.827 m 65.5 327.124 65 325.026 65 323.026 c 65 318.924 66.398
 317.026 69.602 317.026 c 74.398 317.026 76.898 323.924 73.398 327.424 c
 71.602 329.327 67.898 329.526 66.199 327.827 c h
72 322.924 m 72 319.327 71.801 318.924 69.801 319.225 c 65.801 319.725 
66.102 327.026 70 327.026 c 71.699 327.026 72 326.424 72 322.924 c h
72 322.924 m f
77.102 327.624 m 75.5 325.624 76.699 323.327 80.102 322.124 c 84.301 320.624
 83.898 318.624 79.398 319.327 c 76.398 319.827 76 319.725 77 318.526 c 
79.398 315.624 85 317.026 85 320.526 c 85 322.225 84.199 323.124 82 323.924
 c 77.898 325.327 78 327.424 82.199 326.424 c 85.102 325.827 85.301 325.924
 84.102 327.424 c 82.5 329.424 78.699 329.526 77.102 327.624 c h
77.102 327.624 m f
87 323.026 m 87 319.725 87.398 317.026 88 317.026 c 88.602 317.026 89 319.725
 89 323.026 c 89 326.327 88.602 329.026 88 329.026 c 87.398 329.026 87 326.327
 87 323.026 c h
87 323.026 m f
98 323.026 m 98 319.725 98.398 317.026 99 317.026 c 99.602 317.026 100 
319.725 100 323.026 c 100 326.327 99.602 329.026 99 329.026 c 98.398 329.026
 98 326.327 98 323.026 c h
98 323.026 m f
103.602 327.424 m 100.199 324.026 102.301 317.026 106.801 317.026 c 110.5
 317.026 112 318.725 112 322.624 c 112 326.225 109.801 329.026 107 329.026
 c 106 329.026 104.398 328.327 103.602 327.424 c h
109.5 325.026 m 110.398 322.124 109.102 319.026 107 319.026 c 104.898 319.026
 103.602 322.124 104.5 325.026 c 104.801 326.124 106 327.026 107 327.026
 c 108 327.026 109.199 326.124 109.5 325.026 c h
109.5 325.026 m f
114 322.924 m 114 319.624 114.398 317.026 115 317.026 c 115.602 317.026
 116 318.725 116 320.827 c 116 325.327 117.301 327.526 119.398 326.725 c
 120.5 326.225 121 324.827 121 321.526 c 121 319.026 121.5 317.026 122 317.026
 c 122.699 317.026 123 319.225 122.801 322.827 c 122.5 328.526 l 118.301
 328.624 l 114 328.827 l h
114 322.924 m f
16.5 303.026 m 15 300.026 15 299.624 16.898 295.725 c 18 293.526 18.801
 291.526 18.602 291.327 c 18.5 291.124 16 290.424 13.102 289.725 c 8.5 288.624
 8 288.327 8.5 286.327 c 9.801 281.124 11.102 278.725 12.102 279.725 c 12.699
 280.327 12.699 281.624 12.102 283.424 c 11.102 285.827 11.301 286.225 13.699
 287.124 c 15.102 287.624 16.5 287.827 16.801 287.624 c 17 287.327 16.5 
285.026 15.602 282.424 c 14.102 278.026 14.102 277.624 15.898 275.124 c 
17.801 272.526 17.801 272.424 15.801 269.725 c 14 267.327 13.199 267.026
 7.898 267.026 c 3.199 267.026 2 266.725 2 265.424 c 2 264.624 1.602 264.225
 1 264.526 c 0.5 264.827 0 264.225 0 263.124 c 0 261.124 0.5 261.026 15.602
 261.026 c 31.199 261.026 l 46.602 245.624 l 70.5 221.624 86 209.526 105
 199.624 c 125.199 189.225 138.699 184.827 154.5 183.424 c 158.898 183.026
 163.199 182.624 164 182.526 c 165.199 182.424 165.602 180.526 165.801 173.725
 c 166 168.526 166.602 164.827 167.301 164.225 c 170 162.225 183.301 157.827
 197 154.424 c 222.5 148.225 241.5 140.225 257.898 129.026 c 268.199 121.924
 280.199 111.225 279.398 109.924 c 278.398 108.124 281.898 104.026 284.5
 104.026 c 286.602 104.026 289 102.327 299.102 93.526 c 300.602 92.225 305.199
 88.827 309.398 86.026 c 313.699 83.026 317 80.026 317 79.124 c 317 76.424
 319.102 75.026 323 75.026 c 326.398 75.026 335 70.725 348.199 62.327 c 
352.801 59.424 l 347.199 57.624 l 339.102 55.124 333.801 50.327 329.398 
41.526 c 324.699 32.026 323 20.827 324.898 11.725 c 326.398 4.424 328.5 
0.026 330.5 0.026 c 332.301 0.026 332.398 1.225 330.898 2.725 c 329.199 
4.424 327 14.124 327 19.924 c 327 30.624 331.699 43.026 338.199 49.327 c
 342.301 53.225 348.699 56.026 353.898 56.026 c 358.301 56.026 364.398 52.624
 389.5 36.526 c 392.301 34.725 397.699 31.327 401.5 29.026 c 411.199 23.026
 431 10.624 440 4.827 c 447 0.424 451.602 -1.275 450.801 1.026 c 450.699
 1.526 429.801 14.827 404.5 30.624 c 379.199 46.327 358.102 59.624 357.5
 60.124 c 356.199 61.327 361.602 60.327 371.5 57.526 c 391.5 51.725 410.102
 49.026 429.801 49.026 c 445 49.026 l 445 46.624 l 445 45.026 445.699 43.924
 447.102 43.526 c 449.699 42.624 452.102 44.624 449.699 45.624 c 446.5 46.827
 447.898 48.924 452.5 49.624 c 458.801 50.526 460.301 49.827 458.801 46.526
 c 458.199 45.124 457.102 44.026 456.301 44.026 c 454.801 44.026 454.602
 42.424 456 41.526 c 457.898 40.327 460.699 43.026 462.398 47.526 c 463.602
 50.526 464.699 52.026 466 52.026 c 470 52.026 481 56.124 481 57.624 c 481
 58.725 480.398 58.924 478.699 58.424 c 475.301 57.327 466.602 55.026 465.801
 55.026 c 465.398 55.026 465.5 56.225 466 57.624 c 467.301 60.827 467.301
 61.026 465.699 61.026 c 465 61.026 463.801 59.424 463.102 57.526 c 462.398
 55.624 461.5 54.026 461.102 54.026 c 459.102 54.026 456 64.424 456 70.924
 c 456 77.526 l 460.398 72.526 l 463.5 69.026 465.199 67.827 465.898 68.526
 c 466.699 69.327 465.398 71.225 461.5 75.026 c 458.5 78.026 456 80.725 
456 81.124 c 456 81.526 457.398 83.225 459.102 84.924 c 461.602 87.424 462.102
 88.624 461.602 90.827 c 460.898 93.827 456.699 98.026 454.398 98.026 c 
452.199 98.026 449 94.327 449 91.827 c 449 90.526 447.602 87.526 446 85.026
 c 443 80.526 l 453 79.924 l 453 72.526 l 453 66.026 452.602 64.526 450.301
 61.124 c 447 56.424 446.398 56.225 445.602 59.526 c 444.5 63.725 442.801
 61.327 443.5 56.526 c 444.199 52.327 l 437.801 51.827 l 429.301 51.225 
410.801 52.424 398.5 54.526 c 386.699 56.424 366.301 61.624 363.5 63.424
 c 362.398 64.124 358.602 65.725 355 66.924 c 351.398 68.225 343.898 71.424
 338.301 74.124 c 330.5 78.026 328.102 79.624 327.602 81.526 c 326.898 84.424
 323.602 86.424 320.898 85.725 c 319.5 85.327 315.898 87.424 309.199 92.526
 c 291.602 105.827 291.102 106.327 291 109.225 c 291 112.124 287.801 115.026
 284.699 115.026 c 283.699 115.026 279.5 118.026 275.398 121.624 c 271.301
 125.225 263.699 130.827 258.699 134.225 c 240 146.424 231.602 149.827 183.5
 163.827 c 170.5 167.624 l 169.898 186.827 l 161.199 187.526 l 149.102 188.424
 135.102 191.424 128.602 194.327 c 125.602 195.725 122.199 196.624 121.199
 196.327 c 116.699 195.225 95.102 207.526 78 220.924 c 69.602 227.526 37.602
 257.725 34.199 262.327 c 33.5 263.225 32.199 264.026 31.301 264.026 c 29.898
 264.026 29.898 264.327 31.5 266.026 c 32.801 267.424 33 268.424 32.301 
269.124 c 31.602 269.827 30.898 269.624 30 268.526 c 29.199 267.526 27 267.026
 23.398 267.026 c 17.898 267.026 16.801 267.827 19.5 270.026 c 21.5 271.725
 21.398 273.026 18.898 275.624 c 16.699 277.924 l 19.102 284.526 l 20.898
 289.624 22.102 291.424 24.699 293.026 c 26.602 294.124 28.199 296.026 28.602
 297.725 c 29 299.225 29.699 300.827 30.199 301.124 c 31.699 302.026 26.102
 305.225 21.898 305.725 c 18.5 306.225 18 306.026 16.5 303.026 c h
26 299.124 m 26 296.725 24.602 295.026 22.5 295.026 c 19.898 295.026 17.5
 297.424 18.5 299.026 c 19.301 300.225 26 300.424 26 299.124 c h
459 89.526 m 459 85.225 452.801 84.026 451.5 88.124 c 450.602 90.924 451.699
 92.026 455.602 92.026 c 458.5 92.026 459 91.725 459 89.526 c h
451.398 84.424 m 453.898 83.526 453.301 82.026 450.5 82.026 c 448.898 82.026
 448 82.624 448 83.526 c 448 85.124 448.898 85.424 451.398 84.424 c h
455.801 58.526 m 457.801 54.124 457.301 53.327 452.301 52.624 c 449.801
 52.327 447.5 52.124 447.301 52.327 c 446.898 52.827 453.102 61.026 453.898
 61.026 c 454.301 61.026 455.199 59.924 455.801 58.526 c h
455.801 58.526 m f
180.801 267.827 m 180 265.725 181 264.026 183.102 264.026 c 184.5 264.026
 185 264.725 185 266.526 c 185 268.327 184.5 269.026 183.102 269.026 c 182.102
 269.026 181 268.424 180.801 267.827 c h
180.801 267.827 m f
181.699 256.624 m 181 254.827 181.801 254.026 184.199 254.026 c 185.301
 254.026 186 254.725 186 256.026 c 186 258.327 182.5 258.827 181.699 256.624
 c h
181.699 256.624 m f
195.699 256.624 m 195 254.827 195.801 254.026 198.199 254.026 c 199.301
 254.026 200 254.725 200 256.026 c 200 258.327 196.5 258.827 195.699 256.624
 c h
195.699 256.624 m f
278.102 254.624 m 276.5 252.725 277.398 250.026 279.5 250.026 c 281.699
 250.026 282.5 252.924 280.801 254.624 c 279.5 255.924 279.199 255.924 278.102
 254.624 c h
278.102 254.624 m f
287.602 252.327 m 287.199 251.424 287.5 250.026 288.301 249.327 c 289.5
 248.124 289.898 248.124 290.898 249.327 c 292.199 251.026 291.398 254.026
 289.5 254.026 c 288.801 254.026 287.898 253.225 287.602 252.327 c h
287.602 252.327 m f
259.301 251.924 m 258 250.624 258.699 248.026 260.398 248.026 c 262.602
 248.026 264.102 250.225 262.898 251.725 c 261.5 253.327 260.699 253.327
 259.301 251.924 c h
259.301 251.924 m f
241 249.424 m 239.898 248.225 239.898 247.624 241.102 246.526 c 243.102
 244.526 245.398 246.124 244.5 248.924 c 243.699 251.424 242.699 251.624
 241 249.424 c h
241 249.424 m f
199.699 248.327 m 198.199 246.924 199 244.026 200.898 244.026 c 203.301
 244.026 204.199 245.327 203.398 247.424 c 202.801 249.026 200.898 249.526
 199.699 248.327 c h
199.699 248.327 m f
269.102 247.624 m 267.699 246.026 268.199 243.026 269.801 243.026 c 270.301
 243.026 271.301 243.725 272 244.624 c 273.102 245.827 273.102 246.424 271.801
 247.624 c 270.5 248.924 270.199 248.924 269.102 247.624 c h
269.102 247.624 m f
210.602 245.327 m 210.199 244.424 210.398 243.225 210.898 242.725 c 212.398
 241.225 215 242.725 215 245.026 c 215 247.526 211.5 247.827 210.602 245.327
 c h
210.602 245.327 m f
249.102 241.624 m 247.398 239.624 250.398 237.327 252.5 239.026 c 253.699
 240.026 253.801 240.624 252.898 241.624 c 252.301 242.424 251.398 243.026
 251 243.026 c 250.602 243.026 249.699 242.424 249.102 241.624 c h
249.102 241.624 m f
216.398 237.526 m 216 236.624 216.199 235.424 216.801 234.827 c 218.301
 233.327 221.199 234.725 220.801 236.725 c 220.398 239.026 217.199 239.624
 216.398 237.526 c h
216.398 237.526 m f
265.102 225.424 m 263.5 223.424 263.301 222.327 264.102 220.424 c 264.602
 219.026 265 217.526 265 217.026 c 265 216.624 262 214.327 258.301 212.026
 c 250 206.827 250.398 207.225 251.602 206.026 c 252.199 205.424 254 206.026
 256.5 207.725 c 261.102 210.827 260.801 210.327 252 199.624 c 247.398 194.124
 245.5 192.624 240.801 190.924 c 237.602 189.725 235 188.124 235 187.424
 c 235 185.924 260.898 194.327 262.199 196.225 c 263.301 198.026 263.199
 201.026 262.102 201.026 c 261.602 201.026 260.898 200.124 260.5 199.124
 c 260.199 197.924 258.102 196.526 255.398 195.624 c 250.102 193.827 250
 193.725 259.898 205.327 c 266.398 212.827 267.801 214.026 270.5 214.026
 c 274.102 214.026 277 216.624 277 219.725 c 277 220.924 277.5 222.026 278.199
 222.225 c 279.898 222.827 272 228.026 269.301 228.026 c 268.102 228.026
 266.199 226.827 265.102 225.424 c h
274.398 221.124 m 275.301 219.827 274.102 217.225 272.398 216.624 c 270.199
 215.725 267 217.827 267 220.026 c 267 221.624 267.699 222.026 270.398 222.026
 c 272.301 222.026 274.102 221.624 274.398 221.124 c h
274.398 221.124 m f
32 212.026 m 32 205.624 32.301 204.026 33.5 204.026 c 34.699 204.026 35
 205.624 35 212.026 c 35 218.424 34.699 220.026 33.5 220.026 c 32.301 220.026
 32 218.424 32 212.026 c h
32 212.026 m f
60.199 217.827 m 58.898 214.124 59.898 204.026 61.602 204.026 c 62.602 
204.026 63 205.424 63 208.924 c 63 211.924 63.5 214.026 64.301 214.327 c
 65.199 214.725 65.102 215.124 64 216.026 c 62.898 216.924 62.801 217.327
 63.801 217.725 c 65.699 218.526 65.199 220.026 63 220.026 c 61.801 220.026
 60.602 219.124 60.199 217.827 c h
60.199 217.827 m f
8.199 211.526 m 5.398 204.725 5.301 204.026 7 204.026 c 8 204.026 9 204.924
 9.301 206.026 c 9.699 207.424 10.699 208.026 12.801 208.026 c 14.898 208.026
 15.898 207.424 16.301 206.026 c 16.898 203.827 19 203.225 19 205.327 c 
19 208.124 14.102 218.526 12.699 218.827 c 11.801 219.026 10.301 216.624
 8.199 211.526 c h
14 211.924 m 14 210.924 13.301 210.026 12.5 210.026 c 10.898 210.026 10.602
 210.924 11.602 213.424 c 12.398 215.424 14 214.526 14 211.924 c h
14 211.924 m f
20.898 215.327 m 20.898 215.225 20.801 213.225 20.801 211.026 c 20.801 
204.624 20.898 204.026 22 204.026 c 22.602 204.026 23 206.026 23 208.424
 c 23 211.526 23.5 213.026 24.602 213.424 c 26.898 214.327 27.199 213.725
 27.398 208.526 c 27.5 205.725 28 204.026 28.801 204.026 c 30.398 204.026
 30.398 213.424 28.699 214.827 c 27.602 215.827 21.102 216.225 20.898 215.327
 c h
20.898 215.327 m f
38.301 215.327 m 36.801 214.827 36.5 212.026 37.898 212.026 c 38.5 212.026
 39.199 212.526 39.5 213.026 c 40.301 214.225 43 214.327 43 213.124 c 43
 212.624 41.699 212.026 40.102 211.725 c 36.801 211.026 35.199 207.725 37
 205.526 c 38.199 204.124 46.699 203.827 47.602 205.225 c 47.898 205.624
 47.602 206.026 47.102 206.026 c 46.5 206.026 46 207.725 46 209.827 c 46
 215.225 43.102 217.327 38.301 215.327 c h
43 208.624 m 43 206.526 41 205.624 39.699 206.924 c 38.801 207.827 38.898
 208.327 40 209.026 c 42.102 210.424 43 210.225 43 208.624 c h
43 208.624 m f
48 211.225 m 48 205.424 49.199 204.026 54.199 204.026 c 58.102 204.026 
l 57.801 209.725 l 57.398 216.924 55.199 218.124 54.801 211.327 c 54.602
 207.725 54.102 206.424 52.801 206.225 c 51.301 205.924 51 206.624 51 210.924
 c 51 214.827 50.602 216.026 49.5 216.026 c 48.398 216.026 48 214.827 48
 211.225 c h
48 211.225 m f
41 170.026 m 41 163.924 41.301 161.924 42.199 162.225 c 42.898 162.526 
43.5 164.327 43.5 166.327 c 43.602 170.327 45.102 172.624 46.898 171.624
 c 47.5 171.225 48 168.924 48 166.424 c 48 164.026 48.5 162.026 49 162.026
 c 49.602 162.026 50 164.424 50 167.424 c 50 173.225 48.5 174.924 44.602
 173.424 c 43.199 172.924 42.898 173.225 43.199 175.026 c 43.301 176.327
 42.898 177.526 42.301 177.725 c 41.301 178.124 41 176.124 41 170.026 c 
h
41 170.026 m f
114.5 177.026 m 114.199 176.526 114.602 176.026 115.398 176.026 c 116.301
 176.026 117 176.526 117 177.026 c 117 177.624 116.602 178.026 116.102 178.026
 c 115.5 178.026 114.801 177.624 114.5 177.026 c h
114.5 177.026 m f
140 170.026 m 140 165.327 140.398 162.026 141 162.026 c 141.602 162.026
 142 163.725 142 165.924 c 142 169.827 144 172.725 146 171.526 c 146.5 171.225
 147 168.924 147 166.424 c 147 164.026 147.5 162.026 148 162.026 c 148.602
 162.026 149 164.225 149 166.924 c 149 172.327 147.301 174.624 144 173.526
 c 142.301 173.026 142 173.327 142 175.424 c 142 176.827 141.602 178.026
 141 178.026 c 140.398 178.026 140 174.725 140 170.026 c h
140 170.026 m f
18.602 175.424 m 15.5 172.327 17.199 169.526 22.801 168.424 c 27.102 167.526
 27.398 164.026 23.199 164.026 c 21.699 164.026 19.898 164.526 19.199 165.225
 c 17.5 166.924 16.398 165.424 18 163.526 c 20.5 160.424 29 162.327 29 165.924
 c 29 168.124 27.5 169.424 23.5 170.725 c 21.898 171.225 20.5 172.327 20.5
 173.124 c 20.5 174.624 23.301 174.827 26.301 173.526 c 27.5 173.026 28 
173.225 28 174.327 c 28 177.225 21.199 178.026 18.602 175.424 c h
18.602 175.424 m f
108.699 174.827 m 108.5 174.124 108.5 170.924 108.801 167.827 c 109.199
 163.026 109.602 162.026 111.102 162.026 c 112.199 162.026 113 162.526 113
 163.026 c 113 163.624 112.602 164.026 112 164.026 c 110.5 164.026 110.801
 171.827 112.199 172.225 c 113.102 172.526 113 173.124 111.801 174.327 c
 109.801 176.327 109.398 176.424 108.699 174.827 c h
108.699 174.827 m f
32.199 172.827 m 31.5 172.124 31 170.026 31 168.026 c 31 166.026 31.5 163.924
 32.199 163.225 c 33.898 161.526 37.5 161.725 39 163.526 c 40.699 165.526
 39.5 166.725 37.5 165.026 c 35.199 163.124 33 164.526 33 167.924 c 33 171.424
 34.5 172.725 36.5 171.026 c 38.801 169.124 40.602 170.327 38.602 172.327
 c 36.602 174.327 33.898 174.526 32.199 172.827 c h
32.199 172.827 m f
54.301 173.327 m 52.801 172.827 52.5 170.026 53.898 170.026 c 54.5 170.026
 55.199 170.526 55.5 171.026 c 56.301 172.327 59 172.327 59 171.124 c 59
 170.624 57.699 169.924 56 169.526 c 52.398 168.725 51.602 167.624 52.398
 164.526 c 52.898 162.424 53.5 162.124 58 162.225 c 61.898 162.327 63 162.725
 62.5 163.827 c 62.199 164.526 62 166.424 62 168.026 c 62 172.624 58.398
 175.026 54.301 173.327 c h
59 166.624 m 59 165.827 58.5 164.827 58 164.526 c 56.301 163.424 54 164.827
 54.602 166.526 c 55.398 168.424 59 168.526 59 166.624 c h
59 166.624 m f
64 167.827 m 64 164.624 64.398 162.026 65 162.026 c 65.602 162.026 66 162.624
 66.102 163.327 c 66.301 167.225 67 170.424 67.898 171.327 c 69.602 173.026
 71 170.924 71 166.424 c 71 164.026 71.5 162.026 72 162.026 c 73.5 162.026
 73.199 171.624 71.801 172.725 c 71.102 173.327 69 173.725 67.301 173.725
 c 64 173.725 l h
64 167.827 m f
75 173.026 m 75 172.526 76.102 172.026 77.5 172.026 c 78.898 172.026 80
 171.725 80 171.424 c 80 171.124 78.898 169.424 77.5 167.624 c 73.898 162.924
 74.301 162.026 79.5 162.026 c 84.602 162.026 85.699 163.725 80.898 164.225
 c 77.801 164.526 l 80.898 168.424 l 82.602 170.526 84 172.725 84 173.124
 c 84 173.624 82 174.026 79.5 174.026 c 77 174.026 75 173.624 75 173.026
 c h
75 173.026 m f
86.602 171.827 m 84.602 168.924 84.602 165.624 86.602 163.624 c 88.602 
161.624 92.398 161.526 94 163.526 c 95.102 164.827 94.801 165.026 92 164.827
 c 90.102 164.624 88.5 165.026 88.301 165.827 c 88 166.624 89 167.026 91.398
 167.026 c 94.602 167.026 95 167.327 95 169.526 c 95 173.924 89.199 175.526
 86.602 171.827 c h
91.398 171.424 m 93.898 170.424 93.301 169.026 90.5 169.225 c 88 169.424
 87.398 170.124 88.699 171.327 c 89.5 172.124 89.5 172.124 91.398 171.424
 c h
91.398 171.424 m f
97 167.924 m 97 164.624 97.398 162.026 98 162.026 c 98.602 162.026 99 162.624
 99.102 163.327 c 99.102 163.924 99.398 165.924 99.602 167.526 c 100.699
 174.026 104 173.225 104 166.424 c 104 163.624 104.398 162.026 105.301 162.026
 c 106.102 162.026 106.398 163.624 106.199 167.526 c 106 170.526 105.5 173.124
 105.199 173.124 c 104.801 173.225 102.801 173.424 100.801 173.526 c 97 
173.725 l h
97 167.924 m f
114.898 172.827 m 114.898 172.124 114.699 169.924 114.602 168.026 c 114.301
 164.124 114.801 162.026 116.102 162.026 c 116.602 162.026 117 164.725 117
 168.026 c 117 171.327 116.602 174.026 116 174.026 c 115.5 174.026 115 173.424
 114.898 172.827 c h
114.898 172.827 m f
120 172.526 m 118.301 170.526 119.398 168.225 122.5 167.424 c 123.898 167.124
 125 166.124 125 165.327 c 125 164.124 124.301 163.924 121.898 164.424 c
 119.699 164.827 119 164.624 119.301 163.725 c 120.199 160.924 128 161.924
 128 164.827 c 128 167.124 126.102 169.026 123.801 169.026 c 122.801 169.026
 122 169.725 122 170.526 c 122 172.225 124.5 172.526 125.5 171.026 c 125.898
 170.424 126.602 170.327 127.199 170.624 c 127.898 171.124 127.602 171.827
 126.5 172.725 c 124 174.424 121.5 174.424 120 172.526 c h
120 172.526 m f
130.602 171.827 m 128.699 169.225 128.602 166.725 130 163.924 c 131.602
 161.124 138 161.624 138 164.624 c 138 166.327 136.301 166.526 135.801 164.827
 c 135 162.526 132 164.924 132 167.924 c 132 171.424 133.5 172.725 135.602
 170.924 c 137.5 169.327 138.602 170.526 137 172.526 c 135.199 174.725 132.398
 174.424 130.602 171.827 c h
130.602 171.827 m f
266 172.026 m 266 170.924 265.5 170.026 264.801 170.026 c 263.898 170.026
 263.898 169.725 264.801 168.827 c 265.5 168.124 266 165.424 266 162.624
 c 266 156.424 266.898 157.026 267.102 163.424 c 267.301 166.526 267.898
 168.424 268.898 169.026 c 270.301 169.827 270.301 169.924 268.801 170.026
 c 267.801 170.026 267 170.327 267 170.624 c 267 171.026 267.801 171.924
 268.801 172.624 c 270.398 173.827 270.301 173.924 268.301 174.026 c 266.699
 174.026 266 173.424 266 172.026 c h
266 172.026 m f
334 166.526 m 334 159.026 l 338 159.026 l 341.398 159.026 342 159.327 342.602
 161.624 c 343.699 165.924 341.898 169.526 338.699 169.526 c 336.5 169.424
 336 169.924 336 171.725 c 336 173.026 335.602 174.026 335 174.026 c 334.398
 174.026 334 170.827 334 166.526 c h
340.801 164.327 m 340.602 161.327 340.102 160.526 338.5 160.526 c 336.898
 160.526 336.398 161.327 336.199 164.327 c 335.898 167.725 336.102 168.026
 338.5 168.026 c 340.898 168.026 341.102 167.725 340.801 164.327 c h
340.801 164.327 m f
357 166.526 m 357 162.424 357.398 159.026 357.801 159.026 c 358.199 159.026
 358.602 160.526 358.699 162.327 c 358.898 167.827 358.898 168.026 360.898
 168.026 c 363.102 168.026 364 166.124 364 161.424 c 364 159.424 364.398
 158.124 365 158.526 c 366 159.124 365.5 167.424 364.398 169.225 c 364 169.725
 362.398 169.924 360.801 169.624 c 358 169.026 357.801 169.225 358.398 171.526
 c 358.801 172.924 358.602 174.026 358 174.026 c 357.398 174.026 357 170.924
 357 166.526 c h
357 166.526 m f
241.602 165.827 m 239.102 158.924 238.699 155.124 241.102 160.424 c 242.102
 162.424 243 163.026 245.602 163.026 c 248.301 163.026 249.102 162.526 249.602
 160.526 c 249.898 159.124 250.699 158.026 251.199 158.026 c 251.801 158.026
 252 158.624 251.699 159.327 c 251.5 159.924 250.301 163.327 249 166.827
 c 247.801 170.225 246.199 173.026 245.5 173.026 c 244.801 173.026 243.102
 169.827 241.602 165.827 c h
248 164.827 m 248 164.327 246.898 164.026 245.5 164.026 c 242.602 164.026
 242.602 163.924 244.102 167.725 c 245.199 170.526 l 246.5 168.026 l 247.301
 166.624 247.898 165.225 248 164.827 c h
248 164.827 m f
254 165.225 m 254 159.624 255.102 158.225 259.398 158.526 c 262.301 158.725
 262.398 158.827 262.398 163.624 c 262.301 166.327 261.898 168.526 261.398
 168.526 c 260.898 168.526 260.602 168.124 260.801 167.526 c 261 167.026
 260.898 165.124 260.5 163.327 c 260.102 160.924 259.398 160.026 258 160.026
 c 256.301 160.026 256 160.725 256 164.424 c 256 166.924 255.602 169.225
 255 169.526 c 254.398 169.924 254 168.225 254 165.225 c h
254 165.225 m f
272.301 169.327 m 269.699 168.327 271 165.026 274.602 163.526 c 278.801
 161.827 278.301 159.526 273.898 160.424 c 272.301 160.725 271 160.624 271
 160.124 c 271 158.725 275.898 158.225 277.602 159.526 c 279.699 161.026
 279 164.424 276.5 164.827 c 273.898 165.327 272.602 166.624 273.398 167.924
 c 273.898 168.725 274.699 168.725 276.102 167.924 c 278.5 166.725 280.102
 167.725 278 169.026 c 276.398 170.026 274.301 170.124 272.301 169.327 c
 h
272.301 169.327 m f
281.102 162.327 m 281.199 158.327 281.602 154.827 282.102 154.424 c 282.602
 154.124 283 155.124 283 156.526 c 283 158.924 283.301 159.124 285.5 158.624
 c 289 157.725 291.602 161.827 290.301 166.327 c 289.5 169.225 289.102 169.526
 285.199 169.624 c 281 169.725 l h
288.5 166.026 m 289.398 163.124 288.102 160.026 286 160.026 c 285 160.026
 283.801 160.924 283.5 162.026 c 282.602 164.924 283.898 168.026 286 168.026
 c 287 168.026 288.199 167.124 288.5 166.026 c h
288.5 166.026 m f
293 164.424 m 293 161.424 293.5 159.026 294 159.026 c 294.602 159.026 295
 160.827 295 163.026 c 295 165.725 295.5 167.327 296.5 167.624 c 298.801
 168.526 298.301 169.827 295.5 169.827 c 293.102 169.827 293 169.424 293
 164.424 c h
293 164.424 m f
299.699 169.327 m 299 168.124 299.5 160.225 300.301 159.327 c 300.5 159.124
 302.398 158.827 304.398 158.725 c 308 158.424 l 308 164.225 l 308 171.124
 306.199 172.026 305.801 165.327 c 305.5 161.327 305.199 160.526 303.5 160.526
 c 301.801 160.526 301.398 161.327 301 165.526 c 300.699 168.526 300.199
 170.026 299.699 169.327 c h
299.699 169.327 m f
311 163.827 m 311 160.124 311.398 158.124 312 158.526 c 312.602 158.827
 313 161.124 313 163.624 c 313 167.624 313.199 168.026 315.5 168.026 c 317.801
 168.026 318 167.725 318 162.924 c 318 159.827 318.398 158.124 319 158.526
 c 320.398 159.424 320.199 167.624 318.699 168.827 c 318 169.424 316 169.827
 314.199 169.827 c 311 169.725 l h
311 163.827 m f
323 168.526 m 322.398 167.827 322 165.424 322.199 163.327 c 322.5 159.827
 322.801 159.526 325.801 159.225 c 329.801 158.827 329.602 156.424 325.602
 156.725 c 324.199 156.827 323 156.526 323 156.026 c 323 154.526 326.801
 153.827 329 155.026 c 330.699 155.924 331 157.124 331 162.924 c 331 169.725
 l 327.602 169.827 l 325.699 169.924 323.699 169.327 323 168.526 c h
328.801 164.327 m 328.602 161.327 328.102 160.526 326.5 160.526 c 325.199
 160.526 324.398 161.327 324.199 162.827 c 323.699 166.225 324.699 168.026
 327 168.026 c 328.801 168.026 329.102 167.526 328.801 164.327 c h
328.801 164.327 m f
346 168.526 m 345 167.327 345.398 167.225 348.398 167.725 c 350.801 168.124
 352 167.924 352 167.124 c 352 166.526 351 166.026 349.699 166.026 c 348.398
 166.026 346.898 165.526 346.199 164.827 c 343.301 161.924 346.199 157.026
 349.801 158.924 c 351.102 159.624 352 159.624 352.801 158.827 c 354.199
 157.424 354.301 157.924 354 163.526 c 353.898 165.725 353.398 168.124 352.801
 168.827 c 351.398 170.424 347.5 170.327 346 168.526 c h
352 163.624 m 352 161.827 350.5 160.026 348.898 160.026 c 347.699 160.026
 347 160.725 347 162.026 c 347 163.526 347.699 164.026 349.5 164.026 c 350.898
 164.026 352 163.827 352 163.624 c h
352 163.624 m f
368 164.327 m 368 158.026 369.801 157.124 370.199 163.327 c 370.398 166.827
 370.898 167.624 372.801 167.827 c 374.801 168.124 375 167.725 375 163.624
 c 375 161.124 375.5 159.026 376 159.026 c 377.5 159.026 377.199 167.624
 375.801 168.725 c 375.102 169.327 373 169.725 371.301 169.725 c 368 169.725
 l h
368 164.327 m f
442 131.624 m 442 127.526 442.5 123.827 443 123.526 c 443.602 123.124 444
 125.827 444 130.924 c 444 135.624 443.602 139.026 443 139.026 c 442.398
 139.026 442 135.924 442 131.624 c h
442 131.624 m f
470.301 137.026 m 470 135.924 469.301 135.026 468.699 135.026 c 468 135.026
 468 134.624 468.801 133.827 c 469.5 133.124 470 130.424 470 127.827 c 470
 125.225 470.5 123.026 471 123.026 c 471.602 123.026 472 125.225 472 127.924
 c 472 130.924 472.5 133.026 473.301 133.327 c 474.199 133.725 474.199 134.124
 473.102 134.827 c 471.898 135.725 471.898 136.124 472.898 137.424 c 474
 138.827 474 139.026 472.5 139.026 c 471.602 139.026 470.602 138.124 470.301
 137.026 c h
470.301 137.026 m f
409.398 134.526 m 408.699 132.624 407.398 129.424 406.602 127.526 c 404.898
 123.526 406.398 121.526 408.199 125.424 c 409.699 128.924 414.801 128.725
 416.102 125.225 c 416.602 123.924 417.398 123.124 418 123.526 c 418.602
 123.827 418.102 126.225 416.801 129.327 c 415.699 132.225 414.5 135.327
 414.301 136.327 c 413.398 139.124 411 138.225 409.398 134.526 c h
413.398 132.424 m 414.301 130.124 414.199 130.026 412.102 130.026 c 410.699
 130.026 410.301 130.526 410.699 132.026 c 411.301 134.424 412.602 134.624
 413.398 132.424 c h
413.398 132.424 m f
420 130.827 m 420 125.124 421.102 123.725 425.398 123.526 c 429 123.424
 l 429 129.225 l 429 132.424 428.602 135.026 428 135.026 c 427.5 135.026
 427 133.327 427 131.124 c 427 128.924 426.398 126.725 425.5 126.026 c 424.301
 125.026 423.898 125.225 423 127.424 c 422.5 128.924 422.102 130.424 422.102
 130.827 c 422.398 132.924 421.898 135.026 421 135.026 c 420.5 135.026 420
 133.124 420 130.827 c h
420 130.827 m f
431.602 133.327 m 430.801 131.424 434 128.026 436.602 128.026 c 437.398
 128.026 438 127.526 438 127.026 c 438 125.424 435 124.624 433.699 125.924
 c 432.301 127.327 431 127.327 431 126.026 c 431 124.225 435.898 122.924
 438.102 124.026 c 441.102 125.624 440.5 128.924 437 130.124 c 433 131.526
 433.102 133.424 437.102 132.624 c 439.301 132.225 440 132.424 439.801 133.327
 c 439.5 133.924 437.699 134.624 435.801 134.827 c 433.102 135.026 432.102
 134.725 431.602 133.327 c h
431.602 133.327 m f
447.699 134.327 m 446.199 132.827 447.199 132.124 450 132.725 c 451.898
 133.026 453 132.827 453 132.124 c 453 131.526 452 131.026 450.699 131.026
 c 448 131.026 446 129.327 446 126.827 c 446 124.624 448.898 123.026 451.5
 124.026 c 452.602 124.424 454.102 124.327 454.801 123.827 c 456.199 122.624
 456.301 123.124 456 128.026 c 455.699 133.124 454.398 135.026 451.102 135.026
 c 449.602 135.026 448 134.725 447.699 134.327 c h
453 127.624 m 453 126.827 452.301 125.924 451.398 125.624 c 449.102 124.725
 449 124.827 449 127.026 c 449 128.327 449.699 129.026 451 129.026 c 452.102
 129.026 453 128.424 453 127.624 c h
453 127.624 m f
458 130.124 m 458 124.624 458.801 123.725 463.699 123.526 c 467 123.424
 l 467 129.225 l 467 132.424 466.602 135.026 466 135.026 c 465.5 135.026
 465 133.327 465 131.225 c 465 129.124 464.5 126.924 463.801 126.225 c 461.898
 124.327 460 126.827 460 131.124 c 460 133.327 459.602 135.026 459 135.026
 c 458.5 135.026 458 132.827 458 130.124 c h
458 130.124 m f
328.5 110.026 m 328.199 109.526 328.398 109.026 328.898 109.026 c 329.5
 109.026 330 109.526 330 110.026 c 330 110.624 329.801 111.026 329.602 111.026
 c 329.301 111.026 328.801 110.624 328.5 110.026 c h
328.5 110.026 m f
333 102.526 m 333 98.225 333.398 95.026 334 95.026 c 334.602 95.026 335
 98.225 335 102.526 c 335 106.827 334.602 110.026 334 110.026 c 333.398 
110.026 333 106.827 333 102.526 c h
333 102.526 m f
338 102.526 m 338 98.225 338.398 95.026 339 95.026 c 339.602 95.026 340
 98.225 340 102.526 c 340 106.827 339.602 110.026 339 110.026 c 338.398 
110.026 338 106.827 338 102.526 c h
338 102.526 m f
423 102.526 m 423 98.225 423.398 95.026 424 95.026 c 424.602 95.026 425
 95.924 425 97.026 c 425 99.624 426.398 99.526 428.301 96.827 c 430.5 93.526
 431.398 95.225 429.301 98.827 c 427.602 101.725 427.602 101.924 429.398
 103.924 c 431.898 106.725 430.301 106.624 427.301 103.827 c 425 101.725
 l 425 105.827 l 425 108.124 424.602 110.026 424 110.026 c 423.398 110.026
 423 106.827 423 102.526 c h
423 102.526 m f
313.898 108.624 m 313.102 107.827 314.199 95.026 315.102 95.026 c 315.602
 95.026 316 96.327 316 97.924 c 316 101.124 317.199 101.924 320.699 101.225
 c 322.5 100.924 323 100.124 323 97.924 c 323 96.327 323.5 95.026 324 95.026
 c 324.602 95.026 325 98.026 325 102.026 c 325 106.026 324.602 109.026 324
 109.026 c 323.5 109.026 323 107.725 323 106.026 c 323 103.225 322.699 103.026
 319.5 103.026 c 316.301 103.026 316 103.225 316 106.026 c 316 108.725 315.102
 109.827 313.898 108.624 c h
313.898 108.624 m f
386 102.124 m 386 98.225 386.398 95.026 386.898 95.026 c 387.398 95.026
 388 96.026 388.199 97.225 c 388.398 98.827 389.398 99.624 391.801 100.124
 c 396.199 101.026 397.199 102.124 396.801 105.624 c 396.5 108.327 396.199
 108.526 391.301 108.827 c 386 109.124 l h
394.801 104.624 m 394.398 101.624 388 100.924 388 103.924 c 388 106.327
 390.5 107.924 393.199 107.225 c 394.5 106.924 395 106.026 394.801 104.624
 c h
394.801 104.624 m f
433.301 106.924 m 432.801 106.424 432.699 103.725 433 100.827 c 433.398
 96.526 433.898 95.526 435.5 95.225 c 437.102 94.924 437.301 95.124 436.301
 96.124 c 434.801 97.624 434.5 104.725 435.898 105.225 c 436.398 105.424
 436.199 106.026 435.5 106.725 c 434.801 107.424 433.898 107.526 433.301
 106.924 c h
433.301 106.924 m f
328 100.526 m 328 97.526 328.5 95.026 329 95.026 c 329.602 95.026 330 97.526
 330 100.526 c 330 103.526 329.602 106.026 329 106.026 c 328.5 106.026 328
 103.526 328 100.526 c h
328 100.526 m f
343.199 104.827 m 341.699 103.327 343.5 100.026 346 100.026 c 348.398 100.026
 349.602 98.225 348.102 96.725 c 347.199 95.827 346.398 95.924 344.898 96.827
 c 342.602 98.327 341 97.624 342.699 95.924 c 343.301 95.327 345.301 95.026
 347.102 95.225 c 352.199 95.725 352.301 99.026 347.301 101.424 c 344 103.026
 343.801 103.327 345.398 104.225 c 346.602 104.924 347.5 104.924 348.301
 104.124 c 349.898 102.526 351 102.725 350.398 104.526 c 349.699 106.327
 344.898 106.526 343.199 104.827 c h
343.199 104.827 m f
353 100.526 m 353 97.526 353.5 95.026 354 95.026 c 354.602 95.026 355 97.526
 355 100.526 c 355 103.526 354.602 106.026 354 106.026 c 353.5 106.026 353
 103.526 353 100.526 c h
353 100.526 m f
359.801 105.327 m 361.5 105.124 363 104.624 363 104.225 c 362.898 103.827
 361.602 101.924 360 100.026 c 358.301 98.124 357 96.225 357 95.827 c 357
 95.424 359.102 95.124 361.801 95.225 c 365.398 95.327 365.699 95.424 363.301
 95.725 c 361.5 95.924 360 96.424 360 96.725 c 360 97.026 361.398 98.924
 363 101.026 c 364.699 103.124 366 105.124 366 105.424 c 366 105.725 363.898
 105.924 361.301 105.827 c 357.602 105.725 357.301 105.624 359.801 105.327
 c h
359.801 105.327 m f
369.301 105.327 m 367.699 104.725 367.602 97.827 369.199 96.225 c 370.602
 94.827 375.602 94.624 376.398 95.924 c 377.301 97.225 375.801 98.124 374.5
 97.026 c 372.898 95.725 370 96.827 370 98.624 c 370 99.526 371.199 100.026
 373.5 100.026 c 376.199 100.026 377 100.424 377 101.827 c 377 105.225 373.199
 106.924 369.301 105.327 c h
373.398 104.424 m 375.898 103.526 375.301 102.026 372.5 102.026 c 370.102
 102.026 369.301 103.026 370.699 104.327 c 371.5 105.124 371.5 105.124 373.398
 104.424 c h
373.398 104.424 m f
400.199 100.827 m 400.5 95.526 l 404.801 95.424 l 409 95.225 l 409 100.624
 l 409 103.624 408.602 106.026 408 106.026 c 407.5 106.026 407 104.327 407
 102.124 c 407 98.225 405 95.327 403 96.526 c 402.5 96.827 402 99.124 402
 101.624 c 402 104.026 401.5 106.026 400.898 106.026 c 400.301 106.026 400
 103.924 400.199 100.827 c h
400.199 100.827 m f
411 100.424 m 411 97.424 411.5 95.026 412 95.026 c 412.602 95.026 413 96.526
 413 98.327 c 413 102.124 415.199 105.624 416.801 104.624 c 417.5 104.225
 418 101.924 418 99.424 c 418 97.026 418.5 95.026 419.102 95.026 c 419.699
 95.026 420 97.124 419.801 100.327 c 419.5 105.526 l 415.301 105.624 l 411
 105.827 l h
411 100.424 m f
244 93.026 m 244 88.327 244.398 85.026 245 85.026 c 245.602 85.026 246 
85.924 246 86.924 c 246 89.924 247.602 90.225 249 87.526 c 249.699 86.124
 251 85.026 251.801 85.026 c 252.801 85.026 252.699 85.827 251.102 88.327
 c 249.199 91.424 249.199 91.827 250.602 93.827 c 252.602 96.725 254 95.725
 254 91.526 c 254 89.725 254.301 87.526 254.602 86.624 c 255.301 84.924 
259 84.424 259 86.026 c 259 86.624 258.602 87.026 258 87.026 c 256.5 87.026
 256.801 94.827 258.199 95.225 c 259.102 95.526 258.898 96.225 257.602 97.624
 c 256.199 98.924 255.5 99.124 255.199 98.225 c 255 97.624 253.898 97.026
 252.898 97.026 c 251.801 97.026 249.801 95.827 248.5 94.327 c 246.102 91.526
 l 246 96.327 l 246 98.924 245.602 101.026 245 101.026 c 244.398 101.026
 244 97.725 244 93.026 c h
244 93.026 m f
379.398 100.124 m 379.699 99.624 380.898 99.424 382 99.725 c 384.801 100.424
 384.5 101.026 381.398 101.026 c 380 101.026 379.102 100.624 379.398 100.124
 c h
379.398 100.124 m f
187 92.624 m 187 84.924 188.5 82.327 189.699 88.026 c 190 89.725 190.602
 91.026 191.102 91.026 c 191.5 91.026 192.801 89.725 194 88.026 c 195.199
 86.424 196.801 85.026 197.699 85.026 c 198.801 85.026 198.301 86.124 196.102
 89.225 c 193 93.424 l 195.699 96.225 l 199.5 100.124 197.699 101.026 193.699
 97.225 c 189.699 93.327 189.102 93.225 189.301 96.624 c 189.398 98.124 
188.898 99.526 188.301 99.725 c 187.301 100.124 187 98.225 187 92.624 c 
h
187 92.624 m f
207.699 99.327 m 206.699 97.327 207.602 85.624 208.801 85.327 c 209.602
 85.026 210 85.827 210 87.725 c 210 90.124 210.398 90.526 213 90.624 c 221.699
 90.924 220.699 100.026 212 100.026 c 209.898 100.026 207.898 99.725 207.699
 99.327 c h
216 96.526 m 217.699 94.526 216.398 93.026 212.898 93.026 c 210.5 93.026
 210 93.424 210 95.526 c 210 97.526 210.5 98.026 212.398 98.026 c 213.699
 98.026 215.301 97.327 216 96.526 c h
216 96.526 m f
221.199 91.327 m 221.5 85.526 l 225.801 85.424 l 230 85.225 l 230 91.124
 l 230 98.124 228.199 99.026 227.801 92.327 c 227.5 88.327 227.199 87.526
 225.5 87.526 c 223.801 87.526 223.5 88.327 223.199 92.327 c 223 94.924 
222.398 97.026 221.898 97.026 c 221.301 97.026 221 94.624 221.199 91.327
 c h
221.199 91.327 m f
232.801 95.124 m 232.301 92.424 233.199 85.026 234 85.026 c 234.5 85.026
 235 87.124 235.199 89.827 c 235.398 93.225 235.898 94.526 237 94.526 c 
238.102 94.526 238.602 93.225 238.801 89.827 c 239 86.424 239.5 85.026 240.602
 85.026 c 242.5 85.026 242.602 94.327 240.699 95.924 c 238.801 97.424 233.102
 96.827 232.801 95.124 c h
232.801 95.124 m f
200 91.026 m 200 90.526 201.398 90.026 203 90.026 c 204.699 90.026 206 
90.526 206 91.026 c 206 91.624 204.699 92.026 203 92.026 c 201.398 92.026
 200 91.624 200 91.026 c h
200 91.026 m f
347.301 30.327 m 346.102 30.124 344.898 29.225 344.602 28.424 c 344.102
 27.225 344.699 27.026 347.5 27.624 c 350.301 28.124 351 27.924 351 26.624
 c 351 25.725 350.199 25.026 349 25.026 c 346.199 25.026 346.5 23.526 349.602
 22.124 c 351 21.526 352 20.424 351.801 19.725 c 351.199 18.225 347 17.526
 347 18.924 c 347 19.526 346.301 20.026 345.5 20.026 c 343 20.026 343.801
 17.124 346.398 16.424 c 351.602 15.124 355.602 18.225 353.301 21.827 c 
352.602 23.026 352.5 24.225 353.102 25.124 c 353.602 25.924 354 26.827 354
 27.225 c 354 28.124 351 31.026 350.199 30.924 c 349.801 30.827 348.5 30.526
 347.301 30.327 c h
347.301 30.327 m f
357.801 29.924 m 355.898 28.827 355.301 26.026 357 26.026 c 357.602 26.026
 358 26.526 358 27.026 c 358 28.327 361.699 28.327 362.5 27.026 c 362.898
 26.424 361.301 23.924 359.102 21.526 c 356.801 19.026 355 16.827 355 16.526
 c 355 16.225 357.5 16.026 360.602 16.026 c 364 16.026 365.898 16.424 365.5
 17.026 c 365.199 17.624 363.602 18.026 361.898 18.026 c 358.301 18.026 
358.301 18.526 362 21.725 c 365.5 24.624 366 28.424 363.102 30.026 c 360.699
 31.225 360 31.225 357.801 29.924 c h
357.801 29.924 m f
367.898 29.327 m 366.602 27.827 367.602 25.026 369.699 24.327 c 371.602
 23.624 374.102 27.026 373.102 28.827 c 371.898 30.924 369.398 31.225 367.898
 29.327 c h
371.199 27.526 m 371.199 27.026 370.699 26.424 370.102 26.225 c 369.5 26.026
 369 26.624 369 27.526 c 369 28.424 369.5 29.026 370.102 28.827 c 370.699
 28.624 371.199 28.026 371.199 27.526 c h
371.199 27.526 m f
Q Q
showpage
%%Trailer
end restore
%%EOF

%%EndDocument
 @endspecial 921 29933 a(In)457 b(einem)g(K)-36 b(o)36
b(ordinatensystem)457 b(mit)g(horizon)-36 b(taler)458
b(x-A)-36 b(c)g(hse)456 b(sei)i(der)e(L\344ngssc)-36
b(hnitt)457 b(der)873 31924 y(A)-36 b(ufsprungbahn)342
b(der)i(Graph)f(der)g(F)-108 b(unktion)343 b Fo(a)p Fp(.)i(Die)g
(steilste)f(Stelle)h(der)e(A)-36 b(ufsprungbahn)921 33916
y(b)36 b(e\034ndet)432 b(sic)-36 b(h)433 b(am)h(K-Punkt.)f(A)-36
b(ufgab)36 b(enstellung:)921 38454 y(Kreuzen)433 b(Sie)g(die)h(b)36
b(eiden)433 b(zutre\033enden)f(A)-36 b(ussagen)433 b(an!)p
1294 39420 43797 45 v 1294 42639 45 3219 v 2002 41362
a(Am)h(K-Punkt)f(gilt:)h Fo(a)13252 40879 y Fh(00)13818
41362 y Fn(\()p Fo(x)p Fn(\))369 b Fo(<)f Fn(0)p Fp(.)p
42680 42639 V 45046 42639 V 1294 42683 43797 45 v 1294
45746 45 3064 v 2002 44543 a(Der)434 b(K-Punkt)f(ist)h(W)-108
b(endepunkt)432 b(der)h(F)-108 b(unktion)432 b Fo(a)p
Fp(.)p 42680 45746 V 1 0 0 TeXcolorrgb 43389 44546 a
Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45046 45746 V 1294 45790 43797 45 v 1294 49008 45 3219
v 2002 47731 a Fp(Der)i(K-Punkt)f(ist)h(ein)f(Extrempunkt)g(mit)h
Fo(a)24930 47249 y Fh(0)25240 47731 y Fn(\()p Fo(x)p
Fn(\))369 b(=)f(0)p Fp(.)p 42680 49008 V 45046 49008
V 1294 49053 43797 45 v 1294 52116 45 3064 v 2002 50913
a(Der)434 b(K-Punkt)f(ist)h(ein)f(Sattelpunkt.)p 42680
52116 V 45046 52116 V 1294 52160 43797 45 v 1294 55223
45 3064 v 2002 54020 a(Am)h(K-Punkt)f(\344ndert)f(sic)-36
b(h)434 b(die)f(Kr\374mm)-36 b(ung)433 b(des)g(Graphen)f(der)h(F)-108
b(unktion)433 b Fo(a)p Fp(.)p 42680 55223 V 1 0 0 TeXcolorrgb
43389 54024 a Fi(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45046 55223 V 1294 55267 43797 45 v 47992
4800 a Fg(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Ff(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 59295 54804 45 v 0 TeXcolorgray 24421 81281 a Fp(25)p
0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

%!PS-Adobe-2.0
%%Creator: dvips(k) 5.997 Copyright 2017 Radical Eye Software
%%Title: C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN - Gesamtdokument/AN - Gesamtdokument.dvi
%%CreationDate: Fri Nov 10 08:01:10 2017
%%Pages: 100
%%PageOrder: Ascend
%%BoundingBox: 0 0 595 842
%%DocumentFonts: LMRoman12-Bold LMRoman12-Regular TeX-feymr10
%%+ LMMathSymbols10-Regular LMMathItalic12-Regular LMRoman10-Regular
%%+ LMRoman8-Regular LMMathSymbols8-Regular wasy10 LMRoman12-Italic
%%+ LMMathItalic8-Regular LMRoman6-Regular MSBM10 LMMathItalic10-Regular
%%+ LMMathExtension10-Regular LMMathSymbols6-Regular wasy8
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine:
%+ "C:\Program Files\MiKTeX 2.9\miktex\bin\x64\dvips.exe" -P pdf
%+ "C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/AN - Gesamtdokument/AN - Gesamtdokument.dvi"
%DVIPSParameters: dpi=8000
%DVIPSSource:  TeX output 2017.11.10:0900
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: alt-rule.pro 0 0
%!
% Patch by TVZ
% Makes dvips files draw rules with stroke rather than fill.
% Makes narrow rules more predictable at low resolutions
% after distilling to PDF.
% May have unknown consequences for very thick rules.
% Tested only with dvips 5.85(k).
TeXDict begin
/QV {
  gsave newpath /ruleY X /ruleX X
  Rx Ry gt
  { ruleX ruleY Ry 2 div sub moveto Rx 0 rlineto Ry }
  { ruleX Rx 2 div add ruleY moveto 0 Ry neg rlineto Rx }
  ifelse
  setlinewidth 0 setlinecap stroke grestore
} bind def
end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: pst-coil.pro 0 0
%!ps
% PostScript prologue for pst-coil.tex.
% Version 1.07, 2015/05/13
% For distribution, see pstricks.tex.
%
/tx@CoilDict 40 dict def tx@CoilDict begin
/CoilLoop { 
  /t ED 
  t sin AspectSin mul t 180 div AspectCos mul add t cos lineto } def
/Coil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED 
  /ArmB ED 
  /ArmA ED
  /h ED /w ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x0 y0 translate y1 y0 sub x1 x0 sub 2 copy Pyth 
  /TotalLength ED 
  Atan rotate 
  /BeginAngle ArmA AspectCos Div w h mul Div 360 mul def 
  /EndAngle TotalLength ArmB sub AspectCos Div
    w h mul Div 360 mul def 
  1 0 0 0 ArrowA ArmA 0 lineto 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle Inc 
  EndAngle { CoilLoop } for
  EndAngle CoilLoop mtrx setmatrix TotalLength ArmB sub 0 lineto CP
% DG/SR modification begin - Jun.  2, 1998 - Patch 1 (from Michael Vulis)
% TotalLength 0 ArrowB lineto } def
  TotalLength 0 ArrowB lineto
  pop pop pop pop } def
% DG/SR modification end
%
/Sin { 
  25 dict begin
  /Func ED
  /PointsPerPeriod ED
  /ArmB ED 
  /ArmA ED
  /Amplitude ED 
  /roundValue ED
  /relativePeriod ED 
  /Periods ED 
  /y1 ED /x1 ED /y0 ED /x0 ED 
  y1 y0 sub x1 x0 sub 2 copy Pyth 
  dup /TotalLength ED
  ArmA sub ArmB sub /SinLength ED 
  Atan /RotAngle ED
  relativePeriod 
    {} 
    { SinLength Periods div 
      roundValue dup 0 eq { pop cvi } { 1 eq { round } if } ifelse
      /Periods ED } ifelse
  /dxStep SinLength 360 div def         % the default step for x pos
  /xStep 360 PointsPerPeriod div def    % the step for the for loop
  /mtrx CM def 
  x0 y0 translate 
  RotAngle rotate 
  1 0 0 0 ArrowA ArmA 0 lineto 
  1 xStep 360 {                         % PointsPerPeriod times
    dup dxStep mul ArmA add exch        % x pos and value for the func
    Periods mul Func Amplitude mul lineto
  } for
  TotalLength ArmB sub 0 lineto CP
  TotalLength 0 ArrowB lineto
  mtrx setmatrix 
  pop pop pop pop 
  end
} def
%
/AltCoil { 
  /Inc ED 
  dup sin /AspectSin ED 
  cos /AspectCos ED /h ED /w ED /EndAngle ED /BeginAngle ED 
  /mtrx CM def 
  w h mul 2 Div w 2 Div scale BeginAngle sin AspectSin mul 
  BeginAngle 180 div AspectCos mul add BeginAngle cos 
  /lineto load stopped { moveto } if 
  BeginAngle Inc EndAngle { CoilLoop } for 
  EndAngle CoilLoop mtrx setmatrix } def
/ZigZag { 15 dict begin 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate y0 y1 sub x0 x1 sub 2 copy Pyth 
  /TotalLength ED
  Atan rotate TotalLength ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add 
  /ArmB ED 
  /x ArmB h 2 div add def 
  mark 0 0 ArmB 0 
  n { x w /w w neg def /x x h add def } repeat
  TotalLength ArmA sub 0 TotalLength 0 
  end } def
%
 /ZigZagCirc { % x0 y0 x1 y1 bow h w ArmA ArmB on stack
  /bow ED 
  /ArmB ED /ArmA ED 
  2 div /w ED 
  w mul /h ED /y1 ED /x1 ED /y0 ED /x0 ED 
  x1 y1 translate %
  y0 y1 sub x0 x1 sub 2 copy Pyth 2 div 
  /HalfLength ED
  Atan /ang ED %angle of A relative to B
  %rotate % so end B is origin and BA is horizontal, A to right
  /theta bow abs HalfLength Atan 2 mul def %halfangular sector for arc
  /theta2 theta 2 mul def % full arc
  %/psi ang 90 sub theta sub def % angle of B from center if bow>0
  /rho HalfLength theta sin div def % radius of circle
  bow 0 gt { /direc 1 def /thetaB ang 90 sub theta sub def } % travel B to A in pos drn
  { /direc -1 def /thetaB ang 90 add theta add def } ifelse % travel B to A in neg drn
  %thetaB=angle from center to B
  rho thetaB 180 add PtoC translate % origin now at center
  /h h rho div RadtoDeg def
  /ArmA ArmA rho div RadtoDeg def /ArmB ArmB rho div RadtoDeg def
  theta2 ArmA sub ArmB sub dup h div cvi /n ED n h mul
  %HalfLength 2 mul ArmA sub ArmB sub dup h div cvi /n ED n h mul
  sub 2 div dup ArmA add 
  /ArmA ED ArmB add /ArmB ED 
  /h h direc mul def % h is now angle increment for half-period
  /rhoo rho w add def /rhoi rho w sub def % outer and inner radii
  /arg thetaB ArmB direc mul add def % argument for 2nd point
%  thetaB = direc = bow = HalfLength = theta = rho = arg = h = n =
  mark rho thetaB  PtoC  rho arg PtoC /arg arg h 2 div add def
  n { w 0 gt { rhoo }{ rhoi } ifelse arg PtoC /w w neg def /arg arg h add def } repeat
  rho thetaB theta2 ArmA sub direc mul add  PtoC rho thetaB theta2 direc mul add PtoC  
  } def 
%
end
% END pst-coil.pro

%%EndProcSet
%%BeginProcSet: lm-ec.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmec[
/grave
/acute
/circumflex
/tilde
/dieresis
/hungarumlaut
/ring
/caron
/breve
/macron
/dotaccent
/cedilla
/ogonek
/quotesinglbase
/guilsinglleft
/guilsinglright
/quotedblleft
/quotedblright
/quotedblbase
/guillemotleft
/guillemotright
/endash
/emdash
/cwm
/perthousandzero
/dotlessi
/dotlessj
/ff
/fi
/fl
/ffi
/ffl
/uni2423
/exclam
/quotedbl
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/less
/equal
/greater
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/backslash
/bracketright
/asciicircum
/underscore
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/braceleft
/bar
/braceright
/asciitilde
/hyphen.alt
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/exclamdown
/questiondown
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/AE
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/OE
/Oslash
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/ae
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/oe
/oslash
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/germandbls
] def

%%EndProcSet
%%BeginProcSet: lm-rm.enc 0 0
% This file belongs to the Latin Modern package. The work is released
% under the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmrm[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/ff
/fi
/fl
/ffi
/ffl
/dotlessi
/dotlessj
/grave
/acute
/caron
/breve
/macron
/ring
/cedilla
/germandbls
/ae
/oe
/oslash
/AE
/OE
/Oslash
/suppress
/exclam
/quotedblright
/numbersign
/dollar
/percent
/ampersand
/quoteright
/parenleft
/parenright
/asterisk
/plus
/comma
/hyphen
/period
/slash
/zero
/one
/two
/three
/four
/five
/six
/seven
/eight
/nine
/colon
/semicolon
/exclamdown
/equal
/questiondown
/question
/at
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/bracketleft
/quotedblleft
/bracketright
/circumflex
/dotaccent
/quoteleft
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/endash
/emdash
/hungarumlaut
/tilde
/dieresis
/Abreve
/Aogonek
/Cacute
/Ccaron
/Dcaron
/Ecaron
/Eogonek
/Gbreve
/Lacute
/Lcaron
/Lslash
/Nacute
/Ncaron
/Eng
/Ohungarumlaut
/Racute
/Rcaron
/Sacute
/Scaron
/Scedilla
/Tcaron
/Tcedilla
/Uhungarumlaut
/Uring
/Ydieresis
/Zacute
/Zcaron
/Zdotaccent
/IJ
/Idotaccent
/dcroat
/section
/abreve
/aogonek
/cacute
/ccaron
/dcaron
/ecaron
/eogonek
/gbreve
/lacute
/lcaron
/lslash
/nacute
/ncaron
/eng
/ohungarumlaut
/racute
/rcaron
/sacute
/scaron
/scedilla
/tcaron
/tcedilla
/uhungarumlaut
/uring
/ydieresis
/zacute
/zcaron
/zdotaccent
/ij
/periodcentered
/quotedbl
/sterling
/Agrave
/Aacute
/Acircumflex
/Atilde
/Adieresis
/Aring
/guillemotleft
/Ccedilla
/Egrave
/Eacute
/Ecircumflex
/Edieresis
/Igrave
/Iacute
/Icircumflex
/Idieresis
/Eth
/Ntilde
/Ograve
/Oacute
/Ocircumflex
/Otilde
/Odieresis
/guillemotright
/perthousand
/Ugrave
/Uacute
/Ucircumflex
/Udieresis
/Yacute
/Thorn
/Germandbls
/agrave
/aacute
/acircumflex
/atilde
/adieresis
/aring
/underscore
/ccedilla
/egrave
/eacute
/ecircumflex
/edieresis
/igrave
/iacute
/icircumflex
/idieresis
/eth
/ntilde
/ograve
/oacute
/ocircumflex
/otilde
/odieresis
/anglearc
/diameter
/ugrave
/uacute
/ucircumflex
/udieresis
/yacute
/thorn
/quotedblbase
] def

%%EndProcSet
%%BeginProcSet: lm-mathsy.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathsy[
/minus
/periodcentered
/multiply
/asteriskmath
/divide
/diamondmath
/plusminus
/minusplus
/circleplus
/circleminus
/circlemultiply
/circledivide
/circledot
/circlecopyrt
/openbullet
/bullet
/equivasymptotic
/equivalence
/reflexsubset
/reflexsuperset
/lessequal
/greaterequal
/precedesequal
/followsequal
/similar
/approxequal
/propersubset
/propersuperset
/lessmuch
/greatermuch
/precedes
/follows
/arrowleft
/arrowright
/arrowup
/arrowdown
/arrowboth
/arrownortheast
/arrowsoutheast
/similarequal
/arrowdblleft
/arrowdblright
/arrowdblup
/arrowdbldown
/arrowdblboth
/arrownorthwest
/arrowsouthwest
/proportional
/prime
/infinity
/element
/owner
/triangle
/triangleinv
/negationslash
/mapsto
/universal
/existential
/logicalnot
/emptyset
/Rfractur
/Ifractur
/latticetop
/perpendicular
/aleph
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/union
/intersection
/unionmulti
/logicaland
/logicalor
/turnstileleft
/turnstileright
/floorleft
/floorright
/ceilingleft
/ceilingright
/braceleft
/braceright
/angbracketleft
/angbracketright
/bar
/bardbl
/arrowbothv
/arrowdblbothv
/backslash
/wreathproduct
/radical
/coproduct
/nabla
/integral
/unionsq
/intersectionsq
/subsetsqequal
/supersetsqequal
/section
/dagger
/daggerdbl
/paragraph
/club
/diamond
/heart
/spade
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/lessorequalslant
/greaterorequalslant
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathit.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathit[
/Gamma
/Delta
/Theta
/Lambda
/Xi
/Pi
/Sigma
/Upsilon
/Phi
/Psi
/Omega
/alpha
/beta
/gamma
/delta
/epsilon1
/zeta
/eta
/theta
/iota
/kappa
/lambda
/mu
/nu
/xi
/pi
/rho
/sigma
/tau
/upsilon
/phi
/chi
/psi
/omega
/epsilon
/theta1
/pi1
/rho1
/sigma1
/phi1
/arrowlefttophalf
/arrowleftbothalf
/arrowrighttophalf
/arrowrightbothalf
/arrowhookleft
/arrowhookright
/triangleright
/triangleleft
/zero.taboldstyle
/one.taboldstyle
/two.taboldstyle
/three.taboldstyle
/four.taboldstyle
/five.taboldstyle
/six.taboldstyle
/seven.taboldstyle
/eight.taboldstyle
/nine.taboldstyle
/period
/comma
/less
/slash
/greater
/star
/partialdiff
/A
/B
/C
/D
/E
/F
/G
/H
/I
/J
/K
/L
/M
/N
/O
/P
/Q
/R
/S
/T
/U
/V
/W
/X
/Y
/Z
/flat
/natural
/sharp
/slurbelow
/slurabove
/lscript
/a
/b
/c
/d
/e
/f
/g
/h
/i
/j
/k
/l
/m
/n
/o
/p
/q
/r
/s
/t
/u
/v
/w
/x
/y
/z
/dotlessi
/dotlessj
/weierstrass
/vector
/tie
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: lm-mathex.enc 0 0
% This file belongs to the Latin Modern package. The work is released under
% the GUST Font License. See the MANIFEST-Latin-Modern.txt and
% README-Latin-Modern.txt files for the details. For the most recent version of
% this license see http://www.gust.org.pl/fonts/licenses/GUST-FONT-LICENSE.txt
% or http://tug.org/fonts/licenses/GUST-FONT-LICENSE.txt

/enclmmathex[
/parenleftbig
/parenrightbig
/bracketleftbig
/bracketrightbig
/floorleftbig
/floorrightbig
/ceilingleftbig
/ceilingrightbig
/braceleftbig
/bracerightbig
/angbracketleftbig
/angbracketrightbig
/vextendsingle
/vextenddouble
/slashbig
/backslashbig
/parenleftBig
/parenrightBig
/parenleftbigg
/parenrightbigg
/bracketleftbigg
/bracketrightbigg
/floorleftbigg
/floorrightbigg
/ceilingleftbigg
/ceilingrightbigg
/braceleftbigg
/bracerightbigg
/angbracketleftbigg
/angbracketrightbigg
/slashbigg
/backslashbigg
/parenleftBigg
/parenrightBigg
/bracketleftBigg
/bracketrightBigg
/floorleftBigg
/floorrightBigg
/ceilingleftBigg
/ceilingrightBigg
/braceleftBigg
/bracerightBigg
/angbracketleftBigg
/angbracketrightBigg
/slashBigg
/backslashBigg
/slashBig
/backslashBig
/parenlefttp
/parenrighttp
/bracketlefttp
/bracketrighttp
/bracketleftbt
/bracketrightbt
/bracketleftex
/bracketrightex
/bracelefttp
/bracerighttp
/braceleftbt
/bracerightbt
/braceleftmid
/bracerightmid
/braceex
/arrowvertex
/parenleftbt
/parenrightbt
/parenleftex
/parenrightex
/angbracketleftBig
/angbracketrightBig
/unionsqtext
/unionsqdisplay
/contintegraltext
/contintegraldisplay
/circledottext
/circledotdisplay
/circleplustext
/circleplusdisplay
/circlemultiplytext
/circlemultiplydisplay
/summationtext
/producttext
/integraltext
/uniontext
/intersectiontext
/unionmultitext
/logicalandtext
/logicalortext
/summationdisplay
/productdisplay
/integraldisplay
/uniondisplay
/intersectiondisplay
/unionmultidisplay
/logicalanddisplay
/logicalordisplay
/coproducttext
/coproductdisplay
/hatwide
/hatwider
/hatwidest
/tildewide
/tildewider
/tildewidest
/bracketleftBig
/bracketrightBig
/floorleftBig
/floorrightBig
/ceilingleftBig
/ceilingrightBig
/braceleftBig
/bracerightBig
/radicalbig
/radicalBig
/radicalbigg
/radicalBigg
/radicalbt
/radicalvertex
/radicaltp
/arrowvertexdbl
/arrowtp
/arrowbt
/bracehtipdownleft
/bracehtipdownright
/bracehtipupleft
/bracehtipupright
/arrowdbltp
/arrowdblbt
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
/.notdef
] def

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 /pgfH{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 moveto dup 5 index lineto } bind def} bind
def

 /pgfV{/pgfheight exch def 0.75 setlinewidth [] 0 setdash /pgfshade
{pgfA} def /pgfdir { dup 0 exch moveto dup 5 index exch lineto } bind
def} bind def

 /pgfA{ /pgfdiff 8 index round cvi 8 index round cvi sub 2 mul 1 add
def 2 index 6 index sub pgfdiff div 2 index 6 index sub pgfdiff div
2 index 6 index sub pgfdiff div pgfheight 9 index 9 index 9 index 14
index pgfdiff { 3 index 3 index 3 index setrgbcolor pgfdir stroke 4
-1 roll 7 index add 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1
roll .5 sub } repeat mark 15 1 roll cleartomark exch pop }bind def

 /pgfR1{ newpath dup dup dup 0 360 arc clip newpath dup /pgfendx exch
def /pgfendy exch def 0.875 setlinewidth [] 0 setdash /pgfshade {pgfR}
def /pgfstartx exch def /pgfstarty exch def /pgfdiffx pgfendx pgfstartx
sub def /pgfdiffy pgfendy pgfstarty sub def dup /pgfdomb exch def }bind
def

 /pgfR2{ newpath 0.5 add pgfcircx pgfcircy 3 2 roll 0 360 arc setrgbcolor
fill pop}bind def

 /pgfR{ /pgfdiff 8 index round cvi 8 index round cvi sub 4 mul 1 add
def /pgfcircx pgfstartx 9 index pgfdiffx pgfdomb div mul add def /pgfcircy
pgfstarty 9 index pgfdiffy pgfdomb div mul add def /pgfcircxe pgfstartx
8 index pgfdiffx pgfdomb div mul add def /pgfcircye pgfstarty 8 index
pgfdiffy pgfdomb div mul add def /pgfxstep pgfcircxe pgfcircx sub pgfdiff
div def /pgfystep pgfcircye pgfcircy sub pgfdiff div def 2 index 6
index sub pgfdiff div 2 index 6 index sub pgfdiff div 2 index 6 index
sub pgfdiff div 8 index 8 index 8 index 13 index pgfdiff { 3 index
3 index 3 index setrgbcolor pgfcircx pgfcircy 2 index 0 360 arc closepath
stroke 4 -1 roll 6 index add 4 -1 roll 5 index add 4 -1 roll 4 index
add 4 -1 roll .25 sub /pgfcircx pgfcircx pgfxstep add def /pgfcircy
pgfcircy pgfystep add def } repeat mark 14 1 roll cleartomark exch
pop }bind def

  /pgfsc{}bind def/pgffc{}bind def/pgfstr{stroke}bind def/pgffill{fill}bind
def/pgfeofill{eofill}bind def/pgfe{a dup 0 rlineto exch 0 exch rlineto
neg 0 rlineto closepath}bind def/pgfw{setlinewidth}bind def/pgfs{save
pgfpd 72 Resolution div 72 VResolution div neg scale magscale{1 DVImag
div dup scale}if pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind
def/pgfr{pgfsd restore}bind def userdict begin/pgfo{pgfsd /pgfx currentpoint
/pgfy exch def def @beginspecial}bind def /pgfc{newpath @endspecial
pgfpd}bind def /pgfsd{globaldict /pgfdelta /delta where {pop delta}
{0} ifelse put}bind def/pgfpd{/delta globaldict /pgfdelta get def}bind
def /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse
/.pgfsetfillopacityalpha{/pgffoa exch def /pgffill{gsave pgffoa .setopacityalpha
fill 1 .setopacityalpha newpath fill grestore newpath}bind def /pgfeofill{gsave
pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore
newpath}bind def}bind def /.pgfsetstrokeopacityalpha{/pgfsoa exch def
/pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind
def}bind def /pgffoa 1 def /pgfsoa 1 def end

 /pgf1{gsave exec 1.0 pgfw 2.00002 0.0 moveto -6.00006 4.00005 lineto
-3.00003 0.0 lineto -6.00006 -4.00005 lineto pgffill  grestore} bind
def

 /pgf2{gsave exec 1.0 pgfw 0.8 pgfw [ ] 0.0 setdash 1 setlinecap 1
setlinejoin -3.00003 4.00005 moveto -2.75002 2.50002 0.0 0.24998 0.75
0.0 curveto 0.0 -0.24998 -2.75002 -2.50002 -3.00003 -4.00005 curveto
pgfstr  grestore} bind def

 /pgf3{gsave exec 1.0 pgfw [ ] 0.0 setdash 0.0 -5.00005 moveto 0.0
5.00005 lineto pgfstr  grestore} bind def

 /pgf4{gsave exec 1.0 pgfw [ ] 0.0 setdash -3.00003 -5.00005 moveto
0.0 -5.00005 lineto 0.0 5.00005 lineto -3.00003 5.00005 lineto pgfstr
 grestore} bind def

 /pgf5{gsave exec 1.0 pgfw [ ] 0.0 setdash -2.00002 -5.00005 moveto
1.0 -3.00003 1.0 3.00003 -2.00002 5.00005 curveto pgfstr  grestore}
bind def

 /pgf6{gsave exec 1.0 pgfw [ ] 0.0 setdash -4.50003 -5.00005 moveto
0.49998 0.0 lineto -4.50003 5.00005 lineto pgfstr  grestore} bind def

 /pgf7{gsave exec 1.0 pgfw -2.50002 0.0 translate [ ] 0.0 setdash 3.00003
0.0 moveto 3.00003 1.65689 1.65689 3.00003 0.0 3.00003 curveto -1.65689
3.00003 -3.00003 1.65689 -3.00003 0.0 curveto -3.00003 -1.65689 -1.65689
-3.00003 0.0 -3.00003 curveto 1.65689 -3.00003 3.00003 -1.65689 3.00003
0.0 curveto closepath gsave pgffc pgffill grestore gsave pgfsc pgfstr
grestore newpath  grestore} bind def

 /pgf8{gsave exec 1.0 pgfw [ ] 0.0 setdash 1.0 0.0 moveto -5.00005
3.00003 lineto -11.00012 0.0 lineto -5.00005 -3.00003 lineto closepath
gsave pgffc pgffill grestore gsave pgfsc pgfstr grestore newpath  grestore}
bind def
 
@fedspecial end
%%BeginFont: LMMathItalic12-Regular
%!PS-AdobeFont-1.0: LMMathItalic12-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 833 233 0
%%EndComments
FontDirectory/LMMathItalic12-Regular known{/LMMathItalic12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic12-Regular)readonly def
/FamilyName(LMMathItalic12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMMathItalic12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-31 -250 1026 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD11234369CB38BBC21C40020C4E57C
950DC4A5CD271B5530E91DBA55EA1A3BF584D9405556EF9C802B109FF1EB2B0F
C350D7F091E7B613B08574EDA3BF27099BC2EF0E503A4C4724614A73AA054756
A503BEB31E3FCD96F733D0C5815847DFBB66DE4968A9B389FC00C2146C4FF68E
076BA8B3847A3D8237D36A6BBDF0096290F1BCD02CC66B12E0070215D5D8306F
406DF7590940DE35CA0854D3609249AEA4EE9D3D377A7996C1CC2E940132A90C
F633C774985DCAE8E9353607B9059DD211265A0A346B1A062D80C64B5802A750
D9FEFA3C9920A3DE942C65BD08060AF33C91CFF62930F65F9A42F70B83B0E077
E169BF7F5D84F15D59F8A74BC2EE4A7F3ADE36F38C3A661F4CC9826BF73D7F02
D3CCC267927CAE22B5ED695D212FC3B669F9BE369B7A8D325C3FB9D552F175EC
29972562517E91E7B8D570612CC50B1A5CB6B94D030B0C60465EA21631F7A30B
44A47143D0C2F942B5D76384B8C3F2F197BB3646CBED3DEECB6513D3AD460F49
4BB874969A3663617EB537E75C1C1BF92749F9D147080EFF78ED285C315BAFA7
D78B7B4B8B7CFD1639EA303ACE986EDEEBA9350F92529C47EA7689779BD50CDB
D1B3A68B383B54B51F4FD77D6458F15AFDAB471DEA9909CAB29840091391F2EB
148588D02607411F2E802B9CDDFFEF1C1FFCC9EED0405371651ACF30808E8C57
682B734916EE806703B2ABA2F6910E0C75BCE10A94FDD1ED3E4FDA7857341427
CA0A4F7D30151BEB8E3D351E1E100A8A75959D11122C83A5C0C4C87214413B25
A6BFE44A42D446E9C4AC88F86B07C1097F9C5C5673B88582CEA8CD622F9B0C79
E463DF7F2F4C6640FF3852BEB520F7B23D8A22E7E601EF9CC6D0A2E6E82E6840
65B82C6A3A6692811E2B4F57723AA3A6E27076A2F63D6CE1FBA7ACD844E732FA
02797B386F2EDCE9FF9F84EEAD17B366D678E61C6176FEC09C94B749918950DE
D5B9C221B0CAB9E827E3E8BBEF4018E6B622443A1BE37A5FA47B1E218EFCF1AF
6A6DFF38E77DCACD3AC2C426EE8342A3FD62997CF8C597659008C4FC1EA3224F
DB67A8CF6D5078F12FECD98B5E80CFE0284337B73C27F8C9D7F9F6934B3D8E7C
4719D0C3B184E47435DB56AE7BF90EA99D68B8B348374086407CB85F0751DB75
9D1E5436CE39B96D212B9E95D416D8060F03556542EAA4AEF3942846EEE9D91F
15498E6407902129DDAA2D06B1AF8FA90C113272B6C38910A5F568A3A9DE1561
0F829AF9330D8AC8E8F3D01FF6AD453721278E230BEC955072E2078B3890B4CB
EFE63471A8CEE6692C111F049A51CE9FE17DE9159D0DB6D8CD375DF221D42B25
F5DA097A463DDC8230C73317DE1C5C911DC938150A7E506351011BECC0BED1F5
F2C8F7C58F22518A57E36E9B09E62C913F1F2FA7502D65DD1DA3E0865075ED51
EE7F7845876018A16891622A7A79AAC0A1C3D9F21D95487872585C17344C4EF9
5FE940316B0365509C6E6460455D60A8AD3C3C9B6CA3417E11D3FEBAF9E4950A
8CD6ACB208561B052F51C5020C2D10288358F3032DF73D83C4218916B80B1C3D
9E5C3F850B6EE405BD3B63BCB1D8A29EA131D482990C3FFEA719CF3C90B6E598
F80F8E1395DD96231DAE66A0233E4A18ADA60C9F1259CBD90FFCF585D4AC5BB9
2988F5DC9D1EF309249CEE00F007A84DBE6BE96708A6B53040413FFC4E2D527F
BF80D86B2C60FA6EE5255E246AA9BB5D99ED6999CE9786A4665B13F4CBABA4E8
497F719A8C52635F1A0D6F12E39557CEEC67AC6170C841821BEFA38DFED15504
3AC96D108520D9CE910C6D346A7E97D5BAE55D55F853F460A9EDDE19F39BF17D
18CBA6C8092037B180EE7FF58266D7E8383D465A11581124F48AF35B4A1B7CA0
5420725A2E3BB4268D6E761CF9B88320F4A278CFD2AC7F7528FB41C06B225716
8C640792950476BF285AF8E23F248DCAE2ED2965DC68B5575C719C8D8A5F99CE
1FCADF317AAB1C982F262470579734271D1E7E2E27FADCF6CEA7BEFBC82CF050
05F0A9BA7A9BB203C87A54F0B554E0DCFAC87CCA3376C501924698EFA99C5276
68C1B8241AE5D5C7FA01CD86DB9A1036256986CC729C829BA0F99C9D409C108D
40D4937D786317FA2C5C6AAC675D3BFBE3B8B033CA4A5FACBDD0522F443BAF3F
D108617E89A62A9D2FB7CEF60ED90FE172D4AAC6C42C085EC913B46B5862D653
09B17846DF689A749841A3A2008C783B5F2EE371202E87B78CC4DAF08CE1066C
FB74235D9B966DF19872708F1DB6AB006E618261A55AB66D790A65432C52BA3E
2BD761C0A535ECBEF75CED8626AFA20246D18E6E1A0BB89AC5220EDA163ABEDF
E85F6C14FF9B84B81350441116002DCEE23A381169A07E639E89040AD90F37D7
D50EFCCA9AAC1A345D86535FB473FD3CF29995628D45EA934DF2891D0C954B07
9BD2977384B96D84670B93D23062461F32B8A683D98132CFF28A7C72A720BD94
F28B2599514A60BC9B3D5AAB1A4C33A0AB32862A7BC3D32BD848205648CBE820
C2942F2CB971ECDD9C87C2352A5DB87C88DE4B0ABF8AF7BBF97F67CE80897575
D897AB4588BFB1E068A06B1EE2DEF2F16D656471B004A3C238DCFCD3AD966455
59ACA5056F7FD695D412CA25D3C14AE308A9DE8E06582C518696F3B9243A81CD
4F4DD53B2C66B367FC2B8DFA478FCD2915EFC2B9699E6BF9FF97477F8C211FBF
23DC789A1B860E1085D81BE2E9267679E47B4B685A6B2AD3588C14E2018C9C8A
E72E531D76B31387AE99F7709311F011DCBE24B10D14CBF5119218D117CFA159
8DEFC33624D698D3FA83EDC6E2540414CD9AE64A92B3AB194DA6FA06220921EE
7D2A520E11383DCCED442BF47047FF186BAF7DDA76E22BB645D3CED7F21C21C2
3F6511BF0A7BFAD17A2C4275E39BA61764AC5EC0B4DC29C9858FF5DBAF6FE031
D8137EC0153984AD74FD031820C5063E568FF79F7D7403457A2A22B6B2CC6F12
31B049B169BA2D7CEDB224A3CB3F59C1311A1A7B1350FE59D7CB6F5FACA992A9
410A63079235C60E9E0A388ECD3C508D062408CC313446397CB79D8F39ED9190
DF4B0C5B4D1DB7FA89B09081A0EE7A01E51A4BD28EAB495B49AE18744655E68A
F5B148174A025C7A55227102583077DC9BE104305DC613ABB82F6AC1D6645A9C
7DB42FDD108E1DB9100C8F2F31667917FF34687B538A5446B0E8DC830511BACB
B4B0346E0443DD0E7F1DDD0A4D040B0FEB1707B8B799603DB46BC3BEAD1E426A
E54045FD3FAF59885BC85C46D7D81FEDC12A827105EDEFF4AA43B0E4CAE8CFC6
59D58C17FA8BACF54B627452B08F549242D15FD21E06619E1A0F31D3AE7E3608
D7EDD2E1274F849AF1D22A9BA2786ED7CBD45575E713AF4EC7872647F2987B0E
3610FF9F8A6C5B0348C151724B8D730A026B0C2C0A139984AC01894EFF171337
AC5E8807FD656527F8BAB28EC4D2B9F3736835F58A02FD953394F3E6EF2528A7
4BD93CF0364E85C455106D9668911E495924689249755043F4010A470345BEC0
E355537859B57712D3A9462AD9FFD3A9215945DEB825AEE1B92EEFDB01882202
3675D0C7DD941BEAB4FE73C5CFABC0EED1DE807E07A4B70BBB91D844B4421F75
269A26B9C7BDEB461B620CD2F97FDB0E9BE54178C6A6EC28AEB972D7D8DB6F8C
A304D486BD3BB2F78CAD82BDFDCBEF77EDA3554845E1C3FA15C5A8649C50AB2C
373CC4A5637339B1417C0A574044E4F978B87F3D245D35E5890478E4FC4AD568
5D7308D8C91FD03AF71BAE6A930CD0C274E730F37A00008D0D25D0CB5584D053
445788FFD08F83D7BC497E3C7A6E2B04C20CC14A3DD1F256377312217F2F94FE
C793B70777B6C4BE1C39B7DAE27EBEC9210522B83D3D7EAC0637550CABE36518
E85BD743898A555ACA5A03353A5DBBDF4F22E32EE4FE78B48639F0528364632A
FE4294C0FB3A5E942BC26446A53C43511C1EF764F5E4AFE911A32FDE11BD36C8
2F37BA30D1D9A6090B85135DB75F86E0A7B36DC2F7D2A40026B7C4250555575C
73F725C794207DF8A055F5F1D633BC8D515ECC0D2BDAAD6FD3F3403F0D80C4E6
2B6957A697006B6ADE148BBF1D30CCE75482C82B9094BC8CB63CA725046EDE89
ECA5CD1B5223A8605D7D41C55CFDA43F1FF8E9F34B17317E13D1976030D14B53
A87FB4690D3245222126B2F695F1A72853191C3289B83AF0424401D9BF52339A
BE9BE7736913C28FB1083039547DD0C73039234B3AB0EF2B78A0C17F50144DDF
35D2E57FB94F018330525D1A3A7C511FFF1C45C9D507CE0EFB30DA3E805D37EF
7E698E0DC00CC722B68ACE331218FDFA181799903183BCAF065CC0FDD3FE6144
1ECBF987736D61289AAE8C7A2073D090B11DD91CF8B0A8AFD455D1FB58396154
D018CC72CF6A1B2552092D82BBF977463E3C9157E5F2615D33FE79CFC5EA5F15
B5CDBDEE862CC8173199D12726F5B2A0B328C2CC3DA6CFCD068ABA3B0FEE753B
5CDC6BE448EDBFA4DD8957BB6FD34452EB10FE34E71FFCC019165ECEE4321092
D5CCF4B901B8AE0E4012ECE0F22BA5E405A60A19D04755B1237C81099AFC147F
15831D9491D2E2A5C83FB6610BA63D78ECC3CF43020B3D12361167936F9190B8
AA905270EBBEF2923AFF47F2CFE3E008EC838A9C6C88DE8CCDB0853215A1630D
390DC0E129475CA903A280191B976D1968E4FB864A44A59BE36274D40E60B95F
A484AB6825105D05257AF900625A124AF09486BFBF5DE56186E6721F3EFB76BD
776FFBE44ABD1157D411D6038E7D5E6AA042A9A35FF26121F2F9791DDFD32DAB
86E44BDE1319C1421359F454B0B5E834AF2285045AD0CC723D069A6141BCCBF6
2A3794AEF5FFE27A9616904BAE0B0E5082E81958EAB20D5606D5D330506E1DEA
A967F9DBD3D31A46DCAD02C0AC1AA96B18630E708B461412586B250BBD49ECD7
AD868F547B5D91E93414B34BA8F7462E89C90E02BEE43EF553C1458F5E20B787
751F97BD3A75A2F670122EF3AC59706EEC8A894DFC4663818ADAF9C6A9DFA394
F1B1F8A406D814A6E0435AC04234AA28784A32A32A2F36003D0AD37FA77ED5CF
E108A16E0BB42A7D35199462F3A138BA1DB08251F442BC17595101E636CE88E0
1F2DFA6D07778D6FDD11108E4CB39E7F5C5F77EDC017ED49B60CDE04FC1497AE
6AB2AF5EC435AEFE79DE0509624B6E7774DB1AEFE88278D6B1082E18D7D88D08
B454D55386A3D0407C4E643AADBFCF8D7645D6FA41076794F7AE575BF8063BE7
421CE6A194B230A32F320E17A14E74D51A1FB42B518E17763EE6407AC2D41F24
DAD101933583E4C0BD51EF51BB2078AB6733DC394013CFC4C9C2E1E5722FCF65
1F90D2D0E066A8B223BF788D3BF03EE61809E93287690007B115A1B70886E365
1A13897018D104F8EC889B765CA126D6BA3EC0CADA1DA424632C62EB3D536F65
90E861DC88163F03BB05BC2BD19F7109731BB42F0AAC1F46919319ABCD996BD2
97650FD3FE1A5269054DEC0FC6962AB8F7B6ED56DD8B988EC190542F8E7B4252
4B15EF85FAB13D0F21E49BE6C06DFE47E9E8007376E65148FC19279FAA8C451F
145735B7324E3C55D5D796703D7201AC5B6B4E598E9EF17E31E01FBB665EA0BE
3AB72C551371E2E8CE73478D482644768F9192CAB01990E82D3E5952A7AD2B3B
808CA484A453658263C11C748C00B06176F110C45DE35ECC98A62567132B373B
DB0ED6C1E33AB28E5B6F78214CEA933DA2A026A91BA4FFDFC6816943888E6FE9
6A03B14840F6D33DAC3CDF2A23E987C97E1E43073E26A3A81493F176B819E189
53FDB0195E621BC78B53042686DC926E0A00D23860E1A03499EA0DA62455F590
B20A6B5ED4733E4EE62B8B3B8B7846E0B188360DBA59F6BFBB97C65909D8ADC5
811331A88B364519004E441A87A38A40BB3CCE996C583BFBB3BB938E379131DA
E00BD1007ADE19E11E4C694CEE3B9208CFB93CD71C3D4AF737DF57EBBCCF4525
D19018F864A9CD5157223F75A5D8104F9AF9A2DA0307144D66F47E984A7E6709
782650982AA47F350FB979B0FDB3DDD9412C378FBC5B96912E91FA3F0F055BB4
3567A2416E68128973C5738801C1263AA545E38AFEBA8F5B035C974094208AD4
ADAD243CE17013C843E69E83A7F483CF360C4E31455D60E4A1A54F733990B337
68D5A73E6356D14898798A97949E3C1D494690DD7F7B280491BE21A568585642
2B16B9EBD78961DA199264B4D165FD4D2044FA17E42586A058D556EE2C8D3ABC
96A0D4E0F273B5BFD897B560EB539570C6DD4B0309E2910837E136B477E50E20
1CFEF8633CBF7ADDBE89C9213285CAFFE2633A7443A034A293D9654212E8814E
D3C552302A147EB280AFCFFC2C8E850350E764479A66ABFA48EB5227F1F12A18
76260E8A1EDA9D8588D6E587359A351EBFB6204150A34EB691A4990A5B1F7889
46C3129725FD5C5BAE3B4FDA5FE1CD90A1250255783FD8AA4F2A0D597306EDC2
FD644F29D36BF70F6AEE8A3380E89B80E7ED650CDF92DAD939B0E41038601BFB
0120C0179AAC107ABF40F3356FC623BA75696FB2A3D284F62B772E7C3D8A9198
9DB7FC971C09545800BF5D410CA8009DB03FD076A0728300C7B756F78FA38200
35607B64038007CC5989C3E2FAD457AFC376C3A6660CAEF3C5F152D4EB2193C5
58D2554C8CE25E229EF847601D5BC6D7DCCC5F4E54F8D26A80CEE2664FAA8737
DAD130CC3E0DC41316127EA28B519CAA348A390C3F22BC9DA3B23D7C8FCFED5F
4C67E8A32B0379E1C5E13188F746AC51CDBE9601377166FF941476310102D825
47B065E8986145A130E60B2A35ECA21F6D4AEFB391511E08E8F12C96C2184AD9
CA04C17C2E8073E85DA13E1B14554172016CF561BB55FF3A23A40293D0126F87
431F9EA50537E392DDB7B8B89B78A8FC5E79C11EE99F606D8E235DEA5E6B8265
62179844FC5C6225FA8A267AA157D4A0D6B9F54D68498B5AA16CDCDBA8DA91FE
B8BB85D5726A5890D65C275D1647BC09D07B795D84C309ED92D25C8E82EFE365
7A0C98FDC2A41CD4911BB98E3EE2150634A3AA92263B3AFBE9DCA62F2E40E7F5
92F6D067CA7DE1A77CEF942D78274130F420AD0F2F103EAEB0FC6E1FA68B0DBD
B5E487A31D13F8785181A8B77E78E1B446AF0F9B64BA9099C212C4DE74B8AA62
7997D0C2616DC30CAA329DD0C23081402A9CE498EF5082A1B91DBD0DA46CA8C8
C55E61B309DB143B70C9961535FBFD70C6DCE2D770BB8B1449A59272AA55DF33
5AAC638C621A05FED1CA990EA7E1B50F6331504E5D5EEF222CD8BB0BA139AD84
D2451FD5855CF0406B9437DC0382AA0F021F298086ED378D0098697E3BD69C66
DF9A1C10EE40C08CC7461FC326291ED274143EE6DAAD038E4573C77EFE191E3F
7635A8D3EED8233118E680CCA7B0536B11A2BF2889F25F7D35A7D00AB9A9F6FF
CC2E4C9A0662335A2DB9C80E05FF8FD1CF358BD8CEBA5B6BE34C66B3E5986D06
DA1BC2FD2140DC0D9AEB2C90E41B7C2A627123BFA45B1B92EDE03553F954B905
840714B3EA1311E03FF485DA6724348A9869D74F6701595FC07B48A55F24B77C
1FF3108AED4A1594A944A8B135565603C6DBE2FC30A68A0AB1420E8C50A28D09
0D01BD19411D604B220BC9049B687E59C25903E0CB3A088396F5B85BC18E42B7
AC3414CC6C099E3228CDD7F3A7E3A2F00BECAFD49DE9F66F2C18D20B01C07243
7D6BE91228512D74BD470A348B11A31AC106A457BD099F2B35842AF217F2017D
A8BF548B6F624FFFC3ED4EA2DE9AE787520321EA4F1A035430179713F217643A
AFC203EC4A745322F937FD8AD5267229125D4B5F432ABD661A844CB794E68AD6
0F31F224471C089471D3257A0DBC0ED53586EA591381F31AB29499C104C12EBE
0B2AEFAC149F7C1FA70935562EB7E2879BD8A9BB00C8E1FD5C64B046AA883581
C046850AF2951015204A856CA884F7FB5EAF7E721A30297C448708E667DF3285
89C1B8E8C48DDA10FAF59A47B71C2C943E31D690F49CADFCCC20A3326B4ACE15
E47FB8C6C959455D4461C5DF4AC7F7BCF4D06E83E54F30B6D46FA64445C3D68F
F884D1279314138728EA6E2F885049E48D9197511292C53269AB3DC4E86151F2
B29A909DF0FD75B1F35B2090872CED45B9F45139EECA730D8C0186E7193D971A
B46CA399096F5AA126B566F9F03F87DECAA56648A36838643B9D2CDFE1BB1FD2
EB50D1B6CA5A8579338A2B44E08C2CBBF8DC6E3D388B0EBA197F1126E83C4429
70F8C7233DB1214984251D8D70C94F19E3179C158DA9F213202B6C47346AF36F
449B82EE6221B3590BED2E3B2DEADE7168C2CC09A03923C004354869D4C8B6EC
C70355270BCCA29FA502B67F47A9C34978953C55CC7F1A80DE2DABC2AB929458
9CE1BF505E978A968AA8FA41A0D86D65BC3ED75C3CE6C471A97AAC3A83E35F3E
4BE22CCE0D75F5E3410E1041793B7339D812C5D7588701F55E69826E7851C494
A16DB4C4FBC6DE1709696F97F00ADB86FB9463CE73ADA5159015418E396F4118
A5FB92EA131A0ADE24C07007E38F0B085F5932784D7C65C514526779563F3846
A76979F7BFB365D7401CF45AAEBF4DCA8A2DE0CD63FF0928006877A34798E742
657A4915225BE040B8870E6BDED9206DE575C87F0CACFCEA7480336D532C8F50
114EF1FA72E6F1CAAD9375F5541C6DF1ED72D262AD8F3913A3C63184F03A94B3
EF20EF5EDEEAB2FC66396D72C877F16205766BEE1648E87A13809F877BAD00F2
279DDF6388B85C66963D24475BCD4C1C7C67340212D6DFF29191EDB169DEFF3B
3C5D1925CD14E453F7D8B352EC4CA3245D774E479148331292F85F0E2E997ECC
1DCFA6067B190480BD3A46B6CB1528F9DA6A91B8F2B8344BDA9B64BBAF1F276E
C80BEC8421CF1C57301DE454CBBED228EBA001B4D605231A7DB9E3D0EDA4BC46
90375D4A1C6965587F77B72F66EA8E79FE7659C215ED7156714FA131D7B6F873
5516C701D7D87156B3E9883B486904CD64F50592E9AC29C798F4AA10BE36BE2A
C6DD18F85AB9E71B27A9C56B1AB021577EB173B37984DFC95EEBD4B40B790F56
CF6CA7D78635D33DCBE61DC95D096D2683DA5A9F6BF5F5FEAD1F701ACC75AC0D
1E37B4DEB9037F84B6A94A60F90B6F1526DC291A4A7DC3B240B8244EC7F17E44
A98B3F805ADC4E0A4AF4FF696ADAB160CC328EBE807124241309E5B2D3BBC218
F7553495B830D2362FCEFB9B7DA69A428F23B0F9B99643C23C3DA0FFD969A1DA
43CF7503D929F3CB77108E4516E1591495F012BCB6675434BE7FACA7946F9EA6
9E5853668BC05641C70FF85A18DFB8278C0EBF448FB208972D31C8F823288515
BFD2B035CC5092BA38661C845D7C3C8F3F68A09E51FE9DEC6211BB5AE6A4A8E1
87986AE1ACFC3923EF1933B61FF40869CF8CFDAC2C098D2DA3E2E7C6723D415B
9CF83304C4F75A05D978703A66BCBB2C11C44C166DDCC703470EC0A30B814003
0FC837C53C4AC1167FE2E81DFD2F78BEC63AD3B1AD2C33962CD1B49B78843E53
0CD7AEDBC4D00A8C8F879641014E00421164F69ABDAE171FF4C3D0CE98582E31
42A22E40C77BA340964BF01B77E40EEC26CCB2F0A7E5D77CE2C2DF5705E1C53B
CDFC84967C958FF82CC08678BA203C255C26BB42AED832A8AFF3D1D4ADA6D7D4
94931F25F496EA448EEEC36752C09E80FABD10A664EC44D19DCF1D57864AC9F7
D7AF60AB39D989B60E141BE8F6D3D213F6AB73866B554E8B5CE81E0CDC4F7075
BCB6646959B0FAB695B6C02D90C300F1F60ECF8C8A5DAD00EDA36017DAE5666E
D140C940FBF738DD12D05437056A0C0EF7184211C87962D8C75015D04D54E5B0
A63DC35EAFF649E2A040E47F78DFDCB9B51A7ABB67EF1E1254B93D28EAB0EB9A
E246A767EB584B8412C63CB70FB75BD85436BDC4642FE24979C59990631EC4D9
A5A20D2CC11A79E8BA27FCCA38A2A4C70E1C52A9C6CA1F32EA5AD4CD5A2390C1
C3450B2D3B401FF79948002BAA8AC7C5FAD1DE58EE13BE3198EFF8F49726F82B
35A04941675EC0A83A99735065547C123EF29191873F4501F8C821DFDCC47BF5
A991BC92C19B1ED64738BFF429CB86E990AD1C8A038991E694D726ED89A2911E
BF7ADB75A26AD72747243B89140FDF90909EB83AD0C2D43A5AB99F986A27F732
EFBBFE6A457DDDFF17414932BAC37E94A0E0C19C6191DB4DB86C39F10B6EF279
839F1CF2D964DD45AB87FFC6D84859106E3CB5FDF477F641D98A1105BA78C6AD
008ACFD62FB1DF2B8E98C82A14A41E3B4A88A200145634AC91215837AA2B5A7D
DDEA8FB03F750AEA86E17965C2BFC42C649919A671DB022BE59FE5D4BC04B921
AF49B6DB70ECC9AF92306119F51B9BDE3AAEF0E0EC79411C68828C7D495B43F1
8850550D06489E4BF86B7A48E92EA754387B77BC7F597C5F242DEE58B90CC13B
676254FD57A865FEC1A4D1579731F30393F373EC3754BF676DAB4EBB0FB03885
4ECFFC93D5920B5123C8EF60CE0C3298B40B3FB6B10D9036EF083A26095D895B
2CCE84228B09F388605ED3281B871EBBD80B0B99EFD2A1CE0DAB7A7384D2C81D
EB959B8FB8663E53968475B6397330C1CF7FD8AE00D311B936DECABEE9933DAB
DAAC3AC981C07A9454BB0B478AC78C4CF67BE3D500DDC541CDE7633C8085ECF5
727185E53E251A5D9FAF25FFA993FA2AF70DA7F620AC1F6E926F0B6B31C7B52A
AFB2410BD74DDA24E1D662067AA351B4407AEDE967E813C8AC8513450D4E4C74
D0B1F826174C9BC395984EAC27CD1645392EC1AF8F7E33BD09418AFC5FD345E9
ADAEA219EE1D593D1E6979FC1ED937E2F3C3E98D9194FD9F131B11A84A3DB5C6
E3F96D630018980F40250E31A4E88952CB3049214FB258233015567E447928F5
A90FC3539277102334940AD896D0A400DD099E33B7EE1915888970AE236B39C9
13183B2BE2ADBC04320F177CB3D7F9018235DC3CE2FF761F96EC7299D180B75A
965D4055E744E911752E8F89F2E88EC3C35E7769CE975053F9F850878A04F97C
C69BEF518E56B40FE4609B9DC8BA21E458B1519D9A7835B826345354542F1FEA
4A98668FB8C78C2C0636D5F4D1D2511E63BD6E3C9F5BCCE54A6E11191CFA833F
ABFB7767F16AFEB6B56FC68BFA3255B1882D6AABB2C3441D69B60FAADDDDF6BD
F75F4B0447F2E15CF94E25E34DCF3E9CFE9E6D83D46AC84F53F4F52E76F102B3
A99B7DD00D5F30377F039C9FBDD02A5D564D59B23F160A3678B45DAB5168FBAB
D36CFD6A7AE0A0DB226547E83E8692C424F07764954C44364FC97AA57E34C9B8
C7849F9CE52548D33D87B74285A572C490172CF4CAC639D26135E6D65055623F
1C29AD8D8F2CDC8250BD3C179F623454226C0D3B7E3C4DB7A192B153B41C7EAB
385F7C85270692E476E281ACA7E25813F5941913E4C1A1B77C7D31FD218E6559
515D0D0644B01BE9D22EB2597F760D18A2E7522CBCC198ED13B5F98226D4A90B
7D403645C8CF45BFFE0D158B711A03361C3ADC5BC85E650FB97A4963AB267500
3EC635BD562EFF55239E475089CF640DC7BE4806237003093CF3AA8F0E7377C5
EBBEB04C421E7E277EC55D82FFA47F2FD46711AA5CF772EAB369D439C29A7C44
D7CEF2FBBC41F0B8D881408D1A3AFECB36D2E42F00F7BED24EC399D8DC3CFE7B
2CE50A175E4E739F861BE44541A9E8267507264B921BBB131F66875EFDA67A4D
F74F67A02A58F0F9AAEB39ED044D5D28878A5AABD3A1FA81EB708A2A63AC58E5
23E2E94A326819DABA9694BC5F826A8B116F4AE99ABED84AF0AE33132B050DF4
9A533A1257DBC244E0CC2D30A16F314BF01731B26345552B5BB04BF070B20737
7E33D5522120CEC467457A65D334C2B3F3913C801F3401AA016AD28E6F239D45
A79D4C800CAFF85B768137C8015A86A6B2AFCF2166E74CAE37079E87ECFD6F3E
B5AEC0FFAA9CF05156ACEF36695D8EDB2AB228B5438A0FDDE89C8BD7A157495F
F784527971731890D0741987ED2D4FB66CC70DEA6343775AE36B475C6F17E0FB
A9794B2A68DE848FC621EA46FAC6A55907F0C7C93D4798F03C5DDB8C2078CE72
924982CA2037FECE804A1D5C876078D606AAA4D26A3F244EB5877DEB8C134E1F
CE07A91A02DBBD5C07463E4006D494A137FA672458C9A274E367C36954083C78
FA83E24732E7472465D78B234B5794EA6543ED77EC7F89CF3BE392E954CA2315
A10F4287386CCDA558F50567EA9FE9511C92AB5F30972BC080FD32016D821209
D7F69ADB4BF70282D1864FE72059C2A7F4D70CED147D1CA6447A8958F53637B1
0D9656ECE7EB42F18839BC01B9D8E0715661828EE760306AD13B8D9DC3DBB4D1
7F81B79FAEC6995922D812EE3E108C08FC4D88A6CD31913722083891892B983F
747F09245A7B70A15A2FC0370700ACF0981BE94FC2B8D04DBCA032FB1BFC4C89
A0D8E1BE5278F60386563499C8C2868C1BBE994F7311D9D0CD793949F6A1696B
E57969CF836E2B51A4EB96D510C730457B3A75216A1BAD02ABB6357F0AEB9D92
6D932DC9118226FBAC0511A58B4DFE83A1CE78B48FBE76FEC324EF1347799B2A
DFF57716E00CBCB062BCD0CC2F6C23E980049EF96ED990B817488C2BC5E110E8
45D6B4FC8DD1403E2937094E528973EB0BC24AA697E22AD01C5E151719AF0FC6
E1B7324348C86828BE0C69360D77D5A5A4DEA290D8F9E37CE6F502A38EDBA4F5
09EF0B62C8C837D278072C96EE7B2E91DE2C18FB5BF756161D11D4C5E3C3AAE3
1D8CBA0DD80D5ED8C8CB4191E9506E1FC78083F8AE3B43EB0D88AEE9EC4818D7
7648530DD827057DE6E04044957AD1146C88576EEF220CC565B627A3DF8E6F67
67DD252FC94ADEB097F109C0BF61A21550A1805CB75E3D2D3F0DD49CF2FF9FCC
6B7D0F4D1C4B2DBD965202D6D7E27882501867A6EA0856D344D20FBBE2535760
4A5471A530FF31A982CB8618442D36F5BB7743E5578D5EC940711054F854593D
18CC9EC140E72CA5C64084FFBE4749C77659A4FEAEBF7414B0167E8FC7306842
006760BD379AA90FA38067274902D96C0B26098FAA23DB0602033168C3EE8903
A0DEABB7CAD53BAF31F9B68B47930870CE36821EDBA1DEB21DA61545608E7066
3978708FA1330DDEA3A656B4BE86A8AE55988A7419FA67DDCB17E1149C833ACE
2DB0EAC33E526BB6E3D03F387042A32F98AD9AF0C6AEFF18AC2954DE5D636426
B29774F780BD72241AEFE8F65453F0DADD3D4B407AA25921485FB9C61E79FD45
631902B92C516F67B166932D2D4B56729835FCBB2D7C582AD248839DA1E0336F
5BD6E8B38D832255CC96110F10293A9CB0EEB44CC4DD8BFEA80F9C1ACBA172E9
E469E7F1CED7C2F3CE3F0E140AB85526119661D73AFF38AC062B86EC541D36BD
61ACDC1720C2375144BA2A542416A3BA11A27CE02D5D8CBF6060D5F593DA1B2C
0FBB4F55530AE570F7501C0334FCD69A71B97ED8D1AE28C36180A21166E21FDA
CB3C2216BE5CE73A7167C97EEFFE545C48C4790C2630D05998D9D581AA3076F9
98E2BF836A3C4B78DAA1DF1A4E3F3938CE71CAA420E2ECE90966FD81FFC46137
61FB536C9CC0B257096FD60B45F48E530BA391866ACBD9C7E96590DF52B2A6E8
8CA258804B4EE672D3E6ED56B3285A49136C00D9F7DD92CB0E076D6C8E09D2BF
B53830ABE0603E46EFFF0E8A83478EED7B99FB50492CE791700A512587C6B797
295537185A455F61911F54B1C3F6C7C75AC2717D93CF9EF0C1F850E3BFA05A41
B7405C59B7A99A3DDDA764EA25077B786A1BD948D67CCDE2539C0CC957B6A473
F8C8C9BE6D9A4F694462B741156EC9B21D76660A488B950A0AABD7D0FABD9C73
00D3C2260F3B1745C57DA586F9A9F7DEE194E78A56485FDC5AF315ADA97C48F5
86A14440D51B44B58D480D2C048E3FA33E817A3E0ACEA2CBF2EEAD1ADBB9CFC1
A5683DE4A94F3F0300909E8FDD7742B6FE7294F28B65D21503B1639B2067F920
4A88F5DA7F5BEB09BC93C54EE2FFD3A5C9ABAA47C185278CA595D46C34AAA233
F769E7A3E56FD7028B58E1E0129039A78B90DC33B860ACA4D954C96EEB915F0F
6FFD8B399DA75B97BD929D78A054D2C9F652F32C07D2C7798127F97F2F276A25
4E178A2C28CB4BE1ADE96E5107AF287D4D219D8EC7CE5793F9DA95DCE50E2B22
3BDAC365195D11A5CE8D9B37227DA4C86F54AA224A6E25FFE8795C1B0CBD8A02
569D94751D2879AEE474827D21A6E41C396D299BF63F7A3986CCC0EA5565F005
86B7AF6E49E001B44E792D1542C8E2ED80E0D53A118549B7CDF1
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy8
%!PS-AdobeFont-1.0: wasy8 1.0
%%CreationDate: Sat Jul 18 14:19:02 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (1.0) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy8) readonly def
/FamilyName (wasy8) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Medium) readonly def
end readonly def
/FontName /wasy8 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1827 938} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA3140A8A4C99ADB
B3214E61CB091BB87421CEF35FF5745EF8DDC51293183D75AE11F26462B918E3
F15A016BF051C59D797E59AC042DB329D8738C9DF453DD062F0BA8A59E23E500
D03758832A6150BF51F1096E643C98DA553929EDAC78FE0F28B0D59B9D567F99
6C27607811761DCA1B0F378580043FCB1226121A1C268C9137BB9D807A7390F1
E9E22AD85FDADDB0F2A8E24EC39BCFAA063EEA79AF1FEEED770669412AD541FF
7545CB7E92ED4E00A6A29315ABF17ED9EA3F5EEE2B8A82791A6117E97E4D8CE0
514DDA999D980177455008706D9845F13F675EA952D79969B2972F7C7CD715C2
25BF576C035C2FB946A8D80A716DA8E79881D4637DDD27CE4D1FD60CB8788158
7D58DA3798C3DB10B26B2BF8DCD585F7F041C77361114163A71C018EF48CB33E
CEDB5105F3955582EC9E1BEF6C039B196FB4C47688D043D418E7A4B864AE025A
6A586237AF8E40C1C72984C41BCBA21B393E64D58764E8D44DC578BE2402D13F
C5372E05DA06AE1AA476FB55E9F7BF83E99DB42CCA5B74BADF60C651D3B263A0
12D74D2467062820066322DB73AC9C7591840CBF18DC1792626C15A27A6F8A6F
BD7232C8AB7F1222A31D5388565BC11F6E01B51FB0737D6910C3613A8B124557
E96288F5B63099A987EA201DC2DCF75D442F72C993DA0A3BC0DA437CE1F86DE9
6FB31974380AC4D4FFFFB5AEFE99D94C6F68B7A84AA40E2BB1322708230ABBB2
F116AD79E9D6617F5E3A3DBEA424950B0BE06333BE2F1A70A0ED368F51CFF3F2
C9D8AFC60C3F8C2AEF4307114EC5D35CDFA5362EB3212A067140C2787F6B8A1A
425642693EE8FF88E184706CC412DB867CF0D3C1F08ED3EAF9C195C3CE023098
9BE928402345A1592DE02C3E99357EFD3BCD4045EF68A6F45AEB7201BB489E25
74C98CA34E8ADA7B6259B256CD1A08F62A42885EE4C7FF49F8DD75763856D853
E62D1A74313C4E0BBB37AB099844282972DDAB92CD10C20BE3CF33BD334AEBE7
C88B9B222D0C72AE259AD5D13B6537F6A331D2CF65607995D16A646A3A793210
4CA014DA5B42BF7D6C58D4ED41AB0EDD8B76A546ABB0D3AA9192FD9AE8CDEF46
84D0D53CD82F0E2D841594C73154D35FBCC705E5D05CE7012A34035C81296EE1
77A97F5C501CC79CE1B5C172F63A71685BB826CF43D1C7B3A8552FA51042A0D8
11AD951842B853F2C672BE5BAFAC181F9D4C4C45471B799A3C40238CBAAFEB46
943745E17B42D29A9E0ABF1C9DA42F1C7F164F6A6CBC6881004AF6DAF04C8B31
EA5B6340C28EEF89CDA1EA573931825515012488C0FD8184F26046AF3C45F562
793DF174B8D950FA17F0084AF627230CA69D041FB245AD518C46EF6D1C6FABE8
385CBF970AD152B3F5E2E085351ADFCF60682345218941B862F938FB4ECF951D
9D3342626EF804839C157B49828A4D36331E001EBCB5E1FBE72A621FB73F513F
C0318C644E413964D9007F3AAB1E6EB1670FF6A78E3D14194DFD29EBC4D4EDB1
068DBC
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols6-Regular
%!PS-AdobeFont-1.0: LMMathSymbols6-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 417 117 0
%%EndComments
FontDirectory/LMMathSymbols6-Regular known{/LMMathSymbols6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols6-Regular)readonly def
/FamilyName(LMMathSymbols6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMMathSymbols6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-4 -948 1329 786}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F1E34D6494BB6367FA2B172011486EF5
844F5B89DBD01F38E82689CB16E2BB46A5E39043E718382C77B554CE0F5BDA45
B555F543B5A4669091DF58B79AB8A54B63C4D96C02C4B32021405D3A086D8A06
2E73A4A478789C6E51C058FDFA980ECB2F964EA385ACFC9A15416BFD38DD998D
35255414BABB9C6DD923B8E866EB22731B625EB76647E680B79EDD64B5B6D9B0
ADE8F024B2CE77FE9D87C1A1286ED288D3FC51CED96F6009F87E505A8B9D4288
4AB9134B8325BEF5BF60359BD06C20186FA72EED84622454B0848BB74A51C541
E9F8468308E20E4D41FE78074ABBEFB80E7B5B58641F660CCEFE5A36C7E1DCC2
862B5005575BF1D4A7845F976D9A52A7E2A33558953A65CEB6601B904A42E75B
92CF31D9B57842CA62CC666700C974D6C7B88C4E3D1A1B143DAE1E2DDF725758
E2E6EB357406DF364D2720E373DCE143CAD7FEC1812EEDFFDEAE20D75039850B
0314C68931A618291AD30A299FFD982858215E9CB25FFE9A6A805EFEE2B01B62
8A682DB0C011615552F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D8
80BE1AF192DE2AD3600CFE96D7F2280FF1D7AB28635B3FFE975FDC6329DEC300
1F56A4424DEA4A64D855B319ABD08B73E84F536BD6331778706987D7AB15DD1A
4BD7C272B4A0B383C6A680B6AB91AF0A3442AA8D1F163221902D87F9923FA77E
3346F09DE23C25D4CA5909B956FA16229BCBC3FF36EF6933F33D529CF2847EA6
D3A482CAA539ACAAEDB0299025B307CA410FBA6D82B4733763DA07D521E34DD1
6523917F436B78AD360BAABDF2CD7016886C28EF390A51085691FFA140FCC6C5
1D7EA07BE7F71EAF563D92056FD6F12A603AA2DF6708C73D283DDD92B043ABBF
3DD2E24A4D5FF0DD4EB111616C102637EB49E17B440AC54D21DFB7B2411B2B72
CF35172ED4505DD175A836C0B599415C638471E3F0B4BC30296704D41973F487
D4C1B50A848F2E8C0A77E7FC13B044E5D336C31BA0F189C36F9D48CABEB786FE
A0EA4CF0DD9598A9036B749049229902B646FE10BF4DAA942280A326B0C4356B
774DAE57D20990968A49116A09BB7F320F0CCD98F2F7DF378E1BABBCA65215C9
F425C048AEC1C929FDAB375F3B47EC3157488ECF3EF7B3069EF25ECDCE357DC6
CBCC1EE0BC7AC38FBA8107608BAFC9DB86B570FDE7E6248B6EDB4ED358D5C45A
FF2A3ADDB1E2963200F24C20A0D1CA998BD258D1C694069BBD9DD80466FEF509
9993B56E1544A2EE08946129664626F0AF9F7E546F6AFE62DBE7DDD5D3DC32A3
7C5BD00DD016072EEEA098A86BA7B6AC9F23CF55920502D0BC7EFBD5CB140E02
C5A8CC261C06A7EF3CAD09AD5ADE65A51B6A915CA708D66C339EACCC45B962A6
7731C76AC98678B54E6E3A103D82F070F486122EE08A4870456161458B6C93A1
602C336D492C4F6A7635B85ECF70EF5733EDB26731D14B304EBAF0638AC6F539
C21436A7D25573FF22A0D0A0D452A23F35B688B79D566F17691C3E15ADAE0B32
D5928724D303A23819484A60305B58B88920CEA06984C65370B5ED6B7F0EC00A
2490B48D7DEE3A263A115E406B099A5C0DA4AC9330C8D7F16CE4984E6275F5AA
9CE24EC3FF0F73FD02F87E46D24B219615F18E14B859C6575A1DD4505E724878
ABF0737B3A85443D4B789F3B597D73F0EE3CE0469FFEF6D1B30F39EAA11AA1CF
377954565246A2E3AB856FCD5FA8E842B5AFFA3E9950914CB0BBD8611E13DA3E
0491B4E1D68DE7625CFCE4E36881BB97F5A457F4F375D06880C6C48230A3E758
B4BB242BE4A92F1DBF1B1B46D0DB96EA0E2CB4EC84E971C63DD7D3979B27F1E2
EACE8AB6F7711E304156DA600850D80F1FE82AECA1283FAA11C15B198E01285B
FE86627822131E018AE35D62737A27BF81BBDD5DB49847A8A817CEC721B88231
B5BAD34B641CA1AD8E39D009C74E0A0AFB46578E15AF5E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathExtension10-Regular
%!PS-AdobeFont-1.0: LMMathExtension10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathExtension10-Regular known{/LMMathExtension10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathExtension10-Regular)readonly def
/FamilyName(LMMathExtension10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathExtension10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -2960 1454 772}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA967B9A7DF802734736F3D61073FD
8ED62BDFAF207E10687AEF931F44AD55F9C3DB174637A34D867219978D9D1BF9
C733804DA26B4CDAF23436F0F8EA2308CBE3665ADFAA59A240036663D9ED945E
8C22B3621360BE02DBDDCC3BFE082CF6230F8C83FA4B6357682B7A7DF35F166A
FD3F889D853655FEE984B52090BB8D6B7EF8DBF3B1D022B6586235B32899053B
0718E16BEE7E146A4753D6E3FD6C4B6BD9AAFC2AED5748E193D28CF6A8391414
41971E41C481638DBFBFDE2638B65D10FE5FCC35EBC520E3520F0A0EC8FDA853
597F3C2E2F60B8DFD431DB5B1796737BE979C821EEB58BCC28A92DD60EEF767E
E861765D087BCADB269D7374E766D4C2328E711F23B767CA5D47241039F33EE8
0DC9D02C1D4D91AA0E59962090F584084D29E26056AD0E2B1FC4C1257DF003B0
748DEEE2A30AE53AEA24FDC43AF62A66BADE0B3557F9F4CAFD659CF933472AB0
8922041D5D0DFC41603EE166FDAC7C89DA8D63EC1CD0E2E23E45C5C81A5663E5
C6952D28B285A1C349378D5D07B5BFD7D742DCE097383EF86C667BB651988158
47B4EEBB5E1C035CE74DBB3D3FC9D00DD3D28DC0853DDADFB3C7E642482047AA
87EF5639DA5CABBEEECB36123995B88946D1D7AF48D7C86E718E1153F8A4093F
79457700C6E57A6BB805A2386ADAD90E2DEF9354C8785D11DA504D44CB3B6118
C74E1B7A174BA2664E6F25EC8AB818169B1A250D9725677C72896D4CD4A15BC1
EBA98BA918D1ADFF45ABE8C162D93331FF301D17DC8998230B8C7918089C70D1
65F57CA3361018FF92DEFC60063E1A6926B7780A75CF71E1DBEECE8BB1295F24
4E7AB8080FD30DBECAF8DEBDC436B4AF98A2328B7EB946668117CC386E257083
7C0EDE2A2FF6EE7DEE7168B436A033249C8326F5ECEE6C952EFC6D271378AFA7
90A3AC4D2C99F23AD08C9753D7532D4B1BA3170AF923DDD58EBC8E8ACF16C2C3
5D2C311ADA85F37120427290A22C1891358A8E2517E771FA86C4210C7537BEA4
35CF4310F4987468340E2078899333E34575B1741A3DD9230A48751850985FE1
3F6F382B6D6AE0F7030A9099638BA429F043F4D17A96133B2E41002B0165D3BB
CF3704A6431624D00ABC22FD059C4858F97C79D08492ACE3AA3E3C9EF2EDA160
FF152DADAD834A43DD5CB510F4E2813868F76D25C8878E0AE2CD2CB6A8F5D480
878EA65EAFB3D4B6C5E3F2FCD8562ACCDD70CBB223ED1F8B2992B4BD17DA6335
29C87CB33A7E80B9947416A78AE7441E61FC59ECE8FF86E5068EB1C90211676F
6587EB59E5E1B9022D2E4700F5F4896B8AFA47B404339FDF833145AA60D404B3
187DB2B5942C9E2399DA554A6F7AC2B18E6B85434AA802456887484E0610CD30
95D41344271173529372ACDC687B10EEA2F1D2F4353AD17B0329006E4AF46A84
8C71FA1975956C403D1DB5BDD2DC150F2066AA14CDFDB2813F3E8130E33961FE
59835F21DC12BA2187865334BFB49CCE64613E5274D98E4F2B23DC47BC6EE911
A9D656E3D3D80C06EFA0CB0E6BE66E6BAD000FCA3390F742E42DF9ADB21E28EE
E3819F6B45F5CF7C91B97FF27348B1CDE904311CB4D5B50FA873765FAC54B411
2F37B8BD49E9DF143D400EF8AFAB6784168E035193B794B801DAF3BFA182C822
EF37B88B538AE06C27913E3DF2964201721F926BF4AFD867B30E279E64353068
DDC7021AD289466F1D312E19BBF2B974D0931DE41C799C82D5BF578A0C3DDECF
367D2624C8CE175D2B2F52AA8F9B709097350C50EF74FEFC348F450B397BDE5A
9E62A8C9E38391E5D0EA7740181ECD99B041A7269620FA30D13D114C14D9EB03
E484C7529788B3647CAE0A3046CD31019F687663ADA376CFAFE4778F928E93F1
3A964A1F264940B73EEC11BF3B0281FF830F3FCD26977D9975A0AF4488F15B55
2D31455F105A6B971CA7DF3F166D0F4D299D5FFA443135264CD15E51694BFC89
854C6244F2D6E3BBF2070F87A5ACF175C94D6D4CBD536083AFBFBA63174D6C3A
2041ECDEE6BBA0A9A56CC5F100CDCF3CA53584ADF6211145FA37D62745E3DC31
023859E4DA5C3DBF070E5DB382D7794E92057146627D9C4BD356FF857A506C6C
4D033D9EA414CE9F4E72063D981656FF728E31AEFCED44F0F3B414FA0F87770F
C66497552C348AF69403A9B16BDED1CC769A5A9CFAE617D310DE7DBE69CBC1C3
3CFDF4E71054545FEC3418D0DDD291C1F73F6E95FA660BCA330608FB748F58F2
E0C86F2AEEF58751C2D2356027D8DDA991A9F0F057BD058835A00A9D71BC89C5
999E6B35188769BA409390296DD15C623C4326D0C27B7D4A225F1CF4C3F24D05
9F76AD3BA96B9CD83831F8CB0611AFD2BBA31727E23E361272DB3C38CE6FF58C
87D9A931011B7C24CBC84EA65A62DF408F0AF2BCD7EE059DD16BA22DDE506E46
60CE694914462FE9AD6087738DA0AD5675C7444F722EACB45A409BABA5454A38
D0AD9EF127277207F2C015E30EE38981AB62C8AA33101368E0775F1396284838
50227D2F6D538F2689FF8F10C9174C386BBDFA08C147E768237CD655B58B887A
3C39A9257733B117731557ECD7AC530AAD020252F9FEE3937A73E8FDB516CE1E
5EF4F808E166FB35EF0F934ADB406B558940A08268FED26CD097A0F8B4CAB2EB
696AE1B72A30D95A9148B57CF20D1A1822B7F2FD18F897A882EACA5C85D282D3
6E6EC013C8F2D60F8105103B2E85940577634A883962FF29E0B484DFDA220165
A7A8DD2559ACB8CB24758DC276AE0F2F93620F7EB23F06689B03C4E811038211
2BF2DB8A865DD40356FD1789F19FAAE6F59EF19B5B63ED5D2F378C79A4CA1406
FCDEC52EE2E88D461FE3B24F3B40DBA81CD2B1ED7805AB946C6AC9072A4EA0F0
6E9BF014697A12E721C36308B88B978185B2F2FF2CB161E037905A66333B344D
A550DD45E820D1470256BFAD897E4ECB532D6BEEC910F5660E782BE1904B11DC
34DAD7CD78D3C97C760B14F91A5CED7ADCDAD4700630184BC3AC30E93A91DB3F
A8E406F570965E8AC4A4
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman6-Regular
%!PS-AdobeFont-1.0: LMRoman6-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman6-Regular known{/LMRoman6-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman6-Regular)readonly def
/FamilyName(LMRoman6)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -88 def
/UnderlineThickness 31 def
end readonly def
/FontName /LMRoman6-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-515 -298 1647 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF386043BC0B77B47F761487099
F3EE8B97E5F18DCAE51B94317C8F4DECC130CEC55EE16A19C81D4D1668127C7B
86C63787AA273CDA19F2DCE459A6BDCED90E3C60B9F7DA6A0715D2D12F8B805A
5203A948442C2E5796D5CD20544385DB0893AB62040E1E7F33167592F1944E2A
AF140EB52E80AC868A5E53B529B98C77E46244F0B9D46A2FBA3E0040CF5A1D5B
8CF20FDE7C876B9AF4A5F6798ED83E56E985DC30EE5A3B2D5EA30F640DA2DB67
1783F69DA070954570F579C316046D8A6B7EEEBAC73F338A8B7D40470B4468D8
CD9BA8B731E8581C69A41FE873D6ECF58F4962AB44706743806BDB909276EE0E
99E10A530147C9C14638387F89B169CCEA629DE9AEBC010589EE04588A992E08
30B37AB3DF923029B8F6BF19C1C728797AEB5C0F2044753BA4C7D1437E2B9B1B
3DAE6A15672EF1F238D1AB8F873DBF5264D704FB19F5C1CFA0E5168002B3741F
0134E79412F5B0AFABBF3069460C10225E6F7BADE64F07074C9D594F6F7514CA
5B8A7750FAF214600FB248AD5E8D9FF734EE44CA79A585268A06C6FD4E294257
0F814FAE80C1A7776ACFE85D3159ED173F8C4EF0456171564E9A2E1C26464408
16B747D137D37316A340FB72BC005029A06DF8BA48E9AACDF832BA2745C448E7
9225CE3A522B46E18F5733663105D638E571758C9E8D9121EE819E4A12676318
11F0C568B81E1502A5D168139F197F7A71FE60CCB05063C6D9D8A0048E60F9C9
5CFFF69AFB554B3534796218449D2BB97FE15BD1A6FF104BF67F8EBA5C3C39B0
24ADAC78AC4FF61D5847F0A11065111310A46FCBB19212E33F0B75634F4B5550
DCA5BA87E18E4F07B5CFD4BAB729CB705A53CE0E0336424602EA4A3032DED7AA
13FDD13235C6514EEA804EE4C5F3035A6AEE4391BF9839800B20C7E958E4B42A
1EB67E90C22A997075D4F197AF8485F01346CB8E17CD12A285205B2D5D6FBC1E
930909D9A6A38BB39CA02AB2598B2EBB03A60FDB795A3BFDCC677895D8C041C1
092F4FF2D03D6091E3F950ED7BF3F41289F48AF0A0D302D14F972D7E215AE40C
27F118AC052C2E917C8ED53F194AC6DDD541E4160DDE659F85AC3B58BE49788B
4428D9918CA66CD99164031767650ED4A3681A84D170419B1D9D825F30DF959C
EB471230A8942C6B0834FB86AD04CBD02303654E4D1E40609B14C8D1F9635666
1F43F7ECB1CF1480CDFA71035F9EF833A4B1B51E56065ABFEF1036EEAB8E04F0
95EC4B3D758F2C2368FAFCBC926D5660E96B9741B75A6395CD7C83F9931A7999
0298B08DA5149E3FD6CBEF3D79B7E604C912EA7DAC8E354F1CEA9C76D10F5718
23F71101D2FBB9CAFCD196E7A653070E680B42E542CB7DAB82C4B4329E5CFF8A
B0F213E9D5CF55D422C79C38F2C2F487CA8BC0696574F4D97784BCD075E22809
C78DD4A7B6D83F99EAD74396128B0C14658CE0A473AB3EAB6060F37CA8DF3344
6E877BCE976680AC346250670C41BEB73DDEB6099C156F65478D26C2CCE2BBC2
D1323B239944FC0727155B6A248DE14B83C362595A23B2F32A46B578F76FE702
7B3CFB43CFEB594BFF9BE4E7F8ECC5B006D8B46997F3DB8CCDDE45B16F33F170
30AAA7B0A2CEB87A0360124FD1504C60DE1339C3BADD2EE20443E015CFC5A976
34E4948BA2142FB8383DFB5DA7A5A97407F3DEF442B8DCCDEC2DDD4A96ABAD2C
F549FFE58BFDFF5FD8954C0B4A8233C657E19241996C2FE81439067979C57205
08AAB6B59476C63E035056CDBBB9F4DB89659D42B100853BCBD6B419699E3234
8310D7DDCB0F249FF96E2C1310B083B81400BDCF7A4BBAAC2CD397686834A6BA
B96EE0F6ED61A0C239F01DCC55940A347AF0D0EDBF29C1E6D9386ABF752EE368
229466AA66BD23250F324FA5E2D1D0466AF5A5083378153907622D73A70D1D81
9B9A15C65BB416ECA4229F8358FDC6856BF7AFB05714C269568447675AB6621A
FD3E68C14C591584F1896B5F92BB591EB9678EBB5A676561BF61FABAB8309AE1
23A6C5373865E3627DC24E3B67E616D26EB4017C11A6325E2C2612D122158C72
3C69AC7843C0DBEA2D226A914F1F951D83972DECD70AA8987112F05C939A6FB0
702B90BF5407FBDD9646E0166601B3481A982BEE3ECC41A358576FC9D03838EC
6D061585F61F323D0211BFD47EB5DF02284623F4FEB36379DD63F00985881E84
7709817055B8EB3707429558C69FA1F3B656410AF0BE6BF9A69D0DA22D0C87E4
6ED1BE94E17E5C4E5593FCEBFCC4E3F3D8112A7E8FF270331D2FB475491A5434
A79EA5E3D73F78E9ACED9637C539AE998D80E1F976DE109B52B2FD416E0C5DBD
E384907789D0FCB35037AE508B99B7CF3B97EE414683897A495F88565BA467E7
EAA7A5C7B9BA998A3AF778BC7E1EA555A3A3EBAF0AA5311FB05079878AD49127
A054DD75488BD6D2A21BC46F08EDABE22B162DA9A78C234FA2E075B9FA93F472
28F30D503E1E0A943EEF9BB23471D1CE0E36F28BD84BB1AA7F88CB97755F3116
CE5E9F6A43919B847C09D913F35AB9B9F6931BF820312DBDE76CEAF7134AB288
B2B12B3DD933BDA035B201304263EFF2F6A8EB8736218E6B25E840A5944F0077
464BF63BAB8E164816101402EB871632EDC10A24FBD867BEB880FA5180D1D187
38BDDCBBD35418E9E95A2E9B6CA0C8EA8089ADD909F6C0EF7C62E534D15F5484
367977A81CC6077F046C5DC0D0CA87C6DF268655C4BB95D634E67AEB66AC249A
77E0B05E0220FB8FDA5BEB936185CED1820BC8C84AFE01CB0D62649724427B2F
9BF6893395C4224EB4174D294D0EA1CA35C669D28AB9A9E70887177E32CF45F5
2768B6086C41EBDE1BE419D578FD3B4F48133328014035CA46D6A6DA0BF5251F
BE08FB8C4BD04036C06AA4752B076F4D9009939D6833903A296C641CC83BA1B1
69B1729DA75FB248B8D5F3CA635184ADA4CCB77AAD095647EB8504227871365B
8F31103159F65D30A7A318C1056BF638CA91C92A1DAB9FC9F25B6A0B2942D607
06705E64A2186FEDE7648A99D75B0C6E5665DF193233FB4633FEB38DE18855D2
2FA2B5478D80FCBB49386EB93CB56A1619B9B015F2CA593A2DD89199120346AB
81E636CD8D6EBFB3CAD4DA410E69C542CAC64B65F6B829C08A4DE38B793A259D
AD2B970B9DA222F7B00A29DF946579D650695EA35917AA672E6D9215D742F720
6D3F2AB129465E8E9F27024CEC47C494C92CB2C82CFF4F924367854AA51DFECA
58D6E39A107ECE8A3EBE7E645FC464DCAC1BD9BA70A8C7955589DC484A2F75F7
FD254E41B544678A9B463A935CB20248FFE450E1CD2F0F641B45E19568C8DF06
F288DEAB608FF5F65C039DC0E092573197CFB0B7FB990F7F393A62B854CEB852
9DB54850D8E8DB82F9F77FB5BC2DC8046092E2E7B9924DCF25E9EAF730DAAE9F
50BA70DAE15CFF2080D0521374212B1CD2398CE2900D31801D7A9E70C209F20F
3A6E8C52358CF3EFBD549956A19B5595338AAC667E1AB1C42DD13533A1B6A293
5678DA71617B328DDD3B19DAB324886E4CF607F10F868F5484EAA12443598E92
3758D47D31637BC0CD4D6E5E7375C5140E3851D25DAA0F28C26DF07D1C079E5F
5907EB59A046D1AEC79030AE60BDA3395B9FCF935155EC20A9D8AED089AF77F0
C5D896228A3AF8A96326136795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD86B
DA5312AE94EF917D9DB15696E17035899FDB03E6F01E96D469B396D9EC72DE12
F979F22DF68BD1A014E056C02723505DACC792086E18039526155ABFD0D9FD06
D04B67FC7D439064234DE4FFC410D7C7DD6EEDEF24236EA0E4FA2A6A4DBD7A3F
1530F5C1B8AEF5E9C169221759F4F1124070141F4CD01914C01DBBD3BA2A4C3A
61A645A681C23966AB83B4D93D4FC5D149AD425ECFC9B42C21EB1D9BA4DD7956
9DE87FE23F11EEED5E2B1636F4D5CEFE78715785914C4E28C49F6F1A5379D1B0
12E2E2C1ECD2AFDB08A2C67279A95F558EB0B7F4C9B323648D1111EBFF818356
31AD6C6FB88D8E74642F8F8FAC078226E4938367069BF6CB92D44DA5D579C004
2E114AF8CE12BA8CBCDD6621C4678397474BFC8C2081F4BBEE71BD6AE7D69346
F9416736BC95B763C70B3CD1D2048FE03C8B2338B66C68DA69B1C281E248D4D9
F8809DDD97C73855A243732C0F5C811531DC9DBABE5B5A768FE14AA8B72B5DC0
E7BEC58028D9D86E7EE72A3AD5AC654B29BE5C5AE093F5C403C5A91AE20F1A22
BBBC1B1166547B306D77D3AB9B6BD24C39E1432DBE8566D73CAA5BC2885F0B53
5DB42D5A4BB5A14E1217960A56E41FB7F566D32F137CC71548A348C48D19182D
79249080AD244A961CCBD9E6C6CB2F55A12A0B8BBADA91A7C1C1A18789758287
7752765892DA7996380563BF7A3B679EA85FEF772477C3E20D8CB6EBFCB46978
D4B765E893333ED8D8C2504C3FCD5A50D017A96E86F969D73812275C91B9692F
8E6EAA887347D86EDCADA440FE9D98F9939B7AAAB007CD23C7FBF048D5E2DC21
58BC1898BBA676CC279907E39B68ADF3EDF9E889ED33DC41378E58BD33F44D76
204AFF41F2AAD0130BEEB425D3760296EE13DF23B383E39712D0220E2A3A50C3
275885620061EB2DF4472122948167369C34009F200C10EE7166BD8D3E301C57
61411FE04B82E49D232E06548D553D4A6EDB24F8208EBE13214E89E02098D7A1
84688CD0FACC7802A28ADB7907E056D20AEC2FC1F72ACA152F1EE78072533F89
00CC3A1869BE48305E5E9A7D9E02960F7C0D013CCE063154E006EC3DBFD917CC
0E0A5B9B4BEE1ACDB86500AE72576A26FACE3A2E744E53777974A0D88A7F5668
837D1D8504766072E48BECB1E1CF410380BF34AC17B2E42C84A0B24C1063C614
795EC0D529C5B2F5AA944765B7D49D7C68A5870CA8EF1EA346F284E22E30D2B4
18CAE285AA38F9FB436D39371787FB8175DB7A2F2DCF94A078C5ECE127ADA570
D5CA0C07D61C4BC9EFA3BEE0D63E0DC4E6F253A60B2B187AAF67C0A3A326B77B
817ADBF1E5A669A87C3886435AD51ABB4D23BF1A75C78A77CE2BB4368A7C8F48
639FC3A0B6DF3DA6D825DE96A8A5AAF64EAAA61967F079C4B3C2FB8ADCC90F99
8103A821C35734F0153950E5F72FF6A8AF556823E56938BD1F7F090DE03C365A
BCA7720E4555D0213C15CEE401CE0C514064DA918225D19ED8913DDE9F3B0401
9CE0D724C1F6521925BD4FD81E87CFF2D9E269A3E703626A0FA0270EA380881B
D9F07A2F5BA058D8C188CD6CF81A54A363821530A65B551ED33D19A1FBA979FF
7BAB06B1AB21AC0516ED2E5A2FD871183722A407F7C4524954279E275DBB89F2
FA5DC1166927CFBA23AC769B3C4B13F7C69B5883A919D2A1372D5D4D2555A2E8
E23E29D8C8C5F39807B5A0118D2426A59D0EBE014A3FF2F87FEAE21C865A3CE1
C215D175C429AABA86C5E24DD1A399C71785CB889E27F2120637F8648900B5DF
62C1541F20F494D78EEF9EC6AAAFBF49BEABBC2A5CD7E1AEF2CC12A569BA7BA5
9C020176D27BD4C4E854BCDECF5DFC2CD7D09ED923234FD2A78ACB71096E0513
6E4E21B245AC7E4E1B72FFD06208B91B3C800A47BC4CC6B35EE6EEB1428D26EE
AD4D6AF20A9362DEE5F1EB91E8328FF2FAEA463F9B2AB7D175D549F37BF10314
3DC04D5B5E53D8568E7911839EB05C8F4A9A5F3893787027C722B626C678B1CF
0226C3C6F0294AE3F6F13E38812F6866EAF9C081A5A1169936522382A0B77790
ABFEA5BD633181D694F8A1F7EA92932FD6EA76A37A897589C1F0806C014F8B9B
511C2B3420A7A62D9C9308649D44399EDD9E9B893820416437F76C29622F9044
A50C5ED0923B060EA6EEA5B735D0D62E41842C07B79EE560FAFF76ED5DFCAD3B
0F3C59A4D52A0E034635795D91A4AC0ECF36C30F76ADEB12ED4A41BADF2F9A51
171F3FFA6CA3E19BE891AB08ACE7DA19E2F50FAE0EB699C4F77D6883F450ABD1
799F8579A036AA6F4FB60949001F55B42E5ED7AB77C3AF347CDFBC6BAA5BAA1C
DC394F5824BF2B86DE255EFEF62BDD954F8850BDE7D9C5699B691132A95B595E
32FF28C330E73A2D5F605E33B1B0E2F8145D20E161F93055C3432CB412BA299F
B6769E965881C566F3C4AD294D52F199F9C7094BF0EAD8152BF74F34C4B0D14E
85D92DFE733657BA7C2104003CE178CCD25411B21C3C156261EE11B07CB6818B
B170AD1CDF997F02C39AB3D1B01DEB5CD178D85E3DC41AE8930680CCBC9B8869
CE7950969557336AC8DB3B61E01D64D56E8C4FD89CBD2E0B8771B7BA9939D03A
D638796BAB9535BCEC10DDBC521F183EB59FD003AE5E0B175EA87DD3836D1078
9C31303F61A695B20B65DB5CC404B62D98C1FA97554B815B20E2CECCDCBBDDD0
28E973830BDDE3DE50E1EE25853B54C7D2A3108D8678E9172B317EEF73133F01
D9D2782959A1DA04A777B592888D38EDE68FFB3EFE83870FF7D28FD6296AE76B
EC4B0044AC2984337F2EA913D0717CEBC524734E0DA2BD1A957EC40BEC5ED705
F31F6143D575C429AABA86C5E24DD1A399C71785CB889E27F2115F607BEFFB46
A920E00A5BF781176BBEBD60BFC9B531507AA8413E3A653F17CE3D33638C065E
F056061AFE5206EF610A2A93B4883DA220360E10B92ABC0E14777F2B97B5C563
266755B07C1E9658B8DA9F48C8E10FB7F290F039B2C1A064DCCBAB9C238F3064
F04C6C0364BB5286877756AD5C507C4D9306DD8B5BE74D2881CF9761726CE6DE
C9A6B3ED3261CF7652215E55CAD75EB726F41E78DF2CDF6BA2E11F15D300A9E7
DB8EA194DA5864148B10B026BFCBCD1624540A9E17FC357942D126EA5B0D8480
BF1A1D088DBD1AE35601F4179387D3EC15B2AD9D2CE7D887D9CF2FB4A626EA3E
546717AE6E23981338327E108E21F6917D30FA36FAEE98F622EF313CC8431931
D83141D74BA02BF23DF52B4D11FAC152CC6A4B2E4116C7E088DB95F38C5DB57D
E6557A99B5C67ADC3E7CC6F7C0CD6C881AD3F6D51D65318915D4C9BB9730C453
9A8F3EDF49261942ECB01AE636FB87444046DC3EA7786BF979CE11FB19DF8BCB
741FCC90E115F979056CAAB4BF045062D7C9E824474CB8755FDA5E1CD3C4B6EB
90A6AAE787A7652599D231A1D39AB6BD9718F0B6CF46F89985CEF0DE18E38A8B
A0578E48711390FA2878C9CD37249AE44032C32D559E0F0BA59CCCFB9D76F547
735EE0F40D261B2ED915F7F2273293AB153B6EB6B592A1F9880658FD3201D5F6
460057914C456336CED5F36046C04E60986F5F5A6A5D3B4DE3BC638BE22747FC
30B442CFE7C404C7204393F55E3880C1D4A55DBA6E59CA2D7BA2800FCE8AE791
EDC71A47F2AB39A2CEC55D836C1893A1463C96AF729C75B5BA3DFD65E2AE8B76
80C8C172A8C59173B67341A4BD0E85DD55560F0EDE2489B76EED40845D9AFB54
CAA90EB44E4C1819F1DAAE8E902C209BFF0F7D37498A6E2F8AC2E4CE7FF33F69
2C462A0ECE784F633E3161FA6E6452ED50E045481080784F446F2F5B45FF242D
A4932B973139F328E7E92828B918C441E4160DDE659F85ACB1F058AB549FBEAE
F52C04B9A93E9118B3322A5C34894BEB40BEE8B5C55D9F588341A0294A75A62A
A83295F8DC9FF20536F140D86E1719A66B1F9AC6202BEA5AD2C4142CA7D8CB95
4B8D0C0B61F710DD5B870EBA459DCD04A9B13E4174F27F5AC1B25A1D76145C78
373124E8BF78AB57D593ECB8D951653E6AF74E8ECEA349DB71A2FBA74DDA38B6
197C0A9FC87686FC22C8011DC4CD3771521807ADCE30D202888F27C0D1EF1829
4062582DFB8EB1443B02D72592469D4BC8FF30DF9E84A00459CCC342DE64DD54
0C46FD073B5275F5C89619307817C09D60F57095330F072C7941FA5ED0E97D14
480156078699C593813017187CCF593336B8ED8C15960B4579F234739463E46E
7E218A3868A17E9F45B683A2B5ED9F240435313240C28682534E57DF995F87B3
7C537FD5D25484B3B0AE0FF1ED154AFEFCD6DA55C6B20176CFB38E41D00559DF
94FDBE26D4E14F95B195119EEA940D61091B4EB201C7BEB1EB68A0B53C977307
CE56259FF842E91C82E42C155356428E2AE9ABB2ED239303AAD05165D1F22B1B
030645418E617DEDFC0E4077566D4E41C8F0E927101740E78D27803A15638AE4
70FC66B1AF719D4DE187F45F8F9C1FFA38A9DCB0FB0BDF53F2801FEAACF75D29
536CF82FC2C1F5D7C139AE22F938A5487F92898142A856E41CC9AFE6D74B6A4F
BFAF7245D8F075ED7497FA4DC7720E6751D0F43F9A1290E91C463895BD12E8A8
31DAD661E5C164BA9B877B857DA39049F5887F6C75EA22E2C1A23F58535A049D
B0DC27EFB27E091728626DDDAB2F32540986CE8A767EA6FE093E393C8ECEB3EE
29DA78461BB8B438EE64025D7176A1DA12C5F127C127C759CE5E87C067C64607
BBC94AE5888A7A4FD92860505B4F9128470809AEB599DBED532F88CA8C433284
613A150BED73EE7BF5EA5F8B4F4C828D7FF50D459FB6C913BB52FEF3A6D478F9
DBADA10DD79E71C527867BB83EC8516C6D3DD88748F9C8FE2FEB8DC3AB2D1241
46E08DA532B277C8A73DA9EA6E19C9B1F9D62740A6C1E4ACA130DD76A67920DB
B6D293EDADE9D0697AF1F8426A6927D11568D3145B52C9810DD5B088B31A0FEB
BD75EFCBC76F9AE5E10940A362980DDB4DDD3E54A6FC00F6B83D33DAA908377A
A57FA253503263395579F2B2D33E0A136C429A9D806C2CF8AB11598056D49CE9
21742A12D11F083A6DF8ED299BAB6CBEEBC76E45EF546CAE548825A0BCA6BF93
B0B1373AF5595746B28B61224EBF24FF7D787580D9DFF8078E771C480FBFE7C4
F91333D6CD3899778644A33617B7649220AEDE45C6C9B90489846E9685287879
2D64A7BEA283E69AAF42B94F2EB8D997A7019306E4878DE4117F05362CDA2693
EF95F5CEFF173F2489F4F89E7B06D64F37B54DA07F3BA2CE7C060982F2756FC0
2CB4E8A25542FD47258360A2251CCF4616769A0F9CBD00E2EAE5896ABCC87579
E2219B298DA01C6F8E41DBA6E90A78F6F0511E5B270F16F3F36D0E05B4452B70
96D477243DAE2474C372E77FE73362D1F9A090432B7560ADB2A13755A5048E47
B03087A55E15E6BB75DA40C09AE18F54402D1D6B7ECA0285F5E924A72A2E58CF
17193BE9B7BA5722421E932D83657C904434F3CD7B4C5BB60861CCA95504DD63
423BF603B14459B7C691BF6EAD7B7DB0E684B3B6C374B0615F4E274A69159AE7
D5CA4734C45824AA04BC6B893BA13CE6E12BA6A878F7273E74B8294CC06FD8B5
907343808C73A0EB1FBE7B70C8CE77099BF3C94BCAAE222B48095AAEBBF152AE
DCF1EAA2798FF873B61D70DEB72E7AB0E97B3290EDAED775EAB0D7D553F222A3
B01ED9CB0D6301C4C4F6D85252A14F0370B44FF5EF5CBA6280B2294E30885DC5
F1A7C010EC1B86BFE8B4E0C2804FC07CF2CE0D07E0634D699E6C291EB0507C9D
25D99E4453F53C1C822EFA66A75E01A68758FD97C5928BB2B1DCDC1D32AC919F
24EFA6F496A2C52BDB37C17C9B26166FD24C9FB501AA43231F13A05FB9262024
E28822E7347C0BB08B062696D70B11E726BCB1551DC4A3348F9E2975B4F97A55
A86B68F77C160BB6F3E5DEB7A1043916E9403E4A00B56497589A27735FF3B9EB
0A1BE8206426CA47A0BB5F59DBDB9785489E1FA9D96C57DC4B7603038D6D6C73
B09957F9CF8B20AAC012605EE33312C1A0A5CF14D1B5CF6804B66C3760BB3AD1
24FF837C7D4C084DF29035152EEB5128796E46CB0AF4B537987C2ED552B37D83
F122E4E636DDD749286B80A5C22474B49FC5C093A8220DB4EAA1C995B7D1A07F
F0F73B0283C8843E9A3001BE3C2469280A39586639D8E1C418E04748B104D2FD
8D54DE94FF3A9D7F90080AB112BB219A800CAFD8D18CC2BBCA4C7E30C9175CB8
1DE744DB504B894E49F4B8A39D434CA8B1E93145F56A06B7A32A8770B7B2AE12
CA40CE4CD638E5A708FC266E193CEFA816D88F0C4D6C5DC31B94B63951E8F988
4F5B9A2F3F1394036A363889F9FF0A07AEFCD22DBF4E006F303EADF1E26987E4
B9CBC486B9465F64DA2382708D050BC6A2263B7F797BD4F9FD0EF0E5100A815E
3EBB14C6AD0EA3E77DEADCB28F65FD2288E0D551700A71A73C6C9FEAE12AC083
BCA92C8994B9C763D0829297D1C902409E2D391E2FD8F764C2C694137ADD7E47
CD2896298503F94188127439890831943816E864F745D875C07CF55186CFB32B
8198C517BD3184EFC8B1A41A4FE88655F94A95316AFDF228EDE522641BB0C9DC
E829B68067352A0EBC3EFC0F84B852A14D48B578ADC22A95A006C021D3DD6EBD
8D243D45E0237CED0282B91530ED05A87593275FF353884E3C3A9818F4022B52
93001D6D3C403B14BD58C03A13FFD612BE78D90093D02C0912CBF14A1982227A
B214371C060C9383278DB9691EE42A0F23CC1762CCA69777B422E28AFA3499B2
8020C39BE1302FEBB6C5A7E2509195211FF1A494D77435AAA2865F8267C8F175
6E5F84C7C95FDAFE8ABD88C9FB8BB26F02FD8B087A8608FF9C86E836B7FFB708
6E26D2FC1495B2061F5F4BE3B7C96614710AE128438AFFB41C0412AC95DA0AEB
FEAD38B6016D9F92BAC170EF577F45BC0B910DB288BA3D575E787E6B81A97825
C183D791B383330C36FD60FA010DE7B00C68B52F3C006F4CB5E710B820A1D763
C4968C1A61E3A5B420A712B256913E507618459942B6D22E4C45DCCB51687CED
6E30AC81F9D59935763B4BCB3721B6370725CCF2BA061DE84855EC95ED96A4DD
1F222E2CD4FF98DC7F79C989CCC086CAA9FB6D4F776D0EB6C3A88D10A1DEF8E1
94E095090958F9C0BD1FF8BC3F5BEEB210E4A52724E729C277E902195DB32902
A098BA24A0C4A864AD85DF65F71B56A2E8BAC52A13AB01670D4B6CF9B669F9A7
821BA9CDB18DBF7655DBC9AC0771EC0FEFE058B9944292ADF21511621F53D54E
AF38DDDBCA057387BF1868F8F5FC71B44F27AD672FADAF8CDA00FF11BFB205B9
A42EC1F50B435E4D44E14E2330AC06E06A2E0D9DFBDC28DE2F4431F3A1923FA3
C5F5206B559BD4B457703BF4E4998623C743B746D0EA5D704516F7F56BDF132E
FF5804B0E3186AEE29EB4E62793F8A769850E1A9B91CCB3EB15C6BC666101BAD
394692F4FF169160D180D9309F26FC26798343F80F01518636C5B62F9B637684
3D91DA00229226A37259CFB0AD3BC261D84C73D8D6D9906D0DDD6FE21381EBD7
E779723FDD3BEBCB3E8B73549BAE43FF1AD0810A62F516AF093B9CFD177E1442
B0EBF2A9084634736A21128843DF49C84B11100B1E2E9A6A644510454A0A41DE
BAE7BF7A16F17D759FFD379C66C21FA581E86060A0FE32583F37CB3149C8BAE3
5C0616D2AB62148838AD829C756090F8D5F3B09A2C48C64773916B753F0098DE
2D33FA086A3257406D4A30C4FFC8DF9C2D5213C84B98198A053D9F362D8D2513
90471FBD381152783F029F41CD48489794E223CE3A1F5A84930FAA87A50C937F
AC096DD9E879857B6B39E7DC1FA69943D9D567ABBE772E8E290ECF14ED139240
2B3726822DC682C601010A023EB0A26EB30141D2358C0C3F47AFF734D51390E7
69C038C7E42EAF7947EAAAB55B45B7A5C2477D79AF990E562163B84B7C7F2176
2238B86E5B7DB23BAC9DDA957EB16C4A4543F552B9187C731E9182C7C6A1D52C
FA76989AF1AA6D550B6CE0190281BA4CEBF16ACFA4FD94730CDBD37F91837B82
2BC091A27912F60DE02E09F6EDD7742B42583DF95492E74983439AB75BC7A21F
225F83C4666B059085C2BD7D5FC13534168DDBA44083519C586F6BCD8C8FDF68
5F5E2937C95B50D07C6316ABC08495EF319A04D44998B1B1164EB30AE3737AC0
94373F1D216881361943C7BDDCF92439A3AEFCF1D503F67E5C1F345C050F248F
EA7AF4618DA0CE348EA9AD3FB54CC715CB71601C46CFE03B1AAC8C7642DA07EF
2F28988112405F80F2B966494E325B88AC132D54A5A908B5F2A32F38960F407E
6317A849E99BE97280ED370D6909828DE61CA45D557F042435D6DFEDAAD93A07
4010C5626DD9470582E82C1049C219ECA4A7C3C21E322AE6C2B6732D60633B59
C2D9252263EE95A66B7B588B417B20D3AE846ECF2693940BE39E927170DB0EA3
1A11EE7634FD75CAEAA480F411AB796386CF6D9DCF7F3A34E6AA3CCB13CCC61F
CEE7C772CC11E29DAC5C515886FA6CA4A2DA5A44546025251CAD878946C803F4
AAD1A3DFA06621001C51AF2CA7A39AE32DDB4FDB94B618898A7BCE7591566B18
81971217CBD808C8F842EF5F146D57D0287D62D1A34793E173D032F712B1724E
562CE367D96B03C0B14F5DFD867ECDCEA772E0642F697C25D6D88CAE47E65674
88A918261595698F612BAEF49047078B06C8A968F278BA7BCA00EA900B2429AC
D87C47C937209B3DDB4F2FC6DDE67D9ECDCAEB880C967DC85604DB4B0AC6A2D3
1157299A01895DDC8D2E1412FC7012142611205589FA4C2263FAF831B150E965
A9DC65353A0D84229C2226465DBD27291A7AAD14E9409428EFA930C25B6C0A7D
EA262569416202C10F532325DABB89CFDE0D43F5248CD7CA2780910F95C39410
9A66431F24EBE44199949AF13E05EA2ECB274ECC3FCCA3E7F09D86F51A671DB1
0D74D95084ACE3907DCC79E6B2C6D54E7DAD6B7BD84A1048804C3C2DEEA1E2AC
B8E3A59B05B33C8C730543071E483CB9B1E4AC5CFB2C9F6FC1E68095BEB01252
67D929CE8BE711ED480CBB8B9E59E1BF5FCDD5F930F3B3F5C994D3214A2D0851
F039E95FCB1F072AF2B84B92B25077BEA592FD9F48E2322EFC48770954D2C1F0
2C650105E8092702D8DA1BE48FC44AC55C1C18EEB23A86621421E2B0DE3A365F
9948A115239FB86E00D9CF4ABE809375826B436E6034030E5BC5ECBFE09C1E43
B72CD876F5D5A2FDA8A6B734CC5C8B3EE785597A94304A2A44CA18B10CDD9DED
32A96DF332C5E4270C9ECEEB932A5E64E2E417C6B64D84B19F7C2D7C143E287C
1B2D7D428653FEF4115DF9458B70D2A89EF4E1B65D967E0899E413617E745B66
E31908E90AC92E1B0CC8FA70AE6868FE648FF1F57DAC9EFBDAA60B1ACC4627E1
04C0913018FEC9D5FFE44F8C791C47B490C8E3D8B586D52F8B831B9757ACC0CF
4F29C331C37405D06144D250E350E9F54B4AE711E12562903DCC31AAC0425BB3
88754AE3687DC02FE9FAAE87F5A611B1D378B62358BF5E25F655230DDCA7C8FF
82B7CE2B2A34C7E0359D0ED47D8BC75203B6C865CA2BC270E4E404F8A08B6EA2
2077FDDCF0DA01E1046812CE43B02B9A8F4A127E7C98CF0C0887861421AEC4AB
BFA39688BB222A81685006706434FFEF6D6F9857FBDC140AE17DE96263A6CA53
38F0545FC28B003477123FDF77718900E4F5A4B84DD25FD7B650D3DCF5F3C513
B18BEF7A4D2DADA9C2961A75BF513FCCD45751A773D5AF2DEBB2EE0FD69336E7
070E3EF345D6D1EDF0BEA8AD094338F09076A091CA69B1ACA5AA995EDCA2CD0D
77A6DD17590E8EDFA7C7C277BBF9E386D35F95636EC0312F429A47EB1707C89B
E13AE1A7FB3ED742D1BCEB2694EC497A91E603F12241E2EB52B5EE286D3582FA
02F32D6E0C6BB9167136A1638B15D4BC9AE7F57F252FCB0D69DD118D0DB9EEFA
F6FB97D66CE67F532CFD2FF2ECF87D300F0C3DECCF250DF79F6B91A1C43AB587
F21FEB97AA1C23F690945DACCA92EE9061FAC3A8E1B8776C69FA56A8B960C86C
7DB62ECB4EDD7544FD3FF04EFEC96FA8F7A0C70AA127E851A7FCF927153CC536
09ED71175C520BC5BF521D414D9517A1ACAE3A443CAC95E1C12DF3F5D89713E7
37FEF91B42E09200D95D57CD747F029DE9731B2F37F16E8F256567CC438CE60F
0E21E28BDFCF66828EDEBBCBCAE0D1C27B5342D62B68098A7C22BD843E895852
C341E532592376A74B7042A9865584BFEEB4D4C4A9A42FFDEF81158A47BD89E3
8372CE2D82290BD895D062805FB414680D72607D60677ED47A130546199EA767
A9C83A6A9E43A0310316F78211ADAA1AA9954C8C41A43344CB76E959A74DACA2
371F0ADDD8BC75281D78F9DBE1B057C32C1A64E1CFAD9C246B690DC0D5BC7A2D
67CA67CA5D86F0C590D7FB9E51E09C85C5BCDE30D15CD9AD49644D0CAB75DC03
96E0802ACCEF1ABA9A1CD9797E02D88E352848F0D8B554898FE557F695745670
35ACECB85EA6EB3D4641288A4EAFBB2D88DBC81C63A31172C84CE47EBD9DF99E
ED9AABA70EBC005B7E807A854FD70F21487F660E8B4909C37CEBACEE7270EA07
6115E876426C3A50010BE1C4198E61EF35377E26C7418C9109DED70DEF3AF679
5B119EC6803BD53A8882D82929177263931B11F43DC5EB2E65CBDF1EFB707AC2
5F7C9EC4EFA51198B4F0EE5F20C2557425963BA635204E89F80CAB3A5531F36C
90C0313FC09C2F4991EDD9FDFDB76A9F085962FE7A2C44D230FA17EDC57D407C
B83D2501B0D2C9E86FD17D74A20BC3423FD37E586D41CC4BB36198BAB18372CC
B0421C966210F711E747B22C5E73B38B7279F9D195029E6C032C5C1D499A9EB9
3CA71FC9C0D3222E949E21E4337AB4271AAE398BC44E3BB961F09004DC142553
CE15D4C31DA3BD92FD6CEA20D0649071442B2916EBCE5F4833BDBFAC15FE313F
A135EE23C0D5C8CD419F06D18EEE05F32BFF7603BA3CF4C6B4C95926DF2099D1
9B442957A1470536463124DFF7ACBDE3E03F7063896D3B578B240D33236A9430
4A0FF6B67A7C777A1E24E9A65FF1BFD8403816A7D3967C70CDE19942E2A18E96
1B346DDC72A494AD3B6D51A13403321B6B328D11C40526C23FCE9BD511AF8DF7
4D54DDF7FBD46D78D457CD1912F93210F9869B73565A7154A43D587904274035
2282BB0DFB808524A31507232339F3FCD771914933CABF613F0F9FA3E204B941
18A24CDA71A04FA87F2900DF87CA692EEB2A093F6E838E0168E486DB5D57149B
3280CBA72B340615323317F8EE88F29A7BBB02DF84B8931F065F6E7F05D1DDFB
7157AA2F25BCDC92F98CFF9F3D5881095B96FBB30E8659680F784F42F625DFE3
33507C3CF7B820037A908AB88F152BB80A646A7E8C8F0BEA57F2223762D6D836
88400E117F6F32FB29D6A24B2FD42F2578CB46FA0487DC1E17E97D8E64D01390
E9E92FB6FA21943BA9C3AA45E9559574FFDA9116B4E8CBED2FB8719044CFAD40
2ABF22016F7EE0EDFB471C521EB0C757CC9EB5FC10D8A73FCEB783A3E779009C
4B3893DF4E25B71CA17D427219E0E2F2C595E18215311431841DE8187A20D666
4348C7A8ADBDE1015C3386D1D094605C22E58B9F9C3E9C6D2F7025AC33C02AF4
07F6AAD2DE8B745EA3CF0414890044719DE587F950612695EFAFBC424FC5CFDA
2EA2EE5BA19AC90AD31DC42AAE92197EEBAB524642B77C830532ECC75482E404
231708623163ED2DB636BA33208269330C24A4E6682DF8EB4342118FCF06E64A
0B4FD2AC4543FF4C33F40F3D13C6F89B4DBC3027B3CAF2C6EF0A5000F53914FC
5314B076762EB0A14CC90432386E632476DE5A98F735D2D9B006DE3E4BD74C1C
A8891A8E08C09A601506D57771E5F4620A7A8F2CF6EA77EC690C25AAB024108A
1E55280BAB4C9198C3A063CB70AF955FFB9078E60049489C7CA6246FCCFB4C5C
E5663CB4883A9220F39D0144B18CB67178378A13AB1A56F8A2352A7754493B90
9CD1083E74A672B3F3760F5FA35BCD767FEE4E9808EBF05438BA89FC75D05D0E
3F9E07539C80A599C7AA78251241B46E64B3978D9476D0631111033B5A1DCC20
3D15AE5D01B4424647CBFB95D27536CFD0723A39C93D6B5D08E759E32395FB63
2CEBD691C1F29AFD52CB18BD258ADFB0B4BB3551AF7677CABB7247FFED461F7A
88F8971180CA1A0D7C1608D1BEA397E35C7F91ACC5982763EFA34A171A47F392
65A5EA6F16C25D5FA4DC837AB6757769EF2650EC72E8D223D4E55C35805B7926
0E90985DA5E5B2F43DE15CA00885282382FB1854E2317ABB61D9F28207671D7F
E1298CE52AF94EDF33E6CC70BC0E96636EAAB676E7231B6B5C89ADD1C81D6890
8B09459A5B921077AA2122398B6D4A70232F0EF82F448559F8CB85DD9909A74A
D696BB4C43C4932B82A848D79FA178B893E3FADC538354465075D06BFC5421D1
3DE1409C06048F20F8FC5A432C30E207BCB19562BD225A48FBB4FF1F69836932
2B6309C490E11DEA2126F3A9076269B99888609B62B7CBA5C6A71C3B3DC829F1
D03D211175AB982226616B19C51800E12BF51B9B176926F360586A5C26C99195
A6646B1336F0B80CEBA1C8F911AEDE793A435F04B0A8BFEE7C64ED5326EEA491
81D8B7A384A09170D9DE5F61E1FFA0ACDE9C15312CC7D54C426D3E520704A5B0
FD809F2C02709DE5C739F67B93BE909C4403FE3258790FF1B3FF67F4C958C47F
4A0CF91F7087EE721F64CA0E33B511878F1E0C83EA93CF219F339C39CF69081E
1EB8FE48F3E078103BDFCCD75D9E066031D4383B2202DB203886107AF158F4FA
FB9E8719D173F4FBA16DEE1DF371A889E06E4F7ADDABCDDDF5F92CB77F7843C0
D4BCC174D4FBD61DE7DDB8C5B7023749DFF3D8C391A5FDDF2318F6D505E8FA52
1F1AB0D970F22F8738FE52A7252C221F88F1846293F4F568F69A45B054F4F135
7F07BC9C4E894307828CEAC70309B0777EC79BA23405490E40C2C038A89DD848
4D4B114A84B06FEFB4C4B82001A8B4E7DF01CAE49DE944C25FE57D36A3C5CA07
7D8042C15732284FA8C066B5436D54BC8BDCF1F43B5F2C93E3DE4D211B78DC48
4B802016095DB3694DD0A6D87EE94E783D9B3A2F97C83025DD7225A34118652C
11440F024431328D961B72BF5435880D10FA0F08607477B471844EDDFBE24126
D4B28B932406BA5D3E400D4BAD47CAD5EE287FF010AF55A4B864B822E4BAA34B
57AFAA7CE31278DD472D9F6EF7A841D89700FA1C0652BE2C86DD8CAA9E18C093
BDD727BE5CA54B9CCF4829B721358F3572C613CCC6B7436CB4445C100492702C
ED2DDE26F6A94321C8CEA614A5A206295152CE0A04DF64A83832242A353515B5
B347774F32B8B6C033ADC43CDDD07FABE92C29B5F50028523C734F57DBDF6573
1F1F3FE825D684C53723CEDC5E42A4D17F35791CD367DFB43C365661954DF160
077B16CB4AFC85B4C391418EC9A3159D590663C03DB348ABE792DB5E7DB73311
A007ACCBBEC9EF0221B8690A03412DBCBC3FEEAE3DC364060DB590DE107E8B91
8D946E250F561E5E394ACA6EAD2890CD44B966C3DB5DEBD271270A478AED9640
392137548DA359B01D2CA3146C19FA9B1B6B2661D80704753E7B5355A1AB9D34
E4295AF83BA1604D89E7D7C3A2511C0DDEB1E7990C44350085E0428AAAC1CAE0
8123E5A6FD958CF50755026BCD278CA322575D75103851939F8F9C31AD6C8BB8
9033481E0B0BF46B0980D70618A821BAD346F8019AB18BB348FF03C7D9738E03
D9B55E3A97C9755D0577120E53607E40461D57420B18FCA379B50F9BBE8C4CB6
CC262C99B208552A30E99AB8BCE9445E8B91CE45D602FE7695397238E618A035
611B01586F7BAEB6D661DD37F60B3BE58690470EA32C6D6B920074DBE1A21B2E
8E6967E5882CADDC1C100AE367612E94BBF8115FEA033721E76C0F42C87CFA93
56ADAED6A87D68036A27863EA3C8F2F91F0E6018AEC4E1E216930BA68FD7A7BD
47ED278FE4CC79AE4343D1FD6AAF200F4D8D8A95F6C8B60E1D92473233D0437A
C2C257C31BEF8000474A9DCD6963C24839880E0C5A09BA38A0C320169BB98FD2
3AE9AEBBE0D0D3F6724561ACB8D1BB8CC8938E39BD11ADCAB2EA569D3FDBFDEE
3FC2162FB111DC4975DC41CE0DC42FD6D4F0B4ABBF4614BBB181B06F7786B762
9CE3AF818F63AD429AF6976430C1539275A5FFB5ACE47EA41132C9B890957841
4D8DA21FA3AEB4AFA2DE7C240A587F66DBDA32D5E8EAF654E12C2E333311F4DD
FCC66266D278DCD15B4C783C1A33DBB537E0E98289757D3FCECA3404EDE621A8
5F81C42418F86A00F9E86AD205584B8F762EC507A3BA71D96F18FC65FC73BC48
4C694A20BC58256AD59910E1B9D0959793EC2AE0FDEB52BB38FD021691AB1171
44FFE2B54415954F79EC983D8DF840AAD03CEFA59153C4D7C426F0D3BF38E4E4
76DA4B7C3AD559C59C9FC0E6CEEBF7774FB05107D8EE462228AA256406E2679B
339EBE55411D9D0784D058C1C336B45F1FFA595AA731ADC5E20D30F30CF0625D
CA254C16904F77118C4CD57D750D3891D7D34474031BD0616E5E72C69A89566C
3784EB9743A67EB427D9FB3642D73B6CB1BC89A1F820A14B81A9BE830F8BFFA8
5A90D100D30BDC6EB151B79750BE4CDE26E86C8C5FE7B7A904101EB0D7BEE3F3
024F2B2E82ECB920FE4166D3635276580366C56D998F9DDE9AA52BAC4DF8647B
E25173D9C0204EE6BB408D004F25CA8ED6D3A94A35ED5CC53EE38F810C494CDE
233ED8AC7E692A9D2D4AEE3AAB63B382FDD2568A537E7296E0EE3EE6FC071246
FE69E6337177422452317D2F2DDB529DFEA26DBC5AA6860F927EAA1BC80BC534
E9DFE3D3E2FB855CA9791D94948AB80F420209A2ED5CD09AF7338297F6D75995
10703A9409DD9E110264CA89B9DC24300B8681F8E8743D4F8AC8FA8F813F19D6
DC8A2A3111096E3959E8BCAF1566A930F723CC6B78B9F19496083579D7D00BC2
51BC1A085DAD705110D10EF3331B5A55B22770FABB0621B7DDBEE91DA9EF7AAA
B707C04F519D4DAAE34B4E6D045AFEA0C33F5571CB245F94152A9A489FB0D00E
DDD6BE2EAC235BEDEE368CA8B609A0522D5180F673BD5C40C79A86D8858830DD
50D4A0FF28CBF3E55CCD87FB1B2930043D6D984D21E08349B8BE1F2C07632B51
917D4211BDAAC67D438574308F2390DBB530BDB317A6BD2A64F60BB9583C74B0
63F29B16229EF710C553E771D788939D71879BC52190A4B251513C31F1334CD8
470803AEAA40B09E425027DE9830B0BFA47227C841779D4A49000A24C52D0F65
B1EA39D898CBA69F383596831782F16EB07CDED7CAA2EEE7BBFC0BF5F3A32AD1
365A5986EE331D2324A1F877F1B45D9AA70DDAFCC93367F1C389CD51E7B2BCEC
765248C2F863BB5A3492B53929BAA7D6002720AF0089F623639FD3511FD8D2BB
FFB23158DBEA210651C80542242FEA29BB618F6EAE9171AE119EF37404C17535
023E73FD32A1EF0C659551A5249DBE70F640BEB821AD49E34383E63C474FB5CE
9AD8F740579BEE2F1E3CE6C907B94D63283D7AFCA6D3D426E0013B7D984B3A18
E675655F4CAAC54F1F933DE26ECACD9F6920EAA4FA8B0D525E849ED9B892BCEC
E99A93F1ECA6292F1188F0CE6207F98A10FFC9E963BDF163A9D024E74127C164
F5E0F5B8D6AB6E0FE199922715EB2E0D61CE6DABE074636178E1763F6EACEB07
130196BB6BF85E83FA03155DBAE6F1236FEB2E1F994D64A8C841DFEA95BE9309
EF0773C9478D68C2610E2D1177AA7469F520195043A04BE41F18B2CD19AAC871
DF4CCABC332ED1A31B9136BEFBB6F17E8DE96E921502FB19F0C21F0A4A3BFBBD
4F752577D779DA1F0DE6FC844236D852084AC4FF9098F9A2B327CC05B2FAFAC7
F968006B70F885BB5946C35C4B54AF7D97EA987A53BD80D3021A5C66D7ED9E2E
D9061AE6B113B506864B91CC6700F7BC130A90EC81C91D50F6828CD7A5B92431
88EBA9C7A3EA815E62615AD550528F0D3340465C49BDAF09523DE5F6C2250FBD
151440F4C5CD454FC67C6D401E76B22E7A1E745CB4426C0B58421A76F7F4C0C7
733A680C0702AF3247216D8F96EBD8D1EC18D48FEB29E968BD2A2305A0FC41A2
67943125A76D7886A4E6E5F674F6AAF4616F4CD48A5197F98F35341EA3A752FB
F80C009DA8B4082E0DC86B0A23689C1E26163F674AA342E00623EE7FFD2FB090
0BAEB2AA27813C1EC2319A6B3AA2D5AAECAF6CC7B61BC71CB86A66D2262E4D10
F3FF50620AB8D76EB2C5870276265C795C55AE4E6C07855A9BC2FBF17AB45B5D
1AB1E9F77B0F4A5ADA6AAC4AF5B21906B6E84C5A2EED2361F11621E0685107E8
F6B2C78F8C9B34FD5DE128DA6D9B428EC87CBB3C562FFEF9B2331C9C08200FF5
960F53D331A0F830B88E3F6C701E97A57C400F062B4DA1D0E7D976F4F9699645
6B524F7A3D96F9A563D3A8742EC8B15FECBDA4BB89EDFAE2D6A52C31C01B3AD7
2C2C5A2F55C3026C2694DBBAF882F805D2692FEA102F49870AA17BFD2A37662C
D21D7413F1A2EDC560E9E08C93CD70DF9A0872DA656DCD8E3DB42A0E71DDA696
7C376044B405BBF6A0337992FCBE8BF79CB7E136239DADB1458AC7C95DC85260
19D9A7C74307C7AE8C73B1EE8F9E9971DFC762C4200E27EFFF34847AE7E64892
0DF308FF9BF3FC97F6E281CFAB40DBAB63E682AA2BE4FA45332D3FFFD6821286
3A36626BC908E0F25840A3ED6C83202A9E9D993AEC3C46B4FCEB96E42632C2E6
5E3B18FAEE22473730CE348FEA1E07EB32086B333CAC3936CB05C1AACF144F75
A7F70AA574B92580179338506F148EE7CACCAEDBA16A992EF8C267809372BC3C
0F34CA80F1A9370585F4313304C805E1F827AFD2633B5F7AB0B08BBB1A8E7B15
42006F392255C4FD790A1D64DC17E1892C0133DC0829C1CD3094813E6609CF29
9099E3EC5FD12B99AD551D6A0BEF6AA60862898A710ABE4CC71193EBA16735EC
CF976C43B254D2EC6E127E4E44512CD3BA3BFAD518A2F041B9D12C9AC3EAAD65
2E6D5E754B9ADE46841E52DF90C3F0D110AF2F40784356690DDB982F55FEEFFC
F946C6DADBC256E5D22253EC0B88C4FEB205770A7B3C751759BA48E9577CF279
5EC4B6E52A7491F8DE641E4DA4A575AEB7D228D8EE244B364E358286E5773CC3
B3C5B8ABAE3AEC0FE7B33FD600BD02DE0760AF38CE65B9317A1E367DDBB2F07D
798235C3904AC6A536BDF4DC283DB72AD0AEDBD546BA136F56B20D835FAA5B81
C44D642E32B8182F21815BB6CE13ECD3DAEA01CB2604037FCB188A06D85305F4
994827DD1017EEEE54B481F066D3A50E789DBA81CB4DDE7D4A970A3162D903ED
E2880B70E602EDDDDD7AE2A28CF1A20F7B73911F39D6E41D46CC87929418AB68
4A92B4187DBA74B626F82379048B1241CD3F02EA2E6627C292001D28A40628F8
9D0C92DE627833ED6982D918C794D4BD78C6F05212E127632723E22295F88027
568E1C088F279AFE031CE20930C273EA592B9E29E89BB44C19F6098ABCDB06E2
D56FD40D8CEFA05DBE866ED9AA11865B538D351174CA94DA51B8108E5BAAE7CD
0A10327E472F8E76C5D0D56552050C909E925573E6F76083AA9BC41826C942C8
41D1E97FCAAF1A9A342BE58F86B39BA9AAE341296170B648CC5C9EC0288EF48D
EE48D22E71F0F57E906AE3F15F062CA4814BEFA3FBF3DC7BE5223B804496666A
DAA058B7E793CA1DC9F6A90608933FA2FE2FDCBC9666AC704D14CB04FEAFA57A
E710377A4251865D9E48091E18FBE6E0DF5D5EA61CB6867604A86663BA42B949
1E51CE03F4FA18D25CF4CB1D21DE32E579DD81A6CEDCECFD566DD13A0635A298
8F74C13F38BA26ED7D36C34AC14C42BDAA3AF9F210793730C8E5197204416FD5
342DB3EFE5D980852521B1F50E79B62C4F6DE12998A6A5B49B42DEAD13CF90BD
5CC934CFAFE6F221DED0D9A64324E19FABCDAB75B5AC9CDD2F0925A0A651920F
48701D6092ABBD856906F4F0C71892A3BD971AC9AD345A4E00C5190871F5B0CB
61DB05374C2AADAA24486F9A831BA1179B2EA36029C7B0F899FEF3A2EAA4A823
554E47293FE9A250E723A7791BEEEF4E78760F8A25C60981E6372E49D71614BB
4E6B4ACAEED38C8B1BBC8666F4AB0353218B1EF2EF6FA59CD2E06372482BD913
736E5EED8C9C455107A2D2C9472558304BF5FC0B6D5703402E7D79C6EBA90AE3
391FA534A27DABEAC83CF88F4569F10675B9C43FBE7FE5588B4A440C816ED040
C9568CC2EFE4A607C3EB4A6C06AD5EED025623EB7D6A90860842964426D9E506
537B3F8B42B76A82BF37C3726993CE2E3BB3F4CDEBAC6A13D24C029B99B26656
486721814B59840243587FEECAD354A03339011E285ED697D69314BF897C98CD
E5B9CAE03A7B340C0EC5A04E5C5434D732318AE791EDC71A47F2AB39A609B773
7391555A8A575E542EDEC2D027465D5064A6DC3B298303C81B3345749C0F3396
4ADA7BAE28FBCBF9EDFEB83B984D1192D8D1911AE6E70ECD4852364806807AEB
A0268FAF206335E91D6E48103907663E4E775357CE8A4752ED5B3B19123433BB
6AD1272A48DA1C31C25EBC223CF3B6C0A30E1DC664D0B5DA5324939597909710
B5BFBE8D380ABE4CDD74110BD6BA8C25ECCF834A6AB203E65CC1462B7C3E811E
4FBF589BFD5C15D961F3455ABA0EF103567F98FBA5BAB5CCB5C196731EF7E1D8
7C7899D5907BF8DB416935BF9650DA6134EAD8FE17904504C2F31CE2DB78A681
AE585F772DF2B2D9E3228F780BB59F6484A89AA50645376F5CEFFBA4025C7899
4AB542AE57AEE11AB1654D56EAC8F9DEA93F60D8B8742B85666F2A639E1FD66B
020C2CBC5CF51F32E0F85CF880E023C82215284C372A8527186EAAC064AA1A5B
3C7366D84D8911F60949C075630D5E29912CD7E6362E528BF986ED77B3191FF2
B7FC8BF3AE8B6F5E9C82246C7F9D606ADA213D0ADF020BC4EF5A869DE583309A
303CEBD9E51E2AE7948C26408408F057DEF4526FBEEE7FBD26C4BF2753384BC8
111436058FC9A75D9A506B08D31C10426CB56C0E793DADEE301792A7EF4CE104
7C153C87C51A4895DA49661EDD60013B3B394283857632A3737C532428036E9D
3068A6431ED97A4122FC32E50F7440F4CB956DCBB3D53B279A093CEA32F30D78
A49ADA5A94966ACE0CADD6C39919DF96F79D80F76ACAE4FD559C23CAC5EE0508
A00CA3F0041C9339D857ED5F266E0949127B765B44EDD74E4AA618D75B33070E
13A48BF6B27257A948E2A07DDD622086AA49BF5E64B4F25EA15E67C07A4AAA1A
A905503D96BAB7D73449657C9499DD8ACF04177D2C3C6694EE85DED947A4E914
0599620938DA78A869D8BD0CF772596D376ECD2D38C052AB67B24A6B7E0CCA5A
2058E1883911F8DC678BF43D83C81E851EC6A4FDB5449510E47938AFF9491A9F
C027B2BE359057CA221447A44807B5D89D0FE464663AF7A14D572A7CBF1F5FAF
474A0F212719A259549EF7BD5AEFFA0DF32E0CC507E56DF287386DB11E7D2809
8837404CBB22FBD1B23BBAE6D1DCB67230EFF3011D27BF3429C22023AD303179
7A21710F98B93B2507C0C9C2D6D6A06BA8180E14FB398C7FD1D9E4FE27E2E714
0B51FDD34DA4FB711FD4AE5FA1EF9DAD670AD5978D430EAC3860AE27E78DFA8B
C885FAE09A9446DFDF923961AE5C061625F4C5740478F55C4D6DA862B50F9099
7989CE492D884B5923F3924DADB7DEA139D539F1465D50C5D1DF71C76BD272EB
74AFC3266A10FED5AF00F4F2FDC2A90FF6AB0B7082627E25E329840D68F0ADF4
3FAE666EA92F348B2012E62FEB500C2C5AF1427197EE6637F539123745CA8975
3034590D81873D531DF4FB838434FC4B7205820504721F1FB99B83BF35C8C3C0
F03DD8E221098CBC3E05C4700ED9C17F15D490A70F55BE1A6C135C1123CB216D
707E5B283C822A47B5069F7527ECFB9E79DF4FFBF19FD75BDAC6AEF534C45875
95D6A94E70F6DEA969386F22CB5AB9EDA6757BBFABA93EFAB83803A78F22D80E
DA1C2291478C70016EEACAFAE4B8CDF5BD7760399F1F08F98DAA596C05FE2AFA
B5E9F03DCF912D60BA2001A2D092A1FCB05C2E55A016EA9291D93253757C38CC
BE4B84B943A2E2A132F5662F97BDC23F7979F802D54822CCEF7FB4FFB2DC9A68
B2966D7BB767D71155AD4338BE2FD18655E089A002D8838923342D8B23AED265
3831C04D871C33A60B1C07E24031CD6DA2847F612D322226BABC244A3AAF65B2
39CE7A348AE75CC40C4FD82996F6AEFB0CB77E1A61D6A0273D3EBB41211C603B
834BB03CF4C025EA6E666E1555A116AF27F116B667887F864FE14B9986B90BE6
C4280377C13023BB54E07D94B187D72A93518C1C686CAD65DDE0CF32782BC551
86C6E84C2E1CEFD0BD71260782BEF6721D2D9D186D57B74D8268BEDED04246B2
492652DDD3D3E40A1D52C9221A8534A1618604CD2A317F0B1BB0722BBC48C173
F59A4DAFB2FEAADC8A7610881710D7105C782719CC4CB393A1599711963BB424
9E9D9B67E8F992802AC485540579B94240AFA4C54F2F0FFA4491E5C0FFAD6B3B
1C10A0C63DA1EC3AC2D43E99D94DD3A20775A3F971147F03E4C46915B00329A5
09EFD1DCEE3B7BA0BCF7739D813518451BBF41F9D9F03F14667267A5D878901E
F29C8C1E3662B336F249CA6F816E51029EE5315DC641D6051E47EBE712EFC665
D97DC2E35A7454AB8BB827F30EABDF8E4AF75FC848456161BC77B245ABE164BC
CEA1DD5D81A295CDEA550A848F335B39010F1AC78C286B526F518231408EAEF5
070BB95F0EF50227474C64239BF65B841617AD96D9D7F89ED64975DC69CBE004
EAFE4889EE5F338D3C4885368281B3C95CCE251B7A369615ACDAAF2CF94A6DFE
0713DB9B8CBDC0D146C2CD2DEAF21AC7E214FC46936F3F2E2072523E9772E369
1CC5D761FBD95ECBC414640C733DCB82B39EA37525A3A74CC257C16DE3AC1F8D
85467B5146B72FD47EC0C3BB0681905EE7B82BBAABDD0D92BB5351D3A0B3071E
8662A2EBFB57C5A9F564C6E8073325CF6C091DEE5EFECC8EA6573AB5B56C62C1
C0FCE171B49E4AE5D0025EAB79C918F9EE5D5BAE73131662CFFF5E427A5F5DBB
56FE1FCD1B644DBDA5AFF5B06734DFD7E18BFAE98A1C243F368F27311CBD54F6
F3BA326F6EAEF1B707BD8E2730C55845A136F03E39BD49697D30B8BCE8B9341D
2DAA72F7FDE403A099716C2DEA7403DE02C363DE731EDEA79F38C999560B83C4
3F88315F0545E31B8C3385A140C19312CEB9E390420D8EEF6ECA04DF85390E26
1B43A555BA97B9FD048F64B5D774B8A235D811FA7F846BF8CBCC06AA85338438
CA6807D768CFFAB4CB966B5DD8436D1ABDC3EBF68495938479CE28119F23A737
F14760FC23ACF398BA05E4A26667C09BF321D3C6E1B19B20AC9A3E1BA1D49D68
593B5CC753581597B69E752603992965170D29458468614B2773BA052B475D09
EB09469D2BB86F7BC232B8460B689B570FFE82B8EAD68AC55C6313424B8CF118
9E3DC9C11480D42B70DDFDCE42BE4F1AE4E650251597E9902FC4305498914933
2FD2B7545A075283186FF2E659239783C548DA88C6902021871C2B71EABAC5FA
0F0224BB155265E2EA7402BF17ECD71219A16E5A1B1608B248416F609C27A914
7FA843862574D48B8B64014E08CA10C25035383201CDE43E7D913B7CBE1AE481
9EA714188BF517C6C8B730247D8934141C5D8151C53D22399DE0F79C3543E359
2283C6770B4087ED9EB76ABFB56203EE28E722B7CB9131013B77B216FE145E5E
49AF9C362DF1A4AE83EF2E5BD3598EC52860D59281AB59ED1AD7246C41C102F7
D98FC2506C19C2F6D836431CF1E58893C5886047596F04AE52B7E4FBEE816C68
59C62261131FD16E4059FF13B581B112889DD3B16E3CDB6D0D0E92059B0FAE44
8F6AB63F64FBE2478830771C2E89495561EDCEB9C732D4A7910EAB7E9A77A167
1AA5713688CDB4211AD140E52239FDDF5CD68DF5A2AA0CE4AACAD1C2D3424E9C
D58A179A2BB40AC54D2E45D200FBFBDC20C8D6E6B127A3809FF2D5693C2E7A45
17FE0F16ACAC8510F9A1CAD2BC6E8128C5C8465A860CBE81EA4244B4986AC960
6A5D44E3BFD624B78D1E1F7CA83D3032D67BCAA5DF6E199251AF856D87606566
E204D947193CA9B09A31092942717D7535A3D8279178B99FD3875BCED31F207E
1DB47B8008FA23075B9DCC920A5FC0D6206DF1B2B7701C20E811C7F0ACBD8B5A
05FD0E43A207F5FFA4470C68A59CE17439E0110A2C0B8421B2F57E7C59C91592
7A455F2EE0482979985511967B2ED0D075C77B57701608B647B4E462D10FBD7A
664AB5EEFC7B820575D35624FAA504892ABBFBDBCA7DF1491BE959F1418F5470
82D1750223115919DE7359990C8285E8B30A95FE7E65D68DF8951796A647297B
A925F2D713FD0563BE0EB2B36DD94D1FAB63AB6E03F3395FA06F66D2F6C2A3A0
DC334616335E5AF1AE9BA0C54561F00F9E298B3BB482BBA0365633ED40BE32D1
4FDF7D794E0557D90085D8AFC0EC6F43B313FD8B3F70D0597D217601D85E1950
B7C532AD1CD0BBCED74EB5CDA48A229319BBEB50C4068A1DDD3FB081319CCFC4
89CCB0D27412A0A690BEBEEB3ED8F7DC2D8CC6A1FD45E073C4C0CDE8BDD8A29A
4913F440E3EBB41BC6D5E3D3027544519CECF80BEC71602E0E5B7E33A8466E4A
855CBD2A9A3B9595A1FECAC1191EEE535662D92B07F4EBA18FB4CB93B2B8E99F
06F87D1352E58958D2F64CBA7D25DD0C4680300CDC69EB0AFCE824D6275ABBA8
F5B93733B9276AF8181C0EDE4B8C30E1F06EC82B82F60534847BA9496444A565
025C551AB599C3EA4A5B43EFD388D2DAB89BB94C4AA68C4F8F52F0A87021F773
E844F7E60E12E4EFF233C532B97A00994F543BFDBC8567FBE4A28EAFA97A5E29
22CFD4358210F9176E156509A555171B4DB2B2F16B0F2A498B4B8377F6A19D5F
37AF5096CE711EFEBE674C1CDAD49D6F12246B7A514051E6C273C5B044052117
FE7D7901B923B7CAB5F7FC1766F3FB6B37479D9917E1CD590D0A5B9B4BEE1ACD
B86500AE72576A26FACE3A2E72ECA8950E0906CF155F6226D25D4B841BBDFF67
A1828EF5825B23E8DC250FEA26AAA18C12EBEB518B524263D7CA5B607BA2BE87
050F8AE8EA728056655F9D9DA1ADBADF3F800A47BC4CC6B35EE6EEB1428D26EE
AD4D6AF20C77CE8AA680463BCC001CB36929605008F4EBF2D95DDB45708D7EF3
35D806C61FCB681942BDA68F6859DBAF68A84165B57C3ED73B49F038447B7ED3
CFD4ECEA313A8F8322C68D06510D791BEEDDAD95F628C2657700621C8CD27A9E
83CA3F270BFD297FA2770CF9A96365BAA62E216DE6100906191BD84EACA3B6BB
4C33CE5F56545BC91360CD147A79D192C543385A91D4B7CAD86934851F6B3CD1
4DFE2751A6B5AF4673BD1D5812330D6A304B87FA0AF72A54105E7A572DF25435
5335500897F21DC5F2EFE22A0BEFE38B588C644CF5F52D4F171AC9699F845132
6DE46CC1E57DD4B2A8821A8506BEF79EC52453C332B88DDEA6D3A49A83886DB2
60065E423B426EFCAEBAA4ED0BDB25651C9E60B3A5D08B4068F1E152127AD8B8
E2733CB121E2E5AACC0CA21175760B8E2C89F49921AA3596519AD408EDE3C50A
6A2D4F140D7EE9A367063E907B521FE05A4AF2145FA0FC5673FBD1F0E09303F8
F6B662E0380789E848AD295B7FDFC54DC6939A8FCE4E68B91E53A53AEABAD4CD
2EEF04BA15E3E5D0EE470B9811A0F6C59D49A796FBBEB694E813C37540B9A2CD
AC62DC739B919968B1D02976D700F1D4CAD5C1319B772F7BD8C9170D727A0C11
9FC35E435A69079A46C84B3CF54BAAB62CA7DCBC521F183EB59FD003AE5E0B17
5EA87DD3836D16105DD6564B0C2F3B595C9F8B8A3106AC80DB85CE6633CB895D
72B3A9D95383171187CD0E33C8CD308C436B608C6A2006EA99B3174459E7BF82
AD59FD366E775F2BDC1BA7D98D00CEBF2730D812FDDDD016B803C38B8923848E
3EAC4A5C3CC6895C0717E2271C6A3F722B2F6C2CCDFAF5A58F097CC13CA9BC69
5F782ADBE50737CE43B15C463FD375546FCB5442A20674F5250D77C778405F3A
89306018EA72F20358E40044BA7B82BEACCD1049EE3C431768458A1ABAAA7CE8
CAA45A9CF32034CD2106773B4129C2B3B76491EFB210B2AD7503D23492E7E980
B2C43426ACEF4483E0694B8D49201A31572A3411D94F83A0C3E76F57A37B4858
5FB0D0EB6006F869E42FC542FAAF9D21BFB3507B5B5DD834C67160287FDC4360
8E195E9E7AB8056AC50CDCC67FDA475E13240445D46726A6D4518ACB642D11B8
39AC94252668AEA04F23329A968E3863DD58A131C87FF582C8ACF9BF5602534B
E942FF32DF2482332F68841D7ED60D954F44AB46FF87C7C9FC68AAC0AAB0B9BC
ACA4693DF0370A98042E527BD65EC1E77D32A6133B5355B0E26711658E363693
3A60C554B80B5A7C83CB3B55AD74EEDEF9323418456C69BA9FB90C044713645E
5F356032FE4ADAED9479CF2EAB4B5FF2D869B2B6F274FBD49505395BC6E9DC47
7F6807DD209828B487303445FA81D96085CF2D85B1CE6F12840B521DA3259676
3DB129465E8E9F27024CEC47C494C92CB2C82CFF4F924366E1343DA01E1383BA
6D010A596CBDCF5A96FA3215DF239A97FE30F301D3BEEAB6F9716275EB86A05E
8F774CBE7205C1E12F9ABF4E0DDC231A02CDD4EC14DE67DCD7E94A9D7B8B274B
84BB526F68F932A96A11C32D2AE1AAF7D58F556DF0D1A7CE868413010CC793BB
A4E37F67D083DB6AE111FFA48845C0A7FF2E0CC929CDF9447D83A66042609DE3
99511AB71ECB5F7D24E0E3B898FF25B39514DA6935D2A47222C303EF22F1629B
FE59435C354E61498ECF9480EC050782EF7A3A825B7D209A246DA1A2601635E7
396185CFF7F3A624E2167F7BDD45A9C222FBC9ABD8D3F08C976265943345AB7B
DA1DC584BF3F662B3E1C1D25A0626237FAC6D349AC9E5CF2A8148DDD9C526736
B990180F6D8A8DCDDD2FD96D9E404038CB57A801878980B52AFEED41DFC3AF77
098424004666BA8435FE10EC622EBE16E279A9743ACB24EF5B77E0CA5AC1E6F1
3A8BA831CCF52C741A90D0D0B8968CA4DF727B3F95D364C838B422461B183CFE
F1618EDF8B9BB56654411A74A23840473DFBA7A19FB5ABF69F826ECCFBC849C7
4259C8FFEC4ADC96CAED27AE5443B5B8E77B8D164B2F15290E5272B2C64B1411
10F14B3AD58805DC0020DA959EF524B8BE47F16C0C85D2F21FAE3978F76AF912
A7C41A5ED6AB07863F84526BE7A0B90629040B2BB97622C5C5D8B3E64238578C
1C32D7CC4ABF6976AA4D80E4FB2C64C79C4E7B77F70EC13075BF1F5FAF474A0F
212719A259549EF7BD5AEFFA0CCB785A493FFFC27F6AA52F79225868783A5054
6B12DB3D0EF33F6BF4DB1217F996539D799C1F2BA294679C87A1670DFF9E7FC2
A676500E1947C37951947D838F69FB1178FE4A63F8243ADF0C07C6C16AD3E33C
17669D89F61837A1587225516DCB203D47649131E30E14C7CD3698654FFFE488
E344565B4225F0C7EADFE2B7D651B09FA49D9DA1711FB1C840B9F34A31386F07
D66ABC40B5D16832C0AB3F113FCCCA9588C7FB72643EAB8F6D8AEAD1D55841A3
5E4666DB96431B5A9258C8472C4AF837EA7C0A19B96B48ACA8967586FC51358F
47B56661DF84FCD8A73BA5C0D4990CC5130EC9F6DE383C674C24816DAE80E787
7B564646B0910BA9E173FD2222DDED8C4BB4813D9B77837756FA99164500A4FF
96C938775DDAFF6F38DA8219F9706C57F816E6F8A47E0D23A736BB793EE57ABA
CA205DA85463B611BE8D5A95148AF14422CB0EFE1857807BFA0B995A03B3C3C3
C9BB060ECAB6900474BD6B28F43C45BE77DE4CE81611EF0489329A0626D04155
B13472B51A20A82BFBB1AE939188EC6821B09BD04397403F5C8E8344B0970A79
1FB113636B89DFBBB4C8E82E601B59B66F44DE3FAA2DD6B5F2392F12E2508F95
949634071E3405B3E415E94B05F0F240C9426E90F57925E6B90462A69B5B7B8D
3A96481DEA2FC2C19267AD441581D704098FD6685C86770259AD299D0F188965
1AF10E9592999FC01E54A639DBED524C1595CFBA6D7B35526797A8A224A37735
552E16CAA80B7C2B569A6E07AB538A7CE0C06AE18F8C86EE36EA4E49E23FF845
CF525D7183F10CAC841F7506A5C86520C03FD5276C6CD7F3B16D23257DECF097
4678EA515967357E843AA41FD2A7DC0244ABB09915FCE4DA65A804A75602ADFF
175C1ED1EAADEC439EE105C467F05AD1018AE090FDD8F48B86B8080EF1543351
B08A09704D4C184B53D54E8B18DDA3B40B97915100352778D3D3611E8FD9B3E1
6A98F1E92AC4A52A846A49F1A7D264A22CAC067C04EC5A0C83CB1E8577E6A965
52ED07652914BF0CF906F449B477BE528C3667F06EC5479B0824B87C47E7CBB3
E4679B46C25E44BE0A77A52F49B360BDC5FD874B4CFD39B3350F8194910480F0
F209BB65AAE476588E97213C5D551C1BDE7D5E9A26CC8D7CCE79CA02A223ACA0
D23255DF3B2247144F40839FF356FD990D7DB2172E72CF4527ADF4CB0646C18A
F378060B81122B0D79595680FE9BC8833B330F1AAA69E59F399CB28CEBF1B460
D763D1F533A71FFE65DCCA47FBB31392FE4F5F94724C1B42150E7ABE5C9E7302
EBE72B7927487B8A16E97D3649197998FAD0258D018F94E082E1BF47A7193DDB
0209BF079C6667667E1D4C76AF0CEA8A936F9CF329B2F4350B00166763AD649C
32D00F99B504DD1602FBCC202CC80460901DE32638D350F86FA328363D1B4FE2
36DDDD5D327046D45116533BAE1B750318362BF85D9A4FED05502577128A902F
9850B1E071372B6BCF391E58BF827DCBDC8212B9104CAA97C01188ABA1F0AC09
4030E2F0216F900206096AAF2341BB2A5F77E281FFD66661334A29182A58EA65
387811286872DD7BF8E7728FC2ED1A63C79C313653AEB0A8237DA107A5F2B91D
758C5B22040045B1764FDCC98DF5AEBF9552D84E06D15484C1111D1237AA2299
6BAB530188B9E487FE12398D1FA9D5FF8C3D0E507874828C83000FA94EE70F44
CD3A74129B0234746581E87C4CCC53BBB71BD0DC2855C0DE3A33334D9FBFC77D
9D9F4F3464B04106F901E1E25358B0B7C231D391C2AC5837B6D2824C281BF246
52E0F3496622D7DEF86CE6207F96A37886285E03AFC10B4A723BD930F7F724A3
05C4DB87E4C98C393A04FAEACC6E8A01F9611F817458A30D1624794A013B1023
8086ED3EE39A48B2DAA8CE906F4C9AA950C3C57A0C6674781F37351993C306EB
8ED92C1DA0EC213CF84CEE84F0D08DFFDA0DF99F5C2052CCB0AF8D84EB546200
A9A33F1C12A39275BF8B70D8F754148B0455F2C4A8A9FA1E09AE6AF9642EE55B
7617BF76CABBBF03C6D46D9479B704E121AF92D8BEEDBB4FE63DAF4A67032992
43CFA3BBF7C534EA3A8818F28DB0E3018F8AD52849E2016B5BFAE92437884537
442079FB5441CB90270030AD80DF3FD0E01148BBA4A9F8EE9C88E07B84CDA1E8
349123EFE3513DA611566BB7CA4700C74D8FA281A82F5C2A253B48731432416E
2316A739A270F412AA944F8D1AA3E4C219759D490B433ABC4C497F629B1BAACC
1849011C0D34075214ACA375A2B4DA0E9109D8412B5959DD545C4F298CFFE63B
F2421073587F14E73AB76C52F17C49E2CFA3A9BE3738FD8DB884A5848DD02B00
48B2FE8A410EAB247E9FD612C776D2495FB98F39A9AF5717857B9E6FC2CE56BA
57E5564B9A74594181BB8AD7FDB60B61A23C008535C1F3E7E85B81FCA96556C8
BDF95FBBC8AFCC946BF365804181E5683DDA2931F479BEAAB994C606F98BD70A
06B8416901DB0CF0B7760E2579D07590CC014D03249D90DFFDA68BD394D73F69
73F0D609FFEFFE5466363B820D857B334FF763B032AE9FBFA82F31C2271E49D5
20DE5ECD76E7457EA3FD906D1B4C1E655FE0774333CC9EDD574286CE9C9784EC
840483067D8EEC0619501A16E69DD280BF96C1D8E7EAE60D6A003E0632CE1CB1
A6512A9E9A2BF78FC46CFB22F1F938B78949B3FE0E897C25802ED642C7EA53BD
F334E57D83B09BE571E5D3633097D9D4775AB020E80D79473424F453282429C3
4B06C8609AACFC3C00DD4CD4B8042339F3E0BE363E5BE5ACA6759CF0E8DE0B9D
A81ED1DAAAA77C1E0CAC97AAE4516D146A9454D01451E7C4F560DB3213E12FFA
86C5B86C7A662A30F1DAA79BF760DDAD92B5F3896887F0DB0C456874D80ABE20
DB301FD7DF26B4ADB671F4085C6C407B9BE32B2B781312D14C0A519D6CECCF52
FAD10FE979894E91892DDDCAA9B6E93A0D73B6E159DE7FF074D744979E768A87
B9286157B4AF5E637CFF01A539EC3CB988D6BD50B55FD0FC6F1DDB352A164AEC
B79C0440C3F19A1486FDA25609A96FE16FD2E74F4E8972DF419022F6B4D76977
F0CAF3E97CB4F4F353A464EBEB13A26A660F9098CA868ABB2CE5B2C1451B86B1
F047EC1BE18DAC85C428ED15D7C08FB8F022AC04FA669B8321F0BCE1E9E6A05F
F1A377E3460E1ADD8D68048DBDF8077E4EDC78CEA595E2FDCAC2756E95C19E1F
6F075346C2F9E264A7CEE038124DDA29E682D13260ADC1815E8B2F90D0808FBE
EBBBC0FDE0340E322A67F86C9AA6714FC5689401B8147A96BC527B886842418E
61666FFE4F3149B7A6FB62FAA37AEEBE93704EA280E0F49C33718ACF6340E06B
0F1B3FB1EE89E9D49903C95781429560CA8898884EC3B4A7FE5DB5580B5E8EB8
DDA3F50B1973D727252E7171D45C481002D19BF700BB2F4CD5FB99618F5001DE
FEEC670606D1ACE94DC0926A4AA8F40C322B04AA4C0C7C47990F57467E3ED98E
C2546EC8C9140BFAB47BDD25DE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathSymbols10-Regular
%!PS-AdobeFont-1.0: LMMathSymbols10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathSymbols10-Regular known{/LMMathSymbols10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols10-Regular)readonly def
/FamilyName(LMMathSymbols10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathSymbols10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-29 -960 1116 775}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F033D677CF5973762278DEE78C7522D2
2503BDD4843BC7D22B723F8FFB9EAE1A365FD5A465501AFBF49D03BB5CAEB5C2
C00D92D7940CC5995D94BFA90687C972A362AABC211E7ECEE87EC66D7FAAC514
CD571128C64BA31B3D6D1EE29A580950C167D6F68D121D24E942C325DD83E3C9
176ADA5BB429335D8B64EE8DA6DD276C2E0F1AF529E27D9362EE6FBE6F34E3EF
730BE0C9856D232D02FF8BBE7B9C3903336801664B1F064896DCAAA4AA2E9F9B
6ADD0C342EE025775974A2A1698D16193E213A4C9AC3F2D5F4533E74EDD15794
F8F2456FD2DCD50796D5F9A7FD862FD9B5414B6C0E98718AEA2C06739FD91939
D22724207E144B6D7AE3031311717AB00AD53D3C9B7A5D0E6FE1D717422147DD
712D626F624F8BA5B347465B53327A9224FCBE2D659F188723A19E11C4E00D92
70B50D3D5444404A08421C1CD505780CD852A25840CEDBC9E1CCF5DDA749779E
7A1D39927CB9EA17271E1AFB2C1937891E8F4A2D1950D62D2B484F4005885762
96579F6935952724452D811B749AE61C6265711EF0024C6AB25EFE1E88FCF88A
A072958C75F616D971E4E8119833F4BEA9D81CC7B26F2DF718D3B6A703BD78F2
CB700660069EDE978BF7DD781EC63F092EB43D2DFCCF8479D6247D7A04ED87A8
95522498398D6921457D06D28F8CDDF821A2952FEFCCD910A8812C5A2E1CDA07
2D9A7DC6F3C396982DE5A1234195AF657F79C43D543DC31BE92BE270A2C52131
8376B9807473096F6791C855155887063B1B27DEE8771DE0FBF0A94DB173C46A
C53D51F08C783B2AE505B8A69335E25F98573BFAC64A02542D3B835ABC68EE4F
0A1436DD48E963348F6F5650666F6BFF72D385A5FB67448213B032991B4970C5
79925CEFA92DDED5BE33EEE8275EEE83829329E11E4EB1E2E16669B21C3D36F1
FCA9535233B0BB982F75ACF33109F8AE7ADE4954D0B1E1802008B39E90FD6AD3
2DFBD4E8C89A9FA5772BD7C4CEA7C55882CA53A2CF19DD079F8C03E298E58711
C4321BBF26F45460900900A22E31ACD5303F037AB6059E4288B2978A1DBFCBE6
32BE7DC85EE40632B247E37B279DD5500FADF52BDDCCB2405610D5032E3F9E75
51A49BDD4B30EFC3B43C4875D056EC205D4E844E1D39319341D0F40B15EFC6B8
101C4762D9E95B430C36BDE4DD07CF59E3280EEE234606234C278A7286BDD41A
C562AEDA5BC1B4A7975A24E261478CDA81F01E0CBB7EBEBF9876CFC52EE5362F
AE1C91D7E9C281194A84A9ECEFEA5023317F88FB64830E6060C19B47EB1707C8
9BE13A7F5B1FA2402A42FB5AE7E07BD27EFE69F71B8839A3D7F629EDD78C3073
D99DFE2D837EC3178708BC1B39E5C201F77F65511C19072D9CA7FAD975A6D71C
5443FB20CF288B1041C68A322971F6A0B8C2FA887BFD5F3B2C23FCEA71E4054D
332ECD422011A3968D9FCAC28875B34AB84451525E2C91A8525079B97D9FA6FE
5B7DA4A2638139FF78BD4F987724653A6EBA1F74494C45E1ED71B301CFD72DA3
18C8D431626AC1D618F7EF726DE3ACBBBC37DD4D0C8C49143401F37676BBDF7D
F107D0701F104B7452B2C7D408B8000DA422D3C9B3F98541C5E6704C90D2DEB6
1A59B82AC210725C300BA2FB19A603ECB41DC86E8ACD2DA44E31CF00A0FFECC8
A7D0D58259E53A4B20129777C73D98C6E2C5490AF71BB6460BAB6F52CDDCAA8E
682986531E20139F0361E6B72017992B344FB0A98604FDD7CC82352A5F5D47FA
3D0D524403EC5566D6D4B2E4F23ACAEFBA047E894E4BBCA47AEC2DDE68BC13A9
655CCE7A689EC0046544BF2723FF4B433358BED4328DB47A624C0296E36CBAC4
01F6089425D9E613414D794F611B6424AB1053105A7D7BE72801F871652C168A
9C137983071104BEC1B29CFB2FE0D3B01D5D350745EDF5C6EE6F804E789DDA75
EAB227A9D9173422A333C45C6436DB9C6ACBE309FBB3BAF6C01409650E70010C
2E00EF49B371BB12C5C94B5C5CAE62C1D10BEF7FE76C3FD9DA6398EBCA2D76F5
7247F01F55E470AA54A6D9AA262EE893C2D87453A7F73C891906F019A3543C97
20FC64B689F6C34C9DA0D476DCCC161D99D12364B1520CF8437E9B953BB11936
D7E0E8E23EEB319B7CB8862F7A801C7AFACD58792EEF4CFDA8DBD4722BF6F2FF
1B82F9D4EC79ADDF7FC21D7643393741FE4CCDCDF1C734E79A5BABB51EB3CC02
D102DD639D2593B0AC5853C49DC2EF73CB93CA802713277E99D64CFC759E5823
64693A16E27E00AE91C00F6ECE919A7134A13095117015239234F17797CDA057
231DBACE0F8757B6E479534B6A22D054F2F3B6ABC402B70EFB792CB7E5F9F3A4
93A1170CB474788AA9923C262DA1F322C4F0A75FF61CF453CC40CCE6141D9E4E
D550ED312890E951160D2E61D10CF032687EB52FEEEF7E8FD670DADFDC66E29C
85F7D50D88CFF3F93D676637BDB123A25357C83A3622F659DFA4E41E30753F8D
32D98F2053D0EF3D6918A574DD109FBAB87810BFCF55122788A7CC233E26F95C
CCE957E11EFA865327BDF9DF17E98DDFFDF390C00339E6096E7F96C41B42B5F4
1E8F864A100F318901877D6FB1431E167E72D5340303714CB8C63A86AC5F8CC7
C17D70BB95F4171AF5CAD3B5746051A0E8E19A29CDC8A288BF0D9232ECA858FD
6B63BE6594744259F77DD180254DA34C72F368EE0611A539D5469E33732C8AA6
BEDB581F852E7FF59F73C74EEE89AD8026FD71677B9AEBC54DCFBABA368A80CB
235380227944F076D058B17FBAB772C28B0BC0AB0E4A63BD326884FE2F2A8979
8168E0ADDAAED1A55A48487A2DA3C20437396A63A79004E42F404495B46D3968
BC6A6540D60CEB08152AEEAF98BBA78D8E834A5CB3008E4BD206E4D95578B4C5
A9BAD836756B7A6A6B4B9EBEE2917126A692C75DB7611EB2526A26660D89AB5E
6E5837B9C0A02AB6BF41E6031EFD6469B797437A4F9BAC2464020966FB398B36
D83B5E3AA504605F48726DB842CC722D24CB31A9BBF5C08DE8EB399C45E3AC9A
3767C42E787D766A46D104D76394C0F4374803FF77EE20C6761403E1416A2A17
87D9284714C9030B3F971862A8FC408D74D7136C6AE0CAD8F75B743427BB8CD3
2B196575F3E53E3481D2471F4B75EBB5C5F733D45EAC63D7202E2FF6731CCD96
2B1C83D1DE2024C4BCEA632F0431BE6C3CDE2F38C8FBCB793826650256659A73
1D0631E814603AA191B7F7646AB5D45B4E994E5BEC71F1CE0521E1C6DDBDA1A2
3A6FCC08FB1B88B94D25F78BDA39F71776C32D2A160FBB66203B033B766F94EA
34CE6BA664901A1E318C30A8D6D675DA20523DE60B3A866E2C7730DF4A67A3FC
D8AD2716124F6D3AC184BD449F4D128F6EB2D8FBB89DC0D6C11AB9BFDF1477BF
AC08126A279D30EC167037E661DF934D5762AC625CC9B3297F3F4CD24ECAC266
58A2AAC71BAA5C715059060D3C31449EBC893C1EFD8BBBA574E4827C9B88CBA5
98533E602ECB1C0B8108F6E9B64C5763566B97FF802986F80DB1D819CBECCBD2
B1DFE5A43C2F6764CA75EF2FA58299235CECF743E5EDD90A5B678FEBBC192B5F
80AC8E1E4A5BF482E239FF2DA968494217E7F75A47471A563735D53EC4332D78
04320D894E754325E2AEF319D6D5CB18897792ED2336F2134CE0801A0F31A4E7
DC06764380ED55FA44FBBC7D6DC065B9B76F171AC6611092213FFAFAAA50F046
ECBE92304B96963E5DF7055327144B153EA731EEC6F0A20B3DEED8BA513E5196
A27CB9C9B684831290AFE663A863F9EC339851B57FC0A6DC5917075A2F723EF6
7D68D2AF343963EF579CB79B46AFFB016FA55EA757C744D210457F75CB850014
E076CD1F7A90159E5E69682216BACE31FC8956D9C9623CA1B71753C57F9CA24C
3C88248BAA388DEACD0B60EF580CA64262577A2D984DB65439BED1C9D09B7D19
0343D7CF2803D37C3FF89EE6643024B5815473B2A8E3C4663FDBFEBB25E1E270
55488E295610D1FB22027E712BD83E88FAC61ABA9E74A90390F6ADAF9BEF0277
B22E3A5B169B8A
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman10-Regular
%!PS-AdobeFont-1.0: LMRoman10-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman10-Regular known{/LMRoman10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman10-Regular)readonly def
/FamilyName(LMRoman10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMRoman10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-430 -290 1417 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B3AF8134528F971DEDA
55E9075B8973BD0B1C001D7F241CAA67472027935C0A16779AC34D17950388CF
0E0191A473BE7581A249D043279E83EA19B511D1D8FA3933F37C594054DB8297
45ECDBC2E8976B243A996D477A529B8667BB3FB7783D0B773B952A4520909BA1
EB4AB2FA4D38CD9B2CF575F8E0FDB2E85A6D59CB0AFEE208F8B5D960088A941E
6E9BEBBF2E02CBA386FDEE2F4A0A453A960D80C90142B34FE01BF72F67105E03
114D181D6A3990035A36F1ACEF46E884A818302042894B42069DD5885B97B047
D34FBF7245DEF708B5E500E71FACA6F55938C1C9E03601F110B9B96EB91E0E1C
58D594B02A771F8480466FDC743843460B3AFF1867367D645017E2A7C96B0FBB
A9189D995DAB0521ADF024FABC33682BDB8605155E5D1813E23B4A9890D852DB
2AC72D7543ED8D34C8E29A88758EF0B5364C156A3D213BCD9060892C3754E0C8
E5ECD8CD5A580EA0561ACA1E90AC5D7729DFA7B1CFCCC98DB829C1B2EA250F4E
B54CDFB18B56D98AFCD392F4DA49FE9F9CFC94137C35FA857342908ECF4D0019
6506644F2611FF4E67B09224177126E4E059D7C2A941A01BD875FEAD28864048
1DDE56A671FBC3511A79E5EF3F153E265FD840474B66B830CA5A09455CA1AFBE
B124FF3365AD824CDBE10A17B08E3A47282CE6140B0966D4EB82CB5B034DC6DC
5D6CBE6E1C99160BB1F4A87545E4D6D3EC7E30BF52F8F79A877416F69BBB5EA4
07530D50EAFE96BF6AC0F277A8A357761836E499F221A6DDE9AC0A03ADD0EF91
31B26E4332321F4FD59C51B515530BEA1AB37479F31B9E6E94E5470A0BF30403
FDB51DBE8C7D053D1B5FF78EA8CA01F3CE6E1E8E573F5EE8C282321B49B73D9D
3E9CC4C3005DEB4CA3A2828B2D8BCDAC49F4AEFA7101055E20CD98B420454D0A
2C7C4B3933BC81AC0FF01C1D51D262D6B85AD7B970750CD0D6F2500EDBAB25C3
46F96A6028A1106D2DA63EA507C07F1ADDACFDC3CF4D1F9037F027E63B522C41
BCC160FB1D794455CBED4C049ED67502630A8A1C2ED11A53852E7B9910D008B8
DF64C3DA1E469128BF3B45D99837E560B852F87024C48C184E2BC4358D34EBE8
48ACC9B93C575C363FAC585CA35C2C450B5929783DA0ACF374733D7447051366
BA3065066563083DE0E1494B6433BC4BD86CBFF1A9034F40380C333A5F16A4F9
9BA2C4BB3D31412356B9E978BADC3548EC4946749CDC981002C4414156DFE0D7
83460C816ED040C9568CC2EFE4A607C3EB4A6C06AD50B3CB1C886ACB3D1022F7
70E256CD75521A8C02071A25B0C96706BB7AE920C15804482D69A32FE000AF1E
D8CB928BA33D61D0F17C1E7D2A1403C4ACB7D923E66F10354BDAECB0ADC7DC3F
A7B24303B3C291B987C490B04B0CA0A969E41E3F04FA629E2B6649661FBF165F
F099E2D5173413B3995A7DB9B4C56C828F8C614AD3607A91673A3DF62988DE97
DA96C5C43CC63C14EF7C24C48C184E2BC4350D72B6956D0C2F549618A0061284
E6AF01D8B9FAEE674122BA926D2DB941B0C26F6274027559A8B3843FCFFBC8C6
E51250F22B812E47ED46E67410144A520F7F66B64A927F0A67BB50BF09591782
F8A664335F67B9DDE36DBA793EC77E5D84F6E298C4F428617BADEE752997B940
93316F759F1A0053B7E9268CF93B9763BA70C77A82B01C2B17479DFF58CA2C67
01C4D3E39979022FEFF095DA482A4E99A4A3259B2FBC52122E7974849DD398C0
44CB32F94F500BA9BFC908A2BAC4B3062E37B68DCA401224AD75DCA40F5946D9
266E07CBF681164FEAF332C19BB64203E7291357E4C4F9A6725247F3ACB29005
4C79132FBC49F5FDFCA8BE38549AE53F72B85A6F03B58AE0D30DCF02DECFD422
DAB156ABDF73CBA7DE351875F5131518D2DB628C3C99D0EBAC0F0017D917875B
D4F18169CFFB98AD6151A16BCAA3540A85AA395D5B94927C063B7A789EB1E6F3
A07B777B22BE5EA7B6D8F1664CE0DD8F43CC580213BEB59D15D30B7292FD83B6
E52EA4270D0D5D9C6112033C467CA867769AC53093BCE223CB286B1721B357D8
D51AC9DE1E9043D7770D32C6E8EF9FF13E29DC064F3C70730B6B567A9AA1CD0C
FB337558AA398E37BF984F934C66986C2EE9A510A314AD971D82FC1EE6868FE3
D060DD7B5AA766C4DF53407517CF6F42243C234413756CA68A0F125A0E7C1E17
E4E9F3C905DC814982B1A40503E899AAA09B2362DF13DE0E31E5E08B89B0E394
1460CCB0AA4CE5F70F9D19F59A963E9F90F4A84685377B43F208A3F331979D1F
51377E69B684C70E9F76F39FC77A46FBA5A77FC361C55F6D7C5ADF691D4C1638
83BB2994826A94CC906E41B4251518F5F104AE5CD4A2FDD0DDF0A49EB8F32036
94BD7EC9430C3C2F7970B696DA577C21452508DA6E9E32F903296B80F87B1797
19D633875594913678A3833636F8B33B0C66ED837176BEE6E6A8F6BF1EF66105
F277E5B6745FF4A5CB0EE90FA42E1529406562EFCA1E621ED2A65D66DFDB2098
887BC845E63B067BC2A4FFE2D0208EDA333AA5F4CAB0ABD7E1CB78637494E68E
34391E2542903355658BD278E67696111019DB87C73771A6CED0715EFF43475A
0FD680DDA2CFAB8D802B28E97E3B1E097CB13153378D85500BB10C661AF17841
FDBD5D61718DE52EB4F11723D1D646B9E9110E87700E6D1522A71B0D0018368E
79712A5AB20318C6045977231D86C8BEB851B96CD7BF88F9A172949DC2969A27
784051AB9E62CBD50ABE89F5DA433EA9D4D67FD60C7A551828813067EED8B44F
8F9316E6E062F1DF68BCC50EAB2B6C8E7EC2B798E2E8BBB1AD5D775F54B78C79
4B35A41FCAB99493DBECF6620AF09020F0544340C3B4C147A3CA6B939B4B19E8
1AB5B2D968F0729A5A1D1EB41ABB67B9BA1735E4E0555B0ACE192B694582DBC0
21CFE1217CF272748BB9CD72E80B52E247D95BAD5D9ACED37A7E9CDA86B3581F
EA2C336C627BABC4737FC72F8F4F6BB7D73551EE33D7036243002C75ABD706FF
6272EC8B127F512CD94B4F514F2DE812CF0A27F44E3AA88DE45F8F70D60AEE94
B39756DD3301F4C4EB5F7A46D1EF564F9D4A077B55856BE8070C46525A7DDD5F
F93B34767BA45CBA4B18ABA32A3E4DC1E0F3236A1106CD1CF46CF2748A3D67A4
57945BE9186686583FA8B733579DE8AAE808C8916EB45BAA486A85DBC2F45566
226D9EA08B48360A2C2119A60384F37D44F4096D8AE632FB2EBC0DDDFE6490E3
D854243B2D272CF5C16F0AAD1815A417E0437145718C421391BC4E0BDBECE4A7
FC58DCC2F00B5F262263EE95A66B7B588B417B20D3AE846ECF2693940F268C17
45E0FB4E607854D32C6D52E83F24A890B95D6C169E9E7AB8A1ACCA1756D2D72F
0D4A81042FCDF505FFC4FB38AECDEA912516F3828A9480D6179690438CD92FF2
BFB06CA814AD933409C99883AA5D858ADC659C1BA0E3A080CB1E4463CB90DC8A
841CD8A67977D90CEA876880C4118254A19147D1389963C41CFBAC11A51ED614
E0C7FBC7335681207464ABF8C4ED5B859592A3376F58135BCFA5DE0696385BB0
FFB6345B71555B7BADE49A8ACA8D973CC3DF7BED1F3B5D595DFEB596AF649E3C
C9D18701E91F5A47FF6E933E21F0FB9FFB3221EA47B964FDCF13CCAB1353A21A
0CE2631E8E588A4AFA85AB3502A3832F0FA6E4A9E942F3C6B70266EDA218C6D2
606A4B7C2D112FB1E3B5437964E2431F7B614CD62017182AB7C7BCF37B79B1F6
5339265C3BDC27CD99AC7D748CFD1DC2AE04CD5590CD3E0042091DA9CC585AF0
DB968876792926E857CED60024172E360E4B169DA93627BF5BE4A89B8816D5ED
80C3BB5B5A45B52A16879526DFA881D0B5EC317437135C50B27CEFD1F5022BE5
B15E1D75D8A3950397E5EF6999E30CE159C111A6468D2DAB04B3ACAC61986BC3
AF3401CE4FAA2ABE187EEF62A1F70DE1CA0418BA7012133257153F687ADDBEBE
CDCE5D5144613798CBF687FC96944DB5C206999107D67FF7C8989C512DA066D6
D6B8CBC71F9DA6B570B4451375B9EAEDEA1115846E0DE7A3B686AAD19F4E39A7
3DC2E00310DB85AF8D9080EC153CFC0AF60E785B8B723C16F77F4F3568097B60
E1B564F8EBFCC4E3F3D8112A7E8FF270331D2FB475491A51A87210248F9338A5
8F8A83C0D8481C4B7FB4BD0946A0F62F2FA95D10FAA84DFFE90A240EF474ACBB
9E6B044896D3DC2832BF258013E878EE3C5CC43D6AB4C81C1936C442CEDD2F6C
DB3575B617296CDD6A514F2DBED85F14FEF3F00A0A3C2A83A328B249EBF2C31A
EA9D19FABD50B54736FE13D6FFE686B1CFD0EE0B6B7F873F7E4A94CDC4F13B8E
F85867862B8FFA7167A39E37833AFDB4BBAAB388CB87F0B73A502C34012F783B
EE1DD3D04EB580E6D4BE162E2D45F7EF6BBEDD9A5A3A74BE4EB0759ADDD89E44
9CD6AAC616784D91B39AD85200341B4B33127E9AD95910F7642FF192B1241525
D1262B52C70DE1120705CA2197DCEE72A404199E546857DBBB84B62F0E5DDFBA
B3258AABC24AE22C90AA37B1DA67BC83A83F169F626859F00E85979BE5B24381
9BC3EAE9E2425C10CA412982FC6A2B7ED8669633E05B89ABD3332811E39DB955
6E7C9C2A8E6DD1D0D5A8590FA66FE389609A47A92464C8B4B45DFF97719A22BF
F5D31C9C6C0FF56F9B3DF1963735BB55978429DEC75D2A0E8B21B62BEF5EB66D
79C82CEBC2C519EFAAB524A94577EF320491A3FA8CB2D730293FE9ADFC8A933B
E0BC10053DFECF68261DC400897B7D28327E144D9CB0089C91D6A134411D948A
A2F90ED6A01B7306C993D991D70B5EAAC7A639213EC0F82A1D7750F3F799A585
5AA9D1DC181EE715CB577C4DFC25482A27A090A0715E76B238A94A5329C67932
4059B942FBA2C6D3066808AAA990E81BE87FEA27BCD1382A83DC20215D1BA29E
4200DD53397B02197B6FA86ABDCF97ACC1B898DC7DCA38485DDEBAF95388BB7F
6588A5E347A760B51AD502DFED343F64C6CAC65D8218E75ECDA7292A0F2FBB4A
643454F84888CA17948C9FB31CF86E555B4815AA6C81B114399CA1169BDC7F10
4FEF092A2CC807FFFFC7383FDAC67933D28585B6D59163EDAE458E91E7EA641E
A38F9F9AC61A41F2B4CCCA221C3A72AB7584D24400671CD39F2175378C945F31
C26697A7ED159B5292769952925EC981049396532635B98C5018A15684F9BCC7
9AD6DB7694B1DBA4107593EDBBEFF3B140B7CF51BD51B0990458B6C31767179A
1B63E40EAE3829BF4CE47841CC9958B3379E0C407E5604911B96C587E65FD005
8E0576018C746EBA88A44B23A3F56EBCD82E0702C4A95FEE93D8A53178218FF7
4CCFA54911ACD0FF16FEF122729B6E985FA02F7CCBD6BCE95597FC3CE99538FB
17A8238471AD59C3BD9BC4CEA7AFF4075A15327318F6A5962CB9AE8BA6D3F045
E64B4E57F282A1DE2049B163A4288A69ED6EDE22A89902434ACE821D263606A3
74B64A01E25C9C7B71D745FE9F7C891290A2643009F7C21A10C45E2BD3C3439F
E1A8058C20F4C3ECD7CC083D70252227836371FF8387DFECCCE19FA7B3BA9FA1
400F1A17B257DE3F0661DD7CD280C58A33C57BF883777AD1B0FFD5C8C14C34C3
638979F4590D49978B1325CC654E70D7C81F03A2AD9E74B12C90F0BE89FEB4B8
4CC0A3F6BE1B968E6F1750A2379DB3758BF397810D1370567A791629B4F9CDCA
D4A6DC453244EC5932E79727ACF464295E75CFC635036CF27FFBA1DDC816801A
DBE116E0E90E6199B6C6B3594E3B700621EFF790C6D0A2E6E82E6840E51B38C4
579FB95337423C15A8486882520611165AAF3711B005AD3DFBE56FD60AB643DE
608AA42A1678786D34C701AA0836863119C3FBAEDC3D0A32CFC097B05F9D90CC
4B614AE7F58F3BF9C630BC15F2BB7C9625F4B09ADB0BCD6162C0BA1320D30AAD
45EE4BDB168DBA8E27EB9DA43541D7D09EC9520161FE013B8ABE63165ABA1554
5146ED2FCB21B0345A1CA0E4BC2591A87D0CE5AEDA30DA4F11EEEA1031376182
EF54B78FA2E8AA6A9433272C23534CF0E8DE3B2E3D413751D6316C41F695807F
3BC8A261F1C47C4E740A606A97D5EE4608A524C4F1A641735601161669B687EB
8F76B9ABADF9D24B2EB524C6AABD7EFB03CF1B8F6668C8B23694C916BF9A6BDA
A24DE24D6CD65831B8E50C195D028F2DD9BA757902C2B35C13487F0BED5FDC37
8F9CA52C1643CEAD5F98337B73527537B8FA58F86F01329F1C4F14040FAC9792
851F1CC40481634C777018C2E5F8ECF61328625A631D4636B2687B40395531AE
88840CAA74199E48E9FFCAA2C6A2BD03A17B76FAAE9CB0493E6294A9E3D78E70
3FF2732D0D1797B70A52A1BE26E3051FE2211ED58221883665C31B5361DD832C
513510C5F90752F44DBF4732ED588181E253CB5FA4D2D486752659C90B82B568
8390041EA0EF9C658D9B0296884BA9BB4FD86BB51FA79082FAC33DB46457E63C
B27220DC0FC981DCCB655DD37D202BB69739202BD31EDAA120CE54ED0DE7EAAF
E571F63C632FF2ED52027089972BEB0644E52D859C3B30687DD639D9CC828F52
311A94A494127574D949072F8CB3E0D1EC6BD197D2FBC30A1D6064E2957B0015
30E1C9BAD04D71E18BF921FC713F42BFE4E2CF74BD96A2FF3DD16FCBF266295B
E92A624BCE6EE9EEF09589FEAD41473F014BC32FD730F22927CBA09B8CD21673
52E6BA2E97A446AC570345D926A1CDB30225A7787E764D44F5A47515D1F43EFF
C35BA38B0EF54AEE2E8E33ACE1F665ED0B291CA4BD4256B7E56091E388284DBD
11F5425FEB06059F260A19A1BBE5F56FC10A1C2CA34EFF3A7D45FF720A189B65
F6E5571E7997ABF7A447BDF55731E6B46682B08FD56974529CD78CADC41D9815
A364DD46D9E3EFF4D230CA85BA749C7CB1687ADFFB0B83A7838452A6F1847C49
E4C62B2ECAE693F327D25D98C9AD193F94381CC275C922A75086F481ED8E8C84
C4A3F13C307E89F7DDEA2E94004FE6F307228D7AB1644DC45208EF1DC1009C1E
9D28B71A246B043CE44E65F35AA0B7F83DBD4E4A9038636256EABAF8BAFA31DA
0FF7F18D64B70F307C0F59500B5F331E1E3EB4135A0D6069D382DD1260C67D7A
9BFC8533FDC27952B08A5ADA04CA83CE28B9DB6DEAC8754AE29EAE5AC87616C0
C26855C5295989A216475D75EEB838186C788942057588B3DBCD74E296575F5B
893924EFA75FC55E740C78D4A1C58DF87039888CF7A26CE3D3B5274739044883
A4CC6C9D8520C05704D578C1E449853FA9B6D42C49637CDFE9D0D56A900E99B0
CC5EA988A2944C7FC65D53B5A106F63E9DA959F89DF7E89BEA4ED9866C07EA2D
27A88E8BFF0D46BC42D29A1CA05072343C48231F676FAFE00A584F6BCC0EB3A2
BDF5FB5ED657B3AA5C942ED0C061CC7E03513CABBF0D7B9262A007D77BFB4DE9
48835029FD78E23E35AC4FA97D94540D7022178AE1D4463F84630D51AF81054D
FA45DBD1AA1493A3CB561652DBCBCF97785515A78B7A5705955CD2AB87A277B2
5C469E9536586CD367FA092ECC7582B78039D2C3956923C9DD71A04C7A9CF032
A8B3200EC9674DDAA3FE01DD30678A37C6005C87CDC11866614DFF696A03E46B
C6EC917F5F9D13D9521CEA49EA484FEA007B390B4306B56DB0021606D2B39110
AE5BCA2144A5FC51887E252E8CA463340490CA6634BFA6F5B740C623765FA72E
4176D1B9FE2AC37C8C0EC10FB99F32BE9E346F81951039E754F9244B8534DB44
8ECCC2B849CB3BFCA22C80CE90879E1206F6D82500B4E4476AE7277F81B85DBD
0D8BB48B401A0860DA7D9A1A42782A51E5A8C928B184846B76AB69AC3CF11F51
3BEF0C35FD1780802187974DB30B750618080FAEAA3627F5D26A5C91ED65D52C
AE3B0A5D4BA4A68C8F9467EAD47506D2F6B5275265294D4E5EFA64C349484222
A9FCE7DCC8B58F6404F9E74E200C9DC2E2179D79AED00A2DFDA9B22773F34FFD
9BACC17907788ECFD84AC599CF9C38E918B17E14F8751668A0F77A40E2302CA4
D386A4149D5533482274E27352553F6D4F3C9CE40724AE4F4714B8933B54AC4C
09349D589828D6CEDCBECA38F7FAE8C1363A6CBD8AF8B8B9D031E338A0A9D593
462CF91C1DC3D228BCF7E99F93FAC2D897E3153548794D9232AA20C29B6CF38F
C8562EEC0C40157D77C71A385C3A77DE10828C2AAA8D65134C483E0F755080E6
A912C1995C4F548767BEE356803EA7F14D69609118F846A805E5115D72F39A27
500D6DC4DC8DE635C84C02E1F9C93AE270A5448B0F38289955FF8AF6BB9EA4A0
6CC6D3429CB2E286B738BE2719E23968D45AF14C2ADDE87C26088D33E097B393
724A08324ED1CE7BDF96B29523A3E2876BEF80C096036DD4C95B6B6EF4101742
3D1F7A62C216ABFEF928F1E2BCE051279788C2BE631E93B2E2990ECE96EF6D71
2B4FD78087539392EA31DEFF4FD29BC0E0DF1429FDA949FE1F364C2F744079F1
587889BBE10C6B0BF0A640F2DAAC77D9AE654BD6E4359E6D7DA480959E4F8348
015D1F8D9591F91F6A2A2288986B755E73DF40B4E922D522E2CAF63FA0A8D22A
F65198A15FFE7179D2096AE48F387E2523C39EDAF5CD7F0876732AEC53509E0D
B0167996518A834F071428116CB725C2A49BBEB1B913570A51B2F96D302EF891
3C6BB608353E62546B3B90B798AE5ADF419E9DDAE4CB1B85339618493EADFE1A
499E88284D2FB544B7BDB637868345AD845F59F2054FAD9A3878CFF50032C921
5ABB00DB89500506308BD62BA71A8CC282E6E4F865AC8FDF8DF56A863815F2AF
DD734A558594466D19327F4BB5A9B8E0C472981CD2BCF947E22EA79D2C8F5786
8E2AAB61A3C1D0E9D2BAFED9DBE2E0970EF2443DBC653EAA60868049AFD1148D
3ECAADBFCF366596F5E3DC4BEC30136B8BBA284ADAD5B6FC0229068FC2081EF9
3FFD0E0C654D9E97727C9EF147F772C8099CDDB5F3D586B9B5A9D9CD9D7AC970
920D44AA65B6998158F0137612BC277D7908756A336A6D151B2BA61BF7FF7AA0
BBC9A98DE40C3424FF349C1228FF0E85979BE5B243819BC3EAE9E2425C10CA41
2981C9933B602EA2729AE218F44B4D9BCCC7507B2C2269B887251E5CE6827A0E
CC31B8BDD49938EB436641D998047E17596EB9150A402C5C350AC7EEAB82D64F
9A5EB6A1BB5A1E18BF26D15411CD48CC6C3D7E0E41EAF61191F3A061264CFBA0
6065AB22476B5017C53D18DADCD8377B661D12BBB5C8F3CE43DCDA76D261E3F7
734DE2DB7D9A3712293DF5665A9EB50B630301A703DD66B7CE29E647D596C583
3C98E7E802CC91B546F554A4B9785B4E057BCC579D61A4C1AC42B75BFC767E67
A80274BB3A5023D9EEE1FAA7111E86BC855FB26CF97A4F88F588A061153A631D
123B037B74F7F7116D10592A3E7CD722504F0ADD190335B8794C3100FD08A3A0
E9BCA5FDFB821CEDEFB4941ACB6488C1A608FA21A2EDC0D3DCF9E9A7F8F5B597
26D99E2108E0FFB4CB01CF7EB213E1857D600CFD6AF6115FFBCADCEF0815E4F0
76F03E728F1101B3E3676963F37DFCC943CF236B074DBCCA06BC8F0E07E51539
8CF620966AE73D22C7312708911CCBA94B44583D810F0E024464F875A3FA9F16
84F095F8B4E2A1B72D025086C7C485152D775C77F7F595A5D1885334F061B84C
7B4627AA7EA898E6889AE14D14267FC316FDAA407DACEACF1625BDF902DBC406
2BE896D00A355A1EDDA556B0EE1FCD23F8607242B03324D9BF6FE01F558AE694
EE31C87818324ACC8BE54953A284C888D0AA472E52A98321871A09D6ECAED6F3
418A66D35D6940A3FB57221739C239C496145E7DD84FDA4F11EEEA1031376181
330128723810DAD7CE08EB085D29AC7925CE02513B4F180CE1D2A29F0A158385
2AA0CAE4C5F3035A6AEE4391A7710C67F95A61987000720CC9DCA77D93EBC04B
795D8FDDC9BE917105F07880B030AD1E9BFF5F40ECD773CF5756EF5523D6EE9B
C66EF49BA3F2E9C583DA5729C57C12058F1106F98799495DBB3A05C04BD64905
3FD293830433244E40CE23799373B747725F22F2E37F337A7BA7B74AD99BEB43
0557CC188BD44FE265A2DC2A176462F296602BAAF0DE807DA148D9F2B7BCC711
96ECBFE6077146EFAE612BCCE43458A6735454808004710523E45433100F5344
5D7F23FA6CC431D0EF8DA2C258BB069706DC5065304D28E009E5ECBF762601A2
664FC434D8545C9C4BD61D0B5A2CE1E2C033D0CBB3BF6270622EEEE0025DC16B
820BBAF867A29A8186E7CF623A14EF467C870B133C1F495FC0800761A6A97459
7A6591BB772B7C285474D06F43BC8471D2E993F5295713F3B9EB652878D2D7E8
F77FFE1A936796E59409AB7BC232EAB93115FE51069FFC256471F1662AB77923
0049079D9DDB03E622B866509A7892E69D23E9FD278CD5F26788A7E5D8476DE8
E215646A7F2C19136157C6D83B33313266F1BA8B9E065A0E6456B057ED2C599B
423AC51B24F2313F3398B4923810EBA16334C742685421CE3D57B9784DE4B5CA
81DCBE0163ADF47F997C4288AA1C8CDA5E3C6F89AD4B0309808CA49E68D17486
39DAD902F9BFE6EE602DCBF09A3BCBD6B4012231D7AF3FB95A99A9211EFF3438
2498160E4B56B09C3DBEE0C0104B1292A1F83517BC28709D3864CA394F236474
B060E48CCFD9E1AC3B5D746CFE6854A43ABF52BD4E753610A7C7B988B0CFA983
FCAD7B53FCC345BC4D21C7EADB5A2F0E03D0E12D5CB6914BE4F4D111C5CA3DD0
E7E33DD8C872A32D175EC93CF8721B7ACDE3255CA1287F65531EBDA3904CE70A
A9F7A74DABE0F4609576ED39F49DA98E8461FC7F9A68707004D825BBBF84FD99
94072AE13F17C181EFCD9C2EBA72B51F0DB554C056A1DDD2E42C93E8650097C6
F2596885420B2B38DCACB524BE8EA64B552034256EEFE521828F2729A2542C2F
3E67AB8CB96623B07315772361AA6CB3E7841A85F608A6760204559AC0A58BB2
B0827DBB3DD736D1B2CDCF61FFF6C6F9FE865FFA6B64A7EF9D4A06D0DAB15EAC
74E87BB7E48ECE41DEEFEDFB47D236F1DF488EA9100D499A87C0AD1626BA850A
360CE3634B20601321CA03AB14E973ECF6FD1E999CC7C00A69D770C6CA0EB548
FA1E4795007691A8DD34A798B6E803A0A99CABA87DA35B532BCA16C510BE864D
B5A5C06451FCFDED1ADD3E2F982EBE208BA9E14451BF3003CFC42B01FB3B663F
3C478A583A1A7D9BE69BAD2DE0218C4D4CD7BEBA74BED51AFB08EB16469390F9
3E52D3214F031777E35175370D71931B1B43BA4B41CDFB1C7950BDFDEFA7F809
8A0F0581B16C51AC3CCB3B6DE8A84B2A36FA46AA5CBD3DD8C1CD5E3E5B2E3195
AF58DEE4E45304C3A59D0BE4AA66C14DCED3C6423C5CF350D344EDBC5404E536
6F675032DB812A9694387BC6A7A7663CF5D7E61A400BDCD15EADBEDE3875523C
DFFF0F3F6AC3817A5078A751676B5DDCEEF6B61E61A0008201F0A2E1B98BE966
84BFB78BD03562DD6EE838D77DDBFB321F0DF576E078BD26167522FD3089298A
2618F22160C45B7678378A13AB1A56F8A2352A7754493B909CD108390973598A
B20A52DABAF7035C85986DE59AD301B93AACFADC85848F038485EE701DFE1508
6D6492464AAAB6FE7647D5C00E90C1BB3D58C1A115B39B76EF792F7CCB4B8C48
F8647BE25173D9C0204EE6BB408D004F25CA8ED03EEAA884D64921DCE789C2EC
332B85145112D36848960AFAE395E68FC891329882A2639575674B2A47C068A1
1E3231F975E9E936BBC50D28B532424A8E3895BF726426CC72060175B77FAC17
7952F4DB65684D6CD4AE246EA88B6567C07522C69B5EB384757CDC3F750A55BB
BAC8AAEE632092CF95DD59F00B3AF57D9EAE465FBEF66FE82623DBED8135D5D6
D7847692B21D5348E3F6FBFAF7313B1FA589C0DD6CAEBAAC78F29CA500BCCEFB
C89C7C7BF1CBD87891D43887F9664949E55CC2A2BB87E8E9DB44DB791D1C46AF
E2BD86EC116F2067AD2F9B62E5EDD6FFDABAF6A0834A8A33A892D6F4EEEE809B
CD936FF4B76DDB821EFFF0BF941EC515949193E2CEAC47428B1835A1E5461823
6476FE268CC640FDB69362996B1553EBD742F260009449B628493CE4DCF0E575
4C8509A44A407DD915AB7188FFBCE3ADB3DD06AAAA7942D7ECAF59DDCCB44754
D45D2DAB9983ABE928B61E667F4E8AB8DB64EF08CB2EAAFED53C1E1B09D3DDDD
4A4A3EA5B0A1FA84E55ECA7617A41124595F164EB698D2308DB214A96AFBA73D
3EC6EF8C6493DB301B7DE622317120AE39713EEC28B51D1A2970F7C8A6449020
8246E7CA384F311F23DC5A7F7DB374E0E3D066CCB82B5C7A2BF30C27280DB9C5
6C4F649456956B78527533785284BF19FC952FF8D47D723DCAE7E031BC6CAA60
C490801421B2FCB9A96154DD7D01B83978699B881FF83BADA315EA207D856678
25E5DDCBCE0E191A7607BE4142FFF9B4879A99BCAF708E326D070B8A72B4B3BE
25BB2EA932F03D13289DB062EFE9E62D5A3DEC03D1F5A40336E69F61EF0A9659
847F8BDCD4238F576E09B591DD0F699DC91700EBAF3DE4F3A232CBE21ADC4189
E1493FC65F4D6D92C536995B673E238559E26F468737E17BAD7870A92779ADE5
03EFBE1DA2772892E691EE8576E76EF9AA4EFC3E579C96D321F56326AFECF8E9
7444753F21C0C6E275D191CA3722D2E3950782EB4F63CD5071D346C026A4CDE6
59C1E6CDCFCB3FD9ABF5D7BEBEA6BEA39EE90B8B78E8F130575910EC324FD2DF
976CFC21F0292569229F1C57754A6722EA3A4ECBD084FC5DF1B26838D8B08863
99EEC281EEF14315CF0F9F714229942165A6E8E7188F5D7C1D09FC3085B4B346
8B6FCE2EFBA1C6F5C0EBC37FCD8FD94E2F8F2607FEE1B55382A62B35FA16C626
5F035D47C251858AC5E400BC65AA6245C569155369440F398E995CD0527C4C7C
F4312021367191542E945D99BBE733DB616CEAC8A30C01B3F334563409EF49D7
C19A1D416A69EC3497D2D84B19F68EBF7125FB02920466ACE5B506FA04FC210E
9E3DD63F00738AFFF0F2903EFF7835AEA7B8744351564FD4E82BFB94A1F6C35E
1C0A7E87DF97448823A4D524A0D895539C05B4FFB0432DF191F73C50E0EB7A4A
5B00AB550C451413A237842D91C888C209070F70D8D75D001C7B4D02B951D2AC
0835AD03EEC7EB44062ADA05D662F7C17BCB9130CF7D71980C9059C219B3FC8C
C688F21F4F14EBBEE9ED27DB30878A978AB4880063D4FB90366A4CD61AC6757F
67D7CFCA851396A4089DE2489871AB157F0467ADC64D600AD4CB66D8C64CB48A
A16770B47D01CEA50E0D6555854323FE00320EE9312134F16F145D933BD42655
9E2E0419506D9E406F260E2D29680C0EF7184211C879D1CFA2AD398856498188
EE69A44B23DBC56774425595BC5477D01B514C17ABB4C3DF763DCB95B59AC509
50FE544F7C3F2BAD81C23186A476CD2F5485DDE4B9D40F638A3A95DE5DDD14AD
BE70109F408466080E03ADD27601ECC2DFEB5A9335A6FACEBD140A2C0B8421B2
F57E7C59C915927A455F2EE0482A28C979314D208363013D8E09405D069A5E6B
CE653FBA5DEC4325D3CD448697ED68B3D96224B86821217A986DDA69E0B4BFBE
38C79866BCD14C2C92449525BD879F68482C86E8BAD5B6494BEDC9B9C7B6A0D6
E6D116146E8F86478119629A4FF3EBFE0443F0FA19ABC04AB7DB52E0F7978EEF
25619EAB1340719657BD58BC53D145E742B8912DE0F2AD7CE0FEE3CAD755AC23
964FB3A0FE97C122FB2D729B603B6CCEC05220CD184DF3A8F645825C9F5EE582
2F1E5CF85A18C47CC16DA17EB0E6F223CEA5C7C89F33A18DD4178062E8D1B5FF
84783F3F85772FDDF948445176007236EF014B547DB1C647753E6CED53E3678A
D6393A3F94CF0C7669ED9E365EDC2D5A99F18C212AB08277065465257FAC9F7E
E6EA74F7C07916C7B7569E6768F7D538637FEE65804AD9F47FD5D09FE551F142
955E184BFD10251E69BA5F423D89991BAE6CAE8EA99AB61DAA30D2E29FF7AF32
CC38F4F4E6966227C54BAF334917A420440D7F364C4030648BC39783FD7AE189
510DB574B3CF9239871F61F40EBB75EE3024F37818C68FC464E73D71B45669B6
CAB61314565222A1493030E61D657AECDF41CF66C86D11E1B064A2B59B90EA97
2CB8CA3E598ACA574DA6120EEB299C2761995007D2B275FBE9E9942B797A63DF
2BD3F3C6CBB52E5D75AB74E830939CEF9EFE423AF50648FFE450E1CD2F0FE4EF
D68797E34E14CAE61C91582D55A655089910B4B7C4FFBEE8D95937061EBE1B95
C6E76D4C38D855CC53AB9F5668272B4E4BCCF9E3B7A397F739879F1507A60011
13B11FCC641D676CD127CBA3B8DC37E7C7C0CA4DB5C3993FE8C1C4A903270659
E6D65E47B494565EC8255433C2F1C95528EB4E2FC012DC25DE20BA1509641276
A7D844B80249481CE38557F0914457D9FDA066A17F3ACB2DC5B156DC85AEA944
41A9ED73949C8EDA17379526106A305B51B48416197391A8B977302FFB9CE1AA
C9DFC79FD1C78CB30A2F939E9170E3AE45EE4BDB168DBA8E27EB9DA43541D7D0
9EC95204F0D9626EF9E750C7790D7A3ABBB15A147F504B188414818E28291F60
394C911E30A29AFA3052DFAC06AE4089E7B262BE062ED1027C7D902A23E18DC9
412FC4A75201152A7F9F8206F24A189E57A0B5C178B7326860AF2A3345754C5A
856537C06F75BAB024B682FADA1E3A01E31F01EEF9EB42A6F3428012077754BA
3854A60A3676CE5D4A4C1BD28D88BC029D03BCEC52B4CA60F44FD1B87D55E05D
D967E8195FC8239B75243B40F957BD55091B92BD080CB73FAF83DEC48FE616D0
820ED6185E535DB5B40A5B274F64AB620EE152ADFFF6FB35CB22667E746FCA5C
877226289F5DB72C872D87E0D06284B88FCBEB0923B97FD95CDAB0611B324883
6DD9E54650EE2D2F3EB92489557278863DBAACFDE460906281D5BA5ACCD188ED
B297B302DFB32DB77E1DA2E2F92EB1890FE6BB060A0F1F945B0DF68561D186CC
6A21B8587AB3F947818628AF05123E7A289614BD5085D49ECD0464B494CD1AB5
64A93ACECF2271A19E4D51F34A07B29F01909B7B03761FF2070CE114B21E74A2
16ECAAB6DAE2D8907671248569054F401B54E256891ABBAB7980B1B1B4711FB2
6D09C83B0872B4468B120CCE1C66F5489890731D895BC4215406A87742D82F09
C3403D4DFC0807C44A0E199232C2800D15C790D91DDD04E44AD3FD17A2C6A568
54206D95098E2356FDA3F4A99F6455C1680435B965ACFF8567327FCE6E1A0769
8BE52B95ECCF029A6B18A512D30CEB0B6ADF80F8485D5F320357DB771BD7A674
D75FB486A911840172E024D6A88E851D672F598789D1EE0B99F1913269816340
2CA08E4A12569BB09A57D05DE428708C446C51F462BFC29F751A0D375757D95A
E364394FC25E6E0D02C68402642882E6421B44C297B1935A3A5DE94E8681FC68
42864A9EE1570BA2AB068CCE168552299361D62A2BC2C0D8E9586FE4449C3D23
9D0822F16C4018E6B622443A1BE2BA5E332A80CA5C31C59381BBA33B75067578
6A99B89AECAC1F6F7C9417F1CD89DDDB2D5CA8BE744B66F2914228EFBC3A72AD
A80F21B7A8BBAB1D4675D2510F27032E5045086283F8942837CA994B05174A7E
B10E23848259CB05BC0586B4B91100B29BD22F26D11674C1813C234DCF62E1DA
D97B91661E126FDBABA78FC1DF2E6FF27F48AFAE603888E74770C07DF34EAFE3
6D3104DADE5D30F71EFBA7D897D7E9C788459B39B30321C6ECAE276B63BD8A36
10973983297A8BA83B0BAF12EF2385A7F49B1E3136FD53926BD79B95B45483E7
C3EA372CB4B05FAB87087477E04D6009F314570BD06FCD655827CC511B0EE9FC
A0661E1008B05E8F31B235ACA40C12BDD72980787CCBFEB8863C12856A1AA45C
4CD84FE0E96BC0FF6BE1358FCF85E900EE6B0388368937076465A87EBC1E3D56
B3A752C18F8CF3B41AFFB66DB183109EAA0BEA3074AD5A6F8B1278CB5FBB6121
8034C721F5EF704DABF60091C433FB8781A32BEE7006163F27C153000E975E75
13D0156D2B636A90905DD3ACA41690216DF0AE3DDCA1D950E0F72B138F2868FF
AD1BA378B23B9336F12F73A22316553E618237C6F2DB6691434BCA2B4E559C58
D01E8E6D964F5DFBE5E17BD5C1FEFF382FA7B9B0B46073D4F6665C658E21C8B1
5FECBDA4BB89EDFAE2D6A52C31C01B3AD72DD126C3C86B1BB2D743E29506A6B2
A612239DF389F768B853F6885F2E1394A596001FAC3C14C4AE3B287732A1A6F7
B7BECB0339036F3C3B3A2FB108872E8860AB6F6403EED0090BD9A658969B3BA9
95F1D6868BFE9F953BF53A0330F57792DAF2D43D99E9EB6392846DA0B01BEB92
4B4DC01C12DF0BB686439960169627640B4ABA46A9C63BF66BBF7432E4876FB3
C6856091CEF0000AC12460C12CAEBA28D197E739C1A1EC70760EBFCCF49C7D65
C9D9CD9B3B3415981AF9A4CC1FEFD13FD4BAF26C1556CA2240BF3A0773D0F7BD
D47F29D25A92DBA2AF88984C142A30C93A553C55AA3402337C6C9B077A033B01
F3B878BEDA8CE5F9DE1E3B8B9659D7809E6D1E9A08259CC88564C7A10D00CFC5
CF8008EFBE21C38F9927527A4AAC3ACD7415FFDD939E001AAF11F61EE5D6A430
3ED46CEB3479DA81330EBB47AFB14105E20E1132918CD7C11069372113A491FA
7CA6FFB24BD76E7DFA3CDAF65FA01E47A50081F522BD9618E23C7FD95CDB02DC
661ACA0D9FA5DA0B3FDE0E2210AE5ADE0322DDBA57C4B946D6F167A57E125324
5293EDC8320DDD37D9C6D844D85BB710E508ABD79D24F75057C2798537EC841A
AD80176CDACA3BC49CAB0B83666DF396C64D8953B4F3B0FA8AD33C0598C71A0F
B16703FDFBEB8BA8A8D7E0423553EB24AD6BF4739C52C6F6AC469D1C54EEC2D1
2FBF6F0FF47380478B53FA2792966806C49C1636A77020753AE9AA57C1CCA786
6F63E4A5EE9C4874830B1FAF45629C5DCDA834092F51366C70EB4449369E2113
75B1DCB60BD44DB13FC7623589A5DA54845BC5F4C4C487917187C1967BF3983F
CE91203F9D1CF666B3F4FD6493CA2A307B3D99A7E2A0E8BC3DC5FAA1C89ED4BA
C0C5A0DDEF52F121996E2483E9C4F22EDD92AEA0D93AE0BD0B4DC0DEDDD3B922
E0887C466779C8D08472D73AE198962F216A97E1BB46218720C44A3CF21D596E
B9150A402C5C350AC7EEAB82D64F9A5EB6A6A4DBB31DBC76CF03390D1DA67868
CE808FC27E21449D29B188D157388E7C54C8C90CEEE5A3E69465E58CF738B96C
1D53BDFCD4A1FEF82C14CB57CEB27382EDC9D929A484030B5371C2FA2214F61F
7C124EB9A5AAFB7FB949E4A74A66E5F8C165CD0D254DFB8F56C192F0F96AB796
844B8E10D3A5157E4115CE3B6A3BB452417F1D87BCF3699262C795AF54996144
F5F186121F7B3854FE184DA781E4F2E653010BF94890633FEC0D13586AD5E371
AF1142497B24E484023D78E9DB5A2446FF209D4729BC929ED5DBD49203B02F84
0FB06091C8BA03B62CF71D52FB4ECE3DD54CA098321FE35A05FF4CDF11A2EF3F
F5EC6E4C71C880D36EC0611DB7DFD41217DF50CFB85851360291B34CF4A623C6
3A895FE66E14641959655F235BD056D154C45F0E3BD78A7D4D948933F8852459
2F028366D8473FF0A617DF7E6022E9D50B282B1284DD9EA66137C29731D8C127
71C6D0E14A141A52D9465223B3ED9E26A5D9B428B797C9234AAAE7D3B6E39058
15731051460362D65388801DDA565BE73013DD56D944D97798564787AE690612
38BBAD22C404896C6490EAFC75CBF6CADA6A6B7A9F17181A551912A89D32739D
F1D3BF7CD7DF18EBF95A162951EC633967352C75105A1222751EDFBB3E8B7293
223E4A4BDCAD32202C7F74C30A4646D8726DD73FFCC29E840E63F394C4C8430B
BD1F3153BB1E66022BCB537FA3A6C25EF78B6F2C46B77A7D53B3279DA33F642F
5DE17539622660DBAB749090871FD2316356C3CF06A91C410E44056CCA77FAA2
7A113345C9C161A28C5A324D31BD263AA0CFC82F068E794CB441B2B9A507D9AA
37DA5DD9B810AB2EF183413A4CE70C72CF3197C6081BB1F324610D663A4660FE
64C1C440D1C80183C887483EA284E78817612C5C9614AF82D00B6895632E14BA
86B1F60CBD8DCEE1CB5DA1D8CFD55EB82E0C85A089269EDD6833F4E0B6D1FC1E
4CE9448CD7D00E32944D0FAA5292F033D14210D77EB45DDACBAC1620BCE64123
0920C23A8013455E9BA7748B405513A645769B48F4B3C4262F57BB6A235C3D76
4A0802A5200C4849996452E00664414FC96496FBEF5AF7E2981B87B73D560A8E
6EE0BEE3408D38C8E6AD2E1BD1156AC74542B942B0A4F70B64F7A89EB8D38654
59C0D529C5B2F5AA944765B7D49D7C68A5870CA8EF1A62A95F4DF4B1F9DB4136
0FBB27DAA529E2F8B9C28DF99C52F1D2FDA7B8516FF32957645D0C67E537C0BD
61BCDA039B3EE1860D5F11A241C4889FC8C0F634CABABB7F98186E798755FB13
C9221F730F4CE2BECA91F339C3896853A35518DFB99CA7E44B6E03DABF8ABB73
228AB478B97E3C9BA08A087D28C9FFD6BC993137C87A7B37139BBF1B73164EC0
CAF0220DBD01CBF5D8D8F19B865E66B69ADCF5483242CAD88E2A1CEC71BB6272
E685C5F8A29CA84232541A96105BE1A2257B4D7C74F6EBE32208A0FE35E1DECD
ABE9F3842581C3BB3F68A47752328AC1739C09CFB5587C76033F9B4060A18B6D
EE60E11D3BA1E93BE227D89FF6216A1EFF438C99F6E250732F66ECEA7FF3651B
22D701A6B519EF62DAAB98AE689B123B0AB9DB5F41B6D87DDD46BE13F00C6F86
95B522E627AF81F344C3F9F2EE828477079CC7130332A749CCBE017017496617
E1B2E8847C9132640393DBF2D0C1EC341461AE26F428D17844435F1345E4BBD6
3B242308421A7757BAD964F6AE9BD078C9427B174A2F92998B18CEFCAA047423
9049077DDDBB1713933221F95DE894A8F0FB390C4649872B940E5DDB2E08060E
2CC989BA3E13B958C0DF5AAF91F50D9A6FE49BC4CF9BCC9CF53232454B14C15C
5E30DF58127606B9C5DFFF8BCFDF1D312FC0FC0162F47FB4D8D9034DC5D7019E
C8C6A5E352C6081C7499C62B1B92480E596306020FF1E48DE492F636B1366083
9C127427043AD46CCEC31DE1F915D8B09E42056D7593BCE01EA2D5ADB97D5DA7
8FF66365BAAEF06D3651D7123E51FC178A75D6FBC4DA336B0BAF2478E2EC0831
604AA066E954A3BECE34509B27893201D6A1F0345A1D96F586E87B72099D91EA
83606B1200CD3363AFF2FD87ED4FEE8609D0CF6703CD80DDA7DE02F19CBADB92
6CBBB90821443AA81AD81F67944AE235F4F872E636F24BA68ECAFED1366825DC
1C0B04884EB55F2EA19B8C272B6A0DD805B9332C6A5697AF3491CC68D7712A43
140E2D2DE373E3F28B2E49653CBE9DF8E2797BB52CA05603870FE7C734D80223
EA7377660C06E7682033B4376512D85F65AD30E430DCA4174ED71906506F85A3
86DC278C8FF2332EEE25C2206D6CF1A194D6CB294B93E219C21A4E8216F40D08
D41BB93BCF32607F9E628E91A4E172C9736F811B0220B934EFF6F56B3803A14D
5733DAA7A3AB853B29386CA34E4A44B1C6C8B9268AF4AAA89B39AC8DAC01837F
111C5C953AF2AD1D5379D3B8E694DCB2CA8370DA39E1D47F152AF583CAE41F7F
7FE0AA3F1F7DD91B9783F5A9962D953AF02C2FD19225D25382E07A0336503D42
33BF90478DF1B3289B974267D5877B6EEE9386A8379641452AD02996E791CE86
81999D7C8CE7081C670C81DC8A4A3A66DC9C5296DFDE89C5BA45AA1E939DF93C
FED25C8D5208E1E3019BFD5218EBE79578A0724622D764DE170BD68494C1F451
82EED27CA9EA568EC57FB9497875577DDDEA8FB03F750A52C070289822BB0302
829D92FD0DF79B13EB5D68B45BDF736A27654BC2ED09432126320B45EAA8E7D3
05ACCE79E0A80729DA7693BF3BBC6F67859F13BE58CC190AE494135DA16F1B90
356C4A2900210FE250E64C24A95C9342F0DCC0ADAC14486162CEB2E22875FDD5
C9D9DDD7BCCEA2ACF14D47E189148650A77064A6F44AB8719B95C8C26C9CA26B
A670D4EE31D159EB90A8F016953104BF2422B1B8B7C195E8AFFE85D7D0D854C5
AE42B7888DB9FEEBB7BB5138A9E24821DCDEA49FBDB8D9EB3BA37CB97F6454E1
E4F307C058B8294A41E9FE49A53A3812D7DBF47D9E8A2D353B48627896C25701
D9477A7DAC80AF7C8244917DA635EEFA010F63B43651191055025C731C764200
BAC03D1AA472AD0AC83123EEE4AB04EE89A019EB6E90DD5E9973BAC93A9F59AC
6A0BA462BADF76E107548BA0552E4D03D2F128BD64DB4923B9DEB2FD22CDF770
BB77CEA13495326FAF275170DC2721E8C240B2D22FFCD960B94C55460A557DB6
EB9AF74F08F2F02F17C0B8C688C3CCBD2BC6A26E593FD039B6286A4364A8CE71
574F2DEA72E061762B22C9602340B1CE77697C7F524665CD2AB7CCB157D88E49
686B6617F9C88A313272183BFDF418D3C46EE0B1269CC8781920E59102698251
2AD84206EC1ED85DD0A6F34D79C334F50022691E5563F07283E49DBD9F21FD36
4FE19CA9900D7EA1FA90216B1669E181812CA10484EC4E07E2D8280936D64295
7E03907AC5DAFB9CFCA7DFD640CE95BD62F6897E7B0D038A4A4B1D287878F403
08D23203C4A7ED7C3749F7BD1B13EED7F2F71AC7F6A5CE61D1CA97E36D7C6AEA
0BD09640DD342E56BB1C3F176142CAF7ED3F5A5DB46DE2E54C06B408FEE21A97
F31FFDE8FB9BE9BF4F13A4EE73586B4F91F33EE4610E4D94EE9BF9F3D89D9A11
DE5919F4BF95FFCEEF674305B3E949B9582809DEACD7DDCE93DE5FA5E876404A
4C165BD5DEBE5D7ED7ED6F8C75138A83B673445D044F0EB121A0BE327A0025E4
4B721D9294828FC4A171C1ED8263707E8ADA8ABECBAFB6970976543E664CD260
DE6E0F952A49E05F699731B407CF216339BF06F145EDD053B84BABFA33000D7C
51D4253593E6212D4D8F4A3040F5B53C533058216AEA6D0F10053D9954E2E91E
CF85F7F594BDB404FA29C34B570EC075B3C75E19D0E066ECDF76816093C10D92
274C92D749F2FCEFFBB326FD9BB6723BEB408077B9CAC7941B2D4108A556AF6E
5707B5099D38E8FC094A8241D21AD4A58AD06AA5691C9898813E5A4AC9BD0087
BFA2F2DBC3A77812A61DF88B80A192FE55A90B9B3B2437BF186D7A00F69281D9
1814C47A0A3B7A3BB5D814374090F86E2DD422C689194D00360A581A8964DEEB
2AA97402EDBE762406ADB00FBCC372FBD2F1BB67D4C9DC6922D65246C6B4FE59
5FF51E3AB42246EECA37B46BB85B0B2DBD7B5E76F62A4DBCF54D19ECD6F5B564
1059C696CBDC4AA4D640AB7E1E74DDA3963D32C8C969393B4AE02E44D31A948E
810B9E586F71702408EBED54E799C32C6FE72160E5C9359BF85E926BF67D475B
3FFE5B6688B3B27CE386E5EAA7A849DA5874E0AA8FD1BC60155DCE7E8402D6CD
FC6BD2AB44F007DA3A38B10FBB803D0C68450C78988C314E43828D4F90ADC6DD
7021B0FD57E905D58AD704194A8C879F7BEF33244ECEF4405FCF7F9871234506
BEF22737891913D14DB366F3BECEB343A8047BCDDDC054CB3867AF0B7E340E39
81CC10BA0764439C59D4C890589C7FFC9F6EF171A9A4FA400DB65784DB625D4D
F5AD80F9C357CA8E2424585B9D34982C57A0C2B8A983D7B5A446BF526A58DA46
82C9F22549FE68EBA67F6C4EE8337CC2563BFAB7A1C79DBE2F3BF63F0689CC59
F56106EE7EFA0BDED029D2273032E1C8A5CD079E1CC01AC4E1B0D4D1EE29CD49
4FCA416C38E53BD18E68DF32BEEB029BCD522C9B251CDC1DD9A61B8CC551D5AA
149AD112C4F126C7CBE20EA13A827CA3FF3C4A35953AFC7BE05BD4CF0C23FC21
F90CC229C62C8A0542F6625375E36B16D705D83182BC688814E187C23A828100
63B8ACDDB2974E084AD5229FCBF7E3025D33426F3112E17476602F3D7B5AA66A
C7125730106974E52C0A1565B1A11ED423ED125E3A51070FF30756B7C044FE77
8149E5795166423DBE5D30C0453E411C9392B1F863F63D112DFDDD7FF4E0CEE6
8EB3082D1590514F51DCAB69A49F4499066BCDDBD6A90DADFDC11833C93646E1
663AAFD236FDD824E7C71AD69173FAE067B8FC146BB19143CCE20C908DAD7306
09D523675B596817F2328747CF673CF8BF91B12440D8F2AD05DC5B65B3AF6287
C9E0C8223427699086BB41DC31C235D20B206326C7E3C9BFD2C9082CD5F8B74D
44AAAF83E4E04ACEA44C5BAD0BB5C703AB24CC6AA36A96D66D67F077FD6D0977
E804135E5613CDE40BDA7901157A5FE0D7C76E8BA15289EAA86BB14549D63F4E
170943189C62C9D370C182723B4FAA322BBFC8AD59B3F6634AB32C24553F137A
F0D768D30A071BFEC6663C275934BF33671BD55C838F4ABD354EB28A18365337
38405E9B7AB69DC77FE9A283B3A8C6A7A51CA6C439B5A799005E94BD1FAA0B18
4B920E187FF40C352A5AA48B228CF68EE0032B1968EB88119A375D48DECF4A10
A9B75142A4F86E27E5BF5701F9D4D8E41705886E3C6CCF19C49E038F56DB0698
B5AD852CBD82C7828675D03A38D11BF9A3E8B0E5080A1994B7689E5EC50F5A70
C74D849A687903AF43FEF1EF0E50E84F9E953A93881BD90FE788F6D726A04A5D
06B0C05E69A239F52F5C35FDD58CCE004BCF212516296D5EFE0E2EA6E2FD72EF
70B19D9F34F5BF921A7F042B8F51E4F01551966A7BC6611F6ECE7630D8562319
CE3E1F43F07D3DDDDE40C2AEDAA5507112C6D45939C9425C116B70C4970DF70D
9815F55759FDBE6A5E05F302E15CA31E9F36660AA3F1F95119B1CABD8DE5F42B
0018F834D058A09E910DF1314D1B5F15D7811F33F65FC182620836FF3FA6A71F
C346A14CAA78F5A99FBA80F0E24128E0045A5C6DDAC94750B6006CCF2148538F
83E41AA6E52A13B5158AC5667F8941D6D74BCF304A825C3D1783A46FE5C046E3
0F75E8935FD4D26011E38EC99F57AD5A1601A6C2E44D2B6799B72E8CA71E0383
F85FB9B692A0A29241EE13B4F6714D41A2D01D78ABB769BA0DAB927E1D420A61
A18D59779EAC757499D029A9EE05742C16C60A4341B505BB4602DDC56B1984FB
5724EA4468506521BD15E02CB2F4E5B602F552176C0C5EBF4434464C47F8DF4D
B69281479EF18DA223789EE921415D8D35C6D0A1B3322114B056BD56EDF5FA05
A0E5C82C9F43A749101509FEB31E38C10077F1BAFD0B8A99CDD5B85319EA3EAB
F03C0D21319F3267804C0E1CA01CB77AE4C33494AD1E41A896F478DAC8B747F6
047167C70EF4AD2D5D52433741A0018C54C0761615331EFE8705A1FCEAA9ED39
DD8FCF258C2AA5852113C51CFC868904D6C7BD60AA55CF4475D4C58B263DA152
F71DC4BD048135442CEDDD4EAE1E5E9D914DDFDEFA36EDF8594D3A81C490B04B
0CA0A969E41E3F04FA629E2B66496618D086720A71FAFBE2C80951B24AAACDF1
29B2BB843A37952B2A43415B8C958B346537659450D64195B170A79B36647869
550C5C73D8A9AE183F083F4068CD684517F4E2FDFC11A7338F380927E5F20F65
E61032E53BD00CF04528740073D2F18F5E535CF1F0D0D082C889B4F6866A35C6
886917A3F76B65763C33A2E304A8613CC4A32BA721ED799F3331089296F1FC45
B7C9C6A02A07D2AD874259873D13F3CCEB4F8AEAEA695E5C142F415C1F3ABD0F
9439A29579E6FA642B41A92109FCE043C39CFE18B2F8F923A7F52E89E0F168D4
D12950FA0B17EBE7E676C5E99F01E0BE84E18505891086618044B4EE0F4C3D3A
B7CC8FCB90B35B3081FED4A12C27B85CC6A3E545A312C95C6F212F9662772EB6
94E6FEDCFBE292901F033C34089EC1F2361A3273713D498EB30FBE4BD9280FA8
A4540191BC81B64887CEEAFF2BF405D96F6E8042559F48BB0767A8B58DB5CC70
2D415042E3F8ECB0A02D9EED192135EC9D5949D482127CA20F8DD56C8A500C6E
34DE1ABBCDEE9718EA4F30EEE3A578921580C7A2F06577BFFDDAF3CA87730A9C
FF0CDD365650AEAA5E1D52D8F88DD499F4A6FB9137CBE9607998FFE1B4D2716B
A61F704CAA3FDDA36057255A7DF6BD8BA147130E2A1A77170EE1A7183F0C1B4C
C993A9AF084A8D82C5E24E3A304AFB4241A864E4B01F03EBADC6FB78732E8A12
E8BA5F4AE1D53FF5A240620491E2C870B30F3A593DA2285CC25AC742E871E4DB
EE29A0F626822AA8AADCD068449EABAE9C4E28C2B3D19F65A6F56EC07545AB05
B3175433ECDF6F8FDC131E6451C2BB0542A392A103708AF3E1307BEC8F2D7150
D3DD96FFF0CAF70D2D7E3AEDA117B70DAE1E42F0DC78EEF354F2C38BEB1A880A
BD8BF0F937D4A471DBE60ACBA39AB615F9544212A115ECFB15B40092DC0D71B8
C221F564E3B93CE0D23790EA5E9BD2275EDD5E425366E26B7059BBB61BC94E17
0AF0066B4EA38D4011CA65109CBCE47B48D58984776B4AA1E6632B22D5107325
266CE303564392765BED6929A456CEDC82C054F197229990E895ABB45C025946
F9366019591519AE169E8FA1F6F808C43DA006698399483AED27A07EF6E537CB
426F36B8B25C78699A3148EF175B03D90669BEF7776FAC169757D9D3424A06CF
9292A3376F58135BCFA5DE0696385BB0FFB6345B7EEC21931BF330814434F81A
3EB16EFAC41D22D1BF4B1BE170F38D9A45A973757BC16CC50504033125D2A68A
1A3A8E699CB21CBF1E702A43C212F7FDBB168337708E7C06FDEFB063F4E02A5A
1B8F12733514B688408CA41A774942C17DFFCE05DC54B842DD18327F9E0C9E98
96C760A9899F741128948A218EDA86F30574CAEBB8230076EA5E6CCA11C47786
5B61FF0136346A52E994D5242B0ED5DDD4C60E1A40B44AD657AFF96B2ABE4AE0
125D437EAE57CE8C23F82FA31232BF9D0CF9C597D22FF591A28B7C092E86B9F9
97DEA662B7342EFDC90B3BCAB589A886476FDB87A09306545DAE42BAA134F0D1
D50D98C4B17E2B63710D88D628814DA7F9A3B711FE5F7E13D6E20F68B5737476
4818176A2720844B18EA91B95602F465D1AD4B2783B323A31BF1830B1ED3BB92
4EE2CF3F5C7528E7A63DE56E06B3A2480DA075AA929C4C36BF112678869F9D19
545D044EBCF26BF1541090FDE196E3F97A6B18CD1506FD25BC134B927467A32C
20AC38D1F0CB9EA474CD36F2720EEC06C030DC43B2245F9D24D31A31F06EBC65
72DEE710A5E013BD7D621A9025FAA444DBC3E4C66B45340453A5AC0E023B8822
2494C12651894A8DD97D27867D8EB198E5951AED115AE9D4C6DABB42C2035536
E8F7DBD8DA7CC2A3C34064F90B5E8A643C8CA2B2F12BBDECD47B7703F6479794
2F9227920CAAD43D1B48EC23887DF78F2CD7326EC4D7384A9D9A09994282B995
485CE83DD7A6C3B30391D9930C9E18593DD2F1E08EFAC50CFA70C2134915E9F3
0A660C18FDDCAAEFBF2F322A01DD3287F693B7A11AE8C8203622C7290DE1B055
8AB5F9CB60A2B2B7D3726D4D06CAA2CB08BE135A12D2EB4A3E9A6542B4291DEF
BDA8F376A832B053707AD1F1219AD80D394D7EF737E0276B998EF4993A3F78CF
43157D77C71A385C3A77DE10828C2AAA8D65134C4D26D4C4833DB43341AA37BF
E2058C59E1203EBA3B15A1606418D058D7B7A624A24E9ADD421346F6422F76D7
CB479166C84CF5342B479A465137BD820832EE94D79A8BABE4EBF1155F34FDD9
BB4E925596FE4DDA936CC61226CEB55619FFB12C70FFED18061145BAD931651A
4B1EFA75138BF517C6C8B730247D8934141C5D8151C53D2238E62FC9AA3B0AD9
C6C4112ECA1325C0D9620309096E24356766D3F9D51BF73E000254A8671C3523
CAB620C1D129E62EFDF0BDB775895C4746ECF87F40A23A8418AC95DAC70421A0
A59116948B1C5D105C70F57C53A8F04B547D3716A3CFEB9E338EF0D7B0FA721D
7D11990750232FA3B017ED27EBA786DEA3D1CD36DBE5110E1D36C2F94FD18702
11D121430D11E87AA6C12083B29AAEA996FA94026515A54F2879BB03C350A0B6
C5ECDAD7BAA8CECDD14E6C682FC8663358A8B205832879EEEBA63035395B711F
6071854B27E61664C83BEEA0958198AE0AE0E053DFB6D4EE2B98E0C1D30AF2F4
B677D1DEAB83F49CF037D26A9F52B1731ACC17C5615AD01DD26C08A41B8BE616
FE65027893E5710855134A80FAFFA126081DEF3224534DF61860A6F118E90B18
0B45D06B34D1A0C76B930E62B8E7BAF4C59111DFEA8B5DC7B742EB20E7EAA201
549DB2B3D76B774E1ACBF2A59249A4ED17141E8776F8B18AE288B50254B5D5B1
B6C459CD74B754A810AC81E5336F59B16369B2D2AF3AE6389BD72E06CFC75879
62AAD68028B2A7F3B6102F19D4C26C51B773151E91659F532E4CFDE9BA5C2A9E
F695080C2C3A5459F52DF5237EE2205F872E0EE7EEAC4CAD991C4DA475602C98
D1064DBF03040BE13AD3C4C7E735A3ACCB6B40E2A292104D656F6B16DABBEFA4
9000C283DAF19CCF88634833F3A62F55D62CB7BE9E3F451A4DCF54441D2E2D5B
38F8D4FF1997C65248EE0E5719FFC45010EEEBE12BACE36A13BEE331237AA38D
01600B58A83FBC8DB8D654C0B56D514C4F791D4AD8AF80B93D29504FB145CA39
1948FF22941F69BF1CC3472FC886E003A60E71436E0A85FDEB9A467F44262EED
B72C0C8CB130D5640E351CBD65394E3E0D962690F98D5ED7C10518B7AF4FC2F5
6904C2849F7F05BD9E5029B6C2916D534F40CFC7F7F2350C62A192333E154181
56EEEAACBB101E12DE774C78A0BAF5850C2E53334AFBF076DC71C71437D6B136
DFE42B145626CDD287909F4E902B150E3DBD0D3DEC9CAB1588E1268772307DC1
68E01E794966B0A1A42667DCED2DA7546D2A60525DC13209A1520E13A233B5C6
494E5E3B14FA09EF6982B1220A197516A2E4526C01077017D8F2FF9F6F88AD24
5098A9CFAE5B41B8D662852F9EF2C32B53258B6BF4A4A856647C3240A6D94822
1585703F20FB70E37A26C6C3F2E101693C94613C3DBFF6AFE7BF2F88E03DBDFC
145E871C2D19239E84A8496DC83B98128FCE221AB56BE701148A9A15B7F77CA1
A184B63EA0CB7C9786C3BE9F3808FC75BBF201A2964E4156E1C80120F4830EFE
D869EFAEFAF12C3224131CB669B756D7DE96288222477782B094D53A5A4D3AE1
C38CDB5F158CB22AA3FBFBE9BB816B42EDF445E9984AD71187BE7CB54A32523B
FF6131D4CBD8880F84CC37CCFE66FF418B4417F2A340DD19BD2BEC8DFD3042E2
7438CBB389612CFB0ECBE84419F3E20418C7AA4D499D43A8B60D7A0DB9382D02
341A949FB7671F3DCB141F5395AD9CB286C8B6C073756AB81FF17FA4A20F1814
0F32F26BEA6DD89C925C7508AABC6777A648FDB999386F6168C40FD16885A589
F2A54FFC3B61FA204411DB939EBFFA88D1BB317EFBB6327C7A58C32B7EC61E25
A04D9693D78163BD216D3ECEB4A0FF7BED9BBBA6BCABDF0F1771AEDE8BA1D267
A8DDEB17CD3FB3E4038F50162676F6D777C370DDADAED2C7DB7CB540CFC45DE1
634C04CFAAD333FDF84E0F33A2EDCB2BA1490D7BA7606326881C5A6CCAAC22D5
454B2C1EB45B9D96CA4FABA813FDA935FA86C092E2DF9B35F469AE62DAFA65AD
E7B824DCB6753DCD8534FB2CB20A8A656F49047EAFA1BA4C17BF640D2AF1E0F4
06AC8B4ABBB048A9F53859FD9E1D5455234F366F8919BBA377177966F8074B8F
D60D1E9B8A9DFD05C44C457C2669807F31630BB73E0CAD1BCD5F7FBC20299D5C
6FC1EDDFCE777B7965B811FA558E3CD6B827A8DB1FC3466DBF5CA45728E92D64
CF29609451258BDE7360066362DB24465EFBADDE9F7B5ED44E2590664FBDDC6F
E2646B6845D9D4835F7F3C780DE2CA3A0D84229C2226465DBD27291A7AAD14E9
4BB12997A2B342229925F735E97C672C57F9804BD0F19FDA16BE99006CBD7ECB
89DC076D15B258E525FA7BB0D4ED3D87AE473351ABD014CD380CEF7BFBB68CDB
7C90D8A54D59E7A06C58C5F01079E5CA265FC20C5927E8126158C0FFE1421AA0
F101BA284D079A7D06D8D7E20E0C2AE62CC39829DC8A2ABDFC584BBBC8AB8932
CBFDFB9FB5C528B55B1CF4B2482D465B5835341350E215B0D55DD7152BDA923F
93BEBF07575429B6988C81065A6869DD702DD744EFBFFCCAF634AE7A1D21B652
818AABE247C5DEA494BCCBC9C485FC65A15BFEA340D7244018F9B4B870CD12D3
C314505BE94706322FD8812BB27937AFD964103D3B723556073465C309812109
62424D9BC090DA2B2C956B57A0821BFDF2DA7DF431DEFC08A052F306F0BD8DF4
D339082EBAC87CC6DFC9037D44F95539FD703058C00BE30ACACB48DA6611E0ED
9D102FC5598792E6234F866EBD869E1C46E86FE01EB1933E3D0E464E5C295447
0D1AF078E92560FB682B0123147E9E8CD09DAFD054A06A3BAFAD4B90F90DEFBD
39D68F1405CC37786A223D607F6008C449CFE000A0ABE41BAB5E0DDF849609B9
D074523F50CB0EC9013F7EA391C8922ED288DA4ED0C816667A185C00E06E6A16
131CA22ABAF75E6672E59F8A4DD69873998EB366AA299FC67178BBC57EB673F3
8730E2C28131A60E96B9FC9B3861D3CF617825F05997FC1E53879C06C61DADB5
151507CAE41FE79A3C4A77551CEED3B636E2F951F791B14D83F1DF955796BD15
D834C535627653466D91566F85A386DC278C8F7253779EB9D278001C9C553BB1
66286F420E2AC6581D9412AD27D7FBC6B336732C3631298FD17882ECA5EFA074
91007B8F78680B3F7D0B5846E652019DA8C9A7838F84A7522F835F9D0AC73865
D83810A3A6B72B91DCC5B8A7A8D1EC0F93B3F80E136484827773BA2CED4836EB
5768EB415F51A30DCB0AF7C988AB25F12A87D1E1512FF7164D1DFFD0226D5405
27F178815DA109C80D6CC9DDDAE267992846C6EDA2A2DED66BF5952BE904C310
4E28F1B53220C504AB95C5232A86199FC1295D8BC52BBA9C50838D2C63E327E8
81F994B1C0C4B384265CCCD74CFE697EA50C3E1F7947C49168E23A66FDA1F9ED
E6A6FCC1F8659C3EC2DD448AD00C0CFC079AF2D889F25658D869112EBAF0091F
25A923EA9D4730372E32CA0817B42639F598B83F92566EE90D0ADD345519DDAA
4EFBF1D0D6799173910215E971D4F9F578518E37E431CD2798239CC4C945CB4C
B66F3FA5F7EBD0A7DEDA931A3F3AB2A52ADDF6E33D3AF39EBCAEDB8A304BDAF7
DD61B19C7B287EAE62C7BC02B9D471D1594AC915B4676F69BDBD0776126ECE1C
F4A22B3EA98F5ADA485A644A34CD0F70B5ADA7DCC9E806291CEBA3DB1E042443
B665E915991D932209B3F4C42F258C4A133F7EE497B6EACE17516DCADD90525F
504CEE40395B415F9565E574B571CC7AC0511ECACD8027FA7892E91B0A972678
A8E98315860D63EFE6178FD39A87A6C9A376D9BD1234205A958E9E890BAE1B6B
240F0D15EFD2F3ADE59460C435361B9EE2378B0B2365178CE4F3BB45F535BB05
2A6CF39E315C95B7240F7804FB33719DEF3F67DF287C8B2340D731E4495446B5
AADC2BF18D30D32A60D523DB46B6CDE4850FC590521E5A271A26B5B959E875A1
B3B51614D099793608B494CD1AB564A93AC278980521ED35A9488016DC834C3F
251F5A4E3AD99E4E404032535AE4C56D3C57E149950530150E84E9B7E299AC98
635A3B2D165BE1EDB5DFB1C5BB9BA31375DC3B55F0C68F93FED15F84AD9FA360
3E01C7D010B78C3B9414FF55CC72A2B5F824FBE9640FCFEC076BC0E371CA7B1F
80DCF6A8E50F91A710D45B30E8EBBD68E61E053B77996E07A42BEE7006163F27
C1F3BF5602E2D064A0ADD3597B3C6C3E47CC47849045F8F102291FFD3A80B11F
B6A6ED40B47D4878AF3E57DC2BDAEB702133362C3BE748AE0594653E8BA7B510
CC94497F803AC62558BA9E6AD51A221B58CEDE41C0FAFBF0AF065F15BB08EDBE
D069F727D16F1685C2AA35DEA9116F905A9C8821C34D73DDF2449FF9BAD1A82E
37A0917C7540F72DD340C5FDE7E46DC332E821B3261D18BFE50EE85DA0FD31E9
C9379F2B34400236536F07E0843BB53B618F442392B6CE42FE914BCA7ADBD9C1
7FDFC50C5B91E58C0463515FCE64FBC2EF64287F63007EC0A62410BF4A7BA4A9
AE7906DA8172A1DF44040A8CE35D1D4B8053F8410BA02AF4B729C1B4A0749412
DBBE855510E12C43544E295D6993AFDB2DAA6D351CDFECA832EB995E27D36E01
9C85917C8D9FC4EC1D135BDCEB007669BA3D8F542C30426B0319183AFE51105A
FE458B2D6B16EC907138E1CD8BF43481123B7DC101ED010D5D1F68F48B1A0669
2958F76A3BDC4BBF848A96923CF172B9179AF15254AE6DC1C013D22B49ADD564
6568CBE8B9EA73AA69F006E7CAD5ACE5FE618C6E83C2FCA556F0EA77FEA7F72F
DCEF9EE393D6D288BC441BA24828CD39393C24D39B02BAB6260E53C1B29D9E8B
714D0380EC24A66466CFC43EEEC317F1A4D78C539AB076E1EB7385C906B852CC
F1FA7445CDB0F756F8A04517F98E89A9A107CA3AE6F3D90B16ED107E808CCA54
53D1B4E8B8CD262400B4E1EB356F6DD655D0A21886D51278293F8CA2548736D8
F75B2C9DD6601847BA3790E04CF48616C895F154057224C377236AFD405AF1B7
D0082183D51A95456A9CD41D9C7319A99C7A7A32A096EACAA13152672146F63F
19B4FE2F7FED34D5E02602BE45D254B0F9C17873CCE2744B1B559B2F51286109
824CBC076A2AB85132FB10A69CB7E63E6E0FCEC6AEE307A73FEBEF5A096E2632
4EC0C7BB8F260DA100142329ACDD00C6D503C338BE5FE59B368EC29ED24D1FB7
99E2F80773A80EF036F216AF00AF93E78FA758AAFC25A6FB25F44045DA0EFB37
094D3BA60B95605DA55CAF2DF286161B57E639140D8EBFE8442337F85724CF21
DEB3B160B9D8532EF5195F42A8B9E1A65767AA10D5BFAACDE8154DB2D1447E84
0A39D884FD3A1AF200B90F6C6A9E19CC3FC79BAF2E6AB7266F7C2A47A24EE80D
BD34ADAE1D8923B1BD0582C1EE845BD486E5BD1CDD7858AD3C6F0C5D55092113
5F8CF190B13929DBFCFE847F7FB80A2D454BBF47E91176FAF07AC9996922D9F3
17853626684DBC275833E760E5C54FAC4B9D2685DF73B05AF5FDD9CCD343AD02
3E1151CFFAB49A6486D554B9CDFD5F9CF12359A3411D3D5D9665A8398F16EE6E
F2FAA0615532EAE51CA274C1126CEFDC7136E7B8E04DB18BBF592F77B9090186
ACD058E5D4027F0C50FB1669230ED461AB43206F99C5FD110991F3F302A5ABCC
BA9AC1B647B0E283F9C147EE4FA408457036BA209B9973D66620B2CD2340E27E
7579AD9D5540C0B4645B2738E49E168656929EC890154CE9646EE4FABA5420B6
55E08C5AA7C8993A73DE55E6C60312C9B5028A33D8BCF5011C6DC7A72518C88A
9FCD33F9D8C0E197CF1B0C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic10-Regular
%!PS-AdobeFont-1.0: LMMathItalic10-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 694 194 0
%%EndComments
FontDirectory/LMMathItalic10-Regular known{/LMMathItalic10-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic10-Regular)readonly def
/FamilyName(LMMathItalic10)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -146 def
/UnderlineThickness 40 def
end readonly def
/FontName /LMMathItalic10-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-32 -250 1048 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E4018CA53FFC8B28E49B30E8028C685C8FFFC2
3C0E2BAF712D9A4BE80B6E38C9F5A449DD2DCD493C0A130001F01DB02EE2BE50
8CF3C1EE0898661980578B4396FB3179F301761100231D260FCA63E74EDCCEC8
08E4BD0AB6545195F32F881C99FE3877DF3BC94657DAE2BD20767AE9DA7D582A
DF256F4A52C57F9D228B3E1CC5DC93FDDE8E791DB1E6FA18E0B9B2423868792A
2BC90B78D9F9640524C758D0FEFB713A9A0D66350CD78C8FC945A63D8C07C8FF
5D66E1D7D963B7567F270FB876D2FF1E76F1FC1AD80246E413D337A718699FE7
EC080448FCCD4B5AD8453287D86BC727C140A6B2C1F62439396AEDC897D546C6
F8241122821F88FE9BA1342B044AE9A33CE496ABD5D7F76B1CBCD331A08C6DD4
37A78E15453AE3B1AB6664CFBD92B9982E6C0F5AAD267804425AEC523A184899
3A2D0259E64F914D353ED128EA5774EA6F87DEFDD1BCA35A413EA5D75E42E3B5
66539B7414AF09F23C1DAEFD913327B6CBEE7B5F6258CFB98B288A2A2019D344
E9335FA5D1887F0A3E6CD430AA65E3A59B396F035C7E84875F5A5E374875FE5F
2B49567A6E8C851A51D8BA4F6AF388BAFFF88D02B166F37F0CE1D4D4201AE26E
047084E2ED3E3662B60089E355AEFEB3964748C5F836C437C042B64BE3AF79DE
75AC4E7255CEC0F20E6D9400D29BC8D9BC2FF1E08D8E020F33BDEA08A38A5E90
CDD238866C66BFEF1B3B61F2564CCDD80BD048586674B94291DB7268CF59686E
D95927FBF8CD3224572B687E01791F40D51A230B9F12EFD86A7F90A0978CF220
FA314AB43197FE6E7C4F22C4BF4C4DF7ACC7EFE7C6B152984BE0FFDD1714ABB9
CE834B59B859F89231021E34E2BEF6C78D5697E25CB5D72D2A5F8093158818EC
60233DE494228ED13DC8AB6685A5332341BC02AB2064AA00FBE26BFD27263C04
461327FBAA2D88B6D1477815F4188980ECF40CD3AD1E29DFA34769ABC993DE8A
AF8A0E27487EA582D55886C3B2F6DED5322AA7F265EF97187DDAE8237E4A34D9
C496BB1C04588AE85FA5B209321554AF2252858B319283FC9468887C282A8537
29BD1E86B7A26AC1D3470F561C13613A73572D79A8CBE1180F4C4E8BEE8EC0B0
14E2B65B5E8054506521227674339C79F366B6CAB4CB030073A615CD431B3DE8
E976AA00381C839090AFFC5C48702C64B2D305028366D810D7405659AD7B93E9
158078FFFE77651C1EA94240333902BD14B491EDD5ED45B5EAC15D0DD1F5E139
BA03B56B4F22A00BCCDCF8981EEC9967FEBC63EC93309079B67FEC6DC18DFF01
5040041C6F3B1408B4F042511EC56F137F9AF0B731B5D5FDCE44CD7E70BEA2A6
606EACA03A54CA9CE8C9CFE3F9F1131B33363FFDE1FD27DF478649C50623588B
B7F63A87FB6BFE076C9717521CFC6F8F33593D07ED2E2A5516A30A8667B92242
1BA8559BD466B2F62D8D6EA11ED1B13D69DF2C14FCA7D57EB3CC09C3A6B27387
EAA181AB510F32CD8EB449FEEC201E37A3553D38128A611D96C052A24CAEC824
F7319AB813E2A1EA173046C8BFB79B49B5CFD761BFD927B7B9CECE05113AD9BF
69CCB5214068670E7D1413D523D368708E1137F48001992B94A00F7158F9C662
52D46AB7B396DD0DE6D358E862480FDDE8DB752C179BBF55AE63F34C075A612C
0C647EA1A1689B117AEE285F80CEDB44DFA3BFD61709DD594C2DCF80CFBE0638
154D9E5C3675CC9C77B6AFDAA5AF5B66F82FEC760D76CCCD3CE85D1EB2CAC6E9
F19E5439B0CD4118D9EEED5A1921071D935A443448CA6B7EE48BCFA6F62103DC
C04839FBEB14A8344708375168367FD3751885E9FD18BE099ECF330F033A60E2
4FF98414D062C0D29C349244E7900EE1B1E52E5FB2A7413CA757F66821B784A2
53334655B29A9365505BF8DB55EAF7F039B262DA3D69808A51636131FD25A0B3
208CB7B59684ADCB994FC61A74371C5DAEFFEB25212C5D802A02FF3947F77CB3
50529A7E19F346E790C8C28714EC4B6E80C17C7F3990F05A8CD0AEA907D7E24F
4572C8DACD077B52628A1DDA670EBD14A62772F60AB7D5D13BDD7F21FD705021
03D2BB364B29474A1E2D5A8018591F45327875D739B73397AD867C54A96F719A
57A72DCA273F6BCA8C3C5032BD2AF78796BA66818A43821EB59728A9CFB75C82
F9A86EF901CD357C9B7C34C4F8E77C08ACB1815AD2EAD72D24172A27DA07A7B1
83B5F43B69EEAE06A50090EBBD94DE0F1FDDC3238C4D5EE4CBF020B209D9C451
6603C6D6F2D9CBE5448C1EBD6A597350DC37994E
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman8-Regular
%!PS-AdobeFont-1.0: LMRoman8-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman8-Regular known{/LMRoman8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman8-Regular)readonly def
/FamilyName(LMRoman8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMRoman8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-456 -292 1497 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ACF9EC5ACD0C55CBD5CA59BC7431
9A1B8A5D9D205BB7ADCE0B00796F130DE39286DF8195F0A302FD739C6A4DD495
117FF510D4D3A52986DABC0E5BDECD47E4592F241F4D1FEEEBD83FC02C54FFFB
57A301E60E5B25B0B2AB8D5F495CA059A6EC13FFE483B13F35B195D8A38806BA
04CC02C8067342BE4320A42D695854DB324847D78DEAE9C337F868E0DC1F281D
4CB637D6B16D59E5547364BC3C51D5BFA8AC7ACC376094D0067D963160AF7B34
5AFE3F8FA89E641F726FEF6C405DE255D7E6B93A68C93D1E807BDA02B030861A
BF781F4E12B373F2A268C710DC569C739BC2AC583053CB26E8482F794F9B631D
1A77D18D93FF3D3DF7C0DC6EA6922A939FE7AA43B8308936140D026DA9096E79
999C36B0DE7FFABA73582235CE49A74BB3BA9EA02BB652695A949F8E0587D5BD
38E51EDF4C987FE5AE9A6A5FCCE134D7F625BA663A61AEC4938CA78C49623FE0
EED33DA2D08CC78F86A807E791BC9CFCEB5C8DF4108A2F31940E5B6FA9B3D7F9
4DFBA2E7E60C1B615D0C774F1733C71B0CC90EA69D7D4B91920A764020A7907A
A29C1610A05FF2B714570697940A93D2B341E79C50F7D2C9A3C1BDA721B86619
A33A0F1EF6E18C3561948D168918EA5FF9DBAE24E6C0BF1ED456910E73F4C10B
29F2734F35E04F1F550C07F011E8E23D2AF6F0D7B52C2E5F201D6A990FC67A77
3FF5E12466692FD1B465A90F11032519ABC7C0308E276F190F7EDC493BA1FD3C
CBBEC050F7BBAB6E81B7FB2054E8DC92F54695C1588ACAE725782088E328C705
BE178689547E89215817838DBFB8DF7740107CE11D9F1E95F04ACAA904AECA8C
66082082F59CB8E5E7A96FFD63BF90F69931F3D5B5F81C3E234904D5FE5CCAD9
17381670D1548D72FE715FFA30FEBAC715513E0525049188B9D91BF7EBFF4444
ABA5490DC6A5CD8C1BF3EF1341A126980C7890794A85EF6CE32D227A9532B61E
E1FDB83CCE8849508A3EA0FDABE92387B526ED0C9A92315083DF5BEC01ECCC91
62D605160067EB251A8B40D3229C18FF655220D3DC72B74618CE98CDB7E370A0
BA04A0FFC4D3C3AFAD0869003BE33A0CC74D81D8BB0D87E5C0AE932B4309387E
9DBF69C52ABE85006D83B9020CC042DA9597CE1A2C03653896E07940025DD68C
11C8EF41CED336BB116AB3BE6175D6DD1CAF80144DD5D921D9F734EB854BE550
341FD8148EBCF4482E9D97738693472583DD53F4D15F219219825BEA068392E9
EC101A958BA3D4C45B156302AD722B13F05F71D8C40C2ED1766F45ECB609FDD6
6F3014B11E63D70CA13D96BD5AE19DAD78AD44C7C99DD91D71CC2A3E0EF74012
0DE42BF30706C80B42BB37178508EB5EB02F088194A4AEF86083F9A849BDD896
A9B2F6F431345964D7EC4F60EA071D0061F16D88796C4BA0C670D0E715ED9330
13619BC67D712BF7CEC27CE0B7ED8D31A29D7F2D8884AEABFBF6919D7FFD1E7D
0B2FA582811CDA7DEB06661A2D27741CECA6F2956BF0F2DCDF5326BD8683B5E3
828D8A7AE0C2040DE5F9ABF2B4CB8517A00888053AE978BDF45C9B464B9DA129
0584B298711CB71771E933AB92CA36C6D06E8D4E51000F60EB69CFE870326E00
4D436C27CC46EEF80FA1A05AB90D788643BDAC66F405924BF40E49AE3D7453C6
30FC3431FA13B333D69F672BCD4D19F6D70059D309B72D0A48EC241A28AE69C4
8B50DDF960297D39DF2B708BEF605075EE15741BE0742A7D74895BC47DCAA02E
982F9ED1C700AE14F72B455074678DFDBED70D546BC7E2C50ED4DC57B3D87551
CE86D4E2DB7607F065FACA01BF64480CC5A1E88D7CB8E40CD6C4FA69CF3A22D2
52AEBA66664944DB03B6DC1452701BF67FF30DFFE27926F7BC36D2193386935E
6A69C5868A268D1D3E1D71D757DE1530DFCBF7FB5979EF5F012CAF413DABCB32
90E29A0CECA45791C7D4E00573CE94A026B0FA081F6FFDBAF51A7673F6D60381
9A6EF16E2C6DA9D1EB555908CF057ECDBAD28147DAC67EB875748BAE25E1934F
0645BB84A6B098DCC8D21513741301029A9B2BB3A41F6D0503AA0DE9C012E610
B9840E263707E73B995B2EAE18188849E708A4E69F2C5A3E08AAD4A9BBC747FF
9A63EEB766D68A26681F75A165FB9D0C92DE633F84CCB5E4C8DFEC0195E99B6E
47CBE1D39D16881E6FA636A9B0CDA1509D95CA8A85A9EAA164A4716C56D153C9
6EBB269F3BA80EBDEC280D759C8B913411189CAD4224A4D4C8BE1515C1FE4492
D9383063C18A4DB69B44B73455D293113BDC0CCF64BA27965D2B38AF8599CBCF
DB6C84A32807C0BC46CFA13B270AB88AB7AC36E5075280062A516E93E883C04A
C3D262EFF193B26BFC0660B8A3DF7F12B1FE17E8AF3E3265D6206148C02FAD5A
125A6A7A6376AF4D646EB2A26E66C47738274E1AFBB463A91AAB97CBA9741C51
F951D86E0E4C62BFF030F461E614AC870A28CE055D4D77035D241AD41FAE4BB6
93A50E24F925F3A8D884C6E9A830E9148B0D9987F1BF8FCA62A6C6F745E45C34
0DB70968FAAED1226A949C78D176733CA1427F09CCC7D131A22F9DDD18A15283
213F9B0F7AAD043EA4F9F7EEE92BA769DC7E4C5AB3F50FE19F3A3904EC4C34A3
A78F5B436CF000514A8E7BA6FB5B44EC192D3FED3CC31D9AAC0C0C31DD9C7DC3
4C4784CDC350C8E81DD6435FC6A7C2B91B672FA23D9F875C001E76EA33DCB1F8
AF334B793677DC9D0D6B2CF2ED2DD23008CBB0A24F5EAA684B8EADC5D1A71CDE
74161A5086EE45A4C8FB699618C2AE3E8895EFBED6CF7509792BD183F5402C4A
A3E91301863DA4F8053BFCDBE68F1C2CD728BC91B95E7E66D0DE5659639825AC
78EAAF8F39D804D53E29C57A73059478EEC666E45CED43099074B3CE53E504C6
BFAC2BEF3663F1C2350D64791158CA280C98EABA19973BB596EEB41C7FAAB530
481B4AB41596674B6BE12B56A9E6EE5FBF33897F01997D214276B8B091875471
0147A13BA938FA06BDFE812F0FB311D0E9CBD331ECA61B000C13A681B5D7FEFB
9C0CD5A2FCEAFCB4B635CC9D88D8EF06C084C8DEA328EEFD604685676CFFF64C
9F2630CABF2F83D137D226B8523263395579F2B2D33E0A136C429A9D806C2CF8
AEA176A608FC51751104BB96EAF8314E2322C457EC60D2DC1454D461B2681AAC
16693FF62D9E03AB3AE26A53C93306F4A89AC8E95965A3C79C82898315CEE46A
6AFBDF1A183AB1941874DBB0AB81350F9F2283A52F8E07C3D70161F0724055E7
8899DDF3BCC34D14196EA4CF3C6BA6E9934C3911316220EFE099455232455F7E
A208FDE8268D1553651A1C434283570DBC57F42BF44CA3DC5AC833C4B0091084
660574D12B0EADD3B8305BECD06D47F6B05A5E7A47526378D488DE309608294E
D0A53C6BA6B301D3F42EEDB6BED24CEA54F2A2B020D2CF9F5F9F1FFEBC01C83C
BA3F6CB29E1EF0438DDC5EB12AECFAF8C4FCED792AD8C7B9CD4753C9727B327A
CED1EA729FBBF3D9C2829B9FA5A211732443B600E966EEB4D3F920E55F0E6BD4
1BAC278FE141FAF49FAE50A6507512690D2D5104B3992AB11DFE89911266E217
CC46FE08016C3DC5161B74DE04DA7417C7EA8C27B1E7BED385BA0DCD0C6ACE9F
E03A28780D3844CD4BABF0DF9B431F70B6C496DD25F8FA41BFBA01E07AE0F522
702E81A86686C5C030E18A42C47DD0FA1EE3521C98714EC451AB552F3EE72CB3
3BFBFED297799B3A802E0D2A06C44FD9C6B47AE6446BE3AF3FCBDE28D0DC1736
5CDB51FA59DA00CED66665A3E4D438F8BDA315D1E8670BFFEEC078E705BCC0DA
272517598EEA3CD6A1CFE29E8EBEC7D7E9A4DBB41CEED0EC58FEF37C9A7D9A7D
F4EFF9DA9D4652B327C72374404741498C4000C2162FB111DC49791DF75F175D
249B2D4A7B7413FEC95C8BCA7E891C86BE20492DF44B13A76A105AB3EB6E4378
F5AD746C2D25F4CA2B2F446208CDB468374F1739988E6D14A40F26E5328DEAED
0A901DF0CC73E8DC3A5C9DECB3581944C7C85F0A44CE535FE171321AE710E464
150C87BDDD09769ACF79E494464447C416FC35CA59D535567B2F7171AFB98424
E76D01937F9CFE3CF4E3779650D7C2DC3F0059915AE1A7B21172D02E3D78E253
519DC0941103489730ED6E7DB302E9AC30AE90D2AE24504F2E921D2557FAF16E
195C0E3F2B12B433D7DA1F634865DA6E5ED7511D694186EAF63F04F9415D7F1C
CF81D513116A2E9E6EB45092EF95A63990BCD918F159DA7EF9DF36E7380620F9
D73BF6990BA00B058A1C5C34638E09A21350BF64EA1E955D0F5EC4D983DD924F
F55317301762880139E036AEDC755475660D1AFB1F5B127A43914F29527629DC
EA9CF9854F6C51AD5D540ED0DE91985A236F4DC8677076CA4E4B0FF551ABBA11
FC9785DB9CD2CC8890632A1E50B6F2F4222034E26E42AED14A2966BAA5D3D3A3
961B7D738B10F304E91752899F9A3C1AA557285C8C775F413B373AEDC78AC0CE
9918EE8E8D4BBDEF36BCED98B84E5738188C4FFCD66ECFD735A9689D004933AB
E5E6C0FC027EC47FB0EDE4D2906CF1B55597831D98B646DA6B0C69F24E83A084
86E779A1BA8CD02C1BB8503242A870087B9F85EBA19C258FED32D4DD880655C0
CDB8C169ACC4ABB03DB2896A8BB113E12F4B886ED7E9FACAA68FC2FB7A553605
C6CFA1B2C02D360678126BC086FF6FFF378E0AAA0718A697547822B3B824A70D
A042C65F687D8908F985795BE887C1E4F85E3CC5AEF1EAA75C658E90F0246C18
C21CF384B32CFEF4FBF5EBD18C5BE8703DCB70D690515B24EE4F522613D9465E
2180A40A1C23D4216A8062CFB18651FDCBA25228D7B6683B6B51C027C06BCD3A
FF92A63E47A10AC688787E601DC5625947B3631DB34AB2DDB4A2FFE739911B51
15C55F586AC878E93ACF92274001003DDBFE3E55C525FD30BBC70CE036E5186A
0F8B4DD78A0A5C37E9B93E79D1D9B0E84535512013C74769E497F26D5398F8F3
6DB986C6C618AA75E527C04ED4016B8B54AC707EC422BB0E85C1503FF644C252
CB4F4DA0DCC64C94C196F2C10D4575E5CB29FB0A23F9C53B79046EBAC28FE44A
5C6567E3623006F57A08A575EA6C588C1995BC6F44655D0AC8B12981937937B0
E43F42F1AD03AC1325A524D676161B69DE290E27E9657E4FD709BB1F796F7BB9
128F40DFF158553C0116CEEC1724DBCF6E42D098C441C774A7C76703D9959B42
63530CDD9F31B7C8F2A54DFDE784CD3305A7DD1F97C80BA68B8A9403FF86C783
AAC1757F4BE23DFDA51D40DD9B05F6726E240C4B8D19A8710BC44799F3CD5358
9DCF268F5D3F506FEA7DE13ADF46393E057DF60E818663EBDBAC71788DAF9C07
FD188D0619DA2B13E92B7FA7AE6066B80CE0D7C7E5685138A0638F0C8EAC59E3
4D0C2E929AEF3C80B025322E66068006703767078952E44D6777D90350676B3B
2D3EFDA6667CFD49D2238D55D45C48100D4763E7A2F6F71C5CD8623B1DB3F5B9
33E3C7C42C5BE577545D553E8660DF4FC881B1B290AB76EBD11A36DF260B0B66
A960ADE0663431603335A8DD49D99E769BD738545F4D6B16E18F9986304859D5
F2FC0E0D81998509EAD65DE194EA5B249B7A07735A36737C99E1B7D6043FEC38
69C8AE6C99D80E14D8E02C1D3C4CD54DCCA57CA4B5329F4EA68F0840A73BD2DB
04987EB5A2D987AB37DA101E80040EB580E8B7B48ECA10C3B9FD2498D84BAC4D
6496461C46FCE4E987E770A4A7512B5276E36EC3072C6DC05BCA0035E1B2E05B
20D542B7E6C56A492E3BAE4763610CD8710C28A8E56506DDD2F63575C488C369
0FDD80D52109B4D0045823A5B4C20D441996D671C582A6F5E57840EBD7706D36
B4D7B1080089A09EF7487C5B23731B3E3C83CA192C3C660AE3200CD9B5E64328
E0B31D43DA5529BB528DA9ECC55D82EBEC804D15C0FEF51E81E63603AB1E9281
C61275262BE5CE7D28E72B129E947AD593B48B3DD05D0ED92CAB580509F4B91B
6C2E1D3D80994B414731F0AA42B16157021F6B56DAEA3577DBB01E39FDA69C81
621E5B7081832A95A95C52C13894C915E3F05B371E3CEB103F2E31E09BD7F56D
0235ED4956A5EF2128C39E8FA4E174E180BBCCB105D64D6003CE433463FB7D0F
9B72B0B0187B4752AEAC66FB3667FE41735DAFC1B0B0735977DEC9029164F27B
0BE5FA0703E0FF738DCE5A41816ECDDF97DC2C8DCF5C8BCCCC03EA09711FAA87
8E6791D2D603A9F27E558E396EB858681DCCCC6893AD2F241B5CA8B55BF28DBD
16720BB1C42C9A95DFEEE39B0EEBC6FA6E3E864C1CB47AC6A13A8BE85932B013
2B27BB1066DB2997DAD67D8DD823096C2AB6C4A6CA702255BE42C0D46989251C
9943BE92E307ADC2CA3AF2742F42AEE90AC92E1B0CC8FA720382B406DCB59972
FFBC57BBBB493F2C1B5C38F173A69A7586758AAE0DB68A07DEF72DE86D4041A1
AF04BBE5044A9CA5643FD07D8F6E37275108F7168F45BFB5024F2A0D0CC0CE93
ADB4E2FEB60E28FF6D4AF0010D422AFFBA89A3B3C4C135EEE52000473EB5E85A
F7F296FAE9140597BDFD258BC893B732CDE0BDC342A927FFF8372D492BCDE057
FEDAF53561D04A85898C0BE02B519493C9EC0989CAA3F64D2E64AB21C48203C6
08CCC92CFF820CBC5077D67F66D512DB34598B8CAE55C3F6FD90CC859B6AB34B
06B9FA5B0F1B8E255474328B7AD72AF93223873B82C18C4FFAF50A2A66D91514
A0E400584A4DB014BEFF7367AE3951662CC86D97449A25D63E9776F5A4A9D8A9
F924028ED77937B477662CCCE77BADA896F9B892DECBE1E9CF7F118F554E5688
D5246D21E1C129E5F5413B11FC9A0751C9864D727013B6AF798D3CD4CF16E682
C4F6C7A55DD17959CA190630ACFFCDE63ABE73B1FA07C6576B9697457E6FF9E0
F1EB6964C2FBF17E8BF1895535A66D7782371D3D48F94A545CC7B2601C2B82FE
57EE9380DE0D22001EE60736EAF6D1A43128A6D411E42818FB31D405D6FB6445
B5638CF95013779F8648B77F485554A33560BDEE0EFA81AD43EBCF2862632253
B385AC9D2AF1C72C5852CDB196AEA10C3B9470D051054C65297A1E2DA99EB13C
1850F35CEF880B78EA68DB2D9BE7768741F927B1B78AE0A60D19C139B7DC98CC
AC1F5F95B5AB4446AE0761DDAA9CBEDB74CE8B716878066CEE28B54BEBC68183
80E335FB821319551F503707DE018C4D20B99F6ECAF512EEA862970EC84462A1
C4A7008885277DF6688E3873FBC7A49F4C71515102AEC5C04C666B0B98D0431F
47F1A85B4B1AF8EF1341A126980C7890794A85EF6CE32D227A9537A675A33C5E
7EBA96669D80EE6F3E05905CCA51B26401CE2D4BC0892953EAD550817FB70082
2EB157C4BE8DE36C651A2F1E372A88C843252610FF37D6B41BD233860FE9F729
A27AAFD876E1D5EB11DEB30BF7A3CC1FC21E762B9814A88F147851FCD85007E9
77C6EDD006E0430BEF5AA8549AE133CD7BACAF9F7ECD175ED7000248B0E79E4A
9E591AC1624923AE6DB8994DD4DB0D452EE6690A8AC21C19DC862F93B03A24C9
4131987565B60AEBB01649B84657D8894876F46A2A4BAC73AD3C0FD804C49181
C9E6934810AA52A1F23C34E4D3AA860226603D6AD584ED6F3F80A51EC039AF5D
A58C53421D968C241C486AEFA89787164A996FBC6332E5FB95EEB520F94E0E5F
7CF9DF1227600F1031E55353DAEB143ED668003E3196A1B01CDD791800BA18A9
437C91EF10F19C2DCDEE1EDDB0B6F44B0AB843C46AC6C97DA00ACF82C54A4A49
847E7FE2AD11D759945ACDCC8DA70D5339C919D9954FE91E079DCC5D9C66998B
B4E92AE72C6688A5942A820EC853387883FABB092E42E39BE9FA1A286BCEB88A
48580C77D110B001377EBCD51C597C1AF6102197A1C8714E87DEE3F0D3A09A87
4B9887FD76E6303E404F673D424112ED9EC736C80BF72EBB0DDC10C55C02FB02
663AA47E2BDC5A51A1EBF5385F3940C3BA0147BAA494802FCA4F1C330C0EA549
92582C61017A720161EA2CE5BC374CFFC9EDDE8F9261A4E5FD49AB7955B7A0C9
770887DA7B5A123239565C6571654675219ED8A610A82723E3B50BE086BB23FF
7A4464CD2C4EB718886E4FF6A9F8F6EFAF9552AD1D7CE013E8E3CDEDFCE5AB55
1ABCE205DAEDE1A49769F27E5307C68245E415F460780114F9E0E089B3BA3FB5
F7E22B0CA2A1DA3205D53C5F042E512BDEE37CE7B47B32E7D4B6F8EDFF5A3D95
8DBE1DDE280A937CFC05F7F7681A3B681657DABB523119BB6F8A3D42E18BA80C
DAF02036CD695C0773BEE7AF66F4FB8F9E167389023CEBD2F0E3EB90F50FD11E
AB33AFAC63494B6A54765B2C56A6AD522004CF1952D55B0D551EBDBBE95032E3
62E2C41D66407CA4D0F1FBB0C7F6B5D344EC58B17BF3510521588C8BB16860D0
BAABB4316E5055BF0708D97515CB6CF112C2A89D2D44816E9074168949062ADA
05D662F7C17BCB9130CF7D71980C9059C3DC6E33F17030AAA7B0A2CEB87A0360
124FD1504C60DE14DEBDB3CCEC3EE3C80AD06EE105AA7D96542F152AA2918539
4FCC328B413F11A3968D9FCAC28875B34AB847E3C36F336551A6836C0430A946
C0D864190CE11362E4BB6BA415E904219926DB8079F7CCDC19CBE16973BC4321
CD4655DBA54C7F37D97D22AF20FF0CAB0718AF84F6B0469796018BB34FEFF2E0
90F2B7B8349E90DBD463346259844571401A131E488A004961B9D77235B4F7EA
0F868E0B1E18FA0B629E8327A68EA20601A85DE599861F30D092FC6BA87AD98A
0BAEC9D3F17AE9CD07D29287324CFA01A3003871F527868F79C61C3A679608CD
DAC7BA8D326A49A911B39B929202AA5CBAE5285B0449CAED1DC2C4FA947F9D7F
A8CFD3A13D2D1BA728E7047A9A7C8CB34B040C29B9DF8963000217458FABB583
B65AF9851F31B92C54DD21C9DC3DFF06F3966DF7A5CF4CAEA1DF58D3C0E6C6C3
C349692C67910040BBCEB10F1F9B871E8B5FAD8BB153024818C449D1175755ED
672FE43603670CE24780821FA1756569ECFB83ACDC25907A21FDC7787592DB1B
5DEA54A92603EF47888C851EEDE907D6BF396D7BDE86A40ED5DBDE8B5E537B68
A693ADD518BA3868A8696DD77372304300B93CECBFA91BDD117A08E7318D56BE
2225A82EAE9027257F2186CF716C6852257466BBCD861AA5F8080B536E53AA13
4D9B7F37A36B0BFA65C25A312852770DAB7D39E1217619DADD5A529C27B7D1BE
D98D7E54398EF4AFDADA0B554DD6EC16241D14A3A6C093C149B9BCABE51EBC2D
7CBAF597F63E5BEF8D7B9424446B3EDF6C1A1016F2D7502E91FD7430D0B928D1
41B5A50A3F5E9A303C99A80E76CF38AA5A931165886CAA5F0136DEBDD9D4265B
8B8BF3A39487DB91F319FEC839F4D48736977F5B21F6961C8A9ACF420F2CB0E2
2EB13132018A82A296397CD60BC2308C96B3EB1F091697E7A5AB01D4273EFFA9
69966A789FA2F37D76D4EFE78345B17B829686C23D94EBEA9D6C9E65CEDDB573
45A63B5D9247DCC59E67DF990210DCA0B58494405E799BD70F36330A4787B95D
7A39E3BD486EAC834805A90F9B6CC50A05E7BAD92538EB40128CACBF5E2B2981
43F78881D2ECB82FBED648C292D1AAFF87AF82D8258EF1D55A2220B7A63C6DBB
9532ACA7C461BF0BA086CED7A6640C7318D7323F9B6752AD3F194F0C8ACCC73F
7D8B3A73CC61AC308C910E1CD1EDE6797C65836B6FA5901C1074937122C49507
C2B4F3FA7769DB73CD3BAFF39711346A4995B60BF4D8B3AFD0A002B3A6E4FA11
4131410D51461018E5FC8203F851BF811AAE848B8F7F77D5075DEFEA9F5DD9F9
645D2BF1C1AABA1E2AFB1682EA8409E9F9570BB3A981DCB94ECFF2363CA48B9E
48F64056886EDFA8D9766F92298023B5A14A5EE325D1C4CA5023439ECF0BF984
D7230E14439D97315849879595A50391CD5F4E1331575A71EBB8954C3A90EEC2
64E6115950FC91D0DF4E8DE82BB1E53E15F94647C5EA3C63C50DF0F425B3CE18
1B0EEF965FEF776BCD1DE5C221006815BD57DD5CC15B8E5012293173A587311A
3C04E4E8E2E39D3EE785E863E59B09D21748E7D31777B6459FA8C80CCEDF1816
6F27FBFA72E93EE9AAAD8CFB0AA1C09FEB38743101FBC9959A0017FFA8427E36
F75B06C555D966E73FA7A1164CF197CECA77B7A59CDDDE01C2CCAEC45A0EE1B5
23976D030888E2A56AC9FFB6AD97711CF73D6D62F638CD7508D0EAD76F72FEC3
81CA45AFBF576377A48059E6DECA5D00BA874DF504570E0E74CA44D80BD99657
E6B1112329A103DA1F87463C2335145E1191730E2CF14A8F94D587CCB0BB3E50
A70B6A3BC976DBE66E02AF9989AFC62E89C0463003EE6A83CF1C356E630CA0E6
E114DD647EA70762624DADCAC3667E2ED796A8256EA6E4857A5842305DCA014A
D8BF8B107F22DAA863FCD92CDB285F102B7DFCE33759BBA24AF9B7D830BDA7C1
27C8F4A72DF78DF4E9B0FAFA718DA21C5DFEF0A23FCF10C02ED8415880706D69
0787DF01663308AB037105CAB58FA281C6953833F378C95EC6BEE1405A4D8614
5325E45AD6C8300E68162C687171D9D50155B0847AB1053F4DCD1319709DFD81
CC7E0C01207D0928002BECD80F82893A7AAE173950C4A8AA1A5A2535E911EB0B
F8D1F5ECF140865E981082356BF29CB6C43FE96580EA52D028148D943D6B19A9
B435B32E5BCFCE7813FEA2C8615C6422AF62DCCF876F318333382EA13EB7D932
6D7F4D9C73B08A835F9753F3363920AE7C7DF9CE9AB504CB4FE1C4F7A53B8EC2
FDC7614E23F7D32B7652D4B4413564585246569BCE190845D2E8BA2A1A24E41E
2620B53DE2A271A527E27A42CFA3BFBE458C94738E3AD06444FA5C990EF446A3
0009A7DEBE36A84A8188B3120A2D8C8272237FE1ED4B44EB22E96CC5D185F48C
6C7D7B360743F0E87CF2BAE808FB25B5C822950233FCF4C6F15A585958034D9F
9D42E0DDB54971C0AE4C07FD7B485ADF3882413B67E1B8CB2DF7E7DF68B41BDC
E88DFC3C397485767C5363A897E2FDD7B337E3CF5CB04E42AEE1EA625D749649
B582C063512B58EAB426EF147ADDC973289614BD5085D49ECD0464B494CD1AB5
64A93AC9C2A36F037C4184CA5445D5B4F43726D9BC891653DA66D1F82129B130
1EE091D9F7A4D345114235F4BA28952EFE250BED8A8CF2D09B98B2CBDFA71196
E5E374EE8BBA129CC19D635F88DBBC73AD3C77E7D0EC1C2534CB9A2636C6E50C
6D6F6E313EC2050144AB05DC94FA9F93B6FB8959CD2896298503F94188127439
890831943816E865AD5B6FE4449C3D239D0822F16C4018E6B622443A1BE5C78E
75E8F3C861CB90E032EDBB29432AB3533DCA6D51E9457763A3E714F7C2A423A6
835071464F3057FB802BB862624FBCB96CE67468ED160438641E71D673717BDB
0E8BF4343B283D1E9906259C74BE3535877F54B6215F9BF4A6E689945AD1D5EB
23E4F322BFD82BE007D82B25AB1D47D4AE034EAC20E15E45079F16873B5839C3
82325F7046B7C4C48029F58450663E0D09836D75CA7F8AD8E03F6C3AAB962CB9
E16A240013CDB4F38DF570E3B1E8993BC5022CE64D636D0BDEF9A08A4AFA85AB
3502A3882E53DD5543BA15221D9716AC3D4CD2AFA8D9B404C04D224ECDF9352A
88E98158207EAF44EB9BEB5FF854E579B6E742C584B4B071D47E59ECFEDCC31D
047F194B713B540DD291372C1B03D58A6279CD0493B3ABABB9111895E8E2A397
063683B66E7223D0FA1A1E969FB0B6CDAA44400764ACBD8A43B91F8C3F67B176
70D20607E0D4DA1DA5E932466B672BD092DCC56A2025A629B39A5588DF79D2E1
1306BEB7FB0A5BAE6D20F4A56AE9217A8B47246B7C4D03A5B1814448ACFB10D3
86A53432D2B7C11EF06056690527A4EBD1F1355C3BD6CFCEE9FFF8A418D20D93
D4BD2501A30A61A4A906FE2793A6B946DD1ACB500ED7F8880BB8CA52C667FF8F
76A79A83A695BB4C89ECDA3A07157E9BEA93937C58C1343F93D8EFAC5BAFA333
2C7E50DC7F4449D54E259BC077A7685E7656292B8DB08399673F0DC75F1BDBE8
06E51B294376B839FF9347B091E3DD790EEE5737E67ABCE5E8CDB3A412BFFD23
F038EEB1ECEEE23A6D8D4E99C49CAB1B3975DA390FEBC79E7F50D3DF9F3E5B6E
B1E7F5517A86004C96672D44B80ACD7848FE8E31D54776F9FFF730731F3146CA
4E7892D99644B225C06917CD8C632D443824A47BE98AE9EB227FFEC63AFAB6C4
C03FA6A71FC346A14907268FF74CCFA54911ACD0FF16FEF122729B6E985FA28B
85049C0DDDD9855A3BF9605C9750D5E8D0EE2F7071A701305A12A4E70A501393
786FCDCC0A5CEB3FC42CEF2275DFBA23B66124203536CB04FCAA433B9C6D4683
C78BBAE7DB096F33F794B041278E1FBC75C49BE7F2AB72B29A6CAB9DFDEBA1E2
8A4944761D39FEC2A82A7BECAD07458FA1C2EB6BBE1AD828DCA8EE703B1BB9F6
07E522C22D268C69FA557DD87D25E83CA0AF91A866DC636196B83F5D3A6E168B
7BC85A1F6D3F7CDA424750AF8261DC44391B5D69C1D5C2AADF0E960552D2FE27
E75213E3B28778C02DB29FED2749139BF0A51A5A9E0B6B83225581B49F9D6967
AD053D7B484EF5E6955F9BBA365964A1216CCEC6A306753C7C6E67538BA28C74
3EBEF8C82DA0236FAEEE6FFE884CFA489035E2D061E086D27B4111C98B1D338C
F0DDD078FF2E319A37EB5CEFDBF36492D265A5D25F1C939FC76BCA004EF72988
6B8B4D23228A79F78BFBBED895F5319B213778CE74065A5F5E31B386BA7D53DC
6BE313B5AF180671B6EFF4B45D61E0CA069E2D0142A23AB251EB9FD654EF749D
5674C96A7C7E77FBFB92183A182F9A56C4A9F40861300B9B3D2BD411FB9BA4C6
21F23724D73B1079F7FA01F7725A187C3737D3D128EE8D437A2AFB114183DA45
B67E158609339270049138602AEBF6B5E5D5E8459680BF861357E7A108FE694A
8C7A1FA5C03B6E07436B6560B4D7C43203CD0D1A78AA64AA9FF80D4AD28DBF99
13982F36B57DC325BEDF738EB6D550863099C9AE6A1D3DBB5C62E76F662CE886
8C1CF7905F6286FA59341E68A6054BF56E6B8F4B86C231B10100D1BAA6B29F19
2CEAAA9950101B139F61877B66CD0DF79C3AE123796DEDAD425BDC1810A030BE
F5C410DCA1D11F770EBC2E641196A40F46046E5EC752BDC6A2EBC56A2E82E3C4
D85A8C953D34050A5525328B0858CCFEA9354C720F417B708625D0FEC54CFBA3
1A60104698E9BC23BD4DCF3F028E00965DEFC7E562329CF3D929D1CBD7B767B0
2D64F2C1E338E66C7565A98E4A12569BB09A57D05DE428708C446C51F462B878
FA4B1A187D0EE152ADFFF6FB35CB22667E746FCA5BD217852B75FC3219A3777E
7F26C3A33D8BAE4628F7B3BA7015DD57356E07653B1B4E8DA17BB26B03BB06E1
90C3B5DE04B45FD7B2E7A5C8A7753542EDB8976C7550F0904176B8626AE3FEB4
F127D094B167C7ECAD42D003009F922B51280BE9A7F7253F7F8A49CCD3C1B4F9
F9189058FEE129F796770CE972003AC25FEAE68EE79FAB1ADD741CCEFA37A937
51BC46076F01E2D91BA27FAF9AB7A1C5D8203F8C21D9CC04E187BE53F8FED4F3
3633BA03A5B734FC0AF60E785B8B723C16F77F4F3568097B60E1B7C940F1A3EE
FAA3B4E315BC32CF5EC239A9CC1B8ACB2EE471114EE100B8B78ECC15D393ABCB
CEBE9E532FA8094BCD502037451B79C52B101ADAA48FB0A46146122589410201
05EA9F2C66500DD9691644C9687E096E18CF95A9F55CEF880B78EA68DB2D9BE7
768741F927B1B78AE20336511B47B3B6FDB110BF87F8ADA28B1791D94239604D
08EED34039982ED5E5664949215B7B7C699903F938D790F77D1332AF890CD48D
6E4B5EFB9187BF9D6A2AF6C069393F94B97579D351D72148A95277622125B11C
584D7E655A60AE68490AC4A06DCDB3A1F3237F7522F402AD858566A3E5DF65F7
90B7D627679909F5CE6D50AFE890577778F334C4E5AD44BF7FB5BCC56F8A2A99
AF8709138195762A882FD6A3E2F6D6B367EAA7D2B13810A80ACDF4CC1F697487
C3F64E52F280D21ACEAE6F4E4B0F7420B73A03BB379BDFD1FDC40E678BC42FB3
835475F0982CB437D0E26FE1768E05DB3BC25F19D9565043816BDF6B907DCC5B
62AAE47E6B8FB0144A861E53B3DFC6938F1AF2349BF23EBFD6F7D9D461805406
4D0A6D0235ED4B395B3F90213BFF2DB659ADD1E9993E2508AD48902A8A9350C6
276EA61AA9465BBB3A56AAC8D14E62B83EF68CDA4D5241DB6573D0A1958374CF
E21C11D4C3E93796EAEFD7D490CBF46A09BAE5AF2334D5F766F52626B6321D22
569F1C5D944E99D2FDC58F6E9F77C8A04B529CC5FA2D34BE93C0DC2EE33F6F8D
4F3AF4B2C7D95E63DA3C2B2C80F7C645CD391971BED4817D1E7A0CCE5552EDD5
93C15121C8716EFBD51FBDAFE1177E614AAF343CFFE0762BC9E11C0E801D5099
765AE51E69F5A96C3FD32EB202C8757834D15EAD8CAD4CCFE92F79019521AA70
72575BE2F3183B94C9CE1424E86B08846F902CD400D1F79C09875F54DAC27E5A
307812B4B98D263364063B0E4937FF30045AE75FD5A8955F09EB5CFEAF9C0DB7
5F5239E0120680D62EBF48C20DCB99FD2BAE6853877991059EA43489D04935ED
0E068B072C3F11CF15C402D300D2FA7A67087996BACA6164963C3AA18EF7AE2B
D8E0268E609581102B39CFEAED6935F88625620CE2D7C64250A8F2D0FD29371E
3AC1950186E0DB76B4D664B39CB56007BF7CC083723F95A7DB137EEF6F9B9633
04FCB76A2C1D28C57B9862C0F26343FE0F315877A06C567634B34A12550E165F
70BA63CD47F5B91A075F5BE42A3BF17038D2ACCA7EC59409E492FAA534A5F317
B3A7FC1DE2085C84C59389A87E42467B373760BC57A72FAA1CD068777D347A8B
63A7A1863D9382764DC241811B3912F36AB2CB1440EAF9C91A229F107D0A7754
C4C27620D6CE5925909FD73ADEEBDE8196354727A942CA3BD03B589E59FD355E
A0AEC350721FA14432BFB817DA2C19F0C868A3487600CB5DCD32A30EAA178D11
BE7F34711A204432DA217576D9871810D1F6D2AC9B7BBBD561F2B3C590BF9140
F7BBFA9FBA789C591AC1624923AE6DB8994DD4DB0D452EE6690A8F317AE01E94
01FF961C4A20C8F09061B1430C204D4E78A237CF07D050F04D4CA153663EFF8A
63016F79C7D0E3BD8D4D63AD365F820FE2A7FC7D4B5DAD9D90CFE0F8930B1D8B
380A42D3AB886A9197C0079E12D9A79FE6FD1A5422184CCB17539CAF6DB91BF6
FA48E94D48C1EC30A4DD341E39FE966AC1214E4DA30F2D2AC515EEAC8E075520
145E0096D6D6825B500859210CC80DF93E7B747BD302DBD91FD3F5BC32979FF0
87E9104E689591F1B526707447A74D1489DFD974588112D4CB630389A4F601F2
85A24C6780F3642E6E7A209CA90005634119D0D9B6A6E7448584D0651F4644CF
51DAA8608BC3B698A22BAE29AB93FAE8FD46F41CD2FB9B1BBEDFC1CD48ECC690
88FFE0A72FA2B88481AB4D76589F89170F7EE8874A26CBE7CBAC3AF3CEFFD755
8991E2863E3559AB0B98251F9119B681206B97F29081A7E0DFCE422739C0C58B
4ADD86BF533840E0BC3624493ED50AB68A0B22A779D7D816629D1818CDCC0F4A
8D211F8966D90D21D1E7C7B592D605D74FE5A1B7FBF5919A2893BAD39B99FEC7
FDB24FFD726EAD08D1FE24BBE088A6DF3EE50851FEEA89C68E3509FF99EEDDBE
95414CC366E7F06A8C3056096A34BCF507E7A1B16CD05CDCA6D3F2057FD13B76
678F757AC1ED7052ACE0403D1F8700B04CEAEA603A0833E91FB4A44AC83C48D5
2BFD31B10B777D6D0303D8672E444155451033CEEC2AD252A6C23E1379381AB6
EF650938D7D1D90A82EEF9CD48B1E16C506CF003828E7F53B24E0968A755A247
5A6E0940D63870B38E4100D67ACF9EB4C072D3196F99F994C62B1A35C8D5B1CC
11FD915E099B07C3165FCA696E0F02F08924329C470DA39B8EEC46215048146B
5F31EA66B8FF821A680102B56ACC59E2A7FA5588BF49CCF911E33494DABD661B
312D89212889A053C62AA1B3533B1B0B25401E63603E1FB4CEE4EB507E880883
67C85F813BE5404CE43C8359A162E7A5D6C3533F250818078B97D6760570D599
0DD9B4CA9726CAC5224C853F2229F0B332D7BB6BF82584F6DA9923AB74192AF4
204EC8E64AA8E743669E86CEF1C8D3D84C9892F62613F3FC722D561C0A9AFFEC
05248E9B0C2415CBB4E191E98FB776EBEAEE6CBD9BB93971B47DF439558CB53C
C12F56D3285CECAB7C7BD69E00021831DDAB3D794484C4A85B8F0097DEE9B844
B03F3907EC73E5B4F9B71156B357F62608909B7E4AF9FC5B281A08DB3C631E95
910F965940AB8DB67D03358448AA2C6DD59F4CB5511FBAE3C48B1B02C9879849
9BD278F05D59976EB80A650E2F6951FF4CBEB193B07086E3DC9A132955A674C6
0D5774E77E0ED24E62F5A85DCB486D33F62B4E573019A93A8B1CC4F98EA50B29
9341BC6E689F482833B69725F53363FA3896798939057C622691F3BE0BBC7D58
A92835845BC1E5EDBF76871F1F34DF71C20CBFBD33673C5BA58E2B021580D63C
76BF19639428B2B021BBE2C5D94D02798238198268D701B543ADC96113BC12F0
33A1D5D20EBF8530E7129D0A90AD3EA1E410754B9DE98FCF9B0FDA17BB2C9172
39849FA8B3641B96C6B0BB2665D2F48BFE234A4920B74A9DC82D26722E4F6851
71C47A257EBC1FA6B40E10B77C81889061E66E5A48E64C4DBEFD7F9A354A8C35
92B6B7C3975718BD9956BBEF2D18742DF7CA2D119CC12A3246B9B5EA106E3FFA
789A7F928108402DF39C62DA2EAE8BCAF81DBFDDD5B59A7F1AACB6BCEED9171C
D817476967E255F808AD2D2239E5740DEC775C471D2C56C824C06DF0A81A5D74
DAE7F8A47F843A6972A781290D136A9B5D69A31D428F43B0838A429DACE417CE
CEA2D839810D562BC8ABC30210EDF0DBC8748EB0D26D527A7665DBD5CFD03993
38CB000E0CDCD3E057392B1202E416B635D3F474AD6CD39E4ECF3DD82C3A3541
6BE740A5410D67AFE52FC469CC030E6507AEFC083CF9EDE0778C2D79BE9FD9DE
57CC35175F2494A98B01E6571FC2537538A4DA5C46EEC25AFF26024D0B4AD5E0
04FC3414502FD8BC997C6B5AB50B0F6063FE2E0801539656A0BB8694FFCBF91F
E60653B4EF7A9E1D10F3367206AA0B64A692241F315C706A63D4E868BD555BF9
3AE1D7487E2406AD30A2E8B6A1A1DB86B1EA3504FD37C87BB9F989AC66AD86B8
33F24A232CDC0C216055575F3E251647F3EFF443E8CFD42368663888593BEA39
0D2A4A7822FB23E5DFCD5FF7BF21EE316AEDA07CC7336DC2CB7205435589588F
BD166C47CD29BEC5AA33AB8281CE9151EF2A4AFE4FA32112954C5B86EF7AE3D0
11A2A3FF809510749440EDA8415DCEB4F266BA674CC7F80201F276E1C1F837B1
05D9B6BB9AD2454756638C8C23E8A546A320A0932B65C1FF7776FC2AD3CC8496
259C18F75707065C052E245CC5136B1D3C93DB62021467C3990D7D728889EE55
96C05E093E5C526BC73C08E4E7A408EC814D6F9C78BFAA8D12A21531E713B80C
D03A5FF4FF79ABF833EB86ED4836767BA4F806B84974204A324D188121F3620A
245C8A5B229AD308A71FA00E007F6BFBF8B7BD2AA1761639E638CE9D89C4CF0A
AE1B38A2837E19E659A934221765FE0CC6A3A745FEB2C1986547967106A03546
23503EC814F522E81BDAF02C8A76BD7CAD08F26F8088C0373276D0A4757D7AAE
13F28157D31056B9B0B2EC27522E182DAB2869CD2C2B0F39016EB778060F3169
1AB189B81F8D1BA098074266404D32CBE9E1B8220C8D69B5E26CAD7951FBF3D7
B27121FF01DEA6F49C7A4040C0858A863A9AB484C68F7021E9A1E1CC9750DBB3
5C0DE9C6B8E4AD2D5278A472D241413AAB892ED473527F7BC27EEFD06CA3E4D0
D6CC2B904C38F4106AE01E2CF7A00132C147716CA5CAC05D4506ABF94C6914A6
74BE9DEA56C87EB126A88A279B73A0615F840608A17BA22DC89CA600D355B1DE
1D32145D39243D0590A90F1C4EC2C0E6F00C4929992114915DDF1AEB1154E4C2
1FCB1072F370C07EEA977B58FB6FA47D6FFBD7B0C78E1B9C0308C2F0D5A30FBA
A86B2ADFE7375BB582AC084B353062263B960574D956A9A0270655811051028B
571E39D1A96CCB13926FA557F6F211E57F18329A7824A3550E96593381CA3091
7936E82A4C35E1F29AB9CA53E24BA02ADB714023C5D3A6271DD6C27CEA2D3240
9DF97C2A92B344786D1F759827CE95E6DCA24FE75E77E289B172AF9BFBFEA80B
B0642752A12BB4D83D94D9CCB6C0ED8346967ED5103DC6D4CA0AE15AB7B12CD0
19B4AF7582590C7498E5BBF4283CDE05D1F89C5B497B45B3EA9A479B91525E75
3C5856EE7F9DB99A4CB309AFB6D06F28AD54C9C388ED9B5AC07C93E29D4217A1
FA558FEFF0485CAF90627DC9C77310069FC4A80CE9AAE79F064761AEBB2558EF
18E944C799EC1E7EB9FEE92764F5BB9F3BD4BD4174E893EC0F80B86F0D74C8BA
15DB4002E1941504FE6D3AA62C4F5E685D38CFEA5EC147472821B827DC3EC27D
239604B5D511A43B92A806EB2F90AB0BE445530439E0E8AE43B43E699B243054
9FE1ABE58BC6297B05FD52E99C741A3E0DC2B28A52BB24A71B15D09CB758C1B4
14B03D92674B738EDF4CCA777CD3B07F91EDAC559A220F29084DD86CD873EC6B
71A0E91D39A856F11BE21F316D94ECBCAD9BD333F70FFF08E462523A5788C3B5
48D13B1FFE2E3CFAC107CD3F4254812E1B4F46F57C688F9132A11426BA939C35
008FAF4F126D9F7B460597564810589C98F10A1DECDEDA67312732EF9A4C01A8
4B2B6F2AE4C34320D9E18CEBF68FEFF88FEB85CF26AFF100B3E783F0B0CFDFD5
4D288BFD8862A4CEB83F3431ABAD45976987E7C818F9675E7A41096F278CF61D
D215634FE2454EC99AAB80813E7F71916667785AF1F1FB9E53C7CCF6D9065C67
83164EE125C31DF7A09EF83F1C59760A88C7CF6DCC924A29555D8E29EA9053C5
F3EFB0EA307483F841C23B766D1B8007C6661BD18215AF41660910B4BDE9E749
2FC4475C1DB0BFDABDFA53F7656E408CDD8ABC9F2765F865045369B62BE64F95
EF6EA4F7B8B2AC6C3C8813E34C4D531E04ABE0A43C2E89C1B5BFA5EE71BE18DF
9E17812D8CA72A3B07C0771CFBEF57EDF7FF0CE1B70FD252761F65321A8DCAEF
01B5F149988AD4903B65504261522F94D323CD90B07A1A24C5BC6E9B31E0F64E
302A7EE9B39C78608D2FF1927F47C3F91E2918CCF1A32A3F0AB352E253F27CD4
1F3447CADFF342B15A27D5763551A686CEB956D00E24655D6C8AFBFE47F9E747
CD83DC03B34DB49FB189A69616DC43D4BD6451043E4452E5A5E82E52DB5332A9
4F6679E332D6423E07B092D8E28E4B265AEAF52EC041F37D7555F8C422617BE2
9C1D0078D5942D9ED60284F97C35C6C76258048D5FE9D3C24F4C7136E69B3F43
335558F265AD62C472D8392272B72B903E988A469C72511AD3E35848523EB4F4
FC0803BF617638287E29D121CF3DC7DE5B9A60922CC7F5B854D547F6A20797AE
21D75F903CDE932032FD5665E6DA88138143FDB14DAAC570BB2FE0FA4E84E612
F109DDE68264644484BCBB3638EA280577C0052F3FA7E2A3BE26499D6E4CF316
2D8721321AD8AE36B77FB065F28CD8BB738DEDF173CAB5673C84FD71FE37FDB9
904113C8C1ECD550215E64CBF999443CE94E583F40BAFBC0959C63F10D98EE40
64CBA7D092AE16EBA16A4656B5A0EBF41F9DBB445DC22261CFD55BB39AF99F56
BDF093BBAF2A5DCA560DB5B8C8B4582621648F48CC413EDED067EF9BEEEA1134
788628CDB0A73A8DD94D43340B7E408EAD4E43B24137C66842935CE2F665F18D
7164BC597A2855151193FFE8CDCA53E53104A496317AA3998C42440163468F48
BB63BCC95196A09701C201AF3629337E4172EF8DE8B42D1027B6E0F9F26C92EC
F039C349FDF4A29184C1FAA81B7F269DBB1C16D64B3F674B855A3F6E5E6E3712
50A3A4143939A9831875FA9C2BC06FE34ED95302079F87D6BF36D9BD05CE45F5
DBF3C1FDBF5FD5541C8CD5F3DA57D340422B6C7E207BBDDE96E9AD2D4EA4B3C4
140F146A06890ADEBBF2BF3D2FD3C69669D255D386DC5FF5BEF273980D9307AF
1C23C23EFAC7D6D993E60EA498309BD9EF487733FAD3B703CCF8812EE518EA01
8E3D641B667A6E45E7BEC275616DC6C18205DCAB3E5159AE7018131C8DDFFF0C
7D523CA16B6356C6851D8F7F8D0F72A45C2EB8708BC926F35C7D9F6BF13E2499
1ABE8A5CC3F2037964AA54E53143EBC1C680F19A2F87367B13DE71B3B16C9AE4
0B6C79936DC1945E93ACBBFA6B9DA9B8C018396722AC7BC860460649A6168492
3691D83750C86EB7D05324963C093394C32C50C2C4A32B106A3D13A131FAF710
CEEF63AFD6E5BF8DBC7C3DF0FF22E3B19A30C0A06C8A1A245FDA07A9B0B15618
7EB8DB70BF5CFC1EE11AE4C309F99ADA972F504CED0223734E5A7F68B96A1184
091D122ABB1E3892E1EA58124AD43CED97BCA4105BE9609DE67972EDD1D93EAE
521F3FCB1FC8FD435AD5424312FDAC01C613D99362A12A948E88B3B323E0DD7E
5B229A8753CEACC461014DC49BC8560110BAE01E67A6F3DAAEAF72B72117E1E1
5A40D081B732161CB1677D6A716A2CDF3B52F1641B6BD10B4D5F1627624560CC
41A3A52DE9627A73B6B1A74B5EA890F4262E1616561F28891D097A0376131F53
F767582BC61FCE2449226CFAE6773F9306CFC738C9B79325BD873AED40DACD38
4D95810DA0A805C3D7EC826CC0D616F6D9A0EE1261F7B489ADF40503BD7F3E05
B0DE897990729C0F4BBACED529C5B2F5AA944765B7D49D7C68A5870CA8EF1A61
F6DB9FA111CD84C513E2A42DFF6E5073FAF13FF8DA348CA00116FAFDD66C3DBF
E6419612225D642CEBA1AF01E9EE26E4860C361B4315075BF28CDBA5CD414405
A864B79FEAFAFA01CFE20B5876AAE7AF8BB5042264B6ECC1A3454B6CD9DC64DE
1112D9A7F5B61F8CD458C787BDA7E69A2B8DC8849E90F329A9EF4B08231102E2
17DCC3A3D24EE1C52A29C6D3CEBD747AFF17A6AFF908C79C7BCE581FC98A2D67
11889B9BDAC517A5D4BD690C8907C2CD42AF97D89070869A9DBB4060FBA4718B
2185B396CE070130D2BE622A83A4B61D17166459CFA30812455BBFF1335CE13E
D9AEA6FBC5C030E1AA4D195BDC9C703B13237A71F61EC69E389FF24788E92036
F726C061BBECAB7CB98D2B97C87D1B61C1ECEA6B0D2213262B8AFFA2D78B863A
609F6879F9FA1DB0D5F926334922D0CC555F712258B8A1B9AAB866E89D2EC177
87C412E7273D2D2B39BB55D84E02F4D2EC9D7F08C03B3E51C9FD432F22A0D83D
89CFBFD2DFCDE524827653C4F503FBC271219BFC2B761E5211769C006EFE0245
7A1F8183272947B287D88150BD4F776983A012A38F43C60C9D976032312D1629
CBA9857FCC9F38AD5DE179B211E8159ACFF6BE8FC662399E3BBB1942085E5AD4
C8278F0385DA62ACDF1DE9348FBDC32A12AB8ED0F0C9C14D7134EDC9C2975B4A
5178480765D08328F89FDAA200A538EEA2AF494996E2D7C7DEEC6020C3856457
21CCD903B791F7BE820689E35BC2268608EEE37C895BFB8B667D9676925F5D76
CE0C8EB66539EDE6FCEFFDA94087050C38793CD19E8E1C931040F5A861372193
54A96E49466016AD0B0A7214FAFEFBC9B47FB366492F2D6D5F591653F8C788C4
41AA8E3DC9107E3EFB64DECE52C366867E8CC837185A96122F03A8460F041ED6
D53936BB9A85D65076C20223E5B667244DF2249846406AEF898C0DFC83C2E327
ABA18E605F6372EFB5ED264C1FAC4CF33245D39A3AEFB85C7D7A0EECE9B4A41F
0402D5AEB70BFD7CC5F2205CB1179FE45FF4C246E2E3A78173A546365AEAB91F
AFD236C47F453B38DB0067907A28EB5E9E1D436CD4A84360DC9B6ECB0543A514
3464DF9B406DA5408781D0B4103EBB92A3F801177BDE9BDD61E288E9C7B17D3C
CBE333CC60A6A8F2BFDB043ADC0B94FA3370BF3C6BBA9B877B857DA39049F588
7F6C75EA22E2C1A238FE3276F41FEC04B5C12B40DD1B386D89AD8616B41538C5
7B0C61CA24EFE8AF8F9056AC944D776AD1AB10289C1EE2239B58976F94434C1F
B78334D81374C359FC48147BA3445493171CA3A4439C3B8653C05986E9A6CBCE
3660B6A7B4C1A498B33CA161CE90FA34E9C85636E79B48331A7ED881F1319F94
05D222E21746799E8B90B384D4C420202EDF2C3F52D34947E0964D0E8E89F604
3C0D2848C742CA8AC20930D814C6A3E6ECE761C6C940133F9038C0F9D662FC2E
59673DEF563AECCABF724C09CEEB59FC08C2CCB66A56A327053E0F6D162659AF
07E304A2CBBBEC1B4B0093359DC656DFC487D5063C415686ECDE92E5E265AC2C
88B96B2F6B880B90588AC12A50FA9BE7B1A6263A6403D1C1BB0C37A280AC1331
8E8A16D28F3064FA14308E0B3B980D8E23ADDC6607A6649F4556DC37D0A1A2BC
0625CE58D343B6CF3CFCA060EFA9A0918BAAA0CC0CF66D92638AEB75DFBC7BB2
A8D382370AE0A88E1535E6E9B2C42994653FCB1ECB69E894E41BD3B033A5C78A
1B76A09F36076F596B14E27F45C1850FF135498FB868487A758ABF8F175398BD
622C55A2425393E95E5842D5FB7A55AD6D2F7EA32F00B3BD73F6BE22FDF71E91
9F72ACAA443BE4C0AF8BF6F7A4E2CD431E45666D4696B3B200B1F329B23335C3
909939F8C147BE327FB99A8572C12156FBD77276B73192110480D38F1AB78C1D
D8E49B9E19C03F92C84CDD2DDB881F9178ECED7631FA13B178E3D4C1155D7251
FB8B8EF4941DA21950A96DAD1F9F99828AE51D665576762AF7224CFDACF1D190
103A1952AC16E3CCA2CD03DAD7DC342A29233B284EBB60B62D0A66F5430459C5
4A086BD3E6F5709F7A182A1885F56D3DF1BBA67AD7CC9A2A87040E06C5DA78EF
3175AEBAE0600B7E131062328E82418AAD131903FD8327BE2B27F079C0A6F664
3EB15FF9F5F81107E317BA1EE0E8AF6889AF6A6E801FDD83FFDA143F0116CFA9
F93D541651CD027DDBA5D572524607FC6E71F3CC3A47B8150D1757AD61171D22
7C27E253F82CB324C6052522192AB7AC57BF054765B5A6EFDE9B418862C90159
F999E3CDDBD50A4FD40104220C778B4EB41AF433CAF72E17F9F48F217D5C46F0
1F80B65FD333DD6A1DFD3F3CF2476231B11E3005F3FCEE428FD152C0CFD0662D
318787C108CF6922C96AD6DDC1FA5B2E565CFA592C54A42801A142883EBF015F
A81E8FE64711BA0F406076FD1D7D016FEF027943BFCDE74B0E5FE9BD5A2440F4
92BFAD4C1264F18D6F14C1F9F816AC7EFEA83C6EA4BA6D4AC2124AACD137FDD4
C946D82FD15E7765E75ED82477A3B48A53BF3592B90AF515B52C755803AE79DF
B3F967FBD718569145078716BDB2C7E10CAA2FB70F768F022781516CB4B2E8CE
D0BE4EE7195B46506868D67883C5415F312D653513ADE61DD9270AECCD8CBB12
601D20449EFBADA808CC6B70EE0EAEF2056FA84937F6AED1A05B821834F3E8D1
6D9F735E2E1D2BDE63D5E825826AB286992F9EADCF3A444257893C9A7303125E
3ACD0333D2AB8B003FD4BAF26C1556CA20EC328DEAED0A901DF0CC73E8DC3A5C
9DECB3581944C88F1B6589A066E3C09DEF8C946669EF2C286DAB56E3241E963F
5AAE87122DC4DF7738F78702789C89D8733DCB4408924C43A2BFEC536592EA87
9CDE6B7972F4C158F4714788B0FF585B561BD3EEEAC3E8BB95BD1C6596BC5AB3
6B6090974C0FF0D79CC68FB1A5DE7EF8497F2B33F22FA065B2D50284860A8999
BEF98BE5292433CCDCC16FACA811DBD978F3032D2FC6BD54FD7664FAF472BBF1
3FCE5AF7EE23A84D10CF5EE66EC1C5C9D6CE3E4DC36C9EE5614581C63B807FFF
31F99618A87EE1D951BC97E0F8A35EC5459ECD58229E141C5091C50521432693
545FCF479B8369A0743C0981E742D39E9185C1E1976CA054F6CB0C6D41628953
A982A7A78D7EBD6FC39622969F5488761BF2229D98546B4D60320FA0F0D8C778
0A4D0FBEE47DE21300E086CB209267A5ACCC2E4E0746BA4FAB0B8DCDC63C55B0
23A13A2461C46AE152556AC6B9D3AE7C511B757F90C2DCE557B34FBAB3AA93FE
7A53CE674C5E71F0052AA634ACCEEFC94A2904D8C8E3580B42D8039B56A8FB94
33E9EEA4FD667FF0DC83AC2EF54EAC7775B3894B4DAD7F9255030BC3500325C2
BFF8B479CAB483B3A034DB5099670353196EAB4EE9BB2612B1FD223DC6C8A48B
36B81681F900A5AE0FD8755324C32808C36F09348083188D680E41F4475ECCC3
A6CB7A5F2F60CA54F14A5FF3B3F2B3A0D4D60EF66BF48E8925C655C7B21A81B9
FB4493377D6B9280F0324D271BC85F7BA746B3DC5D872699004BB7024A4BB297
53E7688CE5356D6BD2F73A46212368CC901245483CF14257B8D6C978DC702A72
F2FAB5D5371006B43C63927977CE05D766EDCF56ABC139667986E069CF8AF4FA
F1BA28C25F4497F401C17C8E2E16294B4B934B364A4ED1102A8A685ADFDBC21E
3926680D97565FE4D1E216A9C768A454647DB379C0AE4AD02F0495F4468D46EA
652FA3C1D0822F18A0DAB858982B5D174DC918B0EAEC7D248D3591DAE0294BC4
4DE955141A58CC2A46228F2F642101F5B23CE1ED3A79FDFC7D7491B0486E7CA4
27857946D2F3D0E22E018CF12C3157EC2767CAE72563F58C453F45C231219FC9
727D5A278CE2EDF98FA2196ECE13CB4F39641D55BAC021806D4F0C70B9355E15
49DDFA2C1693F085D63D1FFF7111387EA5E6017118C37AB2FE439C0785F4006C
B6D67EA844E60DFC94BBB4DBBFE13B37FEC33DF3B23FC7BFEDA3E64576483CE4
272074EBD88C9DCBDD1E51AC1353F7C1C41406B46291AC0C65C7D792B49FFB80
25A0F3AFFAA7D5D11DC706232F3CCDC7B7009AC9454AC8DB69618033AB34B432
9EEEBE1B4E548771919DD32EE9F8FBFF504EC0AB2941ADC9A9D99648E19DFABB
42EF25D43972FDC5885063466B9F7E5A6436BB6907872AD876231F80A434F30A
29E7CA7AE699D0E5085DA46C34A746D1D0CFA4FFE2D0208EDA33B058643C867C
60511980E04AFCF963F73ECD3434799D723F98631652012EDC1AE4FAC4D4BA36
45166E17676EAF8ABBF3E07D980AA72B5AED963E476F224B5480716850A25CF5
1A83561CC3D0263B7E30221D3E868AA1AB5E0FD14B7DFB4AE346574ACBE4333E
0446D7CE0A786698928404163ED36491F24D7C3D634B25C2C8D2C2BF8D8BC323
DAAE9B274EE5B7EC24A018DBFC1FCB1EE6F0ACA489085A034CBA0079EDC67CC1
4E825AC2EA07DC2763F53BC8B26924265FB219135EEDA51243C041A176507977
9556B768E950708A1DE6C64526F2BB2C5D51C91016A3A3EF9C88D57E6B6F6BBD
25829C3AE0C166F17F6748B63B0C6D53B5874942C33114CCADB5CCA696C0E033
CE57E64863E0F1ED4725EE7312BEB40F6EE919B5079DB32D4D817D360A379792
D91DC9BDBD93B9BA6008B42B8B118023EF6D0E0D40DB012D73E7A3C68476D155
99219CFCA525B4360BE3BD27ED603BCE4CFF4333C5F110CBE45DFD0A17B56F39
9190DECEE7309C0D148691B88BA53E21DA2320F008BD50F3A7176453B4B7F685
764D8CD6F92FD767EF572C5CCF7226C8A83646B877AF16C243F865FCFBE96EC4
737CF89BD48165E45DC671B52106E4B3F9808092CCC3FEE0F0F745E8FCA893CC
F96BFB8BBA361D551D1B385BD6E116AB4C51D88BB4064EAEF27DEB7F75627333
3E84F341637A1BDB292EADD055C97E6EB4C95F99B731FD69660310783BEE1DD3
D04EB580E1E89F377254B981CAE483B8C9A80BADAAEC8F1602CA4A59C83FB02B
FD3C100E7A65751929D0797D1C23EE03039BBE2CFEAF4D03113B2FD8EB13A29A
FF69FD90963692F5DB7BA4AA4EAAD8F283994F9DB1A3302A0957EEC6B7577323
0FCB7A6A8772EA08B42FF00A4EB2FAFA64236C99A49A43700037651B1F31AE37
201202D8AC25E723FF843C95BC864F639BC446ED662A014BDC94B0800856FEA0
EB39863D7D17438AEF0526210028DEF1662C5E0ABD0A5D16D62813867E3431EB
43FB6725AA11643D331F09FD5054C8388DA82EAB974B43A4D5ADA81C5EC47F92
F95E3333FA6D055222500DFCC771AD55FC6BCF596A5C544AAF8FC4D1C410C9ED
DDD8D161D7792393484CC4C5D419447BC7A47C09093C433AD43BF0CAFEDEB05F
28965E9A5B3B4C5CC00AB42C05BC9BC4BDAAA12F5ABE36D75C4863DCEAD5EA7E
608C65DD5EF2E6B90131359A3913D1DEDAFCE245701E8B9FF8D163531B2413A7
035432C0839D491FE80DD7FC5F554ACE8749D5E3349105F30D262E6122280D6F
B3D8DDECA02EBFC35880108ADD05021DB2A2D45B649DD784995D6E64960F8A52
D827EC053FB651D4A4FF559B6600CBAEAA2DB24862BD511C388D8E5A16890769
4CAD6BE9E75073612E8029D29B72D4DE624DF8A17FB250161C621055C48C5A83
4D41FE78C86337BE2E963C92351F4D749EDDD3FF1E7A358EAF513D47C127C25E
17BF13DB565B43AA46FC232489F9D33E2B134618BDC03A900C99451B44C3AEF5
4EDC0B983F60E355A10962A3FB2407FB95E8A6F36A2A8DB58351615E25EC792B
FC8F1150BFA1A880BA3798CC81534EE437E8CC706BA4C3D1F8C10556655A3A3A
C97535A6E4F812454833BEF05947F6414AFB850BCB1CF2A035EB7BAD4A223665
1359D3942F98C02657D1AD3D0084F1D8FC4782D9F7D8B87C85DF56F0BE7C4CAA
06E74834AE352685B99B3DF1664628337E7C3C069EB3293DD75774E34FCB5A10
6E1ADB5DF7AC44123709ACD006CECD6A193F519AADE200A6318951142A283193
78A6C459D1054B1D220722C9E3E541242CBAE6B1D0A098DE2B155BA730B13E56
6F44104BD1DF95D7F1298F80536F29916E426A0AB8B3F2D148CEE3190E80C659
E171B0BB5C4472E683AF093B263945EF22567E1A561B3C99BA714001F686C02E
90FB77C608D4DF56D45ED7C83B9110B8F99DCC1D027251E99D0238691081F446
F10DA725BD4287B9B4EED264BEE798E2768EAC843CF2984139C440B18C5F3F44
B900DA59472981C137D7CA5EEDA4FA3059151877FB8DE4F6DD9DB5A351BA579E
2C5DDC983652D0E7CE7BFB9DF4202E8625B83749A64A8F062F63302CC0742058
B19B7AADBDC3A735AE67A6EFD052FF7061548A6D343477CDB21AB072CF1C1D32
DFC49487D227A123811D47A6A8388236EDBEC14C5256B9940F0800E6DD26001B
E1FD486ECC381E09AB94F1A9224922B4A5C23593F8765E8126181FEC9396DA7E
638388619EBA08D92DA28B386B87A3FB22EBA7D7E9AA7FCACA03D905D96A8135
BC65C8292512F1254522265AB64D0268D4488A7ECD212F435D5EEE1A3AF88A26
EBE7BA4D5421A64A7C9CE7CACCAEDBA16A992E6B88C29CFFFC95F5611771DC16
B8AC07831E41FEC9CC96EF5CE410D2AB109B88FEDEC2198D16044BBA796678C9
ED23D6194A5CE79417FDC6853BDFE82E3489E226DCE847DB34D4909F8189CC4D
18C74E5A25A3F3A92DF16043D39E9456C802778DAA123FA126684A5378CAE085
0B5CEFA448861345A0DC0DEE3F8110D713A9028436019663659BBD109420C68B
7E6C9B8B11F1B3F3B1EF24974DD6824A8E335AB7E677723F32A69F6972F2E3A7
CF3C56A800EBEC5406DF4666169CF9FEE4E81E152F9E1712A25EBCC360750585
E50F5359F7E319879B5DBD7FF3FD4AE9C70527A55D3AFBE92995E547DCF3AF34
71F16FF759D63A7C091ADDCD3073949CC47EB3AAC7B89EEEB9E2F9CFC6BCDFD9
A438C10E6E675477F1D1B294824781CD883EABB77A8D8A93CE8259B3684BB471
CD800A378306459C022F4127F2E22074D2EC1DB81A77C19C9BDB4426F2E6E52F
6410BD76E441CF5E1041B0EE4D1E1AFB6B6FA6EFF9D626D24C4FCC956639D904
B7FFBB8A539A5A7870C9521A69E792093D1C059BF1370268AB1F0E9E41C1E7B8
2193A0F5CF51A6711D36474AEAC4F83628E491CC03F8398BA941BFB2EFE105DF
2FBFDCCAA5E0F1B44EC9D7CFAE64888771C7B30D4ECFD36C4945DD7422CF909C
84A83B09694CBE76C1F208FF79B4CE4BD9715D8EDB5FE8D1BBB2769C8ABD0E1D
2A25275572B872969A0EF5C919AFF8A4F85BDEBB9FE41719DAB7D13C8F1577E5
99E5C7CBD0FA7384BB45DC7B12098C0AAFE0BFDECA8155EB4B4622944D399427
F1230DE7D29DF971790CFAD5F5B21FE2D0E497DF6E457E2D5B2B9E1944E0D8B3
EB3AE74B1CE21F7C41C9A7FA5FAE2CD5FA940714204D06B4D6749FC4B0B5C900
A42D124B68D8B7833F1A53A80E058C1EC14B91C6611D4217131350E30D587F66
DBDA32D5E8EAF654E12C2E333311F4DDFEA180BFCE3D1DD83DCED5B0D1AE4375
2132BB19F361470EC393424A1C0FC24255111255AFE2F18C1272626A0E43BB46
DC2794D4A9A330C3E2E57C4477049B393313876048485D8916D491301D6F8F9E
8864D2E7440A64DACE99662610493E9AB21F5E97F57D50A5A4AA70289F6622AF
DA56C97ADCBC7DA169D8A9CDBE9DB382F1CBDC91D12B18DF30EC7B4B615248A8
1E069FAF5BB4D68A4A53BF79235A561974DF037DC158FCA0184FEB64AB095077
0BC7AA9575819DDF023FF06A5F3B1A51AE4850C6FDD313D8904DD7A9794333EE
2324C28259016A6A0D9AC9C55E914B7FE8CF7AC2E0CC91CA74C8CC6992290D01
2F34EAA23799A4002927EFDA6FFA1D9D5AC8F38F360AA384A8CDF19BFD033A8B
82FF19251B1D3735B67FF464CD57295728AA09D7A228C8604285777D95E72413
DF80D5F696FC6E297314FD86D37FD12C3584FC414A29C55D43AD2D7FAC1A63A8
218EF1FCDAE565AA6B7DFF792E33459D996A287758BCCEC7D015551B07AAD8C8
5C6196DC28076CF4C4A3BC0F31EC013F696F06BBA6E69C74E351C19D61778A09
9B8A3DDD11DDA4D011E383B8760088039292596F59405CA065DF369567DEFF78
DABE57C05972B75932E76E17186C728AD68AD1A2A3189049B25CC8A6B29F192C
EAAA995452FAE6C68CE006FF95E07F1CC1BDF16887BC7E8B5372C29D235F1502
2352FF2D8CBD028B4A14FF23F9A7F0FB3FE80EA70A064D1ED011A770D4A17094
082F66BF8B28CC148252E90F6E7536E42E562D8031424B09F7B7B2AC0F915A89
AB253EFA653E29CDBE7BEEE5E62A6874D9F0942E0AEBE6BDFEAFFD663F6C7E4D
17D18B8737E48E0F0061F85E265A5B0EDF813468DC079D4D4FC446E0B8F2BECE
C0A1E912D146AFBC2F6F95E7917BCE1DFABD5837A3B800C04AA103BD9AEAF42B
D39A75248C2A76C5007444F9E4793BD80A6D3A73572D79A8CBE198C9F63FFD14
70AEB471B36E8C09E1B766F6B41E595F24356F8D6E6EC6D1476ADE1316CFEFB1
49CB67410C30C1F0203646F53CDDEC1B722C92271F818BFDFC8AF8099CBCDDCD
FFE15EE19FBE8779B2EB67845910BBCEB2A446111B25F62DC4A7E06BD075BBF1
04303FC1F7F0EC7DAEA78BE4CB4D2984BBC856B81FB23AE71208726BCCBC72F1
9B05EDEB9B3AB24E156F2D45C52FB2AF2E61D48D6B8337C3BC9598A1164C54C8
78B02839FBDFB30634D11FB2F0E008F425F90DF8FD6B50FC6FD0E47EC84BA820
A73BA0403774A4F275D59699E8E683AEED24604913C3C7D2E784D6D267E9F13A
C2DFEFFC48FF021948AC9FB8410A3DE22E0A01E367C524702A8A1FE490454D6D
6F0B20513119A844E6A8FB598FE53D075AFA7A8A784C96F6806D9816FF503166
F83B4D8823BA09DCD401FBFA09504D0C93D99B4DE5B9FA3B46EBEDA06FD6FDA6
0DB9E4CEEECC5B89F37512261315A776E25794267DA81ACFBA91FA58E49F5737
6C1D61036AF2A021FCBF2DB825932C2779C3B008AF46AFF74781F045E3D3F484
E9D0A7AA9FB8E01FFE7121DC203A89648C906439ABF2BCDA111FB2625069E571
29652E16BDEAE32DD4672E4BFEF217E907C79DB9CF3744EB03FEBA08935FE077
982B7CC96B0EC02B042F79E7688002FD01D97BF158A674391B0B078E5C8EC998
673E8B1A7FA3C723DAC77B64A04E710C66785D661A19C6090D596AF515629949
5491652634A9043906742D7FB5604173241EE0C7C6A83E5EA2D9061CDEFCD8F5
E62795B990DB5F017A12825C0D6423157C93DBF1EF9A2B346D99DD16B544B595
4AD8CC84D2D6981646D9D3DFD03392F7FF36AE20683F24C7D1E09D83C5B09C13
652F956CB84F9F1A7AECA79969744921C6CB7FAABDC472571A69778551E4193A
5780E71276C60EAB7E25C124964778296D06CBE158023905D41817647B7D2C63
A8B8D708B2B900F04D0037580E4E1F22551AEE8318E6DDB981C45E137323255F
581A445244F338D090137284F4DD0C3FAA11C1548D07D190488CBDC82A51AE32
A41F185B68FD07C22F29F238059F2F3421FF99BCAC2D5403D67B0DD5ADFC6174
D05015E5AE3E1A3D5B471CAD468007C4A6BFEF07D313E473BC193EC913183B2B
E2ADBC924DDE75551EA7948959CD3D342CEBC40FF0C0FA109631BF5AD2E63DAB
E2C76D83A42A60FC00EDA9DB0E55065274669828304CFE93A222B496868B6C12
E1F2512FB63F606E73A0D0A9ADE783FFAAB0F4512809EE861F86F7037DAC3BE4
F876C212A2ED211B65A80ABFDD30259409FE8C3DD9E8A2D7BF5AB158F5E02B08
611AA01557D3A4F79A8E5FDE6B17F4FEE70866721B078B8F755965895E0FD41B
45FC9B2E4EA0D5A8E7FA28212F91D8E6FB8B549C59237137577AA2DBE0E10AC0
09677247D81DE4C1C11ED538F0FE06E7BBC6A6F11E5AE7C363134DF2E01E8382
D155D92AD63C3F192EA9071C2340A6CCC9E68C422B52629A2EB4DB087738C879
87C4699C4C322A5B614D6810D59EC974EA5B19DD6D64B8F03331C76E677034D2
C4934422A80F610C9693404630CBC7173D06135A9C739202C87AC8A76D16591A
32E4AD33008A84D472BD8D065D83CE79FE70B3A20B6BF595D594673CD97EF854
6DBACBEDBA5E58F82880744EDA3374CFA99DF7A7518A0D05AD493E6BABE6F13B
B914BE12D45400B0F3AFD0C47CF58A4F93FCDFCCE25860E9A1646A92A94EAA2C
625BE41A41B4E83E09AD7127BF672DA7C5F38BB5867D49E44C149600B40429D6
A683196C149DAEC4602F65093448ED659308DBEA0EF8FCEA25DBE6D5128B78AE
813B74ECAB561760E687C3BF7B72600494F60D3490DA80C9A46B2ECFF8E401E4
DE643F42A229ED49D981E5BFD36C9219BC87F668804CDB793530EF5B16FA6671
98CD8AB13EC722CEB29C19EF05608D01D55454CC24DE67F24DE4C3C0A6AEB4B0
BE5CE51D10AB8A61933338914DB8F3AD631FE88A64BAD4C798D5115D67859C99
84BD45AF96FB89AF3EE059471DF1BFEADBC517962A728E8C81AF5AA20F376C16
6FDCCACEA3D4D346F919FF829316E7B9879BDA5417DE24BE0003908E91DFF204
3E53242B1D8E6D235175EF70585CAA397A7BB4C82A4F910FD6F754655E7A0BCA
99D0815D3ACC1CBB4F761D6051DAC1734B322201F90050F7A7E0FFBE48BD2E11
B5D23CD383C5B5838B992AA1F74850D4542B770F94F6E4EF7005FAA7AF988AA5
A9FF12ED96843AC58C9605B72C601540F457192EE2525FAFC416BE7475D77872
B023A7950B3939DD770972D10431BD32EEA61B1635C3E67283F73FFC302D910C
05287DE1C7FCD757C04C263AA2A4A08D7E08055E5B922B20B6EE79EE107C0BCB
9928307ABC049C8004E21B98FE1F9FEB23F8E1E9809CE9BEF64342A38B540872
6C2BA3F8C9827A6F8D252C227243FBA1AC6FAE0EC38B4BB1CBB26C3C7853F849
A427A5870234E368DEC1A6B8D5DF741B59141E15D5934DF2891D0C954B079BD2
977384B96D8462092747EE3C628F9A334F62DF98CEC11E91273A1462E2A7616D
774D8D275B5D7E5A9781B2739D42973FA53DAA7ADA18F69F1E56264B8E31F785
0BB961E933EAF370C185F3C0C1779D733F531FF661381DC983DE2858E791F978
4018A015FC84E923D372C66C011F8185503029B9A2CDDC5111992E516453EC5F
7B220A0338C7ECAE46C7289BC9FFB2F624E4904F97DFF64007B9D1CB2029F2EB
98A3DBD94E943ACCCD35893686E88F8F127DE4EA963E24C96B9FFE9D9192B03A
578FBC2A0C9903B5E8B293C2B6C897D8C3C443D24E1D49BEAEE01747C25241C7
5A3E4A2F13EA12F53B5BE8837EA00B30A523F72C99D42FB14BEECE74FDEF8DAF
98F3B7F4490C3FD3D2C12C86712B4A6F4B7EA8705A3CC4AE99E54D87C8AE7446
DC3A74512FE0F2FF7860EA5C178F2868FFAD1BA378B23B9336F12F73A2231655
3DB303C8022933B5BBEC2150F5E35BA8BF9060CAC33E342531A152A5C611A52A
E12A46588DF13131F9DB843759C2544B686DA3FBFC65D4012B3FEAB06663D976
949A41D4E1FDDE97D4CBAD7F8FE89B4ACE18BCCCD4EF93EFB5605CCF608CD94C
E466C1FC3EDAEA3ED25C96FE89A7C6E63A86B4B7933745D6866EDE081280852C
5DB56F5E0E7D473EA43B716B282F736AEE1A9F4B9885797D0A9F685AA8FED665
4507F8458F9A8DFD39EF4ECD1692A54B96104FEF099AE254619CFD825A5EDA82
B8ABA8F56DE43C5E9A7D34AC8C20AE9DDA4237F7208E65D86C58DB747A2455B4
1E7CB3D8C64769914F79413535B345805D1835F05F2AE1C20C0743864A50D370
4070B90E0346E0F7873BA3F30DE02C2F5F77E8E58AF98EA01F6F8AE4A0BDC673
CEC32191756A9E98F487765D2AD5E8052818FF280C63B8E6429A8646C167002F
BE242B7CBFE8CCD3F6A21C5A0CF54DA689745B877D7ACCD95D647CFC3848BB57
60CBA1D313DC83B5E924BD35B372B51B848614C5B184B42EA51452F540CA75E1
8B3418BF25EF051B0C7237825DB5F7B38229004C93C93E2045B05C6B96DEC8E0
CCE49133CD27E789FA736740445A65C37C8931005E2E7957E228D69FAC509A64
83A9BCF868B177F15C14A034E70C5AA4687DF8E20784A852A32989A63805EEEA
8B14A64CFECA4BECF764C80AA175AFCAB68E295076C40F76B948F478C0971558
1385E08F5A87FEBA30C9F6C67F67B83FB108275ACF965CEA92DEC5D1524D08B8
8B2D69B144ACF418B6AC1E4520E80ACFDC4D8FC12744123F29465AC5267B3656
1BBE629C27FBE9A7F8F5B59726D99E2108E0FFB4CB01CF7EB2199F2D25AAF41A
24D9B74A0FE9BAF8DF5F77D27542FE4E19A08352CD22E77594549E5810ED4B2A
01419CC2450BC087467E6382C3FF51D628BE1D48B3F9E3AF0482BF58AA48D444
9C59BE9BC5EA020F90C1DEDB536748D64821EB2DEAD8AE46EB615ADAD672C6BE
223DDDA48E95A221C8EAA64A9F045FCCC3F5D98ECD3DCC13EBA3049418E59C54
18E87AFDE36303E1B884A635A73EC68D3834A0008F859D13822831A7AD0B7795
3B527215FDBEA9F81F10F370328FEACA8970864FB3E45F678E37B79A0D3ABCC1
C4DD55BB8641FD9BBAC7C1663075E687A185645A2A6D34FB45943836384650DA
926F24CFC1AC7172514CF1F4CC942F4B96738B00AF341E92446E39E4D60D543C
0750D7195150F29EE6AFF4909ACEB5FA29F511E4EBC1B7A6D267FB65B452F5F5
F2B8AB0B4503D1E9AA8E377610666E66BF1834140AF2C7C96B0A969C6ECB58F8
CCA98524AE18876BA2C9FF6987EB42A797547F96F920A1BA1064AC61312CAB9F
FFCB201B7D1E0E7EEA819C9E51D993ED126006E6A2B1C88CB2EE8097A410A974
0E7C3D6874F0070FE57D16CD2B116C63AA63B7A901C98E08B92B8990F1316770
BD257BE9B57A82BE7DDEF5CFC30E5F8E98A7EC74DFE4B9A148D9DB524EF389B1
FD4EB84B10788CEE2C5D48969ECA35BE60E5E68D006FDBD2BE532F3B71DF881C
9C0E543C89C4DEACB03D90D46F6F72E11C13D38EFB1B7A4C8C8594AECAFA6BCB
9525C67AE8129CEEE93D0E4431DB405551F77959D5919815A98A89EDBA52FFD7
F2132581C20908B5B88F3D8CE2F5A68F2C88B82DEBDD627D38422FFC796CAB28
7A1027CFD74F17037CDFA5ADB354FA33703E693DCA492BCBB3765E5182738951
8A838DB17A2FDC5AF8FB9B05F605C91AA11485015CC8B647B833E5724D8F5C5A
0906A7700D6624E215BC8B045031D936BEEE570010F240221AC9A10F5B787F81
36C3C43435870DAF71D9BC8C178AC33B498F8F495661C0069515C10E979589DE
9646112579AE7237F67B313D5DCB98F39379F918E6224EA6A739432B543C870C
D2885E71EF296FC66D1201EC86B7C2934DB6FEA0D11600B36FE9B419C381D9CD
3C676E3376C937FE4AB2C6596ABA6F44E4104996B360A0A470C5422D09A1BCF1
82CB1FE91856834A11E1784CB2521D2AFC50A3517A0C04C939FDE568282E1FAE
278E6048C0EB8A0B82252D028837EDD804BD0B761B8ED1E7184882C040EF241F
866189CA8DC2EFE4A607C3EB4A6C06AD50A6B32AA0F5E525C03402B8AF7F49C0
0D5E266D3F777B95DF92556B38F254A74BFFF2BEAAFB4F0EA0D1DA71FCA981C4
9DD4B88BC6F4D49FBFEEAB3F2E9FE6A9BCF82FD2723591BDC0DAF5E74341B83B
CC84DB830C84D29329E868A825B8A2BEA4C696F1A81647628E18DD125C7E8F4B
E1C7AF9702CA13B36325FDD90110F1B8A03CEA4DAC3ECE6505EE8972574CD5EF
7C12AE10ABB066C7503DCFF5EDC5275EC13567DC75F71C7B290BFCF9BAAB9036
06949EB6B60B749DF353AFF740DBC5F9A399FE6FEAA973BC8F7FC8491BAC92E0
F548E86FA3D25C538C6EDFDB80E4E1A33128D8DF39B1EC3A78086B0B53358140
F209301E36F66014AE83F0DA0CDDF57F0C7859D5230E7C043221AD2781926594
A4119551FBFDDA92FFFCF7B2D6744C0F0A489FCA954A0C13574A73B378C5DAA6
DD5D5492CA17A617CCE037377447A4C768952294D6BC6A35A142B497636A8E4B
6AF111577854CFB042EBBAAF71F55E8F326562F91FA5E89D5A1287E42A0B56A7
106D05B142ACAD365E7E59C39A2EDD95774AF2E9B30A9D99714559BC69D21AC4
7139885971EF95317498C96BFF7D70DA6B60528565F0C5391696374A36C6D9C6
9BF29D3D3D707046AFAE22021CD82DDFA79D31F0B406FC0F7979554AB7A711E8
5E1852970E7A346D09953973329B8625EB4BCA0D567C2DE37E03EA3BFC1A2BC5
D9CC1834981F849769B3853FB5A2ADD8F512AFEF2058DE76E7D48E3C78C99E09
97BFC51D1E28CB4060F09B4F6A673C82411D938CBA218C3EE3F38DDB4260B54B
B5A9380F6BE00A309088C1F2364369EDD4983E5DD9BC0C6D741A91BE20CAFBD6
BB54786FB221DCFF46AB8194C03C46CA0866933B8765FA9CAC353230F8671F11
0AD00B9AF08E23DA4E747A4C07688A0EF50484A7EFC222B6E5F6251F8378BA72
56A1ECB94CC51983C61EF0334681CC0947D307959F71DA6F9A0562088BD021FD
8BDD77B4E548930E036C3058514B27B6C86D1E4D51F006BD05A328F8EBF53832
FE970ED2529C5E08D26D5F21BE28BC4EA079E828F4A4BDD132D7FB3E3E9F80C9
6353835455F4F39629920D2B707B6D8CFA5B0D70454EAE1F95BD61C757C9E820
A0A635AA6133EA81894A5F1B12E63B518139BA0895EB83A1B69D9B534D6E7C96
958B2DF0E7F6944CD0553005514C6E75931C806FC92E4D81CB77234DC2B4E480
85359DF2E6D60695CA7CAD017058552DEC67B5B72BB00292109DB354DC24C024
90A2790B34A06ED7E07241898B7DE66DBE09CDCACDB94C67D75DE49092A1FA5C
9B648F29BA0740A7DF5F37583A5D262ED41737C237A6CB74C4940024F33EF968
6D4B1E40DC45DD843E0ADA19090D5686DA3118BE7D9A0F3FAC3EE597AE79C2A5
BEA949AEE387BF8964A9D946380D27E8A44536034FDE4E693E5E5429D1944FF4
248605298E3CF4CB287541337F158A68E5A56C6E32479B8658A49FA929F74089
33501D259283509385FA6114DCFD3DA78565DC33AB6C4B24DCC09271F1C400E1
1F2D59A0C446B767182C2C9F6232AF71DBDA671CCA1DB95AB4F8E56E209578EA
1C3A8F81345DD77949E9FC9BD3B76E6F1D4F0E743CF1744326796F74C5240377
0035953012A53FE099953729543095FA374BB95D075C01C5B00F6AE78CFC64BD
9E214F3F0F0A5DA8C6E601C1199CC7A25D1AD1AA94E46D86577E30950B36BCBA
BBAA1F77D5551337A1E80AA1F708703D27EA92BC30834642660FDC577E7DCC0D
153A3FF0AFEA068789F4B136EF24344C61456A7238FC80F55899DB7AF8F58026
0F65B500B1CB4F01C39BBDACAB70E1FF20BE127085C920072D5AA6708C893B3F
590337744BF77B001823E454DEA6DF5CB521B029C1D1916DCACF08A871810841
BA8EEF27FDA8CEDC0F5A422F50E6AE2B2D6FB9BAA0C18A5D099F35163592EB2F
ADAC6C3829E920324E2CDD03C1A1044A5C082409541E650E0BA600B0CA692FD3
09AC8C0405045C5C00C5888467BBC5AF0704EFC66F0B6E673CB2506CE1AFC919
10FB3661D8B5F4D9B091C9044DB057ABE421BB10A3BC8994824279635F706791
C874BDA48C991E226794430A1E27F3B269373864D16395D93479B3BD39DCD7BD
38C070DAA7020BA0B6B7904270796A0CC3D7C666FE4723BE9746AE6DB06DA1F5
DF1A10DCC5CA0507C0EF7D9D809EDC6F9BF44865D8DE88A3656EE32312F006D9
288BE460A76BDA096E1F56D875953498AC0DEF877D65E5D23F8ABEB567E85FF0
DBA2E87832205B9D739FE9C78A4E7668ED60549231360326307366921CA6656E
F541C41C72F9AEE50C4958811D7BFF29679CADC10223AF53A16B1D7214037A9C
C263DC47BCEB3870A10EA2D5A70904E9A949900A390C01C4E7C83D43E0530A2D
C658E78B37001E24D6AB72047480DB54000ED2476275D5384C7C8B88DA3803D1
BAEC3DB55869B517FF619205AEF8A681437BD966267E05084088FBED9E3B7BEF
807AABE512CDE5543A80BFCDEE916EA8DF841CCF3D0487A9336D6F57CF5D376D
2C48FFEA0D3E18DA7E635124347C117F9BFDEC5C71BDA65085E1379569D89CC6
C26C8E223FB0B9324CA4C4AA0B96C79E4C56AA3D17896BA64439D3A6C478962D
A8A106B00491DA5F03EDBBB246D9DBC3FB5FBD84DA8783959389D3BC35404E45
DD7A6FB60A13CF8374BA43D1947890823FEDBEE0378595CD5A86495241B8138D
0968B10302EF68B95D0176A7D8134AF0850DD3EB5BA2ECEB2486BDD0CC91D565
00899EAB6C50006F173642A4F01C376C21582A336C55E04FB13CDDD0C0C032F7
ABEC0D13D5372010AD7D872386EA9FEB325D9B4567CE2E07A0F35A2CD8C85400
3B80338A66A0F2F95689FC40D2DED6A3A8FAF91F593E29BF4B295418027A0361
4908B56A13250C9BDA6F2F9A0BD022DF4F1FFBB0D5AFA8AC6558C8A5542EA136
06FF50427B84F05F57A61C43AD8442AE5B5382B9D7E8303337528FD5C342BD44
21B7A5822A6A76F04DF2B32E5C07A9B47BF1CC0D4E406EAFB1F96031083D24E1
D1B994349A999B6BCE290C33DCA0BC08D71A09F00C7BA0334A25B14CE0D47821
E561147A34DD792C27088EA64713912F29953E4A79E41807B4468A72E8713F7B
0018E9B53401692AD9A04103430F00FC7066E29962F1425808791B821DEB6D64
8388D94E994F76C5A235BFF7196DC897098773EF4313CD8A14042E8145CA784A
F6D354A795787946B2B681982D0242E2D4675D85AF8077376D5142D44AE4E919
FC686C777A7782D2F7A2963899CDB69CA0495D73930790CF6610534523F032C8
F336AEFCE0099094484BAEDFE3EB8A70A79A460231C3A0DC257068DE21ED265F
78D9BFA012ABA305A630B0553B3249D6BACB3B1C451D495A2CAB0ED428FE3826
5612C910B4874CDB6FBBF3D1D29FC722AEB1083378E0BA9F8678BC7C62FD14B3
FFD340BC7C5DECFE0AB36443DBBA6F10B22E6141AD46B4CD687D2DD5226BAAD8
37AC9499D6148F2593386DF23B67CC9FA94B3D8D4477D59716529C8ADE765D44
0916A7A91C21D72A2D363A9FC8A04B313BC10E2C3A229733BA0507EE0104C346
FC04F3ECE099385E98FC092F5E57DDF12BD03B7330F38A86BB410E56AB467E05
23CFD60A4689105D409F2D1D2D21847A702489B22933115DDC46D798C6183BB9
08FD0D6AF3EBEB7BE3F982CFE30B027A23BEAB747FBEFFF45F85918879FE4287
B08BFBF58A3E5D2B7D952A379B660FE30C9FAEC61215ECD9F3D51774BFEDA701
9CCAB17CECE5603074CD8CBBBD76524B4084D516957238FFCE89444C15BA98BC
A27A174698650CD0AD7FBC93AE17D4339465A77CD77EEDDCF5D5FC082CEA6E20
FE3ED364BA627DF38171CFA83009F70363F8A2DFEE311A3F44078A3775DD0FF8
7700CE95F2D12DCF8FED2BB8A75CEC56248C962592A76C4E76BD3AF143EB3AC1
BBE055D50049C334D2870A7852BEBC4828CA97B68CCF05111183D2C98EA068BE
21889A007A66C112BEA65DE1F3F015BAE37EAF9984703CE906B98A38431CE2A9
311303A4F88B21A0BA48E854FA64D667DD35E515BBB46B8E6398DD29FB3734B0
005409C4C913A614E76231C933E63BBDFB6FD1D55A99A8214183EB3A8E02FBC9
CB5779E8F1633C58C6C27799B4C99029CD6AD754B009CAF7800648B1280BF7C8
DB29AF5BB440614894C3B708D1656B478AD8AD03AEB3A6980686F40B87BB06C5
BCFF27A1A8991B99C3F67B5D237B6EE6630A07055205CEA033DDEB22E4B62542
EE747801F4E6AC66CF1AF03F296A9FEF45A852F81D0ABF5BBDEA8BA1BF07A531
DE3AB74C8AEF276101041CCD960BEC2A43F31AAE46F395055272BB13B33E76F8
0330DA705C79745F65EF2831B6C43FF121144C3038D3B43D2DE4E8BCDF26C1A4
077E24DBD35011A9E4FA008F40A46C1F422E38D1ADE048B9E15273240A44FCA0
EE13D224483031C0C015E19519C6507145D3D137D01B7CEB88F9D862840DCA80
34E2D7EFFD5D5665975F4C300D1F6CDAFA416D05B8070B0C78C38E882BFA3B60
9CAF031A63AAE4D13B6B45D683114DB512B7BCCD3B2B178B3D764300DC6BFDF2
A11F36EF005402F64EDF9E4A34AB6C232015EE53653319639E74D2C3C67E71D8
BE2B877FD9C5DC55124B1522FC4902F3C1FC5147E392862323FDD2E33C84A65E
7EEE98147C12D7F344416280747F26B58404A0C70896B1FF2CC7EDFFA94E1894
306CCB32FD51C981E83DB6AC36E75B18D0300F6BBE074C65D1DBE6F812BE8F0A
1421F63A7BA39B93932F90C72FB7C37CBBBD7D522C8CE744548A2C83FA679867
D7ED48C838BA507AA803E9B8F24F2DA59624AF300E48F38958EB968B53649CBF
5D328CB33EF99703CB7DDA7AE9356793528E29F6DC482B38F0BF18A8EACFE7BC
A88EE8C57CD39B37AC93B2317AF9E9D7AA52FDAA66880B72F4CC89B11D9A4A20
7B4E0B9057EA60A1F47FA8D8F4BDD9140569D616A02607BB8CD95550E3A14615
7BE30A845EBE0464C35D03A14A768A1CFA5C4C5BD6AD7C0DCAF943733D32C02C
A9125AA09D97FF24A7E5C2A1570681A0551F54D49053D017D583CD36D39A6933
B974C8760935296A01A8769532E6C01E8A47142B6F6A83275BCF346C4E828828
92FC4236C6737880EC3536843385270A83D1FAF555D633C7EC61B906500C9FE2
E6A74815CE72E070058C4AE3BA049A39A409F5340F86658CE737FF97B2C10E2F
ACA649558D895850CE4C7C058BE38607B5
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: MSBM10
%!PS-AdobeFont-1.0: MSBM10 003.002
%%Title: MSBM10
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name MSBM10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/MSBM10 known{/MSBM10 findfont dup/UniqueID known{dup
/UniqueID get 5031982 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /MSBM10 def
/FontBBox {-55 -420 2343 920 }readonly def
/PaintType 0 def
/FontInfo 7 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name MSBM10.) readonly def
/FullName (MSBM10) readonly def
/FamilyName (Euler) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 78 /N put
dup 82 /R put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943E919FB4E3240FEEED78EE63
0677FAF39AB2543D18C08A2B98B97451CD42CB7893DA8601CC0F45A65BEAFC64
EF72554395DA801CF2E9E3B03F65F1BD98F8C5F8EA06D7457842303C1A817E7D
69821807328AF426B9DDBC188A79A66FBB9E6193B4A3EDFE3136C6574B9C4C94
E2CBA4FE7997F949BB2DAC0D329C2AD8E4095BD18A037AC9F77B794FC389E5CD
56CC4C0B74D64FB0D02C92B88942C18B6DA84D4CF482DAF3A01E80BE483AC6ED
AE98F5F3E49BC762EF6BA937D528E751D9588B0A1E82EF0A5998150EC3854472
5A91EB983915BC1D6E2C3E615E0267B39D6937ECE0EC16162FE76676E5B69F3C
BC1AD934BECA284B89F0613B70876247D768BCD246883CFF4D819D6265302730
7E4BE6B2FFE7E91CCB8C6D2AFACDB4C5DB9688153E1D6B2DE136BF7068418A4F
2D1C0CA301B1B97290B46EE14B8286A81E709980F67382A5132F01B2D44DCFF0
9753E776AEAE2141D580E64C82598DAA6DA4057FFA9D02C3B77AE15A50AB457F
3FA5A10A3C986B22F8E154C1E564A55D3BE4487677613DCF793F7E1B57C9A925
BC57746C25FE567719A9EAA9CC44F1D0FF8F92C03132B205F57E3AFE9FB66632
D3FB3EF5BDFB9848030527FE759A5273CB81DBA2719611355F43E34F8FD7D0EC
9BE47685A2D122C9B60198A430C5F5E3F972376F0FF4BA52BAFF64095F7ABCBA
022622692231FF87514FD912B80C07A0EDCEECFA629E2734B5EFE2604E8DCB24
32A4C691DB4CCCF19EF897A9F4EA5B2B5AFCDF87AC06B93669F3007C1295E016
FF0A99324B80E37020B1080E80949525B3278DF111ABEA48E7182B6F48833E9E
B7BFE6134591C923F2C91D77A132347F5F471F1139B9938E880CC5B3409B3385
9FE870D53EC343C11C946BB9B5FF1454AC7D547539FCBD3D77D83180BB4741A6
90189230B9B61C6C54309B61623636F98871724F9A85088E44779264257FFA0A
FA05C2842C534A411593D10A76CB09C8FB45E6E44703FC7A51D81D3C1E8F27F0
3AAA9F00AA3A998A0C661B72E46589CC08EA87EECFDF36B819B07306C38AD155
60CE44A39581BD6B555165091C5D4107149E976E2488EBD830CCB0A350C695E3
ABC1069A94F16744A6F2D97BFD4E208EB2BFECD6B74C35310CC3567F94414FB8
334C42FEAB58B02F67E9CBC1855FE7DD7C1B142979D80DAF96A3F3517933574B
07E1CAD5FEEB9AD584935A58676976DDD2B6E118FD1D46453894775B2DF1F871
924CE2C0479EA8C8C337504C1F456B77CD97DDCF704455215B860BD0241DDAC2
F375DD996474504545DD2C1B775E4CAEAC1DA45C79223AECA9329513ECA625CC
1C5FC3AFB291A6B75A593BA8B9CA4954AD9069797717CC0B929BABA88F67E4E3
691AF74A94E95E6AF67C7B550FE44C63FAA5B404457CADEA896C69E5262430E9
787D1CB2FE11612EB29CC828ADD9B2585FB30DA75565D2D87C4AFBAEBA55678A
4E32C9C491BC85622463D65C0E9723DA72D45C6893928AC636427894C0E9F152
2EB691A2A5801D5A81640C764F9A566B08ED4A961E3BFCB36482DF85E9BBC7F3
5247FDF3399AFA35B53FB77245F078106D54A33F9750D97EDCC08D9B9F2ED1CD
BF03FB8DCEFD50625819EA67CF3CD416A288B64803F7812C8098AA640AD515FA
8DCA20A4D4C737499EEF3679764FD4A04E5228B1AD544A8895FE9041B84059DF
8838BE0BF67B63ECCEA2C818E780A376155506DEAE8EFAC53CFA081E1E3AAED5
48503118A8638431E939D9E13BE594932C814BE6698D6FE3F0A15F05D783EFC0
F61B5669446FD2E920C181ADFE551ABF15D225BC65D7D42768BA1EBBC19F64A2
B184B211D5470F81BF381EB20360544635CA4D3854C52FF691A36F65B8FC21FE
C40FD027D6674118CC6AE144B22580218E792D66C0A78B247F176C5DC2354D7B
D7C057D61D96D58A77B1D185B846C03C5E1EABA4E10AE611F9F6101BB688F315
A960C17110CC78977A7E4E7192134CA69E81694F4B9C95F55AA0E0993D1AA57F
1B79A6329C4CA5AAA7C11D2ADAAC75F205A46B98AD7B55C3E2C848B7199BB7D3
1FC47D6B8B5763F072395B0290F3852D907316BD2EFF8DC8F0C56D1270CC0240
FC4E984DE027548467A1AB533FCC30AE9474B0C7FFEE3613B07F31CE784BFEE0
D1082C6EA416F1C9168C61FD6AD9D85529CC3E6524756E85FE5F3EAB6872587A
ADDC45FCCD96D682A7955721B85FFC8A38719A69DFC85DAFF614E4C2FDD72AEE
FD4AA3A0A1313F7F8572D560C6083C9E631710C6B2A3EFD47ABCEF65271557AE
21E0C130E70A8B764150022F6E697BCAAC6986BC9E53751FA783E0C060228A6E
A40AD3F2BFB7606DC0F40AE7B8E82FB9A7F88FB3BA8CD0BF99C91FDE78ACD0F7
610091B3F0CC1BA054F52269EB58A332EFDF0E03AA4EAFE33E3CCE1C24A0A7A8

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMMathItalic8-Regular
%!PS-AdobeFont-1.0: LMMathItalic8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathItalic8-Regular known{/LMMathItalic8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathItalic8-Regular)readonly def
/FamilyName(LMMathItalic8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathItalic8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-24 -250 1110 750}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150819714667093ABC1E
AE2ADB86A92EDB8860BA65C926367BF8FAB5CDD2870C4AAE2B39538243DD06AB
AC3F1DAB2BBCCD33BAA90FC33130E1723595D32CCD11943BC3E719FF32DB8933
A43C6E33162B65403A3F10A1CFBB9C6EFED4FECDA364F17597D60F298578A3F4
1C207D322FF2A75B07E2715DF2E396BE7AD112356772A65C14D49D03C7D456E5
1A27C2ED815B30E268B02FB1D2E769067ADAF25F28640307E3A89F0B04F44A1E
1392A44B8AAD82CED1539B6A9CEBF441EB81775C7EE4CC12313F31FE710DD429
4B1955DF2BF7A88E1EC21DA22A63BF63E89C913EC01EE10A0601D6FB239DF59D
2CEE7667F4CC4BAF660B24F635F981638F40E8CCF07F21F5B5FE3B5C115D1000
0E4B2ADAF7B1C53935EB7414421DB49A59F82D98D08351CB0BF0C06DE836CFD5
42D68D51AAD4069871F257AB7733F8EABD731FF9B0E3AD64000BCDBBEBE26F88
C96730B45C14458F42927E24318A97B48235E5FE200DB40706E9B41AF7CA33C5
67BF7766BD396006C5364D1E736B256538E5D163CDA75C4F419620D5BE5DDEB1
F7D7A55B5ACEA2B2EB4B78997398C7D38B3D7B5774D980C087236ACC7346F518
7607A19E85C83E2C6ED4F3FA8C15B65FC3D117BC5E3FFE33A5B7A69F7F7159CA
667D96B5D03E4C5E55FCB1F4E2148B4B8DA87567988F07CA181FA6A3C3C30A33
80AC6F4E92903C47BF489A2376AC02B00B8CD01DE080C96A452D52B4B56F9520
B85062F15C4828813D3694BB4BD3512541C82005C9AA5C065476148A4E47DBD4
580CB1ADD206D19E7D653E2690FD48B252BFECDB2C64C96F7477B2E5EA0593A9
84841E96F931F01B2B61C26E8450D5F2B37B51EC364BC2A1233FD108DFFE0F00
AE57465ADB0191B38D14E89413FCCB77A9FCAE09F59A3F5C352570F7390BE91D
178255E10C02CFB7B679DAF86EB351BDEBB8A7D4DBB9C65715A1355FC8D2C355
BB452D44AFDF7E25676F3D6F6BDD983146333DDA29DB81DA54F44DCF5364857E
A20DB59006F78BA077D29ABE7A537D2358B1DC13AE97ED90F7D1AE27A1CB55C2
F534E2B546BA5531AE88840CAA741A57ED1F4587A72E74AFA15F15C69046ADB1
B3B6C392AFD856716F96B850D6FF61144F6A9E51CC1B8A86A35087D4A3A37081
D7529F94493EB4739C267B8C54B3A1FC2146237C1D110D4A10112D496250647F
37A36F59299DD9529CD003AD4E0847689E519FBB2B7796420946754A6F74249E
9F5EB754DFFAAE0F1936A0063645B0F489940C0030CC4694BF66B002DF4A5276
1B6CEFC37BFFDB7D6340DFE55265AD2D48616DFA73BD22222ECD57E442DB41EE
4592719F816E3A27E315FA2DBBAD1016DEE5B7016B5BA9BE25E8F90C80723BC0
3D94376DF869923899FE218AF45CBBF0E38549F95B53F4D5E0EEA2F21919F23B
8838C7F3EEEB60A6554A2CEE1554731A0ED34DC1B9CA37BCED1A7417E8595721
4E16059BBC68BC2EA7D423A39609D20663A342A0C27BA407619E61E67EAD70E8
ABC6EEE2B195DA25A5BD6FAD52561ADB40308364C692B09BA5C161F41DC07AE5
137C4BAF4B17C7334D32A10AA0AC49DDE9FA4E230AE401CBEB54782334244B76
7EB7651FF0B70681E8AFCB58655A8FD0B2ACD93AE0BD0B4DC0DE5407A001690F
600E07606041D6621814F9BD96E7D0BC7949A83E211CD1E4A589813B1DB407C7
EBD122E92F155C7AF5C9EB6BB66BDC853E382B8F2FDF7072CDEBB6FC9D5A7D09
759DF93EBA82D2EF601673E5E859A2DC3C7A28F1D04A4333374B50C877ECD31E
A209D405530A82BB1B0D8AF3AD638AF86186F4FD0903FC2C61855A87691191AA
33CFC276DA80162CE5E80BB0107D0E058BB092FA8B96B2FE19AD219D7A662055
8C0F4ACDBC835F69B73136F9AF3439039EA14DC7D9E53A5B9BCEEE2EDD30990C
43A3A0944E1D9CFAA26F1CE62FD0D8C71D38DEC1FB9828DB2DD788F3BEDCC84B
9F22A9E456BDD0938B049F9B341155F12BCE4473932308A1D7E28A0564A354B4
2C8975742FEF16F554DA251AAF6783BD70D114A756D1C1144DF2E399F7512B1F
C926EC355A1409077AF83A6A23F4A209C98B1AAB76A2321D194DA347C0CBC91D
A254348ADD815687DDB99DDA88F1E2C5887707CD4C97C220D38C422A119E8C6B
B4EEBA5C1014BD346B51F77C5D11EE330A8B81C2C6DD5FDA2391C5474B5E81CD
C09CEF9B4BFE348EE02DF29EB03681928AC77F7DB374E0E3D066CE1D728DC24D
8C2C25B06AE091DB97DCDE55F701A63EB5F0E7B6958E52F01604B6D9F686A1F6
92F2369D7E5DCFC91BD0F07821558AB2DAFFCA2B7E3A61CFBD58995AA55718D0
26A73879F1EF56E2E83E802C89472529D7F3743BA7DE197EA627089D71EAD77A
595F8BB154FC3A34C78AD48273DDFFACF3E9CE658F75C9A209EE5E5D4C8A9105
C06BE3E65981384ACED7AD833A68CEB909F16D65A54424BD0E649E488A00C554
429F72F81976F8106FC0C276C9CC604B07E09D438052E27B75FF803DA9CC607E
5AD644A7E7336B50F8FC10EF89DD5E398B38D4676998FEF0FF536F83C00C1617
0A49BCD936328FEDB5C4A320C0B4C7C68077AEF5B994F7E888885EF11BF0ED63
533B9802B31F2DF9C22DEB0E8310D2BD627766517CCE416F7864ADBEE74DB7BD
A4815359662242E4FB89185D302F7368911F6BABF3E4989AC38D1EA3503922CB
D37AE177C8B7C24B02BE2C38010560A3FA40B336DE45D9580757D37CB8D47CD3
F0E26AABAB474EEBD3B4BBD2E364557D69509DCD6128A94775F857F1E032BF2E
C4FD527B0A86E6C60D4CB128CD5B61994F3B11D7E5C557965B2ABF725FB229FA
C5B0463189E6CF5790DBCCD67F2925048DA734C2B3F6D786C269A3E01BB69C3E
00551B6071218CE0B3C1BF88DF87B8DE685B16F3F33A59C2AFBA673C1CFFB6FA
3628B1EB9E0E9A2D7EFB94B2D9DB164923B8B105DB8F52BAFE4D6EB1DEE1AFF0
290DC62CB7BBC58223FB032506BA8418D7304C7EE0559C01123E9736721B941E
0D46F503F2E8C4A0252C7873002016D6542E5DA03F7C092692C857222F2295B8
49E7CB351ECBF0A0164289A675DFE39DF546A3BFF3244C90733BA17E4472E897
6867475731BFCBF77993B27F23C4B9C00855D32E41FA74008E7919F1710B910C
1606DDE3119DC7F59A46F0792B732E027546FDA56BA1B42B0007490176ED4B36
D84920C033EBB5F76133B27B302A22F73DF3EF0A8DFB53E079F08B4F4350C2AC
CBF86ABE52F79A2DE25D2306A9907DF8E3FA32172C6BAD7AAD4B07B301837E14
1A2EA0A4B6E7E284D16CEA48D3D49966E5A5EC3A6C3ED46E42C178B73242354D
20EC24FCE3EB75AB18EF3374BA24E5B1E6617D7C4594C71B0583F0725C924D0A
6DCB13EDA7D23A49CC07A79FF6EA8C154A148C78733E56DC101D1864D83C1AC3
2DA2FCA2AFF739BA6490037801D75EDC4A13F5C3595FEF39D6EE6A5F2490DC9E
ED7CDCB0EE4F27B6EAA9B47991D6214F26AED4B5FBCDCFE9421F2AF2FBB587AE
3054F4F19706F9CD484442A1AE0A702C8FB9048BADD5DB7A77099E654B47FB40
903C09564CAD248BA15F694A504C9D2B5F13346A69996AD6104568EF46CBCE7C
67E12D4ED130A24379565F632710D4AF6A4DF921D12774C9866B18C6392B2658
167617019BED0D39DB5A724442EAEE75616240233CCB82C858476F350A093364
6E2B99136A735D2918CAD68D5D4997CC946EEC3C43902F774DDEA505B652DFB1
1253C837805D7BAC6C37958C579E068B77E4583149A7BFDE4EBCD4791F9F7B84
6CFD58A5571DC2DE5EEDC9286C8E098AEDC19DCF053018C817203D55D06CA782
F3848E26DA4F84459D692CA02BF2295ACEEEDD1A0EB3482372B2C20ED8955A37
46400C86F6400EF8B06C0916E09ED557EEC3B869878CF18B41DF1D52335FA132
E7F7F0C27E71C4DD01A391EBF3148E2FF2B414376ADE588DDAB4849DC1990C26
91A0606554D7B8CD30A8E01D0210411C14FF0787CD4695F479972862166FF73C
02A7FBEFC596A160ABD63463BB5A000C9AD6EC09DF82B69CC6A397D4628F701D
E9FC5871407875B84808625789030134FDEF8AEF23EC7B6E6851271106C19AB0
995989A3BB500FD3C71EE29E84E7A24F9E899701AD1203BC734372AC2D6CDB42
9757D2C287495220DC98598782BBAC5817B7F9D97F55C9C7DDB6F90FED065972
A69B28E4E3FD3A2292CB840942ECB3949FD0FD3A73FB7F47D06D646E4C7E60BB
162CB97738F0D4468859B5A8F382E3CB5EC7D36A59CE3575F7D78994568D0487
36CD3D7BEA29F784C753CE0698964558913A3596736369654F24CF97C524DC8B
1062F56AC4EBE074CA82656AFA75BD45D4F20EDEFCDBDDB63FE9F349A5CC5C9F
4F3BE2004CC962E6FB78384748B83FBBD1A4A0C2C2ED14403A13B99F6BF21603
C84399CA50269438FC521DBCFF2DEFEAF90A6CA79E351A00D5B5F6928731F907
399C7A3D804EA05770B2A29509F445DA28B57DCD1D701B8B122BE3BFB3E87A61
20C95E866270E16FAD8A41965C1132478D986389A218249C3CC41A3595FB0D48
A83BF964B071FFCF8B54FFAC4915C5088FEBB3482EFC0D77E172EA1E780460C2
48F729EEBE9B958CA78BE5B7B8296C4884C57CECE0ABA98B003B6254B5F706E2
834C3D3600E053F53121BC77DC4BEE0D8EFDB68814428D08A49ADD055060E6BB
FE3E7D9F17E17BA9F2ACFC55608165031FF5A66EA5DA7DEA607C231FEC4FB28F
F22602924519803CDCAF8ABFBE0DD0D1F567617C92BB9F85CBC450B27C1580A5
C3C74BE4789B6660B2E5C8C1942714796451A79F4041BAF265467D335DDC8E3B
EE1C1147B87E57E1E5DDE5808C6105A86653F17D646C5C2F4257A4D5CED1E937
F568FD3D268BBA5D1C47DBD3D15588E7F5F0A76037F5162ED4827930A1E4870C
C38EBD6C5E70CC9FEE97E7BBB6DCC6C40B89267358E22F432BC066AB9B4B9441
5D8B82F7B65220E23A48B2E0503684EBF4D029193FEF9E73384DA21D009EA796
1865D797620806E72C41AA9F2B80CD328B264955A5D23DBC816CEABB82125F8D
F6FB32CB72ACEF779A91E5696398B2A079394E261D23DCD94D73A1CABCB0854E
F4C734E0901F3A2C7240EB92AC22240EBCC1C059064F72BAC998B6C095005709
3A40C10C95FFFFD85BE937A3993B30AE5A968CAD2464F7A59225BCC12881843A
5BD3824CC5950A4F5ACB2ED5DE6435F0E1102309B789A55F0AFB7B74B2EDD594
2CD4DF39F4BA0722AF8FE780AAB2EB3D6E16DA4C26692E86A46B0D89A7E23C90
CE902177017CECD53BB68EE27DB1A6CF39EDE2E3CC5FC9580956F8EB0CE0125B
2D4ED79E89B86088DBFDA86C85C30E99DFB4A9F151B799964E5DA81A4B467D17
FFF21B33D7158F44E04DE970AA1B6DEA4E4280A9C8EB23CD6FD73E6AB3ACDCF3
C1B0CC09026F3A508DBDD4524D62E6F3B6864502BBBD68EDCC8041BB8D039AC2
8FAE1B753C09246DFA3BB9915C599E73133530B39FDE0FB6FFDD3BEF2D666282
549EE6230C78D2D6CC4383135A3E120A731D33F7C872EA5EA5E20DE2B31AD72A
B3F7C15F9081E873541C0E85893539AFF01A7F6275A9A9FAFC5D7972DC743E29
CFEAB0FC26BD614FDFCC65874ACC4B62B15513979A6C6EDED3D51485DB7DC81A
8AC01D6436EA71DC81C7FD671C5D6E3D524A9A1333AF8DF34400A5619163E143
D31354307A07B0CB1F9C01250550FF098068C4DCCBFE0A8300C24ABD36E504DB
1FDA3944773D57F1D50DFB23F3531F721400B1B5E4030194415A99307BFFE972
BC53437B8B5F2A53C77C524B2748A3EAFFD91CA4CCFCF0CF2EA87A0E76D068FA
6FA252744189816813D901CC5194B73B38C438DEA7A19078F7ADE77487441A4E
D1303833A07695C0827018901426CF6747F99320EAF0B974DE29243B481AD722
68CE4545E2D61891EB1E1C54B9F4A3F8F1D1DB13F3922A21C4B7BA730C087983
2AEF7F5EE86FBB29D47E0545D1EEE5152A251EE8C178DE5D253FA6BC95820F2A
268FED352907C725FB8051802DA3B56FC8202B243460F13181095FB959E7EE91
677EC020CFD6C143A6697EB7A61E733843F16B7E4F8CD69BEF79B39368B5D025
99FAB5BD2EFB9F46B70137AFEA7C5C972E00479AD37548E12E684839D0B8FCA4
872915C7258DFB72CEAE17FE8FAF96AD4A1C1C23B8746864272B9E3D549A82A7
2290CF31C3849A6EAC8217315FD746E33657273984BD5E1E7573369753BD34D8
2F865521DD56B218DE8321EDC7AF761EE664FE83D446D2431B0E465AF17726F9
C418F74197A411E4D76E35A450A900F35C2D83DDA375FC8073EFB6DE86C9D872
2C0DC5CCD3CFCE4357CF4135980341DEA3C83E7FB23657525E2D817B4C35AE43
77A7E5438221B8E2FD24FE21EA8A6CD551D937795A2801A6D6FABB29981FBEFF
6CBC10436CAE6C41D27C44AD0F6425B9535B452267DC891642C80E550996181A
EF758F33E559EB4396408CB4A4D6D11D73EFDC66B05DFCA7195B8E6818CD1474
1840B8DCF0D886299CF2A9F487F3CC06CF5C215321341545F8D30A0E78B74775
21C24BF4B1E6A30587E872FDAF02B5CD5A42172290D55754DD716CEBDA64DE0B
91EC4D8E1423198BB06D144398E095531B45467BFE7DC3807891D0391857F895
F8A73D16E3A0AA906701B57B54470A81B4223DF763EB0C55C5F4500FC54E44EC
9FCF205BCD5E3D96D47E1782AAF94EC7BF120AE8D6B6B9083316720BFB46F6CB
2C0F1755F9FF2DFA97F53FF9EB6D25781BD656F9A88214FCA079194DBA9541AE
0F64030F8F859DC2B2D2EAF753327455DFE1C1F84396885D8005C3C50D49E9A8
412F4661689128463F0D41B85D6275A5B626B8AF9BBF3E6D8DF99E3648FD047C
BBDBDCE839DE464EE26EB075C1EC248E363ECBFAADCA29071256FD70FED8B5A5
680DD2DB50CF81441F53C598CE78EE5F5A4DCBC6A5E352C6081C742EE4AD8317
32AD6F4C676D46E05B5533B9E4B6B12CC52FC5EFB48105F7834B3FEEB37AE55E
324FAE53110534D68A119B6B0FFEC2D37AA667956666755B3C52E5C0D16B9470
4A9D9F37D833FF3C8705DA04E78229455A78635D86DED33F5DF86956FB85560B
1BFBF9140620DFEDC0DBBAD8208E50CDEE72E892853BE38030E36C24CEBC0BD9
97FAD9D03E8647CDA3857340BD0CFF5ED59C0F6D67D93BE36D1078C9F3199A98
4BFC42866F2020817622E2A3B6D3BBCC5BCF78851793FC6350624991A0EC36A3
C3BA375E823A9F52CE3DE235C3131F3329161D8229C990A046C882E1A6D84554
EDE1B35825FD28A3F213A07CB373372A5F3F1654B686FC007EB195E27162CD33
64C77CF55186CFB32B81A22E747E5B5A781602B858AA06D5AFADC7145A887766
408FF21E3226DD3898F439949CA6CD93A3261F8C895BC30B04FC6AC3E63B26C3
A1794F9DA26FE1534410460AF0B02D1D100E46C81D26A91F6F1537112BFDC00C
BEACEF23297A83B76D4AB93D32C0D3AD2E0D4AF7906FE1890FD2DE1385A848C2
3A98F90CE19E4089CB11B3BF48DC6517893A03DEB68F40D23974B344F4EFCD2C
386D63357FD543CCC81D2B488B850CA790FD1F7201995372F46718C94336F536
6E8042345918A965DAA9743E081A264D39CD8CA92C0A0D7D3BB3ABC5DD173525
73C90177E3291DF0DDFB1CE4D495498779BF914A3E2A7A904A911F03E8E798EA
516D68005873B72DB6673E1E5BA8FB2C23596478140D4D66919AF38044FAC774
79B6557EEC47321FFD0D18F35C4BC96A524A16D3B22E9A9EDAEC27A83EAF631C
60C2684FE9BC0EAB72C8CAA7E2C657A71EF60F2AB4F1ECE8DC336486F42C6F32
491D474118885C2D1AD7CF927792AEECE3C6AA146A8F0E2BEB80F8234F95FABE
903E79B117A1C9C24964AD2377E29115607B1F0B228EDDA7C9B7E446751B8BA8
030D688E9E99EF0E9A986154E767F4DD73BC1901F7AB36B55BAB2F5D078C5DA9
3B9AABCFA4703751E828CFCD9FFC5CA2D9EE666E1978D692A12B67454452FAD1
07BC3EE1682B4D054A5046B21AD19397D4239CCF377FB08346A2E14A5242DB69
15533CD56F711A544BAD9D1D39EAADE2D2B70425C2C7A7603A6B64AF9EA18A51
D0A3B05BE73DE992E3DD6905F798128BA89A36784DA61B75B253ADBBA519D6C3
2EF7CB92F77EA2355FFA804BD58D7A33E0C65E7131B7AD65F0DF9778A9BB10C3
FDD9E0F6DE36A9BE39D7F02FDAC3C42F1F203B5F68330D24E2F14EE69F6465AA
0E66D673D6D1059460119B35D3EFFED886D5BC60C6C7ABC99606F86114EE73A2
6BD10DCF64CEE4D160C3F6C2AA69F875C813476427F4344B23B0F0E3DD1D9541
871C9CA655697D3E039C72C8D3D9F884C9EE135835C65515665791F4E56F108E
4FD9A57C214233F246747985921989DAD5AE5B529D1A79ACB2BEB09D8F352563
7D80D05FAFF10516816278BE7C3C2CE10031224F283A45F85184B78E2618A9EA
68625152E1A1D3F353A2441A5AA28E1CB59107C9B0DF19F450F3D98658A02C93
034D99AD55697F9A0F80F6EBEB5F32C9BDF767253E6447A200FAD692602A91F2
6DE91D729C0341CFFCB0304D20E7D66E3D270342E7CC6C1B60895C289260E8D7
2EE7AE350ADD3632A5B51A96A0E2A5203471A0DB0C8B7DF8452D8F3603B5656C
E3BAEFCFE12DF5D2621F90BB5AC32C8E1A218FBB8C4F85BCE7352309CF589895
FED444F47AE360F15C155C28A49A279DA2FAFD46DA31E597E0296BF87EF88E0C
5A0555F03A499F80F543AE1F69D40F4A8473B6EB73D6460FB17C7F3C2E910751
4DD30A91AB5CAA25360B35F02DB2F442E00C2B99FD90913D77B6417FEE2E5791
D1634FC2D9E3F72F7528497731041C9ED8C7EC63A7D8E20EF5379A0627CB1789
A1CE81FC7FBF26334C724F3B53210A20CEBB4DCEE7F64D70A89A1089748F1B6B
745DA5D2D0533AE56EBF693A2A6DA4F50B80A0BE8A7B367B26098C4080DB4931
009C7FFF2DFC23F16C896CA0B4623020C4A0F8F018774C96F6806D9816FF00C8
F72EF1699DF69E5FF6B210F3FD1E234AA9D4618AA4A700E0BF5BE27A3FE973A6
334D799A70BAD07E58594BCA818FBC0567064C8EDF1C11A3D2296EF5FBF08DBE
4E726CC563B8A83936AF7C16775A6B2E76D8E0C09592A0523032843A42ACDB8F
5000DAABDB72AB5ECFAEAA178D0058C2D142B6E2CAAC16AA112749A9E1BCFFD8
54BB39F8A60192948AC756D5C167B252D05C56C27AE57DBC36EB9425BB20D5F2
488074F0DA3B0507E6C8683E2C5F402E160AE468842D31CC545C908DC742A844
BBBE88947377A17888BE2E66E2B67846FC9B94E6E5DD61F3FF35C9A6260E8441
CA7D83B539126A24AB3FB4BA8DA62B12412D7BC1118606854B561E74E1EAEC67
5E55409E580A09F9048B4FE9509EEC22E97BE86E1BA3BBD8EDD5D925B427E041
83B5C02E8ECE785D02CDB4A5CCA868F45FD2EE91510105640B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Italic
%!PS-AdobeFont-1.0: LMRoman12-Italic 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Italic known{/LMRoman12-Italic findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Italic)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Italic def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-449 -289 1358 1125}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD115081973393AA2048ECC
1B38C1B45AAF909E1D0187A0DC16F505BC42B5C6AC12168C73DFF1878FBDDFF9
5CE859CBF7A88E342F565C04C06D9DEE65C66C505D6B44F028A7659B7B18EBC9
AF12D18FB2C70E54D7C524923386E488A5781001B47276F3CCB8173466544141
F99FD85B6BCEAD8A7E1294BA184AC78C372F2F08D8C26E0D96C407EA8F1F5A28
509753BFA423684568D7C86E4655ED88226911F0DBC9B8DF79A35791C4A85AC3
E8EB007E7AA56FA62680DBEEF9E2A976C9F5A863FFD9334B04B4E297D672402F
7CDD0A80AF1403FCC0BF0C5B8BC58BA6669717265C300F0E5EC871A0896CF482
691E8AC48D1CF9C06AF63CD3C7B0AD16E4A0EF76559A251DC81E06549C9903F4
E755C2E6BAFEF9F3FCE61B6426C9C0AF1196BD504C1C2D8C735C0B1E6267C57E
93AA51E6414CE90A92DAC96F8694EA081AABCFCECB0665CBA6B56524CD5CCEB2
B5DA0717E989F874329D4C73CE852FAB8655DC1B57FCD0742B35D37C3377912E
A7FFBFFA9977C6B45233E203C745C84ACEAB8BEEC1A8C5E2B5FAD52657395DCD
3471FAD4C2A70F0F31C29BFBE131D671AA20209028882857976D4515E730CB30
4A404BE6BB5947361A0664A8BF8B33C6456686A1A4F59FA091122433AD0EDA97
E83CD285BF2D96805461215F4A5CCA6B378B9C2B93CB71E36835A8AC3FE2601C
D2B1370B82A4668FF8C1FDD66C5B526E0890BF226625457059659ED51CAB74F5
5FA7945797237B1656BA0B7B7F533F360894FAFD189B50A1CEC76E8E8974788C
239B91EBE8AEF647688A1CA66C7D5D7C0D055BD5DD5A0BA92842730DFD09DE92
3358806250590FF35564FF90E9DF85FB4B082B7806E3E941AFFA6336D4F9BDAF
124193F6E8396008E5BD04F19BB4EE30FD4A80DBE4DF9EEEADCC816B3C84FE39
07EB828519DE800A9C2CBAAE3E98D910EC76A44AB8AFD6B95D1B72B8B21490FF
528777AD3BAB19ADC5105684FD87B37B67B29AA6628DE75A69A3F38EDF33CC72
BA1C6A089FADA9A92F60CC2FD61EADF93891FC191896A5EAD415224F7E256A4E
A02D876FB0B68E723AFD17D0DF08550F90FEF1751E7E403F5F111E5712BF3AB2
51EB9FD654EF748846E38E374DE01977C142E0ED10318333382EA7FD01EB2A59
D9EE46F33362E4C2487FBD9CD96837286EBB53EFC8AF3FC1FFD3D1EF05061D80
B5E3C87AC8A76D16591A3380A49D57886D7F7BAD9BBD84F73FA38EAC51CFBB62
DEF89CE32FC2649522985C27941C58E4F50B9C2CB497E519444446F0E2F2A2CF
F9963C615AAD69907EA4205A0BC3435596988D1C67406AD33743D1E984DE8C3D
F484971F00990B88E1931C59D868369DB620A30ECD347E1717AA5D4CB03B26C4
A34300BFEE6E72FD1AC6CF819110E6FEDED3E62A92EF184C7B979C4E20450603
8E76EC13C6264E69B55D1971CD164A032BAC23C2866945E46981F9406B6E4F61
160966AA3E2B029EA8A7323F271A6643341F7720B16123685CC289FC0EFC552C
5FC511935D0402CEA398F99BBC58873131733D7FFFE2E60835E8E570EE206034
708F56EAB17C698F2052A9C6410435FF3D114F67EACD436BEF9EBFF0D3BDE9B4
FB0A540610BDB59FC4EFF8586DAA59BD102BAAFEAF854C1B48B036052A3D727C
050B93AC55B87A0E337A5DA9985EF7DBF5E1072D4D4BCADF078CDF0EDB3A2C78
66C977678C571CCC9FFFBCC76D0895C7BCA510FE3F3DA02EC5384C4E5058FECC
591ACA24662FF0B6783E357BF2DB29034B3007E7EE680C5EBF4434464C47F8DF
4DB69281479EF18DA2237CD4F3A26C1458B3F69670B72A5D4C1CD5D8613BBE22
737F3AB7AA70C37462134CBA469EFF52B99E6C1F4DE95E59DCF7E38BF93A153B
0082245B574C006312B1A0A1DCE0E4AA6C193AEA970F45D01EFCFBBD18095B62
AD860BE59DD9C26FA72639FB421C3457FDC09D3ADD6AE6CC86E8B493367C1BAB
3BC0C3405741CAD56CC6A606BF71A39EF59C9E976C5F562F31C628021C652ACF
A5745D606BBE742DCDC69705BE94A449C5EB8D42E88443AFB83F96DECD5E0B32
C5EA329CB342002792FADC15213545D7EB212CD29841E176122E3D1E147F1276
12C7EF5F32A8A3C6A4E7C3BC8F04EF6C58A10CF8D6B0D502750247BB25006F46
6250647F37A36A4911B97E5F975D12379864A4CC14D3103C4994E6CA97B1D789
3DF52D57BD6C1A6B744024CFC65AAF32058BE46AD9FA0D3E24F2FDCF57193CCA
AA36A4B774280AE1D3230BB98D2190912BBD038F21047D0019EC24C1496E1DE7
71B3FFD092BB48934353CA645CF41F7B2EDCE9FF9F84EEAD17B366D678E61C61
76FEC09C94A3784C817AB37CB52D23205066E2D80EF7C7866BAFF6B23D88EB36
BC2E699A11EC1AE28E0E6F2B383713FFE2B13A67B51AE8B12E5BFEFDE5D92BE7
BC5EC381B6B05335F5E9BDD8C3A4A82C2E598302E5493842F0A080F6AF3A9121
D8EF4BCFCC80EC71F78908BDA227422F8A56C95877234F9FD6BB97B3AB5C0F27
DBD4DD8DC2FB1BFE35F67D7A5B693EFE15A466950C44AE2D4F9D99F833D72AE0
88F54DC0BDD441EA5EB5A1FB810A2926A27D510E69512B9C70C2434513CE55BA
9EEA1BEA15C5C24ED9F31705A32503BE7225981770457FD937871241EF7A195D
4747C9FFDD581537610B95B188999EB5F2F53D263ADE076A5DDB61CB18C2C4F9
1CB227C6E44CEC46B305D67E5C253CDB908754242EC4D9CF4E75722C9F37E4C9
B4E010E3CA56EAA8868DB6F226C6E56BA3356F66D123C08884E9D27DC1FFFC23
D36AE111FFA48845C0A7FF2E0CC929CDF9447D83A7167F3FF009AF8CAC686052
7DBD2B62750C163DCCC99F21237117AD4B234438CDCA4A7E25421A64637FC8F0
AF83863CDCACA331175F46778C3202D3D4F36FEC1AB9B1973A7DD95352BF1532
EB87DC7346FD25DA53A3BBB299CFBC46A80CD1D1820D329A68E9056D5FA94871
56FED518164901F83DF3BAA6A0ED3E1145BF178CBD4637DA34744818D2364CC6
932DF0E2362CCDF28E5A9D054A1B2BED399E780DB66D502014608F6D49CC34F4
A6767064EA4E5F469E48F5AD2885076AFE1635CD9ACC3C44B5755DD9071DAE1E
651ED94B4CDB4FAAA1AE95682AB3BD762EB1D2F722477ED3C9E8221F88E54918
1454004F18A348FDA4446E35C019B5DEA938B851ACF798EB6086D99D6AD77CA6
4AA2EDC679AF04FE139D653820FB3EEA998267FB51CF42EEAD7BB5AFA236AB35
C6DCBFA1165F47F8F52B0787EB4B70B9C8A6D5E61B5B11D5B16C646BFD7EA160
518EC3FAA454407E1B8A7520C2C08F8CE3CEDE80F4C4C0838B8D797205EDA240
63103B89A932C946455256DE821247F764D8435543A6A69628B40736B1AAFBAD
A2DE6F39CD599135BBDD2D6A67F05C3FD7CF64D8F619AE619F5CF7C0B1DE078D
A0D6C0E48F1D065844515CC08B55C960DAC383D2278C7302A34A4F508E05E8C9
08C46B93419B93876B1AA19E70A1D92D48565DB08347E934C223F5A1504F2CB4
5644E610A3C02D768058BA2B97ED67821A10F50F406270CF873290E99A3BD506
A8578376F7816D6F4CD48A5197F98F35341EA3A752FBF80C009DA521C0399993
9FFC6CC50503BB871565797EC537E267EBBD1DDB3F3EDC5FA135479FC9FA2409
826AABDB6DEB72774923AC44C82D135453BD56678689754F0DF84269D869E5D4
0EB344E5D2C11E525F08CF4752ED284A1719539A584A375CC8B9C4FDF77D3016
80CB83F3BAE0A70B1DBD9977A5F4C77183F4CF9B18D3648CEBFBE395E68FC891
329882A2639575674B2A47C068AB093F74813A6BAA4F7CF2CC57A84CFBA77156
ECFCF83454E56C56A2CB0297E6C99E604FFF638C9DB5F9EBE90F1628BFF1109D
A71D85A35F40871DD6EDDB2FE95037EB3E37FC4FCE8F9492E884E432F5332C61
62371112A5529FB7CDE3A1A0DB98D05D8301FEC82EBCDC7D7A02A6CC5310ECA2
4348652BF62276DFED27FA18C1B3075EDD207C35BC17DA8E255C9216E000486D
0F3FDAD463346259844571401A131E488A004961B9D77108922CB750BE2E146E
CBDD16A1584F3EA2AB3D9A37849E283446B177BFFBD9B94C2C008FF74A20138B
EB2D0CD90BB842436D3B6DB6ED212E9BFFEDA7D3958C62CD9A5A77E01F15B23E
59C215E93A3F5018417C37FFED36B01A47F0153A926B6C6555E5389B6B68AD39
1C6A3F722B2F6C2CCB02A2A87D3D4B8954D01DDC88746908EDB625B9FC645E4B
F39E04FAEE6653798941795B253A86C73164C0B29E831F83AD94729DE9FEDEFD
6748EABD96D9FEC55051D7462136CC3306C5A6A7F2921367D2498DA3D214AE27
5931A442EE4CA0E11E8CC506066BDFE472196A930F7E527E0DF66BF48E8925C6
55C7B21A81B9FB4493377D6B952CE51F20739BC4C5106C4527DE148B31E0F553
FE1D46181A8FFFC3C6838AC1204F34A6A16569177D6B1C7CE23DA29D37E9CD14
A077B05AC1D894BDEC87BB96D4ECB175F244176BFD7625B80223C231FE14896C
C19E2DB362DE5117E6B39EC952DF96091851A33211F931022D46BB1341EE9019
40795D0F15DE5A23420BC6DB59314AE0FB32814C0BAC128B7D4D61C2AA87093F
0D9188350856B1FF3C410855F5593D1424A27B7482D2EF601673E5E859A11D4C
8C48D36D325BD229AC91336E40475264897D439788CDDCAEADEDEAE8FD8460B5
BB21912F2881FA51334A720C96C7B9CA647E44F7C808B103D657353EB568DBB2
2BA54AA1B3BE277E804C6BA17F299172AC3A4A3FC57E0F08DEF0F19151DEB13B
BE9608B43085D30037728FA95D99D376580FE5BFE1A7FCCE35DAA893E5CB7EAF
FF53372A5AA48B228CF68EE0032B1968EB88119A375D4FBDA133B5C6494E5E3B
14FA09EF6982B1220A197516A442C30D604833511E78B3DF0FF25780A142C31E
0E387E163212BD3509108B61ED33B18A73A04B5F96F94EB6DF60F5B1DEBF5A23
0721E51750128367A0AA72945C949102B7782BAB3FB8BDCE2FE2BE9B7DC14AC2
FE27CC1195254992045C0A486BB5871AD692296D2D69F6CF1E9FE72EB745E6D3
6223AB972791081FE59397EF9D69415C6994D48E7284386F6082C2362E4CCF3E
66ECC33C744624C14BF0E29C015F68BEA5EEA4CBD597C0C8AB77CF9CCD9105AA
6824BD46D237D5AA012269135E586D85A70DDE32B3521787F7A76DD68F7E5D64
0C87FFA05C0EA432E2C0E641ECC847467858898AD528633F477B739EAAF078FA
56B039D2D408B56CE03452944AEF2FCBF65E4BF33D7C43C7EFE3A8D63D2276C4
236933CA08C51C6CFF8FADA08AEA67970A39F150893C460EDABD875702C05640
E905826A2397BA520E686CAE8E9320DEF5363899F97A900FDF659BC38E6DA6E5
87C23E70241F9C323674E061FD55AB355013374B68132A30576D4DBD04EAC244
CAD6F9B9B87060EF0AC15FAD60D0F0903E76F0FA3A2CCFA0D4F8AF213E0A0CBB
C22A3CDE0856BD8640D2B9B1844E03A53BAE53445277C899FE86E54B8BDB1490
AC76FF84E0DB1B76F31FE8955F98B6EB4F83AD59AAFFCECC01B36F97FF9682F6
87343EF61149DC3BF556A632D10F0E070A5820B7C261CCEA2B02606837B57B4F
38BF32513D5EA4E27D946387E6DF677C977AB426EB6CF686087DE12B3D6080DB
90BA9AC4B9EAD70DAEAA43C5D1F96A5ADDE484DD63BA31F96DBD7DAFDE8ACA84
4DD34A2EC1F5C5C777FAEF9AFE2D1C610195FA32E61F5D12E43E43F6E03946F6
1E9135C70CD0214CF04A4EC5AD120D492F25CD6E1E8C9AD62B49EF8453EABC20
64828A2254F5568A8D9E0D617268F63AF0978DDF59311FBD5C2A43529A894801
EF317BFA201302382872B3C31E86FACB377A74258F2A8CFD319BCEF75CA4EB31
7A628F42F7EFAF5804FF385897835258981A89D3EA8E8A31F4257A299412A33A
F840C8C401103177786D6F091A1D5C37DC89CF313CD15986DBC4E6E37EFD447C
37DB455D2F083DEA179DA4FBC32DC81B92E6BA65DBA894F62D4F977DFF168ADA
E8A1716BC8DE0F27EF5A0FA16510FB9F6D14FC983E99D27F9136DDC3D925B85B
FD07F9BCA9D7C412F535755FFA6B31BCEE9A6DFAE4C9D1BB679CBABE4996D782
9CA57157A0C2191D3458BF4870481D8FA433728039209E7FDD13ADBB921A373C
0AB0A894F08D7774102350E15460EB209E5D38A3B75B9BD0784EFA1A9BD09ABC
04956B86F9B7063708EDDDF2EC93227746654ED73ED27B057EDD4280D406B542
4157DB421D427E28CA6143F63B988D41D1A114387952ED3E5141FC64FF28F1CA
6D4F1BEA1C640181908253DADD5978A9A97AAFF053914E587B8B95AFE807D313
E29E3682228BE7F075CE96A53614ADDA732F0927DAABC3A25C1C9C1670B8A568
F69091BF0FBC9AD619AF7C3147A13DAD7E3D454A365D1D4026A3816DFCC1572C
DAA62B2C802CEE88F7A612351F3EFAD2EA53AB06C46134B09B4E6A2D11B839AC
94252668AEA04F23329A968E3863DBE6D8B7D149ADB2FD8E312D719C507DDA1B
F0CD988B644482DC3BD70EB627D06BB45DA78C776FB03861582989B74C10FB25
DA53070C2BBB4411D9608F4FF0B2E1718A94E2CC16BD11D4922C16189C1C1BF9
047BB71EE34422845BA572D3FE1289FBB4C85DDF72F5F6B01E30B2D9F8855EF7
EF3B47566788D4D5312707E5F2A9026BF35852310360089F9702E3D942063E0A
67AF5249EEF89C2440409983598FBA5FE616E33EA2F454625BE4B1D174ACB337
D7CACF97B0D86FF2BC399BEAA86FF6D34DCF21BCB6C956875A422493C3E2B518
7EA654BAB542981F079D7ACC6B259851385FBEEE9F0B4F127A8D2BB1E634AAB5
83EAC6CA31CE3807506FF35794D027CE342A66A4C27C0A42420926182486AFA6
6185016F9E506375D1E089C676A57D0CCACAE3F78F40E9A45653BBAF2A5DCA56
0DB5BC0FF7FB3C608FF37988C7DE6A41FB1020DBBCC762F2BC9C4ECF3575A413
0B81E97C2A9BC215A2E2A34BEB5AC13AA7B7FA82E8E15F366CE98A40838258D4
52E73137494450BFD0B62B8429F77FB1EA332C7A1CA8B004C73183C5B5577DE3
2847B3CE5B6F1B549B9AEBB0B61DADB95DD6C402BE50CB662CB93907D38FF8EE
B225EB90EFE1889FAC418AA997C16C2988EF7E0148A1DF74DA038B947335DB91
73F65836444E4A1438A01FA0938E85E63961570ABCE4CAECA175260290D8B0FB
A6DE7DDD436420D727A083F6EC43320D24867624620D636BD5D74B42B03889E2
D09ED2F15D083CEB170CBA8F1D210044B6EE67818B6BD35FA4757B0CFBF1A087
1139A66BF3E0988D81FD93FBAF6EFD1C4BC76E61923EB04DB1DFA426E752C197
FB8DE8D169E29C4438FACBBE1896E37B202796133E24623B46B70586AA570C64
F43DC2BBE8443DB5A58ED8C802AEBECE49095FD94546064A2865BADC624CE6ED
A45FCB1CCC3ED7711F21F51EDB19091E7D74B3AC20200A8B71016E3F1A4FA300
4CE59FDE33F175DF5124D145076FDAAE3F589B4E3B13F776093E09B517BB419D
BC49CCEB522EC7754F31DB5756461350D5FE393110D0F31574EA58FCCDCD36CE
E7B510C14C8B1F6CE36819D08E37E91803BE7225981770457878906C94394D91
C7EC0AA568F7684A6B37CCE936BB41215963C34807AE4903D01C0D1793376FDD
8FA4BEF581D81248CFA611EBD038DE83EEDBA1F2C2B49026FF4C2BD0E38754E6
EAF8020E2A4B072FD6F9DCD48DB03DDFC37B6DEE0726292D744A88E3C72ADA84
C88545D16A7E9A3ABED765CF54C08D8B4939F7A3D2BBE4E1AAEAC7973E75F06B
DF6C2AA60CDFD1328BE57A77C31646BD168C1FAA5E180CAF95A4D42F25292081
FB60932638DE190F01064609F49F73121450490158098C9B50783AF12CE3933E
509AD637316FE19495581736B0FEE0F522702E81A8668CE39E3F5AAE87122DC4
DF7738F78702789C89D8733DCF9F30E964DF6C072EF4701514195A43A81826D8
B89CC523118E86C15426E4FA49EB9622E45801FF0A29945D6E004A9D99F833D7
2AE088F54DC0BDD441EA5EB5A1FB8670796B270128639A86DC6412958577C144
591984D9EB784090C81C890D0E98FD06C7AA912A719A5C01D1DB78483C99F7EB
4E1D1C5ECFA2D925E13BD7D67620B5D4DD456453124D7433EEB44C724ED69C86
97D06A5246DF0AE52856547B5920A5861DBBAE90B0137906D08B278CB9DF6AAD
544451DED49EC8F5DAACAB636082E7EFA02DCD63C03FEFA3D9E13FD38FAE1FD8
69366B61D37AD7EE87321E9B9B7DF58324AE6E3B639DDE323A6EEAFEA964B553
AA0AD4F22E8B3A5E0490DC2123B0A51F0F464405D89C0A09300879A114B70CB4
073D6CE990C326331F40C0FA6B5885F0B53FB07AB5935CB1B851B96CD7BF88F9
A67F02D5BFFD8203AAA65D8116654C76E72A1E10C8A192C2003A5D2100C65682
7B3B49A5F46A5434F1B92F57A68821525B2F86AE51839B3849FD996906443DAE
A54DEA0331A5FDF6371DF5461B6961210F26EB4AB32638AFE0FFB530D4E1C6AB
CD3A1F268DE5E0DFD60951C1450A6661F74A1032BDC79BF105F415563EDB5100
D3409F99A1ECAB7E8E690002AD3BE5E3FB620CE990D9A478B44646D07FE3BAAF
B96E88ADBA548B75863B57B59974A43881D35AC87616C0C26855C6EC0FF80645
0B5A5009B2665279C0670FB3550E5683AB56AA9F0EF60D11E54B7BA0471056B0
21C03FB2A2D227D39CD70F36330A4787B95D7A39E3BD486EAC834805A909FCC5
FF841305A8927C1BDC558808B1AADE968049989A572AA52EFF3D6DBAB167D3D5
F8C9E32673F71909551D96A01FE8C83D61D4BFB90D4C85EE83847C478012FDDE
C16E0E7854CB47132679FBABF1DF31D16F8FA295C8371583DB72C718224D07AF
1DDC3522807E1C3D9F3C5F9AE014197003B47D4CF767A93CB6A564CFCD3F5AE2
3C97CFD43428BBC79AC6BB6A8847704A656E4E97A370981C24AA31381CADB34D
D78B80AE92CFBF71741A16223D3039B3E54272A5C0E766FEC02014DE27FB5365
8648A7A378ED5B4B41FC79ECCB350466A44A8959850AA8A118E8249996EDFB39
C6E76D2A51B83AEB1553E6AFD525D156D409C3D4E8A89EACAC4D49CDB3D0670B
39E0BC396DC5F91B7D2C30CB1526DD07C87DC850B32DBCD0D7B4935D36861BBD
AB10C7FDC05B7EA423463C371B102E3C480DC46526F008FE4C217B2838E1E8A1
9D917B0E72F44FF631C3CAA2F7BD7060450426DB16BC51C8D99C420CF100D817
311CB62CAFBD00A9A931861CD9A7048BE25A71779F21527F91F5F20D556E956F
19270A4455D81D673EA0017E7D9ACB7F611965D4FD91DD5FB544D1A7D023C347
C178DDFE423A00CED68405A82F15039F0A99E6FC20C91C002D2098D94298EEBD
3E93E848FDEB52363762FD7C87E54B4F73CF066C2B9C5DF63FDC0ABB95E0C51F
5257648FEB205E020B27F5307E54B6F4A4858CEF9F21FDE883739B8D463BA4DE
B76CE1B7C8521A9E945BAB12083296DCE69D9F66CCE6B475E5278A86AC2AE0DE
347C058C7D70467A760023DE6A20182AD3520778E6FD9AF26A3D18D9E2393A43
05F3FE14E3FEAC2D18913A9445749BE14436D6637EE76BB7E7E84EE53910AFBC
4F7847A907AADA2CF8DCAE32B40799961D4076FF5637BC82AFD658B4DB12B5F2
C7A79E31D12B2F394BCF99217F88E53626358C95735248E06086D041BFFB9514
E5B8248FB18D840048F96BD4AF2EAAA6B47C55626F5C6488D480EC86E1217FAC
6ABF3636ED201011F687AA6A1FA145D82FF43C12D7E0B65E32A8EEA690C33C85
0A8BC6988EC78C99CF50A0ECBD1743751B2A5746D139A591AA3CD97D659AA659
89A7AA9AC8B6930AE574DDD32FF4BD7C970E40898A125A27BAF0BFB58CB89C44
4F4564C1ECBC4CA4FFEA239B58976F94434C1FB78334D81374C359FC48134106
B3DAC7E417094DA35293F6250F7959BA7FE2053C1C75BF1A66D0126713294E13
C1A4571B8A9E6D98EE5C232A24B7E24EE88FB207ACB013947A866A8ACE63BB83
01720C67F95A61987000720CC9DCA77D93EBC04B795D8258F32ECB811357F69C
CACACF897A7A1B155C720BFFC17C71669DCA948F18341306C3422922BCF391BE
9C97E410AFBC99CE983EA462DBC29DFBA80E389786A0EFB319B24F48600A1445
02EC6C0E97C248374359C89C36A55908223056560C55438755D243C5F055EB9D
6BC53305E13CE5740DEC775C471D2C56C824C06DF0A81A5D74DC4A5B92E22567
DDC967BF400AF513EDEDEBF50C61D9A387F167E51859F4A455482B979DBDE135
44B856AD10C3E3923FF7CA111DCEF22BFDAAE0A7FA0303A0269B0BF13AB750D9
0F2CC97C981D1FC2366FBCD0FC05F53B4C43820E6246849EDF70EF99B1C95A29
6106DE15CF1B4D71AC6ADC7C4415C9BCE7795FA44C3BFEBFD041FFFB50AB636C
FFCF2B7B6B3CE509264EE2FF75C9CE88D17D4C306BD10D7C5500A05DBAA0C671
065C069B7A80127C6837B312D82B3A36DA8CB5E590F9BBDE89001BB2008E75C5
76BC52FACF258072F733DA1AECC72715A99013EA30A2A88EDC8F82FDECC66F79
73DB6138193ABB280D5A40E79B4EA5AB5B5B58046899C9C5993E7302C870678D
EBEB00F7AE7941F78325CA190CBB2659BCC601BA85B214C1F8424F4718B5DD3F
742689B36830AA72D8C783F4104E3836FA9E6A3552760C1998BB54FE1DE1ECB5
1495B56F62FE2725A0A86C028FAB0F20F238C85528B8B7946ED38F8C44FC3311
F94CFD6BA9FBE309D08FC9D7497ADCB1BCCC2C7D61E01C7084E3A0161D14E6B6
923D472CB36156F92725A0A86C028FAB0F20F238C85528B8B7946ED380AAA8C3
39C5AAB51AB884232E9D200A40A68E4799E43B6B398D040A0E52A2A296B06FF3
313FE6C8A51F12C44923925621AC4EE580A496B1062FDB354D0361A30548CBCF
91DB3F7B7E87BD9D405F2E29BF660674457A70F9D1CF98C6AA76128546E89E3B
58D4619B06D861DE5E8ABF6B54377BE90C9252DBB5A17FAAF1500ADF49F8C8B6
C1A66E1CF494A7D20A98352ACB6AAF0217B4FA27784635B9B59B134F32B96597
E32D4268F034411E85D8D9A9DFE581739F38141B8B48F0E3635B5686764B5DD9
34BF229A852C8EA274290FCD3E6B6B8F4B86C231B10100D1BAA6B29F192CEAAA
9951CC6235CEB85520A70B252F935F7CDFB69A1F8A67E100D3A7331B63B17870
9E55EDCFAFBB55CEEFF1CA96F54CDF762254FFF6C2929FCB76A235705EC08804
9C1F1B0E75509E3A28C63E8E38D62A92755377D1274604BE61099F5FA4EF83D3
DD20FF35ABD92E13ADF85FA7B62AFD43478EC186834F549D3C3FF963013711AB
72B76C72F09F6D5B4B8ECE515BE82B5BE1AD90B13720D22930123109AD216C5B
50B31650CB2FE423749D1BA94D82FDE8602305919D3A29E20B6B00AB8DD9C67F
5C66C86976899315AA3469F4B4DC168A19486FB4C1D31E05643BE95D946082D3
0452346F282DCEB0D5BF219807F397A19BFFBA42C162329D74455FF83DEA9E86
62C77024836D8865ABF3D4DAFF1FCB2FB7F9F4B2A47C512F51339FAD5776CBFA
CD7D3A421B65E01EFA9E51AD12185C82FA0BBD27CC9FF01C6B6F27C39FEB34D9
64638590E25AA60E8F85B838B4ACB8A07828702857EDDDC1030D19928F2E2604
34DBE72F4AEE3AAB63B382FDD2568A537E7296E0EE3EE6FAA7C09C3F62414281
BCB53CA46A8161D536C2D0011A2CDF452F248C706CF3A2329934386CBBB90821
443AA81CBCFC31881D85C822D90730ABBDDC0F2CF53AC189CA31649DABC07FAB
D5959EB539EA679132F12265160BEB32E1DAEFB89B829BEDB5E3DD60F5433EE1
E6728C071FC11F49017FF1B1FBA0F5D7D4B35D4E24AC4A11F6D76801BE7C396F
D7264F7CA0638BC2ABA3F9ECDAB0F6BAFE6B54E58645E1F5AC047A8204F464CF
29A60BA4DEAE3FFD7726AA903C3D3F360ABEFB007D46720081C498018149DBA5
84E4FBE6EDDFA3B58A343725C742A8ADB8E2490B8E263CC5ECCA686818060AD0
2A38890882836514F595BBB8BE4E6127C9DC4AD6EF6EE0D15AE4C65321DD0ADF
DB6D67CAD0A3DEBA0D947D0AA1F03FCAAAFB2470787ADF04044999176C47F7AC
530B4032B650F8E73CC6886C5CAFF4DFABC2FE33F5B8CC04E4359C5F8DF1E58A
B167EE01F4206718757BE992651ADF61CF25572189A19315AD3E7801D81D4F0F
7E49D329237064384825EC71945DF03CCC045B0E4BA859C4668A7EAC8CFEDABB
124F8CBF10A7ED01F7290E7562AA10DF6AD4BC9BF80F3188A55927B3AD5B3A1A
502672B17951401E5FC1E44E37956FB033A517711384136291D57736A4454923
D4B4B28F24BC26C093E27D3E702F25F5E6D7BD27D6E494FEE2CE7BBCBB7A6A53
760429E12CD2E9B0ACF3AB0324616A7084723F065B7C5F35F75835683515AF6C
D0E731942B25D5FA8C7FC245555CA6335EA80DA1C53CFAF7F52C23D3D6770CD6
C298B294A1C4E6CBB8D8C619AF06231904D16DBC674E57CF7FCD8E02E18FE3DC
F62463AD80181F8034395A19C6239D1E95EEF85AB528E8CD2DA99E33C7EF0EE9
DF6B28DACCE823FEF6B7950098A3AFD46D2241832195CAC490303DCBE217F0AA
2588D08652288FE7AC7559D8CEC460F3F7ABD4D966424FADB66F4669192BE430
DE2E62EAA6AEE0D8E354195A2563759DFE0183C8D67B449516ECC3F573301DA3
F5C5D300555AAC9230CEB38F253DB2EFAA6218D7159784008721738B5C8C1DF1
CFD26F72EFA24CFE49CD7A4D0500600EF954CCE1A7ED40F1AA5867DC5F7765FA
FBE78109CAB35AC2730A761CAAED96AFDAD929A6D233F3ACED3874214E6075A6
58B3CC670D60B0DA4B4075416262747ACFFD9C16129FB088DDCB10080AED20A7
53D014F5F5EB1E3CBCAD06E8CB0A595875789BC8340086D1E58C2B1CB5633E89
A7CA6CFA4DB4C08432BA7410AC0C6105BEA2372072096958431641E18570C849
3096C911C42005B99D58516FA232E661C7AC66134A71A88B5A90540E5FD5922F
512C0A83999C07CEB7A37F77552F75CBEE2A278AA17E0E79685995E2DC852C94
5EF6F5BC9032145DFFB88B3A3F74518FEA9848D5AA92EFE8570AF8030FC501B4
758F1C0CDF3A5FBB4A0CDD161BEF17299F8496FFF2FE5D5DD1C32DFC80408D75
0304E9FDE58F3071E2FC07AC2DE0A960BFAFC38FBC00863EA9C8C5270FD4EF89
8C821C238EF04DF7BD7343B7724669B0E1DD9EA75A119F2282B0FD2150D8E88F
7B3CC749035143171FD57FBC1E6470FBE00FFFF6D3664C5D0355F8BF470A99E4
13617E745B66E31908E90AC92E1B0CC8FA70ACF742DB2A31AAA7432D7D3B52A0
94140E4E4D4D486A5FB3AFCF64BD2BB65C137CA2821EC9838CE391565329134D
DAFFDBA8DB8B2C4487DE9EC1722AC14066A7B4D50ABACAE365F6E262500B0209
CCA5CAD7328D8654B763B3EC3AC82CA47AC060FB482B26DB483FCB8E97F39B42
CDDFE0504EAFEC90D0AE1BB20B633D31290E01C2CADB4272447E9A1B860E1085
D81B878A24E96D6E16583FA908B38C959DFCD700263CC05F4975AF0F945A2563
ED5BE9A6B68473FB9DBC1ECE947112CDB791A1CA9D765A8CD75BCE0C43D68962
B5343139F7867EB4E3E29C51B85E6E6698F5B4DD2A2B49E3E433409D27604F3F
841AE34EB8744D1891AD19EB59A53C5F4FB5B0258F5785F7F31088D34B0343D4
8E428C5E1888B32E0B820A95DE4DC41E34E58256D337115369B5CFD265FAC48E
967E6607678BACB39D62F34059CD19DEE5041502AD1D4E21E95678C81B62F1A4
EEF90A1251CA9E8AAF7966EC96004C09C4D9F43A151C8AA138B59EECB77CB5BE
8C9A7418389C6BDC2BE1F18331E151718268DE4D626FADFD70DE44B561BDBADF
9EA1ACE49BE65A86B265EACB68F4588F0A756257A91DB5FD773C8B9DD0042C5E
51323CB81A8EDE313FDC3F5C258048D63837F887A41EA0D1CF255793E8AB02E6
149C5B5D952A1F13A9B3847249D4D6DA3A323B4FD6AC23A3BF70E39BBAB45A96
53B24873E7E9DEF64D7D71D6612420FD0665DDC72FE8375C91FBD90358417672
58B9E9C5C3913293D99529B8F9EAC85FE548406DE5D90A0FF8E74997F7CBB7FF
C71FC82F8D173315A44103BDF5450525308E5AF4F5EC3AE71C90564DE359480E
5EFB6D30CCD8BDB19447B728CB005C50AAEE736C1DE0B08E3CD72E458994AB17
E31B58C15CC4396CE75BC0580F75B3BC18A7CAD1C2D3424E9CD58A179A2BB40A
C54D2E45D2043D358DD7902FC0E967F6DECA7277FCA73E841737D9AC2B5B37EC
3D1EC098C144D60AC1FBCB365F6F507132D4DF54528FEF25493DB95F657BD97C
468C4ADA7CA6ECEE1BC41219E393C3F3334854C5D7495678DE754AF0AED1ED62
7EC8556845CF97062549BF859A34ECDE8AF4FDE7038436BE32EBCAA12C5A7FE6
0456189008F10D3367C4F128EE4AC806958EFC69D561830D33B63DFA6C31BFB3
B82DF9CC772D4890F05058B3311810C6867550C0BDF44F900A75A2102905B8CC
B2F61255AF45BDE940DC77868EB0CD12C56C7856D4B0ECD4E415CC9290C79FE2
4F182F554C4E5EA79D4611AAEEA72B791C22A1822E686F3F36AE23A4FEC8948D
C1EF163019E604B15ACE59F9353E24B64152A2A6292F0590D6F87622356938E8
367A8ADD3758098F96088C5C98E7AF24CFF8A8308EA440CD6712D60804E42261
6D69367A334E3AF5594456DD2B434C5CBB5D0DE6C7AF6488D173C2BD0597AFD0
91C43DA89EBDD69E579D536CFAF78E601BC228CD716E472C288EDF4DCB32B550
2C46DF4A11ACA54D221B44224932D25E0EB50B9C739F65118904A06FD3AD3A92
05A17BD54BE0908399C0E9C0ECC6F912AFBFBAF1389BAE45B2989DA004552525
09C78DD4A7B6D83F99EAD74396128B0C14658CE595096826B950B51C7F0AA44B
C1290E83E97E8A0DFE6D50894084042021808826FC99F980C81A563512B3250F
C8DBECA355C9F3EC62794FF9873F102EEBC5EF3BDE0D3313BBDE8FE3E910E0B8
065504CDA978928CC55044F08DA8151439F91EF111C1F3EDFD1E60442A1C4B6A
34C13E3AFA914D2A74B1D27C25684C3B6BF9DF8CFFC1B566220DC58468CEFDBC
38AF8EBA830172D0204028ADA60954348D82019B24C5A7A2A7E876F2BF05AF4B
CB13CFBDC0CB02211AADAEEA9A0FC6F031D44B26E05C9C07ABEAD29593A399FE
DFF749D9F40A99E521230DD11AB4FDABAA42825795185DA501879B80CB4F9A7A
3CC11FB34AFBBF6B76B9039446157BBEC3D6729CECDE9442B63AF71B8C660972
7FCB71EBC0F5F345606E2772266FFD6FE5CF40BB5BDDCD6293EE8A230B3743EA
CEB382DF4A922FE449E34BA7BDED29085B7D70E8A28931AC48A546D6229528BD
4EA9B10043954F184BB76BD00C626217A45A4B8199D88BB10B18B1A0E8AB694E
2AF3EBCD152EAD851ADA931C653006BF89F70863F67AEC35C89DA9E31C176EF3
28A147759BBB495C5D8E368956A4BD086C970C0C46FE2C03F43628C947DF62E5
078A9AECDF66A3F76C9B6DD93C12E47BDF78DBCFAB398D0D94571A1ACDC4D099
E5C7BC26B34BED980623A1AD0E13EF72C77AD77370B9F077DDC1D7CF0DFCD086
12B74D4A445E9F6FEE70D254362598A4A6D5E5DC3EDE73758A9A7DDCD4AB7DC8
BCABE9FEC0891318F579490DE05E146F5F1C839B26721DE096F5D2B450A6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: wasy10
%!PS-AdobeFont-1.0: wasy10 001.000
%%CreationDate: Sun Mar 22 11:13:35 1998
%%VMusage: 120000 150000
11 dict begin
/FontInfo 14 dict dup begin
/version (001.002) readonly def
/Copyright (Metafont original (c) 1992 Ronald Waldi, Metafont curve conversion by Metafog (c) 1995 Richard Kinch.) readonly def
/Notice (Copyright 1998 Taco Hoekwater) readonly def
/FullName (wasy10) readonly def
/FamilyName (wasy10) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/Weight (Normal) readonly def
end readonly def
/FontName /wasy10 def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 50 /Box put
dup 52 /XBox put
readonly def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/FontBBox {-23 -1667 1720 881} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BCF7C3C3333173232E3FDBFF43949
1DB866C39088C203DC22FDC758584860EC7BB67FDA28CC6208249060E18FAB32
204779B5C03C0493BBBBC95CF02692CC4DEAA8D2EA90B5C2E64374E92BCB8501
429B8FAE4A76C0C6B76D6FF7CF9A7D5EDFBCA0E959541C59BD05B7DE43D25D53
FC3DDA6EF0C2743978A6D03E19CCED4A11F2EA4BCC3110BE8B8D9E2772361969
C19258EFAFDC276CB1ADE9208A941A36D18F9FB1C33DEF76AA315DDB02CB1AAE
36F1D7B67C605A37687A9C3F7067F07673039D1E3E1F5D9B09E6A389A55EBF12
06E72531469F768EDBC4DCCA572BD608C4BA8F7EC3E5BC61C6D949C94A843E69
0622F0AAEBF5CB25A2395DFF6342106C198751CF0B33691FC18800254AC54C04
02494A0E3670008E8BA57A3CD823BF47494F2EF9244421A8A0AED84D153D7201
BB12EE9478DF00CA573F64C2474817FF401EE94BACCA8AFC16E776665C3E1E31
89AEEC906A2B9F8974BEA7160C33F0AE7FB04B2666A5B16659D6DF66A688D80A
B531D9F866F21F15D55C6FE75A8787091359698E434EF9C129EED0427EB96787
B3F25C530E3664725C63D4C5DFF9D05CD13619FC41A001275A78C58F85FC7C4A
911CC31CB426231473202A698E5715B032D2206BB361EFCBFE3E32BC0C8D9BC1
353AAEC62EE632FC8FFFDCF6E7D928F562F689406CA00C11C7EAA723B62FFD2F
5F6343AF494085662CE2CE880B04F5589396EAAA8823DBCDE56D868B9E66BB8F
10EA91AF37D76A1BF27E69C2A2ED1D8B25434C0F205313ECB8A6E039093FFB32
983346BEC569B175529DAAD1FFEC1A9302918FC947C390A86C061AE0F6522D79
2D4FE06AE4FABA59F225D7ECE2EECD4BA1359DB18F8957F551C5D6F037F18545
CC6D03EB2DCCCFA294492ED72A737588457E5B18FA4CA0F6D6D8963CA35DFEDF
31A684FC0388D416D7BF6CD9837AD8692F284F24B80CF9F24DB10DAD0C4198BC
2D2A52D9F75CF6C52C7AE0D8D4598DB750E9CC97D0FD31EE8C598A2FF3745694
29DA808141AF4D8F8AA36D7DDCC3457D5E082B2BDF7EE060296721D44B092E70
3607B2335488925E41B22D659C8F0FFEE19A7C19547A147DB851262E47E9C4FB
0A8364BCBC1C77E29A1183EF185EF35B9A5B13170730ED52D5C52CCB460E7D37
F4F37F772794BEA0DA201C99C52F8AC2E4CE7FF33F6ACB796E55BA2372E3B035
52C4F57AB5C0BF828DC7E5A8F8F00ACE0120B99667816FAF5D736BCEBF7D45A5
79C9B5EAA32C9B672D764D2F51B2393ADC71A36AC0D5CA76F3F571D50CB4C1D7
CA77149B8F0C98198919DC43890B0BBF10075D53739F7E84CEE95B40C3DB68D5
6E9847E37B7920412068C3DE2065A77281345980956AFAD312499818890B454F
5DD8C92695818BA4DAFEBCDD4D268763515CE077A64C5F3AB384A6DFD7DD9641
FCDA0A3344B3A14F82D478B4BE7BFC2822A4D67AD3FD07B11589B93842066528
1E51D954D7E6019F6921DB9B00ED303B4B8F557EAC7A0B0340A268B0DDB25B3E
BE0982129B0D3416CA5D07ADC689CAA181270B8141F9D0F60C60F156CB305E5B
E71D9A5D5FB3216BFB66284FCABF6D74564D1288EA99D3FCF6F29C3AA690A596
02C0AD2BB29A2D457C66031E5571A1454758212EB4D053F4C28FF629FA94DBF2
9677AC4B92C4DF5C7FFDE31A8F2D6F9477896C11CBA890DD464C9231B1C350E8
E8CEE17F2E0F5D10416F7D7FBC6085E9BE09E692951EA7B93A9F49CD458476E0
A380E1D122F275093ECFD398FCA6D714187CC12A2B16318F9E1D2B0E9EC134A2
C4D2674AA68D2E7EDBCCA383
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMMathSymbols8-Regular
%!PS-AdobeFont-1.0: LMMathSymbols8-Regular 1.200
%%CreationDate: 16th September 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 556 156 0
%%EndComments
FontDirectory/LMMathSymbols8-Regular known{/LMMathSymbols8-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.003)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMMathSymbols8-Regular)readonly def
/FamilyName(LMMathSymbols8)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle -14.0362 def
/UnderlinePosition -117 def
/UnderlineThickness 36 def
end readonly def
/FontName /LMMathSymbols8-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-30 -955 1185 779}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF105BFA1C4BAA966BE78FD2F618C28B35E2A9ABAF
CFC1090C3FB0905252C41AAED38054D177019225F56A500BE560889E991201E0
4F9B605C0D22769EDC54E591E36E37E5FDE707BD42C0C024454DA2F639F72A9A
562B5C1D32C6F47FC06B117D908616531A8379DCE1701F7F184859612D9F84F9
0EE31AEF799812A99147A8CD30D5F8F8F035757560E05960E2C327020FEAE317
24C484AC0CD3C1AB9CF35516622A022D6CB83DEB8126DF04762C901617B35492
98158049D5C65DE86143B7F36D36233A115C36DF60D3C55816B2B0B341102AF0
90D7D4E00A7611262CCD366F870F0EE8175688261513076B608C7E160A9A79BD
2B66E2E2A89CBF6D1703854915ABEAFA09718FE338924B5AF1FBF1209786AEB0
0026C38A2C7E208E6C306BAAF037DFB0F3297EE1ABBA65247CF72D0F78A9BC24
038966CE124B94487282B69D6BC0B5E17441DA55415B5369E451E2B0D705FCAF
3AAC6DBEBB8AB0313C4C201F851DB96CA9EB49357C3C1AB73F0CA2110C994680
5AC8F0D760C03F71C92CEC2E1A3AB84813D389BEFE7E0C28FC76FCA70704BC4D
159EE8B490B95CB09DD01A4122A686AFB8B9C69381C8C303F9A3B695238C3BB4
CB44B3BBE50E2BAE63796BB51D945469BB75C69F7A758180B77CAAD2CFD5951A
23580A3D45083C8368543DD37AB49705B939804C12D4BDFA730845F7E42A6C9A
B3F0A376F44DC297393B85E8A18C45C99260BD499DE599CC0D76EBE4AA7D70AB
348FA87CA9A1000814C4FA99B4EBC35A0298AA29563B030707F3EAD9FFF7BFB8
3B347C4A00BFB392E79B79F413E67A73FBB006EBA896A65CB21BE940A0940640
34E08FF806A114ADD3FD42BB394F76CC77DD869C46DEEE20839C9A2FF73B840B
0ACF238D333719F5947DD4C39B8E3F070EEDDA1A39D526319828FA9F47F03D8A
245D8E215B37959566D26DD98185223E4FEF01676650EB4E26C0A425E6C23C50
4BA94BC88E0861476C6BDA40AA30151943B874CFB63DE5620A7A8F2CF6EA77EC
ECDED0887B6C00B24C7A463FC10FD2C2F18D67BFF9FC9E621DB4AEBA91880FDA
C1B255D3EAB46E6243AE85845FB84DC84256134A55488B1A6B00C672C13F4D70
9C289E50F5C1D8EF063ADA63F3351D5E8B2A5BCCD284480B0930FB24143DD785
1B5539E97DAEBC0C57E6CAD4465492780B560D7A64F4AACF00DD611A0D4AA2A5
9BF972145C6A25C355CF276F00AD5F5E4EEA8D2788534B0E643A05643E8A8303
8029E832F016A7F41B9B176926F360586A5C26C99195A6646B1336FDDC2FF0E4
0D5A3A2E5B7AF64A3304B9E86E1BAFC221A8165D453AEE422EFF10547CC2E44F
566E8880D7B62B55E06213C9491954D1A8509555EDD6F3AFA775472B61C784BE
8968101A50626A429AEFCD373482B3557523FD5EED52EBF1AEEE57DB42258C95
0A89EF4AE0B5BDE304F93A6AC86D0D9A2E357190C3D4FF71D8D944D143A5113B
D50AF984D445B15FB7FECD5E9877D87C3700C66137EED1941ADB97C07BA24772
52903E9D921679ADB9E1D6EA11EAFDDEACCA99724FC623D1225488A9B780043D
FE114D2536479E7D64EEB2CF6C52580FA35C2F36D58AE151C829C26F9B88AC15
9C35F7ABA897501019932A2029BE9D741D184007401408BA95DD600436E0BF5E
8A00CE3C9285996155776AB9ACA692EB09DFB0B956B404C74657B72A77E33C37
4014B4AD13F8F95AB9B462F7A5950046C9C4A8CC6ED1027F346493080868F56A
F3DF0C1FEF4E0CFF7AD1AC7D2101AF2FFA800CAC8DAF8F9F39948DB77181F724
D242E49D31729212E8F9893042350E81259206B912AA4308A9F42A83F820319F
04665E04923D5D614A9EADD2DC3A8840559B0AFB085B9231E53B67F590AD3EA1
E2B973710D3D92EB644A1E863BCEB155914D39D71C5615401DAD034F878B91C1
9C219D2328AEC2B7534AE76D755E73DF40B4E922D522E2CAF63FA0A8D22AF651
9A1256FBAD63F5716194F5E3D22B63F0C4A6ECE5D621CAAC065C9BEFB010B8F4
DBC351E450FAE69049296B2ACA242679CC255695BE5323642F5D3E1E08253CE7
1580AF32B5A235DD935F593E4EEE8653EBBF954EF1D93F1690554CA9A2B2884C
0D77358349C63F65DA6B35176237E4AE20D5EE2B4FE43C368B03B753DB8BDA0F
3F10080C12CC74EB63C197249ACE670B87EAB00EF62653B0DD86D48787F42B15
11CDC61B1BE61C4893BEE6FE3DACFBF5D27848D9853394CF665F7419784C0878
33809889CA0A00B1143A4B50DB7ACCF5170572E6CA6A2C9E6779730320844524
35891DD07E5242BB33B23CEDF758BBDBC07A6FA4B2CD551378970959FEB44D81
4C92864DBBFF3EE84F3C6197B9F64EA3C49037D3688B17045746EEDD026E2E52
397D0F74C1C7DDA07F9E2DFAFB37DC2E9C0A286FC0FB22FA39492E716B82A883
23C32A697621E841EA6562C59C5C28F894FA74D4F552A3CBE5050EDDAEF23DDB
D00033E8FC234470A2BE7D2AB744495C2586EECEE3AC45158348A38B6608B8B2
D7D71C4B8A7F47AA80FAC7F08EB74DFA2505B0F95F1CFBD5EFACFCDF4B5DADAE
2E9DA7FC5FACB4D2CF4D16FE540A497866505C6444C83488FEDD5B443404F68D
EF134DED20CD060C99618E055612943FF9C723308847813867CFFD614C44D042
49769E1265755BCB2688CD7EB73E7355939AF2BC8662FD05686C604FED2A51E1
582717B71B6BA14FBBE01DB1B5CCA1B5D20B1F8463C3D187B4E3C06CDD333F11
BAB0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: LMRoman12-Regular
%!PS-AdobeFont-1.0: LMRoman12-Regular 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Regular known{/LMRoman12-Regular findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Regular)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Normal)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 44 def
end readonly def
/FontName /LMRoman12-Regular def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-422 -280 1394 1127}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF13E7AC5E68123F9DFAD1150FFE135989C22B412B
63BEC913DA6144549F051416C71903E13237781A5DD70E8333F80D9F0E493687
94A83B2F049E14761EFE435983C72A913217C8946E4DEB22A9DB2FD68B53B9B4
02761774E0E713EB4A4FC9C587A325C91693ADBC62DF65291D5EB7BD830949C3
35DF08289D902F15122C50260EEE2B47E043ADA0D524C74E7162994153270875
9684A21A92E2A110C8FA542765DC1244DA4ED2FF03AB0E7836F187017A2AB59B
436136202ED2D5F38A061955643F519B56D5081FB38526C4091FB82642EB2AC2
17913FA5191E1482492797A09A2C4859DC92077AB96A24C759D2A12D8CF53A67
D39FAC370CA395D7947698CFE282BDAA265B8C66D319093A4B6A6B23D39B579B
02FDEBB0FAC4746D42B81AC988E14F5E16D364AFD1FE5E5BE79B95F649D0E302
3D515A32D736B13ED5A59461701BEE9BD6454D8EDC9F523F0F9ED8C2283958FF
E83175BCD63A78D5B5AA7A59598325B315F6EF8ED5C2903F0797F25BEE9627EA
B7293E929462468CEB3850E3F0F02C6D8BCB048CA7C08EFBDA6F2A43E03773DA
6CEEB9CA135749256D200AF2DA1AC7CC1F88D1F7E2FB7A3B317BD067B1136AAD
853BB4BDB4FF59678994E9E420712F1C1388E969C0C7AD3251B7DD9309CC2412
01ED1742C7CC55BA82454D4A8211FEEE54F750E858EA905059B59AB8153FDE73
21AE301103FF22B1C3AFEA3486B201D6E142180481F28189F1A55DEDDB2B8C99
284BD47214751BBA6318949FD9BF7FB4659ADE42F716AD523F9E49F08C8B6F5B
A43FECCC19D69391CDF7B54D6BEB90258567A4D3EED257CF64B722FF4A793FAA
07250123A6A86DA694CBF1F040B611B619BB7D3CBE2D58CF1223CBF5A0D79A81
7C10FB27867E46D5BA1B3EB266E09AC5FADBD0F80D95237A5F36541162C707EB
0EFCD7DBA0E962FD6C10C2E1556836669524A473393873D502CA659D99F404CA
7B3C6D001A60B17ED2B2AD4850EDCB990134F321F1FD6696F64BA101037918C9
F3EB2C616987CEAA46F6C052EB3FF6F2FB9A6F974915B82B6608CD85F75F0664
5644A5E3888713099F73E90FBC9681A6432D6944A68175A656D126AB96DEEC97
7DFB9A5ECCECE68B7C706A15EA93F5FA7800171D760667E1336DDDED349310D0
BB68B865F3E43C4275DFD82036752613F3FC722D561C0B5BA22C873A42C13AFF
73B7A9B8096208922179B7EDF55236F13203049ED2D3A304BEF0120285E9FBC3
921898A37465752B57535DF5054235CB5A713FDF779C161E40A8A8AD8074AABD
6A06EA11E40F1F4F4090C99D86095BE64A36FA8733362A8D4A2273879968020D
41EAA7F6C1A9B682B344B7DC94AAEDADFD1BD39385A57F9383AA235717AF84AF
BF5D808D32071618FA11E2F7907B9626CA16609BFEE67DB56CFE2E2B90BED39B
54D866320877A767FE000D8A3386EB1AEB2D99809C71C946EB77ED556CD01675
A5D45FC8BD04EAF80C756386291444CFC1D7F12BB4B1304696B2080A14F56ED1
959BD60C7F7F5BFAF8497205D4BD589967F17FBA10C2EF19C1679C5AACA4F9EE
B15E13977CA81B5026C7E1EF4FDDFF62E82B16CBE3D401AAFA4D973976EF232F
76C9D0C0793684D68FE95129C326682238CE9807B35B2C2C0C32F4122724C159
AA1C41DD94D0808809572A0A32125FA4D78B525B256291CA389F839797A13591
6197A48D453611484DA293AAA6B62F5ECBC9D32FD482C74A5387629E03895C5B
946117AA34217BC77B1E075A4BB99145EA55CFD1D12CB1D2E72636AE538232C1
3966FC6E07843E4FC7A8FB27BFB4FF67CD278CA322575D7590D77B4E03E63F7A
848E639AEA6DDEF55107E8C5B9DFFAA47CB3CB5A614B77D0112527C9AD97FDAE
5BC457971A70DB3421293E16959B64702BA858C1217A8B3B836A947462E0B59B
37C8CBC667F0052E653D33F067997638BDCAED6DF3A8F1793F71E79A58BEF6EC
47F700C376341D757B09A3E31F6ABE9EB9021C1A6E311CBAB6DBBC8AECB140BD
DCACE9B1E80979B7487BA2CB786018E20A5E0355AA33D6FCEF382799F62A9A8F
F8262E8DE16E9245C61CF3FFE09AACEF315932D79117A513F6863D275B80A249
01CC70FA943FF9A9F5E8D5716835F17CE3FCD6FC5EF10AC25471C19ED3B2D164
93293F09EA311F49295310B0C1AF942753C52402014764CE7026803F091EBA60
AD877E9208260AE6AF24100E2B365BF89C5B679378A7F6A67087C57B5519A988
04735147BE66CDFF2481FE35DBEE9CAC7E77D79BA760EF4C53A3C983853DE8C5
FD3F25925955F36A3BFF3454FF7B226C0F001FCBC5484DCFA46DD8D89C69C886
AA0247C5EE233C9D7DCFAAEA1E34B8938673AA6D760A80C38EFAE41268C528B8
5A14387C3E29D017EC16BE7E6918E11E7AAE31ACB6E85DE4B2B15B93B7BACB79
AC25F37A4E4D1B370E59C78DC9EB4AE83D1CB6E4DF546FBC914A6FF52591CCD3
C464AA14A393F61610D617E196C9252A013C9532C303C68553C91CE83431F239
BE883C519B643E9EAE5142F698F4B47ACE43BFE59E3AA4C8B47CA18016F95C6A
212208CDE1635F4E5271224CC19B6D47261CEBA3DB1E042443B665E915991D93
2209B3F4C86C9763861923B2F335DE040A8C24E73A0DC3FFAD5A6A9249A29AE0
C70F71EA41B0A4A505263D6A6C70BA63EB2814D31DDE792AAD7AEB4FA346EC85
0781604DBDF2EB65869969F265341938B2C7D6B979342D93A9F5A23A3CE8A015
130A0FB817DE38359C63DB215965E218E892C350FCADB5F66EB82D0813EF551E
F65992B2E24B4FC8353951C0A335B53F68A8F8286A94521BEE28D7319ABCDFA4
A21B5DE536B34845B32A34ED5CA1F3D3EE2B04DC4CBE12FC99DA94FB2648B842
54D4FB6729B1CB7E86DB55FF4216E2F57A08E04B44BB36F27129E5E93EDC061D
348F162C03BEDCDF0521B9F31D29543DE2AD436B75778C0489533F3FD5742FC8
AAAA8A72683C54B45F81F355D9D19496D0F80470D6B289B760B6851EA1A9D31C
01577A0026C7929C87160EE0D8EBC305A07052BD82AF003A0EEBF1D6FF38B526
E2EA0A91866201E08792F03323228B622E30142E47BC752EB0EFF7BE8B688A36
22826EC83CC42DCE8356DB43399E6A6918A887A64B2EEE98060E47C0F4276DEC
FDCA976E967EED2CE2C439693E2FD2F2C26823FBE781CE97DF06830FC498BDB0
73AD2CA5EC36B4892379B00A5C8564FC9A915C85B66EEE33EA460AF6141D60E3
76B4E430431F049992647E2B744E48AFD33CF5041056A43F90D0E6A47C2521C1
058E8C66894928964B332A89C5DA71AFBF455E5A68FDD4DF74A8F1572F8168DD
E778337122FBBD1485F73B4EEC2651C3465557A320A0932B65C1FF77F68B89E2
BE7D6D975EEC017C4CC66C88F5BF25B0D84AF0E70ED77B0B380397149845CE59
EEEF6DDDC9E7C6127A68489B4B19F3D15F6C72AB8DD43CA69CE0AE0177D2B999
3DB6EDD24B6A4FBFAF7245D800115B62C9BD6E97A52671CF3F69A78D19654F75
3822663BE5461EE982F36B0027977D6B3738BA7EBE8FFE3928E471DD9502DF1F
41F853B486CBF6A62EC2D4975CE0BAE9D76A833969FB573201280B149CA91AD5
F57D3A240F66B12B30C0B8C3C25DE1E16BDBF5FFF3CD111CA5FCCCDC96631D0A
2B46A37E422D648CF65D7C1392E322DAD8CD3CB42B3FA767FC185F653F299CF0
85F2C3AD7BDE7C44FD3DA32993CCB41A92B29BEB26E60B05B105EBEB7A7476D8
31D2C0383F39344255823DB7D1D12E2435634CF69890D14A1FF76CD20F731C4D
09ED15BFCB1DC5530257DEDE728A19496AAF9D8BBCFB2DDF39DA7261CD6B1DE1
94DB09EA1744A0B6E3A9A1704083D27D5690B18843ECD420763B9E7F42912756
39C6DE6964F3607C90166D11C291D467B35592E73C61A2DC1F13CD09369054DC
5695355C6FE73DCD523582A4973275B64B3D8058783639676B4F8B47476E4098
ED693455F82F098F49FF487626BD1A4D4B3B7961171D67F8F6B26EBA8AB37B5C
35D075C41218D0E9CAFBC8078A26AB4F29F821A015135CD43127434DAB18D387
013C388D3840182F35ECB411DD16BAB8CB1DC80EE2D09164F7CB2EDC0827D2F9
73A1460966368EA8F0D42E7A93BBD492801936F5E8A1E4D3E7274DF2F942B199
6D1183CD9CE1840868C9F63FFD1470AEB47FFF33703961AA34F3DDAB60E003B8
2AC1CF96295105A1686F43AB0766CFB77AA11B6C2A35FAC32CE4B5F87EB125EC
C6514500A94323FE593E382C53036412B09BC866F7FDE874F7CC79FE5120FF31
49483DFA3A94C37DC02088BCC1F9216D904E39F0F309DD6CB08C7537A7232DB5
812FF744EB62B67DCA2A8F59A0CF417AE778624FB2EDB7C4BFFC78BF8F01FD26
CC7062272CDBEF76089EC94D81E8CE1799CE9683265DE8EC9081A4880B2A464B
362143F510C94CDA3E6D8CD562DA5BB51608D3FECD3CE7F9544C28040B982EBF
8250E2EF1CABCA3F1DAAC0C57FA98CDF96EEA922F4D8370DABD6EAE8A6A87593
E33305B43B9266E2F919DD8B7797BC540066E380100B9EC3D442D09379385581
F3364B326657D7172A764FB4B7694BE549678FF4A9990BEA9CE519F34D465E01
301F4F26DC0970629D51DBD141B845BBC7080D960C1297C7925F24BE0B3832AA
D8C9B7FDB02CD351E05A2A51475934C7A76DC59C4B00181228D92288345BCA78
F879078CB928997E517D5E8DB9AE11433CC61033F9D44CC9B5C2E85261C505BF
2F227F31FAF8CB61DD5E0BF53200DD4FB17F45EDCB4C14E3DF23487EEDD3D9CE
F5B4636A092EC5DF2FA0F4243D324A5983198F2A73CDBD54D8633CA393BAFCF3
13178E02D3BFFC709F92ACB6CB2BA47A5DB2B394F6C7F031E02AA401E30A9096
08E8C4C56CA2ED91162BDEEB2DCCD7C4B742DC3CF9CAC9D7E3D281E9C6BAE428
11C87F72082C9BC07B07893B2E4F162655033BEBC0D2F93158A6728EB552FA09
202865142FE8D1300E2E0E66D52D087A2188BC928DB56231BEA4051318283859
CCD6D02CBFF67018A565B949A243A214842D1606270CA23CF3A2456A87125569
56C5A48721B1B1E140ABF9408EBC65BEB7705A43DA4915B95B8BC2391D848094
4EAD3B91C8BA9E2EA5654B276D8B695D12E43E43F6E03946F2C402ED527D6D94
1A52336F85BDA9D84810C541FB5CB6F89CCF85AFF0C765A2418D01DA1DFE6F39
368C16F7DE93B26B72FFD337D62DEAFED226F2B8ADC613C45F872522F3748106
B4BAC63967F79359D1B291F8702D49E38CE7F78DDB94091786761EC80A22088F
D4C9D5156F2043E9B57738EF8AD1C3D450F67B0FFD5674189E887AD14E32A6E0
67F6112896AB991D6C62169A602E510EA85A1675EE98A1F25F9884B61D126806
EC59743E29682DD755AF7C35A3444D643B1ACDED1FB6FEDBC81F42E9372DE5AF
64F15C4ADFC2BAB2DD04B1A7097D9A060C74ADF8ADFEEE2DB7270781DAAA3488
8B83CC15BAA041EF80C5BDC12EC1F5786BB41A5A210EF1503F63E46DE52CC01A
232C2456EE913CABB9B2A1CEA9E0573B012EA2371452E23091C65D76AAB3B0B4
77418D6682D55F6343E2E21E4F330FF9D869E1F2FC3FF4B1C049135B3B1530C3
0E1288EB5D9D11D7D9BB39FDA701503D426C7859229DB42614A54EBFB4DC8097
C0D9B0FB97171C0C5AD05C2736E54B1C37962B6AFC229BC6F0A4AD169C2EC212
D7741D517DCE40C6943373DB96EF2F4010ACAEDDBEBDA6B8EF328EA7E5E6F658
D88D55F4B2AAE6A9516F92F7CB040FE694AB4879DC5D9F5FDD8580DB9122DF99
42B38B748FE347926A7AD4A39C3E3E57EFA61F56E5B463649E058E104A8537D3
D81053D9DDDCCC41A6A77F829E3F6CB40BCBA184059390CF33937128D70FE747
739A0C92EF6EC74EBA6CB20D0AC3FCCDE4F78E0DDEA0146E9E5F0EF49715BDCD
ABD4EFA0BD65C68721BCFE282588EABC04F4E40A42037773349DE530D0A2E148
0210E0BA1D53E704FA24F55107E8C5B9DFFAA7864BFB720C86C730D91093F42E
30A6D341225812EF3FF71793B01AE3C643439EFCCB1509860B0FDF032739CF2C
C73F89825EA046A4D883F795D4E16F79713957F4ACA332BDCB5252DD213CBD4F
A5311591A3A52101009DDE43B62C069E427308EBC12D763FBD6503011ABA247A
0AF3051EE9FD3C2388C1E140DA4004919027257F2186CF716C685176CCFA85D1
17825A1595466DD4A1542B74D7A7D21A017F4FDC7D79FCF8CBD4F22FB2FB76C1
EE427DD625A2F527FC8EE49F6068CAF0F6C4215D24E482152142BAE76A41083B
036DDF4CE43930119F7238E314A92695B19D551F3819A196F5CDE323CFBD7566
DF1B34B583A55D5659F886A3E68A7D3D06321D6DB80CD676DACAB1311AAA2CFB
7F1A888116A70B06EE212F87DFD1C76A574B199F1775B48EE0F0C862742F9A5F
889F5C57CDC1BCC32B6E3FC28ACAA03E1E72C0D37CA7DC832D75FDFAD81AA210
A2080AAF04E81A47A3FFDEFDBA01DDDDEF0125E3465D4096377D2B1B27D50B5F
8E93AE8BF9453BBE8FD563B464468472BB6B2F202276A7F985C31CD8F76524EF
15561690C9312E87FBDBC45E45A08706F0E124592741656B6363B046D86FFB6D
567AEF67B112126E2ACF3642047B54BD12FD844E958D92EACFFC826FC39DA0D6
86041177ACA8473F6BCE8C5B4270F6A9C95573E2B64373F20D95B2C45021CFE1
7E2DA671A7FA88213B596074FE4D777E0688DF71EA7A458EB6620FCBB0A5872C
27D7B74DB62ACE58DC16B92EE2BAACC2BC51A8ED14F7A1FA42886B5EB480BC1A
E2FAA8D878652A4CAFD1F9EB162702D1F680589B791039A1379C374B81944E67
1E72CFBD77CBE0A95797B82E8521474FCB68D8D460A41B61369BDAF603292F99
1A813A22F039CACA201AB5BC51D79FF8D818EA9EFC3F37B5222166C447B82E75
52DE05711B3883394BA9DFC3DD84705383D05EA02D410DA660EE50583BE34AA6
7E925AB1FE7D0D6EE6721F4F33BA41B670AF286F432239DB702EA6E109CB0C7C
D17D94D85644B1EEF3318B83B5AA236835375E0B9E13B07B4D38BF176C177353
6706311EB78A2DA52D5BD2F0B2A939C42476B611F1F52A0405CA821B9D986588
7D4EF8AA7AE6AB234B252A506EA2EB5DF30E34AF76A51E49D3987DE5A6D98BAC
A13BCDBD1531A0F70903410B4C7EE09941F9ED40BDCDAFC20C8BE5EDF8A7DF54
973E9F237FD4F509708D4C043017B3ED910E01231450985FE13F6F382BED2C03
33FCCDE9366DD9CE67C1063341E30B49E0AF725F33C1522522D8B549791B5289
C33C65E4D6D12AA512DEB267C6C06AB90DF171E51DA849E99BE97280ED370D69
09828DE61CA45D557DABB453BE17D4F25AB9ECBD3CCB4EA3A262534603D41B84
8EC91CFFB79D7910F03973685DD97F036BD60D4E370E139161520C5D9CAED67D
9869D7CC5684BE0ADB28455D1308078F25132450F9540DF8438A07647427475D
12A0264A1B9924DE9EDDB672E5CF64E5F89CA229298398F53940E5604C958091
0F6742AC40A7CB3E08E73FA1E156091B19E56F01DF05AB58428789656A2049EE
BDF3A700F251720BADA482532CC7D31442097396CFFFE9A495BD5D5926A7AA84
A5E965D2148388C79555E642DA9C8EBDE42F5C0EB3D35D6C037EC5139AE5F97C
C27F2840FA366F1E2283CAACE06BA0AE68F883D9F85B81A3A160369B6F94F049
EF27E940F53F9B36D7DA980C81000E8E512EF9D135FFDDDEA0CB78723FB40B62
5D7418A892CFEBFF58AE1CD0F1209C706A2746237C1D110D4A10E173921C724E
CE93FF4730578302DFCE9C91A5EE36401A2A54A603C5C5DDA792DBFDA066A17F
3ACB2D4F9250BA3A967E7617604D60C241FC6484F61D4BB16B1AA92D8B9D5BC8
9BDAA48AF15A6383BD24A600EFAAD1B25DA7DA966802BCCEF0C7C1730CA43FB0
DF73DE5CB14426DE596A6E32B69840EF7F145CEF49ED3EC7A94077CCBA8D822C
41A2DE2DE9462DF4721D8AC30EFBEDF2347DFCB070CF727224EB5D877FAFDEC9
45EC1954197B12C590CBF46A09BAE5AF23D33A9136CD7E5948E01D854F05D770
3139CB39160A511C9177E57EFDAB737460B7A5168E512013C74769E497F266F9
79707A651E8B0FB5B886111E4913F65D28D29FD6E5D65A8A2548AA66104BF95D
06295349391B578D1E8AFF68ECF136CF9D10AFF24F36F255168AF0431F373DF8
E15542DEF5CB225978DF4843E022480E93CE7C9B35D08E6D3C3DF11ED0A79F0D
71E2D065D66EAF49D0A85D7764EBB31166A29307F6343DCA5AE987602B0BB097
35A0A8003D3C3D8DFD37D8FC6B3FFE84E00CEA22A540F581EC9293DBB7A4F493
722E61DB62F5D214953EC36A606C0EC22D17904AAF144001329CB3826EA63B1D
AD7F654DAEF4707A8E93F8B0391134E78949DE2851686AA02BB0A6D65F9B9E23
E4C2AE4B9E985EC7CA837D48E7D337FEC7836ACE1832AA323CB673968374FF48
41971EFBB28E3A558353E437D0740605CCC9193FA96454A3ED81F506337B15A4
1723B562C552CAD67A60480964C02C73490B48095FD5C0F11B0E26915084E24D
8EE1207F2426CE0CBC97FDF256FD2D20CC12B6228C0105AEA3CDC0C14C46F09A
E76760B013F5BF8F391A1179E6D3E8018F284F746EBCFA56734DDC425136AB0E
C6828301F70C4F652DF6A4537FC25299BE55008332B6ABA850F93A39D818910A
1BC4CCD59FE2E917BCC939A9173874F357FD2AC0EB3A7C3D9294946F1ACB88A6
3ED32F8E5D4D981863ECE4DDE11AA3604E2022AFC909284A4D43B36EFF1497E9
7C252D233534F47521E168D225F364D6DD429C06B11BC67975A2DA68BFAD5210
039E61598ECE5CFCCA60B0E1AD2F8A011E072D55C073C6294F2D411978D5F127
5767FF734AF11D92AB2B290CEB82632679BD0E5CA71598F0BA5A856038C66F72
0952543DC7BD16845DFD9BB96840C512BF9AFB028AD7A598FB92FF2E8F498BAE
3D508B398A3F149B2EBDCB7F957E10B5E4720060CEC82B470D7D7F201AD2A486
937EC5E0331D522494F1235DA84C02C18C315CD2390E3CE5611FD77CE4D53433
8835C86DB57706DA244B8DFDC8661514CDE029EAA738F667D8AFFFC0A69B14BB
D009A0C0F023D4D6706CCC0543AB6C685521AA479B5B48F87B903C224628F319
1DCA7DDED14C073356BD62BFD5E6625286B9FA5CCCF91A14644049DED12F4BC6
804F85BD448314C80C79DC71ACB94E9897F239B97FFEA835A10AFFBDCEE06CD1
CE0B1D2B370671C52CEEC54AEAD7ACF2405A282E1B51C5B59DA1CF3A94FB514A
AA60AAE58AA03C03FD54101BB80A110B7EC09C39260DF18DDAB0BA5A40946D55
0B7831A2EE254B2A846239EB7928E4FEB7C2BDB9732C0BF2947543F09C13D8F8
AC93832B0AE9E5660F58AEFBFD489E95ED67AF896350B352014576858A26DF96
9402AB30E0F9C56D545BFC9AB1B3116F6B641F000B5D48C4D4DE24CADB6010AE
8964FDF277230D34376F35CEAE039A36FD6C59DBD2A9358C18601D05AA8B2E28
98B489DF9F38829903FBF1D34D8DE9DC7014B9A821F6ACDDE16F6ED77B41505E
EF70B3490F7B6A8A76C8D453AFE0EDF8A1D487734BF1923FF75AA8408E16FF19
B5FA97ECDC9F3680E6E4F77B93A925018BC8E9971D40D7AED32A610FE034216E
250F47FF6578594AAB0F98E8C06969C51D0F116AE19F25B99BA876793C0261F3
A55F821A532B78080598232B4F17C90B1F91DFFA9047131A5493374B3357EF63
E27FA3BCD491C478BA8E1F056476FC098BE5F6320443D477777AD2F477516B9A
C737F39F38BBD343B9F9954221EF653D38F4B9C0B376B51523394318C22B863A
359B68FCBAADEDB675D7588606F7AB41B429CBF347632CFE037499C0CB02212F
AB228445EE6695730F7DE25553176FC19609A26DB043AF5EFE9FF1743C357A09
FA4DDD599A38B3E396234176BF2014155487DC65939F04DF25603E4E215532F4
D99E03086E183FB95F360FED53F1A1E6E7CE34EEA6DAA9B293A32F6702E0FF3B
AFA6428355378CA104CC837DFCAECC1EFDCC281D68285BA128E09B840E807E6F
6D0204027CEA8756FAA7AC4AF2361EB14BA5BA08543D81624737B2C25CCF3AF3
E0E78A42FA0F970C9B27AD62328590140E708EB3654A3C66EDFFFA17A94FFFE3
D9F9F98960BD660253A72E63479DBFE0FB8041A873898332B8C42185F79FC85E
67561B3C73B9D2DB0F8C6FF6FA866BC6BD612B1434B56B8EE3C13BCE897D183E
C366DEFAA4A2E5F3AFDC577DF8F4B125C0BAC2EA874D558B0F46BF771E29330A
33E361C619BD62942EB727CA1870F9437985943F24272A6677F20E75A8F7FB6C
1EC7E50A4654EC273731FDA08D2A0093B1C31CBEA19AAE4FFC83A933DEF3E7EC
A5BFC73C09D36274C91F1149C89024DA3E3E034AE6B70836AA1F5BC1328762B9
1D4D9D5F1BDC264D440B20D0C4BAAC09EF178818B4EE699A5EFC7BF136C8ECEB
DEE65D377D3EC454B9E8E4E4B7897387234F730A1D2D59F55B440BCBFDBAC428
DDBE93CE72877DD4A49B269B910AC08A430B643B6ED36DCAA09B41FEFDB90E10
C8AF0A0349F2371FE7807F8382AD9D1E7E446E73FB596F2B399592C164DFEC11
5BCDA359B58305C56E941651E327F9970FF6310EBD4306E2D9D1D13E303C932E
DEC2896C751B0053B7E9268CF93B9763BA70C77A82B01C2B174798E72F04CFCB
0DE24EA6A803EA7D37FFE87238BC763115BE9D63753FAB6F4BF4D7B35D01E3A1
98153B354910626A7ECB0E22541651CD027D5B23BE4FC86005E73CF4346D96DE
26FB54D3FDE40B8DD6233DA59A402050DDC549D6EFEECCD0A65DBB37026729AE
B90253B022FE6E2F49A329B0215256CFF25F22E753393188F7B79B49C0F2ED43
95E0ECC246A1A96A67E7EDE8C1B81FA5A78EE72EEC5F0878E112CB53F9792361
238817BA3548735C48CC9E2E271E6DB67AA65CEE2C60617072702B67183114C9
895464ADC2E62CA33C542EEF57BB334A8B1A40CFB7DDF41F7827E4C2AE9DE83E
8BAD62DB170EA4E4DDE87DEACF756B352E24F6F16B58AA7B006877B1C6EBD9E7
8621ABDDF6149ECBC35E7209149B2F24EDE629C429925BE5E43D9E9731AAD07B
020D3CCBFC275E70E16740DEAF4B0DBC9D59A559B2BDBAC48EAA0CF06C0E9F8C
05F542BD304D2D1798BABD827BC8A689C3C35078CC33A5170569833A45342B06
0E73EDDBB89A0429A4F9A551BC5DCBA879EC7DFFCC255E05EB60292825A8BD3F
121C8D281DBFB9C2BD9F6C9D816102A7E8549ACE943EF47A3885068FCA7F2DE2
0B19CC754921E04C0914C44CE56146D33B41354396F37130C0E4883E1DB33E54
86A1AE2014E322E034E26D6BBD97BDE6C6DD182371AD0BC6BFFBE163DE9D02BC
317841B4696BE7DA9EDE7FF90D22DF221264996510CF314DFD121CD97988D700
2598288EA2C13DBD98402012BE0E43B7C69F2BC1FA11191A2974874205A7DDA9
6A4861060714F6F7B0126F2E1EA686D7693BB1BDB187E14E7B323A3B8F968B14
40C691B1FA7176E0CE92270D872A505391883AA61465DFA97CD1B0B290B6AC14
4B55EBB8EC20F0333E981166F8F5DA8E7B4448DC3FBB1B774C3423B5104C3F9C
4174811E9E24F8A93063FC085C5A5647F5AE375E90AB1DBC3657E832895AF589
D7E094DA3775AF78DBE5632F6471A4330CD4CA8DAA5B4BBE8811CDBBFB04AAAA
21C7DA9C8CA81CD3D122FAB3560226ED53F1BB7DF1C66513FB59862A2679B71C
2BA4FED7049F2291FAA610FE8C4CCD57A7A8C9F5071193E20C5BEC91DCF28E58
E376E2CF1810A7EDD21D89F33FF7E0A9EBF9E889ED33DC41378E58BD33F44D76
204AFF41F0CE8D4A8C4AEB40D68457BC8D0D18F1647DB2339D25BFE3D970F363
40D8417D27A83D007491C542505F3BD5D21774BDCF80B61524827F3870095BCD
16CF26E00CD63E569E15329DD2C1C33B75F7D74D1C8F961A514F6FD6A86993B3
5C1CA40B9417A1DB1BC9CFD7A726E5853FD3695D2505A17DCD8BED5A8ADC0849
4E5BA8B57CE522758E01401FC2EC1724DBCF6E42D06B418F7CC6D43D43344FE6
4EA1D4B6294F2A0C317554A76DED2743FC862C057D57D63453CC07AEC23F393D
0F3A6193A08272AD735FAB523EC6955BE9ED8D0F033FB488ECF0ADD93E7E4BF0
5FA8D8E4455805FD5CCE647F990EC29436C60A8C9DCE535BCCF8423D79C383AB
B001990A07F8B008FCFEF55C2E21664ADC97DA44BD9FA34500F72B7B38CEB825
8173258507B9070C1A92470E3AD7F1CD944E91ADBD1EFF555D1204133764B8D3
051BE747C134397AF98F26AE6BE96AE877570C1792AC0CF18BAF9E6FC668A573
248CAB68725ABCA9801E168543480A39A5063AE31266DF857E7233E8EBC07A0B
B1C59B638E677A4FC26F9D9A17F28132BF021FC8B8E3B1270C1BEB1C4042BBA0
D34125774CAC72B756F590155BF03A84F0DC427C57B71704D2F4FE437B28778A
CE5C18720E3E3C72B08FB19807710498752E1B1855E4DE8F5DDC3BBA41CEB43E
46E9972EBB66CA1F2390889EB779D89DC565746F129EEAC3CDF33EC8821B5281
F55F19AD53BB4FE9559A1CD46A71E1847119E030D75EEEDCF7155D293660ED7E
91867553D12CA559E3D625BD41A27B1BD42213757E16CEFFB075813DF7B7BA6C
66C6457824330F5052B43E42A8D9BABC1C3DDA7B54BE6D81470564C34F1F2208
5EA743F93B2A013FFB45C5ED5E8FC6CD67F1244DBF5A2C79B9B3E165B723C934
3E236869175728EC36D2C57F6AB5209856B7CC39AFF37556536D462E35E10DC7
8B53F3E0B671098413E318D9A0B75C53A9D6518FE2EEAFEC10ECA86DBCD67524
4FA279980B91B1C194F42673BB21073D7A313CDC5FBCB16FF1571FF48BB11A12
4D1DCA305FD1D602269C73C8B107D49B98E5E0C209A729E3DC9063F4DFF450CF
263B5C9CC18EFB659E7663356B904264A92A74FDB2B29ECD6CF81A54A3638217
93A360249D7EFDECC8DD734D9BFC4A3D813CCF13D5D929E4A9FA65A75E27349D
DAEA619E52650F8D44A7B98EAE15759FD67200DFF251DB7C95C09E89EA1F66EA
DC36A959452D4993506570FC63D8AD2EBFB6B8C0EFF6D40633B8C0B2F509DE97
AF69B284FBB5586F0FF2E48916D9E3EBDDBF1D95FCFEEE32F189B1F6477232AD
8B11FBDAA347BC0BBD19FECDF86A5980B9B83F8BFEBC6C8FDD7236E4C82C9F43
A749101509FEB31E38C10077F1BAFD0E134BD71C1C6EF00A8A55B6CB2F2E58E7
60A0B62AAFD5A4B37E3B39F2CDE81B5A0F4E79BA5B0A828281C823748C51E4AC
C809B0EC851E3DF647BBA2684C5C2EE1F1785600C021434CC2FDC35A4FDC88E3
65F40B9D576708B6BAE82FD7F27C852C97CEE1630AA99AFB93D3548358D27915
54002A2DB1C9F9FF6A9DE9A3D778A6463E16EABD266B068F98C3564F42D2F7F2
6014DE37C4DCCB6B3084AF705924E9FF4B42159E5978724D0874215B49AC3C1C
39B750D90F2CC97C981D1FC2366FBCD0FC05F53B4C42D0B59B11F2C862279255
4F2C5389FE22C5569B2DB1289CB7476F2EF2991878E11F38FF36D1F1D67E0A15
4F2A9F02A3C989247B02E5DB75B1683103305C5A43ED712AC76B7494E68E3439
1E2542903355658BD278E6769617CFEBC43E0568A928CFC41192701622D89283
1E9B14655DB5FEDADF4E23A07F6C0E1387DD54F5C8BD071C4E989012E682C4F6
C7A55DD17959CA190630ACFFCDE63ABC91B1594A04C8A90B658A61B785B8AEFE
9DBA015D717D4CBB6970DFB390317A8F1B0971C84FBB39F5FB23526CF92128A4
FBA8DF907229C1CCF681450F0BF41741C5D9267EE012A4ED81A8493B153CEC0F
AFAAED622EF19068F9200270BB9367AC291B5554ECEB61CA3FEDB24200F478D4
5275BCB2DC287840236DF4AC604119029F54CA5691194AED3709422940A8C369
62BC1D166C17512383C94FABBC94C08DD5DBFF32556ACDB60C6F6DF6CD99E6C5
4695F00E10311791747231C40A3885F028D80A83C90BAF07428D1D8869EFE48A
460C0BFB2499E7ECE43FA2D85AD7FD719276D25B1F67A774D6DE23B4AE10F280
D6BA0D981250CC5A3B60478C7CD7C2D18483F808522BEC54DADE32E9CAAF95CA
8FB8D7D6F8E6B1F1470D1BFD1C6F714295E0ECC246A1A96A67E7EDE8C1B81FA5
A78EE72F9E2B4A122D90C64FC0793B178018DB98ECBE34ECC1CE14636376AC6E
3F7414E4A017F9FAE43F47C36E5544A796E9C6D6CD198B29532908C44B42DA92
FEAB15171D2055712018126F3577E87ADE936A6A10BF199A9527D50C430ECEEF
52B4AB5A78768495F4A0B56EE8FD852899B8F1AA8D27625CBFF10A27E2B97314
A9BFED3E1145BF128ACFB3D788014BCFF4A793A6027E94DF79BEB0058C713FD6
750BA2C340B265B989E10F811FFAADAB3C186FE78F3F6581296F85483FE343D5
4EAD9D29D5AB7DC23CFEF22998842822EE91CA5F54DBB4DA24D13497EBE63300
753541B8CEA23BA55F4DCE156C876E12918275E17D92EF1ECEE7DADF069B160E
9D17FEB980F5F2FADE062DB928FBE8FCC548E655D710716EC5F734EB4D4E85FC
D8DFE03DB2177D713F6C9D6E9D1A5E8FBCF32D200E0FAF7FD33ABAAE9DE070E7
3A17613406C711B92AEF8134F99F5E7ADC0AAC6DA6407D2629816D401982539F
BBD85CE2116E99BDBC1508FBCE413C07B29419190E4223F9582215E723358E19
2532476CD8EA1F5AF507CB853A32E8C3503725A28A20C7E32793E2DDA8ED6D90
F8041298B7A087A22D77211A860F0CFEDA2199DE30E50EC3777E8D0C58B07E6B
7B0934D43B9A24F5A9BDEA3D6D9690B071FEE1B27CE2AEF79E27A7CC1D6B68A5
B9F504BED3487D1E1432FFD51B5492DB49BF8810AF0BDC54BB1D0874081F90EC
F847285162043549D78E2B9DF1ECC680AF5AEFC1A738BD094687B76E2D4E16BF
BAC62ECA4C3EF29948A761B482DB56A88D5400C8D857738570EB8036B255BF4D
E859F59784794A0288065E86D7F5A832B11D5CDF6CAFF23F1E89F29B1EFECAFF
31922A16CB785948643D0591FC53F230448C09073A73F51F7E4AE79246673B08
00049F563BDE06CD872EADAA457F6BC078B85EA3793D0871565F684DE7C79850
BDDDEE9EFBC6BD9C192EA36BECCED490E6086844117D223CC2C4B14C8E3E833E
87535CC8D0D55442DD3E19B955F0154DA46F6640F1B0930466D8CFDAC6DE37E6
23426B8ACF222C196AED0DDFA568EAF059A4A0FAB8F42D90434A48E3F4993DDF
5FDF93C9E21DCD10F50EFF6DEC3B15060C553536AFA1AB550740F7286EC572C6
2660D9A9EF2A95B7D9759B38C8F96A77B1F40BC30AA52EA9DAF365763EC4B390
A80F5806924BF40E49AE3D74A09700D1FE75352022A81FDA4CB5B549B69AC94F
E998BFE6B0B60411388FD7F8F95FC7A4542DD071B9BBACDBA04B584EF886716F
299981EC9BEA227BEE986A9A0D418DA1AB5E0FD14B7DFB4AE346574ACBE4333E
0446D56C398913DCD823DF8673A3ED3D91ACE4B124110BEAD1F797A23A6BF1BB
DD51D96BA4A5207AF1044E917186B2F8EBF1516AAD7B89846E96852878792D64
A7BEA283E0EA4AE53B170C19D0071038D64FE15E5D2A5BE446EE0C6D1CFCC006
19CA95CD8F97EA85176570BCB441E9B749400E86770FA787F267499DA09EB723
9641CFED8CA4683A1BC5D98A6566CB91770EC7F8004DA518F5ADAFBC89A2EDE9
DB08733416741C77C30A39A9B881E6454A486E0C7BA416ED9175D5C9919AA651
6F0E77C57E563C368FC55723E725D41D2B5EE0C3F03A603A161713216AF97D4C
5AFEBD6FD869276EAC3B0E5079A047920ED4CA5480AB87B0E1BA88DBD549EDC8
E5930F17EF0AFCF839B2EA4AE9F3DF1F7018376F68D27AC36660F8B1F03444A2
D16C7D1CC421D34F98B69FF4C335B95F4222A8BAB77667BB1C1FB99B83BF35C8
C3C0F03DD8E221098CBC3E05C6D2443988CB308AD7FF6297A576398B0ACAA04C
99BF3E5D60A74761441DAD725DDBDF6824B0A4F0D6954F57E96413167E7AB4A2
C62B23E03259AD33593BFD738991C41D1D92295BB7FEEDE3A4F983FA3424D890
8193BFF7CD4084A6F2EF86E2824686D085BBED345F7E6EB57D050C10E7AF5A2C
93E5C578285B76AB6823AD536B1E3F3D212C0571C2F82B6FC9E762657E8A4AD3
39BA55BB19D3562BB53313EBD812D550227C0665E7B5096FF9653BCEB1FD783B
D457397797B1F5E1DF730CF36E7E0DA7F9805389E2D9461D2390B36E5A8B6279
A5D2569F321B44C350E2926FA78E2DC624B2C253F76778698BD1510D509244AA
6194832C8EC9EDCF022E141A5DE5496F54EF7A0057A9A5608768C3033D0A0FB4
B6D89FF0F07276434B5F901767FE185C0962BAB12D247676FDCE51B2C79A29F5
7C51262D5A857A5606152631CFB763AB502FBDEBAC58640AEDF364214BDABB66
70615D89ED4F6A69A0A5F44B948ACF6C46063431DC9645FCB91AE053D37C2645
2F9B772CD7C7A87E156478E76014DF9C546D9201261AA71B05F2E629B081F30F
FB2587943DFDB4C6864CF1FC7152CC208607524291E214967EF9422ED96D7B37
665D1ABC5777E2588A7301FE1C1497851C7B11300C3D6948D6FF4B35E682CFDF
C33E8A3F98100A686ADB740C45D0CB167BEB8857F6EB6C14E38C3695295292CC
EE57A365680B483E6222669DF4980A50D39360DC793D9C260F9A68379C031C3F
301BD1A184688CD0FACC7802A28ADB7907E056D20AEC2ADE13A030BEF5C410DC
A1D11F770EBC2E641196A40F411F24CCDBFDF1767ACE6635BE8ADDF24026ED1D
06839AB37F010ED88BA5053465DD483F36AB6A169951A878D1CAAA776E11669B
81EAA99EF9150B8D39695D096825DA20E945ADD93477273C251BE66ECFF63B31
2D6BBBFAA8DB48134565813A441931DA182401251F09576C023ED108AA5603E1
BB9A4DAF0258C35EE990F664417C84F84FFBE4D1CEC49379962163A2B4BF57C5
89CE3DE6B2E2BDA1502BCC478177F585F15CD2912847D0F53FF2986C6E0EB717
EFAC4D403595265F0306D9CB3B26CB5F05EC5A4D568727B404136F691BE1541A
E3E64BE682605CE4E916351ACA662221E1EB8A14C45F69001E24261089F5EC21
A49D85192393C682B739EB43CAD8C3FD4053B2D5396846B1160919C81067D754
42072E34982759C289C8FFD9BB88A0065D3BC9ED89A17D8CDE1BE835B0BFFCA1
24DDBDC4F7FC29C71982467CF612F56FAB0B77D63809AC68678180EE2161D0C2
DFF541E09DEE432622E8AB074E7C4DCA5BFD1EABCE2CDFA9DEBC79D600A4C6A0
29D3C8908638B45DEEF72270009E8401FB552E8CC4E2CEB8F2F188FCB4227C27
5763E934DA9929DD09DCA158FCC9D147F2CF5C15BBA98487BDF8B9A49AC53010
A86557CC57BDA529C65B0D9358B78640EEB66274C87AF540C030D0D3A5BAC4A2
D52C8B31DC84B31200F5B35BA0CEC0EE568DEA53659C2C8779E6FF88BDC632EC
CE672D5A6EC117F73386E184BC32D3AEC992B620A98338F962CD1669D6F626ED
59B8B12AC6686B4CD6EC15993749CB0FEDB08366E420875EA20B335E5774D372
A74302D7C0572EFB9CF97286C846176BA842EC02DE100ED07D85821780B85442
17A316D20029808051840A3DEB81AE5944BFF97A5D08D77946EB5AEE5D7B1C9F
5B8CD31B99193E499B57947E7F00C384CAD9B562AAA71579A4C648EC96BCC8B8
073DB96BE3925AB3A5F7C6A0C48AABBFFF93FEC6E0DB11761A37D19B0E21FB50
CE7AA5FC170784BB01C5EAE983475D1DBCE80FADAB1CD17812F9302EE8C0D082
3444D532637E75A4237B03B224DBE9C3F780001325199EFB60E8ABD815FAA4FE
47E4013257E914C488E8AE3F898E65AA24EB285F9751F9A7E9941624167BA70B
A56B64742D4EF690247D1D71416589AAB7055AE8D6B748EEBD1CBB53F9549589
6087F446B763EA7AE3E12EDBAB2C4F4071D5B5A782985E657464983D7D6D7A50
88F93351D189DD8DAF357503DE6AE1767818120936194E1821788B7F47579EE8
252656A7697D016A237B151600CBB092C1B99B6FD59AFFC017050093B590E1B5
31CBC85B8DB77177E4AD88CED67517D582AE06E205786E5ABA6E737902EA5295
F01DA071F812136EEFD5EDDCBDA137DD18603D96D86A1BB481B9AE6635261B96
E9658BD13B4E6523F01AC0814AFD17A0AB2345E9AC90610F078071F1692D172B
C013AB1664BD559A0982A42B20014C669DB3CE4A175B419F6BF8FB9223356DA4
34F136775AD4B3689CAA5C1C037579DB40976185B8E0E8E831EAA1D4B388E26F
069479B659FB1E9709B8CF92FA6D01F10D63B5D4EE19038D074840D0B0AEF670
AD694A49E5945D32888E5F35265D04CE179AF06B9EEA45ECADD0EC9F6B876644
036C94D4A2EFFA314DEFA3699AC7C26604BF753E281E0E91D09BE62C2D9EC105
8DAD23A0669639960C672DD664B2332429C9661A9FBDE2F60D6434CE3EF01CD1
0EBE04B4FE20A70CF22E2D454086E18F90CAC71E9745736C250E461B4AEF6689
E4A16140920BF876FFF99F4812C91759975070403E1BF543E43C4E0F1A5778A8
BDBFED2352D7ACB72EC16E03EA29EB337EED4E808623507B3972A9CBCA997918
BC0F61FF177BC71379D99B74FB2931187A5009E188FDFF18F3E2C927F8840544
9F16D0200EDAE3AFB61AB5097529316CCD6B518EDC109231A89B2B4A8E97CEA2
68C0FC21E0F23B089CB47B68A3D23C8C4BCF10F2593BDDC404B64B5740425950
AB5FE52E0CE8E26D554B08DFA8162C61C6E96F276FC34D2809D0D8DF0356D99E
D3DE4C62CBA67A52C361309B09C897726DC616466250AF1CE8DDF82BD16AC2FC
BD09F82ECF07969484686767748F31FF71F63FAA9CC4DA6A5C4C8C5EC791FA2C
32BD58F510D1982A0BC4C2D1912AD948C03ADECF1F22D7FE3F937282F10629D2
CD8D1CAEFAA88259E123E41C788E27B3FB0E07B4211EAC7F22B2AF260E284788
4D11D509900166A47F1E22F93B0E7241352FF65A87A2ECBB02876461639D3451
D0770236BEE846525369CA6A559BEF0FC7E8079FFBCA3050FCBB2D04764B08F6
52FD497BBFBC552C3FB8C764440069963257432DBC0CFD63BFFCDC571D95EEB4
C5741FCA41727A1D998A5E898370C8372D5926485AF84F59CDBB3F8234CD0A29
5FB42DF9FCF4434B94D51FB2E6B547F94B61A14BC1D619BAB57EBA336DE76124
10CD0A6D424C2330BD8404D7AF49B57D0031975E496616E67194A22AEBC12711
AAA40D37DD5ABE8C25E2A322B42E85D8CC3DB47B04E3D3A574F8BDD254F83C20
478CCE4B4869CF4DBC7A8A774B4F2AFAD52DFBB7162D1A47AFA882D7B4EE7246
442FE42ED3A3463ABF03C400D8A15E782334244B767EB7651FF0B70681E8AFCB
58655FFF70FAF6F7CF9081DEC277C2C34811E13EAB35782F3966984745F5691F
17074A6D425BFAE0246A3EA4246A843A44058909C4AAFD9D3E1A24E409DC396E
A46E25656B9529A9AAA034325FBC26CA62366273569031043FE565ADAA11A147
803D9C942F5E5BA2FB82225BCF51DA968C707D6BE84415AF988E028128327E5E
3532515916C34214AF0C3855BB95AC5FEBE4C760B41F04B8E905C9864A1E0EC3
13CC43DA7EAD417F57F245C5D87493FE457A0B7DCD5DDEEDCE107B7916211A38
D49BFDD8C83015E1298B46D6672B0443FDB0DF2D5CD155CA50BB8C512036A986
387D8E96689E912149A342974F5592972F4C5015F4384AF0562C85694C7B5EA6
CCA9EE570FBB4EA9505B068CEB69DB00BCD6B5AE1AF7094468B36C3FC56585C6
14FEA90B694A2E24D4068014B1904DC916B522EC6C2C7E69BB8760D6D4965BAD
3F6CBB96647D4EFC77644067F354C2F5C8295030D0B639FD3C6EC9945C45D59A
F864442DF6EA8F5B71EA72A153F2D22FB5C00FBCBAB15742A39621988B5909B8
DAA7BCD009BE96E433BD1AACE6F06A390682D06AB8CE12D633204FFEC850D3D5
1DC1619FCD93BB169C65B29B390BFADDD8B209D6B7F9097C6F8D13DF455218F8
E724967DCE29F83794C57F083459B6557B1B993EAF95EDC614559FF8A533CDE6
3C34738F0675B885E7AA29688DC935DFE1B6959EBCF9EAB992953270C5A8DC7C
9A584A8C7982ACF9A0FB2CB599BDCA08DF831BF3032A4B0010B864DC1FDA31F5
F49FD9378FA381AF187F071912E8FF214B3DFD62C59BD0DA9C906401FE514DA4
DBBD11D9ECAF2A50748D283FEE7FE3A07D3B5F0EFE139D653820FB3EEA998267
FB51CF42EEAD7BB650B2F9535C4BB445FEFEBB1E5752CBC7539470C7635D7DD5
FD75D8CC3A0D84229C222646DD4C728AC7953A70337291BC7EAFD0D9B5862522
35549219501F367A9A57F4584A9045B5E433A865DDEA73EDADB33799BB35A991
BBDFE147C9E75D59FBDC0E70FB1CD29010CFD49F23E9A798D2DBDB19066E8D86
A4ACB42E19A38BB5586DD5353A10711BB63CF4756A6DB72EB45B235FB52C23D3
0E3E33DBB87BABF4CE68E302E3114FCF627E5B8E6B65CAD74B8D57712E5A885A
FE46E7A61E298840F8D2AEC8131982A97E0B71C8F02FDE579980D30155FBDC1C
656EA3FE3A316E90EB3510EDDAA7FDC8AFAE3339E2B6D24C603F6FF7744C77E1
7310B8EC525A902A308E126BD3BF5D2C08CDD00148ADBA7CD0609512EABC59CD
6AE7B1A4CEF640AB5A8DC2651B52BBA98B16B956AABC9DFCE1C96F26AC6D8E11
E94E0B340CF588D10781AD05AE3025E704C0087D6D42AE49174510BB05FB2BB1
45B37D569C379C4CADF82CDE38015C78FFDC3100442491C9152C7F009D6F4097
8896B877D1BB56C3F268A6AD6903DBF5D826B356D021CD22F41F16851CAC4F02
29286F1ED13BD89BF3DE858C20E2C6E994C902AC22F8EA7D7A6D95408A05F3C5
D4B44EEEF9772D4BDA1FE4F466BAD0D52AECE0CA5BE2EA8124883BE657B42A5A
94B50A4DB43F604504BA3FF3F0506648C75D1AE5A44EB0C8C64879B5687E293F
49E5F6E61AFBD55F44AF0DB56F0D9246D16F29482736204283701FBF81B781D5
E506C3401F54AC96744B153BA19E77E75C424CE514F20F9C2FB8C376B572E79E
A7543D9C8565C0CEDB645580085B67E7E78C1E590E48522B5E43D01537481CCD
3F26AE35B0A98D0B80A1DD6BA3E9742914898C6E371090928E8A073B9282C260
A635DC6AEBF843AAA389282F098AF5FC456124FFC93EAE812C3207F8D3C21213
598326F951DC7C21BAACE01B803837A7BDF553F79FAD85856FBEF42C8F8D818B
8C550108FEB78738809DC388263F35644435E1EF31347807DFAEB7D1FE2901AD
5E7B28EA4391BEFDE6739959F6408A0F6951FDEC11688E8E736E7CE00E22D561
FDF799547905D75EAD3A1BDAF7480316F2962DACA7A56EF9F16610690D0C40E5
D2711F69200B3ECA09F1CC6E6E93DFA8B0DBE2EE8005320676A397875A21EB91
333F79C4D3AC1D1D1EE891C0A01CD71B279D1C6B68D99675DF3BFF6A24DF071E
CFE50D3457327F4F422C1AB6194F19963915327B4D933326D9CF59A7AF3797C2
EE47AD35BBA52F360E387AA6DBD6AF85E9A3B44A99D35D0A48DEAAA63DC18786
8A38FF02F92956F3369E456A30966C777183AF6893B3F8801BC15E8C92FF3C28
F68CBED6F982250B94154872EDBF704E529BABD4B9412D4CDECE2441FD8FE2DA
F0577F8E5EABB114A8F07E6BB7963A88A96337ECB1E419361B33FACD2AEE865F
93FE970C8DFF1C1CEC444B4AE1E5AC48D01C8707177AF767B83BE65492EB4E7E
56725A45128EE8ED5AA0569EDE314987BD85C257F4354B7BA7B3C53C7633D632
2BCB949B720BB91B31A383B312799202CFE0CC2F3B3E0D2F5A4925AC79B41190
02D080F7ABE37C52BB68ED1748E9F6E3AA2ADDE7F315E017F6240BCA0680CC2F
D672F506D937B1D26BA50AA9960757B5A2BC94BEF9A3156D2C1121297D170806
12C0CDF25A65582B08814650A1C3ECA592F499107FB92EA2BE1D10773A50F7DF
B4036CBAC341712E65F9F5A282B709DD5C51940382AB2A47E7D44F8D32ECC808
7C52E186006FC667C27D94038778F590BD63DEEB8F8298EBB71B5BA34F2D9D9B
7EF75E27CC1D6F4F3E3959041C336B3B6260E5CD43D069B1E22F47AAC8EF8213
4EC4199C3C6AB2D1B3339108E2D924FB26FC7F1A6123A48DB4761B8093FF5CC9
FE8D9AD16D04DE108727FD7C001FC2FC1983A023C049F778514357E82EC809E0
55FEC4576DD42C7C3D2E70BE3366206684D3DC4EE14753EBE08019F0C903B5A9
7525A8EE7342BDA9F0EE1C0FC9EFD7671BC3BB226C4E42834177ED16DCB4244C
398F6482A0FBEEF87D458993AE9BE4ECE7CE676094266EB0394D2A41F7245CBA
E772C0D8D60AE534179F5BDE03119366F74AF75A983E3ABCC0EB6A1FF750534C
631A605C6CF2E4DA35907D408C6C7F73C867DC2130840024382EF8F0841DC7FD
4051ED7D69B44C70AC66CF3DF17D3CF98B3DEBDB17A73ECD62EBE43B473FEC1F
76DA6C55089AF3D95E3D7FAE4F199EDA4729E8002E4507A12F27F88CFE50EAD6
B9CCA4597C2682212706C8F949E4DB005B84CEFACEAEEC41C5B72F4D6935B725
74A259EDDF77BA08600257C582FA2897F1A7534ED6191BA16E2C91044E20B893
7A263735177C03A9FF948852FF162C7939FDC69B9060B28CF5876534AC8EB4DE
238EAA6999374131BDB5F2A668824294DF01174A880B4EABC0DFB23ECBA603CE
654F8179316B3BF297E9151965F1A43686285B7FA4DD43B02A5FD54D398304E4
1BFEB11BFB7D4B032BBE7E204D9B08A812E8E218CD2E6DABA6DF142C5064F505
ADB001C433005B0EAFD2E91C5E45842997DC723FB5628169AB4C46D9EF5D984F
7463E4330154AE5C1875DBE42C23E1274766AC7687C15426E4FA49EB96A2BD02
4934FFB52021980884A518CC6DD5779A3F391DE6CCB9D1D44303BB00C7C86DD9
07155C5569D1F82B44EF17F8CF463582C717BE4AA892AD810AAEAFF5BD774EA5
BDF975DF8CF0B590571BE5E2E87AC5165F4959BCCE2080DB215D404823A3DA50
2F88454DE0C512D79CB0D44848024E77686C520372BAA7348B396050B2931BAF
3BAD3183B7E22B5856D9D908236037C83A715FCE7AE564889FC5377F0B6CAC75
F4D86B9770C52BF56B7B4DEAEEFAA7B959A8DEA82B3F22EB90F765C75C4C6DCE
7B3AC73AFB5EFBCAAB71FB5E7AD89F3175D4110F103B07AA2E8317567AB0B800
11F8751EAD919C39062C8747A39DB18BA7294409F008653291AA7B2EF8A12474
7733132DE5DBABC18F35FF74D053848AF7FEF8B91A66D56631CF84F6CB40F443
CFEF44D6C65847F7BF9AB484700D72CE5B23750F3D972EE672EAFF8293AEAC8E
13CC376523418C1259BBBC32BE399EF8578A48C406CBA083D3028DE92806C682
4A0187F9AFDC0457E3406E0E8F112375CD020912117A1D613A5DB8B69562620C
29A15038721DB062811BBE508DC0A95CEC5053E1B4B548A0EC5AA55A9FACED61
1429DADB394A8536940F1D93DECBE1E9CF7F118FD5E3A7D817DEFA2C1136EBF3
5B5E14E53CFDE264E7B96CAD7D9A4BAA0C7AAEF56CB78D7C4006DE9AA04F2FCD
7260CEB3C999C4E2587225350CD23BEB9BF6B9F41D14EC638D1FAF2E47B2FBF9
1079D14F869F68265A1EB487C15C95E035B5265838162FE19A852C8EA274290F
CAAA94E916ED06C70A0970355498E126AB343B0404003A37A711AA5059359C86
1534CAD40AD4C47E4BF18B72479CD8490D27CC9B661A6D30D00A6719922DB169
CED136E6BAB714CF4295C584406391BE6F6C6FF05FA4CA75A965286727DDE5E1
A873C640AABA1B604C266E6B7C30E33C8A9CE3B8FA326BD2EDE7E52B2AECA9CE
35B1C76B36BEC7DBA017D0971254AE6C5788F5F01A45D2FA5996A303948645BD
75DA85A52A654AB9FB5D143B04220D78B5CE1603251922FBD059898E138742D4
7BF2919366AE9CBE43A665C00495F8F3B8A25C9C7C93AA7EAECF3E9C871B9664
7C9654D20BC7BDCDAA802189D2681FCADC8E041B2C73A829292BC3DBC77EBA6B
F82584F6DA9923AB74192AF4204EC8E64AA8E695E9B95A99C7C4F7F34C81B0BA
AAF93AD943155B532328008E3F5A442B50F8B7224BC9D6DFB0BE889870A08F39
A02AD2A710F89D83DE3E20C5A880125BB87DC907B351311B4A4DCD29AFFA1A19
E2A1EB1BE65AC0728CD3E320D50F65A87B760E507B18F6518E9BCB36CBAFD244
E8FC46A98781E7AB7CED11F52E9E110D738EE1542BD3DA2092D1264D88B774A7
A131488472F96AC1BD69268F36F9A85F5D868E6B6170B80B7355E8025FF704D2
DD2CB9B06D3122A737435305D42DE9C6B61496A79C7D937182D08C0D5622CDEE
A663C3B64E2626FC2C681962EF6605038B56C26580AFD6A943FC9F587CADFA71
CE157330E8623BC634E70523EC18ACFF46C31BBC3ED2E20FD65E83E09A7377AA
9275923829B2154C6F884A24D0E62CFE50F646566E0AAE0D0D493B3409A3B18B
4BE3185DF2B065FF2F04A7FBDA01C6F5C69E4B433EA6DF57FBC274FE9A928A37
E76DED2566F82F83925C8017EB147AF73A3A466CFCB17B481BFF9EF2EEDF30A5
8227620FAFE6998C4311CC73DB9E5733AC9CE45356751ACBFA2D57CFFF441BB9
C91A3D488C4175CC064AB6B2543017F5B3795C928CB531C69199F67B6C78392A
A062A732B1006D0A741AC388F04B00DE2653B18C99512BDA16144D21308D575A
409EFBAAE5D96D65773EBE8D69A606A16E031B43B8B090E3434034B8BF13D512
ACB6FAB8EA5489C0AAABABCC4BB25A4378A782A66285CB7767129512E12E4A0A
3A8932B6AC676913C100BC4FC536F62CC2E8DB54AB435EDA01EBAEB217B91BCE
F4FCF5A2209700D70B2225CEACBB766D709956583F3B9EEF0C9FE85A6E2AD130
F4A61119733F6FE7E790EC579C85E5BE250CAEE2B6C541D92C30742805EF804E
1D0E6706D142AB5CB37F36CA0FDC269F11ADEEC46A221692D8FDC6B36468E2B4
9D356AD656BA30778533E6A5E60ACA58C3A47CF51D19D9F7FACF4901DB8CE346
0A028CE49990EC54594BF6DE78510E1506E015F46C943126D19D5792488FC2B8
719A92261A0F7C2EAF68EE7AFB85EE137E7D7247A332C27044231971C321DB66
B86B11FF402BD4E5F6874DD99A2711BD9A95954F02BC2988838CA22766EE3269
BB488181AC029A0017E8FE0AD2298F0BBF53EA363513808522301AF60FC16B81
8FD6715B5797EDAC56AF2BF97B1E887B2D4EBEB45D64F90B025118BA59ADBA82
77FD350CB0C8B4EC6C3FD68F31FA44C8D1884224BFB0C0C2A8F4A8240EF13AA7
E6B4FF1744C152A7AE5F2C7EF32B7412CAC45AE57ADDA80D5DCBB8DE3F56E900
986D041DB320DF8D8F03E4421B9941878ADAA2B19521BEAF1CC7B7B25A3B2810
CDE0607E4A0D172D7B3F99DAA34C4B174FD165CE4103019F38D5451344CF5637
BBAE7DF88EE21000780B31793DC3588A97FCC0358643E49974D290E1367283D3
8424327B504732495FFE8EEA80895A33A9F1D11CE4622D9B3BD398255FD2FF79
A6CA154E8643B238EE79255FAB6958D28E6237D5028AFA472B751DBDFF734FC4
11BC79646781C457A104E624B24D44ED1E3D3F761928CD2D8CA7A1B133A0FC09
8AC8ADBDCCE20808A874D712730EA210F01B7E6DEFEB59CB7C97AAAE4FFE52F9
908720C7B380204A1BE8299E7FDC3453C65873501A4FE06710AB40EFAEB1E872
B5D80493011A81EFD1F87DF35CBA72A1D886CCC6D39FFAA1AA47EAF0E73D1405
5E675DAC4EF1A56AF0B24B0599022EB63AA44FF817FA8E8118AA5E27872784F1
50B9180ECCCC77586E39586DB7CB534D1C5A278C46994A095D9EE5FB3367B614
23E6EEA09F22E0D4BCD431F4971D90DC1C3B1F61BCE05F86D730A73DE9561BD2
DC1E4F606F425667AF527084B4A5A39D79D13190BF7E56273B1EAED45DEE69CA
62E6D447264CE4E8F01BB71CE87E14B1EE977C88AE260A1C7843C56399DF92F0
5CA2B9F3BEAA26E847A40084861DC216EC6FCD2041DEBCB1FC8F4FCBDAA90546
E0A93748BB412AFC202E799F92E7BE6A8A7E07D74800DDC499F78551B0DA5C9B
B9647DDCB075E972DCCE5167861BBE61BF812685E9DE3F8C355ABDE036D8763D
2EE0CF9BB64FC686865FBEADEBE4437900A3A581AE5F0FE689787EDD1CAA6A64
AF8E34D611F2A805FB97230C493AE384BE3D9ABA647142B2B8815F321407ED2E
3F3D15CD3F29FA3084DF1A69D83B459B7760029E3242FAAF690216953D019FC9
DE8905A42F4501D1E76AE6912E96A49875B023084278248C05A1BCF54888D571
835E10E71118C8DCF089E43BDBCEAA9E402559B04D7CAFA095DCDB4017934AF0
5DE2B410F5C5A738B3CE473F09CEE376E25C4799D60C2C4771F3734B5819F679
F9B3E7348346D3B763A62E1BCA1BA4544026611033842C340305AEAD0E93DF97
557C1F3B41873478DB0072BFEA8BF300711694B062E85DE9B54B78EC923008B2
DB70C7D2980BC33155120C3CD743789E435E8492F19198D5EE9A7DB22D584FC7
B6F9C35C47D639FA4E332D38B92F3E77B55CE291ACB8321BE53A2C7D274FD475
1BE1F52347C6E3CF2FBDA627C06AAC52F08DB31AAF84A9F2A0B2D5DAC354F556
45D40D9CD64B4D9C601192B267565F5AF5CEB41549C09A04AE62FFD20D8832B2
D0BCDEEAB4147211DF02F563B1B0E65B1286946DDCE9EAEC0CB638FF7C2F9B79
EF6630F7D976C30B8DE1DDEC2F0B5322D9B3C5C3163055DF303F60927CDC29DD
9D08D35ACBF9554A21D6A8FF16FA963ABC8533FD6216B2A8E40F061A40599D2A
BDFC6C4A9AE2780D85A9CBD90DD7BE008C9B62C6A82F2739F6074B0FEA43B471
FE4B972C3888F78EB52FB86D77EF101C72ECD62D99808E88F038919686AE2C9F
E87904EA72BD6401B2ECBAE66D47EBBAB2E7DC7C78072C609AAEA82A16BD7A08
60E3E7D441978E38D6CAE9A40C5ED0923B060EA6EEA5B735D0D62E41842C07B3
4777005AAEDAD9D7CEBA399B3FDFF494D78EEF9EC6AEE041715F90A11ADF59C4
919F639222AFDEA00FF436CF5D613625A9FE96CAB13638ADD8C6A4221805CA5B
CC9D95863E488A7879D8A8416F0A1088A1C40A91877086147905FC71934E814E
C34B7280E54E90B0B7865C86324C524932C7CD9BB71FA698571B17D2C584C675
CB5F90993D09ADC292397919D94ACA804D0938F81F888D945FE492C0C78391F7
26E405686DC1AF378D609568ACA2B90C0E0D30B3057B9E1324842806AFCACA65
CFD5B626859C48D88022AF7191AA7BB169FD1C27AB937CA2E7776DA5CBF7B52B
2141B9090D0435E7458584346B311BE85547FD068883A48E3726C11099E20002
FC8B75EA78C1E449853FA9B6D42C49637CDFE9D0D56D3A84966B2612B08286D9
47413EC2CF2BCAEF39756C6E63E8C423F0235B23C97A8042FB286F0A96C66B54
AEEE713AB5083EB1A916C3669827A5E4E6CF82115B0524A2127E86F2A3C810B8
826CF2B675FF4FB8BE949FCC4B04813776A3451FE65A47D13D641A2D27741CEC
A6F2956BF0F2DCDF5326BD8683B2507936894E21A64F50AA7D53090F61EB25B9
FD9BCCE83504D7277C0D6FC28B5434D6FF1A1EEE3D5E439D7D21BA1255ABF37F
9AF74561741A2F67672E27163F8C9BA933F458E569E39372E34E3FF5AD87298C
696722D1D562D601D3673A778B833326CE8172363B1B4AEFDFEF230A0DD916D4
5E95601049B03FFAD238726AEAFA203ACF94C281E37057DE0BC5B2799B4A6B62
A9C9BBCF1FC0273DE19EA23EB58EE0F7AFE59C922443885055050940060E15F7
5FE2CD48AEE3F4D240563B18189BE94402AF8BCB67D2F60BFFAF5CF32DE45B4C
6736B1A91F27B7EE86580137ABB8F90BE823C135F5915A6C2DC8106D04F0DE6B
94FF904DD331BE0B74398D7E6A4F19EB2B1D260C9D56331E7700DF5148503FC0
39FEB875DC9BE47801A43BD6BCB6D746FB9D570DF4000845409912E1573D2A6D
64D19957837EFA1C39730568765E65BE3724DA84730B650D73C9ECAFD53217BD
C48F8E503BD8B469470C5363F0ADB027A201E35FB4C9C631CF85C30F467C4C64
221AF95892D0B01D38FEB55D42221B02B0A53C4B09C572437F24D25C6D3DE626
9767AC8C8E508E60043769BA98CF908FCD532F97CED47ED2F24D460DB6E43FD8
4EA63E203F6E03A90ED01EDD1A46782159CD55630071290759180BD64AB6CDC6
15EF79B2795CC8CB73F03B69A5741A07352A1E9BEE2A5B029E2CF2C47685853B
DD8FE2D270A3D9CF83608C2E2A25AA76AD6EC021BF42DE6B70EAC46E18896571
422094594691A63A1CA134BC443FA9B4C5CB1FDE6F09A4E5ECA5BFC73C09D362
74C91F1149C89024DA3E3E047281A31E6990A7D87B06DD81FC340DA699297371
652D8A565EE65327D74FE3B0AF7C1B0955B9910A1E5DA70F624F99BEBCE06379
BF256625C2ACF8C49E5F8E34B8DDE0A261B949E2424408F9518811F488C777EE
736C1DE0B08E3CD178B1D595F7C8662B9D0DCEDCB3D6B3E6F306EC12F624D52C
F8E88A895195A237D07BAF94FBD27B57EDF49EF1B359866134637DCCE4848D2B
051B8E0EC7B88872E9AA2F1CD39D700E23CD325C78530B4647F4462F88BEE48D
66227AEF97F7C422AE38DAE2C9103F43E9286763CD29A814D019CD673D3F16EE
5A0B1E343E5A9B317BF17045BABD4C8B56E1F1DA7ED5C8854089624E6E62915C
2A8CB53519BB769E0426C313F48E175BE275A20D1F67125D3750E3B0811F51C8
1566F67653654BE08ACF40B675C4110CE152B02DEF0E26B79D68E434B77D44DA
B2B63B5957C665103CDE9D085C33556AF87A99FEF0EA2D31C7B31D6FB6611752
9E5A19177BBF30C4399A266CE0B3208E7F3A8EE1F237C87BB9F989AC66AD86B8
33F24A232CDC0C216103EBBD1C423ADBCE07F54C53C5390D4370AB871548F41A
4E317E634AC942D9341494AD3076463A493F60CB8EB4E1553A6A69AF6288CC82
A4667F3E5156C9C207F4D1E1A55F2D8491612605ED32F1369D2D59A0B16A47AD
65D2657BB1C7019619EACC5665B45FEAB5D2888B5AB5FF43E07E04A25094B974
21C69B1DBC7AA1625BE96300BC0A502A8E32152AC676F9B1F252F8D0ED029E61
0CFDBA8A7E9861E1B76B837416E74BB617A89E6F802F6C377264BFCE9B591A5C
2F648120334646C574FB9CD7DE8FFBFA933A70D09F0FEFD70FDA9F461D9D4784
BBC1918B6C94ED90D38FC0FCF09808CBDB6FD7720E2F4AF7DDD22F1873BDE4D1
0AD9D39A1F19CEF2A45184E57F4CF967AE0084387B52C2B7A850C548688139DB
F47C7AD4AAC122A25EDFC715F58F0C8E9A5EC73354ACADC9F50FFA6C52D73E28
2915A0FEED78B45391536E745FD1B4A6E2042E583444C425F91998137ADD7A4C
4EA0EE5C3F1CB98C4ADD7F99BFF308C8B0B2ACF8559569A120F9BAB156215EA7
52F4C5C7CDBB68A333611795F807B89A0FDB9529007C8807545A7B048E695982
507CE9FEDBA30CBDDAD31A289DE67CBE504BF77B5D69F74A21D07E6585D34376
BB737D8444E281228C7336E07F13DAAAC6120257627ABE75639369DAE852EF7A
CC2B84228ECF606AAAD3BDA7B584B905BE6B226A49BFC5F8587A16679EEC4496
78C17181995A5217C85526A2857D75120048E1367FA207E629D9B8F060B969D4
438A98A52B02183737B9E9E6D72D507FF1A8C1AF60D163801D29C664AAFF3A3E
09330FB11AE489B5D007753C9134CE1C66E6D7A3F8200B656A97FC24AA9C3CD3
57BA1F656490F1513C79648DDAAED324A3FDDA8400382D00A493DE953FA6A618
6434314FACAE006BA2064623902C8AC479EEEBB609EFA5FF567040DCD5C54B92
34618410808685806BDBC523CD50FD2B3476FC2357E9D9D6F967C5983037BB6E
9EC44316532EE90B7B3D7CAC53C8293DA32993CCB41A92BC8A2B7F9F8206F24A
189E57A0B5C178B7326860AF2A31E9619DA02ABCD1BE3963D734D64B0182A6CF
CF064905FCD23548EC4946749CDC981002C4414156DFE0D78347CB6B21C532DE
74EC422D7CBAE78005C8BD017B134DD597B45F8BE28A41E8243609A986887C7D
B8DAF0F445E514A37F10E4A8338FEBD91498B85FDFDF044BFBAC5CE3439864F5
BD7541FDDF76DAB9A84970F17EB83D2D3913D0FA34B5DEBB0480156AD80CB454
E7FDE37832B1F435559F8BD5DAEBAA9E03FA118CB3F312FDFD210D6311CC0709
87DB17E7D56CEAD87FE307F274E4045D57945A929B285A736DC6960670AB563A
83F2C076C434D8F0CBCCAF6B690102C9D43640DC8FF3661389C2ABF1F4460CFD
70B5D84DC8341FD903BCD4B17AE3B2C613E2D38EA22941B1A3B5A87696D7F362
AAF8178718AF1A33ECAF6F5E88D42E5CB0BD42823C9DACFF28FB1C09EA6C3E9D
F0CC5856C733717293D7911962BA8306769F44FE924F3FA68C81140B47F4CBAD
98D9BC3BF01B9F8163334799A46B24BF40246A18A8D9DD3BFAB0AB3BA5CA24C5
ABEAFE59C5FD7B547DB78CB4BAF77F3C4CEBF4B49DF05CEC7BC5745C46C06AAF
E4B7F258660CD01E54600FF69511A6CA633D81BB30EA67F5A9C6A6448E38F525
793AF97A9CE3BF875DC5D845C884413A463D1F459BB90886A9D3F3B3D28B3D32
72BEB5EB9167E27F030C92006AA2B7755C4BCE151C5342164BAC2B121CC442F1
D25E77BFEEDB781BCAA6B0C311415EDECF9776CF78348E39A57A252641A37AD7
E883FCA60B9A203E6BB528BFFA4E14C1FCD4B1697443A99F57D9A48A1A3ABC85
172C39C4C945CB8A9FBDCC15BA40A512A8FC781BE84BC940C00F81441E7A8F58
4D02C3A9616AFB0707FD0CFB80D2FBCE4DEC2D5C0EBF2C8F28821412FA66736C
2FCE03B3B8E73482C8DFB68557839CF8DEE3EEF0CB829A2236D7D85C32312F45
8AA28848137DB2956A5E2D425BF4E120BF6D83751C86C780EC2DFD2F44F72FFD
D4C12220049A42A9F1E6A351DE400787EDDCA99D948763C80024065C5FC40F24
3B773283E4BB102850D526729D60B9B86348454DD2B0D50E7A5C214742686DA4
22DB42FAC48E967E6607678E37301F4D3A8A3FC67D9F369BED60C6E321A55CB9
6FC0DD4027AC73F2027D99026A671F83624D4D29B082C90F2D45A74C532D7DA3
49A085E5601B2D33C9F190382028D189261FAA622E982433D84A0580D8F17DBB
F3BBBBAAE050400B7331FB58441EFDA524CE5ECFDCC00B885F878A95C6D0A2E6
E82E68406FEC6C246E2ABDDE3D290391871993F1B637BE3E085FB1DD9A9B927F
B22BDE3BD9D3F12568D804832E3893707C36EED88A340C8365AF4A74A0FF5053
D505D1698DB2175A63130FCDF172B81134E9C364B9315CAA69F4DB314DC2FB69
C39D79DCFC6BBE86C35F043B5EF6395C50AA6866C6F7CEF6497D578EDF256376
08D01E1256EE6BA220CD48F835135E964B0252629B43A269AB241A647B9B3C21
4F7042C9AA0457E78D185A9616A994F5C93918936A5B7D4B42346A4C14034751
F111AEAE72D8031F1E008E7242BD5C3FF63CC2FEF6D33A09EAA0180F43DA46DE
37E0852FC7AF1DA794D7CFF4D882F7E2DB836CB4A4CEB8295834C8C3BAF1CCD3
11F6CFA6A79B9F49B4B605A6BBABAB617EDA35B2569AD2AC8987B3B8DF640A79
6F4BE9068BE20BDE45E6C67C0FA8F7DBCB7A9C897B37857F7D517CC14BEE3243
83EF00F9A11622FD0636EA28FCDFFC002E337F0805ABEC524ECB2C3A51A81C55
B507A6B130EED87E723B94DD4153D1204D656AF1172F3C1EA1D05583C92C1291
5F36A4C62C1535AE27243457A2A42378CEBE4460B7162AFF9A1DD0C2652E63E3
BF9D3AA5AD4F5C8333CD52A9A76B77A4F4A47CB626E0FF200A8D68A7FACF838A
4594A8BF991892EC16114300EBAABC40C1F5CACA814367E5AA3E26FDBD72CCB0
5AE5FA47AFFA3F0B97DA984738903F572CCDA10E398BEC6688DEA3B2A11DF054
5AAD134494AFBEFD9D51E09CB8C4A2D4DD9AD8A3E4F85B69429085C453279987
D0A33313C7694E0310DF2D64F17F5683E800B3CA899EF3A9621C1950EB521E01
5CF2A042DC6AEA5B7E64260D7F55FB923AE02D870D6472E3D665728341EE39A4
BD6C8EC20D5A782D4D2ABBBC5EC181E3F9AABEF35888E87E3AF5DA29B4B4E4EE
45019BA6FF7DF40D9FE58108584C65DACE6804F5A226CE96CD5CDD217EDC29CD
F07E6FCCDFE8BE6823591240178BDCB8AB9B6D65D59A74F22A0C743A25D27818
C9828141911C5C3739C322B880F5E8DC06F2748A4719AC9103B3B7F0FF5CFFB2
4DBE15B6673118F12D7665C55362A31CDC30D777CE774FF11305F8F5610F2F9B
0E3907463E5738E14FC006FE81A1AC4596D61CF2C2D081F08744CA6D78550AEE
58AD9CEF1B325F657B1DA0372E799AF99DEB62F1FB386855F555961A4767CF16
D9D8D63E40724FA9C3DCE33287E38A2B80DBD8DDF875B0281BEA459D4091995B
B462295661F9524D001058D25202C4BAAD2134CC4DDB0863CA8A2AD45316EA9E
34A9EA03A6C950682BD7E72A81DC4DD0A22C1045FD7E0F586CBF2D967E468B2E
8E763415D104C8B0D19BC1490311150931AED3497ABAA74303D3F70F9BDEDF81
F7703CE2AAB392531104ADAE188A6685F461FD9B08C9033A1E95F5F8A1717DBB
A7AAA1EA72855F7A80DF54D3E49663A5CA73CA348DB78A03C628642FD2E1270C
B854DEDD3B253CACCC76A03D251DF016C992624A8955C3C7BF0D7D6403BF3F18
81FC6ABD2007ED672902C0442F667977714F46C308D4687822ACA8A57C962D6F
8389B072C6F9724D1854A4D7A4C9A487B1AD7103D37F62FE2B9C1707CCDF3E08
12923006156C2A51F550B6569D01ECE0B7BDC7B7C3A79117F4F747BA9EED4861
1385468F10656126C581032081C0686DA6D6F08DBCF59AE4E3E3962E3BB4521C
DF6BA3DA4DD0D208CD1F48BF73867CD2C12FFBBFACE3F18C898E8F37C083280D
76C1BC5F3C7795791EC9AFABB609F395A7A9484BCA174C0EADB42A178A1E5DB9
65017A5FA9A5656DA52DD9D0385293F506BC2AD7280FC12B4B9DB9A5A95F052F
AA30A3DFBA914669680A23603F2267173D290A88F2A4C93CF8428248DD241C3C
1A2DB4C7155F8C3A32AD79429321A8F96E2E1F02AD70E2FDBEEE625BB0FEC660
05A1999A95B5B8A42DE5BB1384878378F1C62D1F3EE33D30517EE593A104F3E0
02727470C88E91D22E91A197E0F00F6F8CB7ADEEB361E953A6219F2393751EB5
6743C716C54AC93864B97C855B75672B3C002D02D5A228AA7B45386A18D452DC
6303FEB05A05C263A6721B241A38EE69FE19E2FDEB88079791ACDCF7651E0DBB
057172C1B9219284D91DA3BD4DF6C688986BD3673FFAD5EF6D07968BBB7CC496
99FB8BACB476D31527A71C30CAC83A8297461F2574EDBF2E2C89677869550C5C
73D8A9AE183F083F4068CD684517F4E3A1678B9658F8649182BA4DD7D16E5DC2
59E3F508321D660359A8B6BF01600E4A11FDBAA2689E99E8FA8D8326B0B744A5
B6E296CE4A0076484331ACDB37EE79306997B397035743BF573ED65BD47DBFD9
ACBB82875A2DB0C18BC37F5271AD85507BDC697A1C20A6062F8AACC1AD2BD1C9
8E198476F07F32DEAB29245E726B6D7AA6F926172B8E50CF991BA7BBF67DFB9B
5AFA3BC365449303B1C24D5916E2A6F58558CA274E9D40717A4303ADC8F4EB97
976EF328D6E8C7F6ED33A0C777A8F2AEB7FAB479D9B166D442B6640CE02C62C4
CE72A35BFDB2D087DF0B96BC386A0DC2B658C25806C67763358A9A7A0153F7CE
3E3811030C29E4713788B4BCF89D314056296955196AD82EF1C1AF173C435775
A6001DE4ADB04137F85C583C172D3353457EDC3EE66D99764685D2E9C5611A17
4BD260A65396CD18AB6DA3F544DBFD2202318BADBD95D136728FDC1F3B174E35
96DB8289D0C76397076DDEAF4FB188394902EAC1B91260167721551FCC572676
68A760032C6A56C9C2397905EFB38BB78626A004A31826653E500F71B61A2896
2C501FD7FAB7E61DA4CAB62EA76CBCD8DBDA1CC34AC3670368299DB7E23CB7EB
FD4F38C31CF4FBD46EB44215D6E646EC368469682FC8663358A8B205832879EE
EBA63035395B70651C58ABF296C7A9189A9F16136068398E090398D30D2ED928
1940D45D3F9B39005FE49A79CE949CEDB65B16D3712F87176A0D72ADC1049F1B
A37779AFC8C0315E0E0CCC45785D28DE4EAD3AF23E8EB270FF2FC011EB0C215B
1E87677C659D9A45853C24DAAD8A9DCFF6A6F3AF3043CA1B5018AD476E4F6782
0FA9FF8FCFBD6FAD534D426FD3E32EF58677F05AFC0E2909211E814A982F08B0
9882A558C4901C0DBB73645ADE3D9B7F9C27A6C14ED7D68DAD6C1C9A9D92397F
760A3704F53CA8D6AD908C90041CB46AB683E3A36E3626C32B848B2C56991E45
F198BEBCED104F60E60114D70082D8489A208FC82C85849DAB0CA3F3DED8BC38
1236C47E47A8D406C54B95D4D5188EBD111AB2B0DE373FFB95A5E0A39CC5461E
6CE4C52B624BA3693CFAC3CEF39785B861F38B29E1F9BDA4CDC89A50AD3AFF05
449417A7201CA4B7538AA37436976A8C5793A7DEB7DA08B301D959659EE70819
B553C35A36A72E50EE55AA9B9231723D564D83665FE9D01822A9B3A71D1FE300
28E43296A0548892D6EA807D07F16E915503CBEBD83B173D6AEF2574A9221B1E
5AB2C2005DDD22E105A1F4AE4D2529C9B9A1CC1734AF11509A59F3447A24656D
33CC5D961E345D619A4443B1E26FF20C75007F00EF200564FB5482E70985D58B
6BA631EE7A4E09E690D33ED76B14F692FB22F192D6902DBE367C6407E9F63873
237D6D3380DB041508EBD009B13507A30D7A1461F902B087B0F129E1A1F23A55
8216D854D7BABDE420C1EF00FDC49FD4292B4C730C54CFC9693E1C33312A8B3C
C3ECC121853C6A3026D10A3184CEA2E567BA8F42B68E3A7D0B8924AAE144F766
0939A7AEB90FCFBFFE432B337B76C08639427F127402F6B526482E4C92C2FB01
9DB2BB02D4B8AC4B50C8DFAFFDF6C9F064517D565E34B1911692965ACA98E063
16C60CA44CBD1051B4793C421785146ED81920270387533D0E5751CCB5B4BAD3
6EB5D83622D4B5CA5AD61A001BF8E9EF375E64D47810B1A0FF6AC6CB57850CE3
A037A2A7930D8CEC270F5E73BC28434626E4B463B5835B3FC165EF9A58F7C465
FB6D0FE81572EC14C043475A0FD680DDA06FDE57255474F967A17ED5875CA938
4B5EA71849B89468C8AD9021E3603029EF462C988B1FABFD226CB2A763620718
A52ED50D4AAE9A2070555403B83025FC251DAB0517B5A78BB3622A64E49D32D1
DE03A5F2FCFCCEFE5728D6C6432B3DB333A390993F8B72B95440914969A1F2D0
01A5D7C9A8DD908A5AAB0838734E691BC16C50353B2441985488F0E70611B855
A2709D6973CE3C2DAB27202B6994A1C8118C56602C4BDA29C26DE2508F959496
34071E3405B3E415E944BFB1AD4121F47D4750A5501018DB4BDD5B64DF6A6F89
F6F95B2A51660FFA663695FB3C03D7569D309DE3ABDFBBC874190A46165FBE65
4065FEA56AD83B17114EC5A23A10114334CBF42718BFC37F4346B36438B94D02
F5674B8C0E3767D8880357E5017147E5372F54B764A8DECFEBD1F45623D0AF7E
21A589ECF73E8ABEC3C69594738F4F79991BA1488AFCC110AEE7D7440F1D63A3
62DD4E2031B67C1EB3108C53E594D933EADE2663ECCD818CD778A6CB71BF23B5
C8302500D3F3428D883D166829B22391551A9619C75FBA4E4E99A8810313DC8C
AC4AE174D9CED553BA1005E47A5048AF59680B4B87A86DF45930BE230E033D80
6BEA8BA7A8A2DA134401D0ACA9E239449DF4A65FCC992FE4D85BBC15DF0448A6
610E1F7FAB897E1D4B3DEC7347D8218353614511C94D025DFD9425EEF795DD0E
9B5BE6E340CB1A2E88CBF0647991ADCB130D4135332DC9CDB644DF6980C91FC2
F6DF112619FA4F9AA0123580566D1A1B4C2B70956D0B83E6DE4164A97731F59B
6017188D449C867D7B28D3B6E3E09C2C63CFEEEC12351C5B069D0B8C6A16A9C1
8EB28CE1F5618CA219210BE64E980388B8DFDB208F9A05744B68E42D4C0DC2B6
45CD0FB2F423F5A8EFEA9BD8FCE754E67BAF7FF7EDC1935E0E892897B9F1A3AD
CD9C4F035F5B0D7A3D1ED6F3B85C5DB458F8337865FB9A3836E4771AF3DA8CD5
2ADD66C1C22744172B01619FDAC861A68D924B5C1D9B9452ED425AEE5E9E2004
ADBC14806BFA4FB77C5EBDD89B68C8776DB8001F8685FC95EC7EDD60506506ED
E0A9AE3EA8F6E568142F32A60818E69DD4C6456D5B2780C476AE237A24BBA6CE
F90FAF09DF3FD11EFC363DB28AE30D76E535D316ED13DF03C99757CAA452FAE4
6DCDAF8E8AD3F3A26C1458B3F69670B72A5D4C1CD5D8613BBE277F225EE9E2DF
3744C86A1FE55F26E9E78EA0B31EDC6812DC7B89C65ACE6881D3948D8789153F
66C5FCBFA4BACA9C3864176D219567FFE6A05DCE65C7B986CF466B6A832F1921
A691094CBCD9B066462F565ACA8FBFC73446083C41506869870164CF0B4DA68A
9A50C24441C25152BB1FC1C2767FC4FE67F9F68D7637DF0982785DABB8684A55
25C6D238495E3F66DA34A1D231C875BD3D30BD7F7634939B3091F3D3F3C52B14
3A26C67464E6D2292433B0837B8704947150A4E7B7D539B338A414159A3A8B16
9660C2ACADF2189757500F429FB5F327842B7C07EDDFCC655BC55C28705A1146
567890A8F857C2F54BA01FAAC221D701C67236E08C7F59B9B8B9D028D3FDB150
75E1A6071B764803D4B3C57C57A2177B48B7946D97100F6E46490A01F566CDAC
E5F7552F82A6C3CF2AE1EEF0F6378AD6C04DB0CB90CC923D312888E865AC3E76
26167E369AC65724E0E448F2F604C2CAC70727F24CB5F2B23E93A3CB703B62FA
C1AD5AC754219A606ADBFCE41476F709F0B657C203BA2954C62236FF9E4827B9
7B32E0781FC15DD3C3D5F4C026EC9AFE2D1C610195FA32E61F5D12E43E43F6E0
3940D913C8E9A6787E86813FAA0C5F1ED2BC24B77548F1E02B8B394FCC328B41
3F11A3968D9FCAC28875B34AB842FC10FD34E749426FA209CB1FB124D9546B78
12BA06DEDFA77DABEAC83CF88F4569F10675B9C43FBE7FE5588A9EA1B8DFEFDA
12D59DE5A8E2A2AFD63B328775E3B44C703C5A2B60667E25B40CE5F8CFB9AF2B
CA1DAD558C1A3C33572B623E3EDD7B4C069F185DE218554B7A51DDC1C251DD26
F745E1D1897D334FD59840C5A257D084970426D241B4AD8D402F232034B7BC9C
07E08E7514E6F02229D2B6C74ED312C72467AFD2C600BCC45DDC50B02952F16B
58AA7B006877B45C18BB82EF2B3AD0DC0EDCD1DCE78055807A3A8E822E751FF9
C188FF1D9C3BA73A8A85887A7B273A60D565A404FCA1C98BFF1C73259669E3AE
2639BE0ACE6D50AFECD543E8852CDD1A87B85850B6C8749A65CBFA19ADE38BC2
86644DB9CDC2DBDEAF1B302A3FC788C2052CA4B6D9562B4DBBB468C74DFD0C4D
3F84BB9D8E61AF39FD9DF9C73F7B9AADD45FCCA4518DD1E541D726767AB731ED
0DCDFAD9087B161ED91B5F6F487243FF7AEAB5145F85ECD9B48E5387B269907A
890BDF572C18A73DA2CF386609E9D28B9FC63F29484CD4420237BC10753C0468
29D69A7247C030375EFA5890C4887C7DB8DAF0F445E4607434EA03B5749FDC61
D95A0447B2DE460D56FBBBBF188783B4670DF8F0124E5A11891CBF164EF31284
DC4E2E778C07A6F0173EF1350FBB689E6F375A57966CB2FC89BC4486E7038C3C
3492C914860E06521EC9E8056815C2E9EC0864080FACFA56E1FDE94083558008
7C6032755751BC71C1B53BE427BDF9D42BB3CE7758594C2CD0EC24D40B6558C8
092EABEFE7976DA9DA0D9F5C9C50864C10553BF08238D3C826EB32307A623C71
EAAC6A187070025742A4E09917EBE05717196A68519537C6986B261A7082ED1C
F32A7B04B2E664659FD7F848C2A7E08950D46D10B6CAB444B00E9176A6F8D8C8
BC37C019447B14347EE3FB1EA1379A5F528E5E530C0B57ED78FE3316C90633D1
E9391ACE813D26D168AF0FBB3EF6B61EBA860A4FF992CE64C344DC67A6461971
3AC6E057FEDAF53561D04A85898C0BE02B519493C9EA96041E28EB8F78745A02
DE46B994E5768BCBD4A5C0975EB0F7D42C6FFAF8AA0B6CD15D4CA8C3B522944E
2DFC005200E0BBA7D524EE4C5B5C706FC45D40CFEC0BABA47A1B46F3BA2F3D1C
14EC30CBF83E5729F1C074D4F160B81D19DC862F93B03A24C94131987565B60A
EBB0164F6022E80A5D4CC919ACE4469031D07C171363F2A5F9E8A62DDACB0CFE
875A6D265BE53C5F68F2FE9BFCCF94EDAE549EB7F10842C75EEDD1D735DAC9E4
6662F8EFC15DF4DA4120AE6BB7424A76B49084DAA4E599705D8E537B43EF5C76
09B7B8A5E1081C8336ED86C9C754BAD8F38CE6B32DD7D6B2F939B53F1D2DE922
8F189CF282A3062907AB04F0F87638D46F21E9E471F75F992E2148A3CBF8205D
AA943FEEB1C93FC5DFCAD8E573C0B88FA6C356C7FF65E47E9A839605B90D7E73
B29419F731A02DC1DE64762B8D9BF15EA067E162017A2544698432BF3B5B666F
14C643A1A74755EA717C9E3319B70A1E36D8E39C7E54F2D451677D04ED23FBEA
1BA787CE8EF80AFC8DEE7DE0F6AA1BB8C52299A26AC7E432DABE343118EC803A
2E8739D9BD57A4D6C34058046C0F94E6978A645F50DFA3574F8F6CBFDE10D1B2
3CE858784BA2C498C9EAE9139FDF537EE06C03941A01BCAC832872DA6255336D
CE41AD258B07E47B58713C8050EC5684CEC927439C79A365E886431B5F14E723
84F0DBD0939C44BB75EBB5C01B91256A8E7CB41D962B2C9EFCD3CED39CD522EE
46978F8DF0DBC956F1600EA0FC629FA8D4CAB17E3E46C1D7EE7C8375D3F2607A
B51523CE032BADF4F9AC7621009A5ED3DF69ED36021865E416FFED1AD6BA3156
C063B3EB427BDBDBE96AE6576314356B6286BCC4772275B033D105B4FDE6651D
7B2CDA05D662F7C17BCB3AA3E17E0259196E454C37EBC496BBD615CBC32C04F7
FC4CD182B0F42E4D82C1A5336CE4EAC1D5CC3CC6AD4460033A9EAC0F7BEDD916
9DC9367203777FE3B6B8D3867549C8543ABA3428840D8FD65ADCAB2B635F8583
2F0659A1449E7B7DD39EC23D59EF06CAC1DACA015BEB35DC1B2F22FADAB6811B
1027FDA8858DD7C7F578C7746999EF271790E72ACA210225C01521D5577627FA
DFCD0013BC57D08AD85FDD27935452BCDCDCE6602A47E5D19F8D15AFDF80E14C
9A30ADF38727D4761DEE6225B8E4FD2EE4DB4180A60A73A020B70C66CDFBB473
D7990FEC1059510631938B50FF67E1A7A04096EA770AEF20239786CAF6D28610
B6E7678981E378E5FF419DD223827EB9607E2550225996D8D9DF9E6C4EF558F4
379FC8C815E64A958B699A14BC349FF6103FF2E49C3112BBC6BFBC89199DB41B
65F503C85C36FFDC16C0D83D000284A5C560908DA3537CE719760EC3F162B442
26CFC07FB9014AB3E73F0171365547C1D7F05822206B367571ED75B35C838048
1112EFB1054D02CF488F7081978D75D290EAABEB613555F3F21F8069E3E9CAEC
3753D06C5A1007B3851844C96273E4830E2A2D75BCD11F50769084DBEE4CCB9F
52680602A4860110493147AEA78F5B436CF00051F57E25398DED4EFE899985B0
AD8174513B9DE384FF4C71FC1930C18A3C23D6EB6FFADA04595E748F74817D64
AC6BBA17DB0A0B63CF7824B4A3B33897AE35119DC4AB2290459238BD122AC463
6641CB7B70F4362BB5413BFED5966D87BDAE4DC4DD7C2D048A69B3B5DAADADF6
EA8A59515A9CE085B5D9090A4B43664EF07B9320AF197ED76E34BA834F6FFC52
468905267144A32E2514668DCD99321FF5A2F97AB6E0F58EC8A1C2C81174608D
AAB31AFB1F3E8D1F7B13351DAE52127C414673A05737BBE694DBF05393CDCD4B
FE3B1C7251E88F40E7F74FDDA2F264A1CBF14A2606762318AE48D76B9E2ACAE4
F554670CCBBE8B98B33B39334BD08EB74755FD4658A19F3B3D6AFD85AD60E36F
787CF96BB58AE03B17825065184B703413C2C58180B14B0916AAD6269AB2F458
4475CC4813E0E4633AF6271B290CC349B4E85431C4524340BD024142C5698E74
DE2E5CDB8027D1B886FAD3AE2B765E20B2FE6A98E66D5A0BF5E1C9C62D4CDF61
8C5F52089783031A03FFAC58ECBAC9867D327B012676701CAB5C4E8DD402A831
C50ED1EEC8F9F83FEB7D3DEBD1F5022BE5B15E1DDB01C3718B3CD5CE39EB3E45
42B2B2612F55C701574811341374131F33506202ADB108696D59040DFF7A9211
9D781DF4228BF81915083F3AB1FFA27E49F6952A93F6EF758C9434CE320E784E
2A86ADC77EC47BA4120E242E5B11E6E7B8366B101AB903918AD3CAE975B7480E
968BB41E5E3E8C9BDA182FEDA9AA503A65A14E6F5178D1552E19C5FE9A8BD07B
78344B27136DD7DD536F23614AA86F30BE3C5CD35B781544732212B9D971D6D0
CD82A80C4DA5EE6A289C01AB88876DCCFADAB6075D2FEB463CA18E45463EA302
AFF1171FFE1FB4FCB69753A7C0BE182A197624828EFB5E368728738BD8333F7D
F079B09D8AC661673B3B9CB61FCDFEE0EE788D33453D9BCAB0696B851FCEE9CC
0D319DC81B37950DC01FF80C0FCEF8DF2E4E28B63CACBFA392DDF1BEBD107FC3
7C368AEFB1FF1E2817210978AEC49EC3F06C2DA4A2F6D44306998D744D7BD655
502125737C4464BE5F855E4D2823954B1A5BC2A9EC89E2F197B87C696057C3F1
13D5ED75409C8AF94716B57D3FFA5B02B86EB2427BA473D4E30ED5335305A0CA
A5E644AAA03F48C266DD0A3E7BE9759C30A8FDC787A2C2C0067C9FFECB843948
3BFFA7BFF942219BD8C5F88A7179E1B032E529653006874B7FCD226D9FEE3149
2A566CDC671FA96EFE85F3F70BC1526A9DCB170A4472F6A8CAE452941B86C9CD
3819485BBB43B11FDDCE402C6696039C6F5D338D9B96C8025044CF272741ABC0
9834EB3F8A11C411D34D45925A2705767394157BBFF48CB2B43C7F26DCA66DB7
B34D4E888059290583610656F2777BD66CE624BD307923A3A7813D69C9861B2A
FA030E2D081E127628AE652C7EC113739C7BCC7A66006E297A90DA94644EA426
D846FDA83928B3BE98AEB9E24D51A1BF5B8F15812EAEA3FB1DF7342C193624E4
C01C812B0C32F4F0505B8F7F5C1680C0CDDB3F7A7985263BE758C3DD0CFD9D48
7872585C17344C695FFD21AEEBFA69233ACEA3B33D968458C6DA398EE8645C5E
8B0F55D7108FC1053EA08FA1EE80D7472C38CA6E82819B13D052171827815555
A1051370EF6183758381FB3A803332AA7424CE3B4A1FD8EA792672DFE020C662
35EDB95165A3587AAAF181E986F752F2D4109F3A9BBED2D1D875725FEF6142BD
4256DD2F370D7C7B462C772554D9EBEC5D7267B0A5664222A352558DE3B4C4EB
9848BA640EBBD53CAAD4C62C4FAC75836B67292FC24E0251A7D7AE50D7C66575
EECF41418B96DEA2B90ACC520C3B2894E4FA0AD58BA77D787C4130A32EF5BF2B
2230C8A08DD2E11B813FAA04600267EE7E69CEF895084F2088463EA735A8A10E
1A6CED26C6061B2EA64470635D8DEC1B10F78019108A915E5AF62AB7BC7DB9EB
23B5794AD73EF6255643C734D692262D48A230482491A9ED85AD222A233E7354
9EC680E7BD3B5584B332484475633A4636F2E5DB8CF80BDAF4846E24BE91452D
2088038960E08DDE8DCB813B42E43A1EC101E5DAF2E7B4047F3EE07AF4B0E981
82A129BA2300F5726E905832363FCEC7A3250FCDE353FB1785CF9CB6C307F8B3
1A0DDC40D1F7410636E208C0B4EAAB248970D73A00354353B50C9B8A7B71D610
057A6BE4DD05D1C403DF04CBC47638497C33562297BAB78DB580E5467616174B
C0EBA068FDD0345B6160CDCD1A56FA3B9E5A64E9D8CBBC9C0FDCEEDB91879561
F1CC6216CE27F7B59292E7ED2512E4B1078778F1B97AEF65F238B3AED4BC5892
A5296CABB68099AC95FBF83D13A7856D01915A188A059B81D5E11E1F83C02553
8AA655E1451610570FA38CCA175C6B403D4867AD1B7F6C4D3AAD065C67C8C31D
27BB4090DC306C60835972918D3F13FE5A96EC929B7BFC27F46CE6F328EC47A8
49BBA0FE98B10F420209A2ED5CD0A5EE25BB332254770FD38F67BE9CF2AFC383
4D41CD9CD7153DC7E4B034607A3587873CACC022DF956817D72B3F6DA9B3FA0D
D1E2E9A775D42A7D2B7664F15B7ADA8474F5B7EFFE464AEB5D34AC447C6621A3
1C9A710AF7E438A579EBA81C04BB50A598A21E06C93C362166D32D9E935D9CBE
05FA13B3B17C11463A393EF2477891BAF267A18BA257798F50442EBB6AF8CF01
D7FCEC013B359983AEF863A24C42A0D8991FCA28CBC16CD4D88415917464180D
1613876CD31E8CD4507F1219D3F303078EC1465862DE48C63FCD3A3B7FB6AAC8
FD08831A1D11D3D9A1EAF48FBA458E6ED054BE1E9D82F13F8D93E77CA87A435E
02F587664FCF245203C8A0DDE315CC13D03BB70C021345BF7B3EBCB99410DFA4
DC35BDD2F4A4D6FC58CC629E1C584264501E4852E7B2B7F08DBCCFEDEB6907D6
BEAB35AF436AFC2789C663C674D5C51BDE5936DA8E02F14EB4F750587B83C1C2
641B2177B31A04850B760661CAC76FE5802A9374EB220A8AA92AC21AD6E71A3E
C106A45F302ECFB9B5F1F97238B259343F5BCF512B9B8A389761A92AD333D850
ACD6D8911E2D079B12B41CEBA03215D5F0C2B3908F78D679DF995AEAD4C770E5
8C0E5862E761798499FF9F2052E796104F7F3218DC2BE8D6D7AF229CCBED2953
7240B713B70910BD37D42BE4B628B06DCF94E0CFB934F99BCB5CB20449910612
83A6B25520666D1659DDE8EE66FCFA9E8CB36F8A72232A1719971DE9DFAD70B8
02F804256E1FAE404A541C545E0F9714BDB0695D0E846FAE8859F8E610A7258C
9E2E7D901FE7F4233FF7ADBC13A7D4A33CE444330E31388A561B35CAAA3F198F
42072506208DFD9BE86368C178DD2CE1DA11CFB665D78BF58AEC92BE740DDBD4
21C2020298C7881791ED3337C01FD47CA6E585ADE269DC2FCD97FE0AC6F3AA17
4498C5E00F86DB42BC62DBB919D87EC9C60CC512C5A8ADB9E274BC74E1C6A23F
5AA8F97D689DFA083FCA4AB46C3113014BB84D22C8D8E768D61968797E80A6A8
19798217B2C665E89B2FBDA6F1A91C4A870843177AD6272D8EE0E4287069F1CE
505E0C36E22D07A42EE34815C26BA7C7EF8E00825E76B86D450A53673F3ECAB1
28746FE35DEBE6C52F24E9A5A8B0E068B33957DD28E7A6C3B71BA0D16FF764CA
D0554CBCC0C1D84BB0443FA107222178AC6CCCABF9D079216874DAABACEDC990
1E821A9504A477B78319CA3BA1F74FE697FE7CC14651C1E60D9450BD8AB29F9E
B68298CD950708927E21CD6B98397C9A68C2458341FFBBE3EC196D2ECFC3B2A5
BEF3FECCDB1EC277C3E7FD8A1308D57959924ED2B28D0FC25919BCBBFDAB43FF
847A0F2DB4089E9130E211EFFB0E5B2F86D899CFB0D78196B11CFB4F94286B9F
06BFBE7ADA0BF7E490CCC79C0FC58F7AD3C657E7D821FFBECE3461BA937EE049
BC2E26077B5479000E54D3C8DD0C47A3BD022B5AB50B2AA0F97CDB6BA9B9A584
0B42F68B69C793C42732C6EE4A114860F98A79387CEC9A79C664A29461D7709D
621058C7DA476BBEC3D2EED28E503B9FDC8700FE052C97386F1F2E8FF905DC9C
F9A49B79640E80290FFB63D80B3D8B3A3B51CBCDB3F5D82437501C7ABF24846D
97B9225A52FAEE6BE83961231CDBECF5C0E7EB130989A90625D979259FEC912B
7332E4AFD08D9D089DC0DA10E6E6DBAF122BB37A2458DF81F81234F6FAE101E3
B199D313F284A19E8BBA334E479AAB6D625521F64BF4268DB66453F436B84541
E4D9ECCBB6A02C5D2705614EA90E69D331BD9DE8CB1C2F35BEAD208E00713D1D
4810E0F4DC846149935B6D81CA3B6327121A1F8AA363572781F3A9854E39C249
01621E1792B7445EA16D369D8027EE931C3AD7A2A2513CF837654AB6CFBC1E3D
0351EC56D356BB39BF332116CF4F98DEFBE22482DF0B9E7BC03CDEBBEAD56396
4EDDB590CBE9A37170F0C02A9C98A40AB65C4FF4EBA7BD1F560E5CD9D5A4FC44
C25C0CE7E129978DD6A535861212D072023C9B69D9A3F590A8668C3FE29EF263
921A7BAC65AF3420BCB87E4C12948C2158FCA02D28993F6E1ACFF8BB118DFA30
36E1CB4B76E20B9BFD2352195B95BF24857F156547D19CBF4900A8EE11139FCC
200D33D9FE615EBE572234D7275F749AC656A05EA1E5C04D93CE0F967AF094A8
3CC40730CFB259E34814FB27C1CA397095009EA0595FE8829564699D293CF713
5E09181F9C0906FF4EF4B76AB7BF41CDB04BBACEB6038CB1C6B66BFEFB667819
FAAE4B4C20ECC0BC6FE888437EF31FB0564B06834635972C2F2C4A18BA8C5E64
A1D70CE3B6006C93C5691DD261DCBD0332BEFDEA95DE425C8E5FF2B5E52B2682
16FB8CFC4486D802D0FDFA747EE9A891ABC4C4BD10AFD09722B04DBF11E296B5
BAAF6510D6FCB6625D99C7C4F7F34C81B005786DC8D6FF33691F0BC214C5BEC6
38F8E2B56B42E69D6906C958EA29FC21E6620686DB87A8C4A584D84DF9A0A055
B22A095B398E48F996B427C9661445FD7E0F586CBF2D5CD80C3943CE5765868E
FB85B5C68906CBDD6B0260386E1B845475CD6445C679986DFBCE9C661F0A5674
68B045A40B1D57A6B25788086D9F450038F6A958A62D0BA417D0338D62709447
65600065FFFE01BE84390059D9F5E37DBB6D1EFF5A1543CC5BC8ED20684DB50A
4BB4B03E56B0669B94D063F18F7C2B8810D01FE2F79CAF0B2968637A955C124C
C3BC852C4BF73038C72BFE189DF9B6602490306FB24438368F504F8CE629251E
171015D8B7C2B7126F60178653E3D8656F837E03B2AEEC14380DC9A4ACE150B3
B4F82ECD9333758C96F0DE8C71A6F932F73B3B16E76269855A9E1166CA53A4A2
BA1CDDDE47B101237C2C01F5FFA8D52FCB5EA17DD335494ADD84354F11372129
C973CFACD5827DBB47937B01B8CF113998B93EDB032CFD2D5F1BB4C237AFEA2C
803DB4A634F3FF7824578B1FCBE31D846EF5C274374672AEDB1AEB6202516ABB
A71A38376EDEFDB8582AB5DB07D2D1D29CE50B860DB9833B0D91A874F95BFE0D
811E17F13516B946C122B4BE3E7E388A4829D2571832A8565F2D51D646823E47
BD7C4E6AB597011DEAE47055D06D091A3F59A33EA18147F0B4233147A3551370
3446EE21510D3F40C9FBBA42F896E69FD7B2B50FD38F418B6EA26E21537F2FC3
F10E012049F73D992331BE151EB1469CF77811CE5D6C863C0BE0436CA17CFA13
7D2AC560A875A03F24EC8B395EF63D569BB78545058A1D4832056A79E6EBE983
63FCAF696D4AA7EA1482E2685E218B8B7EB2D5A555F6D7ECDD1EF29D3C5AADFB
492442BA68AA53D078F11D63226157E4077E5D4BBFBC83AD09205FF6871CACBC
DBA04718BF9826146A6BBE2689E355E0F348446FE08E56C4175DA042430C5AF9
26AFD4FD6A1C41C80C953F71FA650A763662C1EA291BF0650B7FF0B372AC92D6
93D287C2B543AF13AAEB0290CA89E069FC09CF1153C1E32E3D5BEFDBE6A4F71E
05958C4244D872E6A6958ACD344C593EF86E7BD86E45842BDDA5B9ABA7F5EB2E
3247F7DDDDDD6F5C6815B26F4C7B49358A2D3FBEE86B3BD7ABED1B133A2AD4D0
193D09B417B74C43AFD9DB0559EBCE9267DB49118B665838BAB767F4425D1307
3715C5A598E993A4C95786EB0CE6B4BCADAC29417C5A1931BF7F8E50BD134FDA
4AA3D4A1C762E3DEA0DB8DF048149E2C040AA6375BC8ED054AD8CF18B43E6FAC
7D0D6435CC39AFA4BBC39410FFAB5941273A0659C382704F04C62641A33D3148
16902225E47261964C72146ECE94A807B36E10F2B9677D95116F7C3A07B4C9CD
9B235EFA088342939B6BFD4DA79768DEBA493DE29C3BA721D66E4CF114B5C2CD
2E63CFEB3E7891FE3FAF9EEA94C759891BF36098EA5CF5A8EFCB80C8EB304D91
8CF16113179F7A0705743EA6B2C3AFCC520C3B28A668989FA64E782EF8345AAA
C409CC842E72367650151304A815434F273ADD62891E149DB4438932C670FF47
03235744872428F7F2B63BE863AC6A7276D0F2A745C441F8E37E713FDFB10EE9
35A8DDD7B2BE82F0B38CA5151322D7BFFE82426A1EB69FAEB47E4C81BA6C9E6F
7D26BF177197F891AA9D54AE43911AC70D71F3C35B1048AE4E212D43D8C5FCBA
5AE64C15A992BD7256F949167128A107C9E8221686BE930FE4EB724996FE39DC
189C9B35109B15F03E0F543A77E815F47A4CACA13B3981C3659C7478F7CED268
AC0C6098E2BD9DC8BA13915C9660FB43E356036002CA4754B330DB9A6A39DB65
E5C959A8451DA69398EB672709D4D67CBBD198A8DD2F48A1E8448D8E74B8A040
BBEFA048AA5DC34C546E5E430C1DFC1531A14F4EFEB687442A650AD0E1B47492
1C53319833D4CF30065000D785414258CF4FE3DE3E6C8633C72852D478040427
884B44DB0C91F2C467E638A66565148F3FC891B25F7D4DBB722D4F06A5E71753
674875485F727F0E3C6A00D5DC60FBBEFE731A91620DE6176C08F76B05D74647
A9CD1C4F12145E0DC758DF0841467E187ECF9A3076C6EB5A6BE01B51DC3AC00A
266863827B7FE0F8D5EE20DE1B80A4E6AC225ED7AB77C3AF347C60DDD52807BC
695DC0DFB1A20F32D6717350B697B4A13DA148987ED9CE1F3FA56499663C88B6
04B2084E52CA04B378617C67766E3F2B0DED55250BA07A7A0350B32B1C316C19
27C4FD0458AE7E1DC42399BE9F705CCE7765D9049DDA1513ACE65FFC7A7E0FC9
2C60C99112A235E9A285F724D2A690B3E9F6D24F2C44C6B493524FB231A054D2
1583F7E7CCAC18B9E439C08FEA101A7A76B0988F2D0537C0D4E6AF993D522D6F
9E2546143D327E48E8FFCDA9665EB15250F08E80161784CDE264F255066F49B3
AF03EC2093384FC93F4E7B3BEB3219E2556CA9F9FC63E828E9AA46BFB040E3BC
44E7541FE7D5C357944BE859A8F3F103
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: TeX-feymr10
%!PS-AdobeFont-1.0: TeX-feymr10 001.001
%%Title: TeX-feymr10
%%CreationDate: Sat Jan 5 18:49:54 2002
%%Creator: Thomas Schröder
%%DocumentSuppliedResources: font TeX-feymr10
% converted after April 2001
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /TeX-feymr10 def
/FontBBox [-178 -195 823 877 ]readonly def
/PaintType 0 def
/FontInfo 12 dict dup begin
/version (001.001) readonly def
/Notice (converted after April 2001) readonly def
/FullName (TeX feymr10 Regular) readonly def
/FamilyName (TeX feymr10) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
/em 1000 def
/ascent 800 def
/descent 200 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 101 /e put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3166449D69AB0542CB99558019EE
97CFE9FA87FAC14B55E860B5663A3D528CD3784FC9647A2EB72CF1AF4E31964A
3073722CB69FA5370CC5D9CDBF105662CA6188C1B3BFA7658F71EA5765A0D152
E60FD5E1DE3B99CE70C03D8CB4F775B5B17CE9573F5046E61444C0DAFD894CFE
E17604820BBE5A8FA11A10565933C0A8320DC5D116C780706E315C54E72426DD
AF1E6786D883AD182ED327CBB03C39C1A2602471C39296B7681215EC4F0E0E0B
264FBAD453DD3B112065828DC04E265255F9FB51F5EEC233C6A752ECA0246E0A
A2BA69049BBF94E6C8F510D29A7735AE4D122DCCA7B22929270D51C3F1E68174
E38AC54D6418690C765264C7897AD12A84B2C5269A6BFBABF05C20A37C94D927
81FD24D7817897529ACEDD9B062949D02FB9B0E1B2D0BF765675BA16EBFC1C7C
DC437BEE4D9FAC437C6B9E5B0C00111499A90E1BD29C52263829FFEF1946619B
1C81623A436D2FBD670D126855C400F38CE0C88122C60EA0D331AA9636B27218
0CC9B0EDE940FFB5EBCF83EDB330F8E83C7166452669E04F2E95A7718ADBDA8F
F99C2DC815F7ED17655111692621430D077DE661F297A8B6A33FECC10B3892A2
4F8E139F3E446CC7D7F5D64E4DBEFDAD72AECAE4D64289A3E2BE0212CF4A91BF
04F60B14E7522795440054CCBC40C49886656B6918198778A498EDBE40AF4536
7F96E77E40A9D65B1D5447D2596B382447AB5549A11BD5B765F9133E1C5C3071
32075009D2AC8147BC53B4C07B14D548E0F914E600CBF320E1639435733D7563
0053CC74AE3E7F5B9741E8CCB3DAFC411B5F846FC583B7771A7088B1C9B9613B
86FBCA1EE9E8263406C1894EE246BE87CDCAD2BA7ACB7030E45B0866062055D9
EBF7F562FAB6190196A7B8AA1B61F407B2BE0F537129E27376C8DDC7C6416358
384B2A676AB3228144586258F2B82A5BD9AE9E5442462DA626088BAB0C29E8A8
0EC75BF6E5E897761B5D095E2A8EDBF2CA742F3BF155B4DF28110FB8B7FB9A6E
9229F9D0B47376BE7AE5CE6A6AD32F50B62023CB32E8E0CBCDE2110AD8251854
5F8934CDC91E522248E019A6DCA06A0C2D005D541C6ADFF72812F474050C709A
5ED08B5F83DA1FD76037AFF77515188E13073B30F9A49A970613659071E0A130
5A4DD21C42ADFC1DF8CEE802CFAB2A75B7460E9F46DAA8CE31D5F287D3163B98
5966C073653074E89114B1B8A097A43E58DC5E49AC1F70F04A922FF9955F9FA7
20A6FCB10A2670BB3F44D959FC897BA487147A0FFDDFD368EB1A41F4CCCB619B
A362730B373EAC754EF5CE2692576DE100E10402670F41FD38F11A1BB43B7F42
B4BD7BB5F4322C4A9D04BBE445358F4B59B1A5C85FAE03B06C950485E5B304E8
BDA4BB926C21E17B3EC2D4DBC9353CFB90DBC6976B566C310DC801A28907CED3
2126B72E26578DF77022D969D09E111BC1C489E88E7B0315E926B0376B085BB5
3CEAF925AEF208D454C49A6B239924FA18001BD1A7D3EA4E7904830A6A948A79
F50CA56EA772D92627A8380A37F3C30845647AB612D5F6B5CB916996A0EE6697
BC62B6266F4314BAAD796EF51EB965F7C30C001F16442E0CB7A6984B78AEFC46
7D6938EFB347E3287600228311BA24326714E77F1932B80334F933C2926274FA
21BAAD0605BBC9A01BDAD6D5ABB885A4E651B8DFAB60487319C1C386CE6A17CF
CE6F1E639526FE52759F1C88A2B52EED4B93C0AEFE101EEEE8C108F389F9D1E3
205904304DCD3F06198594F313F1BFF10CE7F410ABFE3BD5F47CC3D7DB91E197
AE2EFFB9015482D6C79EE33D31EBC91E7797ADADAB7F682F72DFB7B0B0B6AE27
CDA9C0538E1246167FDF86008881E9F917291B498DFD93885C05A1AC6F3A7C11
57128C3D6CA767C80C7AD866074879C24CC063341E85B910ABD13E4BBC7A48B1
53E24D05C43CAC6F3337ED734614EA91EBA620346F23693C7FAA9F488FEEF7DB
E525E547787CCBE1B9824B1CF0B92007A8884194388AE40560BE9D79CD4DE9CB
96359F98E85F2A49F75B7B66C6444DB0ADF62964CF1A47855F8C4688F95EE5A4
50C96A072FB8069A59B20CD2FC703F2F90D3AD1BAA56A93E3D2E2F33C6E2A7AD
258451B1411DD8DBF07CA0246640732F5ABE58B44AC29D9EACBB671334A141D5
FF7CB44C5D629EF4C3E479B76B6A11B47AE63003DE140FB162E88854291E52CD
218D3E70E007E24FEDE321E5814C501169EE40269A4130721A95CB23F48C32AE
DD7B0B4F6320A76DA8A605679B0863982D6B3D4903CD8184B2B829CE9FCBF77D
6CC854455B66AA88CA78910178F748BAD7A4F32521BA7CACB879CFC719BFE2BC
13CF49FDAEE217C53CE31DAB6FDCF81ECAA2E72A2CF15BD84D275BE55251F82D
C8A19F36545C0BDA65AE10E063F5E05A8DB056F7A41D4DB694C98E4246E3B38E
230D155F7ED10F13F00679BCDF5604F46E28FD15B81B55471B8262F8A2F72AF4
E5387E41E401274B350EEFA6C4F03A1E6E4A6B16E528088EA3C7E0299E38DF46
D345559937225879790AF29198B2FDEFE6FC99C66C69959F3FF98F67C07CE90D
F2993F8732E88A77355D4A186BBC8C299C85DB3CFE829BF9F22AA8D3BD63F0D9
CAC57A7CBE25193B289D8A9A614DA9202F69ABA8FFB96F4281592634A7FC4A21
456B69BF77848502657B7B934003418D2BC937720E67D4890E00A199636842D3
DB74B2F004A6E3F3EA6972D62C62E5D4F096AEB2F194E77B656822D9CFF41D2A
7C14F16D7F07E90306AC87B528175244B92D6C10024132A3A1FC2FE78F688904
3568D0BD312C635BF2C024B53B5624F8B17BEEEB424E619CBE804E24E6EE1BE7
3F159A72AB7ACE1C0347278BC542E4525E503DAB0127B4DB6D8538634CC60BB6
7851F14F0753BA3838ABD61E83ECC39C427E62AD4293F672F8E7C2A49B534F60
E877F23EF5EE0E849AEC5F5E12463F6F05D059854D701CE420D546867EE7E6C8
7CD2553F33682A0BF985671C6433700CA8FFB638E7C7BAE78BDFEFAD10DC5846
AFF08F08956041F2912B4D70FD34495C96D3F9B091293B9C738CF5C9563277EC
3C6863C4A69B09E4DDD525D77FD06C322DAE13FCD48A4EA7B1B6C8F0256FC16A
3B47A4BF0DA1C49EF53974B4BF01C9BF194CE7EEC2C3AFA9E4CECD8C4029CC6F
377E4269806EB0FB78AA812F1513C2CEFB8F50CD18615EBAC10976BD12CBC1CE
8CCAD0333D455C3ED1518FD7F80539AE63A5045D34B982ABB471ED8EB18B50D3
1A150C82182B6C31CC9B161A87361A6D96B63CF0D97A286090DA8CB72991B175
EF3D690C64D9CB5EDDFF5B00B7C179825A1794CA054B6F7A8CAF03DFD7E62F10
CE5BB34BB02E50AA4DD4FD704F147DE3DCEBD3B1DEBAF3483E01CA3076EB19A5
FA2A8815CD360568A9A05176CF4111CB27C54BC8B4B991853982BB7307283D8B
93E5A2D6DF853B6E17BEF7C06A182456EB73D4A1B77FD58A853B07B04ACE12EE
D04046A4E977A39963B144EAB63C7D27F2EE65F677B9892C999BC81B3BBDA70B
E7FFF8E673275F9B84D39E641BA990B9AD160BB73CC391B6C36A7C1D68438243
1606D2298D58EA3879D2CAE2D285011E229372F7FA98F55556F0C4007621168A
A3C1F9A9DE81DA70AB287ABC70C4BAE94321D94FAD2DC3754CA39F689C8221E1
6E7E57EA41F552EF612080D82122D5733CC48978F6BC62E40728DCB3134F4536
C33E222D0E79486EBF9A506F92CCE773BBDF3A764B3793E96393DB8EF1FF0FA1
F3801274B7B982FC53258A752D43261486A2A94B321D90C9393EECE5B3CBFAAB
D0BBA6E49ED462B20AFB384AC2D3E290BC8FE7805D5C0B0D37F04586BDC8C812
686C653A47B40A803819C86FB0C8EF10AA1344350972910363FC0E3DB49A5D75
BDBED15C823E1E870E2F0EFB93A856F3A63E28CB7ECBF17E444B271FD92157C5
8727745CE16AA9376735A8B02F2CB426BB91CCC365CEE49AE5C9938B08DB12B1
EEE55B954D3694FA0AEC0836883D86F6EA4E10ACAFB7CE5D16F858F6DFF1246F
B2135837B67DFE58003AF012885480947A19B0F90980366EC245AE6D8D33FD30
E080775680F701952B697FC8FC07A014B78DEC48017E46AD78EF6EE80BF81760
B2ADCBB63D91D25DCFC77F2B8867BC0092BD9DF8EDD0F7DEDF2458F1F938D05D
DD4C3A7D4B3008EE86F787EACD7C687B6BB09D362E814AFBC75209C457A19F37
C9780469DCD173C5E5BB7C88F4A8FF1E664AD95E1F5D005B4F15416A320366E4
41E5CE5C8A53B64D290AC210490EF404D08C7C93531FF8CFB841AFF5A0E5A8DE
1E25EB0D03018A76C701E737D941569CE252FF92E3C0A05798F47B75B501B03C
D92B56739CF0D76A13E06283CB4F55177E3D6B28C265954DE0EC80A4CDFD91AC
A2FEE87917A4C63BCBDB24928F99D4836A62D3793411FFAA4CC7B12C934350E8
0C241E5C83E1BF8BCE56FFB67F9C7970CD00D64E7CF92F0A9CB5E672852960AE
8959AE74D4DE18D69B095F9F83C2D98F5D6D14B13E76E4686B85A3B606479B6D
F3B52D950EBCFE01639F6B0D9C205C947D60F2F0540D0E8B1B78AF3C5376F94E
D5769B92FC21082A872ADC4BE261FE71F0EA2422B17EF9C0338F63F4D4BA4AC9
D6C76169A46B500885E2CFB8671C053163F186C242F539453A72E3CD4F416A30
6C7A154B28FD021A13A11C78D113E65FAE2A6602D55510502603AD648CA7C698
E61A5B8F3689308EF934594FC5EFFDB86BED8324C690350CB92005EA3EBBB9CF
83EF65EA37BB27D684B89F18AB93968DBB6D0BD835EDDBF6F9425AE707A9E732
7418E39DC60A6EB89299E14D62AEA38D7E1ED70829196DB28D4906BF73574AB4
5DCF1FD068BE2B5B597021EC43C0396D5F172A723556BD8937D6800A6CAA33F6
A061415D49DA0ECE5C1959D9AA8513D8E616BEF8C9411F93E9FBCB6D2637AEDB
B0E719D54E5840E6F71109A5BFB26839255C305080216C0FD2477BA7613C8198
8EB16ECFFBB6D745422204786A17705DABE8FC123005E476FECEBE1C3E240E66
9EC0C64922C42D88A87D2D9766DB3E6273110B2F9281D80F004D184E9484EF54
222058917A0DFF5AEDC9213979C8716488573FC308948F839BFADCA37353F9F9
C7FC6FF049F4DD9DBD476228E880E779C7122C3823385F85F86DA752C3E01A8F
8A103A854A8545E4109BE8AD304A60B54F124EF2A6AD3E5E7EBA6AE533E22954
261017699960A1E27D714C2E2D370FB1449ED84B4169EC1057AC8AE70B3962A8
2A16D2F5EC8818734A52C2211FFFB785AC27000B218464AAD820DCAAB31DBD3C
2F0ABE99FB90E8A188E9E95E3320B650E814FA72E425FC6D0B5E245330843CC3
DB6AB767C90E8EDD41E12FA1973E681A7180A3917CACA630FB0BB7A62FAAF292
EE1F836E10730B4797B72E335F6C291A3BFD7F71EE335C3A6233735DB2A379D7
4D1CC655A657023C0B72C819D778F70D9654BDF7C3DD44B733468029F6DBC37E
1D00A80D8D9E7DB37593FE4C2AF5E00949062085BDB51E9448A41DB88FC7401F
725593E1E2281E1F880F829778EEE4197E71F8E59420EAE7964C98BDA67D7224
51A7781696EE91A0E6138EEA37EEA66A29A778841BAED8A196FA2C9DC4DE9BD6
4915CDF114F441422F0FE6F6DFC899C05D171FC0E370C9D27025B9407AFBA04C
19CBF35CBA1E6328BEB3DC8BF3F27EADDDB063543BBE32195A9AB39C791A053B
9D6B918B1E101C98DA8A4EB26FB47BCACE2863C768381DF68C4C8033BB3BBEF5
E93514207A5AA561F78B3F9C70C691B40F4ED7449650276BAF866B77FC16D797
B91398B1797FC8A8CB148D5C234F59A7E4E6F661431598B68DBA780DC8B34A19
AF4EA912CB694B86D5C7672E57EC16F21F87944F7585ACC0847A31E2777D0068
69A9C658B4729A5A2DB08E093EDFF069067F02F93C4495F9F171AB52A1A5BF64
C71D97FA60A71E3E705E51531028D02B1AD3E8E032AC8E599DE4DA19227401AC
F79915BC3230D5D90FA77C29DB133FB7B4ED7B0D7BDD3B018BAB38126626BE19
57BA72362A12E23AB2C4F2C20CE67ADBB39FCC59111A7A0A61ABB82CE1711D0C
193F0D086B49494669F901CA6013B32E0160B72239DB3C2E229535BEF14DD08C
A8E603EF0B6A5D6FD9CE8EB6DEA304E959E394802B82E7C4BC31E75E1CF077A0
6F520EC408B4237E2C5D41DB0B4395D891BCFD008BDE2F5936C9B7D3D7F7F9D9
06FD7B552B784F7814AE16D8351899FC23B6772BB69B5BFB57D118FFFF07511E
8C6E994823E198A79376EF3E24C11B6FA1F6DEA71942741038EB332490625EED
2F92A7EAA26C64B36C180E45C35457FEEF8039855872511C30AE0BD536024FEF
2E0F40D53EB1845EF5EA9E10FD5C63E01D074E58590F0C8112BC26F1969F9C24
6A4027E715AA573228315FBE916274AE6D17F25A21DD9629263D6D83E1C5E6F0
D0A42464C558BDB4FDBF9201F57C808EDE384E12A8235EC30E90CCA8AA3C36CC
C09C6A6D74F9A30B50CF7D4ADDBFC902F6A006AACD90582B29ABAC673E1C6D67
3A70B27EEDD61AD0C422B387CE691F8ED807C137C5841779A540211331282F9C
2997E5A81A6BE710AEC12B347D9238B584F24C63DD4A34D620644424F315D15C
C710ED000B0D28DDB19A4D99AC1E0E5589B7A6F7B2C86F2F7FA4CB217F201436
991656F10224C5AA8341E6658ACFBCD76E73AFAB6E5B0FC14CB8AA60A1E845E7
5AAE0C73DD9F872EE3D28075C27156BB8D803A64E4126866360A54D16EFA11DB
13E7E52C0693982399545875D6ACAEA88BA0A3474783CCEF9A4B65EE64958091
8951AC0C438C2B0413761A253A43579B0B640FDD1497DE8C21A0856E475510E5
142E3842906AA80914CDE9402E4B37D2A6E53BD127D2D3AD5149AEB5ECD8CE0F
A7609D35FB71A5E542B436D5C7D71A4CB29EE71D11E0C2769C4FE6E728D24E56
A0169D3676D3B731B35E37C70B8015A53A9C15AF4F78D0FBDCE03FDD2C3D52C7
5D852346EA02BAE2FD29487245DE75FBAB597E741336005E4A549429A51271D6
5CBCFF634640DB0D056DD5EC6D5A7DB00E37F666CA703105ECCDBC670A47CDB7
48FE6D422825339A8CA5AAB0B1235F8D8BD2F5D6A3515FEFD32540521E20DA01
A0141AA1F8B223BC02156AE4E096FED912A6C33DF4E150052091700123102EAC
E6AE38599BA0A0CB94E1099475C28A540D3EBC4EEB382E906F6B4A1CE6940F16
77D474945B0DFDB54731F85B138577CCA34AD3BF8B7677378DCCF3999EEC8E5B
5BE10FE19D636B006E7D7290A3DDAE1DCFD312C2726B08676AC7B03A9E5BF580
BBD88C779EF23B655F9BBBC31F4D54BCD94E4D1FB85ED55AC4475DE0DF309494
49CF2BC0A9C60D7DE24DA0C0AB8F50953F4DCE4B2FF8E60DFF1EA75F4BAD4B11
3C735758AE622B81CEB5A8F845B2547C6A43812D4ECF9C9E042425176A20004C
2C4A815A38E237DA4ACD903D32B7F9844B2E42AA7F5A5008C4CFBB51F2A20C24
C4EA6D69F6CC5E79CC490EBDB8A9D4AF6103A6CE3906449DCD35B922EFBDE023
3D5ADD67F4F5BCF49D61F67FB313A8E2F92D29A0B15C6792D299B9510A5DFA30
56DF9000191FA35C2999FDD7132B3EB5E95020B032C8EE2BB4543DAAEA0DEC97
3133A99719D7ADBB2678384749B7E1ED994548266CF51E5DA1E7D78283F24197
0EB74E258585FACA9CC47BAFA7AE9E116FC4A042404FDEFC6D20C8510CDE6796
BF13356BC9A3EDF5DF353F6CB8D21EDF5EB9B50AD6BE2804F23B1727C373DC13
E4B7B7F5F1A0333C4BA7842F4E9F3D067DA11B64EC3D1EA2AFD82DAF0087AD2E
0876AFC12C5777A2743F938C01847747CC7525DE041402CBAA4C45F273A75DE8
528FD3BC80427F9E3AA1EAB57E9E2F625484D388DBA06AA511B556E660B7C58C
232E6191D34214218E9C35838F7532579EF7430063A099A176DA59B024B2CE56
FAD58E3E9AB280F49EFE8B13EB67D91B6BF3BBA8BD16CB5EE0B3FB9BEF37503A
F4114D06702D250FD78E921D8ABD0BA3647C711CB3FF3CB1EAB2DD7137A9CA46
4E545382727CD0F1D75102D7BEB5737B3D3009136C2DD9950F1DEC8859F21328
330224F695949BFE58241CABC4D378ED409FBA824D76C2EB94A55575E0B44B99
5F05EC9CCDC503CEA55FA4032192CEB9D7160B024084A468FCE4AB2F876A1B22
2FCE1702E00029F29A50C636A6C59226685F2B7F885CE26FF2D2836BD9C03367
13420C1A8BCFCB324EA9D26744B77B4BD9099611FC2209A53321B737E518950C
751B2F929CFD04EC824A2439E9BE1C56A3A02420C2B86C24BB936C7752DFE88B
A682B788BF0113BC92352E873AFFFC279F2F3ED949F3ECEED537F134E3C8A2C0
13BE80DE36288A86E93DB390E241AC83B926EAE86FFDF45E037CC3794DDFF403
DC64962FAF85B9714D399C221E36A633C0BB26EE127EDE93B54A6C34C1B1F322
7503847E9CA4622FF6CEB1E9828DABB65D66D658349E0404BD3E7871E3952C91
81DA87EC0F40B008BBE4253D7E8E7EF16C916674FCC41131B68BA2A9FDB59917
8206CB366282C90FC91B59C8A0FBBB26408CD0110EA1587A07E4FB09130E5B0B
852C429A88461C2C51F924B919B8C4F98BA8BF058EACE6ED42C208AAC866A1CC
DB9FBF4227F1CCD9FFAF49713AE4B85EC34FFD123CC49EA507D36DD69F0072CF
B01CCFDD0BDEB72A427A0485F0FEC84B315C854A341951CD338D8B4E7A77E3B7
41ADBA8C621DE2AEB91E65A0D3E1BDEBD508A0CB08F4C4E57D8481592C817520
4B6BCB5196CBA074
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: LMRoman12-Bold
%!PS-AdobeFont-1.0: LMRoman12-Bold 2.004
%%CreationDate: 7th October 2009
% Generated by MetaType1 (a MetaPost-based engine)
% Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).
% Supported by CSTUG, DANTE eV, GUST, GUTenberg, NTG, and TUG.
% METATYPE1/Type 1 version by B. Jackowski & J. M. Nowacki
% from GUST (http://www.gust.org.pl).
% This work is released under the GUST Font License.
% For the most recent version of this license see
% This work has the LPPL maintenance status `maintained'.
% The Current Maintainer of this work is Bogus\l{}aw Jackowski and Janusz M. Nowacki.
% This work consists of the files listed in the MANIFEST-Latin-Modern.txt file.
% ADL: 806 194 0
%%EndComments
FontDirectory/LMRoman12-Bold known{/LMRoman12-Bold findfont dup/UniqueID known{dup
/UniqueID get 0 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
17 dict begin
/FontInfo 9 dict dup begin
/version(2.004)readonly def
/Notice(Copyright 2003--2009 by B. Jackowski and J.M. Nowacki (on behalf of TeX USERS GROUPS).)readonly def
/FullName(LMRoman12-Bold)readonly def
/FamilyName(LMRoman12)readonly def
/Weight(Bold)readonly def
/isFixedPitch false def
/ItalicAngle 0 def
/UnderlinePosition -175 def
/UnderlineThickness 66 def
end readonly def
/FontName /LMRoman12-Bold def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
/PaintType 0 def
/FontType 1 def
/StrokeWidth 0 def
/FontMatrix[0.001 0 0 0.001 0 0]readonly def
%/UniqueID 0 def
/FontBBox{-476 -289 1577 1137}readonly def
currentdict end
currentfile eexec
D9D66F633B846A97B686A97E45A3D0AA0525392EECAC163E584A9104D99AD0BC
1B1844A0E222653FA481B8809B26A46F4C483A5D7E95816EA6582584156CFEDE
B994ADCFF4645140E3617E4D7E1B0E4541CB9F562E55829B4DD880AABE2229E9
4A9FA259A734D29BBA91BA1E2055CBEA4339BCBFF98D32CEFF11F296225CAABA
DCA10577A5D431B714726C1278D8101ABD1BD8D0BD0174FFF9148F8C61C241D9
2AD360A28616CB4A0670C1BF10591DF32391231FD9ADF097C47DF0B87CBECE1B
8126447EAE1564C1C1A82FEFB61C5F15ADB2502457074DCEE095549FD9D8BC58
757F3BFADBB5865A9F4C6B4E37AE0A3790E79B4A3CC477140D5BFF652B59E400
223C83D4E08A2406824F883A52C6DA76EFD957D5DAB0EB5CB1111B83A6ED56D8
E02845701BFCB7E954FF5CD309C679025FF0FE24F12514DF0FEF86EC20AF9326
7CF08461753843F4E3AC3C486D6AE78F03909D8DFE1BCD5645596A486C156CF9
D549995066A7AE7B22C519ECE348BF3529C95E2D1ECB832C24FCF54C84718CED
6164AD8035CD1E938B7726CB36CBBF34DEC977D42954E88925EC9033EE14BAC6
F9D6B54E85C0EA39EF3A661EE4B82D6F8D529D44C855B642DEE4AD670824A86F
06287DE387927F86F092989624FF57E382429F14903B387E9AB9787CDAA4EB3B
06F3473A63B31C176C03F8C931A5B7B5C47CDFE2068072EF520D355530600D28
04594D8EA0FF6D130231BB08227B4CAD7657791F89549F92C7C0D07E12044BF3
D9EB41E97D064DC781C5E5D76F5F54BEAEB123C53D41663B0C2594354F39D3D5
A3E1397FD2E40D5E6153592AA3F4EDA899BCA86F2935FBC0EB8D826714DB45A3
932C9138908E429806A32A74C464169625F10438F7087BF286C089EA3C6866AD
F44B147B76D3F2968E9704C8AF9F8223DC14873AD224CE1F669D6DDFABD6A26B
DAE2B315DEA91E452DDAD3066F81EA46582C324C6513964A084802A25E211009
E84E722FFF61C769C50BD329B88A5B58FB2C3972A239A35712A06FF1A5F6C86B
E871E32383E6D196683F2CE295C80E3F95459833AA2D4CA6065C2B584B4CCE8F
DC43D607288635D51D2F3F4DDD3C0ED736EDB545E529CA119E937A4E4F77B509
388EA3FD9FA10797B5A2DDFB174B1E1FDD705AF02638B0318BEA32B0D416B27B
9504C889C1FC30A36AF2B2771B685B4D7EFD996442CF47558EF0E566DA0DEE12
7C9E98DCE9C83BE46CF6D4B1DAA2AEE52EEB4F07F80381FF096BC19431A8B3B1
880A35C206720A4963693791456740F913B52648FD5D4B05AB450057E27BFA25
D698B2777C497318CDB711161E2DFC121AC9484517D7C558C8ECAC25FB9EE32F
0F94CC9DE7136AAF0B41FE083B062CCDDB620596CC91711D12A4155E5D1DCFDE
9F4ECD69FD31FE27E7B4CB920DE053CA8BF7D166CE3E0B04FCDA3B150A099993
B56AC7B3B56D0478ECBFB339E94C930D379A98504567A22ADB01AF1DCB0E8959
857A595C26DE3A10290AE7E3E01879B5DC8375014D057DC4E23576F354A66710
A4674F99EDFA00C51088440AE9D3C2238E0D3B595913A41E866DA6742CA27060
7CEFFEE6D54641B7E558F1E9C5DC4C9888AD0E77C0287AD45948B2225F0183BD
481A526F5680F6A5B1A5A9D78DAC108CA1FF9400A3DE2CCD2A72104CF80B0F7C
072B05B4A5CD9F0DE3EE7FE13BB25E2856FBAD156E5CE91FBD5F44F0E247D957
956045B1613117331061BA53184111DA5E9394DCEA8EA947CC9AC1257ACE00A1
9A3389B06DB5DF396F0783135AB26A74D382966B3EDE9EDF028C0019ECC8CAA5
E07458583101DF37369DD094770C1A1B8477244E8695B6DAF079BACED60DB2D6
9ABA96673E399338B988234E9E9616EF372577738F553F81135829F9118F4BFE
20CD51190E7D02670CAC5ADDE78A45B552D7C6C98468ACA69BD8EE5503E25738
CFEFBCF081E46C55D9E7AA3C194B3F514DA06353DDFA9C87125E5C9B69FE0A59
23903203E230A868D4872655A2BD4F485C7FBBFC1A88E17F1450615960AC334A
5E3CCB2F8DCA630494BBFED0BA2BEFA77D3E67E54011D9DCF8C70A6E4AF6B269
BAE0CDB19D93C41B6028FC2870E4E57BA1B4773094EA195459AD8FF6D402754F
0A59F7B466741F359B651D4858046E62753E97CE1C0B152D66E148E1C5883A9E
A152F67BEA64E08722DCE6A5762E55A5F91337B511777C4690F6B64AFF820F57
6404D526D66EF00BB3F49D3246261DE1DE2CADAEE76E15B3B7CF6D59301FFC30
0DE2E19A784B1D204DBA858C9AA085B3B5A87A04282C152610C6DF152CD384D0
4A294115CB01446379D93A84DA7DDE692830CEEA2E14524F98584ACA7958632C
ECDFE1ABA0F78067D00DF338FB71E7ABE6EFEB2A6172CBB0FB50132566DBD214
6CD88C3A2FAC47231E7B1033B4F51FBF490CC6277C9995C6F0BFEB3F5BC0FE45
B681C73C50BA9A434AAF78C09E13E90690A80DF614F24E9D390EF786681B0441
11D831971C4BA33E9FD206A7B97E69443C961E0B060D472889E553C988126096
DD343532E74B59C0AB38E1D71D781BD8282FD2969975CDB303737E0E286C5E86
F0126AB25A5CA2875B48C61CB8112A4CF9B8A7B534C0238CF65B3DD3986298DE
5016DE66B3DE6237E6FC9CE04E7AEA2C7E4A824F8054FE402799ED4DB5A5B214
C02A57BB9900E406B2FC13BE715ECE4B585AA5F99198A39BE62AF7CFBAB277B8
A66C8413AEA916F69FC8885EAD2CAB2644F1E25DF5F6EF5B5ED47CD8B47E300E
3F5F6B8B75060C761A63AC861E5E78D3780C7A70B5E6928526F8EA94A2EA40EB
14DDDBCEC549909020E717531A147C9ACDB6F5079C10E2B967CAE8E2646B86F3
F1CE756E4036C1A1BD27291A7AAD14E946491C639CE22CFB40A99FE068BEC315
186B6E7A6F5F190D9EAF4AC53F0C4598A5BB79E23DDA5F25039ADA8A80553F05
2F97988D4B276110BCA39FC05FB995912980707299900AE4F349771B17DBE1B7
FA91F2F7F3C15296DDB13A3D8F34A84DD42541141BEBB07219595A46DA8FDDB2
0819F2337432A326ECCE79B1CD12C56C7856D4B0ECD4E415CC9290C79FE24F1E
DAC12771C6D0E14A141A52D9465223B3ED9E26A5D9B0C31FBC84A663DBE4E3FE
D3696B649CFCC810261051FF67E1BDD3F5A6455087145759F387B2E8551B45CB
6F6CDFBEA8F56A2BCA48DBD42C11E120CBD1E6B9479E52D42C8B3806FA06180F
1EFF5CEA5ACE58B45624D6DA288C9EE68A76F7D836D0AE73FA5299A6343F5838
C23AE0E328D4FDC5C2E8652C59215D05298EF6304FC37E8EE4EF7F2450F67A96
D44A2CC71B3B327B16527BB2894802F6E0E5B3B0B42C4E29643EC14B422E5BD3
BB0208A83E16FD4236560DA1C968928FCD6484A476D9F0942E0AEBE6BD0EFD1F
37687B723EB4242BA8FAD974BFFABD8E22DB7EF8B5E3A28F83EF3C454918DD08
7768EC44A893A7EECB6D95C35BB87DA2B60A0AF369640C43F5923329E4C03C24
A07FFFB684DE7ED68996FA2403795AB210E4155A1F61F98EE74BC9078A559E15
331A0AD3B0182FF6033CFE1620E967062F19345B9C2F4A5F2891AB13FCB507AB
790F40C12BE5B2CA616D526C530E15DFAAC1A7F55790E477C71A2FF28C91C1A8
BF2C73424AB98FF24C1197A24B0FDD2FD1A3676A2E5FA086AAD262C1B358E0D5
2FFB821C17B58701F3DC3453281288884D5B37EDC8DEF2EACD9C3985BA9ACAC6
9EE37C201D3D31032AC8A1BB77DD481E807EF825F48411558E58AC00AA0CCD15
B2E395482539E49E919F3B177DC742585727C12F16E867F7B692C959CDB7A45A
996C806CE627529201F1A70ED484FE92F0C684F4A0437873EBAD6AFB646F54CE
C76AC98678B54E6E3A1034494CB67F2E1799CC7AD881CD1277452731409EE7F9
F5E396EA1B598CDC2B459A81B19A090AA25E8D003DC50C08476F761BDD8D791C
F23DE48A9C4071388376DA3372563DAB6D3481A92A83B4687F352DBA807E1632
E2C67A22346CF155930698C2E76B71C22AD65A76B04AC2C007C9D8FC83BCB2EA
05A9C4D09B9A6A983A0E2C8DD7677F4E5CF6BDD091E515CBCBCF3BC988693C54
7BA59F56A3EA8A8F9033FF294240AF4612DEDDE4315A1C7E0EACF4D6F77958D7
5E15CFB0FEE3C5642BDCFC3C13595EFAE7BFE2FBE6DE800B015E80DB2C9CE427
FB4BE67A1833D36D09829FA03EE7D559D5AA987ECD54E4389A1FDB3F30FFDF21
21376CD97019E10B768CC55AF0293FE27E698D4BFE18850717B51AAC0CBAEC9A
49ACA9AA960B45B053079246F09B1F8BE89A5901B8FD7564CBE625198005583B
193873D837EDDC8C5C84580D8132CCA0AF6111583071A340C7572385086C6735
38755F135C333B87D339E8C580C44EC9A7AB9113E47E2507EDD79BF25B181AD3
08D29C2307454E366617B3C75F93CD8D9565305EF1001F84DE922D615FBEFCA3
63411DE10FE5FB70E0DD01174663D1A9F985509FDD2E75FAAB717329622828B2
785C1A8B26351E62EF6C050296ECF0188950E744AB53050CE216C010B1673FCF
588EECDACD25533064A51A4ECDB83B64C9DF28D4B56D5DC69698A27F3A9CA1C5
28773CFA309BCB5CA50254F52D49B5ABB051053D4B80F57051DFFF754BAD59DF
45582130B576066734391BF881DDFE353B4D1CE41EC9A1E91CDDA6E175627F54
15AB3AEE84308E202F58088A98BA3BB51DF615015FD0876FE4FC476647E91C59
15A99DD8F05901C8972882A547D0545905600FB6C2EF0B13196B446B46BB11F9
A50E224F50A0E902F7DFDB382A59AD0244C19959DF9D1404A2EFFA013CF55440
E94C8261317E764514AA916B4CAF08E9A04B8CEC15E27867BE5A6371054B9A92
3E58DEA123ECB2E381370C63AFCB8E9854FE6BD3B4E612412F0BA28CF931B3ED
5FAA6F7B4264526CF6578AA2E9134E43358A1B9211226FB359C8043395B062B9
33EB55FA5A760623B670A532801E9DA5E8EEA6873407F36ED749B77884A192D3
57DBC2F3C5E80E3C26FCE96B24DED8A0DA83D58D8413A45EB18DE0CA9F6E21CC
B01746D41D1EC44BE55DF5BBD8D6B0FA408A5BF10131BC8969A7E52BFC97C3C1
CC59ED40A9725FC9BF20560D772C14FED32A6D10966242774A0E9788760982BD
B3E6CBCDC3FF63DA72DC128BE3423B5DBE3AFE617E78A183793198838A241601
8B583A55803F83CDAB11961D71CC4D1A11BEF388D2B7B077697FC8F45137057D
5044268FBE788A421486C3561DB7612F2C184DCB96E253D6C2BF7DC4B1E4038F
50162676F6248BB5ACD83DDEBE00EF3F9CC61CAF072C3B40EADF66F4F0C838C5
D6E0759370339A0297AC32017884DF60593E79286684443EA619FD6C53B2CFEF
57A40DA8E0AD1089FE7A8B2F7B9B62EE1105F37A99A308E7DA80A3018E387D7F
8E621902C64E72635E4E341C068360C704174C89C632B938547FFF70A5B6DFBF
09AA3203F080A5B48C2299DD615AF552476E81E6D5284196D0A5173202970C50
B6914B1A9FA36793CDAF2C6B0B5B2BCDC3A9A24F32657FB3C5AB5CA53FF04D30
9BD67200DFF251DB7C1E872D27108DA3720BA9E0423567DE1FB1A1C7C39A7E38
131BBC8107ED4187C7F90629FE6A0C3A2E91BC1D8766A4FEFD11C3D600607848
EA4C75D479FB097AB43804324D050BF5D846C198468D3B99CF91A25FF02E328B
4505CE523493D18F3F02B9016E3D49C2D5D9A5CEAA57219BC2BADD58DA49BE09
74C77C064468266FD63C06925B61831B9FC0792BB40945E3E3909DE8C5040FE6
3067D1EFAD112CADA74CFF4BD78C5C3819D4C6DAF3A9F80AF982F9E5D0ED91D0
4ED14B6F2CCEE38F63B13D309B23F3B409A6E90933B8B6339B6106600B5A0D12
E5A41ADC0636AFFA3A1E1A609C120A392196F7E0FF3D114F67EACD436BE59D93
6D12B59F1F8A146D94013FC207CDB413648D21067F8F5DF8B652FF3AAFAE00B7
02E67911613034687BA7444C4B3C91D3AD92FABF79B5B8C0925EC8BD4D78A5B9
0388374D2E7BBDBA729271D1230281E2EE9B0759EABDD6EA2816A459C8B82D14
0344608E6AA9578F7CF18707A9105F1B664619F2F0828BB054916D49D692934B
3EA2457F56703B271F766E4E8E3E36F9D84B8B59E9FF567CAFD946F2F4E01311
B8C2BCE3F1063E50BE9FA50537F8648900B5DF62C1541F20F494D78EEF9EC6AA
AFBA4126D70B16BC2AD7982DD194EC29C4A096EC4FE615EE6ED3A7A0E86C8EB1
9DA903FE24988EBA6FC48DFA1EF75EF3E18A7C19FE9BA51A9E63E71E14CF8D55
D6B120EBC240A698E87640643864DFBFD980910C422AB1343C796A58FD029922
164DC90A3564CDD2050E48DBF908CC58E8A717B266D35EEA7CE9A86DF45930BE
230E059D60FEE879AFD9523A5B47463EC3AA91AA60CE1A23003ED856CFCEEC3C
ACED14896D6034D50A5444881CD32346C0ACE301EECF257B1E9BA488552799E4
0E102D9E515BF0E48E4212282BB7BDFC55B4522C394B3A5441598938E40E39F0
0BA99FBF0F58790DB69856591230B56C9761F6D9F034FC4E903FC910C2DD83A9
EBCDDF1610B2D957A238692995EE0690A278917A0BE8BF278B612A84F2673B71
DD10CE126E4E5478A19B2ED5FBD147B0AC825547B937BEA6C62788EB05AEDE8B
A6472B25B7FD3232FF1585F1651E70F35D9809BF14C13118999EB78142C128C6
4D1D7E9B4530D78306BB0A102F21E4D559C1FEE98E026BC5B3C59E6F95BEE812
997AEB40BEE8B5C55D9F5B28D767BD00D973962527EB0411450F1C4796ABBF09
B79F3F93E4A54487A84A1FE0826D7F99326A41155CFC72014366AED77FD6FFA5
346A760EBBE54E36B118D2481BB0341903723619CC4AB1707DB2C4984C6D4FB4
310932EB499E535558146EA08DA0C652BCE01A9FA4A9F7E83A040CCA5EEB2F66
6D681A4FA8B2C708ACC275C329F001BC82D2E30AE59475D12598AF097FDCC27E
5BCDC7F2A7EC3556928B2B8C2CFAE7571F9542FC06BBCA1DBFA4F2A76B9BDFEE
4C08A0998BFEAFE4FB4C1E324D9D786C799656ABF9DED3C6E8468462CCE9D0CE
B6AFFC1DB954D41CE677D750AEEA09F2C5920C97B1584B7E0051107EE778B10E
C2C521A6EEB7026226603DA37D8D9291E25AF279829F8D47B21E27F2BB51E02E
56341EBE6983FA9BDE51EAABDE3851063D7230AB37C02E120339A1BAB7493AE3
3853F181E49BF317747D88A77C5C5009DA281F29ED78B547A4D836B0DA4C7BC4
D54F94FAF28247662F3C670A75D4877A111AB48294FD8B63FD7216EA3D9D9CC7
A830D54468CD6B6CA09444CA7C539201BEE064F7B85AA2C769DA4EDD9F35E290
454D6D6F0B20513119A844E6A8FB598FE53D01A4ED34354240BD31A9BDA29B8D
83FDBF5D00F3CF73E3A14F7CFE355740A8326EB1A2B45114262E5B413F320422
F59F50625FAE1D3FCA58795CAF037EF031AD9DBC828E76086F66170C35D1CB99
82A442EC5A73DCA2513811A6518197894FB6EFE8F13843591A8845AD4D4365B6
8DE81582F0FA4728B81578FC2EB39C989C6EE462329CF3D929D1CBD7B767B02D
64F2C1E338E66C77C7F20124260E0A4B165539944EDBECC4B4B8D446096611B0
C95B6FD047603E302D3D296FEAF54D457AB450667C8D9A200FB051430DD48A16
B1763750E44E585F4C895AD83CECECDC55767C6EC7CAC0E6F01EA6B19E1FCC84
748D6FA2E226B8B932A195CC0EEFA8E39744C2315DFEECD26171F3EB972479D5
37F63B50E8088F4AD38D6923D072419CBBB0D22FD5E6E8710362F6624E5B8240
DA8002079CF2B0D3C979259A3E62BCA87C7A190A170D23BB38D96BD8681CD2FE
5AFDF853E1020D7DCA0782E783551CD55978F6EAF2AA24715FF2DDB265C44F18
FAB825E8B179FEE63EEB7EFB947F6EF31DCC61CDDFC39A2771808925F84BE80D
BD34ADAE1D899DD64BC02EB64DB706098E6DF293CF46D124BE0F8664FEA6713D
4D0616EEEE39E709A422D3C9B3F98541C5E6704C90D2DEB61A59B82ACC730325
A6BE858036376C4F59AEA817080E044638D901BCD65EC207CF1423844608CF1F
77EF9C7800176848359A83598FBA5FE616E33EA2F454625BE4B1D174ACB33627
45627E1FF938AC1A373333B68E810458E2756AEA1376BD7D555403B83025FC25
9D4ABAD69050D64014F1BDF0EE82FF494BC2F3EE7C2DFB92F6E097477F8C211C
240EE5912DB8937D1A4497FC262B6D2B266FB7345BA4163EE574C03CE7768F9C
A2AFCB81F154CFB30DDED98FE9C107827493FFA2A96BE684835558D9FA31B09C
E366E47BC5C62FB8CD0F00B147E81F5B6A79475AFCFDD57E0AE11C4D4A1F2D1C
B9276400AFF35CE170D31F2B16683A2C072E91F7CB647E1131C0CEE91162DA66
C9C1C9B2FBD0895FB4F935DCFD3C8933CB09AF4A2926A45D8C071752BB355797
DB0F2F5DBCB4249EDD9A62E23446FDCCE9E75497540F72A7AA528BB0FA88B104
328FD899A981C9FF1805B567E197207A2831B6BE9D16367A5FAB1D14D281D3E8
D09DC525FFBFC3C4F45430E5E1A7B589FDAD741C93AEDB827957FD670CDE5F31
C9B8DD5270A72725DB46EA6B672C3C04B87AD5F90EB0AC7B89F1E36AD630DED2
617A67C1F6DBA353A26D841ADED0348EF0A843D0F05CE3F579148DC112B23C6D
EE42A4F1FDF566CE2D15EB3191C4BAF4825F0C85A7969295B73342C6E3CCC0C0
3A5394F51C5FC6AC8A051A0A26CA59DDA6D011F79FEF550DF52C435281D07AE1
85B2C925BA9BF6290324C59F30816B248D320852F6F8CD91DB3F7B7E87BD9D40
5F2E29BF660674457A70F9D8A85E69FA4F596B104C5804E7FDFBB5D0A20D24A4
2DE7B5DDF620002D182AF8045FE324CAFE784CB873F37F90E6C8F1CEE20C43F0
67B52E270DD0DFBDDC1DA61DED5F723B06F1881AA13B177E2901A0BF326D23FD
CBF55B151D71A9C80BB272BA01A17A8A9AE34FAE80031127725052387F04D970
42A8BD165987D17B30479A24550573B194633F784DDEE77B66101DA80CC33DA2
9C06AAF2DD7BC2B50FAFDEE715E865D88AE2EDF98FA2196ECE13CB4F39641D55
BAC02180697047F896029B671A1993426378241B3230E538EA282B9574564646
B0910BA9E173FD2222DDED8C4BB4813D9104C7508C385F2ECADE863C97FE5208
7181251AD87A38496CB114853CA1BF1C54B28F3591C1B05ACF3D4695282254E1
C3F70C7D6D2D4D97AF75553E5C2D06D80F724CF2360D3768F4E5FDC99AAA25AD
6822B22B9CC8A0E125FE2A9554E7D9855E01803A2E4A4A44D467EB26AD61D69E
EC3C1B8315BF63C3BA9B849EDD5F620C7E451943A70FBDFEA94C6A4EA4A96C69
6DD0E62D1A74313C4E0BBB24747A0F17EDBF9B8D010255944700567530AACDF0
713BC0A77BCA95B6F655020E2964AD82AD77382DFF4908DD75D9DD124110F359
9D8E6CB99D3703BA060EFDCE1722FCC837F774903D6D8734301BA52C5191C873
74C2F610A11E46A75CE560AEA4C017EBF96D17351404114B1E6AB325FBC17947
2965BB6B99C21D0CB6988ECC3C023951C59F3E09157F87CA9762F00A7EE36050
5485B65D9CD4C8CDC57A0BBC0598B3AB03652A6AA453DC8DB4EB663FD7959C6D
491010F976D4C7EA2FA6C189262CD1F03AF0C294D7A2809E166F1590BB741AE7
3DD393D63A6A3759F1558E48A4D998CBAFB2BC04A1431B6E53B4FC74423A575A
D961790D552E9D719B05BA7C40DB67A8CF6D5078F1DBB90467B9968716E4E443
9C105FD12153EF75A00DC6439165A133D00285C4FD7E49FA5D2FB569061CAE94
BBA974E93E4BC9355CD59870B8C57F2F7EEB6B877B917854692BC890D6A7C5C4
10AFBBF859E855D21B146F7B92BF5E643E676A125CAE42E92DC32D8072713576
66762E2430824D1B64CCFDC1111183811EC78038D8521F88E524DC5722694886
3D5402710A02CC77A9841880181CC50C2177BCDA74BFADE0E3863F1193839C6B
39CEAFB6F803B727C657944A22B273DEAF5C865DEA06501B0FC533937C9DAFD2
048CEC24861DDBB8DB69386D274AE08FA938FBBDFE2878579A9AF5F7BD1078C3
708042ABAE0FE6B51E6795CBFB4CE95D68E3C7CB1D4A8DA1D0AEE7CAD24ECFBE
C94347685181CDCAF33D89F652D5C6424C6D0965CA964248444FCA4DDEA8FDA9
B882F96DCBEF94CACAF27438C7734795D322D9CF120FAF88391E1B6BFBCF68DA
E26329DC8FDEAF158B62BB107A8AFA280C8538B731ED1DA6C73F8BD7A245A6DD
826398954FBD5E7ABCC77DC169F04482C41CB74EBB80E94653064E169344F16D
65F76E6DC488FD13E33323F969C14BB2980F7880873FE4146F1EE5AB0582F4BD
8A6D8A68EF5AAE0A618E2557079A2BBDA663508C2652C3F19B527DE73595318B
43DBF9476B9485ACEE1D388D5C45C21378715D75668080E412FD27DACF326AD2
F36FD2EB62CF4C2B70796A23BE1944745211D4A151152979A546051AF86E03D2
2C944CF66C95E435145CAF1608528E74403A59A5F1FE7DCF86D9EA1B01D2DD9F
52E223FD098660B344B76A7FE3FC83B588E8BD3EAB7D1EE6F3CCA5C368CB407B
7D69AE0E77E97C13905CE3E6CF103794C29AEFFABC3FDBE2919FD6DED59E3F3D
9C5E5AF62AB7BC7DB94F56A0800FAE7F4A952AF25A90660E66A45DBC1BEE2A6C
DC46E94F4A4CC84D6B02D99FC8B7B93CCD6D4F24070097AD9B966A19934FC1BA
8B3FF9E96CAC66FFFA0F1795FDBE5AF4268331CC37136B20E6A51519B2725EDE
1262199758B18356387BD9C27DC13B8E42E4502972167B6F3B149ED40A77E590
211592D6ED6513BF4BBEDEB04079726CA43F44AEB64B170B423EA61AC6C02EAA
73E79883897651E46F867F79996954F36C5C090B0A18F81586A94C068133F259
D010B9EC7590C31F3D243AB6E8C41BC1DFF13045370CD03A0ADA22C686368347
3B13FECAED39B92393091B593FF7E557D1098CEEAC50EAB6A0858F98FA558CDC
9F406A0635F4D60C3D5A5D5AA54D4566C36A1DE47BB2E95B4C766F93041FAA0D
BB196B0A220B8E3A9FCA64BC1FE5730EDBA7B453A4A15E8B8137495F25DBBEDC
F4A13D2937C26AC08DA98886993EEC7A8FFEEC357A8C41531A7006B2867C7E58
8D43E047676E81744DE1D89FA1C887C524B689F96E3FEA51EF125D16E9073543
865055AFC17A2A9B0044B050747E7D512F9C67296CB735C4159BCAB0D609C3D4
E8A89EACACC7CF0D4C3F059B0018DBE1A13004CE2C9768561BF1201B86813C6B
89EA16AE1A0D5F746F94E090DEEA37CAABBEDF919F519EC7B7BEDE7327765FA7
2E4176D1B9FE2AC37C8C0EC10FB99F32BE96A3DD440EA887E39D1FFCBA9B93C5
C7543C6068B7BF70218892CAB744D01CD4CF27DA0DF338FB71E7ABE6EFEB2A61
72CBB0FB50132566DA20273113ED93775BFEF4540A9941FF240FC0DBD2A65FF4
B74792BFCC5B88D2579130A132E47F1F4EE7941C12CE42CC80A4EA6F16C25D5F
A4DC700B2D55D42DBD5B87DC5DFD9425EEF795DD0B04EF733B4D4C76A47A1335
CA1AD3C2B451361DC744F5BFC248D820E73DDBF7A967735EFEEA89C68E3509FF
9ED26A0FCB3CB63E55734B673E53DF4FA4F2D087E6F865C8C9825FBE959E9D0F
A8D3881BC3D0263B7E30221D3B76364983D415861028AADD851711FBFACD0470
F350D8241E34B5B9A874B9224DCB5B58229BA324E59A811079396047739DBFD8
DB8B19E152524A12F8C4B27C5C38BADF776827503C93150922D97E5DA774EBD0
06978CBDEDA0951926B36B9306836131B18D785FF63B4FC19AC4878C80C8552B
AE2FD82785988D02E3FFC53FBD9B984B07845FE34B9DAB4671298B2512B7B9A7
095203545C01B215A2B570377A356DEC6AF110FA0FC9274961C7033B77753BFC
BBF060F416C0B747EC5BA54AA743154084CCB96B0BDDCB2B8859C0182472B9F0
2BCB9532323C4D302C71AEC3B473C5EF5EA99AA922FAA53D9D03C54706B5EC50
90F2F43AA3B9AF63A2DDD3A44E4CF388DDB70D0537B3BC2ECA12783242342904
893D044DA384E4836D27E6588ECE65C6EFADB667852739E02647D111A69CAEAD
0B14851F57267142DCC4079C915A4D01807FDC883E15A0ADED2EF3F83AAAA3F4
F68A8E892C3D0529A466C6A3165675E342E543D607556CBE5A9089B86D1DE768
F27D761FB485DAD457C8351CA765BA358247310D2D65F7AA11EB9D450394AD4A
2DAACA192E92CF195742D5AEE9022F2F8ABD47B8D37E3CB1D5F4BC78BB3017EF
B793B2A869DE1F5DF13F95F72715128053E9B14A055D9F688B1F4F0B569DC406
C943B14745C15A208A90BF3346BB7DA1576A58E83098F89FF38B30D840A90794
80F30EB64479F260515001FBDAF0D485BADEEDCC18657062F36EBAE12889E6A2
F6F71C5CD8623B1DB3F5B933E3C7C42C5BE575F90B42532237F541682A4AD84E
1E0A970E65DA90A6E8CE1F9C2F439F0ECD7AC315EEEA51C7B0A8DD0C05C28739
32FCBBF060F416C0B747EC5BA54AA743154084CCB969AD49D129C90A05B4082D
C1A02EA0E2E87060FC7E3E043D97094D63EA1E87EA4F5AA5E4A0C898CB89522D
F6C4C2DA719845AA9C4BA8AC40C1E24DD4CABD064949F7D969E0B4BFBE38C798
66BCD14C2C92449525BD879F6F2E6EF9839FA2646BED8080D44243E74485FB82
236249F577C570FFCCC8D6784D8BCDE41DB43A81C3A34FEB769DB6B50C8D863B
BEFC23C72C056471F02C3E07B213745038461D9A1519252518FEC11B39FBD392
99997E8A890FB34B80E5A62A7141C33F245A9B7F7BC10401FD30A7770DBDDFD8
C0EC2F4783BBA32308D449594273440430824210531E56CCF19EB65C7E9CCA69
0FA83F7A9EB23119348D2C82A64066B2EC61CFA865B49FAFAEE9506D2F10DEE6
73E177D6279ABEC63D64E4DD88F234ABF6FD9A507BD8813B20E099A41A79845D
3946BCC044D0F3B58D299E6D6FF277C3A92949793FA905E88E03863FA67D3BD8
E03F418C44A895C52217EE19746EF950B9189A72FA9D81252C72C2E592D84B5A
915E59246A382A2EF44013126E9745030171081E585064886D46FD31A07B390F
3CE60CCD246ED0E1CAD7329F66980ABE0ACCEFBA3D2977040D8E3EB331187247
2F711D6E09587C4C0799B8DF9651B5B2A9B70EC43DD4A6364C346A8C02EB51E9
08376F7B54992F9DFD820D9A08BFE7ABB9AD43927837F9B19E1BC01AD5D9081E
2479C1452C45C1CE04C07F49CFE7A8E40CCF6CFE964A70EE983FEEE0A719F41E
589098EFFD75E8017CA4AD4FE93E30112322EED3BF20028C0019ECC8CAA5E074
58583103B052C8AC6E9BC0C1E5143A5DCA16BBC20A5316F9F40EF28345D635D3
27775EC86682E5ED5A50C4FD908EF363775D0C8D5D1AAEA50E83DD2A0A8540D9
4827AF3EA1B0A60B76FAC83B213333DAE658B403207D2824F6E97E8B9626BC1E
2071131FFF47E4533DA66CD991640317676E4591EB57AA3DBEF8671AACC34F3E
4C8B7F07ABEA1BAEB76623109832853C664B53C4ECDF81B0004DBE82B868F0B2
B99F40FC65DB61D8DBF559D793870CC375A64D22B7E0A8801F32D217226E0801
43A8E35F88E3464A38D5201881240CC0667E2ED796A8D6BC9CE98F2B71D98623
F6113B18182CA876162E87AE32D5F435F3FF0B01F65EF0EB29AAF2916AC16E11
6A1D79D91316191105652870CFE9E9A8C0B359FC8A6BE24847A544DAA7C81748
D362414DE166A88EF1032E139530F126E04969167E33E7B5DD1ED9DFD15045C3
45839AF0A2A207C56F3D57F8DF78F5C204F7C7F0879E6FAA3630D313E6B7BE70
C02F2AD2B71697716DBA03B23D85CC8B701EAA654C5EE74F40D3401F70073333
1432ED8C17CB4DB47FA3AA70DF55B9B5EF8B4753928B81FD502B0CCEA4540CDA
675A4AE36F064D65A744A9FDE44F9811361F0B5E6C8C4D85A2B9A83B68F23E69
9872CDCF4C4A160F3373FF47D707DA7220F325CAC2B2F371B1559D8BEB245FFA
A7955250F08E8F5B104493954B4833509E1FD137D8B823953AA248937D5B5679
BB5B18B8A9D20D1F534C56C075C97D92490662D18AF01F8FE0F68B5D42751BD7
2D5E24F5809F58BF1F54801DA15B11DC762246E3E73952EF80E39E1059BA3B89
BB00B6A736712541A117E690134A5915D13634B978BA644FF95F7E0B679C0D5F
E02E0CF9AA45628844A542741117E2C2823903980506A9F523F673BA8CF49FF6
291AC1BED4D66958AA329DDE6CAB90B3FE38E49F75EC083E4F6D5E75668ED3E9
929056DCE30D42439FD75C1D0317FE3BC9C760818BB03F7FD90598C38B1C2E0C
9A9A82F25468BA556285CDF549243B2365325A3A4F028F88CB2CE1DBBB799E57
3A54E8C194DB4365A224C9813C036CEC7F174569F2F4629141CF756FAC27DACC
81D3B0B0BBD9CE5FC1086E047F043F4D780E9A34C3E671B402F789C8CA62329B
F4F69E28C3F7A4B9E4BB5EF8BCC0ED71AE3B372A4FCA748915856FE50D442BEB
8A77F9298A753B441CA130D7F1405B0467027EC1E27BBEC48D51C674C819FBFC
80B78186D7F391CD91B6222E88C0BCFF662088122BCDC425EB6158A7A32EC17D
CECE34947BFAA3AFBDEA3123DFB7E5EE5315C3163A5E658CE844D4F0DDB7D17D
6FB51925B0BBC46FCCFC4AE4235F7BB4923EEE9B65CFFC4540970B0E4652883F
787218F676D60FD5560B7E80CC48D5729E07930DB25EE927BE09FCC7661B950D
0AE8EE2CC2A7C10394B4FA2872BB77817D1E2258EB8E4A1777EAFFFA9C056045
A0369FF7916EF6DFB4498E76A6B95F530BC50881826A306E1DFD7A9290CDCA4A
16FFE88D99C00E24908FC65500C95AF2DE68429C1654F4C983F81E75BBF5FB0B
0FAD16EE841C75D94786463832323BD29A16B858A2F1FBE5680A401376701A40
566DE91910F7A2177D163B7D007B43C1294747F3ADD403E3C9F6D68D8C510704
D87E3241AB1B0AE52F898A234931F910D5D807F576966A3E6CBF678BFECA2DF8
8BF148288CF569AC41408FA6BD5C2B6D5B95D16AA4BAE01BBBF1C500EA0ED78F
E90F966623A913BE45C738E9AB73958E5805EA03E26AA63325C7DCD0C3807EF9
85FD69339A95AAEC51689E949C7719F6BF954D1E7C03B05F4F4BA4A669019488
4FCE959F392DDBA187B24F6075F39DC5E1DF623E1CDBC386C5F45447C3B9B81E
57DA1D717AE5E115B691DADCDAE849676700958F17D09D8B8D37746E5AB46052
35082161C3528793C574A33D7CCDB6F875BBA9E474804EB596D66B761A5E4734
0C37814FE1FB817C7C68A5AFCE827974BF4B2ACAACE83EDCB540C9115148CF54
C8E0A987CA04EE01DE39FE83DBC1A06B49DC5E9A9FFD534CD2D11B59DE4B5B54
076F7EE652220C5CD20A575A917C9E7F9DFAAECEE3E2A12AA6B6DC66B2B18F6D
030844DFDAECF8659431C05218420DD30B791B1D7359CEDC67F92DD712B0F6F6
E8EA0ED503C7B55E1F1AA36BE4E39B761DD1AC9616553F2FE9D916DA3E2FB8D7
758DC2A88FF97401EAC80EA9A793BB69A81395C1AEED6DC7C7188A06D85305F4
994827DD1017EEEE54B481F067812D1206FAE8F5F752A36C01D95CB3DB66B016
182946AA015341DA4E2EB4DB9D47D3C98DBAF3D34F4B785680AA94EB503A2D14
37C4008E97C76D74AD430973E848FF2744D87018D4F17E60D3CEE00CC979AD41
0F813119C6084DC9246699909AC060DCC4606454904FB9E7BC9FCD583977EF62
53A3295C9651FAC6871362150C3524E59E969BA4A3259B2FBC52122E7974849D
D398C044CB32FF61A02859A2F650ADE86CF4EC93FEA60A7F5A9873AA7FDE2D79
5CEC42606A82964DE25BF84C229C62E68CA7C994598CA111121F5453DABCA8D1
FE33808277D947D085A580BC6E6DA0AA29EA8B96B98E9CAC0F97387B731F438E
D0BB65009E80375F9979B2535B260CD9AF6056A4F484E5BEA2ABCA49F3BCA51F
5A6CBD8E9D15F2EC5327E52BA1EF414DA21E6354D056159F69ACC6681A6D7C5F
71E8E44E1DCA47451CC8919DFF187A589F11E89869BE34F4D05CA5F80839F0C7
FB7B8D2ED848205648CBE820C4700C89D6115BF34E660434E53077206B066968
78E08E23B05619FFB12C70FFED18061145BAD931651A4B1EF9430C807BD26DF0
FBBEF346A224D073A11E3638F95D02D9386830FF6333593140C974A8B13E94CF
0E77EFE6E92AA63C2377D779DA1F0DE6FC09910A13B23860D75CE69B828689CF
391A95DC4C962D8ECEA8E753C2DEA7E42C8AE2367556933433DE557922C20D8C
1D4BC1F344CBE85D4AD570A744863FD8EA705890890AC5BC2F0A068C75C09285
C1BAC3490528087EC52EFE4DD9EE467FDFB65FBB632EC78714CB01B1D8CA5599
BCAD944BB557C31F560D51C7B4240705C19A10B53830AD637E14F8AFB20A70CE
98FC5EFA2B6EA011A3C060F006EAA48C8BFCB4BA4B92C61B242ED41737C237A6
CBC815C3E911E5E3D25D0A50A2A0B0C014E18E553B4297FB7C61E27F4AB75E85
2519812D146784AE97EF2C4B2446425E5119A6C6BE1F33A0DB7564F01C4CD135
F96CC59DA7959191AD1E84E06870234B7533C1EE788B3D96A1500442AFEFE506
2D720A8E05B319FE16FE42ACC4F8B1F8FB794DFC6E1F985DD607832F8A6922F3
A7991E8A856D787A3F4C76B8626AE3FEB4F127D094B167C7ECAD42D003077BE8
7698A5FDB4685C29D7ABC599CBE21843BBCC7A576C94D89D6CBF5A82C037D70E
BB73931AFFDB7E29FB0F6ABE5AA101037918C9F3EB2CE43BCE3F328415B22067
F2EA4CC1FC6577880BEFBFF5820772B44C171B4AF5A5AF705A187C3737D3D128
EE8D437A2AFB114183DA45B175E9DB326C4323F499565020467A2F2E305D6C51
8ACCCE6B1C7E293F9315774960A97E194389960EEAFFA4BB9E7C1A5831CBBB71
2BD4433E492B5FDF3908E6BED58C976A9FFA26F1D282EBC19257DBC8AFC1D266
C3CD4D3D74DCF0C05A364A0DBF90F6E32CD28887F7E237E04093F7E74997F7CB
B7FFC71FC82F8D173315A44103BDF542E5D54059D79CEF1D6C55B3F1ED51C694
C79F3FF3AC9DFC247EA6F673ED5F34F1C1D20B609A152EDECFA2687364F283F3
29C433B95DC6920785A326592D07637DC90B79078F1C02CCB3F652A2EDF25D95
A9456C7098D09D557313FCA162B499731A23F1D219C7E69F44C88799A4647FCD
ACE03B34DF5EBB3885DD636E8617400D051B27D8A646F284E22E30D2B418CAE2
85AA38F9FB436D3937129A29B22AE772A04DABBE688C330EE02DED4FEF2B67CB
8844EE95527AA116CF31B971CAF5DBF65ECCD01FF04F2763AFDF0263D12AB1AF
C59F8F832FC804199EDC1EA30E93AEA21087764A217B1E957C7F35FB2F904B8B
D5FFA1851C8AF6D1E19F8548D3FF177F057C58A40714D7144F80DD1CCB62FEC5
AE724457E9628C077A0C7218B75969A0CF36EDE957E9E8AC1C2DD5D71257D744
2125EEE6D36BC31F7E8CD2FBDCC3C04427F6AF691F35D3E70468150CEA8D8EC0
2167289C5ECC2440E94D9CC311495E72AD5A2CA3DCB89576446FDD59DDFEE3A9
62212BD697A28162F38D4122852276E38739E74E20C62F1C56DF2663E4735A33
3951A362868A1C6C11847144D81579D569DD90D6DEE0B1F247356AB0AAD4D106
79758E7FF44E36B9AFFD08D048BB177A5641B3746BC9148426BFB17030274A73
FC2530FAD03B7E2D2A25DBBC9A1CFAD952881B927A723D7F0CB707ABCC326184
C76284273B5FB239D7F8275BA80C6EFA0EFAA40C8BA62DB50DC88EE9F368C22B
921CC040E0AC4072631062D703F847E82A48C0A19BB11D1EC1179D98772E622A
E135AA8B3E35B0B2FB034A916A05C933369DB3028794D44F5869EAE58CBD8C6D
FC5ACB42E5BECCE7700BCE3DEE1AA2A6EE1FDBA1374E40E7253385772FD8866E
7F80920A801BE368CA4B2B322E34235D90A0824426B7C03DE09E28BAD107A9E3
ECA696E6B9410FE7B69EDCFFC201B5114C5E507E856A931CCB05A58C30CF4B91
05E3687FDBE7EE7C12A61DF88B80A1927EB93B60F24B449C275B8F5669F088E6
CB9C7FAEB46AB8BDCC09DFBE2602BFA0DD060361A4B5451ABA77BDCADDDBDBD0
00CF9B53E1C725C85896A50560CDF9F23B59C68CA4EAC7C90BB3115F35A8EC8D
4A96172E94D56550CDC13BBEC15FD86271EE745A26422F437CC8BF722A561FA9
A191557749FEE1BF7CFD8374186A0E7689F499B89CFBFD5E52A309C794998949
1D87DD25BE817F5DFA2B6EA011A3C0606036F41AD23DA696391CE24D7A0CDB2E
47A81445411B517C97225D9D9B8FBF8213B54F8A15739A45EB8C708DED9618E8
43F7AEF5F76875846056292400C4F87D708484B4EC67CA248465C60499834BC5
31854C014A2AF421201AD4E2FEF090F417066C4B129D7B7CF3619AB7E288DD48
A563DC61636EF295EB0B4973F5A4F1C021076B54FF682C72B3B2F99A0F012849
4CC2DADEE249CDA64C246C71EBAF81025F1D879F2CB5F049B8A183B7A736A651
C8E9877DF556AF7B2B8D8F4CBF91F7B8E3AC3CF4C3388C40BD3EB6E352106A8D
38A3C1CDE3DC619C08C636D57C84B55ABD2B72D73F2F0BA149A891666C32B3DA
7D946EB30CC0AE6407B08EB88A3E932CAF9FBABE63AE9410609409F177EC6054
E58716BBF46E1079C8ADC4CE54DD482D3FCE17B2B6196607DD925BF1941B1206
2339E80339E719ADA8B70E9314C946D417E548A519D4C1FFE0146F228214CFE5
AD3D8DD98EA520F94D69D5177FAFBE45691DB8020F764A6AFD2B2A2AC68231DD
2AF573EF55A08CA0DEA8EE1FBD1281D2599E1CA6A5ABB203942A000B1A34F9B0
0785C9C0706C9C8B5A352504BDBAAA9879E76779529FC46E0DB563362168A74F
F843DD51BD57B79CEA73249933F923CFE9A1D7E3EE765EF1E9BF5CB884194501
4B0FFF812D0E1CD2A826DA53583D0FE77982A6AA5E62D360F7148EEC28B20E4F
C9A567AEC9B3CF2A280B0302604FA30D83E8F2124811BB43DAFD6E3337B83820
DB0771DFEEFDEEC0C78F3C3574F1BB1DBE77F1104CB1057157A6A9CB28E80522
C95A7204816FAA52A3A34E4990CA9491E6153879AC1B0C29B918772D7F77F992
B9BA7F063CEDE1A10758CF9F5CFB1BAD0A29E1FA86711D29B8161F3A509AEAC2
AA2EDE6C06347BDD3A6E7FDCEC00AD302C69DADD5BDF45410E656F51EB1380A3
D72689FED9F471B5573BA2FD6B04882238C45C471349031303A9792B0EF477E9
117E03D20B183BC548B5D79E942C62B5A5427B592762CE4A43A4F84B959C11C7
51EBFF32F6C4F0BD98DA6AF06CA77C104A2582EF5CB5CE56CDF4B1AAF764395E
C2E026477742F386C133DE4154A4B1F8C6C701BB5D5E33BD991325334048973C
AC2D89B4FCA3A9D5E5952ED903E7B54769B6642FFA56928987EB0BBAF4DC72DA
6B4EBF8B9D022DEE63E81527A030517DFE1339E4C6CE83CE0DED3C3EDA468B47
871844AEA4EA9B5F5EFF27C457CA78373D46B7FACF65B04A66D356BBF81A9BE5
918F982B21CD6B0FA745E570E8F7B8B05AE374BD52B010080CB11405AC56CF2A
C463D7CEF70AF9AFC4B987B2D15F22D7C11622FDA09AC2E09BB3F1DDF9B14A72
CC69249ED3AF9C4C43ADD1D2E533CDF9442D0E2C4436E2D782383B83F6790E4B
D02EBD2DD7CE16617B8C8A9A6FEACDC8DF90E476215034DEB7103EFDC9255EB3
BBA363E22FA1B6FAB6F3AD0DE094C8A43F34A9725503C98440DE59565E2D192F
A4ABF53BD1A28704B84939C7E339BA3F41F6855AC8CBB537C25EC824808E7E38
604C213CFA28B8C5B897190EC9BE99863C229B6816317DF835499CA547523B1B
727FAF9F40ECF722423EAF15A0059A27FEE30C50510C8A8068E3C0236BEDF817
79A8A171F303555D7C4A6F1E4D41EA2B8C035A47BD59EB115A9AD39B77A196DF
D89A3A4AA6ABABC2079DED4BD04A7CFFFF48BF486D2E0347E571749583762771
725A7E2D8ED8B910197108CA4298BBB45B91E0A8E9A833181CD246E21BF5A854
490CA54376DF36DA3E0B770D2C7497274B531FC488B35104EBFF4145EFE40C44
8A542303DEFE1E2726DB263766E2D3D63E23347025F3403F1BE4AC2458885BCA
60E06EB3762251A766873F9BF3F0456F2478B8E708B9F673727AA7FEB7126D79
C51D9249C6FB12B0B1191F06520475B2AD9C9E876544C2A5A631ACA5FC06EEB8
5412A4C8C7E11C0E801D5099765AE51E69F5A96C3FD32EB202C1A426A634CD2D
2206519D53EAB53E924A60ED01FD4ECC2AE80A5D4CC919ACE4469031D07C1713
63F2A5F9EA1EAE513CC7796841F0E7130339F4830D74716D588349BD34002BE0
6229BE34EF08313FE45B527A0D1579C94BC21BA3FDB42E9A93C1CEBBAC4E34A9
34F6F9F761517729224F0DDC285B63C9B6DEC12D7C3A5F7C14EEA7DB19E3E76D
102F3DAD20183660CF833F5E0B2CB9430837A9DA4239E3CA3E1E90AE7A53DE49
B23D07A8BD73BCDFBA3496BD3472A6381A5C5870CB44C94C8BA3D9F8E405CEA3
9374AB5D60E536D3DAB7BF60A7484F120A8B9ED1D9677A4F8D85A4081425B862
D216A0F71C814F122F7B04B838CC90E749A814AFE565E76CD89201FD48F0FB04
BD48902CD91B3589BDF312F3CFAFCD2E16A144DF6EDEB325FEA710D30B74CA1F
45B50DC1D37989A2D5DBCE934A9A953B5EEE92A0C4708449AFDC8C5E78A71FC8
05F000D4472BD870D8563CDC79591C3D2E376B5781EA41E99201F87E0F4C5C5F
208770EA65282F1BDCC628A249DC98F1880BAFED29A5A35ACA78AB5A380DD871
89AC1C36C1193DE775B9F4EBF8401739DA6145BD7E4F6E8FD641B09BB268476C
215E910A8ACD6A247B9CB85A494115269BC8A02F917476E7185F9594CA2C85D3
553E9881910EFB67FD1BB73EDC36E0FFBABF7EC6AB43F53F90DA3ECBD80A389A
7F9CD5D527DCF41AC76511F0F0483A936CD2D583B518D417EDAB8E56ED45366F
D712D9BE0B52E42556881BBF06DFD7522F8CFDD7EF06C084C8DEA328EDC54835
814396EC82A83DB6FE411715843C52178DAB7F07754CEE213444523CFD172B9E
31BE58DDE7A4EEEF829689E3ED48EB54FD01B99D00A2D2838413C86990510174
4084BC1A5686104C5126D65F500881D37365DDD9CAB16375BE87D344237BC35F
7D267DAD2E6C7D1C00BE69C54FD6BCF007DD4B8FCA98D37957308E574D0A7EFD
D8F929C06173D6EBF927147AFC1A6285B44B717589F1A16EEAA9CC5D57A44B63
DD94D1509421107F550F3F442A06AB1814C0C33B5AEE45A9A4DED6DE32F1544D
656858D63D1A2CD070388206688751F65DF4EB0148F58684E8DDD4641B79CE02
8D557ECB6C33B4AA716C348026B4E784494517023CE9CEAEB35BDC9372B038A8
2F59FDD0AD40A42DAE32BFF6737380609C4C73EBEC6E72A40B22AB73BD819D99
9300E3F994AA077A531DB5906C7423C24D39CC2F0B31D70C20C8FDD02C55D778
F1D6187177BD944EDF2BD1A3AE05366651D5F6533122F4E5F29C1EEB9540FBF1
E34CF7DA9D860A8A8D5F44491AC707ED235B32590FA9CAD353BA4335058A666E
3996793F6FC92DA119BAD0750F88330B9E3451EBD233B80C37D8455D68F0C12C
16688470D3094D6FE76442701D666A7724DB068CE5CFB550A999E63C067E0F5B
72F230EDF1B7AD14FB8299B5D459AAB35F4AD8F628C3D024EC9E97CEE2D6DE15
490870A05F5DE4769CD5511F92916D34E3F749D386A1B8A6CD2B5D121DC6509E
55812ED1DF9A6DDFFD780F1156790A488E9F93638B06D3770ED059838BFC38D9
767A45C6984D1DBFA8012920F318C12BDBF3743B1EC470A32CFCF7AC310C4EEA
F3AAFAB9129F5528CE3BD8DA923AFFCEE63E282FFA1CF50185A89CF6A68B7D3E
08021B6AD60FE1E9D2FFC5086C04235C78DE7337BEB5675F9C7CD03C3517BE59
ECAA04C56EF3B40823956AD43253B1BC9F3A05C597CFCE14EA500D20BE68F75D
6F313E94D388D9229C1E361D6B979A170E21B59E05661E646D8173A5BE71EBC5
04A638F5EEAE60AA436618C281E0A0E3B3A9303CC927663E474073EED47FBF3C
BE34BA43402E29BF660674457A70FEC07E761A9E22A9D9173422A333C428B185
8DCEB5C94DE5FCBEC073832BD881BA0A9743CF7C4C9D465E6FFCAD3F1CEAADBB
AED3517498DD49771CD000C45EF9037C30B6E6DB913AE4AAC41D90A42176F1AF
6413A9B7BA329C848C320FC029EF65CB5530B9E89501E0C0B4D946C9BF6C278E
A65E12E100266AA61F03B3FABA69B93CD07371C16557885FA1CA77ED39162604
80DB8B6E21DB01A50966798B0D1EAED855940AF0DF3BEEA56082BF9A67ABC924
E8517AEC1141036A06A6F27FCC06876985BAA38BDDDE8F0FBAA18BACB04A3852
E25A8AEC5F9C8CD7E72DB89D3825F7A7C4F5D63835678E03F76E88BB06C425BE
45D3921524A34D218E243D9448F8BF17EC069A0E6272F3C7C56EE9BD25DA5C9D
92A832C4A2778F705D1DB33BE6EEE6532DB0F7FE2B31CFA35C2D9FFBD831AEDC
2BED1D0DB35397560E0BA139DA8CDAF3859BE20D335CD8916D3E3F7771DC3AFC
C810CED25176A20D3E02F77B400BB9DB91DAD637A7A7C624884797823E22403F
6ACF92D94B988D9F7CE544F97E03EA2FAD7D99A907D8676C433CD47C467FC334
C516AF7A24922F735615576D2406DC72162A912FE322D2D73790B8EED44C4924
527DA5E95614C7D76958929A3920790C10AB7B26FB128AA560D9A65C09628E25
3B28BEAF58B3EDA5616CFA346B63A6444A311CED27BD539F7866D7B3B8321D45
6092B039578B9CD05F0909FDFF9D4BDA51639044390D8DE9A7C3470C71DE47BF
5B08B9B8B4B2EDBEC9E450307C2CFA63D7F5B469D18FE82E3C82BD832D81D52B
D1112BE5DEBD5B539E589CB65E878438049BD4B6BE48C183AC38DE7D247A0455
6EBA0A572C2DC50EE3EC10AFAC181F5F5E706771C97C04CB50FED04110333696
B04902A7067C98A04F0417300A108E518514CCBD028B70E194489B1FD064E515
CD8EABBCD4488E882E1A027BEBBC9E01AA7172A8F67A678714BD90C887E01016
7E0B0F17C50BB65452A3175CA02EB794510B30EF15C187721494809C71C946EB
77EDA69152537EE59535C72496619E121EA4EAA1D85DE9D66C19BB7310B99A7C
912904C45E1A2D1179AFC2B68AA149067D3879BC6BE704F47A5E187E1CB4211F
E32CCFBEB24277E14FEB39E6A22F32B3EF9F1D504899EDE659EFB0EDBE0D2BDA
4A08C2C695846748B45E34308B89378E69DE899F60F0339644C08BB42679FDC5
FB8A786B1A04BA85A7C47538C692108055EAC99DA91CD3B0A2B7AA4D3AC152CA
B5A34569ABD9811593AC6AED960159774FFFC53DBA06F667EC5A3E0ACD13B07D
C1E01682E0515E7EF32821D43555F5A415C43E19BF69B9C62A96481FE08E5F98
31E7163E79BF5AB4FF6DBD843BD6AB833C3B56EC76B14EDC581B09EA8E05A045
DA79905AB028A61C02FB7A6405D63876C42EFABD481A526F5680F6A1758A938F
1BF07FCE3AB280E335B51827382C234F843F0AFD941A711F25E4FBAEBDE4CC1F
74F1000A12E26A6AFC00B5400D9C28610AA8D48B790EDB4BD5CF0864692E5504
EF647FD9CCD7E506C19B6F0DC010FCE8DCDD08229CBAB4A2E07EA595ADA85436
177FB612DF1086FF47777AF97347CABEC221BC0AA83BCC13752550E873EEADAB
3D6B3DBDA97612D20339A024FA36FBD97354086AC8A987B9724E973A6275CB52
A8D92745F733D5E5BBA258475FE5CF6437ED1D81DA52390B4E88CEB88B6B3809
F8BE197A0ED92B8EB6B1E2F0D8030BF89509476DFF4CE0A900FF6938C93B948C
E92C1CE1C13524F4F916BF7EFB5DDFB895491768A4A3A5CA51897EAF7449F09F
8C27CB498227BC7B4C17CB894F828CE67FA8302BD035193FCC5E3D7FD91A1CAD
3A4AE79D34228695762A882FD6A3E2F6D6B367EAA7D2B13810A80CA2796765ED
E5811B2898D889A58131F5B03EBEE44FF76DE5C4F40DC07FAD5E127FE13C7A6E
F36169512C27A7E32C5737350AE3D4BF58A4A7EFE9DB46DE7262A0B5C3FA9256
62C419A91AC606970A433C7726E3380E06C9B4D843644A216FB2FB09352678DC
B8174D7DEF5C0D5BF04F9B15C24BD136E791E20029034C88696773348318348C
2D0B8421B2F57E7C59BD689CCFBBB38425457526901F92B1D88DB7D6359E08F2
FFA5DCBCD9C633ECBCFBB34120B96F316DD72B92608BF033D8C770C2AE483942
EC5A7F99D528EDB8988A17C44C7E88D3DD18C11CD43FF8EEF220FA2D2171CE07
D3D81CC7CC8C151E4D61BE5F019525D209747BDDB87753783FED5221CF1D3F49
D47FCB6E622B8AC60B80FEC0DE9B5B4A911933A8A08D0B94DBA183551CBD5755
BD7DB73F3CF8D6BEC3B63C5E991936339768F300F0F96C27EF13100628C87C15
A828990E10E40351A6FDCA88B43ABE576DFAE4238339A3C22797D50F2DE4C6EC
50252C832AAB63C6779A67F3E52FEAFC575C5A67D6975FDFD79AF98FA639EC7D
27FD87C004B8A6D183AE185D7F094AD1B637AF9CC951A33853963D7080089DE0
1ADCD731D648527626A79C54948F1027FBC0908550C58D0838316C7AD4C70771
4BE3AB335D7FA18C2017F2180F3574053CDF15186B34EC0CB4EA1C3B3D3BDAE7
76580B005F2D7B16F4122A3DF69930FFA55F417937219D9FC32696D004FC6C48
DA617E4F30E5762604A772CD3288DEF5D335199E8843D5CD7FE113BC618D2B53
E186AD5AC315BC0EC15C4AE043F1A036864BE76727743F9266BFA212BD428B67
BBD8568693FB00F24C2F914C7E2FF56DEB89BA6E42C5DFAD288467B608ADF83D
6F3FB82AB159111643966B5FCDACF67029ED9E56DA877B4778DC65FB11FAAC1C
7ADC8167FA0DC672ADA180AE93D858201E964A5473B91AF4CB20D379027BDC5B
0A1C3643BC3E88534A1156431F5C836A5977FE75379ECC646A025F14FFF98C90
87EFE02F90918EB9D1AEFAE3875512A503C12462C7E1301C609871641736D8B9
C714FA8870776EA3C326D3A81DC2CE7BA777B592887D90D661F69FD11B17049E
3249156EF033F401E78D88BD154A406816C5440023F324FF6AFA6EB3968F8EFE
6DB2F4FBD9540458D18B7B753874F0470E031887EB94F08EA07453D932619F67
FAFCA0326224E2F80B422EB2B4830DA2FFDD7B7299081905BC26F33F468B706F
9687B7A35675CD3ED72B5C3C81B91E46CCB27B2D16AC038EE87634B207D5C619
31A106303DFEEE5A81A886B060C2510CF59FC995F12F56ED0D55A5E11CC0E7AE
75FBCB6480DD3CE9B69E7A5D0E31726EC3BF9FD98C0AE5BA1BC8F572111E9D36
8E7D55BACD328619D589D4FDF88B055FD09F339D631A3898702D7039393E4097
2D44AA8E7CD7AB68386DB2D1F82209B63E402ADCC8A9EAEC16E67948298D45DD
F31D82C8E72DE74819C36499B8E1A69C6B2AFE64BD77C0C454F56DCB1A8BCA8A
8584065890A9267AA4C6115407D3AD8C75262EF6C536721EE811F4E14A7913DB
D8EBE00CA7A4BDEC9FCD8EC0F08580D4AFCFDCF7CE6BC04598172A7A4E1264C8
F95871ECCD231668E51C3A67C32E0A9CC2EEC0878593E990F664417C84F84ECA
83CF881296792C4B1DFAE6013D5C9186FFDD82056E5A8E486567EC7A17564FBA
2F76D2572E898B6D971F36320FC667948480FB72F6F27FCD2F650D68AC22A3E8
400E0F0FC48C1B573419D65119C3443AA946A7630D1870C781D584E4E06BCFF7
08B6DC29E0E0E03461C073EA8F717FF2CB892719668573A26C331252E12CB642
3DF7143B698A8275A8D23206617653EF90FACBF480357A897AB7E00F63BD4CD9
37AB74F83F5C4F7FDC0182DFA07C27211C908ECA7E6D1625CE2102135C649AD6
F4DE4CB0506851438EBB53DB7578AB2FDA32F133816ACF8132B8CB38D1A287E3
9663ED82A8EF986F4F240D399E59D5B90D4AFBEA5A2191423E0BC923CF44AE52
0E9E73EA7342C3D5AE46D94C114B27DF4D0D033032B15D5FE88B1F5E68B3AAD0
36DB9BB58484DFFF20AFE3EA186209C52EFE593295FFD7B6A515EAB34BEE6C1A
F6A3C9FFCC88DB289F964656CDCE5FEF246592A1FF7AE6EB0FBB6D88CCA81E0A
F58077131EC3E95A694486C7E2BC2846B1A74B0C4556181E0C116C7AB4C36B80
CDC990D4EC7427C654CC73E9C6911A2A48D1A80F8C779D251A9D1E522032C820
3AA92D6484C4E7FB454C7CD598BCC5FE175E7C17BD16A11DFD7D48F4FE71A686
9C42FCF442B59A27350AB5803CB705BCFA9E5004B2FD887CA074CA9B5A29F750
E5E5FDBFBB4F19F8056D808B6C3229AB971E3044B806D9C695EDEC4479DD8667
2800ABC7ED728A7411BF50A65476FC1930C18A3C23D631551D12C01445B81F33
1BB44E72E742C79990C8B9738B9526CDF2E49673C0263721454B0F0CE41EA8B3
74652297FE6E013310ACD7118F192A5DC7E631DDA3B9F7E1D1A1E370B4A280F5
D6EDB8004BED27A7A6BA9D3513E46E467BECA041B2E38F97431CA954D12659D2
CB5C976B3F94CE2A20F23C8EEE9EC64A3E4C57410956520F9CEAE4B42648D8FA
490F982625796840FB4E075287F5C1245733ACC56D11FBA55340E0D955DB5EE8
A37D3F7E2B6F151B675C58265D2DE692999E8723E431B74ED8DA573375039E89
4A868783704E8026D233EAA993E30D61220DFC5608982CE8CF2F71A0B10F39B8
DAA215FDCF75A893D9E1E2C80EAB7D6C51F04A0859C2DF2E12E9FA6EFE70EDDC
FF061C318E049AD2C62B25AD60AF88AC56E39CD981BB5220EC11A987AD2F2A84
778020679E6289F65F1141122AE6943076A275E75959928CFA82EE01F429DD5A
2EFDC3EDB9E4A4CE375DF221D42B25F5A9CA888CDE224CB1128942D784AD461A
D0D85D554182DCAF99902D2D66F92DA3BAC91E6B858F9393AF9AA5E69F799E01
D301B647DA55538005F7B937A58A9BB4E74537D69A7B009042207C2FC53AD5F2
BBCA2C170F3042F22DEB8D151C7135AB91DE60700C3635D75B805B4F3426C6C6
E12E081339CDBD44A4754ECCA835959913E0EBC550382A10C46227A84A8885E2
F0AF6B7A776C63DADDCDD47EA7CC5A25C793F815B82E3CA9085F57948854365B
07403AAC955CA584ECA05146D2960976543E664CD26055E8F13843591A8845A9
762E3E170F6D341B2BDED5E5EAE49A38ABCF7A3AA69EB19EF3BFFB1E8E849F75
D79A0C7E90882BFDDE098D6E90936089F0C35EC708D48FD3B3B6D764189B8947
259071ECE9D8027DB687567832CB06403D4AC83113CD862EEFD3FCBFA8C93131
565B1EEC7EEA0D39805B15434A05D4508458FF1D6A46682D801AAE769BE7F49B
D6526B9A6657F9558FD8D9D5B7478A9A196FB1265991CF32B732143A7328F6F5
7B13A373A9E0DDCE6E0CB2008467372362F9B563D1D646046174516991A196A9
15CE6918CEBE5861E477C72E6CDA1458BC8DB8E1DA62D42F448933972B5F9755
DB8DDD05ADA032418DF7C8C87EF4E48DD21F7DF140836605EDAD3970BFDD1E72
00FE6F7730D33F243FE4B7BC46BEFAE400803D67E797DBBFD885DC2D08950CFD
3DC46AD166951F2A9A857B97F92D9FE78D095882241ABC1E2CFE3DFB24004666
BAC97DEF29122C7947E62D80E3843213FD0F956931DBD5A9732EFD47D85486C6
04478F093FF1948848A63153DEE22FAA3FAEE913650A3132DC115CA9F85AD2F8
30F8E6AF1241B6C132B2C5FCB31171EC43361229041CF01112306DD9429A8028
BF4BE0A72AAFE74199DA8D088056F1F1323870F43606F42819D52B47DCCCE8D1
29A4C05778EA6E4E43531C7FDAEE4E1255BF293797088E3B532DC9C966801BED
3936EA88BFE61C6F342818AF2C066A217EA5376565DA9283CB1DA863DEA1501B
B8399D2EA78C1A076B525B7B9FB720F9CC78B52ECFBBF0B70CF822EF87EB65D2
F4C5B17E298C2CEBE9B29B21BD4DD5741495A0F18248A2DA3AED625403794A3E
92F2283D1F8B055F5C1C8BC8B2F9CA75EDC7BB7232C6535AA8149A300085A578
341CB0953A900D0847C53F2BB94B808E8EB0ABE955DFF5D18D82DDC9333A06B2
2CB381C358EA9F015D31C4AE041FAB38A00EEA61310B34A303CF124EE0641A87
04FC0B84621688A431AB0E740972F7E3840EEE67CF5E402D7C685C9208DED345
37CE2D914FD756CFCEEC3CACED14896D6034D50A5444881CD32792932C49DCB2
39A8DDF7AB69F9FD4BA1CA99E85585BDE4A784B0E7596B436B99895422AC9A90
A43B98F15E4BEA4C589C08E1946AB7D45710ED43928BC361DB74D2F14281A9EE
A64E716FC9B7CED8E8D3458FDD11831536E2F66A2B9F9683381C56776D27F95A
A0DD5A3409FF6CC8F3C38638084F8F4F7DA8B4AEEED923660588F9D92761A539
6B67E8C921751FFBD0822E7A091F1F6ECA53454BA332CF97F6E8FDCB38D73906
38D8A07E082E0245A345C88143F0F21CE2ECE54E69537B45FD8A6D773E75F0A8
B926AEF65481FCF8569417885410EA450CA5C29205D8D96E1CFED188C1622458
380F0F87DD5A5D1AB1E9F77B0F4A5ADA6AAC4AF5B21906B6E84FE85C612F1A0E
540B3911A7D28491883B928672AF8E7EAE1C41C515735F1718E0BB5606C2C611
97C0E5F91566E0A89BFA287A8C9946FD16E663D804A178F70AFFEE9A30092015
C65F6F7FEE25EC23E52FEA2810AC95874B54569C2CBA973DAB64F39042A3D1A3
115330AB24B66AB67DE06BF6873BB537B2495B29560524FE6C4C62ACBA00458F
A7A17EB94BF1DB662D44654351CE8F69FF905AAEF9CAE80C6547EF6165AA27FB
7279FA09966098754F32657FB3C5AB5CA29075447C0D5070FD4D4810458092F2
4DBBEE299269AD07C9982EC3116BC912A5AF316E663629E12C2BE1A564187FC4
389F3737C587EB28358785A208AD595C436445A6647921828BF269ECCD539C24
8049F215BB0F1087E6E52CB4F74973FEDDC9F9A86E21AB851B2E87AFC42C04FF
587430F65BA9DF1583D4EC2CBB488902ECE3FA1653EC439686BFF1586A6A9337
BAF368EC4B02423F6A8161FE106CAF2380521CBBE0CC33547FF9E4EBFC4A64CC
4ED3C7238F9920FACC689E38310E3E238ED8CE6105F38E5492F48B320E566E85
D55E9A3E502F610A2354920F33400B499E55A725BF40CFC45DE1634C04CFAAD3
33FDF84E0F33A2EDCA759A0A75B2093D9CE3EB8C164AF96CD432CA1FD18BBA46
E12B7FB0C1DCEFC2776E555C95E052E7A9E4A233889A775D5EAD03A098D7B0F6
0AD77F07B92B64091D3187C8FB7D0D03261C60884073554BD0771EAE6A1500B6
4835A2E2A776772AC3F878B108184636AADE0BE52F8F5E8CB89C04C5DB586DD4
F62A957653ADA530454ACDF2DF186E2AE30B7640F5594619C64D82E3090953EC
5DAAAA0A3CF68F9127397A65293B2C06D7577E63B4F7261D63C57D648AA8C8F5
27C46721EC82D04BE3A16185A4C20320834805E0C569B9F3C674BF21BC07053D
AC9D14E753A169A6E0C592F8E07F69906E7ECC3A9668D404926B97DDBBF7BB19
A45AFFA3D33E34737DFB0B5C7F928ED5ACEB8983C90C7EE24D2F4C989C902067
EC814CCB0FCE41E82979E9E395F5CAB8B43580B75265A4340B4B25148E9D5079
29B6F1C0FB4737A70B2115A6052403D67DD7B1DB8B144DAFA82EDEA733FC0BA0
D0CBC09741E2900FF064A5EBE9A3D9D00CFCEB9BB32E7198E73357DD92DABF13
FE192599F5C1BE52AD65C5F78B048C0028AFD1914363C89CE51D484F7E497656
00A125D6DD423540B8BB0F417B0FD2BAC23CA90A1B3FBB12A34A1CF8C85417FC
C5F73112FA6C95BCB56220D9AEB0FEDDC98316198B467DD3826B7347026CF6C4
6FA8D906F8804AE579C318F35CE170D31F2B166C76DB474EB5727CACD93ECB15
80910C27FA970DEEE4ECDD9D9DC0D6A9DEE909B0C15D83660C4016E3BE09EBEB
ED3F536E1E7E2F81F6706E2068D2062078389A7854275094B9437176290ED50B
0FDFB060B0572821BBE05576D38E83EC6AE6F1F2692E16C1FEB11AA276958E28
8321FC1C8494044B49EFC48E42D796DD52F406851941948931B14B442E2359C0
E8B82075C60AAF40731385947B28941DAE7306C7F0244EDB76DF56229DD23E89
B6ED615FB1A022FABF29074FF629E2D24F4B9CD1E91DBB60E01D4CDDFC2E9BE4
709956583F3B9EEF0F244AB805D6A4A2AF0C0E3214D246346E0029234B1663B3
81322FF56F1ACE9C2B8568CB73C7B1F95DFF3FB33F02E2998A9420EBE2066A09
7D611FBEDAEFA8B71F745090D8BEDBC93226677F51BD842416750CF10C251068
8D9DCA5C19DACFC81E5E9F5F3A11F027A603859680902B9B5A7A24CA8AE25A7A
DB9619316EF9840A7D5566D25100495FAAB9E374DB76974499F37652DEEB9BEE
80549E344665D06D282A433E1D39DC0E5657C31D96285557B332CEE2959749E6
10D022BE96D537A847D6F72E2CF18575EDDDFEC4E1B24553430248DFC0FAAD37
018CCA129A4897876302C02AD8911F0A9016402A6AAC857254CB4052E719F3F0
8FC9D7279E43BC129BAAD438E87189F2F6AE7C86F4EA099DEB23773304308BD6
2BA71A8CC282E6E4F865AC8FDF8DF56A82E0013354CC0ACE378141C63CFB2BC4
A0C8967E1AEB91C5DFB164D359D7B3020C65DB0A4BAE1D4C27FF32A5D7850F8D
941BCB25FBF929F49068E8F65763CF259036DB913AEA52710B82F265007F942A
15246EA5F6A79C01F1D6ACA7EF735E4FAB04830EF077A8D788B224C18433933A
8AD0E9A9F41983B1FA5937DF0AFCEDD102A2DDB4A41264D7A8A0E4EAE70EF7CB
51347D2E43B1A98F0CBEF607C948A926FBBC5EFE57579556DCDEE6F046C925CF
E7C3DA31A3F96559437C643C38A366347CBDAB77416052571E170A5AA82676CE
D5DA17E070DC8FCED3EE8D87B0121E967A0B57292667587129C9A453008969B8
42725D1535CF6C59BFD426181487CEEAC30BFA69117AADADA1BB9EF6B4E59F01
ECA50E9C4A54244D0B32FA20B5A62D755CE6C3090F5AA6AFC93CBBDAA93953F0
A5AAF090841E8D1718EC76B4126B1DEFC3C980F9B685AAD92B5D8D9AA0DBEDBC
EC5599C64DC58CB532690B4BB9EB9D711FA0C386F50D2C9FC7F252AD669BB39A
19492924AD075BDAB11CB8C655A72354626722C510D6E242E10F8EA634943F50
ECDAF201BBABA45D25F499DB75E546F91732E99BAA2399B63CE46DD37782FE9E
0DB9C980666BB2711FDD7AA1332DCB27989E0752A84B86E775D1DE07002E8696
1D2048A927713588BB8FC5EC6F04D334F2B7397413809F1EED463EE08956A362
19A56003AD9F76C339F7B421983E6120DC0A4FCB4BEF42E8FC00AE8C3E6AA0A0
78EAE6625F43C8C2589994EED0B3A40E4CB92D9B3761373A4930CFC715C53E71
0CC7E4C7740630272EAD8A26B00280FE57F63BAFAA39CB5BCEFE67872194EFD8
CAE9D9C6547D64883EF70310C998CCA4B0D7E2C738FAD743973C6C9192E77664
618562DABD7DB8E7F480D0521581902848649D7ADA354BA4D0877645B9308173
B8732C4565BDFA3003946EC4D6CEE647700DAD2DA776EA703E6EE873EC0467E8
44915FDA3D82FC347F0D24314DFB378B7F001843D571A369C60F7E720947950F
2AFECF78C15AF1FB203F7DB44765B11F1D1501F7C4FF2686F1BF27180E6F9B00
9AFE182C61C6E96F276FC34D2809D0D8DF0356D99ED3DCE17B59219E2AAB8882
19F6137AA280472F2E52D33BF48225EF8C41223C3BA112D4E478858D7C438497
6168521920D4846625D4B99B6DE0AD0EE5F36F6CD5776D5DB1B74D3FC87DDFA4
512DCC9A59051FD85BBC6789FC44AAFA6D3AE571FB0750B8A0A27B28D12FD998
E405A987C4DCB3A738C09F386EF3F56EC86E8811E72560AB949B60F5972008F8
0F688C98BCD3BC9F123D0AB5C3DC10D6E586B404E48B5B4511A96F0B373299C9
5C2D501F8A39D65A96A66B28CE5F7DEF368D95A466801A856D9077411E869EE3
11F92B0CA6010AEDF8390C346F2C10D7B1054B97C302C50445F92A42F13233C4
CCC96805B5AD8114E993312CA2CA8E73252A23E0DCE83210E452BA080C03FF3A
7328F0675312E88EB77C1F349D3BEFAAB89187A28EF131E429251F2CF7737E3C
C82AEDDEF7FBA2546ACAFD43498D6FF77B12E0C3AD66618447DC37FE94DD3D88
8010E3C3805C0E407B0E488D55BCC4EE3500EC9AF91790671E766C422B5475F7
4118AEBC01F60262586BDD20A1184ECCA49857A84C752DC20AF2F22969804D5A
884CEF35791B1630B8CC400602372BF2B9729D821A95E113828FC83BAAC642E7
1A4DE903C466940ED136F05CD2E3A0EB810C9CC36147EA17A3AD28B3B4E057ED
EC637353C7D47BF41FBEC8804F4CB27548193347AB77051B3CE85340294535D4
C10F4267F0A1CE463A36F540B77EB94DD1BB25D299CF802690ABCF79314D2083
63013D8E09405D069A5E6BCE653FB8E886A17B1B815B966A2F82D27A9DE7D80D
C986174F21F5E029C5477F733931E45172FEA995C8EEF1E5892572D906444679
3103EE74E3674D454E4ED18C4049CC188603AA649B143D0AF8ED5549C6AAE205
6CB249F36E0BC0BF2E27A0174B386157FD29FCBA3FAF5E895BE7D9C19A710467
952474962FEA3B21017973B3B0C45734AF5241C5ADA1387512EC1D04E9520601
7FB1F41C13A2C30061AE8E45531A2C291472A85B40D1FF32A34AA6FD8B4A9F2C
9F07CA33BF3D4D3ED2092876371D5466B8FF94029D622FF29E2C8B4244E4E16C
2F46D653506B4885217F13300D993EDF98E572308FBB80E7C61C51462E10C82F
00C370850F9ECB8F2E788C935D356DE38720E5A7B75CF7056EA47396E7867482
FEE97C700D2693B607A67E0AEA543AD75C807E736FC6CF55DCBDB64F9D04CF52
CD03FE62369EB7121FA612B45DCB6AA66D60F7565B29F58249DAE03DDA74A59A
2E8C0F5A290CA767EC7EF8F34D00DF035B7ED2E30077811C4AFD5B332A80CA5C
31C59381BBA33B750675786A99B8993C25DE87F35CD9EDBBF10DF51852ABA131
ADCD973564206FD2E7E3E2F19EE14737D3035DA2738F43CFA290D0F4FFEC42BA
9D162BF6F4600DA9E1C448DF914D2766AD793BD03D56CA1E57276D48633DCDEB
7F9D21B332CE4982A6E06A51D30D7F0ED561B23B0917E3BEC5BAFF0157B38044
B1A17F6FFA1AC28B04BF3DAC8F2DD4026EFD3B57466FF41BCFA9B63695100CBF
C23DA2F68B499386161B4BD1FD81C10CBFBD33673C5BA58E2B021580D63C76BF
196397BA29FE46E4EAFB169059AB4B73778162DE05D5AD60E54FD595E56946B7
BFED3CBF2AB505BB4602DDC56B18D48EB65331B9E7EC901725E190598A31E0BA
4C800DC0E41309CB4D90B6068A5235A94489F21B514032F3FBAAE784627A2085
5A6BEFC921B4896D04E61B913B6C4170C1C69AE7B637C6925E0CB5BD96BC4B93
74B2629B64BAC61ABBF6D6BFA573C863169A9CEAA3A23CF51ECD810D5C249C19
D2FDAA09793C8A74DA25396CBC1484DB56560791149D9575D9C544D7AC4EC43D
61AE55987BF22378DDEBB657D092E91E40D571A0BDCF87581D59EF8B0F11669B
5112E533EE12C1D116DE33B3B49CF35879D018730FD0603AC9990FF6310EBD43
06E2D9D1D13E303C932EDEC28969E6422525EE8072950A606224285C7B6382E5
16245ABFFD458CC56D71647B8F6DE3CA2AF29DC60C5F34CF57813377528604FA
E8139078F1738FDB78BE9E806E91506AA8EC56AC0360BF304F643C6EB7B9BB00
E4C7E72F8677F853FC36F65D7FF4172403E5B2F79ADD3022EAF71E674C4C2AC3
0E08B95805267B9AE33574BB156C96E982428FE4927A93B6F625E5B15BFCA50D
76521DBD08C0681BDBD00E698BD57D123708E5E5A0E0A71F9BFE330C32D011A9
288A2548510A255027D81C4C17B989618FAD6185729D9BD20C1AEA9C0ECC5E17
87985544273ECCB27B5D1115AC1CE74D6E40BA17195C8530C38F937C6A51F460
4CC26AE9F80814FA8EBE5C94E48D7DA7326E022BA9CDF2FF821A4C8F01E5693B
CBA645B07E11D8AC59AE55F0F7D4C66A50B3F8A942B8A4B8C07623DC3C8D72AA
BB37E7010AD9177E3DE2BDD299569EE578CAD9374F95C57AF5D177C955FA7338
C0B72F0E645E20B59CF5A93E325980219D6D7A5DB0097F8B25CDFBC3EC2E6F83
F3C859EBF7D280D4CEBA3BEE9409F87C520180CB467536241F0921C9E55F66AA
6BCF0A526F035463A90F5F16BE552548068DEF14D4EC1F2A99105A161626DE9B
5D9564B980FA031E097EF962F957C199FC3EEB1B2CAF8C3E319E894B54BAD7A1
83534F982D43F3953E7F8BCA35605815E0FFF7BBB51EFD6BA21500911836158B
1455DC4E3E2050CF509F26CEDE6A24BF40246A18A8D921257BE9AC6BF7CB079F
7A376EAC4EECDB1B8AFA3CE22F8B07A8C48FDD4D13356921E35CBC11D4DFE8EF
BAE640A2F4B94F244D365B70C4212712CDE44538376F3F6DE9B58E8220749D58
D42671E29C366993193033D9926EA4B86477CFEFB8533660CADB940CD3518AF3
2E5C3204B59CCE1CB06363EB36E7F0266DBC6D00C44C6FF0D374BE43AEF027BD
34EDDDE60F8108542DB97E41AEA8DBB99BE5A0247118771ED433D93BB657CEDF
A552DF5C8EECE720783226FEB405D4C102DFC3CC229860CD9A02E15428867CA4
1ECC3FE33D8C93D24741A566667F39990AEE1A43CF7123A65EDD143AB5D89C86
A10DB1C93E41DB7BFD00B4DC5CE3355A50ADCBBD45C8063A5B40A0BE90965C2C
34C42797BA6CD6DB3BEC3C4B136DD1716603D89315F3462668BCD5C44675717F
93ED168ACDE600EF35D20AE7CEC718C4017ADDC3D3BC796C8A29BE4870FBCDF5
8BAD19C9CFA9D528D104702E4E118D209F1234B69484C237E2D1E2E64C0D4832
9329AB5E5EB2A440F4EE508D19B02F0212351ADEA2BCE9E77D442B31E60E5F86
52CDAC1C07FB4D3CF9F916F9153954B656A967DD5572E37D066BEA9DF21D556A
9B6781C455C0C82BEED71E9593D31072A4AA9719189186CDC274F36C4D9CD25B
A5149EB72643B4AEAB4716063BB564BF39016651B4EA2303F1CF6C3E5671225A
2170A260CC389ABE6AB60356E653B40BC64B4524925A70ED96BE47B61903D2F7
14184B5C774057466A889079274A55DECE2558496E6EA9D525D3355CAA69F4DB
314DC2C3518509E389EADCF20EDB974C8E3464D5FCEC6D411750C9312B8505E2
D68AD288EC560492E99596395AECB9A0B0D0BCF46A43C1BD8296324F08C0B56E
E1C934513A7ADCECF3F84F8F83196D6B0A220B8E3A9FCA612D35AC1ACD31713A
7D8FEA52AE1C01905E075CD64CD3912BEFD83E5C0CF4C2A2212001F3EF1EFE30
2F694C56C8F13077DE95B95A013026FCA4441D69C43CA286DFFCBB199497CF36
780916C17E86D2B97BBBFE571A3C0D5C33CD8301CA929433E1F250004CDCF127
45359AE31AE3453AA60A32F061B87B6C7379BBF8DF0C3F7F289A4F965D7B5F85
5EE5DA523977FB149576AEA5549B61C5475F71591C921EC9198BC03CE04A0F0B
2113C7B19A19D7E7F65D73B8B17E13CCBC9CC1FDEA4350EF9A72F38FEA8BC5A7
8104021E7720C1A97D522C07B0F972DB969DB7745EFD2FE2575EFBC3F9FB951E
4C6A881D35642453CD323E9CD281AF0BC516AE5D6CC4E176544A47869A64E63C
E7280FA657F157C5239A213A2BF53DC4A68B4EF2356846F35781461FFC94C69C
62018D6429EAD8B7F87627FB8D95F160D512DB34598B8CAED5B6DA81A6C816C7
4750D618B21204776A715DE0C28F61B1C5B1B6CDE7CEF52DF9691C793793874D
67FB56FED27A49D84636BEAE992F5973B33BC9910BAE9983A72074C64D6788FA
447CA76FEB977378033C85592A0C3497A03C16190EBDABB792CCED040D514605
0BF63E41824B169D60D5BBD0B9EAEB5A23EA6BE4286A337C0D3C943E48DBAB63
CA3B171E6A9C4E66A693F7C422AE38DAE2C990FD54BE878B4223DD8E0E07FD8D
4619BE05CF8B91285D727F6A3F7C7EBE4EFBEFECC095EC82A83DB6FE4117618F
07A640306AD86441BA9A6E169FEFC0A3D8978F497B025DB4E92463291A20C992
D04A70AB71DE0DF3C612B186A0B1D7C64DC5ED744DD13A9377EBEFC6206D3726
75CF43235722B50C788807819F0A3EDA5BBEBF135FBDDE4099314E3452D1C306
1203649E488A00C554429F72F81976F8106FC0C276CC5F1E1E8AF54803847BC1
5E9B1C1C9CC76581A50B6A610311C0528917E8327FB8B6B10274907C8E9A2894
5C765C9072D2A38CFA76772D207D86EA2B3207A0834A7C7832EED50A1C494EC8
281C0D73DCA828F2A718058E7468283626B0BAE01BBBF1C500EA0D20B3129D41
975F0CF5FE0048F6851FB7B7AF5E00DC6F3244CE212EA0D866CD9E12CC9903CD
874CF3292408A5C9FE8DB34D19B2D50C3CDB4EE46043C57A8C087DD49972485F
216CFE6A820F229E73852894E5742F808B8FE40033F996CB2D52620D995DA929
4C16BE06312471BFAE63ED6C9EFA1AA85FF84C8CCF94937386246EC442D997A5
3472074E1C95F4A4B761F25B493F070730D8E13CF01E975595338AAC667E1ACC
0A3D0AF0B6A0995FA69DCAD9BD76B717A8CC0B23758DE3959BA8CA4E6635A56D
5DBEFD24EFAADA5632EB660B9C433383CA46EE9C71DCB4258FE7BB17464AC3D5
E49DA8976342063DCCB9A129D81E1E4DAAE3933EC28FE870B33ED29E9079E877
875E1DDF4216722FC4627B0C25CCF9CB329F1608D3FE96C92B5D38288C05EB25
65B72DD5551806FE22B8C7870AB75D023529C0379F46E76841E5D58EDCEC6652
101A123983D59402A6FD9A8CDA31721458D5A172134D242ED80322C17A201E21
DB8536FE05257C57C27C9E73C6F5C9AB50F2A00040408824B154B263446ABC27
7FFBC00A9912B63D112C1E515FF44396F19103BE799B7DA7D9135169DF143FDB
3544C74E73E2FAE75F864BCD7D68E924AFE2DA1071904B4BA82476AA771A8EE2
CF69152C699BD79E5BEF8DCA09C1390AF236045767A1FC5BDCFE593249875B24
B0C3C377733EA71522EDFC97C94FAF3226B6569903800320CE9D1388EBCA8A22
4111245F3DFB40EFB5A1B8C40A17A78F8548D33EE03874442F3FE50980598EF6
B3D8893FC89A8B8519C2132AED3AAFA730E8E2000E4D09C0D9678E067654F528
202F7E720B7FC396F9F6B3BEE984B17FE9303F13F830A1983F83CE61C2BA11EE
C4D17D47F0623D5C74290C7B8B99D7E869CA4CDF1314690CAC28723484FF9AAF
260608CB0C8C8E4C458DF0E5F1F02FB9E20B727302021C1718170CFFA63E6C3F
3DF9529F70D2124C1A7E12AC44EB9233DCCD6CD11F6FB7E02F126E2B03A79BDC
DB8AEEF5C8A187BCA4431436009135FFC331CB065D7CD605E6F3644DEB80F29F
6EBEFE521EA9C1F47891F67F1959210CCAC2140948DDEC3BC4B8E964FD5DC5E8
BB4A6A8AE376D04BFD85CA598C6B95C21125C4FB304B19F09AF0616FA8297924
F3B90A08B6324800783A34A070F02F40152B38236F86318E23218059D451701F
A26E1438D91E5A8F0A6DF5A3406A406B8CE651196D083D04C743EA4469057E17
84C7F63718731D34A0A14A09C98519216D1A74EF9C325EFAA113136CB1F6622C
E69A457B56BFE6C89F77A8B2E73FAC03780258275D3B889271399ACBD4A68203
EEB7194645A455E07DA7CA63CB94A8E0F913279B61F3BA1BC5D0B8004061FC60
5309164FDB2728D8C0229274345CC32985129DE113E5CAA8575B11C1C4650327
3550A3EEE6572B38C5C352B18CDC5C987015EDE80EAD1FE106186011922FF8D4
D1A922A1A887BC8B4D46D63682AFD9CB30F772CE4F3B84720D1BD2252AE2D5AF
3CCA4A47F78B43CAE766E1A29D774EBAABA2FC5E2FF876E4CDF4A0E75D506C89
851DFD4B106100CE032F8A029F75D043E880341269B39ED746E119A99366A0E3
533B56765177B19957EFA9AFCBFC785BE5A0F3BA9FA16035B52A7EF6E525B313
1283593385589CF16A7040E35595948F4D66589C1982C39D1BA07167109922B8
00BEE7F184D1A05160F2078CED8EA7FA0ED19611FCD81743989C7E59806FD5F6
E0551711F19CE5B112B7EB6688DA5FC9D569301CB6D6618F77CCD2A01950B962
7E3683751E635DA15E8022B783E07457698B8EFD8067C43264C1A369407524DF
80C895D051CAA43B07F55A4C4BD49C905636F2E493D429FCBC56038596BFDABE
50D24629A74CD9DDE6AF7AFA65A648CBC2836821CF47CADB2283E40B81EF7024
C475D2DEC2D7ABAAAA79047D5C41D727A2E85CA0F121A042249A4BDD03A31E7D
751B9D807AAB488E491DFEE0BDED6F37F92CCEEFC178B948104127A22BC166CC
5A82F4B59E58C9AE45947AD01422EEA5320CCAD9722595E749B17C7F0FF5D865
32D92734C4E4F0B6D3FB36855B787F1FC8269D9D793568DB62510D4E57FC1B20
5DC984EF68D4F0C8733D940090032F318A00942DD848B8D94132D153AA9664E8
C6CC1D6E17A0033DC295032542A8889C725A3F1E0195AAD42FA7C33D55AF0E3C
75409BDE3816117241F3D4BCCF3638857C25629BD4F780B2C02845391E844C0B
D6C61F8FED92FA61FC5C2D7929D43D6AB026D05F4DF0668906061E7AAA9FC61F
6094878A670F0B7B72009F510776B96B3A6C07CD55F248F2710F0B5016A174B6
92084D0302D74B6F07252332BCCCD9BE31E4A7A6079B6E27AEB8BD7964F37B92
89D1BECF5E3F52E56B84E14B19CD9F64C8C4C64C9FF8E07F69906E7ECC743574
DDB63A64B204F942E13CF50F7FE5253FE5AA77EB00DE1FE2F30C3E84FE51048A
1F955DF09912EE0CF7E8AF057936A3B6CC0746B4251518F5F104AEFDAA8DE659
DB05BD3EC1E99E57A475AA5F9B3EE149554EB952D2A06D931085B1F12A558F19
BE400C457621B3FF751050FA2E8E9589EC006FA7E37A2362E27718285591B315
2EB9CA28EDCB62F680813680A34C45485A7DDE1697AD969F780E8780128E49D2
9D05BD08D97D3291D0DD2038E273DBC4C6AAB2EF1A08F4592651C0630CE636FD
03352B111ACA7CDDE0B2EA28F51480A4676D23FC0E904A60113ED0BCF04B6E46
B6E04ACD954615B3FB98C9054666CD3DD128179D779C844E9B23E942A41EF92B
C13429D735FD5A1A4192A2B0C8AC6B01800002B474ABB0ADE768EB4B6958859A
1C6515F450FFA9974BC93EB55A6AD61158A2BA24C9E0FFD35D929D6F658E1AAA
9ADD8DD3B33136A58BD4DAEA8EA98C72EF1F9137251FCF31CF38E59D03F0AEE3
63B7B67320F08196EA22F6E18882955852ED24FAD6244DF68CE4F14587D69194
85DD5A21F39B69CF83B19D9DCF561D15EAD7AA15FB663A04001D431BFB0F2867
535C1EB42F5792BD005EA9750A2AAB162FD2CF31B6072CE4DC8C6F9E5718DFB9
9CA7E44B6EB2405083E7D5D3AC0D38249E47AE1B82C057460641CD7A64F67427
74EA6FBE6A44A6F2D97BFD4E204C94BBE5CC20B3189570235DE007E786371E04
ED92A3A341ED546BB25A11C22A2FA3534A5BE207F3800EE041EFA3891419FEF8
3730542D5636ED8EEA52197B2FACC69F3EA6BD8997EF5B5EB49D7DACD44EFA85
FC190E9A88B6726046B176D5CE5753A9559BB193BBFE5159FDA8635BE86253DD
07517660B5ABFF2E8A3C63B0101078378C88E9C1731323DDFB83A32387F7E9CF
3C21400A5F4E7E6EE9701BA3F617866B0E7B4E05AD96F08FF2181872E037B5B1
7BEBF338CFBE38C2A2083F541EAF2531267E1786D3C94E91FC3F87DEB0F66327
5F9A7506F0A71E6F76B1261FE3B951EB3B0986E41509908B407C16D1977D570C
7407297BF2B08A8087F6BEAD501A1C6E698DE4836A0D7D7F60BDEC17DB3CA0F8
44C08C1B852422DC47EC112557F2C7039D317557D2456D97A0CF5D50AD17DF74
CA0C151571C546B12CC773E8ECF917A210C7C4E4F00CD0C803EBA15009656564
BD626C19427020D970C8453B81AEA58D29067D66CAAD62C65A010FFF6C769012
F8383D19877F44D96174AAC85564B4E76F5DE92112CCBD815A606FE4E80F6024
620C32A0CD8ED41B2EF008B7050356C9DA1EB2DB7833C3E142A27F15C6CAEEEA
C922B8E7FF8315C0048F2799AC25FFE6FA5492FF700D89FDFED2693B4BD0FD93
A5565C9359F2A308A1D3276B8DDD297AC41558C7C19665EBCD0BD1C62E95F69B
E6CC6C7EA8D3A8C1810BFF32F7E501EB5E0832819E14CE42558ABC90B69247D4
A951894751EA4EF424CA7EB77598E410A0F0196E5331BABCA8A777A8A6416617
A6D6AFDF411BF652B356EE09504424811992A040E29AE3CE4742899CF1BC9BA7
8F554BA00B9EC4D5FD0C1C60195EBC52A8268949A179631F63784B005060FE60
7CB957BC227BCCCA1AF48321DF28C82DBB9BC3733D52DB3D144DE465DD11AA99
7F50145498DB3283E3EC1E116699AB8C0B4FFE591ED481FAC3EBBCD2DC470E1B
3BC531B58AFC90BEC0F8D6128520A34ACB3652BA4525A9BAD7FB319982B1C200
EA362277C7E7A2E35FAFEF2243CE53B6E164BB27F5C0CC833097E3E1D60FB716
1459BF95FB59965AB35BFFFA48641CB5F965AA2AFB5669696BC085A7B04130F1
D4CB4D556950413BB3173AFB4050DFF8486F20890388DA37D50213848AF68726
EABDE844D52BDBF6B1D770A953C0CEF51B2FD6DB6232EEF6B5AA1088750B7D00
C2E01396A6132227F8E65E0548A224959D0E270AE802B622BAAFF7DC8241DCC4
E5F9C7B68C529DEFF42F65C9DD5C9DDB5B67852827C3B145458E053E16ABFEA2
20FE5654CD3F21C6EB5B39B7AA7A79DC7F9B5413E267B0988B90CECC8A4E76AE
9952C0F8C04402EAE93D770B03F2731C5B8551E0CD32839F344A9FFFAA081186
9E55DF848D7E5BA9FDCD14661F6C7E47C48067536638F2563E2DF475AA298E96
935D7281D1A6A8A3F63EEF578ED99EC657849A960D9873993110AAAB66DAF96D
21200557001CB7C745D74BBA5E2BAB8128196A22544ED090BFFCB96AFB6ED375
5F2EAF67F1827D9E548BB4A36E58154CEF7B5C09E82F40F16119187B1DCDD5F8
4F3C50117F95FBBE6BC6B5FA674CC40617A82D4D681DF696E37B6381DA5DCDBC
55361E7165BC691BB3406829CBC99DCC73D0DCCAD3C18D773ED29A3F3C9BD3CB
96974602CFA5EAE2D3118455044CD263E028F702784E387FA2CECA7C01158CA5
5C119D6BA9283C269D2E2DC3012484C90E50242780DE63788E58580892291F58
464943CF264096D5E2A9AF19C3518099E47F24B188DC960B92341A30AC3F431C
F4718570630097DFEC6F7D06D24B7DA558291FFACDA440652AF6BD8222C67786
6DCE683183C7FCB98986E17FCCB4367DD939909006A20D98B951327E0AAFA586
1251806A0032A0CB29B46912D6FD1B6AD289F11FD0A30F1FCF22DD1F5B30ED4C
953AA0136A322872292C49F3DBF72C99314C90C709684A0AD74DBA79D89DC565
746F123422692576C7EEFD54639E3B9C7B055E3FF93D3375F43B161012FB2DCA
CE4D92E8680C3A147C8099DF4B2177A96DFA825AD8FEA2AB4511B80CB5A3D1BD
987D661DB928E648362E5E385FF187F15EE125EF085DB5F2C3D98E90FEF7B4BC
08EC3D1FAAC786BC12C3988E4891239341458767350C6E58B00FABD415EB4EDA
A98392BECF06A149F44BD83C085E3A3A6AD70CBB041B2C1C8FB9C0CBE18161F0
ECB3DEC001168F4C02BE65C5DF517AA2725F29A668FFBE9CBEDFB8D5D93690E8
9FB3983FD6236BD0C80DC56EA5D9B881860E7ED2D264359B2360DC87107B3D57
9C96D321F563260C93690FB31C6C5DA066A72E25ACE6C9DCF85BCE9289D5AB06
FDC20EFF7B42852FE67779354FDB49108CDDEC9C10DAF3CA131539566D7BC863
51818493F7BD59B93AA0213A6B40ADA8DC515F3E0BA3B7A83AE987ACC3874EFF
36D1AA1F3A77A0AA2960F8D54E965C4D31CBF4FE29CCBBA3AF9EE4F427A3E842
6C28F373498FFE61CA2EA6FC44F0A14EC0C2A3DCC9706C3DFB8F1208A02E4541
2169DB46D9D5006B76A1DA436A9A605E597A1F55A06707A0856F7D7C98EF374C
75299AFC5D14A07BF9D21A5DA9CDBDF7D8202932B61C1A46E692295B04CD6290
DCC5404D8C675C8F369471BDA80B083A4D1EB0A34C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
TeXDict begin 39158274 55380987 1000 8000 8000
(C:/Users/Chris Notebook/Dropbox/Aufgabensammlung (offiziell)/Typ 1 Aufgaben/_Matura/AN - Analysis/A)
@start /Fa 153[923 102[{ enclmmathit ReEncodeFont }1
1912.83 /LMMathItalic12-Regular rf /Fb 203[674 52[{}1
885.568 /wasy8 rf /Fc 207[243 47[640{ enclmmathsy ReEncodeFont }2
664.176 /LMMathSymbols6-Regular rf /Fd 165[615 7[523
48[876 876 19[369 12[{ enclmmathex ReEncodeFont }5 1106.96
/LMMathExtension10-Regular rf /Fe 138[449 4[449 3[234
427 1[234 3[363 449 2[406 9[811 5[621 22[234 58[{ enclmec ReEncodeFont }
11 664.176 /LMRoman6-Regular rf /Ff 254[337 943{
 enclmmathsy ReEncodeFont }2 1212.12 /LMMathSymbols10-Regular
rf /Fg 140[478 3[606 673 4[337 5[539 37[943 10[606 6[943
1[471 471 40[{ enclmrm ReEncodeFont }10 1212.12 /LMRoman10-Regular
rf /Fh 135[693 17[593 36[909 65[{ enclmmathit ReEncodeFont }3
1212.12 /LMMathItalic10-Regular rf /Fi 133[418 1[497
2[523 366 371 367 1[523 470 523 784 261 497 1[261 523
470 288 418 523 418 523 470 9[966 2[680 8[731 3[738 614
4[705 1[444 8[470 470 3[470 470 470 5[366 366 261 5[261
5[549 27[{ enclmec ReEncodeFont }38 885.568 /LMRoman8-Regular
rf /Fj 173[959 3[959 78[{}2 1328.35 /MSBM10 rf /Fk 199[406
406 406 406 406 406 406 406 406 48[{ enclmrm ReEncodeFont }9
664.176 /LMRoman6-Regular rf /Fl 135[530 1[458 1[340
5[571 2[490 1[320 542 448 452 2[408 403 500 20[640 1[514
408 773 733 595 690 772 671 710 705 5[261 261 36[549
21[{ enclmmathit ReEncodeFont }26 885.568 /LMMathItalic8-Regular
rf /Fm 27[664 111[432 1[548 5[332 2[399 3[598 30[848
70[{ enclmec ReEncodeFont }7 1328.35 /LMRoman12-Italic
rf /Fn 203[993 1[993 50[{}2 1328.35 /wasy10 rf /Fo 242[1594
13[{ enclmmathsy ReEncodeFont }1 1594.02 /LMMathSymbols10-Regular
rf /Fp 207[255 14[941 18[470 12[261 732{ enclmmathsy ReEncodeFont }5
885.568 /LMMathSymbols8-Regular rf /Fq 198[470 470 470
470 470 470 470 470 470 470 4[732 1[366 366 40[{ enclmrm ReEncodeFont }
13 885.568 /LMRoman8-Regular rf /Fr 177[830 12[830 12[553
553 553 553 2[307 46[{ enclmec ReEncodeFont }7 1106.96
/LMRoman10-Regular rf /Fs 160[909 45[606 1[606 47[{
 enclmec ReEncodeFont }3 1212.12 /LMRoman10-Regular rf
/Ft 134[634 739 1[629 1[470 613 586 1[653 1[776 1138
1[676 2[749 623 641 603 676 560 553 683 8[1079 1228 1[883
762 1[990 1[838 1[1042 2[1107 719 574 1078 1026 842 963
1080 931 988 975 2[1012 650 1012 361 361 35[783 759 21[{
 enclmmathit ReEncodeFont }43 1328.35 /LMMathItalic12-Regular
rf /Fu 143[1107 1[664 3[369 51[0 3[886 8[1328 7[1328
7[1033 4[1033 4[664 13[369 1033{ enclmmathsy ReEncodeFont }12
1328.35 /LMMathSymbols10-Regular rf /Fv 140[513 3[650
723 1084 361 2[361 4[723 578 5[361 1[361 29[1012 1[361
361 650 650 650 650 650 650 650 650 650 650 4[1012 1[506
506 2[1084 14[650 20[1084 1[{ enclmrm ReEncodeFont }29
1328.35 /LMRoman12-Regular rf /Fw 154[966 101[{}1 1328.35
/TeX-feymr10 rf /Fx 650 2[723 5[650 17[650 7[975 5[1012
17[975 73[578 686 686 939 686 723 506 513 506 686 723
650 723 1084 361 686 397 361 723 650 397 578 723 578
723 650 3[361 1[361 795 2[1336 975 975 939 723 957 1012
885 1012 975 1192 813 1011 668 469 975 1021 849 885 993
939 921 975 1[614 1[1012 1[361 361 650 650 650 650 650
650 650 650 650 650 650 361 434 361 2[506 506 361 1[1084
3[361 2[1084 723 723 759 8[613 1[613 16[{ enclmec ReEncodeFont }88
1328.35 /LMRoman12-Regular rf /Fy 1098 2[1196 5[1076
17[1046 31[1625 73[956 1136 1136 1554 1136 1196 837 849
879 1136 1196 1076 1196 1793 598 1136 1[598 1196 1076
658 982 1196 956 1196 1046 6[1315 2[2223 1625 1654 1497
1196 2[1470 1616 1682 2041 1293 1685 1[801 1682 1691
1353 1412 1649 1554 1530 1625 7[1076 1076 1076 1076 1076
1076 1076 1076 1076 1076 1076 598 717 15[1196 1196 1255
27[{ enclmec ReEncodeFont }67 1912.83 /LMRoman12-Bold
rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 8000dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize
 end
%%EndSetup
%%Page: 1 1
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-2331 165 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a -2331
165 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -2331 165 a -2331 165 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -2331 165 a 1328 x Fy(AN)718
b(1.1)f(-)h(1)f(Prozen)-60 b(trec)g(hn)g(ung)716 b(-)h(O)-60
b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray -741 4800 a Fx(1.)p
0 TeXcolorgray 651 w(A)-36 b(ufgrund)557 b(einer)i(Bef\366rderung)f
(erh\366h)-36 b(t)558 b(sic)-36 b(h)558 b(das)g(Gehalt)h(eines)f
(Angestellten)h(v)-36 b(on)558 b Fw(e)888 6792 y Fx(2.400)436
b(auf)e Fw(e)650 b Fx(2.760.)921 11330 y(Um)433 b(wie)i(viel)f(Prozen)
-36 b(t)434 b(ist)f(sein)h(Gehalt)f(gestiegen?)p 1 0 0
TeXcolorrgb 1054 13089 a Fv(2760)296 b Fu(\000)g Fv(2400)p
1054 13677 6827 45 v 3166 14898 a(2400)8382 13987 y(=)368
b(0)p Ft(;)p Fv(15)921 16533 y Fx(Sein)433 b(Gehalt)g(ist)h(um)f(15)217
b(\045)434 b(gestiegen.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 20266 54804 45 v -2331
25890 a Fy(AN)718 b(1.1)f(-)h(2)f(Mittlere)g(\304nderungsrate)d(-)k(O)
-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray -741 29197 a
Fx(2.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108
b(unktion)433 b Ft(f)575 b Fx(mit)434 b(der)f(Gleic)-36
b(h)g(ung)433 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))368 b(=)h
Ft(x)32638 28715 y Fq(2)33459 29197 y Fv(+)295 b(2)p
Fx(.)921 33734 y(Berec)-36 b(hne)433 b(die)g(mittlere)h
(\304nderungsrate)e(v)-36 b(on)434 b Ft(f)576 b Fx(im)433
b(In)-36 b(terv)-72 b(all)434 b Fv([)8 b(1;)221 b(3])p
Fx(.)p 1 0 0 TeXcolorrgb 1054 35727 a Ft(f)142 b Fv(\(3\))295
b Fu(\000)g Ft(f)142 b Fv(\(1\))p 1054 36315 6514 45
v 3985 37537 a(2)8069 36625 y(=)369 b(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 29197 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 31189 a Fr(AN)g(1.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 41012 54804 45
v 0 TeXcolorgray 24746 81281 a Fx(1)p 0 TeXcolorgray
eop end
%%Page: 2 2
TeXDict begin 2 1 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fy(AN)718 b(1.1)f(-)h(3)f(\304nderung)e(der)i
(Spann)-60 b(ung)714 b(-)k(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 5102 a Fx(3.)p 0 TeXcolorgray 651
w(Die)451 b(nac)-36 b(hstehende)448 b(Abbildung)h(zeigt)h(den)f
(zeitlic)-36 b(hen)450 b(V)-108 b(erlauf)450 b Ft(t)g
Fx(\(in)f(s\))h(der)f(Spann)-36 b(ung)921 7094 y Ft(U)573
b Fx(\(in)433 b(V\))g(w)-36 b(\344hrend)433 b(eines)h(ph)-36
b(ysikalisc)g(hen)434 b(Exp)36 b(erimen)-36 b(ts.)p 0
TeXcolorgray 0 TeXcolorgray 5205 41558 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 328.8854 a add def
/d 0.0 a add neg def /h 289.34369 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5205 41558 a
7410 39064 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 11 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 308.96858 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.4527
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 13 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 266.81285 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 308.96858  0 -36.37735  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -36.37735
 308.96858  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.53084  def /maxTickline 266.81285  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 266.81285
0.0 -22.53084   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 308.96858
0.0 -36.37735 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 266.81285  0 -22.53084  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -22.53084
 266.81285  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-36.37735  def /maxTickline 308.96858  def /dT 1864676 abs 65536 div
viceversa { neg } if def /DT 4. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 7.11317  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 7.11317  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 266.81285
0.0 -22.53084   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 308.96858
0.0 -36.37735 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6165 36200 a Fq(4)6165 33050
y(8)5694 29901 y(12)5694 26751 y(16)5694 23602 y(20)5694
20452 y(24)5694 17302 y(28)5694 14153 y(32)5694 11003
y(36)10325 40410 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445
b(10)-35717 b Fp(\000)p Fq(1)7410 39064 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7410 39064
a 7410 39064 a
tx@Dict begin  { 308.96858 266.81285 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7410 39064 a 7410 39064 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7410 39064 a
7067 39350 a Fx(x)7410 39064 y
tx@Dict begin  PutEnd  end
 7410 39064 a 7410 39064
a
tx@Dict begin  PutEnd  end
 7410 39064 a 7410 39064 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7410 39064 a 7410 39064 a
tx@Dict begin  { 0.0 0.0 pop 308.96858 266.81285 exch pop } PutCoor
PutBegin  end

7410 39064 a 7410 39064 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 7410 39064 a 7067 39221 a Fx(y)7410
39064 y
tx@Dict begin  PutEnd  end
 7410 39064 a 7410 39064 a
tx@Dict begin  PutEnd  end
 7410 39064 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10.859013885766789 def
/dx x1 x sub 199 div def /F@pstplot (2.2806827703444222E-6*x^(7.0)-1.7282933713131396E-4*x^(6.0)+0.005965768992273854*x^(5.0)-0.09584712783113487*x^(4.0)+0.692048431766916*x^(3.0)-1.9191657168338834*x^(2.0)+2.3785028428305366*x+20.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
7.11317 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 7.11317 mul gt { moveto } { dup -1.e30 7.11317
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 7.11317 mul gt { moveto } { dup
-1.e30 7.11317 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 41612 41558 a
currentpoint initclip moveto
 41612 41558 a
921 45543 a Fx(Ermittle)621 b(die)g(absolute)f(und)g(die)h(relativ)-36
b(e)622 b(\304nderung)d(der)h(Spann)-36 b(ung)619 b(w)-36
b(\344hrend)621 b(der)921 47535 y(ersten)433 b(10)h(Sekunden)e(des)i
(Exp)36 b(erimen)-36 b(ts.)921 52072 y(absolute)434 b(\304nderung:)p
12453 52072 9449 34 v 10315 w(V)921 56609 y(relativ)-36
b(e)435 b(\304nderung:)p 11940 56609 V 10314 w(\045)p
1 0 0 TeXcolorrgb 921 59155 a(absolute)f(\304nderung:)e(12)217
b(V)921 61147 y(relativ)-36 b(e)435 b(\304nderung:)d(60)217
b(\045)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 5102 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 7094
a Fr(AN)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 64880 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(2)p 0 TeXcolorgray eop end
%%Page: 3 3
TeXDict begin 3 2 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(AN)718 b(1.1)f(-)h(4)f(T)-179
b(reibsto\033preise)714 b(-)k(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -741 4800 a Fx(4.)p 0 TeXcolorgray 651
w(Pro)574 b(Liter)f(Diesel)h(zahlte)g(man)g(im)f(Jahr)h(2004)h(durc)-36
b(hsc)g(hnittlic)g(h)571 b Ft(T)36557 4999 y Fq(0)37657
4800 y Fx(Euro,)i(im)h(Jahr)888 6792 y(2014)435 b(b)36
b(etrug)433 b(der)g(durc)-36 b(hsc)g(hnittlic)g(he)432
b(Preis)i(pro)f(Liter)g(Diesel)i Ft(T)33773 6991 y Fq(10)35203
6792 y Fx(Euro.)921 11330 y(Geb)36 b(en)494 b(Sie)h(jew)-36
b(eils)496 b(einen)f(T)-108 b(erm)494 b(zur)h(Berec)-36
b(hn)g(ung)493 b(der)i(absoluten)f(und)g(der)h(relativ)-36
b(en)921 13322 y(Preis\344nderung)637 b(v)-36 b(on)637
b(2004)i(auf)f(2014)h(f\374r)e(den)g(durc)-36 b(hsc)g(hnittlic)g(hen)
635 b(Preis)i(pro)g(Liter)921 15314 y(Diesel)435 b(an!)921
19851 y(absolute)f(Preis\344nderung:)p 14539 19851 15749
34 v 921 24388 a(relativ)-36 b(e)435 b(Preis\344nderung:)p
14026 24388 V 1 0 0 TeXcolorrgb 921 26934 a(absolute)f
(Preis\344nderung:)f Ft(T)15734 27133 y Fq(10)17025 26934
y Fu(\000)296 b Ft(T)19116 27133 y Fq(0)921 31654 y Fx(relativ)-36
b(e)435 b(Preis\344nderung:)14591 30756 y Ft(T)15353
30955 y Fq(10)16645 30756 y Fu(\000)296 b Ft(T)18736
30955 y Fq(0)p 14591 31344 4671 45 v 16282 32565 a Ft(T)17044
32764 y Fq(0)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 36240 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(3)p 0 TeXcolorgray eop end
%%Page: 4 4
TeXDict begin 4 3 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(AN)508 b(1.1)f(-)g(5)h(Preis\344nderungen)
c(-)j(L)-179 b(T)507 b(-)g(Matura)g(2014/15)g(-)h(Haupt-)-2331
4622 y(termin)p 0 TeXcolorgray -741 7929 a Fx(5.)p 0
TeXcolorgray 651 w(Ein)428 b(F)-108 b(ernsehger\344t)427
b(wurde)h(im)g(Jahr)g(2012)i(zum)e(Preis)g Ft(P)29694
8128 y Fq(0)30649 7929 y Fx(v)-36 b(erkauft,)429 b(das)f(gleic)-36
b(he)429 b(Ger\344t)874 9921 y(wurde)k(im)h(Jahr)f(2014)i(zum)e(Preis)h
Ft(P)19603 10120 y Fq(2)20563 9921 y Fx(v)-36 b(erkauft.)921
12466 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
14458 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 17948 y(Der)411 b(T)-108 b(erm)p 7035
17948 3150 45 v 10656 17900 a(1)10184 17948 y Fo(\015)p
11778 17948 V 3560 w Fx(gibt)411 b(die)f(absolute)h(Preis\344nderung)f
(v)-36 b(on)410 b(2012)i(auf)f(2014)h(an,)921 19940 y(der)433
b(T)-108 b(erm)p 6810 19940 V 10432 19892 a(2)9960 19940
y Fo(\015)p 11554 19940 V 3583 w Fx(die)433 b(relativ)-36
b(e)435 b(Preis\344nderung)e(v)-36 b(on)434 b(2012)h(auf)e(2014.)p
0 TeXcolorgray 0 TeXcolorgray 12327 21313 8834 45 v 12327
24397 45 3085 v 16418 23094 a(1)15946 23142 y Fo(\015)p
21115 24397 V 12327 24441 8834 45 v 12327 29248 45 4807
v 13168 26294 a Ft(P)14006 26493 y Fq(0)p 13168 26882
1365 45 v 13168 28104 a Ft(P)14006 28303 y Fq(2)p 18750
29248 45 4807 v 19459 27177 a Fn(2)p 21115 29248 V 12327
29292 8834 45 v 12327 32551 45 3260 v 13035 31348 a Ft(P)13873
31547 y Fq(2)14694 31348 y Fu(\000)296 b Ft(P)16861 31547
y Fq(0)p 18750 32551 V 1 0 0 TeXcolorrgb 19459 31254
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 32551 V 12327 32596 8834 45 v 12327 37203 45 4608
v 13168 34448 a Ft(P)14006 34647 y Fq(2)14827 34448 y
Fu(\000)g Ft(P)16994 34647 y Fq(0)p 13168 35037 4352
45 v 15019 36258 a Fv(2)p 18750 37203 45 4608 v 19459
35231 a Fn(2)p 21115 37203 V 12327 37247 8834 45 v 0
TeXcolorgray 0 TeXcolorgray 30427 21313 8400 45 v 30427
24397 45 3085 v 34301 23094 a Fx(2)33829 23142 y Fo(\015)p
38782 24397 V 30427 24441 8400 45 v 30427 29248 45 4807
v 31268 26294 a Ft(P)32106 26493 y Fq(2)p 31268 26882
1365 45 v 31268 28104 a Ft(P)32106 28303 y Fq(0)p 36417
29248 45 4807 v 37125 27177 a Fn(2)p 38782 29248 V 30427
29292 8400 45 v 30427 33899 45 4608 v 31268 31145 a Ft(P)32106
31344 y Fq(0)32927 31145 y Fu(\000)g Ft(P)35094 31344
y Fq(2)p 31268 31733 4352 45 v 33119 32954 a Fv(2)p 36417
33899 45 4608 v 37125 31928 a Fn(2)p 38782 33899 V 30427
33944 8400 45 v 30427 38750 45 4807 v 31268 35796 a Ft(P)32106
35995 y Fq(2)32927 35796 y Fu(\000)g Ft(P)35094 35995
y Fq(0)p 31268 36385 4352 45 v 32762 37606 a Ft(P)33600
37805 y Fq(0)p 36417 38750 45 4807 v 1 0 0 TeXcolorrgb
37125 36679 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 38782 38750 V 30427 38794 8400 45 v 47992
7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 42823 54804 45 v -2331 48251 a Fy(AN)718 b(1.1)f(-)h(6)f(F)-179
b(ertilit\344t)715 b(-)j(O)-60 b(A)718 b(-)f(Matura)g(NT)h(2)f(15/16)p
0 TeXcolorgray -741 51558 a Fx(6.)p 0 TeXcolorgray 651
w(A)-36 b(uf)541 b(der)g(W)-108 b(ebsite)541 b(der)f(Statistik)i(A)-36
b(ustria)541 b(\034ndet)f(man)h(un)-36 b(ter)540 b(dem)g(Begri\033)i
Fm(F)-100 b(ertilit\344t)769 53550 y Fx(\(F)-108 b(ruc)-36
b(h)g(bark)g(eit\))432 b(folgende)i(Information:)675
56095 y(\022Die)491 b(Gesam)-36 b(tfertilit\344tsrate)490
b(lag)h(2014)g(b)36 b(ei)489 b(1,46)i(Kindern)e(je)i(F)-108
b(rau,)489 b(d.h.,)h(dass)g(b)36 b(ei)489 b(zu-)921 58087
y(k\374nftiger)503 b(K)-36 b(onstanz)502 b(der)g(alterssp)36
b(ezi\034sc)-36 b(hen)502 b(F)-108 b(ertilit\344tsraten)502
b(eine)h(heute)e(15-j\344hrige)921 60079 y(F)-108 b(rau)599
b(in)h(\326sterreic)-36 b(h)599 b(bis)h(zu)g(ihrem)g(50.)i(Geburtstag)d
(statistisc)-36 b(h)600 b(gesehen)f(1,46)j(Kin-)921 62071
y(der)575 b(zur)f(W)-108 b(elt)576 b(bringen)e(wird.)j(Dieser)f
(Mittelw)-36 b(ert)575 b(liegt)h(damit)f(deutlic)-36
b(h)575 b(un)-36 b(ter)574 b(dem)675 64063 y(\022Bestanderhaltungsniv)
-36 b(eau\020)433 b(v)-36 b(on)434 b(et)-36 b(w)g(a)434
b(2)g(Kindern)f(pro)g(F)-108 b(rau.)-181 b(\020)921 66609
y(Berec)-36 b(hne,)486 b(um)f(w)-36 b(elc)g(hen)486 b(Prozen)-36
b(tsatz)486 b(die)g(f\374r)f(das)h(Jahr)g(2014)i(g\374ltige)e(Gesam)-36
b(tfertili-)921 68600 y(t\344tsrate)341 b(v)-36 b(on)342
b(1,46)h(Kindern)d(je)i(F)-108 b(rau)341 b(ansteigen)g(m)-36
b(\374sste,)341 b(um)g(das)h(\022Bestanderhaltungs-)921
70592 y(niv)-36 b(eau\020)434 b(zu)f(erreic)-36 b(hen.)921
73138 y(prozen)g(tuelle)433 b(Zunahme:)p 1 0 0 TeXcolorrgb
433 w(36,99)217 b(\045)435 b(T)-108 b(oleranzin)-36 b(terv)-72
b(all:)435 b Fv([)8 b(36)221 b(\045;)g(37)g(\045])p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 51558
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 53550 a Fr(AN)369
b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 76945 V 0 TeXcolorgray 24746 81281 a Fx(4)p 0 TeXcolorgray
eop end
%%Page: 5 5
TeXDict begin 5 4 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(AN)679 b(1.1)g(-)g(7)g(Prozen)-60
b(te)678 b(-)h(MC)h(-)f(Matura)f(2013/14)h(Haupttermin)p
0 TeXcolorgray -741 4907 a Fx(7.)p 0 TeXcolorgray 651
w(Zahlenangab)36 b(en)614 b(in)f(Prozen)-36 b(t)614 b
Fv(\(\045\))f Fx(mac)-36 b(hen)613 b(An)-36 b(teile)614
b(un)-36 b(tersc)g(hiedlic)g(her)612 b(Gr\366\377en)i(v)-36
b(er-)921 6899 y(gleic)g(h)g(bar.)921 9444 y(Kreuze)433
b(b)36 b(eide)434 b(zutre\033enden)d(A)-36 b(ussagen!)p
1062 12403 44260 45 v 1062 17469 45 5066 v 1770 14273
a(P)g(eters)289 b(monatlic)-36 b(hes)289 b(T)-108 b(asc)-36
b(hengeld)289 b(wurde)g(v)-36 b(on)289 b Fw(e)506 b Fx(80)290
b(auf)f Fw(e)506 b Fx(100)290 b(erh\366h)-36 b(t.)289
b(Somit)1770 16265 y(b)36 b(ek)-36 b(omm)g(t)434 b(er)f(jetzt)h(um)f
(20)217 b(\045)434 b(mehr)f(als)h(v)-36 b(orher.)p 42912
17469 V 45277 17469 V 1062 17513 44260 45 v 1062 22649
45 5137 v 1770 19454 a(Ein)551 b(Preis)h(ist)f(im)g(Laufe)h(der)e
(letzten)h(f\374nf)g(Jahre)g(um)g(10)217 b(\045)552 b(gestiegen.)g(Das)
1770 21446 y(b)36 b(edeutet)356 b(in)h(jedem)h(Jahr)f(eine)g
(Steigerung)g(v)-36 b(on)357 b(2)217 b(\045)357 b(gegen)-36
b(\374b)36 b(er)357 b(dem)g(V)-108 b(orjahr.)p 42912
22649 V 45277 22649 V 1062 22693 44260 45 v 1062 29638
45 6945 v 1770 24634 a(W)g(enn)433 b(die)h(In\035ationsrate)f(in)h(den)
f(letzten)g(Monaten)g(v)-36 b(on)434 b(2)217 b(\045)434
b(auf)g(1,5)217 b(\045)434 b(ge-)1770 26626 y(sunk)-36
b(en)447 b(ist,)h(b)36 b(edeutet)446 b(das)h(eine)g(relativ)-36
b(e)448 b(Abnahme)e(der)h(In\035ationsrate)g(um)1770
28618 y Fv(25)221 b(\045)p Ft(:)p 42912 29638 V 1 0 0
TeXcolorrgb 43621 26498 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 29638 V 1062 29682 44260
45 v 1062 36552 45 6870 v 1770 31623 a Fx(W)-108 b(enn)391
b(ein)h(Preis)g(zun\344c)-36 b(hst)391 b(um)g(20)217
b(\045)392 b(gesenkt)g(und)f(kurze)g(Zeit)h(darauf)g(wieder)1770
33615 y(um)415 b(5)217 b(\045)414 b(erh\366h)-36 b(t)414
b(wurde,)h(dann)f(ist)g(er)h(jetzt)g(um)f(15)217 b(\045)415
b(niedriger)g(als)g(urspr\374ng-)1770 35607 y(lic)-36
b(h.)p 42912 36552 V 45277 36552 V 1062 36596 44260 45
v 1062 39740 45 3145 v 1770 38537 a(Eine)434 b(Zunahme)f(um)g(200)217
b(\045)434 b(b)36 b(edeutet)432 b(eine)i(Steigerung)f(auf)h(das)g
(Dreifac)-36 b(he.)p 42912 39740 V 1 0 0 TeXcolorrgb
43621 38500 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 39740 V 1062 39785 44260 45 v 47992
4907 a Fs(___/1)p 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 43813 54804 45
v 0 TeXcolorgray 24746 81281 a Fx(5)p 0 TeXcolorgray
eop end
%%Page: 6 6
TeXDict begin 6 5 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(AN)756 b(1.1)e(-)h(8)g(Leistungsv)-60
b(erb)60 b(esserung)751 b(-)k(O)-60 b(A)755 b(-)h(Matura)e(2016/17)
-2617 4622 y(-)718 b(Haupttermin)p 0 TeXcolorgray -741
7929 a Fx(8.)p 0 TeXcolorgray 651 w(Drei)469 b(P)-36
b(ersonen)468 b Ft(A)p Fx(,)h Ft(B)536 b Fx(und)468 b
Ft(C)563 b Fx(absolvieren)470 b(jew)-36 b(eils)470 b(v)-36
b(or)469 b(und)e(nac)-36 b(h)469 b(einem)f(Sp)36 b(ezialtrai-)921
9921 y(ning)449 b(denselb)36 b(en)448 b(K)-36 b(o)36
b(ordinationstest.)450 b(In)f(der)f(nac)-36 b(hstehenden)447
b(T)-108 b(ab)36 b(elle)450 b(sind)e(die)h(dab)36 b(ei)921
11913 y(erreic)-36 b(h)g(ten)432 b(Punkte)i(angef\374hrt.)p
26482 12880 45 45 v 26527 12880 7034 45 v 33560 12880
6681 45 v 40240 12880 6651 45 v 26482 14871 45 1992 v
0.8 TeXcolorgray 26527 14871 6990 1992 v 0 TeXcolorgray
27624 14274 a(P)-36 b(erson)434 b Ft(A)p 33516 14871
45 1992 v 0.8 TeXcolorgray 33560 14871 6636 1992 v 0
TeXcolorgray 1372 w Fx(P)-36 b(erson)434 b Ft(B)p 40196
14871 45 1992 v 0.8 TeXcolorgray 40240 14871 6607 1992
v 0 TeXcolorgray 1439 w Fx(P)-36 b(erson)434 b Ft(C)p
46847 14871 45 1992 v 921 14916 45970 45 v 921 16908
45 1992 v 0.8 TeXcolorgray 965 16908 25518 1992 v 0 TeXcolorgray
1629 16310 a Fx(erreic)-36 b(h)g(te)433 b(Punkte)g(v)-36
b(or)434 b(dem)g(Sp)36 b(ezialtraining)p 26482 16908
45 1992 v 4709 w(5)p 33516 16908 V 5882 w(15)p 40196
16908 V 5365 w(20)p 46847 16908 V 921 16952 45970 45
v 921 18944 45 1992 v 0.8 TeXcolorgray 965 18944 25518
1992 v 0 TeXcolorgray 1629 18346 a(erreic)-36 b(h)g(te)433
b(Punkte)g(nac)-36 b(h)433 b(dem)h(Sp)36 b(ezialtraining)p
26482 18944 45 1992 v 3878 w(8)p 33516 18944 V 5882 w(19)p
40196 18944 V 5365 w(35)p 46847 18944 V 921 18988 45970
45 v 921 22559 a(Gute)584 b(Leistungen)g(sind)g(durc)-36
b(h)583 b(hohe)i(Punktezahlen)f(gek)-36 b(ennzeic)g(hnet.)585
b(Wie)h(aus)f(der)874 24551 y(T)-108 b(ab)36 b(elle)627
b(ersic)-36 b(h)g(tlic)g(h)626 b(ist,)h(erreic)-36 b(hen)626
b(alle)h(drei)f(P)-36 b(ersonen)626 b(nac)-36 b(h)626
b(dem)g(Sp)36 b(ezialtraining)921 26543 y(mehr)433 b(Punkte)g(als)h(v)
-36 b(orher.)855 31080 y(W)g(\344hle)583 b(aus)g(den)f(P)-36
b(ersonen)583 b Ft(A)p Fx(,)g Ft(B)651 b Fx(und)581 b
Ft(C)678 b Fx(die)583 b(b)36 b(eiden)583 b(aus,)g(die)g(die)g(nac)-36
b(hstehenden)921 33072 y(Bedingungen)433 b(erf\374llen!)p
0 TeXcolorgray 2468 36503 a Fu(\017)p 0 TeXcolorgray
650 w Fx(Bei)419 b(der)e(ersten)g(P)-36 b(erson)417 b(ist)h(die)g
(absolute)f(\304nderung)g(der)g(Punktezahl)g(gr\366\377er)i(als)3782
38495 y(b)36 b(ei)434 b(der)f(zw)-36 b(eiten.)p 0 TeXcolorgray
2468 41041 a Fu(\017)p 0 TeXcolorgray 650 w Fx(Bei)390
b(der)f(zw)-36 b(eiten)390 b(P)-36 b(erson)389 b(ist)g(die)h(relativ)
-36 b(e)390 b(\304nderung)e(der)h(Punktezahl)h(gr\366\377er)g(als)3782
43032 y(b)36 b(ei)434 b(der)f(ersten)g(P)-36 b(erson.)921
46463 y(erste)433 b(P)-36 b(erson:)p 1 0 0 TeXcolorrgb
434 w(P)g(erson)433 b Ft(B)p 0 0 0 TeXcolorrgb 921 49009
a Fx(zw)-36 b(eite)434 b(P)-36 b(erson:)p 1 0 0 TeXcolorrgb
434 w(P)g(erson)433 b Ft(A)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921
a Fr(AN)369 b(1.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 52484 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(6)p 0 TeXcolorgray eop end
%%Page: 7 7
TeXDict begin 7 6 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1599 a Fy(AN)718 b(1.1)f(-)h(9)f(Angestelltengehalt)
d(-)k(O)-60 b(A)717 b(-)h(Matura)f(NT)g(1)h(16/17)p 0
TeXcolorgray -741 4907 a Fx(9.)p 0 TeXcolorgray 651 w(Das)352
b(Bruttogehalt)g(eines)f(b)36 b(estimm)-36 b(ten)351
b(Angestellten)g(b)36 b(etrug)351 b(im)h(Jahr)f(2008)i(monatlic)-36
b(h)921 6899 y Fw(e)650 b Fx(2.160.)921 9444 y(In)340
b(den)f(folgenden)h(sec)-36 b(hs)339 b(Jahren)h(ist)g(sein)g(monatlic)
-36 b(hes)340 b(Bruttogehalt)f(durc)-36 b(hsc)g(hnittlic)g(h)921
11436 y(um)433 b Fw(e)650 b Fx(225)435 b(pro)e(Jahr)h(gestiegen.)921
13981 y(Gib)447 b(die)h(prozen)-36 b(tuelle)447 b(\304nderung)f(des)h
(monatlic)-36 b(hen)448 b(Bruttogehalts)g(im)f(gesam)-36
b(ten)448 b(b)36 b(e-)921 15973 y(trac)-36 b(h)g(teten)432
b(Zeitraum)h(v)-36 b(on)434 b(2008)h(und)e(2014)i(an!)p
1 0 0 TeXcolorrgb 888 18519 a Fv(2)221 b(160)297 b(+)e(6)h
Fu(\001)f Fv(225)370 b(=)f(3)221 b(510)1054 20541 y Fq(3)157
b(510)p Fp(\000)p Fq(2)i(160)p 1054 20754 4810 45 v 2439
21522 a(2)e(160)6365 21064 y Fv(=)368 b(0)p Ft(;)p Fv(625)921
23609 y Fx(Das)498 b(Bruttogehalt)f(des)g(Angestellten)g(ist)g(im)h
(gesam)-36 b(ten)497 b(b)36 b(etrac)-36 b(h)g(teten)496
b(Zeitraum)h(um)921 25601 y(62,5)217 b(\045)435 b(gestiegen.)874
28147 y(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435
b Fv([)8 b(62)221 b(\045;)g(63)g(\045])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4907 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6899 a Fr(AN)369 b(1.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 31954
54804 45 v -2331 37256 a Fy(AN)718 b(1.2)f(-)h(1)f(Luft)-60
b(widerstand)714 b(-)k(O)-60 b(A)718 b(-)f(BIFIE)p 0
TeXcolorgray -1391 40563 a Fx(10.)p 0 TeXcolorgray 651
w(Der)389 b(Luft)-36 b(widerstand)387 b Ft(F)13241 40762
y Fl(L)14325 40563 y Fx(eines)i(b)36 b(estimm)-36 b(ten)388
b(PKW)-108 b(s)388 b(in)h(Abh\344ngigk)-36 b(eit)389
b(v)-36 b(on)389 b(der)f(F)-108 b(ahrt-)921 42555 y(gesc)-36
b(h)g(windigk)g(eit)746 b Ft(v)793 b Fx(l\344sst)746
b(sic)-36 b(h)745 b(durc)-36 b(h)744 b(folgende)i(F)-108
b(unktionsgleic)-36 b(h)g(ung)745 b(b)36 b(esc)-36 b(hreib)36
b(en:)921 44547 y Ft(F)1763 44746 y Fl(L)2458 44547 y
Fv(\()p Ft(v)48 b Fv(\))368 b(=)h(0)p Ft(;)p Fv(4)219
b Fu(\001)g Ft(v)9041 44065 y Fq(2)9568 44547 y Fx(.)396
b(Der)h(Luft)-36 b(widerstand)395 b(ist)i(dab)36 b(ei)396
b(in)h(Newton)f(\(N\))g(und)f(die)i(Gesc)-36 b(h)g(win-)921
46539 y(digk)g(eit)434 b(in)g(Metern)f(pro)g(Sekunde)f(\(m/s\))i
(angegeb)36 b(en.)921 51341 y(Berec)-36 b(hne)329 b(die)g(mittlere)h
(Zunahme)e(des)h(Luft)-36 b(widerstandes)329 b(in)33174
50442 y(N)p 32538 51031 2248 45 v 32538 52252 a(m/s)35248
51341 y(b)36 b(ei)329 b(einer)h(Erh\366h)-36 b(ung)921
53691 y(der)433 b(F)-108 b(ahrtgesc)-36 b(h)g(windigk)g(eit)433
b(v)-36 b(on)434 b(20)217 b(m/s)435 b(auf)f(30)217 b(m/s.)p
1 0 0 TeXcolorrgb 1054 55683 a Ft(F)1896 55882 y Fl(L)2591
55683 y Fv(\(30\))295 b Fu(\000)h Ft(F)7369 55882 y Fl(L)8064
55683 y Fv(\(20\))p 1054 56272 9323 45 v 3603 57493 a(30)f
Fu(\000)h Fv(20)10878 56582 y(=)12392 55683 y(360)g Fu(\000)f
Fv(160)p 12392 56272 5526 45 v 14504 57493 a(10)18419
56582 y(=)369 b(20)22091 55683 y Fx(N)p 21455 56272 2248
45 v 21455 57493 a(m/s)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 40563 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 42555 a Fr(AN)g(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 61300 54804 45 v 0 TeXcolorgray
24746 81281 a Fx(7)p 0 TeXcolorgray eop end
%%Page: 8 8
TeXDict begin 8 7 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1493 a Fy(AN)718 b(1.2)f(-)h(2)f(Bew)-60
b(egung)716 b(eines)g(K)-60 b(\366rp)60 b(ers)717 b(-)g(L)-179
b(T)717 b(-)g(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(11.)p
0 TeXcolorgray 651 w(Bei)519 b(der)g(Bew)-36 b(egung)519
b(eines)g(K)-36 b(\366rp)36 b(ers)519 b(gibt)g(die)g(Zeit-W)-108
b(eg-F)g(unktion)518 b(seine)h(En)-36 b(tfern)g(ung)921
6792 y Ft(s)484 b Fx(\(in)g(m\))f(v)-36 b(om)485 b(A)-36
b(usgangspunkt)484 b(seiner)g(Bew)-36 b(egung)484 b(nac)-36
b(h)484 b Ft(t)g Fx(Sekunden)e(an.)j(Der)g(Di\033e-)921
9130 y(renzenquotien)-36 b(t)9791 8231 y Ft(s)p Fv(\()p
Ft(t)11380 8430 y Fq(2)11905 8231 y Fv(\))295 b Fu(\000)h
Ft(s)p Fv(\()p Ft(t)15624 8430 y Fq(1)16149 8231 y Fv(\))p
9791 8820 6864 45 v 11416 10041 a Ft(t)11886 10240 y
Fq(2)12706 10041 y Fu(\000)g Ft(t)14505 10240 y Fq(1)17143
9130 y Fx(gibt)355 b(seine)h(mittlere)f(Gesc)-36 b(h)g(windigk)g(eit)
356 b(im)g(Zeitin)-36 b(terv)-72 b(all)921 11347 y Fv([)8
b Ft(t)1760 11546 y Fq(1)2285 11347 y Fv(;)221 b Ft(t)3337
11546 y Fq(2)3864 11347 y Fv(])433 b Fx(an.)921 13893
y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 15885 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)921
19647 y(Der)434 b(A)-36 b(usdruc)g(k)797 b Fv(lim)9219
20376 y Fl(t)9559 20499 y Fk(2)10020 20376 y Fp(!)p Fl(t)11301
20499 y Fk(1)12116 18748 y Ft(s)p Fv(\()p Ft(t)13705
18947 y Fq(2)14230 18748 y Fv(\))295 b Fu(\000)h Ft(s)p
Fv(\()p Ft(t)17949 18947 y Fq(1)18474 18748 y Fv(\))p
12116 19337 V 13741 20558 a Ft(t)14211 20757 y Fq(2)15031
20558 y Fu(\000)g Ft(t)16830 20757 y Fq(1)19546 19647
y Fx(gibt)434 b(dir)p 24460 19647 3150 45 v 28081 19599
a(1)27609 19647 y Fo(\015)p 29203 19647 V 33003 19647
V 36625 19599 a Fx(2)36153 19647 y Fo(\015)p 37747 19647
V 3583 w Fx(an.)p 0 TeXcolorgray 0 TeXcolorgray 1187
21466 19974 45 v 1187 24550 45 3085 v 10848 23247 a(1)10376
23295 y Fo(\015)p 21115 24550 V 1187 24594 19974 45 v
1187 27854 45 3260 v 1895 26650 a Fx(Momen)-36 b(tangesc)g(h)g(windigk)
g(eit)p 18750 27854 V 1 0 0 TeXcolorrgb 19459 26556 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 27854 V 1187 27898 19974 45 v 1187 31157 45 3260
v 1895 29954 a Fx(Momen)g(tan)g(b)36 b(esc)-36 b(hleunigung)p
18750 31157 V 19459 29860 a Fn(2)p 21115 31157 V 1187
31201 19974 45 v 1187 36256 45 5056 v 1895 33061 a Fx(durc)g(hsc)g
(hnittlic)g(he)287 b(Besc)-36 b(hleuni-)1895 35053 y(gung)p
18750 36256 V 19459 34061 a Fn(2)p 21115 36256 V 1187
36301 19974 45 v 0 TeXcolorgray 0 TeXcolorgray 25658
21577 19960 45 v 25658 24661 45 3085 v 35312 23358 a
Fx(2)34840 23406 y Fo(\015)p 45573 24661 V 25658 24705
19960 45 v 25658 29760 45 5056 v 26366 26565 a Fx(zwisc)g(hen)434
b(den)e(Zeitpunkten)h Ft(t)42018 26764 y Fq(1)26366 28557
y Fx(und)f Ft(t)29437 28756 y Fq(2)p 43207 29760 V 43916
27565 a Fn(2)p 45573 29760 V 25658 29804 19960 45 v 25658
33064 45 3260 v 26366 31860 a Fx(zum)h(Zeitpunkt)g Ft(t)35688
32059 y Fq(1)p 43207 33064 V 1 0 0 TeXcolorrgb 43916
31766 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45573 33064 V 25658 33108 19960 45 v 25658
36367 45 3260 v 26366 35164 a Fx(zum)g(Zeitpunkt)g Ft(t)35688
35363 y Fq(2)p 43207 36367 V 43916 35070 a Fn(2)p 45573
36367 V 25658 36411 19960 45 v 47992 4800 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 40440
54804 45 v 0 TeXcolorgray 24746 81281 a Fx(8)p 0 TeXcolorgray
eop end
%%Page: 9 9
TeXDict begin 9 8 bop 0 TeXcolorgray 0 TeXcolorgray 0
TeXcolorgray -2331 1794 a Fy(AN)849 b(1.2)e(-)i(3)f(Mittlere)f
(\304nderungsrate)e(in)-60 b(terpretieren)846 b(-)i(MC)h(-)-2331
4817 y(Matura)717 b(2015/16)g(-)h(Haupttermin)p 0 TeXcolorgray
-1391 8124 a Fx(12.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)321
b(ist)g(eine)h(P)-36 b(olynomfunktion)322 b Ft(f)464
b Fx(dritten)320 b(Grades.)i(Die)g(mittlere)g(\304nderungsrate)887
10116 y(v)-36 b(on)434 b Ft(f)575 b Fx(hat)434 b(im)g(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Ft(x)15026 10315 y Fq(1)15552
10116 y Fv(;)655 b Ft(x)17307 10315 y Fq(2)17833 10116
y Fv(])434 b Fx(den)f(W)-108 b(ert)433 b(5.)855 14653
y(W)-108 b(elc)-36 b(he)331 b(der)g(nac)-36 b(hstehenden)329
b(A)-36 b(ussagen)331 b(k)-36 b(\366nnen)331 b(\374b)36
b(er)331 b(die)g(F)-108 b(unktion)331 b Ft(f)473 b Fx(sic)-36
b(her)332 b(getro\033en)874 16645 y(w)-36 b(erden?)433
b(Kreuze)h(die)f(b)36 b(eiden)433 b(zutre\033enden)f(A)-36
b(ussagen)433 b(an.)p 2370 17612 41645 45 v 2370 20830
45 3219 v 3078 19553 a(Im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Ft(x)11339 19752 y Fq(1)11865 19553 y Fv(;)655
b Ft(x)13620 19752 y Fq(2)14146 19553 y Fv(])434 b Fx(gibt)g(es)f
(mindestens)g(eine)g(Stelle)h Ft(x)g Fx(mit)f Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)g(5)p Fx(.)p 41605 20830
V 43970 20830 V 2370 20874 41645 45 v 2370 24092 45 3219
v 3078 22815 a Ft(f)142 b Fv(\()p Ft(x)5106 23014 y Fq(2)5632
22815 y Fv(\))369 b Ft(>)f(f)142 b Fv(\()p Ft(x)9915
23014 y Fq(1)10441 22815 y Fv(\))p 41605 24092 V 1 0 0
TeXcolorrgb 31366 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 43970 24092 V 2370 24137 41645 45 v 2370
27355 45 3219 v 3078 26078 a Fx(Die)434 b(F)-108 b(unktion)433
b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Ft(x)22173 26277 y Fq(1)22699 26078 y Fv(;)656
b Ft(x)24455 26277 y Fq(2)24980 26078 y Fv(])434 b Fx(monoton)g
(steigend.)p 41605 27355 V 43970 27355 V 2370 27399 41645
45 v 2370 30617 45 3219 v 3078 29340 a Ft(f)3861 28858
y Fp(0)4172 29340 y Fv(\()p Ft(x)p Fv(\))368 b(=)h(5)434
b Fx(f\374r)f(alle)i Ft(x)369 b Fu(2)f Fv([)8 b Ft(x)16670
29539 y Fq(1)17196 29340 y Fv(;)656 b Ft(x)18952 29539
y Fq(2)19478 29340 y Fv(])p 41605 30617 V 43970 30617
V 2370 30661 41645 45 v 2370 33880 45 3219 v 3078 32603
a Ft(f)142 b Fv(\()p Ft(x)5106 32802 y Fq(2)5927 32603
y Fu(\000)295 b Ft(f)142 b Fv(\()p Ft(x)9283 32802 y
Fq(1)9809 32603 y Fv(\))369 b(=)f(5)296 b Fu(\001)f Fv(\()p
Ft(x)14919 32802 y Fq(2)15740 32603 y Fu(\000)g Ft(x)17807
32802 y Fq(1)18333 32603 y Fv(\))p 41605 33880 V 1 0 0
TeXcolorrgb 23474 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 43970 33880 V 2370 33924 41645 45 v 47992
8124 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 10116 a Fr(AN)369
b(1.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 37952 54804 45 v 0 TeXcolorgray 24746 81281 a Fx(9)p
0 TeXcolorgray eop end
%%Page: 10 10
TeXDict begin 10 9 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)975 b(1.2)f(-)h(4)f(Di\033erenzen-)g
(und)f(Di\033erenzialquotien)-60 b(t)972 b(-)j(MC)g(-)-2331
4515 y(Matura)717 b(2014/15)g(-)h(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fx(13.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)452 b(ist)h(eine)f(P)-36 b(olynomfunktion)454
b(f)f(zw)-36 b(eiten)453 b(Grades.)f(In)h(der)f(nac)-36
b(hstehenden)450 b(Ab-)921 9815 y(bildung)502 b(sind)h(der)f(Graph)g
(dieser)h(F)-108 b(unktion)502 b(im)i(In)-36 b(terv)-72
b(all)503 b Fv([)8 b(0;)221 b Ft(x)33845 10014 y Fq(3)34372
9815 y Fv(])503 b Fx(so)-36 b(wie)504 b(eine)f(Sekan)-36
b(te)921 11806 y Ft(s)442 b Fx(und)g(eine)g(T)-108 b(angen)-36
b(te)443 b Ft(t)f Fx(dargestellt.)i(Die)f(Stellen)f Ft(x)27950
12005 y Fq(0)28919 11806 y Fx(und)f Ft(x)32268 12005
y Fq(3)33237 11806 y Fx(sind)h(Nullstellen,)i Ft(x)43583
12005 y Fq(1)44551 11806 y Fx(ist)921 13798 y(eine)469
b(lokale)i(Extremstelle)f(v)-36 b(on)470 b Ft(f)142 b
Fx(.)470 b(W)-108 b(eiters)469 b(ist)h(die)f(T)-108 b(angen)-36
b(te)469 b Ft(t)g Fx(im)h(Punkt)f Fv(\()p Ft(x)41589
13997 y Fq(2)42114 13798 y Fu(j)p Ft(f)142 b Fv(\()p
Ft(x)44511 13997 y Fq(2)45037 13798 y Fv(\)\))921 15790
y Fx(parallel)435 b(zur)e(eingezeic)-36 b(hneten)433
b(Sekan)-36 b(te)433 b Ft(s)p Fx(.)p 0 TeXcolorgray 0
TeXcolorgray 3169 43343 a
 currentpoint currentpoint translate 1.36888 1.36888 scale neg exch
neg exch translate
 3169 43343 a 3602 43343 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 263.22563 a add def
/d 0.0 a add neg def /h 166.2477 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3602
43343 a 5410 40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 246.89752  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 246.89752  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 143.46892  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.46892
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 246.89752
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 143.46892  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 143.46892  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 246.89752  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse 0.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 143.46892
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 246.89752
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 5410 40822 a 5410
40822 a
tx@Dict begin  { 246.89752 143.46892 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 5410 40822 a 5040 41108
a Ft(x)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  PutEnd  end
 5410 40822
a 5410 40822 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 0.0 0.0 pop 246.89752 143.46892 exch pop } PutCoor
PutBegin  end
 5410 40822 a
5410 40822 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 5410 40822 a 4143 41154 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  PutEnd  end
 5410
40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (-(0.5*x-2.0)^(2.0)+4.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 3.5 def /x1 8.2 def /dx x1 x sub
49 div def /F@pstplot ((--32.-4.*x)/4.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 4.5 def /x1 7.5 def /dx x1 x sub
49 div def /F@pstplot ((--9.-1.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.05026 121.95093 134.33258 113.76755
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 145.84288 119.92603 136.12477 111.74222
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  { 156.49008 113.81097 } PutCoor PutBegin  end
 5410 40822 a 817
x Ft(t)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { 128.8822 90.10527 } PutCoor PutBegin  end
 5410 40822
a 572 x Ft(s)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 132.18959 104.4189 122.47191 96.23553
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.98221 102.39401 124.2641 94.21019
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
5410 40822 a
tx@Dict begin  { 58.58609 79.66776 } PutCoor PutBegin  end
 5410 40822 a 922 x Ft(f)5410 40822 y
tx@Dict begin  PutEnd  end
 5410
40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81097 0.0 113.81097 113.81097 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.0  5.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.71646 0.0 170.71646 85.35823  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.0  5.0 ] 0 0 add  DashLine  grestore end
 
@endspecial 5410 40822 a
tx@Dict begin  { 107.33165 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572
x Ft(x)6149 41593 y Fq(1)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410
40822 a
tx@Dict begin  { 163.26073 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572 x Ft(x)6149 41593 y Fq(2)5410
40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a 5410 40822 a
tx@Dict begin  { -11.19684 -7.96672 } PutCoor PutBegin  end
 5410 40822 a 836 x
Fv(0)369 b(=)g Ft(x)8549 41857 y Fq(0)5410 40822 y
tx@Dict begin  PutEnd  end
 5410
40822 a 5410 40822 a
tx@Dict begin  { 220.21614 -8.5359 } PutCoor PutBegin  end
 5410 40822 a 572 x Ft(x)6149 41593
y Fq(3)5410 40822 y
tx@Dict begin  PutEnd  end
 5410 40822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 113.81097
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 0.0   false NArray
 /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0 0.0
1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show grestore
} bind def   1. .setopacityalpha  newpath n { transform floor .5 add
exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.71646 85.35823
  false NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 227.62195 0.0   false
NArray  /DS 4.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
32740 43343 a
currentpoint initclip moveto
 32740 43343 a 3169 43343 a
 currentpoint currentpoint translate 1 1.36888 div 1 1.36888 div scale
neg exch neg exch translate
 3169 43343 a
855 47328 a Fx(W)-108 b(elc)-36 b(he)408 b(der)g(folgenden)h(A)-36
b(ussagen)409 b(sind)f(f\374r)h(die)f(in)h(der)f(Abbildung)g
(dargestellte)h(F)-108 b(unk-)921 49320 y(tion)434 b
Ft(f)575 b Fx(ric)-36 b(h)g(tig?)921 51312 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 14737 52278 16910 45 v 14737 55496 45 3219 v
15445 54219 a Ft(f)16228 53737 y Fp(0)16539 54219 y Fv(\()p
Ft(x)17784 54418 y Fq(0)18310 54219 y Fv(\))368 b(=)h
Ft(f)21348 53737 y Fp(0)21659 54219 y Fv(\()p Ft(x)22904
54418 y Fq(3)23429 54219 y Fv(\))p 29237 55496 V 31603
55496 V 14737 55541 16910 45 v 14737 58759 45 3219 v
15445 57482 a Ft(f)16228 57000 y Fp(0)16539 57482 y Fv(\()p
Ft(x)17784 57681 y Fq(1)18310 57482 y Fv(\))f(=)h(0)p
29237 58759 V 1 0 0 TeXcolorrgb 8731 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31603 58759 V 14737
58803 16910 45 v 14737 63698 45 4896 v 15578 60744 a
Ft(f)142 b Fv(\()p Ft(x)17606 60943 y Fq(3)18132 60744
y Fv(\))295 b Fu(\000)g Ft(f)142 b Fv(\()p Ft(x)22289
60943 y Fq(1)22815 60744 y Fv(\))p 15578 61333 7743 45
v 17373 62554 a Ft(x)18112 62753 y Fq(3)18933 62554 y
Fu(\000)295 b Ft(x)21000 62753 y Fq(1)23822 61643 y Fv(=)369
b Ft(f)25986 61161 y Fp(0)26297 61643 y Fv(\()p Ft(x)27542
61842 y Fq(2)28067 61643 y Fv(\))p 29237 63698 45 4896
v 1 0 0 TeXcolorrgb 29946 61583 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31603 63698 V 14737
63742 16910 45 v 14737 66961 45 3219 v 15445 65684 a
Ft(f)16228 65202 y Fp(0)16539 65684 y Fv(\()p Ft(x)17784
65883 y Fq(0)18310 65684 y Fv(\))f(=)h(0)p 29237 66961
V 31603 66961 V 14737 67005 16910 45 v 14737 71900 45
4896 v 15578 68946 a Ft(f)142 b Fv(\()p Ft(x)17606 69145
y Fq(1)18132 68946 y Fv(\))295 b Fu(\000)g Ft(f)142 b
Fv(\()p Ft(x)22289 69145 y Fq(3)22815 68946 y Fv(\))p
15578 69535 7743 45 v 17373 70756 a Ft(x)18112 70955
y Fq(1)18933 70756 y Fu(\000)295 b Ft(x)21000 70955 y
Fq(3)23822 69845 y Ft(>)369 b Fv(0)p 29237 71900 45 4896
v 31603 71900 V 14737 71944 16910 45 v 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(1.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 75972 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(10)p 0 TeXcolorgray
eop end
%%Page: 11 11
TeXDict begin 11 10 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1794 a Fy(AN)705 b(1.2)f(-)h(5)f
(\304nderungsraten)d(einer)j(P)-60 b(olynomfunktion)701
b(-)k(MC)g(-)-2331 4817 y(Matura)717 b(NT)h(2)f(15/16)p
0 TeXcolorgray -1391 8124 a Fx(14.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)-36
b(olynomfunktion)435 b Ft(f)142 b Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 7667 31101 a
 currentpoint currentpoint translate 0.61401 0.61401 scale neg exch
neg exch translate
 7667 31101 a 7667 31101 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 463.2106 a add def
/d 0.0 a add neg def /h 303.30634 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

7667 31101 a 22218 19384 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 331.75908 0.0 -131.45152 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 17
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 197.4621 0.0 -105.84424   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 331.75908  0 -131.45152  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -131.45152
 331.75908  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-105.84424  def /maxTickline 197.4621  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 197.4621
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 331.75908
0.0 -131.45152 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 197.4621  0 -105.84424  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -105.84424
 197.4621  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-131.45152  def /maxTickline 331.75908  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 197.4621
0.0 -105.84424   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 331.75908
0.0 -131.45152 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20973 16520 a
Fq(1)20973 13371 y(2)20973 10221 y(3)20973 7071 y(4)20973
3922 y(5)20973 772 y(6)20241 22773 y Fp(\000)p Fq(1)20241
25923 y Fp(\000)p Fq(2)20241 29072 y Fp(\000)p Fq(3)25132
20730 y(1)2680 b(2)f(3)h(4)g(5)f(6)h(7)f(8)h(9)2444 b(10)2210
b(11)-38866 b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)h
Fp(\000)p Fq(3)f Fp(\000)p Fq(4)22218 19384 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22218 19384
a 22218 19384 a
tx@Dict begin  { 331.75908 197.4621 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22218 19384 a 22218 19384 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22218 19384
a 21875 19670 a Fx(x)22218 19384 y
tx@Dict begin  PutEnd  end
 22218 19384 a 22218
19384 a
tx@Dict begin  PutEnd  end
 22218 19384 a 22218 19384 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22218 19384 a 22218
19384 a
tx@Dict begin  { 0.0 0.0 pop 331.75908 197.4621 exch pop } PutCoor
PutBegin  end
 22218 19384 a 22218 19384 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22218 19384 a 21170
19716 a Fx(f\(x\))22218 19384 y
tx@Dict begin  PutEnd  end
 22218 19384 a 22218 19384
a
tx@Dict begin  PutEnd  end
 22218 19384 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.62 def /x1 11.659999999999991
def /dx x1 x sub 199 div def /F@pstplot (-0.02263888888888889*x^(4.0)+0.25055555555555553*x^(3.0)-0.35180555555555554*x^(2.0)-2.255*x+5.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
22218 19384 a
tx@Dict begin  { -101.29169 -60.31967 } PutCoor PutBegin  end
 22218 19384 a -258 x Ft(f)22218 19384 y
tx@Dict begin  PutEnd  end

22218 19384 a 58942 31101 a
currentpoint initclip moveto
 58942 31101 a 7667 31101
a
 currentpoint currentpoint translate 1 0.61401 div 1 0.61401 div scale
neg exch neg exch translate
 7667 31101 a 921 35085 a Fx(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
1217 36052 43950 45 v 1217 41107 45 5056 v 1925 37912
a(Der)g(Di\033erenzialquotien)-36 b(t)435 b(an)e(der)g(Stelle)h
Ft(x)369 b Fv(=)g(6)433 b Fx(ist)h(gr\366\377er)g(als)h(der)e
(Di\033eren-)1925 39904 y(zialquotien)-36 b(t)435 b(an)e(der)g(Stelle)h
Ft(x)369 b Fv(=)g Fu(\000)p Fv(3)p Fx(.)p 42757 41107
V 45123 41107 V 1217 41151 43950 45 v 1217 44215 45 3064
v 1925 43011 a(Der)434 b(Di\033erenzialquotien)-36 b(t)435
b(an)e(der)g(Stelle)h Ft(x)369 b Fv(=)g(1)433 b Fx(ist)h(negativ.)p
42757 44215 V 1 0 0 TeXcolorrgb 43466 43015 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45123
44215 V 1217 44259 43950 45 v 1217 47477 45 3219 v 1925
46200 a Fx(Der)g(Di\033erenzialquotien)-36 b(t)435 b(im)e(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p Fv(3;)221 b(0])436
b Fx(ist)e(1.)p 42757 47477 V 45123 47477 V 1217 47521
43950 45 v 1217 50780 45 3260 v 1925 49577 a(Die)h(mittlere)e
(\304nderungsrate)g(ist)g(in)h(k)-36 b(einem)434 b(In)-36
b(terv)-72 b(all)434 b(gleic)-36 b(h)434 b(0.)p 42757
50780 V 45123 50780 V 1217 50825 43950 45 v 1217 54043
45 3219 v 1925 52766 a(Der)g(Di\033erenzialquotien)-36
b(t)435 b(im)e(In)-36 b(terv)-72 b(all)434 b Fv([)8 b(3;)221
b(6])p Fx(.)p 42757 54043 V 1 0 0 TeXcolorrgb 17433 w
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45123 54043 V 1217 54087 43950 45 v 47992 8124 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 10116 a Fr(AN)369 b(1.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 58115
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(11)p 0 TeXcolorgray
eop end
%%Page: 12 12
TeXDict begin 12 11 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)638 b(1.2)e(-)i(6)f
(Di\033erenzenquotien)-60 b(t)635 b(-)i(Di\033eren)-60
b(tialquotien)g(t)635 b(-)i(MC)-2617 4515 y(-)718 b(Matura)f(2013/14)g
(1.)g(Neb)60 b(en)-60 b(termin)p 0 TeXcolorgray -1391
7823 a Fx(15.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b Ft(f)142 b Fx(:)p 0 TeXcolorgray 0 TeXcolorgray 7666
35640 a
 currentpoint currentpoint translate 0.85263 0.85263 scale neg exch
neg exch translate
 7666 35640 a 7666 35640 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 333.59294 a add def
/d 0.0 a add neg def /h 269.7132 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7666 35640 a 26036
23761 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 167.6409 0.0 -165.95204 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 162.39545 0.0 -107.31775   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 167.6409  0 -165.95204  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -165.95204
 167.6409  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.31775  def /maxTickline 162.39545  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.39545
0.0 -107.31775   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.6409
0.0 -165.95204 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 162.39545  0 -107.31775  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.31775
 162.39545  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-165.95204  def /maxTickline 167.6409  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.39545
0.0 -107.31775   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.6409
0.0 -165.95204 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 24791 20897 a Fq(1)24791 17747
y(2)24791 14597 y(3)24791 11448 y(4)24791 8298 y(5)24059
27150 y Fp(\000)p Fq(1)24059 30299 y Fp(\000)p Fq(2)24059
33449 y Fp(\000)p Fq(3)28951 25106 y(1)2679 b(2)h(3)f(4)h(5)-19734
b Fp(\000)p Fq(1)-4351 b Fp(\000)p Fq(2)f Fp(\000)p Fq(3)h
Fp(\000)p Fq(4)f Fp(\000)p Fq(5)26036 23761 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26036 23761
a 26036 23761 a
tx@Dict begin  { 167.6409 162.39545 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26036 23761 a 26036 23761 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26036 23761
a 25693 24047 a Fx(x)26036 23761 y
tx@Dict begin  PutEnd  end
 26036 23761 a 26036
23761 a
tx@Dict begin  PutEnd  end
 26036 23761 a 26036 23761 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26036 23761 a 26036
23761 a
tx@Dict begin  { 0.0 0.0 pop 167.6409 162.39545 exch pop } PutCoor
PutBegin  end
 26036 23761 a 26036 23761 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26036 23761 a 24988
24093 a Fx(f\(x\))26036 23761 y
tx@Dict begin  PutEnd  end
 26036 23761 a 26036 23761
a
tx@Dict begin  PutEnd  end
 26036 23761 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.832548135104837 def /x1 5.891911065818181
def /dx x1 x sub 199 div def /F@pstplot (0.09804004429333255*x^(4.0)+0.040538292112993014*x^(3.0)-1.404194081776737*x^(2.0)+0.008372796173848979*x+2.9967958492616105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26036 23761 a
tx@Dict begin  { -110.58954 131.16585 } PutCoor PutBegin  end
 26036 23761 a 915 x Fx(f)26036 23761 y
tx@Dict begin  PutEnd  end

26036 23761 a 44593 35640 a
currentpoint initclip moveto
 44593 35640 a 7666 35640
a
 currentpoint currentpoint translate 1 0.85263 div 1 0.85263 div scale
neg exch neg exch translate
 7666 35640 a 921 39625 a Fx(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
17154 42584 12076 45 v 17154 46215 45 3632 v 17995 44193
a Fl(f)98 b Fq(\(3\))p Fp(\000)p Fl(f)g Fq(\()p Fp(\000)p
Fq(3\))p 17995 44503 4968 45 v 20244 45271 a(6)23465
44813 y Fv(=)368 b(0)p 26820 46215 45 3632 v 29185 46215
V 17154 46260 12076 45 v 17154 49892 45 3632 v 17995
47869 a Fl(f)98 b Fq(\(3\))p Fp(\000)p Fl(f)g Fq(\(0\))p
17995 48179 4236 45 v 19878 48947 a(3)22733 48489 y Ft(<)368
b Fv(0)p 26820 49892 45 3632 v 1 0 0 TeXcolorrgb 27529
48408 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 29185 49892 V 17154 49936 12076 45 v 17154
53154 45 3219 v 17862 51877 a Ft(f)18645 51395 y Fp(0)18956
51877 y Fv(\(3\))h(=)f(0)p 26820 53154 V 29185 53154
V 17154 53198 12076 45 v 17154 56416 45 3219 v 17862
55139 a Ft(f)18645 54657 y Fp(0)18956 55139 y Fv(\()p
Fu(\000)p Fv(2\))h Ft(>)g Fv(0)p 26820 56416 V 1 0 0
TeXcolorrgb 3478 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 29185 56416 V 17154 56461 12076 45 v 17154
59679 45 3219 v 17862 58402 a Ft(f)18645 57920 y Fp(0)18956
58402 y Fv(\()p Fu(\000)p Fv(1\))g(=)g Ft(f)24184 57920
y Fp(0)24494 58402 y Fv(\(1\))p 26820 59679 V 29185 59679
V 17154 59723 12076 45 v 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)g(1.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 63751 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(12)p 0 TeXcolorgray
eop end
%%Page: 13 13
TeXDict begin 13 12 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1794 a Fy(AN)718 b(1.3)f(-)h(1)f
(\304nderungsma\377e)e(-)j(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-1391 5102 a Fx(16.)p 0 TeXcolorgray 651 w(Die)538 b(nac)-36
b(hstehende)535 b(Abbildung)h(zeigt)i(den)e(Graphen)g(der)g(F)-108
b(unktion)536 b Ft(f)679 b Fx(mit)537 b(der)g(Glei-)921
7094 y(c)-36 b(h)g(ung)432 b Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))369 b(=)g(0)p Ft(;)p Fv(1)p Ft(x)11362 6612 y Fq(2)11889
7094 y Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 9135 33920
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.89334 a add def
/d 0.0 a add neg def /h 202.34677 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9135 33920 a 10686 32430 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 243.87755 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 188.88408 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 243.87755  0 -14.0158  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -14.0158
 243.87755  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-13.46269  def /maxTickline 188.88408  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 188.88408
0.0 -13.46269   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 243.87755
0.0 -14.0158 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 188.88408  0 -13.46269  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -13.46269
 188.88408  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-14.0158  def /maxTickline 243.87755  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 188.88408
0.0 -13.46269   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 243.87755
0.0 -14.0158 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 9441 29565 a Fq(1)9441
26416 y(2)9441 23266 y(3)9441 20117 y(4)9441 16967 y(5)9441
13817 y(6)13601 33775 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)10686
32430 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 10686 32430 a 10686 32430 a
tx@Dict begin  { 243.87755 188.88408 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 10686 32430 a 10686
32430 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 10686 32430 a 10343 32716 a Fx(x)10686 32430
y
tx@Dict begin  PutEnd  end
 10686 32430 a 10686 32430 a
tx@Dict begin  PutEnd  end
 10686 32430 a 10686 32430
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 10686 32430 a 10686 32430 a
tx@Dict begin  { 0.0 0.0 pop 243.87755 188.88408 exch pop } PutCoor
PutBegin  end
 10686 32430 a 10686 32430
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 10686 32430 a 9638 32762 a Fx(f\(x\))10686 32430 y
tx@Dict begin  PutEnd  end

10686 32430 a 10686 32430 a
tx@Dict begin  PutEnd  end
 10686 32430 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.4926028799460468 def /x1 8.57131234392381
def /dx x1 x sub 199 div def /F@pstplot (0.1*x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 10686 32430 a
tx@Dict begin  { 216.10426 164.51195 } PutCoor PutBegin  end
 10686 32430 a
922 x Ft(f)10686 32430 y
tx@Dict begin  PutEnd  end
 10686 32430 a 37683 33920 a
currentpoint initclip moveto

37683 33920 a 921 37904 a Fx(Kreuze)379 b(die)h(b)36
b(eiden)379 b(A)-36 b(ussagen)379 b(an,)h(die)g(f\374r)f(die)h(gegeb)36
b(ene)380 b(F)-108 b(unktion)378 b Ft(f)522 b Fx(zutre\033end)378
b(sind.)p 1062 38871 44260 45 v 1062 42204 45 3334 v
1770 40927 a(Die)391 b(absolute)g(\304nderung)d(in)j(den)e(In)-36
b(terv)-72 b(allen)390 b Fv([)8 b(0;)221 b(3])392 b Fx(und)d
Fv([)8 b(4;)221 b(5])392 b Fx(ist)e(gleic)-36 b(h)391
b(gro\377.)p 42912 42204 V 1 0 0 TeXcolorrgb 43621 40870
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 42204 V 1062 42248 44260 45 v 1062 47573 45 5325
v 1770 44304 a Fx(Die)435 b(mittlere)e(\304nderungsrate)g(der)g(F)-108
b(unktion)433 b(f)h(in)f(den)g(In)-36 b(terv)-72 b(allen)434
b Fv([)8 b(0;)221 b(2])435 b Fx(und)1770 46296 y Fv([)8
b(2;)221 b(4])436 b Fx(ist)d(gleic)-36 b(h.)p 42912 47573
V 45277 47573 V 1062 47618 44260 45 v 1062 50877 45 3260
v 1770 49674 a(Die)435 b(momen)-36 b(tane)433 b(\304nderungsrate)f(an)i
(der)f(Stelle)g Ft(x)370 b Fv(=)e(5)434 b Fx(hat)f(den)g(W)-108
b(ert)433 b Fv(2)p Ft(;)p Fv(5)p Fx(.)p 42912 50877 V
45277 50877 V 1062 50921 44260 45 v 1062 56172 45 5252
v 1770 52977 a(Die)i(momen)-36 b(tane)433 b(\304nderungsrate)f(an)i
(der)f(Stelle)g Ft(x)370 b Fv(=)e(2)434 b Fx(ist)g(gr\366\377er)g(als)g
(die)1770 54969 y(momen)-36 b(tane)434 b(\304nderungsrate)e(an)h(der)g
(Stelle)h Ft(x)369 b Fv(=)g(6)p Fx(.)p 42912 56172 V
45277 56172 V 1062 56217 44260 45 v 1062 63086 45 6870
v 1770 58158 a(Die)925 b(Steigung)f(der)f(Sekan)-36 b(te)924
b(durc)-36 b(h)923 b(die)h(Punkte)f Ft(A)1204 b Fv(=)g(\(3)p
Fu(j)p Ft(f)142 b Fv(\(3\)\))924 b Fx(und)1770 60150
y Ft(B)437 b Fv(=)368 b(\(6)p Fu(j)p Ft(f)142 b Fv(\(6\)\))434
b Fx(ist)f(gr\366\377er)i(als)f(die)f(momen)-36 b(tane)433
b(\304nderungsrate)g(an)g(der)g(Stelle)1770 62141 y Ft(x)370
b Fv(=)e(3)p Fx(.)p 42912 63086 V 1 0 0 TeXcolorrgb 43621
59984 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 63086 V 1062 63131 44260 45 v 47992
5102 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 7094 a Fr(AN)h(1.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
67159 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(13)p
0 TeXcolorgray eop end
%%Page: 14 14
TeXDict begin 14 13 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.3)f(-)h(2)f(F)-179
b(reier)716 b(F)-179 b(all)716 b(-)i(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(17.)p 0 TeXcolorgray 651
w(F)-27 b(\374r)333 b(einen)g(frei)h(fallenden)g(K)-36
b(\366rp)36 b(er)333 b(ist)h(eine)f(Zeit-W)-108 b(eg-F)g(unktion)332
b Ft(s)p Fv(\()p Ft(t)p Fv(\))h Fx(durc)-36 b(h)332 b
Ft(s)p Fv(\()p Ft(t)p Fv(\))368 b(=)43761 4230 y Fl(g)p
43761 4491 480 45 v 43766 5259 a Fq(2)44465 4800 y Fu(\001)91
b Ft(t)45395 4318 y Fq(2)921 6792 y Fx(gegeb)36 b(en.)434
b(Dab)36 b(ei)434 b(ist)g Ft(g)417 b Fu(\031)369 b Fv(10)221
b Fx(m/s)18032 6310 y Fq(2)18991 6792 y Fx(die)434 b(F)-108
b(allb)36 b(esc)-36 b(hleunigung.)921 11330 y(Berec)g(hne)433
b(die)g(mittlere)h(Gesc)-36 b(h)g(windigk)g(eit)434 b(in)f(m/s)h(im)g
(Zeitin)-36 b(terv)-72 b(all)434 b Fv([)8 b(2;)221 b(4])435
b Fx(Sekunden.)p 1 0 0 TeXcolorrgb 970 14221 a Fv(\026)-699
b Ft(v)416 b Fv(=)3480 13322 y Ft(s)p Fv(\(4\))295 b
Fu(\000)g Ft(s)p Fv(\(2\))p 3480 13911 6173 45 v 5104
15132 a(4)h Fu(\000)f Fv(2)10154 14221 y(=)11668 13322
y(80)h Fu(\000)f Fv(20)p 11668 13911 4225 45 v 13455
15132 a(2)16395 14221 y(=)368 b(30)434 b Fx(Die)h(mittlere)e(Gesc)-36
b(h)g(windigk)g(eit)434 b(b)36 b(etr\344gt)434 b(30)217
b(m/s.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792
a Fr(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 18718 54804 45 v -2331 24019 a Fy(AN)832
b(1.3)g(-)g(3)f(F)-179 b(reier)831 b(F)-179 b(all)830
b(-)i(Momen)-60 b(tangesc)g(h)g(windigk)g(eit)830 b(-)i(O)-60
b(A)832 b(-)-2331 27042 y(BIFIE)p 0 TeXcolorgray -1391
30349 a Fx(18.)p 0 TeXcolorgray 651 w(F)-27 b(\374r)333
b(einen)g(frei)h(fallenden)g(K)-36 b(\366rp)36 b(er)333
b(ist)h(eine)f(Zeit-W)-108 b(eg-F)g(unktion)332 b Ft(s)p
Fv(\()p Ft(t)p Fv(\))h Fx(durc)-36 b(h)332 b Ft(s)p Fv(\()p
Ft(t)p Fv(\))368 b(=)43761 29778 y Fl(g)p 43761 30039
480 45 v 43766 30807 a Fq(2)44465 30349 y Fu(\001)91
b Ft(t)45395 29867 y Fq(2)921 32341 y Fx(gegeb)36 b(en.)434
b(Dab)36 b(ei)434 b(ist)g Ft(g)417 b Fu(\031)369 b Fv(10)221
b Fx(m/s)18032 31695 y Fq(2)18991 32341 y Fx(die)434
b(F)-108 b(allb)36 b(esc)-36 b(hleunigung.)921 36878
y(Berec)g(hne)433 b(die)g(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434
b(in)g(m/s)g(zum)f(Zeitpunkt)f Ft(t)369 b Fv(=)g(2)434
b Fx(Sekunden.)p 1 0 0 TeXcolorrgb 921 39424 a Ft(v)48
b Fv(\()p Ft(t)p Fv(\))368 b(=)g Ft(s)5441 38942 y Fp(0)5752
39424 y Fv(\()p Ft(t)p Fv(\))g(=)g(10)p Ft(t)921 41416
y(v)48 b Fv(\(2\))368 b(=)h(20)921 43407 y Fx(Die)434
b(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434 b(zum)f(Zeitpunkt)g
Ft(t)369 b Fv(=)f(2)434 b Fx(Sekunden)f(b)36 b(etr\344gt)433
b(20)217 b(m/s.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 30349 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 32341 a Fr(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 47215 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(14)p 0 TeXcolorgray eop end
%%Page: 15 15
TeXDict begin 15 14 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.3)f(-)h(4)f
(Di\033erenzenquotien)-60 b(t)715 b(-)j(L)-179 b(T)716
b(-)i(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(19.)p 0
TeXcolorgray 651 w(Die)460 b(nac)-36 b(hstehende)457
b(Abbildung)h(zeigt)i(den)e(Graphen)f(einer)i(F)-108
b(unktion)459 b Ft(f)600 b Fx(mit)459 b(einer)g(Se-)921
6792 y(kan)-36 b(te.)p 0 TeXcolorgray 0 TeXcolorgray
11332 25850 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 218.18863 a add def
/d 0.0 a add neg def /h 153.16055 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11332 25850 a 13438 23583 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 188.45644  0 -19.01942  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -19.01942
 188.45644  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-20.4821  def /maxTickline 132.67845  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.67845
0.0 -20.4821   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.45644
0.0 -19.01942 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 132.67845  0 -20.4821  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -20.4821
 132.67845  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.01942  def /maxTickline 188.45644  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
0.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 132.67845
0.0 -20.4821   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 188.45644
0.0 -19.01942 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13438 23583 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

13438 23583 a 13438 23583 a
tx@Dict begin  { 188.45644 132.67845 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13438 23583 a 13438 23583
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13438 23583 a 13095 23869 a Fx(x)13438 23583 y
tx@Dict begin  PutEnd  end
 13438
23583 a 13438 23583 a
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13438
23583 a 13438 23583 a
tx@Dict begin  { 0.0 0.0 pop 188.45644 132.67845 exch pop } PutCoor
PutBegin  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 13438
23583 a 12390 23915 a Fx(f\(x\))13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583
a 13438 23583 a
tx@Dict begin  PutEnd  end
 13438 23583 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 14.22636 43.29387 14.22636 43.29387
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 15.09772 42.60269 14.22636 43.29387
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 15.96863 41.92845 15.09772 42.60269
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 16.83998 41.2707 15.96863 41.92845
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 17.71089 40.62903 16.83998 41.2707
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 18.58223 40.00429 17.71089 40.62903
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 19.45358 39.3956 18.58223 40.00429
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 20.3245 38.8034 19.45358 39.3956  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 21.19585 38.22815 20.3245 38.8034 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.06676 37.66896 21.19585 38.22815
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 22.93811 37.12627 22.06676 37.66896
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 23.80902 36.60008 22.93811 37.12627
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 24.68037 36.09038 23.80902 36.60008
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 25.55128 35.59718 24.68037 36.09038
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 26.42262 35.12004 25.55128 35.59718
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 27.29398 34.65984 26.42262 35.12004
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.16489 34.21614 27.29398 34.65984
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 29.03624 33.7885 28.16489 34.21614
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 29.90715 33.37778 29.03624 33.7885
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 30.7785 32.98314 29.90715 33.37778
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 31.64941 32.60542 30.7785 32.98314
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 32.52077 32.24377 31.64941 32.60542
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 33.39168 31.89862 32.52077 32.24377
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 34.26303 31.56996 33.39168 31.89862
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 35.13394 31.25781 34.26303 31.56996
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.00528 30.96214 35.13394 31.25781
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 36.87663 30.68298 36.00528 30.96214
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 37.74754 30.42032 36.87663 30.68298
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 38.6189 30.17372 37.74754 30.42032
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 39.4898 29.94406 38.6189 30.17372 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 40.36116 29.73045 39.4898 29.94406
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 41.23207 29.53378 40.36116 29.73045
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.10342 29.35316 41.23207 29.53378
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 42.97433 29.1895 42.10342 29.35316
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 43.84569 29.04189 42.97433 29.1895
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 44.71703 28.91077 43.84569 29.04189
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 45.58794 28.79616 44.71703 28.91077
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 46.45929 28.69803 45.58794 28.79616
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 47.3302 28.61641 46.45929 28.69803
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 48.20155 28.55128 47.3302 28.61641
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 49.07246 28.50267 48.20155 28.55128
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 49.94382 28.47011 49.07246 28.50267
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 50.81473 28.45447 49.94382 28.47011
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 51.68608 28.45534 50.81473 28.45447
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 52.55699 28.47227 51.68608 28.45534
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 53.42833 28.5057 52.55699 28.47227
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 54.29968 28.55606 53.42833 28.5057
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 55.1706 28.6225 54.29968 28.55606 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.04195 28.70541 55.1706 28.6225 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.91286 28.80484 56.04195 28.70541
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 57.78421 28.92076 56.91286 28.80484
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 58.65512 29.05318 57.78421 28.92076
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 59.52647 29.20209 58.65512 29.05318
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 60.39738 29.3675 59.52647 29.20209
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 61.26874 29.54898 60.39738 29.3675
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 62.14008 29.74739 61.26874 29.54898
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 63.01099 29.9623 62.14008 29.74739
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 63.88234 30.19327 63.01099 29.9623
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 64.75325 30.44116 63.88234 30.19327
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 65.6246 30.70512 64.75325 30.44116
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 66.49551 30.9856 65.6246 30.70512 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 67.36687 31.28255 66.49551 30.9856
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 68.23778 31.59601 67.36687 31.28255
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 69.10913 31.92596 68.23778 31.59601
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 69.98004 32.27243 69.10913 31.92596
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 70.8514 32.63538 69.98004 32.27243
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 71.72273 33.01483 70.8514 32.63538
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 72.59364 33.41078 71.72273 33.01483
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 73.465 33.82278 72.59364 33.41078 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 74.3359 34.25174 73.465 33.82278  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 75.20726 34.69675 74.3359 34.25174
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 76.07817 35.15869 75.20726 34.69675
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 76.94952 35.63669 76.07817 35.15869
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 77.82043 36.1312 76.94952 35.63669
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 78.69179 36.6422 77.82043 36.1312 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 79.5627 37.1697 78.69179 36.6422  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 80.43404 37.71368 79.5627 37.1697 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 81.30539 38.27417 80.43404 37.71368
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 82.1763 38.85117 81.30539 38.27417
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 83.04765 39.44466 82.1763 38.85117
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 83.91856 40.05464 83.04765 39.44466
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 84.78992 40.6807 83.91856 40.05464
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.66083 41.32368 84.78992 40.6807
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 86.53218 41.98273 85.66083 41.32368
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 87.40309 42.6587 86.53218 41.98273
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 88.27444 43.35074 87.40309 42.6587
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 89.14578 44.05928 88.27444 43.35074
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 90.0167 44.78476 89.14578 44.05928
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 90.88805 45.52629 90.0167 44.78476
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 91.75896 46.28433 90.88805 45.52629
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 92.63031 47.05885 91.75896 46.28433
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 93.50122 47.84946 92.63031 47.05885
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 94.37257 48.65698 93.50122 47.84946
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 95.24348 49.481 94.37257 48.65698 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.11484 50.32153 95.24348 49.481 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 96.98575 51.17812 96.11484 50.32153
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 97.8571 52.05164 96.98575 51.17812
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 98.72844 52.94121 97.8571 52.05164
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 99.59935 53.84729 98.72844 52.94121
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 100.4707 54.77031 99.59935 53.84729
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 101.34161 55.70938 100.4707 54.77031
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 102.21297 56.66496 101.34161 55.70938
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 103.08388 57.63702 102.21297 56.66496
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 103.95523 58.6256 103.08388 57.63702
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 104.82614 59.63066 103.95523 58.6256
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 105.6975 60.6518 104.82614 59.63066
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 106.56883 61.68987 105.6975 60.6518
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 107.43974 62.74442 106.56883 61.68987
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 108.3111 63.81505 107.43974 62.74442
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 109.182 64.9026 108.3111 63.81505 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 110.05336 66.00623 109.182 64.9026
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 110.92427 67.12634 110.05336 66.00623
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 111.79562 68.2634 110.92427 67.12634
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 112.66653 69.4165 111.79562 68.2634
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.53789 70.58612 112.66653 69.4165
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 114.4088 71.77223 113.53789 70.58612
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 115.28015 72.97484 114.4088 71.77223
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 116.15149 74.19394 115.28015 72.97484
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.0224 75.42955 116.15149 74.19394
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 117.89375 76.68121 117.0224 75.42955
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 118.76466 77.94981 117.89375 76.68121
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 119.63602 79.23448 118.76466 77.94981
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 120.50693 80.53607 119.63602 79.23448
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 121.37828 81.85373 120.50693 80.53607
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 122.24919 83.18832 121.37828 81.85373
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 123.12054 84.53897 122.24919 83.18832
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 123.99146 85.90613 123.12054 84.53897
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 124.86281 87.28978 123.99146 85.90613
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 125.73415 88.68993 124.86281 87.28978
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 126.60506 90.10657 125.73415 88.68993
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 127.47641 91.53972 126.60506 90.10657
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 128.34732 92.98935 127.47641 91.53972
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 129.21867 94.45549 128.34732 92.98935
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 130.08958 95.9377 129.21867 94.45549
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 130.96094 97.43683 130.08958 95.9377
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 131.83185 98.95203 130.96094 97.43683
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 132.7032 100.48416 131.83185 98.95203
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 133.57454 102.03236 132.7032 100.48416
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 134.44545 103.59705 133.57454 102.03236
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 135.3168 105.17824 134.44545 103.59705
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 136.18771 106.77592 135.3168 105.17824
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.05907 108.39012 136.18771 106.77592
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 137.92998 110.0208 137.05907 108.39012
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 138.80133 111.66798 137.92998 110.0208
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 139.67224 113.33167 138.80133 111.66798
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 140.5436 115.01184 139.67224 113.33167
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 141.4145 116.70808 140.5436 115.01184
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.28586 118.42125 141.4145 116.70808
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 143.1572 120.15048 142.28586 118.42125
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.0281 121.89665 143.1572 120.15048
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 144.89946 123.65889 144.0281 121.89665
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 145.77037 125.43762 144.89946 123.65889
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 146.64172 127.23329 145.77037 125.43762
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 147.51263 129.04501 146.64172 127.23329
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 148.38399 130.87323 147.51263 129.04501
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 149.2549 132.71796 148.38399 130.87323
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.12625 134.57874 149.2549 132.71796
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 150.99759 136.45647 150.12625 134.57874
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 151.86852 138.35068 150.99759 136.45647
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 152.73985 140.26138 151.86852 138.35068
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 153.61076 142.18817 152.73985 140.26138
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 154.48212 144.13188 153.61076 142.18817
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 155.35303 146.09164 154.48212 144.13188
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 156.22438 148.06792 155.35303 146.09164
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 157.09529 150.06113 156.22438 148.06792
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 157.96664 152.07039 157.09529 150.06113
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 158.83755 154.09616 157.96664 152.07039
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 159.70891 156.13841 158.83755 154.09616
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 160.58025 158.19717 159.70891 156.13841
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.45117 160.27243 160.58025 158.19717
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 162.32251 162.3642 161.45117 160.27243
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 163.19342 164.47202 162.32251 162.3642
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.06477 166.59676 163.19342 164.47202
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 164.93568 168.73758 164.06477 166.59676
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 165.80704 170.89532 164.93568 168.73758
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 166.67795 173.06914 165.80704 170.89532
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 167.5493 175.25987 166.67795 173.06914
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 168.42021 177.46669 167.5493 175.25987
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 169.29156 179.68999 168.42021 177.46669
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 170.1629 181.9298 169.29156 179.68999
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 171.03381 184.1861 170.1629 181.9298
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 171.90517 186.4589 171.03381 184.1861
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 172.77608 188.74818 171.90517 186.4589
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 173.64743 191.05399 172.77608 188.74818
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 174.51834 193.37584 173.64743 191.05399
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 175.3897 195.71463 174.51834 193.37584
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 176.2606 198.06992 175.3897 195.71463
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 177.13196 200.44127 176.2606 198.06992
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 178.0033 202.82956 177.13196 200.44127
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 178.87422 205.2339 178.0033 202.82956
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 179.74556 207.65474 178.87422 205.2339
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 180.61647 210.09209 179.74556 207.65474
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 181.48782 212.54593 180.61647 210.09209
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 182.35873 215.01627 181.48782 212.54593
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 183.23009 217.5031 182.35873 215.01627
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 184.101 220.00644 183.23009 217.5031
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 184.97235 222.52628 184.101 220.00644
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 185.84326 225.0626 184.97235 222.52628
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 186.71461 227.61499 185.84326 225.0626
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 187.58595 230.18433 186.71461 227.61499
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 188.45688 232.76971 187.58595 230.18433
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.66845823698629 def /x1 6.623496527724776
def /dx x1 x sub 49 div def /F@pstplot ((--1.8271604938271606--2.962962962962963*x)/4.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 0.0 28.45274 34.07286   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 142.26372 0.0 142.26372 118.3774  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13438 23583 a
tx@Dict begin  { 31.29819 19.91682 } PutCoor PutBegin  end
 13438 23583 a
996 x Ft(f)142 b Fv(\()p Ft(x)15466 24778 y Fq(0)15991
24579 y Fv(\))13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583
a
tx@Dict begin  { 143.4381 71.13185 } PutCoor PutBegin  end
 13438 23583 a 996 x Ft(f)g Fv(\()p Ft(x)15466 24778
y Fq(0)16287 24579 y Fv(+)294 b Ft(h)p Fv(\))13438 23583
y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 82.51277 39.83366 } PutCoor PutBegin  end
 13438 23583 a 922 x Ft(f)13438
23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a 13438 23583 a
tx@Dict begin  { 22.57341 -4.26773 } PutCoor PutBegin  end
 13438 23583 a 571
x Ft(x)14177 24353 y Fq(0)13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583 a
13438 23583 a
tx@Dict begin  { 129.73705 -2.84544 } PutCoor PutBegin  end
 13438 23583 a 922 x Ft(x)14177 24704 y
Fq(0)14998 24505 y Fv(+)h Ft(h)13438 23583 y
tx@Dict begin  PutEnd  end
 13438 23583
a 13438 23583 a
tx@Dict begin  { 85.35823 -3.69899 } PutCoor PutBegin  end
 13438 23583 a 922 x Ft(h)13438 23583
y
tx@Dict begin  PutEnd  end
 13438 23583 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 28.45274 34.07286
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 142.26372 118.3774
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 28.45274 0.0 
 false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 142.26372 0.0
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
35485 25850 a
currentpoint initclip moveto
 35485 25850 a 921 29834 a Fx(Erg\344nze)358
b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f
(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360
b(ric)-36 b(h)g(tigen)921 31826 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 35316 y(Der)434
b(A)-36 b(usdruc)g(k)p 9436 35316 3150 45 v 13058 35268
a(1)12586 35316 y Fo(\015)p 14180 35316 V 3583 w Fx(b)36
b(esc)-36 b(hriebt)432 b(die)p 26297 35316 V 29918 35268
a(2)29446 35316 y Fo(\015)p 31040 35316 V 3584 w Fx(.)p
0 TeXcolorgray 0 TeXcolorgray 7111 36689 14049 45 v 7111
39773 45 3085 v 13810 38470 a(1)13338 38518 y Fo(\015)p
21115 39773 V 7111 39817 14049 45 v 7111 44513 45 4696
v 7952 41758 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b
Fu(\000)g Ft(f)142 b Fv(\()p Ft(x)14137 41957 y Fq(0)14663
41758 y Fv(\))p 7952 42347 7217 45 v 11186 43568 a Ft(h)p
18750 44513 45 4696 v 19459 42497 a Fn(2)p 21115 44513
V 7111 44557 14049 45 v 7111 49253 45 4696 v 7952 46499
a Ft(f)g Fv(\()p Ft(x)295 b Fv(+)g Ft(h)p Fv(\))g Fu(\000)g
Ft(f)142 b Fv(\()p Ft(x)16488 46698 y Fq(0)17014 46499
y Fv(\))p 7952 47087 9568 45 v 12362 48308 a Ft(h)p 18750
49253 45 4696 v 1 0 0 TeXcolorrgb 19459 47237 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
49253 V 7111 49298 14049 45 v 7111 54193 45 4896 v 7952
51239 a Ft(f)g Fv(\()p Ft(x)295 b Fv(+)g Ft(h)p Fv(\))g
Fu(\000)g Ft(f)142 b Fv(\()p Ft(x)16488 51438 y Fq(0)17014
51239 y Fv(\))p 7952 51827 9568 45 v 12104 53049 a Ft(x)12843
53248 y Fq(0)p 18750 54193 45 4896 v 19459 52077 a Fn(2)p
21115 54193 V 7111 54237 14049 45 v 0 TeXcolorgray 0
TeXcolorgray 25658 36800 19769 45 v 25658 39884 45 3085
v 35217 38581 a Fx(2)34745 38629 y Fo(\015)p 45382 39884
V 25658 39928 19769 45 v 25658 44990 45 5063 v 26366
41795 a Fx(die)434 b(Steigung)f(v)-36 b(on)434 b Ft(f)575
b Fx(an)434 b(der)26366 43787 y(Stelle)g Ft(x)p 43017
44990 V 43725 42791 a Fn(2)p 45382 44990 V 25658 45035
19769 45 v 25658 50090 45 5056 v 26366 46895 a Fx(die)g(1.)g(Ableitung)
f(der)g(F)-108 b(unkti-)26366 48887 y(on)434 b Ft(f)p
43017 50090 V 43725 47894 a Fn(2)p 45382 50090 V 25658
50134 19769 45 v 25658 55459 45 5325 v 26366 52190 a
Fx(die)g(mittlere)f(\304nderungsrate)26366 54182 y(im)h(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Ft(x)34519 54381 y Fq(0)35045
54182 y Fv(;)221 b Ft(x)36366 54381 y Fq(0)37188 54182
y Fv(+)294 b Ft(h)p Fv(])p 43017 55459 V 1 0 0 TeXcolorrgb
43725 53129 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45382 55459 V 25658 55503 19769 45 v 47992
4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 59531 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(15)p
0 TeXcolorgray eop end
%%Page: 16 16
TeXDict begin 16 15 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.3)f(-)h(5)f
(Di\033erenzenquotien)-60 b(t)715 b(-)j(O)-60 b(A)717
b(-)h(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(20.)p 0
TeXcolorgray 651 w(Eine)416 b(F)-108 b(unktion)415 b
Ft(s)369 b Fv(:)g([)8 b(0;)221 b(6])371 b Fu(!)e Fj(R)417
b Fx(b)36 b(esc)-36 b(hreibt)415 b(den)h(v)-36 b(on)416
b(einem)g(Radfahrer)h(innerhalb)e(v)-36 b(on)921 6792
y Ft(t)433 b Fx(Sekunden)f(zur\374c)-36 b(kgelegten)434
b(W)-108 b(eg.)921 11330 y(Es)434 b(gilt:)g Ft(s)p Fv(\()p
Ft(t)p Fv(\))368 b(=)9403 10807 y Fq(1)p 9403 11020 471
45 v 9403 11788 a(2)10006 11330 y Ft(t)10476 10848 y
Fq(2)11297 11330 y Fv(+)294 b(2)p Ft(t)p Fx(.)921 13875
y(Der)465 b(zur\374c)-36 b(kgelegte)465 b(W)-108 b(eg)465
b(wird)g(dab)36 b(ei)465 b(in)g(Metern)e(angegeb)36 b(en,)466
b(die)e(Zeit)h(wird)g(ab)g(dem)921 15867 y(Zeitpunkt)433
b Ft(t)7425 16066 y Fq(0)8319 15867 y Fv(=)369 b(0)434
b Fx(in)f(Sekunden)f(gemessen.)921 20404 y(Ermittle)419
b(den)g(Di\033erenzenquotien)-36 b(ten)418 b(der)h(F)-108
b(unktion)419 b Ft(s)g Fx(im)g(In)-36 b(terv)-72 b(all)420
b Fv([)8 b(0;)221 b(6])421 b Fx(und)d(deute)921 22396
y(das)434 b(Ergebnis.)p 1 0 0 TeXcolorrgb 1054 24315
a Ft(s)p Fv(\(6\))295 b Fu(\000)g Ft(s)p Fv(\(0\))p 1054
24904 6173 45 v 2678 26125 a(6)h Fu(\000)f Fv(0)7728
25214 y(=)9242 24315 y(30)h Fu(\000)f Fv(0)p 9242 24904
3575 45 v 10704 26125 a(6)13318 25214 y(=)369 b(5)921
27896 y Fx(Das)451 b(Ergebnis)f(b)36 b(edeutet,)449 b(dass)i(die)f
(mittlere)g(Gesc)-36 b(h)g(windigk)g(eit)451 b(\(auc)-36
b(h)449 b(Durc)-36 b(hsc)g(hnitts-)921 29888 y(gesc)g(h)g(windigk)g
(eit\))434 b(des)g(Radfahrers)f(im)h(Zeitin)-36 b(terv)-72
b(all)434 b Fv([)8 b(0;)221 b(6])436 b Fx(5)217 b(m/s)434
b(b)36 b(etr\344gt.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 33695 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(16)p 0 TeXcolorgray eop end
%%Page: 17 17
TeXDict begin 17 16 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.3)f(-)h(6)f(F)-179
b(reier)716 b(F)-179 b(all)716 b(eines)h(K)-60 b(\366rp)60
b(ers)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -1391
4800 a Fx(21.)p 0 TeXcolorgray 651 w(Die)512 b(F)-108
b(unktion)511 b Ft(s)g Fx(mit)h Ft(s)p Fv(\()p Ft(t)p
Fv(\))501 b(=)16818 4230 y Fl(g)p 16818 4491 480 45 v
16823 5259 a Fq(2)17779 4800 y Fu(\001)348 b Ft(t)18966
4318 y Fq(2)20003 4800 y Fv(\()p Ft(g)550 b Fu(\031)502
b Fv(10)221 b Fx(m/s)26986 4155 y Fq(2)27512 4800 y Fv(\))511
b Fx(b)36 b(esc)-36 b(hreibt)511 b(ann\344hernd)f(den)h(v)-36
b(on)921 6792 y(einem)388 b(K)-36 b(\366rp)36 b(er)388
b(in)g(der)f(Zeit)h Ft(t)g Fx(\(in)g(Sekunden\))e(im)i(freien)h(F)-108
b(all)388 b(zur\374c)-36 b(kgelegten)388 b(W)-108 b(eg)389
b Ft(s)p Fv(\()p Ft(t)p Fv(\))769 8784 y Fx(\(in)433
b(m\).)921 13322 y(Kreuze)g(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 1062 14362 44260 45 v 1062
19476 45 5114 v 1770 16281 a(Die)i(erste)e(Ableitung)g
Ft(s)13897 15799 y Fp(0)14641 16281 y Fx(der)g(F)-108
b(unktion)433 b Ft(s)g Fx(an)h(der)f(Stelle)g Ft(t)31530
16480 y Fq(1)32489 16281 y Fx(b)36 b(esc)-36 b(hreibt)433
b(die)1770 18273 y(Momen)-36 b(tangesc)g(h)g(windigk)g(eit)434
b(des)g(K)-36 b(\366rp)36 b(ers)433 b(zum)g(Zeitpunkt)g
Ft(t)33586 18472 y Fq(1)34111 18273 y Fx(.)p 42912 19476
V 1 0 0 TeXcolorrgb 43621 17251 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 19476 V 1062 19520
44260 45 v 1062 24634 45 5114 v 1770 21439 a Fx(Die)i(zw)-36
b(eite)434 b(Ableitung)f Ft(s)14721 20957 y Fp(00)15720
21439 y Fx(der)g(F)-108 b(unktion)433 b Ft(s)g Fx(an)h(der)f(Stelle)g
Ft(t)32609 21638 y Fq(1)33568 21439 y Fx(b)36 b(esc)-36
b(hreibt)433 b(die)1770 23431 y(momen)-36 b(tane)434
b(\304nderungsrate)e(der)h(Gesc)-36 b(h)g(windigk)g(eit)434
b(zum)f(Zeitpunkt)f Ft(t)38718 23630 y Fq(1)39244 23431
y Fx(.)p 42912 24634 V 1 0 0 TeXcolorrgb 43621 22409
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 24634 V 1062 24679 44260 45 v 1062 29815 45 5137
v 1770 26620 a Fx(Der)i(Di\033erenzenquotien)-36 b(t)433
b(der)g(F)-108 b(unktion)433 b Ft(s)g Fx(im)h(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Ft(t)32504 26819 y Fq(1)33030
26620 y Fv(;)221 b Ft(t)34082 26819 y Fq(2)34608 26620
y Fv(])434 b Fx(gibt)g(den)e(in)1770 28612 y(diesem)i(In)-36
b(terv)-72 b(all)434 b(zur\374c)-36 b(kgelegten)434 b(W)-108
b(eg)434 b(an.)p 42912 29815 V 45277 29815 V 1062 29859
44260 45 v 1062 36906 45 7047 v 1770 31719 a(Der)342
b(Di\033erenzialquotien)-36 b(t)342 b(der)f(F)-108 b(unktion)340
b Ft(s)h Fx(an)h(einer)f(Stelle)g Ft(t)g Fx(gibt)g(den)g(Wink)-36
b(el)1770 33711 y(an,)527 b(den)e(die)h(T)-108 b(angen)-36
b(te)525 b(an)h(den)f(Graphen)f(im)j(Punkt)e Ft(P)707
b Fv(=)526 b(\()p Ft(t)p Fu(j)p Ft(s)p Fv(\()p Ft(t)p
Fv(\)\))e Fx(mit)i(der)1770 35703 y(p)36 b(ositiv)-36
b(en)435 b Ft(x)p Fx(-A)-36 b(c)g(hse)432 b(einsc)-36
b(hlie\377t)p 42912 36906 V 45277 36906 V 1062 36950
44260 45 v 1062 42160 45 5211 v 1770 38892 a(Der)322
b(Di\033erenzenquotien)-36 b(t)320 b(der)h(F)-108 b(unktion)320
b Ft(s)23737 38410 y Fp(0)24369 38892 y Fx(im)h(In)-36
b(terv)-72 b(all)321 b Fv([)8 b Ft(t)32027 39091 y Fq(1)32553
38892 y Fv(;)221 b Ft(t)33605 39091 y Fq(2)34131 38892
y Fv(])321 b Fx(gibt)h(die)f(mitt-)1770 40883 y(lere)434
b(\304nderung)f(der)g(Gesc)-36 b(h)g(windigk)g(eit)433
b(pro)h(Sekunde)e(im)i(In)-36 b(terv)-72 b(all)434 b
Fv([)8 b Ft(t)37490 41082 y Fq(1)38016 40883 y Fv(;)221
b Ft(t)39068 41082 y Fq(2)39594 40883 y Fv(])434 b Fx(an.)p
42912 42160 V 1 0 0 TeXcolorrgb 43621 39888 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
42160 V 1062 42205 44260 45 v 47992 4800 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46233
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(17)p 0 TeXcolorgray
eop end
%%Page: 18 18
TeXDict begin 18 17 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.3)f(-)h(7)f(T)-179
b(emp)60 b(eraturv)-60 b(erlauf)714 b(-)k(MC)f(-)h(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(22.)p 0 TeXcolorgray 651
w(A)-36 b(us)383 b(dem)h(nac)-36 b(hstehend)382 b(dargestellten)j
(Graphen)d(der)i(F)-108 b(unktion)383 b(T)h(l\344sst)h(sic)-36
b(h)384 b(der)f(T)-108 b(em-)921 6792 y(p)36 b(eraturv)-36
b(erlauf)461 b(in)11020 6310 y Fp(\016)11545 6792 y Fx(C)h(in)e(einem)h
(Reagenzglas)i(w)-36 b(\344hrend)460 b(eines)h(c)-36
b(hemisc)g(hen)460 b(V)-108 b(ersuc)-36 b(hs)921 8784
y(f\374r)433 b(die)h(ersten)f(7)h(Min)-36 b(uten)432
b(ablesen.)p 0 TeXcolorgray 0 TeXcolorgray 5418 34832
a
 currentpoint currentpoint translate 1.28426 1.28426 scale neg exch
neg exch translate
 5418 34832 a 5418 34832 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 253.10463 a add def
/d 0.0 a add neg def /h 168.43092 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 34832 a 7085 33334 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 238.04208 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 14.22722
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 18 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 154.90265 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 14.22636
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 238.04208  0 -15.06255  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -15.06255
 238.04208  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-13.52827  def /maxTickline 154.90265  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 154.90265
0.0 -13.52827   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.04208
0.0 -15.06255 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 154.90265  0 -13.52827  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -13.52827
 154.90265  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-15.06255  def /maxTickline 238.04208  def /dT 1864790 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 2.84544  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 2.84544  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 154.90265
0.0 -13.52827   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 238.04208
0.0 -15.06255 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 5369 30470 a Fq(10)5369 27320
y(20)5369 24170 y(30)5369 21021 y(40)5369 17871 y(50)9999
34680 y(1)2680 b(2)g(3)f(4)h(5)f(6)h(7)g(8)7085 33334
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 238.04208 154.90265 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 5.0 50.91719 9.0 3.0 140.  Uput UUput } PutCoor PutBegin
 end

7085 33334 a 4267 33667 a Fx(t)433 b(\(in)h(min\))7085
33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334 a
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 0.0 0.0 pop 238.04208 154.90265 exch pop } PutCoor
PutBegin  end
 7085 33334 a 7085 33334 a
tx@Dict begin  { 5.0 100.70805 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end

7085 33334 a 1511 33667 a Fx(T)-108 b(emp)36 b(eratur)433
b(\(in)10688 33184 y Fp(\016)11214 33667 y Fx(C\))7085
33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 7085 33334 a
tx@Dict begin  PutEnd  end
 7085 33334 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 7 def /dx x1 x sub 199
div def /F@pstplot (-0.008980203035689095*x^(5.0)+0.13719708284602655*x^(4.0)+0.3561102134564625*x^(3.0)-7.997836965184824*x^(2.0)+16.530060508880833*x+23.84460102384072)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
2.84544 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 2.84544 mul gt { moveto } { dup -1.e30 2.84544
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 2.84544 mul gt { moveto } { dup
-1.e30 2.84544 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 7085 33334 a
tx@Dict begin  { 86.65244 75.41841 } PutCoor PutBegin  end
 7085 33334 a 908
x Ft(T)7085 33334 y
tx@Dict begin  PutEnd  end
 7085 33334 a 33435 34832 a
currentpoint initclip moveto
 33435
34832 a 5418 34832 a
 currentpoint currentpoint translate 1 1.28426 div 1 1.28426 div scale
neg exch neg exch translate
 5418 34832 a 921 40808 a Fx(Kreuze)g(die)h(auf)g
(den)f(T)-108 b(emp)36 b(eraturv)-36 b(erlauf)433 b(zutre\033ende\(n\))
e(A)-36 b(ussage\(n\))434 b(an.)p 1062 41849 44260 45
v 1062 45182 45 3334 v 1770 43905 a(Im)g(In)-36 b(terv)-72
b(all)434 b Fv([)8 b(3;)221 b(6])436 b Fx(ist)d(die)h(mittlere)f
(\304nderungsrate)g(ann\344hernd)f(0)36878 43423 y Fp(\016)37404
43905 y Fx(C/min.)p 42912 45182 V 1 0 0 TeXcolorrgb 43621
43847 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 45182 V 1062 45226 44260 45 v 1062
48444 45 3219 v 1770 47167 a Fx(Im)i(In)-36 b(terv)-72
b(all)434 b Fv([)8 b(0)p Ft(;)p Fv(5;)221 b(1)p Ft(;)p
Fv(5])437 b Fx(ist)d(der)f(Di\033erenzenquotien)-36 b(t)433
b(gr\366\377er)h(als)g(25)37004 46685 y Fp(\016)37530
47167 y Fx(C/min.)p 42912 48444 V 45277 48444 V 1062
48489 44260 45 v 1062 53813 45 5325 v 1770 50545 a(Im)384
b(In)-36 b(terv)-72 b(all)385 b Fv([)8 b(0;)221 b(2])385
b Fx(gibt)f(es)g(einen)f(Zeitpunkt,)g(in)h(dem)f(die)h(momen)-36
b(tane)383 b(\304nde-)1770 52537 y(rungsrate)433 b(0)8425
52054 y Fp(\016)8951 52537 y Fx(C/min)i(b)36 b(etr\344gt.)p
42912 53813 V 1 0 0 TeXcolorrgb 43621 51483 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
53813 V 1062 53858 44260 45 v 1062 57076 45 3219 v 1770
55799 a Fx(Der)347 b(Di\033erenzialquotien)-36 b(t)348
b(zum)e(Zeitpunkt)g Ft(t)369 b Fv(=)f(3)347 b Fx(ist)g(ann\344hernd)e
(-10)37603 55317 y Fp(\016)38129 55799 y Fx(C/min.)p
42912 57076 V 1 0 0 TeXcolorrgb 1374 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 57076 V 1062 57120
44260 45 v 1062 62330 45 5211 v 1770 59061 a Fx(Der)302
b(Di\033erenzenquotien)-36 b(t)300 b(ist)h(im)g(In)-36
b(terv)-72 b(all)302 b Fv([)8 b(2;)221 b Ft(t)p Fv(])302
b Fx(mit)f Fv(2)369 b Ft(<)g(t)g(<)f Fv(6)301 b Fx(immer)g(kleiner)1770
61053 y(als)435 b(0)4596 60571 y Fp(\016)5122 61053 y
Fx(C/min.)p 42912 62330 V 1 0 0 TeXcolorrgb 43621 60057
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 62330 V 1062 62374 44260 45 v 47992 4800 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66403
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(18)p 0 TeXcolorgray
eop end
%%Page: 19 19
TeXDict begin 19 18 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)665 b(1.3)f(-)g(8)g(Abgesc)-60
b(hossener)662 b(K)-60 b(\366rp)60 b(er)664 b(-)g(O)-60
b(A)664 b(-)h(BIFIE)g(-)f(K)-60 b(omp)60 b(e-)-2331 4515
y(tenzc)-60 b(hec)g(k)718 b(2016)p 0 TeXcolorgray -1391
7823 a Fx(23.)p 0 TeXcolorgray 651 w(Die)547 b(F)-108
b(unktion)546 b Ft(h)p Fx(,)h(deren)e(Graph)h(in)g(der)g(nac)-36
b(hstehenden)545 b(Abbildung)h(dargestellt)h(ist,)921
9815 y(b)36 b(esc)-36 b(hreibt)326 b(n\344herungsw)-36
b(eise)327 b(die)g(H\366he)h Ft(h)p Fv(\()p Ft(t)p Fv(\))e
Fx(eines)h(senkrec)-36 b(h)g(t)327 b(nac)-36 b(h)327
b(ob)36 b(en)327 b(gesc)-36 b(hossenen)921 11806 y(K)g(\366rp)36
b(ers)433 b(in)h(Abh\344ngigk)-36 b(eit)434 b(v)-36 b(on)434
b(der)f(Zeit)h Ft(t)f Fx(\()p Ft(t)g Fx(in)g(Sekunden,)g
Ft(h)p Fv(\()p Ft(t)p Fv(\))g Fx(in)g(Metern\).)921 38836
y
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 340.20338 a add def
/d 0.0 a add neg def /h 220.17924 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 38836 a 3550 35911 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 316.45688 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45428
T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 12 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 193.762 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 316.45688  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 316.45688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 193.762  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.762
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 316.45688
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 193.762  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 193.762  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 316.45688  def /dT 1864780 abs 65536 div viceversa
{ neg } if def /DT 20. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 1.42271  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 193.762
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 316.45688
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 2305 36197 a Fq(0)1834
33047 y(20)1834 29897 y(40)1834 26747 y(60)1834 23598
y(80)1363 20448 y(100)1363 17298 y(120)3315 37257 y(0)2679
b(1)h(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)3550 35911
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 316.45688 193.762 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 5.0 26.82921 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end

3550 35911 a 2065 36330 a Fx(t)433 b(in)g(s)3550 35911
y
tx@Dict begin  PutEnd  end
 3550 35911 a 3550 35911 a
tx@Dict begin  PutEnd  end
 3550 35911 a 3550 35911 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

3550 35911 a 3550 35911 a
tx@Dict begin  { 0.0 0.0 pop 316.45688 193.762 exch pop } PutCoor PutBegin
 end
 3550 35911 a 3550 35911 a
tx@Dict begin  { 5.0 47.6532 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 3550
35911 a 912 36243 a Fx(h\(t\))g(in)g(m)3550 35911 y
tx@Dict begin  PutEnd  end
 3550
35911 a 3550 35911 a
tx@Dict begin  PutEnd  end
 3550 35911 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10 def /dx x1 x sub 199
div def /F@pstplot (-5.0*x^(2.0)+50.0*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271
mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 38580 38836 a
currentpoint initclip moveto
 38580 38836 a 921 43373 a
Fx(Bestimme)634 b(anhand)f(des)g(Graphen)f(die)i(mittlere)g(Gesc)-36
b(h)g(windigk)g(eit)633 b(des)h(K)-36 b(\366rp)36 b(ers)633
b(in)921 45365 y(Metern)433 b(pro)g(Sekunde)g(im)g(Zeitin)-36
b(terv)-72 b(all)435 b Fv([)8 b(2)p Ft(s)p Fv(;)221 b(4)p
Ft(s)p Fv(])q Fx(.)p 1 0 0 TeXcolorrgb 921 49902 a(Die)604
b(mittlere)f(Gesc)-36 b(h)g(windigk)g(eit)603 b(des)g(K)-36
b(\366rp)36 b(ers)603 b(im)g(Zeitin)-36 b(terv)-72 b(all)604
b Fv([)8 b(2)p Ft(s)p Fv(;)221 b(4)p Ft(s)p Fv(])604
b Fx(b)36 b(etr\344gt)603 b(ca.)888 51894 y Fv(20)p Ft(m=s)p
Fx(.)921 56431 y(Ein)430 b(Punkt)h(f\374r)f(die)h(ric)-36
b(h)g(tige)430 b(L\366sung,)h(w)-36 b(ob)36 b(ei)431
b(die)g(Einheit)f(nic)-36 b(h)g(t)430 b(angef\374hrt)g(sein)h(m)-36
b(uss.)874 58423 y(T)-108 b(oleranzin)-36 b(terv)-72
b(all:)435 b Fv([)8 b(19)p Ft(m=s)p Fv(;)221 b(21)p Ft(m=s)p
Fv(])p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815
a Fr(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 62231 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(19)p 0 TeXcolorgray eop end
%%Page: 20 20
TeXDict begin 20 19 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1794 a Fy(AN)679 b(1.3)f(-)h(9)f(Mittlere)g
(\304nderungsrate)e(der)i(T)-179 b(emp)60 b(eratur)676
b(-)j(O)-60 b(A)679 b(-)-2331 4817 y(Matura)717 b(2014/15)g(-)h
(Haupttermin)p 0 TeXcolorgray -1391 8124 a Fx(24.)p 0
TeXcolorgray 651 w(Ein)480 b(b)36 b(estimm)-36 b(ter)479
b(T)-108 b(emp)36 b(eraturv)-36 b(erlauf)480 b(wird)g(mo)36
b(dellhaft)481 b(durc)-36 b(h)478 b(eine)i(F)-108 b(unktion)479
b Ft(T)661 b Fx(b)36 b(e-)921 10116 y(sc)-36 b(hrieb)36
b(en.)526 b(Die)h(F)-108 b(unktion)525 b Ft(T)707 b Fv(:)1053
b([)8 b(0;)221 b(60])529 b Fu(!)d Fj(R)h Fx(ordnet)e(jedem)h(Zeitpunkt)
f Ft(t)h Fx(eine)g(T)-108 b(em-)921 12108 y(p)36 b(eratur)453
b Ft(T)181 b Fv(\()p Ft(t)p Fv(\))454 b Fx(zu.)h(Dab)36
b(ei)455 b(wird)f Ft(t)g Fx(in)g(Min)-36 b(uten)453 b(und)h
Ft(T)181 b Fv(\()p Ft(t)p Fv(\))453 b Fx(in)i(Grad)e(Celsius)i(angegeb)
36 b(en.)921 18637 y(Stelle)612 b(die)g(mittlere)g(\304nderungsrate)e
Ft(D)648 b Fx(der)611 b(T)-108 b(emp)36 b(eratur)611
b(im)h(Zeitin)-36 b(terv)-72 b(all)613 b Fv([)8 b(20;)221
b(30])921 20629 y Fx(durc)-36 b(h)432 b(den)h(T)-108
b(erm)433 b(dar.)921 25166 y Ft(D)405 b Fv(=)p 3787 25166
18898 34 v 23118 24684 a Fp(\016)23644 25166 y Fx(C/min)p
1 0 0 TeXcolorrgb 921 28057 a Ft(D)g Fv(=)3919 27159
y Ft(T)181 b Fv(\(39\))296 b Fu(\000)f Ft(T)181 b Fv(\(20\))p
3919 27748 8135 45 v 7336 28969 a(10)12620 27575 y Fp(\016)13146
28057 y Fx(C/min)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 8124 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 10116 a Fr(AN)369 b(1.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 32444 54804 45 v -2331
37872 a Fy(AN)826 b(1.3)f(-)h(10)g(Aktienkurs)d(-)j(O)-60
b(A)825 b(-)h(Matura)f(2015/16)h(-)f(Neb)60 b(en-)-2331
40894 y(termin)717 b(1)p 0 TeXcolorgray -1391 44202 a
Fx(25.)p 0 TeXcolorgray 651 w(Ab)503 b(dem)g(Zeitpunkt)f
Ft(t)488 b Fv(=)f(0)504 b Fx(wird)f(der)g(Kurs)g(einer)g(Aktie)h(\(in)f
(Euro\))g(b)36 b(eobac)-36 b(h)g(tet)502 b(und)921 46194
y(dokumen)-36 b(tiert.)433 b Ft(A)p Fv(\()p Ft(t)p Fv(\))g
Fx(b)36 b(esc)-36 b(hreibt)433 b(den)f(Kurs)i(der)f(Aktie)h(nac)-36
b(h)433 b Ft(t)g Fx(T)-108 b(agen.)921 50731 y(Es)434
b(wird)f(folgender)h(W)-108 b(ert)433 b(b)36 b(erec)-36
b(hnet:)1054 52650 y Ft(A)p Fv(\(10\))295 b Fu(\000)h
Ft(A)p Fv(\(0\))p 1054 53238 7548 45 v 4177 54460 a(10)9103
53548 y(=)369 b(2)921 58086 y Fx(Gib)427 b(an,)g(w)-36
b(as)428 b(dieser)f(W)-108 b(ert)427 b(im)h(Hin)-36 b(blic)g(k)428
b(auf)g(die)f(En)-36 b(t)g(wic)g(klung)427 b(des)g(Aktienkurses)h(aus-)
921 60078 y(sagt.)p 1 0 0 TeXcolorrgb 921 62623 a(Der)387
b(Kurs)g(der)g(Aktie)h(ist)f(in)h(den)e(\(ersten\))g(10)i(T)-108
b(agen)388 b(um)f(durc)-36 b(hsc)g(hnittlic)g(h)385 b(2)j(Euro)f(pro)
874 64615 y(T)-108 b(ag)434 b(gestiegen.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 44202 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 46194 a Fr(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 68348
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(20)p 0 TeXcolorgray
eop end
%%Page: 21 21
TeXDict begin 21 20 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)492 b(1.3)f(-)g(11)g(Ableitungsw)-60
b(erte)489 b(ordnen)h(-)h(O)-60 b(A)492 b(-)f(Matura)g(2013/14)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -1391 7929 a Fx(26.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)
-36 b(olynomfunktion)435 b Ft(f)142 b Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 12164 33721 a
 currentpoint currentpoint translate 0.98079 0.98079 scale neg exch
neg exch translate
 12164 33721 a 12164 33721
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.13591 a add def
/d 0.0 a add neg def /h 197.46167 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12164 33721 a 20983 29311 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 127.46815 0.0 -79.66776 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 157.628 0.0 -39.83366   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 127.46815  0 -79.66776  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -79.66776
 127.46815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-39.83366  def /maxTickline 157.628  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.628
0.0 -39.83366   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 127.46815
0.0 -79.66776 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 157.628  0 -39.83366  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -39.83366
 157.628  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.66776  def /maxTickline 127.46815  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.628
0.0 -39.83366   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 127.46815
0.0 -79.66776 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19738 26447 a
Fq(1)19738 23297 y(2)19738 20148 y(3)19738 16998 y(4)19738
13849 y(5)19006 32700 y Fp(\000)p Fq(1)23898 30657 y(1)2679
b(2)h(3)f(4)-16584 b Fp(\000)p Fq(1)-4351 b Fp(\000)p
Fq(2)20983 29311 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20983 29311 a 20983 29311 a
tx@Dict begin  { 127.46815 157.628 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 20983
29311 a 20983 29311 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20983 29311 a 20640 29597 a Fx(x)20983
29311 y
tx@Dict begin  PutEnd  end
 20983 29311 a 20983 29311 a
tx@Dict begin  PutEnd  end
 20983 29311 a 20983
29311 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20983 29311 a 20983 29311 a
tx@Dict begin  { 0.0 0.0 pop 127.46815 157.628 exch pop } PutCoor PutBegin
 end
 20983 29311 a 20983
29311 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20983 29311 a 19935 29643 a Fx(f\(x\))20983 29311
y
tx@Dict begin  PutEnd  end
 20983 29311 a 20983 29311 a
tx@Dict begin  PutEnd  end
 20983 29311 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.8000000000000007 def /x1 4.480000000000007
def /dx x1 x sub 199 div def /F@pstplot (0.1450365624797774*x^(3.0)-0.4450365624797774*x^(2.0)+0.02978062512133562*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 20983 29311 a
tx@Dict begin  { 26.74564 58.3282 } PutCoor PutBegin  end
 20983 29311 a
610 x Fi(f)20983 29311 y
tx@Dict begin  PutEnd  end
 20983 29311 a 35093 33721 a
currentpoint initclip moveto

35093 33721 a 12164 33721 a
 currentpoint currentpoint translate 1 0.98079 div 1 0.98079 div scale
neg exch neg exch translate
 12164 33721 a 921 39697 a
Fx(Ordne)331 b(die)i(W)-108 b(erte)332 b Ft(f)11300 39215
y Fp(0)11611 39697 y Fv(\(0\))p Ft(;)221 b(f)14638 39215
y Fp(0)14949 39697 y Fv(\(1\))p Ft(;)g(f)17976 39215
y Fp(0)18287 39697 y Fv(\(3\))333 b Fx(und)e Ft(f)23565
39215 y Fp(0)23876 39697 y Fv(\(4\))h Fx(der)g(Gr\366\377e)h(nac)-36
b(h,)332 b(b)36 b(eginnend)332 b(mit)h(dem)921 41689
y(kleinsten)434 b(W)-108 b(ert!)769 43681 y(\(Die)499
b(k)-36 b(onkreten)499 b(W)-108 b(erte)498 b(v)-36 b(on)499
b Ft(f)17004 43199 y Fp(0)17315 43681 y Fv(\(0\))p Ft(;)221
b(f)20342 43199 y Fp(0)20653 43681 y Fv(\(1\))p Ft(;)g(f)23680
43199 y Fp(0)23991 43681 y Fv(\(3\))499 b Fx(und)f Ft(f)29602
43199 y Fp(0)29912 43681 y Fv(\(4\))h Fx(sind)f(dab)36
b(ei)499 b(nic)-36 b(h)g(t)498 b(anzuge-)921 45673 y(b)36
b(en.\))p 1 0 0 TeXcolorrgb 921 50210 a Ft(f)1704 49728
y Fp(0)2014 50210 y Fv(\(1\))369 b Ft(<)g(f)6209 49728
y Fp(0)6519 50210 y Fv(\(0\))g Ft(<)g(f)10714 49728 y
Fp(0)11025 50210 y Fv(\(3\))f Ft(<)h(f)15219 49728 y
Fp(0)15530 50210 y Fv(\(4\))873 52202 y Fx(A)-36 b(uc)g(h)432
b(zu)i(w)-36 b(erten)433 b(w)-36 b(enn)433 b(das)g
(\022Kleiner\020-Zeic)-36 b(hen)434 b(fehlt)f(ab)36 b(er)434
b(die)f(Reihenfolge)i(stimm)-36 b(t.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 55936
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(21)p 0 TeXcolorgray
eop end
%%Page: 22 22
TeXDict begin 22 21 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)479 b(1.3)f(-)g(12)h(Finanzsc)-60
b(h)g(ulden)475 b(-)k(O)-60 b(A)479 b(-)f(Matura)g(2016/17)g(-)h
(Haupt-)-2331 4622 y(termin)p 0 TeXcolorgray -1391 7929
a Fx(27.)p 0 TeXcolorgray 651 w(Die)402 b(Finanzsc)-36
b(h)g(ulden)400 b(\326sterreic)-36 b(hs)401 b(hab)36
b(en)401 b(im)g(Zeitraum)h(2000)g(bis)g(2010)h(zugenommen.)921
9921 y(Im)562 b(Jahr)f(2000)i(b)36 b(etrugen)560 b(die)h(Finanzsc)-36
b(h)g(ulden)560 b(\326sterreic)-36 b(hs)561 b Ft(F)34148
10120 y Fq(0)34673 9921 y Fx(,)h(zehn)f(Jahre)g(sp\344ter)921
11913 y(b)36 b(etrugen)433 b(sie)h Ft(F)9105 12112 y
Fq(1)10064 11913 y Fx(\(jew)-36 b(eils)435 b(in)e(Milliarden)h(Euro\).)
921 16450 y(In)-36 b(terpretieren)470 b(Sie)i(den)f(A)-36
b(usdruc)g(k)19783 15927 y Fl(F)20378 16050 y Fk(1)20840
15927 y Fp(\000)p Fl(F)22167 16050 y Fk(0)p 19783 16140
2846 45 v 20735 16908 a Fq(10)23233 16450 y Fx(im)471
b(Hin)-36 b(blic)g(k)473 b(auf)f(die)f(En)-36 b(t)g(wic)g(klung)472
b(der)f(Fi-)921 18442 y(nanzsc)-36 b(h)g(ulden)432 b(\326sterreic)-36
b(hs!)p 1 0 0 TeXcolorrgb 921 20987 a(Der)359 b(A)-36
b(usdruc)g(k)358 b(b)36 b(esc)-36 b(hreibt)358 b(die)h(durc)-36
b(hsc)g(hnittlic)g(he)357 b(j\344hrlic)-36 b(he)359 b(Zunahme)f(\(durc)
-36 b(hsc)g(hnitt-)921 22979 y(lic)g(he)330 b(j\344hrlic)-36
b(he)331 b(\304nderung\))e(der)g(Finanzsc)-36 b(h)g(ulden)329
b(\326sterreic)-36 b(hs)329 b(\(in)h(Milliarden)h(Euro)f(im)921
24971 y(angegeb)36 b(enen)433 b(Zeitraum\).)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369 b(1.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 28779
54804 45 v -2331 34207 a Fy(AN)718 b(1.3)f(-)h(13)f(Sc)-60
b(h)g(wimm)g(bad)717 b(-)h(O)-60 b(A)717 b(-)h(Matura)f(NT)g(1)h(16/17)
p 0 TeXcolorgray -1391 37514 a Fx(28.)p 0 TeXcolorgray
651 w(In)433 b(ein)h(Sc)-36 b(h)g(wimm)g(bad)432 b(wird)i(ab)g(dem)f
(Zeitpunkt)g Ft(t)368 b Fv(=)h(0)434 b Fx(W)-108 b(asser)434
b(eingelassen.)921 40060 y(Die)544 b(F)-108 b(unktion)543
b Ft(h)g Fx(b)36 b(esc)-36 b(hreibt)542 b(die)h(H\366he)h(des)f(W)-108
b(asserspiegels)544 b(zum)f(Zeitpunkt)g Ft(t)p Fx(.)h(Die)921
42051 y(H\366he)434 b Ft(h)p Fv(\()p Ft(t)p Fv(\))e Fx(wird)i(dab)36
b(ei)433 b(in)h(dm)f(gemessen,)h(die)g(Zeit)f Ft(t)g
Fx(in)h(Stunden.)921 44597 y(In)-36 b(terpretiere)432
b(das)i(Ergebnis)f(der)g(folgenden)h(Berec)-36 b(hn)g(ung)432
b(im)i(gegeb)36 b(enen)434 b(K)-36 b(on)g(text!)1054
46522 y Fl(h)p Fq(\(5\))p Fp(\000)p Fl(h)p Fq(\(2\))p
1054 46832 4221 45 v 2328 47600 a(5)p Fp(\000)p Fq(2)5776
47142 y Fv(=)369 b(4)p 1 0 0 TeXcolorrgb 921 51680 a
Fx(Die)342 b(W)-108 b(asserh\366he)341 b(nimm)-36 b(t)340
b(im)i(Zeitin)-36 b(terv)-72 b(all)341 b Fv([)8 b(2;)221
b(5])343 b Fx(um)e(durc)-36 b(hsc)g(hnittlic)g(h)339
b(4)217 b(dm)340 b(pro)h(Stun-)921 53672 y(de)433 b(zu.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
37514 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 39506 a Fr(AN)369
b(1.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 57147 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(22)p
0 TeXcolorgray eop end
%%Page: 23 23
TeXDict begin 23 22 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.4)f(-)h(1)f(W)-179
b(ac)-60 b(hstum)716 b(-)i(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(29.)p 0 TeXcolorgray 651 w(W)-108 b(ac)-36
b(hstum)572 b(tritt)g(in)h(der)f(Natur)h(fast)g(nie)g(un)-36
b(b)36 b(egrenzt)571 b(auf,)j(es)f(erreic)-36 b(h)g(t)572
b(einmal)h(eine)921 6792 y(gewisse)450 b(Grenze)e(\(S\344ttigung\).)h
(Diese)h(S\344ttigungsgrenze)f(sei)g Ft(K)95 b Fx(.)449
b(Der)g(v)-36 b(orhandene)449 b(Be-)921 8784 y(stand)433
b(zum)g(Zeitpunkt)g Ft(n)h Fx(sei)g Ft(xn)p Fx(.)921
11330 y(Zur)537 b(Besc)-36 b(hreibung)538 b(vieler)h(V)-108
b(org\344nge)539 b(\(W)-108 b(ac)-36 b(hstum)537 b(v)-36
b(on)538 b(P)-36 b(opulationen,)539 b(A)-36 b(usbreitung)887
13322 y(v)g(on)321 b(Krankheiten)g(o)36 b(der)321 b(Informationen,)h
(Erw)-36 b(\344rm)g(ung)320 b(etc.\))i(v)-36 b(erw)g(endet)321
b(man)g(folgendes)921 15314 y(mathematisc)-36 b(hes)433
b(Mo)36 b(dell:)921 21499 y Ft(x)1660 21698 y Fl(n)p
Fq(+1)3510 21499 y Fu(\000)21 b Ft(x)5303 21698 y Fl(n)6298
21499 y Fv(=)369 b Ft(r)57 b Fu(\001)21 b Fv(\()p Ft(K)116
b Fu(\000)21 b Ft(x)12234 21698 y Fl(n)12860 21499 y
Fv(\))299 b Fx(mit)433 b Ft(r)406 b Fu(2)368 b Fj(R)19254
20951 y Fq(+)20042 21499 y Ft(;)521 b Fv(0)369 b Ft(<)g(r)405
b(<)369 b Fv(1)433 b Fx(\()p Ft(r)470 b Fx(ist)434 b(ein)f(Prop)36
b(ortionalit\344tsfaktor\))921 25693 y(Kreuze)433 b(die)h(auf)g(dieses)
f(Mo)36 b(dell)435 b(zutre\033ende\(n\))c(A)-36 b(ussage\(n\))433
b(an.)p 1062 26734 44260 45 v 1062 31822 45 5089 v 1770
28594 a(Diese)i(Gleic)-36 b(h)g(ung)433 b(kann)g(als)h(eine)g(lineare)g
(Di\033erenzengleic)-36 b(h)g(ung)433 b(der)g(F)-108
b(orm)1770 30586 y Ft(x)2509 30785 y Fl(n)p Fq(+1)4707
30586 y Fv(=)369 b Ft(a)295 b Fu(\001)g Ft(x)8469 30785
y Fl(n)9390 30586 y Fv(+)g Ft(b)434 b Fx(gedeutet)f(w)-36
b(erden.)p 42912 31822 V 1 0 0 TeXcolorrgb 43621 29610
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 31822 V 1062 31866 44260 45 v 1062 34929 45 3064
v 1770 33726 a Fx(Der)325 b(Zu)-36 b(w)g(ac)g(hs)323
b(pro)h(Zeiteinheit)g(ist)g(prop)36 b(ortional)324 b(zum)g(momen)-36
b(tanen)323 b(Bestand.)p 42912 34929 V 45277 34929 V
1062 34973 44260 45 v 1062 40029 45 5056 v 1770 36833
a(Es)434 b(liegt)g(ein)g(k)-36 b(on)g(tin)g(uierlic)g(hes)433
b(W)-108 b(ac)-36 b(hstumsmo)36 b(dell)434 b(v)-36 b(or,)434
b(d.h.,)g(man)f(kann)h(zu)1770 38825 y(jedem)g(b)36 b(eliebigen)434
b(Zeitpunkt)f(die)g(Gr\366\377e)h(des)f(Bestands)g(errec)-36
b(hnen.)p 42912 40029 V 45277 40029 V 1062 40073 44260
45 v 1062 45202 45 5129 v 1770 41933 a(Der)430 b(Zu)-36
b(w)g(ac)g(hs)430 b(b)36 b(ei)430 b(diesem)f(W)-108 b(ac)-36
b(hstum)429 b(ist)h(prop)36 b(ortional)430 b(zur)g(no)36
b(c)-36 b(h)429 b(v)-36 b(erf\374gba-)1770 43925 y(ren)434
b(Restkapazit\344t)g(\(=)f(F)-108 b(reiraum\).)p 42912
45202 V 1 0 0 TeXcolorrgb 43621 42969 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 45202
V 1062 45246 44260 45 v 1062 48309 45 3064 v 1770 47106
a Fx(Mit)434 b(zunehmender)e(Zeit)h(wird)h(der)f(Zu)-36
b(w)g(ac)g(hs)433 b(immer)h(geringer.)p 42912 48309 V
1 0 0 TeXcolorrgb 43621 47110 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 48309 V 1062 48353
44260 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(1.4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 52381 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(23)p 0 TeXcolorgray eop end
%%Page: 24 24
TeXDict begin 24 23 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.4)f(-)h(2)f(Wirksto\033e)f
(im)i(K)-60 b(\366rp)60 b(er)716 b(-)h(L)-179 b(T)717
b(-)h(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(30.)p 0
TeXcolorgray 651 w(Ein)590 b(P)-36 b(atien)g(t,)591 b(der)f(an)g
(Blutho)36 b(c)-36 b(hdruc)g(k)590 b(leidet,)h(m)-36
b(uss)590 b(auf)h(\344rztlic)-36 b(he)590 b(Empfehlung)g(ab)921
6792 y(sofort)346 b(t\344glic)-36 b(h)345 b(am)g(Morgen)g(eine)g(T)-108
b(ablette)345 b(mit)g(Wirksto\033gehalt)h(100)217 b(mg)346
b(zur)e(Therapie)921 8784 y(einnehmen.)316 b(Der)h(K)-36
b(\366rp)36 b(er)316 b(sc)-36 b(heidet)316 b(im)h(Laufe)f(eines)h(T)
-108 b(ages)317 b(80)217 b(\045)316 b(des)h(Wirksto\033s)g(wieder)921
10776 y(aus.)380 b(Die)h(Wirksto\033menge)f Ft(W)16399
10975 y Fl(n)17405 10776 y Fx(im)g(K)-36 b(\366rp)36
b(er)380 b(des)f(P)-36 b(atien)g(ten)379 b(nac)-36 b(h)380
b Ft(n)g Fx(T)-108 b(agen)380 b(kann)g(daher)769 12768
y(\(rekursiv\))401 b(aus)g(der)f(Menge)h(des)f(V)-108
b(ortags)401 b Ft(W)23542 12967 y Fl(n)p Fp(\000)p Fq(1)25772
12768 y Fx(nac)-36 b(h)400 b(folgender)h(Bezieh)-36 b(ung)401
b(b)36 b(estimm)-36 b(t)874 14760 y(w)g(erden:)10389
15807 y Ft(W)11617 16006 y Fl(n)12612 15807 y Fv(=)369
b(0)p Ft(;)p Fv(2)296 b Fu(\001)f Ft(W)17842 16006 y
Fl(n)p Fp(\000)p Fq(1)19966 15807 y Fv(+)g(100)p Ft(;)656
b(W)25468 16006 y Fq(0)26363 15807 y Fv(=)368 b(100)435
b Fx(\()p Ft(W)31862 16006 y Fl(i)32671 15807 y Fx(in)e(mg\))921
19245 y(In)527 b(w)-36 b(elc)g(her)528 b(W)-108 b(eise)528
b(wird)f(sic)-36 b(h)528 b(die)f(Wirksto\033menge)h(im)g(K)-36
b(\366rp)36 b(er)527 b(des)h(P)-36 b(atien)g(ten)526
b(lang-)921 21237 y(fristig)435 b(en)-36 b(t)g(wic)g(k)g(eln?)921
23783 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
25775 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 29265 y(Die)550 b(Wirksto\033menge)g(im)f(K)-36
b(\366rp)36 b(er)549 b(des)g(P)-36 b(atien)g(ten)549
b(wird)g(langfristig)p 37273 29265 3150 45 v 40895 29217
a(1)40423 29265 y Fo(\015)p 42017 29265 V 3699 w Fx(,)874
31257 y(w)-36 b(eil)p 3728 31257 V 7350 31209 a(2)6878
31257 y Fo(\015)p 8472 31257 V 3583 w Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 921 32740 16736 45 v 921 35824 45 3085
v 8963 34521 a(1)8491 34569 y Fo(\015)p 17612 35824 V
921 35868 16736 45 v 921 39128 45 3260 v 1629 37924 a
Fx(un)g(b)36 b(esc)-36 b(hr\344nkt)362 b(w)-36 b(ac)g(hsen)p
15247 39128 V 15955 37830 a Fn(2)p 17612 39128 V 921
39172 16736 45 v 921 42431 45 3260 v 1629 41228 a Fx(b)36
b(esc)-36 b(hr\344nkt)433 b(w)-36 b(ac)g(hsen)p 15247
42431 V 1 0 0 TeXcolorrgb 15955 41134 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 17612 42431
V 921 42475 16736 45 v 921 45735 45 3260 v 1629 44531
a Fx(wieder)434 b(sink)-36 b(en)p 15247 45735 V 15955
44437 a Fn(2)p 17612 45735 V 921 45779 16736 45 v 0 TeXcolorgray
0 TeXcolorgray 21610 32740 23212 45 v 21610 35824 45
3085 v 32890 34521 a Fx(2)32419 34569 y Fo(\015)p 44777
35824 V 21610 35868 23212 45 v 21610 46899 45 11031 v
22318 37728 a Fx(der)411 b(K)-36 b(\366rp)36 b(er)411
b(des)f(P)-36 b(atien)g(ten)411 b(mit)g(stei-)22318 39720
y(gendem)296 b(Wirksto\033gehalt)h(im)g(K)-36 b(\366rp)36
b(er)22318 41712 y(absolut)665 b(immer)f(mehr)g(abbaut)g(und)22318
43704 y(damit)476 b(der)e(Abbau)h(letztlic)-36 b(h)475
b(die)h(Zu-)22318 45696 y(fuhr)433 b(\374b)36 b(ersteigt)p
42412 46899 V 43120 41716 a Fn(2)p 44777 46899 V 21610
46943 23212 45 v 21610 57974 45 11031 v 22318 48803 a
Fx(dem)886 b(K)-36 b(\366rp)36 b(er)886 b(t\344glic)-36
b(h)887 b(zus\344tzlic)-36 b(her)22318 50795 y(Wirksto\033)707
b(zugef\374hrt)d(wird,)i(dern)-36 b(ur)22318 52787 y(zu)793
b(80)217 b(\045)793 b(abgebaut)f(w)-36 b(erden)792 b(kann,)22318
54779 y(und)401 b(somit)h(die)f(Zufuhr)g(im)h(V)-108
b(ergleic)-36 b(h)22318 56771 y(zum)434 b(Abbau)e(\374b)36
b(erwiegt)p 42412 57974 V 43120 52791 a Fn(2)p 44777
57974 V 21610 58018 23212 45 v 21610 69049 45 11031 v
22318 59878 a Fx(der)411 b(K)-36 b(\366rp)36 b(er)411
b(des)f(P)-36 b(atien)g(ten)411 b(mit)g(stei-)22318 61870
y(gendem)296 b(Wirksto\033gehalt)h(im)g(K)-36 b(\366rp)36
b(er)22318 63862 y(absolut)289 b(immer)h(mehr)e(da)-36
b(v)g(on)289 b(abbaut,)22318 65854 y(auc)-36 b(h)551
b(w)-36 b(enn)552 b(der)f(Prozen)-36 b(tsatz)551 b(gleic)-36
b(h)22318 67846 y(bleibt)p 42412 69049 V 1 0 0 TeXcolorrgb
43120 63866 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 44777 69049 V 21610 69094 23212 45 v 47992
4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 73122 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(24)p
0 TeXcolorgray eop end
%%Page: 25 25
TeXDict begin 25 24 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(1.4)f(-)h(3)f(H\366he)g(einer)f
(P\035anze)h(-)h(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(31.)p 0 TeXcolorgray 651 w(Die)361 b(H\366he)g
Ft(x)g Fx(einer)g(P\035anze)f(w)-36 b(\344c)g(hst)361
b(in)f(einem)h(gewissen)g(Zeitraum)g(um)f(4)217 b(\045)361
b(pro)f(W)-108 b(o)36 b(c)-36 b(he.)921 11330 y(Stelle)337
b(eine)f(Di\033erenzengleic)-36 b(h)g(ung)337 b(auf,)g(die)f(die)h(En)
-36 b(t)g(wic)g(klung)337 b(der)f(H\366he)g(dieser)h(P\035anze)921
13322 y(b)36 b(esc)-36 b(hreibt.)433 b(Dab)36 b(ei)434
b(wird)g Ft(n)g Fx(in)f(W)-108 b(o)36 b(c)-36 b(hen)433
b(angegeb)36 b(en.)921 15867 y Ft(x)1660 16066 y Fq(0)2555
15867 y Fv(=)368 b(20)921 18412 y Ft(x)1660 18611 y Fl(n)p
Fq(+1)3784 18412 y Fu(\000)295 b Ft(x)5851 18611 y Fl(n)6846
18412 y Fv(=)p 8292 18412 15749 34 v 1 0 0 TeXcolorrgb
921 20958 a Ft(x)1660 21157 y Fl(n)p Fq(+1)3784 20958
y Fu(\000)g Ft(x)5851 21157 y Fl(n)6846 20958 y Fv(=)369
b(0)p Ft(;)p Fv(04)p Ft(x)11277 21157 y Fl(n)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)g(1.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
24724 54804 45 v -2331 30026 a Fy(AN)718 b(1.4)f(-)h(4)f(Wirksto\033)f
(-)i(MC)g(-)f(BIFIE)p 0 TeXcolorgray -1391 33333 a Fx(32.)p
0 TeXcolorgray 651 w(Eine)480 b(P)-36 b(erson)479 b(b)36
b(eginn)-36 b(t)479 b(mit)g(der)h(Einnahme)f(eines)g(Medikamen)-36
b(ts)480 b(und)e(wiederholt)i(die)921 35325 y(Einnahme)319
b(alle)i(24)g(Stunden.)e(Sie)h(f\374hrt)f(dem)h(K)-36
b(\366rp)36 b(er)320 b(dab)36 b(ei)320 b(jew)-36 b(eils)321
b(125)217 b Ft(\026)p Fx(g)321 b(eines)f(Wirk-)921 37317
y(sto\033s)380 b(zu.)h(Innerhalb)f(eines)g(T)-108 b(ages)382
b(w)-36 b(erden)379 b(jew)-36 b(eils)382 b(70)217 b(\045)381
b(der)f(im)h(K)-36 b(\366rp)36 b(er)380 b(v)-36 b(orhandenen)921
39309 y(Menge)433 b(des)h(Wirksto\033s)g(abgebaut.)921
43846 y(Die)546 b(Wirksto\033menge)h Ft(x)13615 44045
y Fl(n)14787 43846 y Fx(\(in)e Ft(\026)p Fx(g\))g(gibt)h(die)g(v)-36
b(orhandene)545 b(Menge)g(des)h(Wirksto\033s)g(im)921
45838 y(K)-36 b(\366rp)36 b(er)435 b(dieser)f(P)-36 b(erson)435
b(nac)-36 b(h)434 b Ft(n)i Fx(T)-108 b(agen)435 b(unmittelbar)f(nac)-36
b(h)435 b(Einnahme)f(des)g(Wirksto\033s)921 47830 y(an)f(und)g(kann)g
(mo)36 b(dellhaft)435 b(durc)-36 b(h)432 b(eine)i(Di\033erenzengleic)
-36 b(h)g(ung)433 b(b)36 b(esc)-36 b(hrieb)36 b(en)432
b(w)-36 b(erden.)921 49822 y(Kreuze)433 b(die)h(en)-36
b(tsprec)g(hende)431 b(Gleic)-36 b(h)g(ung)433 b(an.)p
14856 50789 16673 45 v 14856 54007 45 3219 v 15564 52730
a Ft(x)16303 52929 y Fl(n)p Fq(+1)18501 52730 y Fv(=)368
b Ft(x)20620 52929 y Fl(n)21542 52730 y Fv(+)295 b(125\))h
Fu(\001)f Fv(0)p Ft(;)p Fv(3)p 29119 54007 V 31484 54007
V 14856 54051 16673 45 v 14856 57069 45 3018 v 15564
55833 a Ft(x)16303 56032 y Fl(n)p Fq(+1)18501 55833 y
Fv(=)368 b(0)p Ft(;)p Fv(3)297 b Fu(\001)e Ft(x)23242
56032 y Fl(n)24163 55833 y Fv(+)g(125)p 29119 57069 V
1 0 0 TeXcolorrgb 29827 55892 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31484 57069 V 14856
57113 16673 45 v 14856 60131 45 3018 v 15564 58894 a
Ft(x)16303 59093 y Fl(n)p Fq(+1)18501 58894 y Fv(=)368
b(1)p Ft(;)p Fv(3)297 b Fu(\001)e Ft(x)23242 59093 y
Fl(n)24163 58894 y Fu(\000)h Fv(125)p 29119 60131 V 31484
60131 V 14856 60175 16673 45 v 14856 63193 45 3018 v
15564 61956 a Ft(x)16303 62155 y Fl(n)p Fq(+1)18501 61956
y Fv(=)368 b Ft(x)20620 62155 y Fl(n)21542 61956 y Fv(+)295
b(125)h Fu(\001)f Fv(0)p Ft(;)p Fv(7)p 29119 63193 V
31484 63193 V 14856 63237 16673 45 v 14856 66455 45 3219
v 15564 65178 a Ft(x)16303 65377 y Fl(n)p Fq(+1)18501
65178 y Fv(=)368 b(\()p Ft(x)21126 65377 y Fl(n)22048
65178 y Fu(\000)295 b Fv(125\))h Fu(\001)f Fv(0)p Ft(;)p
Fv(7)p 29119 66455 V 31484 66455 V 14856 66499 16673
45 v 14856 69717 45 3219 v 15564 68440 a Ft(x)16303 68639
y Fl(n)p Fq(+1)18501 68440 y Fv(=)368 b(\()p Ft(x)21126
68639 y Fl(n)22048 68440 y Fu(\000)295 b Fv(0)p Ft(;)p
Fv(3\))h Fu(\001)f Fv(125)p 29119 69717 V 31484 69717
V 14856 69762 16673 45 v 47992 33333 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 35325 a Fr(AN)369 b(1.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73790 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(25)p 0 TeXcolorgray
eop end
%%Page: 26 26
TeXDict begin 26 25 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)645 b(1.4)f(-)g(5)g(Holzb)60
b(estand)643 b(-)h(O)-60 b(A)645 b(-)f(Matura)g(2014/15)g(-)h(K)-60
b(omp)60 b(en-)-2331 4622 y(sationspr\374fung)p 0 TeXcolorgray
-1391 7929 a Fx(33.)p 0 TeXcolorgray 651 w(Der)359 b(Holzb)36
b(estand)358 b(eines)h(W)-108 b(aldes)358 b(wird)h(in)f(Kubikmetern)g
(\()p Ft(m)32065 7447 y Fq(3)32591 7929 y Fx(\))g(angegeb)36
b(en.)359 b(Zu)f(Beginn)921 9921 y(eines)425 b(b)36 b(estimm)-36
b(ten)424 b(Jahres)h(b)36 b(etr\344gt)425 b(der)f(Holzb)36
b(estand)425 b Fv(10)221 b(000)g Ft(m)34324 9439 y Fq(3)34852
9921 y Fx(.)425 b(Jedes)g(Jahr)f(w)-36 b(\344c)g(hst)921
11913 y(der)325 b(Holzb)36 b(estand)326 b(um)g Fv(3)221
b(\045)p Fx(.)328 b(Am)e(Jahresende)f(w)-36 b(erden)326
b(jew)-36 b(eils)327 b Fv(500)221 b Ft(m)35786 11431
y Fq(3)36639 11913 y Fx(Holz)327 b(gesc)-36 b(hl\344gert.)921
13905 y(Dab)36 b(ei)434 b(gibt)g Ft(a)8053 14104 y Fl(n)9113
13905 y Fx(die)f(Holzmenge)h(am)g(Ende)f(des)g(n-ten)f(Jahres)i(an.)921
16450 y(Stelle)g(die)f(En)-36 b(t)g(wic)g(klung)434 b(des)f(Holzb)36
b(estandes)434 b(durc)-36 b(h)432 b(eine)h(Di\033erenezngleic)-36
b(h)g(ung)434 b(dar.)p 1 0 0 TeXcolorrgb 921 20987 a
Ft(a)1604 21186 y Fq(0)2499 20987 y Fv(=)368 b(10)221
b(000)921 22979 y Ft(a)1604 23178 y Fl(n)p Fq(+1)3801
22979 y Fv(=)369 b(1)p Ft(;)p Fv(03)296 b Fu(\001)g Ft(a)9137
23178 y Fl(n)10058 22979 y Fu(\000)f Fv(500)921 27517
y Ft(a)1604 27716 y Fq(0)2563 27517 y Fx(...)435 b(Holzb)36
b(estand)433 b(zu)g(Beginn)921 29509 y Ft(n)h Fx(...)g(Jahre)g(nac)-36
b(h)433 b(Beginn)921 31500 y Ft(a)1604 31699 y Fl(n)p
Fq(+1)3866 31500 y Fx(...)h(Holzb)36 b(estand)434 b(am)g(Ende)e(des)i
Fv(\()p Ft(n)295 b Fv(+)g(1\))p Fx(-ten)433 b(Jahres)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369
b(1.4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 35308 54804 45 v -2331 40736 a Fy(AN)718 b(1.4)f(-)h(6)f(Nik)-60
b(otin)717 b(-)g(O)-60 b(A)718 b(-)f(Matura)h(2013/14)f(Haupttermin)p
0 TeXcolorgray -1391 44043 a Fx(34.)p 0 TeXcolorgray
651 w(Die)344 b(Nik)-36 b(otinmenge)344 b Ft(x)f Fx(\(in)g(mg\))g(im)g
(Blut)g(eine)g(b)36 b(estimm)-36 b(ten)343 b(Rauc)-36
b(hers)342 b(kann)i(mo)36 b(dellhaft)921 46035 y(durc)-36
b(h)407 b(die)h(Di\033erenzengleic)-36 b(h)g(ung)409
b Ft(x)19415 46234 y Fl(n)p Fq(+1)21612 46035 y Fv(=)369
b(0)p Ft(;)p Fv(98)245 b Fu(\001)f Ft(x)26901 46234 y
Fl(n)27771 46035 y Fv(+)g(0)p Ft(;)p Fv(03)410 b Fx(\()p
Ft(n)e Fx(in)h(T)-108 b(agen\))408 b(b)36 b(esc)-36 b(hrieb)36
b(en)874 48027 y(w)-36 b(erden.)921 50573 y(Gib)412 b(an,)h(wie)h(viel)
g(Milligramm)g(Nik)-36 b(otin)414 b(t\344glic)-36 b(h)413
b(zugef\374hrt)f(w)-36 b(erden)413 b(und)e(wie)j(viel)g(Pro-)921
52565 y(zen)-36 b(t)433 b(der)g(im)h(K)-36 b(\366rp)36
b(er)433 b(v)-36 b(orhandenen)433 b(Nik)-36 b(otinmenge)434
b(t\344glic)-36 b(h)434 b(abgebaut)g(w)-36 b(erden!)p
1 0 0 TeXcolorrgb 921 55110 a(0,03)p 0 0 0 TeXcolorrgb
217 w(mg)p 1 0 0 TeXcolorrgb 888 57655 a(2)p 0 0 0 TeXcolorrgb
217 w(\045)p 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 44043 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 46035 a Fr(AN)369 b(1.4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 61205 V 0 TeXcolorgray
24421 81281 a Fx(26)p 0 TeXcolorgray eop end
%%Page: 27 27
TeXDict begin 27 26 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)798 b(1.4)f(-)h(7)g
(Di\033erenzengleic)-60 b(h)g(ung)795 b(-)j(O)-60 b(A)798
b(-)g(Matura)f(2016/17)h(-)-2331 4622 y(Haupttermin)p
0 TeXcolorgray -1391 7929 a Fx(35.)p 0 TeXcolorgray 651
w(Die)434 b(nac)-36 b(hstehende)432 b(T)-108 b(ab)36
b(elle)435 b(en)-36 b(th\344lt)433 b(W)-108 b(erte)433
b(einer)g(Gr\366\377e)h(zum)f(Zeitpunkt)g Ft(n)h Fv(\()p
Ft(n)369 b Fu(2)f Fj(N)p Fv(\))p 0 TeXcolorgray 0 TeXcolorgray
20509 10409 5799 45 v 20509 12400 45 1992 v 0.8 TeXcolorgray
20554 12400 2539 1992 v 0 TeXcolorgray 21651 11803 a
Ft(n)p 23092 12400 45 1992 v 0.8 TeXcolorgray 23136 12400
3128 1992 v 0 TeXcolorgray 1807 w(x)24973 12002 y Fl(n)p
26264 12400 45 1992 v 20509 12445 5799 45 v 20509 14437
45 1992 v 21498 13839 a Fx(0)p 23092 14437 V 1902 w(10)p
26264 14437 V 20509 14481 5799 45 v 20509 16473 45 1992
v 21498 15875 a(1)p 23092 16473 V 1902 w(21)p 26264 16473
V 20509 16517 5799 45 v 20509 18509 45 1992 v 21498 17911
a(2)p 23092 18509 V 1902 w(43)p 26264 18509 V 20509 18553
5799 45 v 20509 20545 45 1992 v 21498 19948 a(3)p 23092
20545 V 1902 w(87)p 26264 20545 V 20509 20589 5799 45
v 921 23608 a(Die)344 b(zeitlic)-36 b(he)344 b(En)-36
b(t)g(wic)g(klung)344 b(dieser)f(Gr\366\377e)h(kann)g(durc)-36
b(h)342 b(eine)h(Di\033erenzengleic)-36 b(h)g(ung)344
b(der)921 25600 y(F)-108 b(orm)433 b Ft(x)5074 25799
y Fl(n)p Fq(+1)7272 25600 y Fv(=)368 b Ft(a)295 b Fu(\001)g
Ft(x)11033 25799 y Fl(n)11955 25600 y Fv(+)g Ft(b)433
b Fx(b)36 b(esc)-36 b(hrieb)36 b(en)433 b(w)-36 b(erden.)921
30137 y(Gib)575 b(die)g(W)-108 b(erte)574 b(der)h(\(reellen\))g(P)-36
b(arameter)575 b Ft(a)g Fx(und)f Ft(b)h Fx(so)h(an,)f(dass)g(damit)g
(das)h(in)f(der)874 32129 y(T)-108 b(ab)36 b(elle)434
b(angegeb)36 b(ene)434 b(zeitlic)-36 b(he)434 b(V)-108
b(erhalten)433 b(b)36 b(esc)-36 b(hrieb)36 b(en)433 b(wird!)921
36666 y Ft(a)369 b Fv(=)p 1 0 0 TeXcolorrgb 433 w Fx(2)p
0 0 0 TeXcolorrgb 921 39212 a Ft(b)g Fv(=)p 1 0 0 TeXcolorrgb
433 w Fx(1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)g(1.4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
42687 54804 45 v -2331 47988 a Fy(AN)633 b(2.1)g(-)g(1)f(Ableitung)f
(einer)g(P)-60 b(olynomfunktion)630 b(-)j(O)-60 b(A)633
b(-)g(BIFIE)p 0 TeXcolorgray -1391 51296 a Fx(36.)p 0
TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(eine)f(P)-36
b(olynomfunktion)435 b Ft(f)575 b Fx(mit)434 b Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)f(7)p Ft(x)30208 50814
y Fq(3)31030 51296 y Fu(\000)295 b Fv(5)p Ft(x)33747
50814 y Fq(2)34568 51296 y Fv(+)g(2)p Ft(x)h Fu(\000)f
Fv(3)p Fx(.)921 53841 y(Bilde)434 b(die)f(1.)i(und)d(die)i(2.)g
(Ableitung)f(der)g(F)-108 b(unktion)433 b Ft(f)142 b
Fx(!)p 1 0 0 TeXcolorrgb 921 58378 a Ft(f)1704 57896
y Fp(0)2014 58378 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(21)p
Ft(x)7554 57896 y Fq(2)8376 58378 y Fu(\000)295 b Fv(10)p
Ft(x)h Fv(+)f(2)921 60924 y Ft(f)1704 60442 y Fp(00)2270
60924 y Fv(\()p Ft(x)p Fv(\))368 b(=)h(42)p Ft(x)296
b Fu(\000)f Fv(10)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 51296 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 53288 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 64731 V 0 TeXcolorgray
24421 81281 a Fx(27)p 0 TeXcolorgray eop end
%%Page: 28 28
TeXDict begin 28 27 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)921 b(2.1)g(-)g(2)g(Ableitung)e(v)-60
b(on)920 b(Sin)-60 b(us-)920 b(und)f(Cosin)-60 b(us-F)-179
b(unktion)918 b(-)-2331 4515 y(ZO)718 b(-)f(BIFIE)p 0
TeXcolorgray -1391 7823 a Fx(37.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(sind)g(vier)h(F)-108 b(unktionen)433
b(und)f(sec)-36 b(hs)433 b(Ableitungsfunktionen.)921
10368 y(Ordne)f(den)h(F)-108 b(unktionen)433 b(die)g(ric)-36
b(h)g(tige)434 b(Ableitungsfunktion)f Ft(f)33017 9886
y Fp(0)33761 10368 y Fx(zu!)p 0 TeXcolorgray 0 TeXcolorgray
2683 12075 15666 45 v 18348 12075 4523 45 v 2683 15408
45 3334 v 3391 14131 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369
b(=)g(2)266 b Fu(\001)h Fv(cos\()p Ft(x)p Fv(\))g Fu(\000)f
Fv(sin)7 b(\()p Ft(x)p Fv(\))p 18304 15408 V 0.9 TeXcolorgray
18348 15408 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
20090 14257 a Fx(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 22826 15408 45 3334 v 2683 15453 15666
45 v 18348 15453 4523 45 v 2683 18786 45 3334 v 3391
17509 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)g(cos\()p
Ft(x)p Fv(\))272 b(+)f(2)i Fu(\001)e Fv(sin)7 b(\()p
Ft(x)p Fv(\))p 18304 18786 V 0.9 TeXcolorgray 18348 18786
4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20117 17634
a Fx(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
22826 18786 45 3334 v 2683 18830 15666 45 v 18348 18830
4523 45 v 2683 22163 45 3334 v 3391 20886 a Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)g Fu(\000)p Fv(2)8 b Fu(\001)g
Fv(cos)q(\()p Ft(x)p Fv(\))g Fu(\000)g Fv(sin)f(\()p
Ft(x)p Fv(\))p 18304 22163 V 0.9 TeXcolorgray 18348 22163
4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20075 21011
a Fx(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
22826 22163 45 3334 v 2683 22207 15666 45 v 18348 22207
4523 45 v 2683 25482 45 3275 v 3391 24234 a Fh(f)130
b Fg(\()p Fh(x)p Fg(\))338 b(=)f Ff(\000)202 b Fg(cos\()p
Fh(x)p Fg(\))213 b(+)g(2)g Ff(\001)f Fg(sin)9 b(\()p
Fh(x)p Fg(\))p 18304 25482 V 0.9 TeXcolorgray 18348 25482
4478 3275 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 20126 24389
a Fx(B)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
22826 25482 45 3275 v 2683 25526 15666 45 v 18348 25526
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 24451 12075 4567
45 v 29018 12075 15621 45 v 24451 15362 45 3287 v 0.92
TeXcolorgray 24496 15362 4478 3287 v 0 TeXcolorgray 26223
14256 a(A)p 28973 15362 45 3287 v 29682 14113 a Fh(f)30405
13674 y Fp(0)30716 14113 y Fg(\()p Fh(x)p Fg(\))338 b(=)e
Ff(\000)202 b Fg(cos\()p Fh(x)p Fg(\))135 b(+)g(2)g Ff(\001)g
Fg(sin)10 b(\()p Fh(x)p Fg(\))p 44594 15362 V 24451 15406
4567 45 v 29018 15406 15621 45 v 24451 18739 45 3334
v 0.92 TeXcolorgray 24496 18739 4478 3334 v 0 TeXcolorgray
26274 17587 a Fx(B)p 28973 18739 45 3334 v 29682 17462
a Ft(f)30465 16980 y Fp(0)30775 17462 y Fv(\()p Ft(x)p
Fv(\))369 b(=)g(2)194 b Fu(\001)g Fv(cos)q(\()p Ft(x)p
Fv(\))g(+)g(sin)6 b(\()p Ft(x)p Fv(\))p 44594 18739 V
24451 18783 4567 45 v 29018 18783 15621 45 v 24451 22116
45 3334 v 0.92 TeXcolorgray 24496 22116 4478 3334 v 0
TeXcolorgray 26265 20964 a Fx(C)p 28973 22116 45 3334
v 29682 20839 a Ft(f)30465 20357 y Fp(0)30775 20839 y
Fv(\()p Ft(x)p Fv(\))369 b(=)g(2)189 b Fu(\001)g Fv(cos\()p
Ft(x)p Fv(\))g Fu(\000)g Fv(sin)6 b(\()p Ft(x)p Fv(\))p
44594 22116 V 24451 22161 4567 45 v 29018 22161 15621
45 v 24451 25447 45 3287 v 0.92 TeXcolorgray 24496 25447
4478 3287 v 0 TeXcolorgray 26238 24342 a Fx(D)p 28973
25447 45 3287 v 29682 24199 a Fh(f)30405 23759 y Fp(0)30716
24199 y Fg(\()p Fh(x)p Fg(\))338 b(=)e Ff(\000)202 b
Fg(cos\()p Fh(x)p Fg(\))135 b Ff(\000)g Fg(2)g Ff(\001)g
Fg(sin)10 b(\()p Fh(x)p Fg(\))p 44594 25447 V 24451 25491
4567 45 v 29018 25491 15621 45 v 24451 28824 45 3334
v 0.92 TeXcolorgray 24496 28824 4478 3334 v 0 TeXcolorgray
26292 27672 a Fx(E)p 28973 28824 45 3334 v 29682 27547
a Ft(f)30465 27065 y Fp(0)30775 27547 y Fv(\()p Ft(x)p
Fv(\))369 b(=)g(cos\()p Ft(x)p Fv(\))189 b Fu(\000)g
Fv(2)g Fu(\001)g Fv(sin)6 b(\()p Ft(x)p Fv(\))p 44594
28824 V 24451 28868 4567 45 v 29018 28868 15621 45 v
24451 32201 45 3334 v 0.92 TeXcolorgray 24496 32201 4478
3334 v 0 TeXcolorgray 26310 31049 a Fx(F)p 28973 32201
45 3334 v 29682 30924 a Ft(f)30465 30442 y Fp(0)30775
30924 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(2)194 b Fu(\001)g
Fv(sin)7 b(\()p Ft(x)p Fv(\))194 b(+)g(cos\()p Ft(x)p
Fv(\))p 44594 32201 V 24451 32246 4567 45 v 29018 32246
15621 45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9815 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 38613 54804 45 v -2331
43914 a Fy(AN)718 b(2.1)f(-)h(3)f(Ableitungsregeln)d(erk)-60
b(ennen)715 b(-)j(MC)g(-)f(BIFIE)p 0 TeXcolorgray -1391
47222 a Fx(38.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(sind)g(di\033erenzierbare)g(F)-108 b(unktionen)432
b Ft(f)576 b Fx(und)432 b Ft(g)481 b Fx(und)433 b Ft(a)368
b Fu(2)h Fj(R)35770 46740 y Fq(+)36557 47222 y Fx(.)855
49767 y(W)-108 b(elc)-36 b(he)632 b(der)g(nac)-36 b(hstehenden)631
b(Ableitungsregeln)h(sind)h(k)-36 b(orrekt?)634 b(Kreuze)e(die)h(b)36
b(eiden)921 51759 y(zutre\033enden)432 b(A)-36 b(ussagen)433
b(an!)p 13017 52726 20351 45 v 13017 55944 45 3219 v
13725 54667 a Fv([)8 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295
b(+)g Ft(a)p Fv(])19274 54185 y Fp(0)19953 54667 y Fv(=)369
b Ft(f)22117 54185 y Fp(0)22427 54667 y Fv(\()p Ft(x)p
Fv(\))295 b(+)g Ft(a)p 30958 55944 V 33323 55944 V 13017
55988 20351 45 v 13017 59206 45 3219 v 13725 57929 a
Fv([)8 b Ft(a)295 b Fu(\001)g Ft(f)142 b Fv(\()p Ft(x)p
Fv(\)])18631 57447 y Fp(0)19311 57929 y Fv(=)368 b Ft(a)295
b Fu(\001)g Ft(f)23116 57447 y Fp(0)23427 57929 y Fv(\()p
Ft(x)p Fv(\))p 30958 59206 V 1 0 0 TeXcolorrgb 6488 w
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
33323 59206 V 13017 59251 20351 45 v 13017 62469 45 3219
v 13725 61192 a Fv([)8 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295
b Fu(\001)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)])20370 60710
y Fp(0)21049 61192 y Fv(=)369 b Ft(f)23213 60710 y Fp(0)23523
61192 y Fv(\()p Ft(x)p Fv(\))295 b Fu(\001)g Ft(g)26904
60710 y Fp(0)27214 61192 y Fv(\()p Ft(x)p Fv(\))p 30958
62469 V 33323 62469 V 13017 62513 20351 45 v 13017 65731
45 3219 v 13725 64454 a([)8 b Ft(f)142 b Fv(\()p Ft(a)295
b Fu(\001)g Ft(x)p Fv(\)])18631 63972 y Fp(0)19311 64454
y Fv(=)368 b Ft(a)295 b Fu(\001)g Ft(f)23116 63972 y
Fp(0)23427 64454 y Fv(\()p Ft(x)p Fv(\))p 30958 65731
V 33323 65731 V 13017 65775 20351 45 v 13017 68994 45
3219 v 13725 67717 a([)8 b Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))295 b Fu(\000)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)])21034
67235 y Fp(0)21713 67717 y Fv(=)369 b Ft(f)23877 67235
y Fp(0)24187 67717 y Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)h
Ft(g)28233 67235 y Fp(0)28543 67717 y Fv(\()p Ft(x)p
Fv(\))p 30958 68994 V 1 0 0 TeXcolorrgb 1372 w Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 33323
68994 V 13017 69038 20351 45 v 47992 47222 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 49214 a Fr(AN)369 b(2.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 73066
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(28)p 0 TeXcolorgray
eop end
%%Page: 29 29
TeXDict begin 29 28 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(2.1)f(-)h(4)f(Erste)g
(Ableitung)e(einer)i(F)-179 b(unktion)714 b(-)k(MC)g(-)f(BIFIE)p
0 TeXcolorgray -1391 5243 a Fx(39.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Ft(f)575 b Fx(mit)434 b Ft(f)142 b Fv(\()p Ft(a)p Fv(\))368
b(=)23657 4344 y Ft(a)24340 3862 y Fq(2)25161 4344 y
Fu(\001)295 b Ft(b)26378 3862 y Fq(3)p 23657 4933 3247
45 v 25000 6154 a Ft(c)27470 5243 y Fx(mit)434 b Ft(b;)221
b(c)369 b Fu(2)g Fj(R)p Fu(n)p Fv(0)p Fx(.)921 7788 y(Kreuze)433
b(denjenigen)h(T)-108 b(erm)433 b(an,)h(der)f(die)g(erste)h(Ableitung)f
Ft(f)31662 7306 y Fp(0)32406 7788 y Fx(der)g(F)-108 b(unktion)433
b Ft(f)575 b Fx(angibt!)p 15773 8755 14837 45 v 15773
13507 45 4753 v 16615 10752 a Fv(2)295 b Fu(\001)g Ft(a)g
Fu(\001)h Ft(b)20420 10270 y Fq(3)21241 10752 y Fu(\001)f
Ft(c)g Fu(\000)g Ft(a)24771 10270 y Fq(2)25592 10752
y Fu(\001)g Ft(b)26809 10270 y Fq(3)p 16615 11341 10721
45 v 21432 12562 a Ft(c)21992 12178 y Fq(2)p 28201 13507
45 4753 v 30566 13507 V 15773 13551 14837 45 v 15773
18304 45 4753 v 16615 15549 a Fv(2)g Fu(\001)g Ft(a)g
Fu(\001)h Ft(b)20420 15067 y Fq(3)21241 15549 y Fv(+)e(3)i
Fu(\001)f Ft(a)24840 15067 y Fq(2)25661 15549 y Fu(\001)g
Ft(b)26878 15067 y Fq(2)p 16615 16138 10790 45 v 21466
17359 a Ft(c)22026 16975 y Fq(2)p 28201 18304 45 4753
v 30566 18304 V 15773 18348 14837 45 v 15773 23100 45
4753 v 16615 20346 a Fv(2)g Fu(\001)g Ft(a)g Fu(\001)h
Ft(b)20420 19863 y Fq(3)p 16615 20934 4331 45 v 18500
22155 a Ft(c)p 28201 23100 45 4753 v 1 0 0 TeXcolorrgb
28909 21056 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 30566 23100 V 15773 23145 14837 45 v 15773
25871 45 2727 v 16482 24926 a Fv(2)f Fu(\001)h Ft(a)p
28201 25871 V 30566 25871 V 15773 25915 14837 45 v 15773
30667 45 4753 v 16615 27913 a Fv(2)f Fu(\001)g Ft(a)g
Fu(\001)h Ft(b)20420 27431 y Fq(3)p 16615 28501 4331
45 v 18237 29722 a Ft(c)18797 29339 y Fq(2)p 28201 30667
45 4753 v 30566 30667 V 15773 30712 14837 45 v 15773
33654 45 2943 v 16482 32709 a Fv(2)f Fu(\001)h Ft(a)18775
32227 y Fq(3)p 28201 33654 V 30566 33654 V 15773 33698
14837 45 v 47992 5243 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 7234 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 37727 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(29)p 0 TeXcolorgray eop end
%%Page: 30 30
TeXDict begin 30 29 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(2.1)f(-)h(5)f(Ableitung)e(v)-60
b(on)717 b(F)-179 b(unktionen)714 b(-)j(ZO)h(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(40.)p 0 TeXcolorgray 651
w(Die)392 b(Ableitungsfunktion)f(einer)g(F)-108 b(unktion)391
b(kann)g(mithilfe)h(einfac)-36 b(her)392 b(Regeln)g(des)f(Di\033e-)921
6792 y(renzierens)433 b(ermittelt)g(w)-36 b(erden.)921
9338 y(Ordne)426 b(den)g(gegeb)36 b(enen)427 b(F)-108
b(unktionen)426 b(jew)-36 b(eils)429 b(die)e(en)-36 b(tsprec)g(hende)
424 b(Ableitungsfunktion)921 11330 y(zu!)p 0 TeXcolorgray
0 TeXcolorgray 2683 12779 14298 45 v 16981 12779 4523
45 v 2683 17315 45 4537 v 3391 15459 a Ft(f)4032 15658
y Fq(1)4558 15459 y Fv(\()p Ft(x)p Fv(\))369 b(=)8236
14560 y(2)p 8191 15149 740 45 v 8191 16370 a Ft(x)p 16937
17315 45 4537 v 0.9 TeXcolorgray 16981 17315 4478 4537
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18795 15504 a Fx(F)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21459
17315 45 4537 v 2683 17359 14298 45 v 16981 17359 4523
45 v 2683 20720 45 3362 v 3391 19443 a Ft(f)4032 19642
y Fq(2)4558 19443 y Fv(\()p Ft(x)p Fv(\))g(=)g Fu(\000)p
Fv(2)p Ft(x)10481 18961 y Fq(2)11302 19443 y Fv(+)295
b(2)p Ft(x)h Fu(\000)f Fv(2)p 16937 20720 V 0.9 TeXcolorgray
16981 20720 4478 3362 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
18708 19541 a Fx(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21459 20720 45 3362 v 2683 20765 14298
45 v 16981 20765 4523 45 v 2683 25301 45 4537 v 3391
23445 a Ft(f)4032 23644 y Fq(3)4558 23445 y Fv(\()p Ft(x)p
Fv(\))369 b(=)8499 22546 y(1)p 8191 23135 1265 45 v 8191
24356 a Ft(x)8930 23972 y Fq(2)p 16937 25301 45 4537
v 0.9 TeXcolorgray 16981 25301 4478 4537 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18777 23490 a Fx(E)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21459 25301 45 4537
v 2683 25345 14298 45 v 16981 25345 4523 45 v 2683 28775
45 3430 v 3391 27498 a Ft(f)4032 27697 y Fq(4)4558 27498
y Fv(\()p Ft(x)p Fv(\))g(=)8059 26414 y Fu(p)p 9166 26414
1390 54 v 1084 x Fv(2)p Ft(x)p 16937 28775 45 3430 v
0.9 TeXcolorgray 16981 28775 4478 3430 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18759 27526 a Fx(B)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 21459 28775 45 3430
v 2683 28819 14298 45 v 16981 28819 4523 45 v 0 TeXcolorgray
0 TeXcolorgray 24451 12668 4567 45 v 29018 12668 10642
45 v 24451 16001 45 3334 v 0.92 TeXcolorgray 24496 16001
4478 3334 v 0 TeXcolorgray 26223 14849 a(A)p 28973 16001
45 3334 v 29682 14724 a Ft(f)30465 14242 y Fp(0)30775
14724 y Fv(\()p Ft(x)p Fv(\))g(=)g Fu(\000)p Fv(4)p Ft(x)296
b Fv(+)e(2)p 39615 16001 V 24451 16045 4567 45 v 29018
16045 10642 45 v 24451 20875 45 4830 v 0.92 TeXcolorgray
24495 20875 4478 4830 v 0 TeXcolorgray 26274 18917 a
Fx(B)p 28973 20875 45 4830 v 29682 18725 a Ft(f)30465
18243 y Fp(0)30775 18725 y Fv(\()p Ft(x)p Fv(\))369 b(=)35332
17827 y(1)p 34409 18415 2497 45 v 34409 18654 a Fu(p)p
35516 18654 1390 54 v 1084 x Fv(2)p Ft(x)p 39615 20875
45 4830 v 24451 20919 4567 45 v 29018 20919 10642 45
v 24451 25748 45 4830 v 0.92 TeXcolorgray 24495 25748
4478 4830 v 0 TeXcolorgray 26265 23791 a Fx(C)p 28973
25748 45 4830 v 29682 23599 a Ft(f)30465 23117 y Fp(0)30775
23599 y Fv(\()p Ft(x)p Fv(\))g(=)35332 22700 y(2)p 34409
23289 2497 45 v 34409 23528 a Fu(p)p 35516 23528 1390
54 v 1084 x Fv(2)p Ft(x)p 39615 25748 45 4830 v 24451
25792 4567 45 v 29018 25792 10642 45 v 24451 30329 45
4537 v 0.92 TeXcolorgray 24495 30329 4478 4537 v 0 TeXcolorgray
26238 28518 a Fx(D)p 28973 30329 45 4537 v 29682 28473
a Ft(f)30465 27990 y Fp(0)30775 28473 y Fv(\()p Ft(x)p
Fv(\))g(=)g Fu(\000)35749 27574 y Fv(2)p 35442 28162
1265 45 v 35442 29384 a Ft(x)36181 29000 y Fq(4)p 39615
30329 45 4537 v 24451 30373 4567 45 v 29018 30373 10642
45 v 24451 34909 45 4537 v 0.92 TeXcolorgray 24495 34909
4478 4537 v 0 TeXcolorgray 26292 33098 a Fx(E)p 28973
34909 45 4537 v 29682 33053 a Ft(f)30465 32571 y Fp(0)30775
33053 y Fv(\()p Ft(x)p Fv(\))g(=)g Fu(\000)35749 32154
y Fv(2)p 35442 32743 1265 45 v 35442 33964 a Ft(x)36181
33580 y Fq(3)p 39615 34909 45 4537 v 24451 34953 4567
45 v 29018 34953 10642 45 v 24451 39489 45 4537 v 0.92
TeXcolorgray 24495 39489 4478 4537 v 0 TeXcolorgray 26310
37678 a Fx(F)p 28973 39489 45 4537 v 29682 37633 a Ft(f)30465
37151 y Fp(0)30775 37633 y Fv(\()p Ft(x)p Fv(\))g(=)g
Fu(\000)35749 36735 y Fv(2)p 35442 37323 1265 45 v 35442
38544 a Ft(x)36181 38161 y Fq(2)p 39615 39489 45 4537
v 24451 39534 4567 45 v 29018 39534 10642 45 v 47992
4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)g(2.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
45901 54804 45 v -2331 51202 a Fy(AN)718 b(2.1)f(-)h(6)f
(Ableitungsfunktion)712 b(b)60 b(estimmen)716 b(-)i(O)-60
b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray -1391 54952 a Fx(41.)p
0 TeXcolorgray 651 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108
b(unktion)433 b Ft(f)575 b Fx(mit)434 b Ft(f)142 b Fv(\()p
Ft(y)48 b Fv(\))368 b(=)23656 54053 y Ft(x)24395 53571
y Fq(2)24921 54053 y Ft(y)343 b Fu(\000)295 b Ft(xy)28647
53571 y Fq(2)p 23656 54642 5518 45 v 26089 55863 a Fv(2)29306
54952 y Ft(;)221 b(x)370 b Fu(2)e Fj(R)p Fx(.)921 57497
y(Bestimme)434 b(den)f(F)-108 b(unktionsterm)432 b(der)h
(Ableitungsfunktion)h Ft(f)32508 57015 y Fp(0)32818 57497
y Fx(!)921 62034 y Ft(f)1704 61552 y Fp(0)2014 62034
y Fv(\()p Ft(y)48 b Fv(\))369 b(=)p 5458 62034 15749
34 v 1 0 0 TeXcolorrgb 921 66974 a Ft(f)1704 66492 y
Fp(0)2014 66974 y Fv(\()p Ft(y)48 b Fv(\))369 b(=)5590
66075 y Ft(x)6329 65593 y Fq(2)7150 66075 y Fu(\000)296
b Fv(2)p Ft(xy)p 5590 66664 4960 45 v 7745 67885 a Fv(2)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
54952 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 56944 a Fr(AN)369
b(2.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 71360 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(30)p
0 TeXcolorgray eop end
%%Page: 31 31
TeXDict begin 31 30 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(2.1)f(-)h(7)f(Ableitungsregel)d
(-)k(MC)g(-)f(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(42.)p
0 TeXcolorgray 651 w(F)-27 b(\374r)433 b(w)-36 b(elc)g(he)433
b(der)g(folgenden)h(F)-108 b(unktionen)433 b(gilt)h(der)f(Zusammenhang)
921 7346 y Ft(f)1704 6864 y Fp(0)2014 7346 y Fv(\()p
Ft(x)p Fv(\))369 b(=)g Ft(k)340 b Fu(\001)295 b Ft(f)142
b Fv(\()p Ft(x)p Fv(\))433 b Fx(mit)h Ft(k)414 b Fu(2)369
b Fj(R)15851 6864 y Fq(+)16638 7346 y Fx(?)921 11883
y(Kreuze)433 b(die)h(zutre\033ende)e(F)-108 b(unktionsgleic)-36
b(h)g(ung)433 b(an!)p 16642 12850 13100 45 v 16642 16068
45 3219 v 17350 14791 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369
b(=)g Ft(k)340 b Fu(\001)295 b Ft(x)p 27332 16068 V 29698
16068 V 16642 16112 13100 45 v 16642 19431 45 3319 v
17350 18154 a(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)g
Ft(x)22373 17672 y Fq(2)p Fp(\001)p Fl(k)p 27332 19431
V 29698 19431 V 16642 19475 13100 45 v 16642 22694 45
3219 v 17350 21417 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369
b(=)g Ft(k)340 b Fu(\001)295 b Fv(sin)6 b(\()p Ft(x)p
Fv(\))p 27332 22694 V 29698 22694 V 16642 22738 13100
45 v 16642 26057 45 3319 v 17350 24780 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))369 b(=)g Ft(e)22237 24298 y Fl(k)24 b Fp(\001)p
Fl(x)p 27332 26057 V 1 0 0 TeXcolorrgb 28041 24729 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
29698 26057 V 16642 26101 13100 45 v 16642 29587 45 3486
v 17350 28184 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)21775
27661 y Fl(k)p 21767 27874 530 45 v 21767 28642 a(x)p
27332 29587 45 3486 v 29698 29587 V 16642 29631 13100
45 v 16642 32910 45 3280 v 17350 31633 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))369 b(=)g Ft(k)340 b Fu(\001)23314 30682
y(p)p 24421 30682 740 54 v 951 x Ft(x)p 27332 32910 45
3280 v 29698 32910 V 16642 32955 13100 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(2.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 36983 54804 45 v -2331 42284 a Fy(AN)661 b(2.1)f(-)g(8)g(P)-60
b(olynomfunktion)657 b(ableiten)i(-)h(O)-60 b(A)660 b(-)h(BIFIE)g(-)f
(K)-60 b(om-)-2331 45307 y(p)60 b(etenzc)-60 b(hec)g(k)717
b(2016)p 0 TeXcolorgray -1391 48614 a Fx(43.)p 0 TeXcolorgray
651 w(Eine)333 b(reelle)i(F)-108 b(unktion)332 b Ft(f)476
b Fx(ist)333 b(durc)-36 b(h)333 b(die)g(F)-108 b(unktionsgleic)-36
b(h)g(ung)333 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f(4)p
Ft(x)37824 48132 y Fq(3)38441 48614 y Fu(\000)91 b Fv(2)p
Ft(x)40954 48132 y Fq(2)41572 48614 y Fv(+)g(5)p Ft(x)g
Fu(\000)g Fv(2)921 50606 y Fx(gegeb)36 b(en.)921 53151
y(Gib)433 b(eine)h(F)-108 b(unktionsgleic)-36 b(h)g(ung)432
b(der)h(Ableitungsfunktion)h Ft(f)31805 52669 y Fp(0)32549
53151 y Fx(der)f(F)-108 b(unktion)433 b Ft(f)575 b Fx(an.)921
57689 y Ft(f)1704 57206 y Fp(0)2014 57689 y Fv(\()p Ft(x)p
Fv(\))369 b(=)p 5146 57689 15749 34 v 1 0 0 TeXcolorrgb
921 62226 a Ft(f)1704 61744 y Fp(0)2014 62226 y Fv(\()p
Ft(x)p Fv(\))g(=)g(12)p Ft(x)7554 61744 y Fq(2)8376 62226
y Fu(\000)295 b Fv(4)p Ft(x)h Fv(+)e(5)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 48614 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 50606 a Fr(AN)369 b(2.1)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66033
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(31)p 0 TeXcolorgray
eop end
%%Page: 32 32
TeXDict begin 32 31 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)680 b(2.1)f(-)g(9)h(Ableitung)d
(einer)h(Wink)-60 b(elfunktion)675 b(-)680 b(O)-60 b(A)679
b(-)h(Matura)-2385 4515 y(2014/15)718 b(-)f(Neb)60 b(en)-60
b(termin)716 b(1)p 0 TeXcolorgray -1391 7823 a Fx(44.)p
0 TeXcolorgray 651 w(Eine)433 b(Gleic)-36 b(h)g(ung)433
b(einer)h(F)-108 b(unktion)432 b Ft(f)576 b Fx(lautet:)921
10368 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f(5)296
b Fu(\001)f Fv(cos\()p Ft(x)p Fv(\))g(+)g(sin)6 b(\(3)296
b Fu(\001)f Ft(x)p Fv(\))921 14905 y Fx(Gib)433 b(ein)g(Gleic)-36
b(h)g(ung)433 b(der)g(Ableitungsfunktion)h Ft(f)25972
14423 y Fp(0)26716 14905 y Fx(der)f(F)-108 b(unktion)433
b Ft(f)575 b Fx(an.)p 1 0 0 TeXcolorrgb 921 17451 a Ft(f)1704
16969 y Fp(0)2014 17451 y Fv(\()p Ft(x)p Fv(\))369 b(=)g
Fu(\000)p Fv(5)295 b Fu(\001)h Fv(sin)6 b(\()p Ft(x)p
Fv(\))295 b(+)g(3)g Fu(\001)g Fv(cos)q(\(3)g Fu(\001)g
Ft(x)p Fv(\))p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9815 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 21258 54804 45 v -2331
26686 a Fy(AN)1005 b(2.1)g(-)h(10)e(Ableitungsregeln)e(-)j(MC)h(-)f
(Matura)g(2015/16)g(-)-2331 29709 y(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 33016 a Fx(45.)p 0 TeXcolorgray
651 w(\334b)36 b(er)433 b(zw)-36 b(ei)434 b(P)-36 b(olynomfunktionen)
435 b Ft(f)575 b Fx(und)433 b Ft(g)481 b Fx(ist)433 b(b)36
b(ekann)-36 b(t,)434 b(dass)f(f\374r)h(alle)g Ft(x)369
b Fu(2)g Fj(R)434 b Fx(gilt:)921 35561 y Ft(g)48 b Fv(\()p
Ft(x)p Fv(\))368 b(=)h(3)295 b Fu(\001)g Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))295 b Fu(\000)h Fv(2)855 40099 y Fx(W)-108
b(elc)-36 b(he)462 b(der)g(nac)-36 b(hstehenden)461 b(A)-36
b(ussagen)462 b(ist)h(jedenfalls)g(f\374r)g(alle)g Ft(x)419
b Fu(2)f Fj(R)463 b Fx(w)-36 b(ahr?)463 b(Kreuze)921
42091 y(die)433 b(zutre\033ende)f(A)-36 b(ussage)434
b(an.)p 14847 43057 16690 45 v 14847 46275 45 3219 v
15555 44998 a Ft(g)16226 44516 y Fp(0)16536 44998 y Fv(\()p
Ft(x)p Fv(\))369 b(=)g Ft(f)20820 44516 y Fp(0)21130
44998 y Fv(\()p Ft(x)p Fv(\))p 29127 46275 V 31492 46275
V 14847 46320 16690 45 v 14847 49538 45 3219 v 15555
48261 a Ft(g)16226 47779 y Fp(0)16536 48261 y Fv(\()p
Ft(x)p Fv(\))g(=)g Ft(f)20820 47779 y Fp(0)21130 48261
y Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)h Fv(2)p 29127 49538
V 31492 49538 V 14847 49582 16690 45 v 14847 52800 45
3219 v 15555 51523 a Ft(g)16226 51041 y Fp(0)16536 51523
y Fv(\()p Ft(x)p Fv(\))369 b(=)g(3)295 b Fu(\001)h Ft(f)22430
51041 y Fp(0)22740 51523 y Fv(\()p Ft(x)p Fv(\))p 29127
52800 V 1 0 0 TeXcolorrgb 5345 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 31492 52800 V 14847
52844 16690 45 v 14847 56063 45 3219 v 15555 54786 a
Ft(g)16226 54304 y Fp(0)16536 54786 y Fv(\()p Ft(x)p
Fv(\))369 b(=)g(3)295 b Fu(\001)h Ft(f)22430 54304 y
Fp(0)22740 54786 y Fv(\()p Ft(x)p Fv(\))f Fu(\000)g Fv(2)p
29127 56063 V 31492 56063 V 14847 56107 16690 45 v 14847
59325 45 3219 v 15555 58048 a Ft(g)16226 57566 y Fp(0)16536
58048 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(3)295 b Fu(\001)h
Ft(f)22430 57566 y Fp(0)22740 58048 y Fv(\()p Ft(x)p
Fv(\))f Fu(\000)g Fv(2)h Fu(\001)f Ft(x)p 29127 59325
V 31492 59325 V 14847 59369 16690 45 v 14847 62587 45
3219 v 15555 61310 a(g)16226 60828 y Fp(0)16536 61310
y Fv(\()p Ft(x)p Fv(\))369 b(=)g Fu(\000)p Fv(2)296 b
Fu(\001)f Ft(f)23463 60828 y Fp(0)23773 61310 y Fv(\()p
Ft(x)p Fv(\))p 29127 62587 V 31492 62587 V 14847 62632
16690 45 v 47992 33016 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 35008 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 66660 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(32)p 0 TeXcolorgray eop end
%%Page: 33 33
TeXDict begin 33 32 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1005 b(2.1)e(-)i(11)f(Besc)-60
b(hleunigungsfunktion)998 b(b)60 b(estimmen)1003 b(-)h(O)-60
b(A)1005 b(-)-2331 4515 y(Matura)717 b(2013/14)g(1.)g(Neb)60
b(en)-60 b(termin)p 0 TeXcolorgray -1391 7823 a Fx(46.)p
0 TeXcolorgray 651 w(Der)352 b(W)-108 b(eg)351 b Ft(s)p
Fv(\()p Ft(t)p Fv(\))p Fx(,)g(den)g(ein)h(K)-36 b(\366rp)36
b(er)351 b(in)g(der)g(Zeit)h Ft(t)f Fx(zur\374c)-36 b(klegt,)352
b(wird)f(in)h(einem)f(b)36 b(estimm)-36 b(ten)921 9815
y(Zeitin)g(terv)-72 b(all)434 b(durc)-36 b(h)p 0 TeXcolorgray
0 TeXcolorgray 17009 13467 a Ft(s)p Fv(\()p Ft(t)p Fv(\))368
b(=)20986 12944 y Fl(t)21326 12631 y Fk(3)p 20986 13157
802 45 v 21151 13925 a Fq(6)22215 13467 y Fv(+)294 b(5)i
Fu(\001)f Ft(t)25601 12985 y Fq(2)26422 13467 y Fv(+)g(5)g
Fu(\001)g Ft(t)921 17119 y Fx(b)36 b(esc)-36 b(hrieb)36
b(en)432 b(\()p Ft(s)p Fv(\()p Ft(t)p Fv(\))h Fx(in)g(Metern,)g
Ft(t)h Fx(in)f(Sekunden\))921 19665 y(Gib)475 b(die)h(F)-108
b(unktion)475 b Ft(a)h Fx(an,)g(die)g(die)g(Besc)-36
b(hleunigung)475 b(dieses)h(K)-36 b(\366rp)36 b(ers)476
b(in)g(Abh\344ngigk)-36 b(eit)887 21657 y(v)g(on)434
b(der)f(Zeit)h Ft(t)f Fx(b)36 b(esc)-36 b(hreibt!)921
26194 y Ft(a)p Fv(\()p Ft(t)p Fv(\))368 b(=)p 1 0 0 TeXcolorrgb
433 w Ft(t)295 b Fv(+)g(10)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 30001 54804 45
v -2331 35303 a Fy(AN)828 b(2.1)f(-)h(12)f(Ableitung)e(einer)i(P)-60
b(olynomfunktion)824 b(-)k(L)-179 b(T)826 b(-)i(Ma-)-2331
38325 y(tura)717 b(2013/14)g(1.)g(Neb)60 b(en)-60 b(termin)p
0 TeXcolorgray -1391 41632 a Fx(47.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(sind)g(eine)h(reelle)g(P)-36
b(olynomfunktion)434 b Ft(f)576 b Fx(und)432 b(deren)h
(Ableitungsfunktion)h Ft(f)44728 41150 y Fp(0)45038 41632
y Fx(.)921 44178 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
46170 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 49660 y(F)-27 b(\374r)1088 b(die)g(1.)1093
b(Ableitung)1088 b(der)g(F)-108 b(unktion)1088 b Ft(f)1231
b Fx(mit)1088 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))1484
b(=)p 34856 49660 3150 45 v 38477 49612 a Fx(1)38005
49660 y Fo(\015)p 39599 49660 V 4238 w Fx(gilt:)921 51652
y Ft(f)1704 51170 y Fp(0)2014 51652 y Fv(\()p Ft(x)p
Fv(\))369 b(=)p 5363 51652 V 8984 51604 a Fx(2)8512 51652
y Fo(\015)p 10106 51652 V 3583 w Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 6225 53024 14936 45 v 6225 56108 45 3085
v 13367 54806 a(1)12895 54854 y Fo(\015)p 21115 56108
V 6225 56153 14936 45 v 6225 59412 45 3260 v 6933 58209
a Fv(3)p Ft(x)8322 57727 y Fq(3)9144 58209 y Fu(\000)295
b Fv(4)p Ft(x)11861 57727 y Fq(2)12682 58209 y Fv(+)g(7)p
Ft(x)h Fu(\000)f Fv(3)p 18750 59412 V 19459 58114 a Fn(2)p
21115 59412 V 6225 59456 14936 45 v 6225 62715 45 3260
v 6933 61512 a Fv(6)p Ft(x)8322 61030 y Fq(2)9144 61512
y Fu(\000)g Fv(4)p Ft(x)h Fv(+)e(7)p 18750 62715 V 19459
61418 a Fn(2)p 21115 62715 V 6225 62760 14936 45 v 6225
66019 45 3260 v 6933 64816 a Fv(3)p Ft(x)8322 64334 y
Fq(2)9144 64816 y Fu(\000)h Fv(4)p Ft(x)h Fv(+)e(7)p
18750 66019 V 1 0 0 TeXcolorrgb 19459 64721 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
66019 V 6225 66063 14936 45 v 0 TeXcolorgray 0 TeXcolorgray
30427 53024 11578 45 v 30427 56108 45 3085 v 35890 54806
a Fx(2)35418 54854 y Fo(\015)p 41960 56108 V 30427 56153
11578 45 v 30427 59412 45 3260 v 31135 58209 a Ft(x)31874
57727 y Fq(3)32695 58209 y Fu(\000)i Fv(2)p Ft(x)35413
57727 y Fq(2)36234 58209 y Fv(+)f(7)p Ft(x)p 39594 59412
V 40303 58114 a Fn(2)p 41960 59412 V 30427 59456 11578
45 v 30427 62715 45 3260 v 31135 61512 a Fv(6)p Ft(x)h
Fu(\000)f Fv(4)p 39594 62715 V 1 0 0 TeXcolorrgb 40303
61418 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 41960 62715 V 30427 62760 11578 45 v 30427
66019 45 3260 v 31135 64816 a Fv(6)p Ft(x)32524 64334
y Fq(2)33346 64816 y Fu(\000)g Fv(4)p 39594 66019 V 40303
64721 a Fn(2)p 41960 66019 V 30427 66063 11578 45 v 47992
41632 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 43624 a Fr(AN)369
b(2.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 70091 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(33)p
0 TeXcolorgray eop end
%%Page: 34 34
TeXDict begin 34 33 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)720 b(2.1)f(-)h(13)f(Tiefe)f(eines)h
(Gerinnes)f(-)i(O)-60 b(A)719 b(-)h(Matura)f(2016/17)h(-)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -1391 7929 a Fx(48.)p
0 TeXcolorgray 651 w(Zur)346 b(V)-108 b(orb)36 b(eugung)346
b(v)-36 b(or)348 b(Ho)36 b(c)-36 b(h)g(w)g(\344ssern)347
b(wurde)f(in)h(einer)g(Stadt)f(ein)h(Gerinne)f(\(W)-108
b(asserlauf)36 b(\))921 9921 y(angelegt.)921 14458 y(Die)381
b(F)-108 b(unktion)380 b Ft(f)523 b Fx(b)36 b(esc)-36
b(hreibt)380 b(die)g(W)-108 b(assertiefe)382 b(dieses)f(Gerinnes)e(b)36
b(ei)381 b(einer)g(Ho)36 b(c)-36 b(h)g(w)g(asser-)921
16450 y(en)g(t)g(wic)g(klung)456 b(in)f(Abh\344ngigk)-36
b(eit)457 b(v)-36 b(on)456 b(der)f(Zeit)h Ft(t)f Fx(an)h(einer)f(b)36
b(estimm)-36 b(ten)455 b(Messstelle)h(f\374r)921 18442
y(das)434 b(Zeitin)-36 b(terv)-72 b(all)434 b Fv([)8
b(0;)221 b(2])p Fx(.)921 22979 y(Die)422 b(Gleic)-36
b(h)g(ung)421 b(der)g(F)-108 b(unktion)421 b Ft(f)564
b Fx(lautet)421 b Ft(f)142 b Fv(\()p Ft(t)p Fv(\))369
b(=)f Ft(t)26538 22497 y Fq(3)27335 22979 y Fv(+)270
b(6)h Fu(\001)g Ft(t)30648 22497 y Fq(2)31445 22979 y
Fv(+)f(12)i Fu(\001)f Ft(t)f Fv(+)h(8)422 b Fx(mit)f
Ft(t)369 b Fu(2)g Fv([)8 b(0;)221 b(2])p Fx(.)921 27517
y(Dab)36 b(ei)434 b(wird)g Ft(f)142 b Fv(\()p Ft(t)p
Fv(\))433 b Fx(in)g(dm)g(und)g Ft(t)g Fx(in)h(T)-108
b(agen)433 b(gemessen.)921 32054 y(Gib)514 b(eine)h(Gleic)-36
b(h)g(ung)514 b(der)h(F)-108 b(unktion)514 b Ft(g)562
b Fx(an,)516 b(die)e(die)h(momen)-36 b(tane)515 b(\304nderungsrate)f
(der)855 34046 y(W)-108 b(assertiefe)553 b(des)e(Gerinnes)h(\(in)f(dm)h
(pro)g(T)-108 b(ag\))552 b(in)g(Abh\344ngigk)-36 b(eit)553
b(v)-36 b(on)553 b(der)e(Zeit)h Ft(t)g Fx(b)36 b(e-)921
36038 y(sc)-36 b(hreibt!)921 40575 y Ft(g)48 b Fv(\()p
Ft(t)p Fv(\))368 b(=)p 1 0 0 TeXcolorrgb 433 w(3)295
b Fu(\001)h Ft(t)6967 40093 y Fq(2)7787 40575 y Fv(+)f(12)h
Fu(\001)f Ft(t)g Fv(+)g(12)921 43120 y Fx(o)36 b(der:)434
b Ft(g)48 b Fv(\()p Ft(t)p Fv(\))368 b(=)g Ft(f)8893
42638 y Fp(0)9204 43120 y Fv(\()p Ft(t)p Fv(\))p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)h(2.1)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
46928 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(34)p
0 TeXcolorgray eop end
%%Page: 35 35
TeXDict begin 35 34 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1068 b(2.1)f(-)h(14)g(Sin)-60
b(usfunktion)1064 b(und)i(Cosin)-60 b(usfunktion)1064
b(-)k(MC)g(-)-2331 4515 y(Matura)717 b(NT)h(1)f(16/17)p
0 TeXcolorgray -1391 7823 a Fx(49.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)332 b(sind)h(die)g(F)-108 b(unktionen)332
b Ft(f)475 b Fx(mit)333 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))368
b(=)h(sin)6 b(\()p Ft(a)90 b Fu(\001)g Ft(x)p Fv(\))332
b Fx(und)g Ft(g)380 b Fx(mit)333 b Ft(g)48 b Fv(\()p
Ft(x)p Fv(\))368 b(=)h Ft(a)90 b Fu(\001)g Fv(cos\()p
Ft(a)g Fu(\001)g Ft(x)p Fv(\))921 9815 y Fx(mit)434 b
Ft(a)368 b Fu(2)h Fj(R)p Fx(.)855 12360 y(W)-108 b(elc)-36
b(he)509 b(Bezieh)-36 b(ung)509 b(b)36 b(esteh)-36 b(t)508
b(zwisc)-36 b(hen)510 b(den)e(F)-108 b(unktionen)509
b Ft(f)651 b Fx(und)508 b Ft(g)557 b Fx(und)508 b(deren)h(Ablei-)921
14352 y(tungsfunktionen?)433 b(Kreuze)g(diejenige)i(Gleic)-36
b(h)g(ung)432 b(an,)i(die)g(f\374r)f(alle)i Ft(a)369
b Fu(2)f Fj(R)434 b Fx(gilt!)p 16972 15319 12440 45 v
16972 18537 45 3219 v 17681 17260 a Ft(a)295 b Fu(\001)g
Ft(f)20106 16778 y Fp(0)20416 17260 y Fv(\()p Ft(x)p
Fv(\))369 b(=)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\))p 27002
18537 V 29367 18537 V 16972 18581 12440 45 v 16972 21799
45 3219 v 17681 20522 a Ft(g)18352 20040 y Fp(0)18662
20522 y Fv(\()p Ft(x)p Fv(\))368 b(=)h Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p 27002 21799 V 29367 21799 V 16972 21843
12440 45 v 16972 25062 45 3219 v 17681 23785 a Ft(a)295
b Fu(\001)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\))368 b(=)h
Ft(f)24277 23303 y Fp(0)24587 23785 y Fv(\()p Ft(x)p
Fv(\))p 27002 25062 V 29367 25062 V 16972 25106 12440
45 v 16972 28324 45 3219 v 17681 27047 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))368 b(=)h Ft(a)295 b Fu(\001)g Ft(g)24277
26565 y Fp(0)24587 27047 y Fv(\()p Ft(x)p Fv(\))p 27002
28324 V 29367 28324 V 16972 28368 12440 45 v 16972 31586
45 3219 v 17681 30309 a Ft(f)18464 29827 y Fp(0)18774
30309 y Fv(\()p Ft(x)p Fv(\))369 b(=)g Ft(g)48 b Fv(\()p
Ft(x)p Fv(\))p 27002 31586 V 1 0 0 TeXcolorrgb 3013 w
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
29367 31586 V 16972 31631 12440 45 v 16972 34849 45 3219
v 17681 33572 a Ft(g)18352 33090 y Fp(0)18662 33572 y
Fv(\()p Ft(x)p Fv(\))368 b(=)h Ft(a)295 b Fu(\001)g Ft(f)142
b Fv(\()p Ft(x)p Fv(\))p 27002 34849 V 29367 34849 V
16972 34893 12440 45 v 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)369 b(2.1)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 38921 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(35)p 0 TeXcolorgray
eop end
%%Page: 36 36
TeXDict begin 36 35 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1005 b(3.1)f(-)h(1)g
(Ableitungsfunktion)999 b(einer)1004 b(linearen)f(F)-179
b(unktion)1002 b(-)-2331 4515 y(O)-60 b(A)718 b(-)g(BIFIE)p
0 TeXcolorgray -1391 7823 a Fx(50.)p 0 TeXcolorgray 651
w(In)433 b(der)g(Abbildung)g(ist)h(der)f(Graph)f(einer)i(linearen)f(F)
-108 b(unktion)433 b(f)h(dargestellt.)921 10368 y(Zeic)-36
b(hne)433 b(die)g(Ableitungsfunktion)h Ft(f)19848 9886
y Fp(0)20592 10368 y Fx(der)f(F)-108 b(unktion)433 b
Ft(f)575 b Fx(ein!)921 50035 y
 currentpoint currentpoint translate 1.35347 1.35347 scale neg exch
neg exch translate
 921 50035 a 921 50035
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 300.197 a add def
/d 0.0 a add neg def /h 245.30598 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 50035 a 15645 45061 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 167.18335 0.0 -133.01366 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.811 0.0 T 11 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 200.37534 0.0 -22.1688   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 167.18335  0 -133.01366  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -133.01366
 167.18335  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-44.93065  def /maxTickline 200.37534  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.9055  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 56.9055
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 200.37534
0.0 -44.93065   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.18335
0.0 -133.01366 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 200.37534  0 -44.93065  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -44.93065
 200.37534  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.01366  def /maxTickline 167.18335  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.9055  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 56.9055  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 200.37534
0.0 -44.93065   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.18335
0.0 -133.01366 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13668 42197 a
Fq(0)p Fl(:)p Fq(5)13668 39048 y(1)p Fl(:)p Fq(0)13668
35898 y(1)p Fl(:)p Fq(5)13668 32748 y(2)p Fl(:)p Fq(0)13668
29599 y(2)p Fl(:)p Fq(5)13668 26449 y(3)p Fl(:)p Fq(0)12936
48450 y Fp(\000)p Fq(0)p Fl(:)p Fq(5)18193 46407 y(0)p
Fl(:)p Fq(5)1949 b(1)p Fl(:)p Fq(0)g(1)p Fl(:)p Fq(5)f(2)p
Fl(:)p Fq(0)h(2)p Fl(:)p Fq(5)-20465 b Fp(\000)p Fq(0)p
Fl(:)p Fq(5)-5082 b Fp(\000)p Fq(1)p Fl(:)p Fq(0)f Fp(\000)p
Fq(1)p Fl(:)p Fq(5)h Fp(\000)p Fq(2)p Fl(:)p Fq(0)15645
45061 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15645 45061 a 15645 45061 a
tx@Dict begin  { 167.18335 200.37534 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 15645 45061 a 15645
45061 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15645 45061 a 15302 45347 a Fx(x)15645 45061
y
tx@Dict begin  PutEnd  end
 15645 45061 a 15645 45061 a
tx@Dict begin  PutEnd  end
 15645 45061 a 15645 45061
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15645 45061 a 15645 45061 a
tx@Dict begin  { 0.0 0.0 pop 167.18335 200.37534 exch pop } PutCoor
PutBegin  end
 15645 45061 a 15645 45061
a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15645 45061 a 15302 45218 a Fx(y)15645 45061 y
tx@Dict begin  PutEnd  end
 15645
45061 a 15645 45061 a
tx@Dict begin  PutEnd  end
 15645 45061 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.3374442326058738 def /x1 2.9379173276093633
def /dx x1 x sub 49 div def /F@pstplot ((--2.--0.5*x)/1.)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 56.9055 mul F@pstplot 56.9055 mul
} def  /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy
 dup 1.e30 56.9055 mul gt { moveto } { dup -1.e30 56.9055 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 56.9055 mul gt { moveto } { dup -1.e30
56.9055 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -2.3374442326058738
def /x1 2.9379173276093633 def /dx x1 x sub 49 div def /F@pstplot ((--0.5-0.*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.9055 mul F@pstplot
56.9055 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 56.9055 mul gt { moveto } { dup -1.e30 56.9055
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 56.9055 mul gt { moveto } { dup
-1.e30 56.9055 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0
 setlinecap stroke  grestore end


@endspecial 0 0 0 TeXcolorrgb 15645 45061 a
tx@Dict begin  { -106.97133 66.8485 } PutCoor PutBegin  end
 15645 45061
a -172 x Fl(f)15645 45061 y
tx@Dict begin  PutEnd  end
 15645 45061 a 1 0 0 TeXcolorrgb
0 TeXcolorgray 34152 50035 a
currentpoint initclip moveto
 34152 50035 a 921 50035
a
 currentpoint currentpoint translate 1 1.35347 div 1 1.35347 div scale
neg exch neg exch translate
 921 50035 a 1 0 0 TeXcolorrgb 6529 x Fx(Die)513 b(A)-36
b(ufgab)36 b(e)512 b(gilt)h(als)g(ric)-36 b(h)g(tig)512
b(gel\366st,)i(w)-36 b(enn)512 b(der)f(Graph)g(v)-36
b(on)513 b Ft(f)34470 56082 y Fp(0)35292 56564 y Fx(deutlic)-36
b(h)512 b(erk)-36 b(enn)g(bar)921 58556 y(eine)402 b(k)-36
b(onstan)g(te)402 b(F)-108 b(unktion)401 b(mit)h(der)f(F)-108
b(unktionsgleic)-36 b(h)g(ung)401 b Ft(f)31588 58074
y Fp(0)31898 58556 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)p
Ft(;)p Fv(5)403 b Fx(ist.)f(Die)h(F)-108 b(unkti-)921
60548 y(onsgleic)-36 b(h)g(ung)434 b(der)f(1.)h(Ableitung)f(m)-36
b(uss)433 b(nic)-36 b(h)g(t)433 b(angegeb)36 b(en)433
b(sein.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815
a Fr(AN)369 b(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 64282 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(36)p 0 TeXcolorgray eop end
%%Page: 37 37
TeXDict begin 37 36 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.1)f(-)h(2)f(Stammfunktion)e
(-)i(L)-179 b(T)717 b(-)g(BIFIE)p 0 TeXcolorgray -1391
4800 a Fx(51.)p 0 TeXcolorgray 651 w(Es)380 b(gilt)h(die)g(A)-36
b(ussage:)381 b(\022Besitzt)f(eine)h(F)-108 b(unktion)379
b Ft(f)522 b Fx(eine)381 b(Stammfunktion,)f(so)h(b)36
b(esitzt)380 b(sie)921 6792 y(sogar)462 b(unendlic)-36
b(h)460 b(viele.)k(Ist)d(n\344mlic)-36 b(h)462 b Ft(F)642
b Fx(eine)461 b(Stammfunktion)h(v)-36 b(on)462 b Ft(f)142
b Fx(,)461 b(so)h(ist)g(f\374r)f(jede)921 8784 y(b)36
b(eliebige)519 b(reelle)g(Zahl)f Ft(c)g Fx(auc)-36 b(h)517
b(die)i(durc)-36 b(h)516 b Ft(G)p Fv(\()p Ft(x)p Fv(\))d(=)f
Ft(F)181 b Fv(\()p Ft(x)p Fv(\))353 b(+)f Ft(c)518 b
Fx(de\034nierte)f(F)-108 b(unktion)517 b Ft(G)921 10776
y Fx(eine)434 b(Stammfunktion)f(v)-36 b(on)434 b Ft(f)142
b Fx(.)-181 b(\020)p 0 TeXcolorgray 0 TeXcolorgray 39496
13398 a Fe(Quelle:)275 b(Wikip)22 b(edia)921 17051 y
Fx(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 19043 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)921
22533 y(Ist)366 b(die)f(F)-108 b(unktion)365 b Ft(F)546
b Fx(eine)366 b(Stammfunktion)f Ft(f)142 b Fx(,)366 b(dann)f(gilt)p
30610 22533 3150 45 v 34232 22485 a(1)33760 22533 y Fo(\015)p
35354 22533 V 3515 w Fx(.)i(Gilt)e(zudem)p 921 24525
V 4542 24477 a(2)4071 24525 y Fo(\015)p 5665 24525 V
3583 w Fx(,)434 b(dann)e(ist)i(auc)-36 b(h)433 b(die)h(F)-108
b(unktion)432 b(G)i(eine)f(Stammfunktion)h(v)-36 b(on)433
b Ft(f)142 b Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 9577
25897 11583 45 v 9577 28981 45 3085 v 15043 27678 a(1)14571
27726 y Fo(\015)p 21115 28981 V 9577 29026 11583 45 v
9577 32359 45 3334 v 10285 31082 a Ft(F)181 b Fv(\()p
Ft(x)p Fv(\))369 b(=)f Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
18750 32359 V 19459 31024 a Fn(2)p 21115 32359 V 9577
32403 11583 45 v 9577 35736 45 3334 v 10285 34459 a Ft(F)181
b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(f)15591 33977 y Fp(0)15902
34459 y Fv(\()p Ft(x)p Fv(\))p 18750 35736 V 19459 34401
a Fn(2)p 21115 35736 V 9577 35780 11583 45 v 9577 39113
45 3334 v 10285 37836 a Ft(F)11308 37354 y Fp(0)11618
37836 y Fv(\()p Ft(x)p Fv(\))h(=)g Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p 18750 39113 V 1 0 0 TeXcolorrgb 19459
37779 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 21115 39113 V 9577 39157 11583 45 v 0 TeXcolorgray
0 TeXcolorgray 29910 25897 15987 45 v 29910 28981 45
3085 v 37578 27678 a Fx(2)37106 27726 y Fo(\015)p 45852
28981 V 29910 29026 15987 45 v 29910 32359 45 3334 v
30619 31082 a Ft(G)31645 30600 y Fp(0)31955 31082 y Fv(\()p
Ft(x)p Fv(\))369 b(=)f Ft(F)36478 30600 y Fp(0)36789
31082 y Fv(\()p Ft(x)p Fv(\))g(=)h Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p 43487 32359 V 1 0 0 TeXcolorrgb 44195
31024 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45852 32359 V 29910 32403 15987 45 v 29910
35736 45 3334 v 30619 34459 a Ft(G)p Fv(\()p Ft(x)p Fv(\))368
b(=)h Ft(F)181 b Fv(\()p Ft(x)p Fv(\))368 b(=)h Ft(f)40451
33977 y Fp(0)40761 34459 y Fv(\()p Ft(x)p Fv(\))p 43487
35736 V 44195 34401 a Fn(2)p 45852 35736 V 29910 35780
15987 45 v 29910 39113 45 3334 v 30619 37836 a Ft(G)31645
37354 y Fp(0)31955 37836 y Fv(\()p Ft(x)p Fv(\))g(=)f
Ft(F)181 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(f)40761
37354 y Fp(0)41072 37836 y Fv(\()p Ft(x)p Fv(\))p 43487
39113 V 44195 37779 a Fn(2)p 45852 39113 V 29910 39157
15987 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)h(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 43186 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(37)p 0 TeXcolorgray eop end
%%Page: 38 38
TeXDict begin 38 37 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.1)f(-)h(3)f(A)-60
b(ussagen)716 b(zum)i(In)-60 b(tegral)717 b(-)g(MC)h(-)g(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(52.)p 0 TeXcolorgray 651
w(Nac)-36 b(hstehend)467 b(w)-36 b(erden)468 b(A)-36
b(ussagen)469 b(zu)f(F)-108 b(unktionen)468 b(und)f(deren)h
(Stammfunktionen)g(an-)921 6792 y(gef\374hrt.)921 11330
y(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an.)p 1062 12370 44260 45 v 1062 19980 45 7610 v 1770
14238 a(Ist)h Ft(F)614 b Fx(Stammfunktion)434 b(v)-36
b(on)434 b Ft(f)142 b Fx(,)433 b(so)h(gilt:)4814 16519
y Fd(Z)5921 16870 y Fl(b)5429 19035 y(a)6600 18082 y
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)369 b Fv(=)f
Ft(F)181 b Fv(\()p Ft(b)p Fv(\))295 b Fu(\000)g Ft(F)181
b Fv(\()p Ft(a)p Fv(\))p 42912 19980 V 1 0 0 TeXcolorrgb
43621 16507 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 19980 V 1062 20024 44260 45 v 1062
27152 45 7129 v 1770 21965 a Fx(Die)421 b(Stammfunktion)f(einer)g
(Summe)g(v)-36 b(on)420 b(zw)-36 b(ei)421 b(F)-108 b(unktionen)419
b Ft(f)562 b Fx(und)419 b Ft(g)467 b Fx(ist)421 b(\(ab-)1770
23957 y(gesehen)371 b(v)-36 b(on)370 b(In)-36 b(tegrationsk)g(onstan)g
(ten\))370 b(gleic)-36 b(h)371 b(der)e(Summe)h(der)g(Stammfunk-)1770
25949 y(tionen)434 b(v)-36 b(on)434 b Ft(f)575 b Fx(und)433
b Ft(g)48 b Fx(.)p 42912 27152 V 1 0 0 TeXcolorrgb 43621
23920 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 27152 V 1062 27196 44260 45 v 1062
30318 45 3123 v 1770 29115 a Ft(f)576 b Fx(ist)434 b(immer)f(eine)h
(Stammfunktion)f(v)-36 b(on)434 b Ft(f)24010 28633 y
Fp(0)24321 29115 y Fx(.)p 42912 30318 V 1 0 0 TeXcolorrgb
43621 29089 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 30318 V 1062 30363 44260 45 v 1062
35059 45 4696 v 1770 33202 a Fx(W)-108 b(enn)5588 32304
y Ft(dF)181 b Fv(\()p Ft(x)p Fv(\))p 5588 32893 3450
45 v 6605 34114 a Ft(dx)9539 33202 y Fv(=)369 b Ft(f)142
b Fv(\()p Ft(x)p Fv(\))p Fx(,)433 b(dann)g(ist)h Ft(F)614
b Fx(eine)434 b(Stammfunktion)f(v)-36 b(on)434 b Ft(f)142
b Fx(.)p 42912 35059 45 4696 v 1 0 0 TeXcolorrgb 43621
33043 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 35059 V 1062 35103 44260 45 v 1062
42453 45 7351 v 1770 36970 a Fx(F)-27 b(\374r)433 b(b)36
b(eliebige)435 b(F)-108 b(unktionen)432 b Ft(f)575 b
Fx(und)433 b Ft(g)481 b Fx(gilt:)1770 39049 y Fd(Z)3099
40611 y Fv([)8 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295
b Fu(\001)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)])221 b Ft(dx)369
b Fv(=)13129 39049 y Fd(Z)14458 40611 y Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p Ft(dx)295 b Fu(\001)19366 39049 y Fd(Z)20694
40611 y Ft(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)p 42912
42453 V 45277 42453 V 1062 42498 44260 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(3.1)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 46526 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(38)p
0 TeXcolorgray eop end
%%Page: 39 39
TeXDict begin 39 38 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)587 b(3.1)g(-)g(4)g(Ableitungs-)e
(und)g(Stammfunktion)f(-)j(MC)h(-)f(Matura)-2331 4515
y(NT)718 b(2)f(15/16)p 0 TeXcolorgray -1391 7823 a Fx(53.)p
0 TeXcolorgray 651 w(Es)434 b(sei)f Ft(f)576 b Fx(eine)434
b(P)-36 b(olynomfunktion)434 b(und)f Ft(F)614 b Fx(eine)433
b(ihrer)h(Stammfunktionen.)921 10368 y(Kreuze)f(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an.)p
1062 13327 44260 45 v 1062 18463 45 5137 v 1770 15194
a(Eine)g(F)-108 b(unktion)433 b Ft(F)614 b Fx(hei\377t)434
b(Stammfunktion)f(der)g(F)-108 b(unktion)433 b Ft(f)142
b Fx(,)434 b(w)-36 b(enn)433 b(gilt:)1770 17186 y Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)g Ft(F)181 b Fv(\()p Ft(X)104
b Fv(\))295 b(+)g Ft(c)221 b Fv(\()p Ft(c)369 b Fu(2)f
Fj(R)p Fv(\))p Fx(.)p 42912 18463 V 45277 18463 V 1062
18507 44260 45 v 1062 23695 45 5188 v 1770 20426 a(Eine)434
b(F)-108 b(unktion)433 b Ft(f)11080 19944 y Fp(0)11824
20426 y Fx(hei\377t)h(Ableitungsfunktion)f(v)-36 b(on)434
b Ft(f)142 b Fx(,)434 b(w)-36 b(enn)433 b(gilt:)1770
21471 y Fd(R)2730 22418 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(dx)368 b Fv(=)h Ft(f)9211 21936 y Fp(0)9522 22418
y Fv(\()p Ft(x)p Fv(\))o Fx(.)p 42912 23695 V 45277 23695
V 1062 23739 44260 45 v 1062 28876 45 5137 v 1770 25680
a(W)-108 b(enn)433 b(die)h(F)-108 b(unktion)433 b Ft(f)575
b Fx(an)434 b(der)f(Stelle)g Ft(x)22639 25879 y Fq(0)23599
25680 y Fx(de\034niert)f(ist,)i(gibt)g Ft(f)34361 25198
y Fp(0)34671 25680 y Fv(\()p Ft(x)35916 25879 y Fq(0)36442
25680 y Fv(\))g Fx(die)f(Stei-)1770 27672 y(gung)h(der)f(T)-108
b(angen)-36 b(te)433 b(an)h(den)f(Graphen)f(v)-36 b(on)434
b Ft(f)575 b Fx(an)434 b(dieser)f(Stelle)h(an.)p 42912
28876 V 1 0 0 TeXcolorrgb 43621 26640 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 28876
V 1062 28920 44260 45 v 1062 33724 45 4805 v 1770 30787
a Fx(Die)335 b(F)-108 b(unktion)334 b Ft(f)476 b Fx(hat)333
b(unendlic)-36 b(h)333 b(viele)i(Stammfunktionen,)f(die)h(sic)-36
b(h)333 b(n)-36 b(ur)333 b(durc)-36 b(h)1770 32779 y(eine)434
b(additiv)-36 b(e)434 b(K)-36 b(onstan)g(te)433 b(un)-36
b(tersc)g(heiden.)p 42912 33724 V 1 0 0 TeXcolorrgb 43621
31654 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 33724 V 1062 33768 44260 45 v 1062
38823 45 5056 v 1770 35628 a Fx(W)-108 b(enn)365 b(man)g(die)g
(Stammfunktion)g Ft(F)545 b Fx(einmal)366 b(in)-36 b(tegriert,)365
b(dann)f(erh\344lt)h(man)g(die)1770 37620 y(F)-108 b(unktion)433
b Ft(f)142 b Fx(.)p 42912 38823 V 45277 38823 V 1062
38868 44260 45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9815 a Fr(AN)369 b(3.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 42896 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(39)p 0 TeXcolorgray eop end
%%Page: 40 40
TeXDict begin 40 39 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.2)f(-)h(1)f(F)-179
b(unktion)714 b(und)i(Stammfunktion)f(-)j(O)-60 b(A)717
b(-)h(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(54.)p 0
TeXcolorgray 651 w(Die)434 b(Abbildung)f(zeigt)h(den)f(Graphen)f(einer)
h(P)-36 b(olynomfunktion)435 b Ft(f)142 b Fx(.)921 7346
y(Zeic)-36 b(hne)430 b(den)g(Graphen)f(einer)i(Stammfunktion)f
Ft(F)611 b Fx(der)431 b(F)-108 b(unktion)429 b Ft(f)573
b Fx(in)431 b(die)f(Abbildung)921 9338 y(ein!)921 43450
y
 currentpoint currentpoint translate 1.3364 1.3364 scale neg exch neg
exch translate
 921 43450 a 1355 43450 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 239.33064 a add def
/d 0.0 a add neg def /h 212.63753 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355 43450 a 7343 41097 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 185.23111 0.0 -54.09953 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 191.38481 0.0 -21.25272   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 185.23111  0 -54.09953  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -54.09953
 185.23111  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-21.25272  def /maxTickline 191.38481  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 191.38481
0.0 -21.25272   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 185.23111
0.0 -54.09953 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 191.38481  0 -21.25272  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -21.25272
 191.38481  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-54.09953  def /maxTickline 185.23111  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 191.38481
0.0 -21.25272   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 185.23111
0.0 -54.09953 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7343 41097 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7343 41097 a 7343
41097 a
tx@Dict begin  { 185.23111 191.38481 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7343 41097 a 7343 41097 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7343 41097 a 7000 41383
a Fx(x)7343 41097 y
tx@Dict begin  PutEnd  end
 7343 41097 a 7343 41097 a
tx@Dict begin  PutEnd  end
 7343 41097
a 7343 41097 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7343 41097 a 7343 41097 a
tx@Dict begin  { 0.0 0.0 pop 185.23111 191.38481 exch pop } PutCoor
PutBegin  end
 7343 41097 a
7343 41097 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7343 41097 a 6295 41430 a Fx(f\(x\))7343
41097 y
tx@Dict begin  PutEnd  end
 7343 41097 a 7343 41097 a
tx@Dict begin  PutEnd  end
 7343 41097 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.9013777032950112 def /x1 6.510129729096258
def /dx x1 x sub 199 div def /F@pstplot (1.5*x^(2.0)-6.0*x+6.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.8 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -1.9013777032950112
def /x1 6.510129729096258 def /dx x1 x sub 199 div def /F@pstplot (0.01878816167489931*x^(4.0)+0.36901366118202444*x^(3.0)-2.678740507834282*x^(2.0)+5.731121077541272*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0.8 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb 7343 41097
a
tx@Dict begin  { 9.69206 149.3096 } PutCoor PutBegin  end
 7343 41097 a -172 x Fl(f)7343 41097 y
tx@Dict begin  PutEnd  end
 7343 41097 a
1 0 0 TeXcolorrgb 0 TeXcolorgray 27847 43450 a
currentpoint initclip moveto
 27847
43450 a 921 43450 a
 currentpoint currentpoint translate 1 1.3364 div 1 1.3364 div scale
neg exch neg exch translate
 921 43450 a 1 0 0 TeXcolorrgb 2545
x Fx(Die)364 b(A)-36 b(ufgab)36 b(e)364 b(gilt)g(als)f(ric)-36
b(h)g(tig)364 b(gel\366st,)g(w)-36 b(enn)363 b(der)g(Graph)f(der)g(F)
-108 b(unktion)363 b Ft(F)544 b Fx(im)363 b(gesam)-36
b(ten)921 47987 y(dargestellten)305 b(Bereic)-36 b(h)304
b(mon)-36 b(ton)304 b(w)-36 b(ac)g(hsend)304 b(dargestellt)h(wird)g
(und)e(an)i(der)f(Stelle)h(2)g(einen)921 49979 y(deutlic)-36
b(h)433 b(erk)-36 b(enn)g(baren)432 b(Sattelpunkt)h(aufw)-36
b(eist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792
a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 53713 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(40)p 0 TeXcolorgray eop end
%%Page: 41 41
TeXDict begin 41 40 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)946 b(3.2)f(-)h(2)f(Graph)g(der)g
(ersten)f(Ableitungsfunktion)c(-)946 b(MC)g(-)-2331 4515
y(BIFIE)p 0 TeXcolorgray -1391 7823 a Fx(55.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)433 b(ist)h(der)f(Graph)f(der)h(F)-108
b(unktion)433 b Ft(f)142 b Fx(.)p 0 TeXcolorgray 0 TeXcolorgray
17787 24855 a
 currentpoint currentpoint translate 0.67351 0.67351 scale neg exch
neg exch translate
 17787 24855 a 17787 24855 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 150.81612 a add def
/d 0.0 a add neg def /h 201.23447 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 17787 24855
a 28512 13576 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 53.92632 0.0 -96.8898 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 99.34538 0.0 -101.88908   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 53.92632  0 -96.8898  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -96.8898
 53.92632  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-101.88908  def /maxTickline 99.34538  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.34538
0.0 -101.88908   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 53.92632
0.0 -96.8898 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 99.34538  0 -101.88908  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -101.88908
 99.34538  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.8898  def /maxTickline 53.92632  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.34538
0.0 -101.88908   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 53.92632
0.0 -96.8898 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 27267 10712 a
Fq(1)27267 7562 y(2)27267 4413 y(3)26535 16965 y Fp(\000)p
Fq(1)26535 20115 y Fp(\000)p Fq(2)26535 23264 y Fp(\000)p
Fq(3)31426 14922 y(1)-7135 b Fp(\000)p Fq(1)-4351 b Fp(\000)p
Fq(2)f Fp(\000)p Fq(3)28512 13576 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 28512 13576 a 28512
13576 a
tx@Dict begin  { 53.92632 99.34538 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 28512 13576 a 28512 13576 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 28512 13576 a 28169
13862 a Fx(x)28512 13576 y
tx@Dict begin  PutEnd  end
 28512 13576 a 28512 13576
a
tx@Dict begin  PutEnd  end
 28512 13576 a 28512 13576 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 28512 13576 a 28512 13576
a
tx@Dict begin  { 0.0 0.0 pop 53.92632 99.34538 exch pop } PutCoor PutBegin
 end
 28512 13576 a 28512 13576 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 28512 13576 a 27464 13908
a Fx(f\(x\))28512 13576 y
tx@Dict begin  PutEnd  end
 28512 13576 a 28512 13576 a
tx@Dict begin  PutEnd  end

28512 13576 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.4052929250927324 def /x1 1.8952898818965822
def /dx x1 x sub 199 div def /F@pstplot (-0.75*x^(3.0)-2.25*x^(2.0)+4.0E-50*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
34481 24855 a
currentpoint initclip moveto
 34481 24855 a 17787 24855 a
 currentpoint currentpoint translate 1 0.67351 div 1 0.67351 div scale
neg exch neg exch translate
 17787 24855
a 873 27821 a Fi(W)-78 b(elc)-26 b(he)338 b(der)f(nac)-26
b(hstehenden)337 b(Abbildungen)g(b)26 b(esc)-26 b(hreibt)337
b(den)g(Graphen)g(der)g(ersten)g(Ableitungsfunktion)g(der)g(F)-78
b(unktion)921 29126 y Fl(f)98 b Fi(?)314 b(Kreuze)f(die)h
(zutre\033ende)f(Abbildung)h(an!)p 0 TeXcolorgray 0 TeXcolorgray
5693 33468 14879 45 v 5693 47389 45 13922 v 6401 46444
a
 currentpoint currentpoint translate 0.54013 0.54013 scale neg exch
neg exch translate
 6401 46444 a 6715 46444 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 188.08176 a add def
/d 0.0 a add neg def /h 201.23402 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6715 46444 a 16227 35117
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.15219 0.0 -85.92957 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 98.90688 0.0 -102.32715   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.15219  0 -85.92957  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -85.92957
 102.15219  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.32715  def /maxTickline 98.90688  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 98.90688
0.0 -102.32715   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.15219
0.0 -85.92957 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 98.90688  0 -102.32715  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -102.32715
 98.90688  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-85.92957  def /maxTickline 102.15219  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 98.90688
0.0 -102.32715   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.15219
0.0 -85.92957 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15046 32182 a Fk(1)15046 29032
y(2)15046 25882 y(3)14407 38435 y Fc(\000)p Fk(1)14407
41584 y Fc(\000)p Fk(2)14407 44734 y Fc(\000)p Fk(3)19174
36320 y(1)2743 b(2)h(3)-13324 b Fc(\000)p Fk(1)-4196
b Fc(\000)p Fk(2)h Fc(\000)p Fk(3)16227 35117 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16227
35117 a 16227 35117 a
tx@Dict begin  { 102.15219 98.90688 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16227 35117 a 16227 35117 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 16227
35117 a 15979 35308 a Fi(x)16227 35117 y
tx@Dict begin  PutEnd  end
 16227 35117
a 16227 35117 a
tx@Dict begin  PutEnd  end
 16227 35117 a 16227 35117 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16227 35117
a 16227 35117 a
tx@Dict begin  { 0.0 0.0 pop 102.15219 98.90688 exch pop } PutCoor
PutBegin  end
 16227 35117 a 16227 35117 a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16227 35117
a 15469 35339 a Fi(f\(x\))16227 35117 y
tx@Dict begin  PutEnd  end
 16227 35117 a
16227 35117 a
tx@Dict begin  PutEnd  end
 16227 35117 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0.2 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -3.020076151328974
def /x1 3.5902436864571214 def /dx x1 x sub 199 div def /F@pstplot
(-2.2130955546979934*x^(2.0)+4.426191109395987*x)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0.2 0
0  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 27535 46444 a
currentpoint initclip moveto
 27535 46444 a 6401 46444 a
 currentpoint currentpoint translate 1 0.54013 div 1 0.54013 div scale
neg exch neg exch translate

6401 46444 a 18480 47389 45 13922 v 20527 47389 V 5693
47434 14879 45 v 5693 61536 45 14103 v 6401 60591 a
 currentpoint currentpoint translate 0.55519 0.55519 scale neg exch
neg exch translate
 6401
60591 a 6401 60591 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 185.73473 a add def
/d 0.0 a add neg def /h 198.72331 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6401 60591 a 17831 49075 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 82.48543 0.0 -103.2493 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 94.68646 0.0 -104.03685   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 82.48543  0 -103.2493  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.2493
 82.48543  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.03685  def /maxTickline 94.68646  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 94.68646  0 -104.03685  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.03685
 94.68646  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.2493  def /maxTickline 82.48543  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
16650 46139 a Fk(1)16650 42990 y(2)16650 39840 y(3)16010
52393 y Fc(\000)p Fk(1)16010 55542 y Fc(\000)p Fk(2)16010
58692 y Fc(\000)p Fk(3)20777 50278 y(1)2744 b(2)-10175
b Fc(\000)p Fk(1)-4195 b Fc(\000)p Fk(2)f Fc(\000)p Fk(3)17831
49075 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17831 49075 a 17831 49075 a
tx@Dict begin  { 82.48543 94.68646 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 17831 49075 a 17831
49075 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 17831 49075 a 17583 49266 a Fi(x)17831 49075
y
tx@Dict begin  PutEnd  end
 17831 49075 a 17831 49075 a
tx@Dict begin  PutEnd  end
 17831 49075 a 17831 49075
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17831 49075 a 17831 49075 a
tx@Dict begin  { 0.0 0.0 pop 82.48543 94.68646 exch pop } PutCoor PutBegin
 end
 17831 49075 a 17831 49075
a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17831 49075 a 17073 49296 a Fi(f\(x\))17831 49075 y
tx@Dict begin  PutEnd  end

17831 49075 a 17831 49075 a
tx@Dict begin  PutEnd  end
 17831 49075 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6287932658462516 def /x1 2.8990384294437543
def /dx x1 x sub 199 div def /F@pstplot (-1.0000884807074706*x^(4.0)-6.036615308075288*x^(3.0)-12.1813954069345*x^(2.0)-8.217037427227613*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 26962 60591 a
currentpoint initclip moveto
 26962 60591 a
6401 60591 a
 currentpoint currentpoint translate 1 0.55519 div 1 0.55519 div scale
neg exch neg exch translate
 6401 60591 a 18480 61536 45 14103 v 20527
61536 V 5693 61581 14879 45 v 5693 75683 45 14103 v 6401
74738 a
 currentpoint currentpoint translate 0.55519 0.55519 scale neg exch
neg exch translate
 6401 74738 a 6401 74738 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 185.73473 a add def
/d 0.0 a add neg def /h 198.72331 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6401 74738 a 17831
63222 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 82.48543 0.0 -103.2493 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 94.68646 0.0 -104.03685   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 82.48543  0 -103.2493  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.2493
 82.48543  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.03685  def /maxTickline 94.68646  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 94.68646  0 -104.03685  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.03685
 94.68646  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.2493  def /maxTickline 82.48543  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16650 60286 a Fk(1)16650 57137
y(2)16650 53987 y(3)16010 66540 y Fc(\000)p Fk(1)16010
69689 y Fc(\000)p Fk(2)16010 72839 y Fc(\000)p Fk(3)20777
64425 y(1)2744 b(2)-10175 b Fc(\000)p Fk(1)-4195 b Fc(\000)p
Fk(2)f Fc(\000)p Fk(3)17831 63222 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17831 63222 a 17831
63222 a
tx@Dict begin  { 82.48543 94.68646 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 17831 63222 a 17831 63222 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 17831 63222 a 17583
63413 a Fi(x)17831 63222 y
tx@Dict begin  PutEnd  end
 17831 63222 a 17831 63222
a
tx@Dict begin  PutEnd  end
 17831 63222 a 17831 63222 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17831 63222 a 17831 63222
a
tx@Dict begin  { 0.0 0.0 pop 82.48543 94.68646 exch pop } PutCoor PutBegin
 end
 17831 63222 a 17831 63222 a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17831 63222 a 17073 63443
a Fi(f\(x\))17831 63222 y
tx@Dict begin  PutEnd  end
 17831 63222 a 17831 63222 a
tx@Dict begin  PutEnd  end

17831 63222 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6287932658462516 def /x1 2.8990384294437543
def /dx x1 x sub 199 div def /F@pstplot (-2.201863609943576*x^(2.0)-4.403727219887152*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26962 74738 a
currentpoint initclip moveto
 26962 74738 a 6401 74738 a
 currentpoint currentpoint translate 1 0.55519 div 1 0.55519 div scale
neg exch neg exch translate
 6401 74738 a
18480 75683 45 14103 v 1 0 0 TeXcolorrgb 19189 68853
a Fb(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
20527 75683 V 5693 75728 14879 45 v 24758 33468 14205
45 v 24758 47570 45 14103 v 25466 46626 a
 currentpoint currentpoint translate 0.55519 0.55519 scale neg exch
neg exch translate
 25466 46626
a 25466 46626 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 185.73473 a add def
/d 0.0 a add neg def /h 198.72331 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 46626 a 36896 35109 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 82.48543 0.0 -103.2493 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 94.68646 0.0 -104.03685   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 82.48543  0 -103.2493  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.2493
 82.48543  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.03685  def /maxTickline 94.68646  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 94.68646  0 -104.03685  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.03685
 94.68646  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.2493  def /maxTickline 82.48543  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
35715 32173 a Fk(1)35715 29024 y(2)35715 25874 y(3)35075
38427 y Fc(\000)p Fk(1)35075 41576 y Fc(\000)p Fk(2)35075
44726 y Fc(\000)p Fk(3)39842 36312 y(1)2744 b(2)-10175
b Fc(\000)p Fk(1)-4195 b Fc(\000)p Fk(2)f Fc(\000)p Fk(3)36896
35109 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 36896 35109 a 36896 35109 a
tx@Dict begin  { 82.48543 94.68646 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 36896 35109 a 36896
35109 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 36896 35109 a 36648 35300 a Fi(x)36896 35109
y
tx@Dict begin  PutEnd  end
 36896 35109 a 36896 35109 a
tx@Dict begin  PutEnd  end
 36896 35109 a 36896 35109
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36896 35109 a 36896 35109 a
tx@Dict begin  { 0.0 0.0 pop 82.48543 94.68646 exch pop } PutCoor PutBegin
 end
 36896 35109 a 36896 35109
a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36896 35109 a 36138 35330 a Fi(f\(x\))36896 35109 y
tx@Dict begin  PutEnd  end

36896 35109 a 36896 35109 a
tx@Dict begin  PutEnd  end
 36896 35109 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6287932658462516 def /x1 2.8990384294437543
def /dx x1 x sub 49 div def /F@pstplot ((-3.0021712888572467-3.0021712888572467*x)/0.6883799499421429)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 46026 46626 a
currentpoint initclip moveto
 46026 46626 a
25466 46626 a
 currentpoint currentpoint translate 1 0.55519 div 1 0.55519 div scale
neg exch neg exch translate
 25466 46626 a 37545 47570 45 14103 v 38918
47570 V 24758 47615 14205 45 v 24758 61717 45 14103 v
25466 60773 a
 currentpoint currentpoint translate 0.55519 0.55519 scale neg exch
neg exch translate
 25466 60773 a 25466 60773 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 185.73473 a add def
/d 0.0 a add neg def /h 198.72331 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 60773
a 36896 49256 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 82.48543 0.0 -103.2493 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 94.68646 0.0 -104.03685   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 82.48543  0 -103.2493  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.2493
 82.48543  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.03685  def /maxTickline 94.68646  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 94.68646  0 -104.03685  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.03685
 94.68646  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.2493  def /maxTickline 82.48543  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 35715 46321 a
Fk(1)35715 43171 y(2)35715 40021 y(3)35075 52574 y Fc(\000)p
Fk(1)35075 55723 y Fc(\000)p Fk(2)35075 58873 y Fc(\000)p
Fk(3)39842 50459 y(1)2744 b(2)-10175 b Fc(\000)p Fk(1)-4195
b Fc(\000)p Fk(2)f Fc(\000)p Fk(3)36896 49256 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 36896
49256 a 36896 49256 a
tx@Dict begin  { 82.48543 94.68646 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 36896 49256 a 36896 49256 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 36896
49256 a 36648 49447 a Fi(x)36896 49256 y
tx@Dict begin  PutEnd  end
 36896 49256
a 36896 49256 a
tx@Dict begin  PutEnd  end
 36896 49256 a 36896 49256 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36896 49256
a 36896 49256 a
tx@Dict begin  { 0.0 0.0 pop 82.48543 94.68646 exch pop } PutCoor PutBegin
 end
 36896 49256 a 36896 49256 a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36896 49256
a 36138 49478 a Fi(f\(x\))36896 49256 y
tx@Dict begin  PutEnd  end
 36896 49256 a
36896 49256 a
tx@Dict begin  PutEnd  end
 36896 49256 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6287932658462516 def /x1 2.8990384294437543
def /dx x1 x sub 199 div def /F@pstplot ((x+0.9)^(2.0)-2.97)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 46026 60773 a
currentpoint initclip moveto
 46026 60773 a 25466 60773
a
 currentpoint currentpoint translate 1 0.55519 div 1 0.55519 div scale
neg exch neg exch translate
 25466 60773 a 37545 61717 45 14103 v 38918 61717 V
24758 61762 14205 45 v 24758 75865 45 14103 v 25466 74920
a
 currentpoint currentpoint translate 0.55519 0.55519 scale neg exch
neg exch translate
 25466 74920 a 25466 74920 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 185.73473 a add def
/d 0.0 a add neg def /h 198.72331 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 74920 a 36896 63403
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 82.48543 0.0 -103.2493 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 94.68646 0.0 -104.03685   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 82.48543  0 -103.2493  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.2493
 82.48543  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-104.03685  def /maxTickline 94.68646  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 94.68646  0 -104.03685  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -104.03685
 94.68646  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.2493  def /maxTickline 82.48543  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 94.68646
0.0 -104.03685   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 82.48543
0.0 -103.2493 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 35715 60468 a Fk(1)35715 57318
y(2)35715 54168 y(3)35075 66721 y Fc(\000)p Fk(1)35075
69870 y Fc(\000)p Fk(2)35075 73020 y Fc(\000)p Fk(3)39842
64606 y(1)2744 b(2)-10175 b Fc(\000)p Fk(1)-4195 b Fc(\000)p
Fk(2)f Fc(\000)p Fk(3)36896 63403 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 36896 63403 a 36896
63403 a
tx@Dict begin  { 82.48543 94.68646 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 36896 63403 a 36896 63403 a
tx@Dict begin  { 5.0 4.486 3.4445 0.0 140.  Uput UUput } PutCoor PutBegin
 end
 36896 63403 a 36648
63594 a Fi(x)36896 63403 y
tx@Dict begin  PutEnd  end
 36896 63403 a 36896 63403
a
tx@Dict begin  PutEnd  end
 36896 63403 a 36896 63403 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36896 63403 a 36896 63403
a
tx@Dict begin  { 0.0 0.0 pop 82.48543 94.68646 exch pop } PutCoor PutBegin
 end
 36896 63403 a 36896 63403 a
tx@Dict begin  { 5.0 13.69456 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36896 63403 a 36138 63625
a Fi(f\(x\))36896 63403 y
tx@Dict begin  PutEnd  end
 36896 63403 a 36896 63403 a
tx@Dict begin  PutEnd  end

36896 63403 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6287932658462516 def /x1 2.8990384294437543
def /dx x1 x sub 199 div def /F@pstplot (2.180778313501426*x^(2.0)+4.361556627002852*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
46026 74920 a
currentpoint initclip moveto
 46026 74920 a 25466 74920 a
 currentpoint currentpoint translate 1 0.55519 div 1 0.55519 div scale
neg exch neg exch translate
 25466 74920
a 37545 75865 45 14103 v 38918 75865 V 24758 75909 14205
45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
9815 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 0 TeXcolorgray 24421 81281 a Fx(41)p 0
TeXcolorgray eop end
%%Page: 42 42
TeXDict begin 42 41 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fy(AN)718
b(3.2)f(-)h(3)f(F)-179 b(unktion)714 b(-)k(Ableitungsfunktion)712
b(-)718 b(MC)g(-)f(BIFIE)p 0 TeXcolorgray -1391 10102
a Fx(56.)p 0 TeXcolorgray 651 w(In)384 b(der)g(un)-36
b(tenstehenden)382 b(Abbildung)i(ist)g(der)g(Graph)g(der)g
(Ableitungsfunktion)g Ft(f)42480 9620 y Fp(0)43175 10102
y Fx(einer)921 12094 y(F)-108 b(unktion)433 b Ft(f)575
b Fx(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 12165
40878 a
 currentpoint currentpoint translate 0.57887 0.57887 scale neg exch
neg exch translate
 12165 40878 a 12165 40878 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 350.93872 a add def
/d 0.0 a add neg def /h 381.25702 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12165 40878 a 29194
35074 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 197.09828  0 -153.84044  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -153.84044
 197.09828  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-52.42978  def /maxTickline 328.82724  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 328.82724
0.0 -52.42978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 197.09828
0.0 -153.84044 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 328.82724  0 -52.42978  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -52.42978
 328.82724  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-153.84044  def /maxTickline 197.09828  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 328.82724
0.0 -52.42978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 197.09828
0.0 -153.84044 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
29194 35074 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 29194 35074 a 29194 35074 a
tx@Dict begin  { 197.09828 328.82724 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 29194 35074
a 29194 35074 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 29194 35074 a 28851 35360 a Fx(x)29194
35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074 a
tx@Dict begin  PutEnd  end
 29194 35074 a 29194
35074 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 29194 35074 a 29194 35074 a
tx@Dict begin  { 0.0 0.0 pop 197.09828 328.82724 exch pop } PutCoor
PutBegin  end
 29194 35074 a 29194
35074 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 29194 35074 a 27948 35406 a Fx(f)36 b('\(x\))29194
35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074 a
tx@Dict begin  PutEnd  end
 29194 35074 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.406875760298069 def /x1 6.927208122057785
def /dx x1 x sub 199 div def /F@pstplot (0.0011904761904761906*x^(4.0)-0.13452380952380952*x^(3.0)+0.39166666666666666*x^(2.0)+1.1345238095238095*x+0.6071428571428571)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -113.81097 0.0 -113.0043 313.07352
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ -56.90549 0.0 -56.90549 28.45274  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  3.0  3.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 28.45274 56.90549 28.45274 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  3.0  3.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 85.35823 113.81097 85.35823 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  3.0  3.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
29194 35074 a
tx@Dict begin  { -116.70027 -5.43561 } PutCoor PutBegin  end
 29194 35074 a 572 x Ft(x)29933 35845 y
Fq(1)29194 35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074 a
tx@Dict begin  { -62.88466 -5.43561 } PutCoor PutBegin  end
 29194
35074 a 572 x Ft(x)29933 35845 y Fq(2)29194 35074 y
tx@Dict begin  PutEnd  end
 29194
35074 a 29194 35074 a
tx@Dict begin  { -32.56592 -5.43561 } PutCoor PutBegin  end
 29194 35074 a 572 x Ft(x)29933
35845 y Fq(3)29194 35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074
a
tx@Dict begin  { 24.28181 -3.91997 } PutCoor PutBegin  end
 29194 35074 a 572 x Ft(x)29933 35845 y Fq(4)29194 35074
y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074 a
tx@Dict begin  { 80.3711 -3.91997 } PutCoor PutBegin  end
 29194 35074 a 572 x Ft(x)29933
35845 y Fq(5)29194 35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 29194 35074
a
tx@Dict begin  { -101.5409 284.1076 } PutCoor PutBegin  end
 29194 35074 a -172 x Fl(f)29744 34589 y Fc(0)29194
35074 y
tx@Dict begin  PutEnd  end
 29194 35074 a 51012 40878 a
currentpoint initclip moveto
 51012 40878 a 12165
40878 a
 currentpoint currentpoint translate 1 0.57887 div 1 0.57887 div scale
neg exch neg exch translate
 12165 40878 a 921 44862 a Fx(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p
1062 45829 44260 45 v 1062 50943 45 5114 v 1770 47748
a(Jede)386 b(F)-108 b(unktion)386 b Ft(f)528 b Fx(mit)386
b(der)f(Ableitungsfunktion)h Ft(f)27951 47266 y Fp(0)28648
47748 y Fx(hat)f(an)h(der)g(Stelle)g Ft(x)39096 47947
y Fq(5)40008 47748 y Fx(eine)1770 49740 y(horizon)-36
b(tale)434 b(T)-108 b(angen)-36 b(te.)p 42912 50943 V
45277 50943 V 1062 50987 44260 45 v 1062 56175 45 5188
v 1770 52906 a(Es)434 b(gibt)g(eine)f(F)-108 b(unktion)433
b Ft(f)576 b Fx(mit)433 b(der)g(Ableitungsfunktion)h
Ft(f)32435 52424 y Fp(0)32745 52906 y Fx(,)g(deren)f(Graph)1770
54898 y(durc)-36 b(h)433 b(den)f(Punkt)i Ft(P)550 b Fv(=)368
b(\(0)p Ft(=)p Fv(0\))434 b Fx(v)-36 b(erl\344uft.)p
42912 56175 V 1 0 0 TeXcolorrgb 43621 53913 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
56175 V 1062 56219 44260 45 v 1062 61356 45 5137 v 1770
58160 a Fx(Jede)434 b(F)-108 b(unktion)433 b Ft(f)575
b Fx(mit)434 b(der)f(Ableitungsfunktion)g Ft(f)28236
57678 y Fp(0)28980 58160 y Fx(ist)h(im)g(In)-36 b(terv)-72
b(all)434 b Fv([)8 b Ft(x)38947 58359 y Fq(1)39473 58160
y Fv(;)221 b Ft(x)40794 58359 y Fq(2)41321 58160 y Fv(])1770
60152 y Fx(streng)434 b(monoton)f(fallend.)p 42912 61356
V 45277 61356 V 1062 61400 44260 45 v 1062 66536 45 5137
v 1770 63341 a(Jede)h(F)-108 b(unktion)433 b Ft(f)575
b Fx(mit)434 b(der)f(Ableitungsfunktion)g Ft(f)28236
62859 y Fp(0)28980 63341 y Fx(ist)h(im)g(In)-36 b(terv)-72
b(all)434 b Fv([)8 b Ft(x)38947 63540 y Fq(3)39473 63341
y Fv(;)221 b Ft(x)40794 63540 y Fq(4)41321 63341 y Fv(])1770
65333 y Fx(streng)434 b(monoton)f(steigend.)p 42912 66536
V 1 0 0 TeXcolorrgb 43621 64300 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 66536 V 1062 66580
44260 45 v 1062 71790 45 5211 v 1770 68521 a Fx(Die)i(F)-108
b(unktionsw)-36 b(erte)433 b Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))433 b Fx(jeder)g(F)-108 b(unktion)433 b Ft(f)576
b Fx(mit)433 b(der)g(Ableitungsfunktion)1770 70513 y
Ft(f)2553 70031 y Fp(0)3298 70513 y Fx(sind)g(f\374r)g
Ft(x)369 b Fu(2)g Fv([)8 b Ft(x)11581 70712 y Fq(3)12107
70513 y Fv(;)221 b Ft(x)13428 70712 y Fq(5)13954 70513
y Fv(])434 b Fx(stets)f(p)36 b(ositiv.)p 42912 71790
V 45277 71790 V 1062 71835 44260 45 v 47992 10102 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 12094 a Fr(AN)369 b(3.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 75863
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(42)p 0 TeXcolorgray
eop end
%%Page: 43 43
TeXDict begin 43 42 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.2)f(-)h(4)f(Gleic)-60
b(he)717 b(Ableitungsfunktion)712 b(-)718 b(O)-60 b(A)718
b(-)f(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(57.)p 0
TeXcolorgray 651 w(In)433 b(der)g(un)-36 b(ten)433 b(stehenden)f
(Abbildung)g(ist)i(der)f(Graph)f(der)h(F)-108 b(unktion)433
b Ft(g)481 b Fx(dargestellt.)921 7346 y(Zeic)-36 b(hen)834
b(im)h(v)-36 b(orgegeb)36 b(enen)835 b(K)-36 b(o)36 b(ordinatensystem)
835 b(den)f(Graphen)f(einer)h(F)-108 b(unktion)921 9338
y Ft(f)363 b Fv(\()p Ft(f)511 b Fu(6)p Fv(=)369 b Ft(g)48
b Fv(\))432 b Fx(ein,)i(die)g(die)f(gleic)-36 b(he)435
b(Ableitungsfunktion)e(wie)h(die)g(F)-108 b(unktion)433
b(g)h(hat!)p 0 TeXcolorgray 0 TeXcolorgray 5417 52857
a
 currentpoint currentpoint translate 1.34435 1.34435 scale neg exch
neg exch translate
 5417 52857 a 5417 52857 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 241.8014 a add def
/d 0.0 a add neg def /h 262.69162 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 52857 a 18785 47976
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 121.0392 0.0 -120.7622 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 218.595 0.0 -44.09662   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 121.0392  0 -120.7622  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -120.7622
 121.0392  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-44.09662  def /maxTickline 218.595  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 218.595
0.0 -44.09662   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 121.0392
0.0 -120.7622 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 218.595  0 -44.09662  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -44.09662
 218.595  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-120.7622  def /maxTickline 121.0392  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 218.595
0.0 -44.09662   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 121.0392
0.0 -120.7622 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 17540 45112 a Fq(1)17540 41962
y(2)17540 38812 y(3)17540 35663 y(4)17540 32513 y(5)17540
29363 y(6)17540 26214 y(7)16808 51365 y Fp(\000)p Fq(1)21699
49321 y(1)2680 b(2)f(3)h(4)-16584 b Fp(\000)p Fq(1)-4351
b Fp(\000)p Fq(2)f Fp(\000)p Fq(3)g Fp(\000)p Fq(4)18785
47976 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18785 47976 a 18785 47976 a
tx@Dict begin  { 121.0392 218.595 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 18785 47976 a 18785
47976 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18785 47976 a 18442 48262 a Fx(x)18785 47976
y
tx@Dict begin  PutEnd  end
 18785 47976 a 18785 47976 a
tx@Dict begin  PutEnd  end
 18785 47976 a 18785 47976
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18785 47976 a 18785 47976 a
tx@Dict begin  { 0.0 0.0 pop 121.0392 218.595 exch pop } PutCoor PutBegin
 end
 18785 47976 a 18785 47976
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 18785 47976 a 17737 48308 a Fx(f\(x\))18785 47976 y
tx@Dict begin  PutEnd  end

18785 47976 a 18785 47976 a
tx@Dict begin  PutEnd  end
 18785 47976 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.2443125541125575 def /x1 4.254042424242424
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)+2.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.2443125541125575
def /x1 4.254042424242424 def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)+3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb 18785 47976
a
tx@Dict begin  { -66.4482 171.07028 } PutCoor PutBegin  end
 18785 47976 a -172 x Fl(f)18785 47976 y
tx@Dict begin  PutEnd  end
 18785 47976
a 1 0 0 TeXcolorrgb 0 TeXcolorgray 32183 52857 a
currentpoint initclip moveto
 32183
52857 a 5417 52857 a
 currentpoint currentpoint translate 1 1.34435 div 1 1.34435 div scale
neg exch neg exch translate
 5417 52857 a 1 0 0 TeXcolorrgb 921
58833 a Fx(Die)604 b(A)-36 b(ufgab)36 b(e)603 b(gilt)h(n)-36
b(ur)602 b(dann)h(als)h(ric)-36 b(h)g(tig)603 b(gel\366st,)h(w)-36
b(enn)603 b(der)g(Graph)f(v)-36 b(on)603 b Ft(f)745 b
Fx(erk)-36 b(enn-)921 60825 y(bar)484 b(durc)-36 b(h)483
b(eine)i(V)-108 b(ersc)-36 b(hiebung)483 b(in)i(Ric)-36
b(h)g(tung)484 b(der)g(y-A)-36 b(c)g(hse)484 b(aus)h(dem)f(Graphen)f(v)
-36 b(on)485 b Ft(g)921 62817 y Fx(en)-36 b(tsteh)g(t.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 66293 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(43)p
0 TeXcolorgray eop end
%%Page: 44 44
TeXDict begin 44 43 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.2)f(-)h(5)f(Stammfunktion)e
(erk)-60 b(ennen)715 b(-)j(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(58.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(sind)g(die)h(F)-108 b(unktion)432 b Ft(f)576 b Fx(und)432
b Ft(g)481 b Fx(und)433 b(die)g(K)-36 b(onstan)g(te)433
b Ft(a)369 b Fu(2)g Fj(R)35741 4318 y Fq(+)36528 4800
y Fx(.)921 7346 y(Es)434 b(gilt)g(der)f(Zusammenhang)g
Ft(g)17305 6864 y Fp(0)17615 7346 y Fv(\()p Ft(x)p Fv(\))368
b(=)h Ft(f)21898 6864 y Fp(0)22209 7346 y Fv(\()p Ft(x)p
Fv(\))p Fx(.)921 9891 y(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p 10927
10858 24531 45 v 10927 13928 45 3071 v 11635 12725 a
Ft(f)576 b Fx(ist)433 b(eine)h(Stammfunktion)f(v)-36
b(on)434 b Ft(g)48 b Fx(.)p 33048 13928 V 35413 13928
V 10927 13973 24531 45 v 10927 17043 45 3071 v 11635
15840 a Ft(g)481 b Fx(ist)434 b(eine)g(Stammfunktion)f(v)-36
b(on)434 b Ft(f)142 b Fx(.)p 33048 17043 V 1 0 0 TeXcolorrgb
3679 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
35413 17043 V 10927 17088 24531 45 v 10927 20158 45 3071
v 11635 18955 a Ft(g)343 b Fu(\000)295 b Ft(a)434 b Fx(ist)f(eine)h
(Stammfunktion)f(v)-36 b(on)434 b Ft(f)142 b Fx(.)p 33048
20158 V 1 0 0 TeXcolorrgb 1373 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 35413 20158 V 10927
20202 24531 45 v 10927 23273 45 3071 v 11635 22070 a
Ft(f)437 b Fv(+)295 b Ft(a)433 b Fx(ist)h(eine)g(Stammfunktion)f(v)-36
b(on)434 b Ft(g)48 b Fx(.)p 33048 23273 V 35413 23273
V 10927 23317 24531 45 v 10927 26388 45 3071 v 11635
25184 a Ft(a)295 b Fu(\001)g Ft(g)481 b Fx(ist)434 b(eine)g
(Stammfunktion)f(v)-36 b(on)434 b Ft(f)142 b Fx(.)p 33048
26388 V 35413 26388 V 10927 26432 24531 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 30460 54804 45 v -2331 35762 a Fy(AN)965 b(3.2)e(-)i(6)f(Eigensc)
-60 b(haften)962 b(der)i(Ableitungsfunktion)959 b(-)964
b(O)-60 b(A)965 b(-)-2331 38784 y(BIFIE)718 b(-)g(K)-60
b(omp)60 b(etenzc)-60 b(hec)g(k)717 b(2016)p 0 TeXcolorgray
-1391 42091 a Fx(59.)p 0 TeXcolorgray 651 w(In)327 b(der)g(nac)-36
b(hstehenden)326 b(T)-108 b(ab)36 b(elle)328 b(sind)f(F)-108
b(unktionsw)-36 b(erte)327 b(einer)g(P)-36 b(olynomfunktion)329
b Ft(f)469 b Fx(drit-)921 44083 y(ten)433 b(Grades)g(so)-36
b(wie)434 b(ihrer)g(Ableitungsfunktionen)f Ft(f)27531
43601 y Fp(0)28275 44083 y Fx(und)f Ft(f)31659 43601
y Fp(00)32659 44083 y Fx(angegeb)36 b(en.)p 0 TeXcolorgray
0 TeXcolorgray 14576 46489 17667 45 v 14576 48481 45
1992 v 16464 47883 a Ft(x)p 19048 48481 V 3095 w Fx(0)p
22155 48481 V 2132 w(1)p 24611 48481 V 1806 w(2)p 27068
48481 V 1807 w(3)p 29524 48481 V 1915 w(4)p 32197 48481
V 14576 48525 17667 45 v 14576 50517 45 1992 v 15567
49919 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p 19048 50517
V 1980 w Fx(-2)p 22155 50517 V 1915 w(2)p 24611 50517
V 1806 w(0)p 27068 50517 V 1590 w(-2)p 29524 50517 V
1698 w(2)p 32197 50517 V 14576 50561 17667 45 v 14576
52553 45 1992 v 15412 51956 a Ft(f)16195 51473 y Fp(0)16505
51956 y Fv(\()p Ft(x)p Fv(\))p 19048 52553 V 2042 w Fx(9)p
22155 52553 V 2132 w(0)p 24611 52553 V 1590 w(-3)p 27068
52553 V 1589 w(0)p 29524 52553 V 1915 w(9)p 32197 52553
V 14576 52597 17667 45 v 14576 54589 45 1992 v 15284
53992 a Ft(f)16067 53510 y Fp(00)16633 53992 y Fv(\()p
Ft(x)p Fv(\))p 19048 54589 V 1372 w Fx(-12)p 22155 54589
V 1373 w(-6)p 24611 54589 V 1589 w(0)p 27068 54589 V
1807 w(6)p 29524 54589 V 1590 w(12)p 32197 54589 V 14576
54634 17667 45 v 921 57733 a(Gib)453 b(an,)h(an)g(w)-36
b(elc)g(hen)453 b(Stellen)h(des)f(In)-36 b(terv)-72 b(alls)455
b Fv(\()o(0;)221 b(4\))455 b Fx(die)f(F)-108 b(unktion)453
b Ft(f)596 b Fx(jedenfalls)454 b(lokale)921 59725 y(Extremstellen)434
b(b)36 b(esitzt.)p 1 0 0 TeXcolorrgb 921 62270 a(Die)434
b(Stellen)g Ft(x)8290 62469 y Fq(1)9184 62270 y Fv(=)369
b(1)434 b Fx(und)e Ft(x)14989 62469 y Fq(2)15884 62270
y Fv(=)369 b(3)434 b Fx(sind)f(lokale)i(Extremstellen)f(der)f(F)-108
b(unktion)433 b Ft(f)142 b Fx(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 42091 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 44083 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66004 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(44)p 0 TeXcolorgray
eop end
%%Page: 45 45
TeXDict begin 45 44 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)951 b(3.2)g(-)g(7)g(F)-179
b(unktionen)948 b(und)h(Ableitungsfunktionen)c(-)952
b(ZO)f(-)-2331 4515 y(Matura)717 b(2015/16)g(-)h(Haupttermin)p
0 TeXcolorgray -1391 7823 a Fx(60.)p 0 TeXcolorgray 651
w(Links)536 b(sind)f(die)h(Graphen)e(v)-36 b(on)536 b(vier)g(P)-36
b(olynomfunktionen)537 b Fv(\()p Ft(f)33047 8022 y Fq(1)33572
7823 y Ft(;)221 b(f)34795 8022 y Fq(2)35322 7823 y Ft(;)g(f)36545
8022 y Fq(3)37072 7823 y Ft(;)g(f)38295 8022 y Fq(4)38821
7823 y Fv(\))536 b Fx(abgebildet,)921 9815 y(rec)-36
b(h)g(ts)433 b(die)g(Graphen)f(sec)-36 b(hs)434 b(w)-36
b(eiterer)433 b(F)-108 b(unktionen)433 b Fv(\()p Ft(g)28365
10014 y Fq(1)28890 9815 y Ft(;)221 b(g)30095 10014 y
Fq(2)30621 9815 y Ft(;)g(g)31826 10014 y Fq(3)32353 9815
y Ft(;)g(g)33558 10014 y Fq(4)34084 9815 y Ft(;)g(g)35289
10014 y Fq(5)35815 9815 y Ft(;)g(g)37020 10014 y Fq(6)37547
9815 y Fv(\))p Fx(.)921 12360 y(Ordnen)465 b(Sie)i(den)g(P)-36
b(olynomfunktionen)468 b Ft(f)22453 12559 y Fq(1)23445
12360 y Fx(bis)f Ft(f)26150 12559 y Fq(4)27143 12360
y Fx(ihre)g(jew)-36 b(eilige)469 b(Ableitungsfunktion)921
14352 y(aus)434 b(den)e(F)-108 b(unktionen)433 b Ft(g)13167
14551 y Fq(1)14126 14352 y Fx(bis)h Ft(g)16780 14551
y Fq(6)17739 14352 y Fx(\(aus)f(A)h(bis)f(F\))g(zu.)p
0 TeXcolorgray 0 TeXcolorgray 7122 16022 9222 45 v 16344
16022 4523 45 v 7122 28762 45 12740 v 7831 27817 a
 currentpoint currentpoint translate 0.43938 0.43938 scale neg exch
neg exch translate
 7831
27817 a 7831 27817 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7831 27817 a 16146 23659 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14901 20795 a Fq(1)14900 17645 y(2)14900 14496 y(3)14900
11346 y(4)14900 8197 y(5)14900 5047 y(6)14169 27048 y
Fp(\000)p Fq(1)19060 25005 y(1)2680 b(2)-10285 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)16146 23659 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16146 23659
a 16146 23659 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16146 23659 a 16146 23659 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16146 23659
a 15776 23945 a Ft(x)16146 23659 y
tx@Dict begin  PutEnd  end
 16146 23659 a 16146
23659 a
tx@Dict begin  PutEnd  end
 16146 23659 a 16146 23659 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16146 23659 a 16146
23659 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 16146 23659 a 16146 23659 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16146 23659 a 14687
23991 a Ft(f)15328 24190 y Fq(1)15854 23991 y Fv(\()p
Ft(x)p Fv(\))16146 23659 y
tx@Dict begin  PutEnd  end
 16146 23659 a 16146 23659
a
tx@Dict begin  PutEnd  end
 16146 23659 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (x^(2.0)+1.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
16146 23659 a
tx@Dict begin  { -52.35294 152.50671 } PutCoor PutBegin  end
 16146 23659 a -172 x Fl(f)16598 23610 y
Fk(1)16146 23659 y
tx@Dict begin  PutEnd  end
 16146 23659 a 25595 27817 a
currentpoint initclip moveto
 25595
27817 a 7831 27817 a
 currentpoint currentpoint translate 1 0.43938 div 1 0.43938 div scale
neg exch neg exch translate
 7831 27817 a 16300 28762 45 12740
v 0.9 TeXcolorgray 16344 28762 4478 12740 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18141 22850 a Fx(E)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 20822 28762 45 12740
v 7122 28806 9222 45 v 16344 28806 4523 45 v 7122 42463
45 13658 v 7831 41518 a
 currentpoint currentpoint translate 0.47655 0.47655 scale neg exch
neg exch translate
 7831 41518 a 7831 41518 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 147.95416 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7831
41518 a 16146 37361 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 72.83894 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 72.83894  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 72.83894  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 72.83894
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 72.83894  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 72.83894
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14901 34496 a
Fq(1)14900 31347 y(2)14900 28197 y(3)14900 25048 y(4)14900
21898 y(5)14900 18748 y(6)14169 40749 y Fp(\000)p Fq(1)19060
38706 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)16146 37361 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16146 37361 a 16146 37361 a
tx@Dict begin  { 72.83894 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16146
37361 a 16146 37361 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16146 37361 a 15776 37647 a Ft(x)16146
37361 y
tx@Dict begin  PutEnd  end
 16146 37361 a 16146 37361 a
tx@Dict begin  PutEnd  end
 16146 37361 a 16146
37361 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16146 37361 a 16146 37361 a
tx@Dict begin  { 0.0 0.0 pop 72.83894 185.51201 exch pop } PutCoor
PutBegin  end
 16146 37361 a 16146
37361 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16146 37361 a 14687 37693 a Ft(f)15328 37892
y Fq(2)15854 37693 y Fv(\()p Ft(x)p Fv(\))16146 37361
y
tx@Dict begin  PutEnd  end
 16146 37361 a 16146 37361 a
tx@Dict begin  PutEnd  end
 16146 37361 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (x^(3.0)+x+3.0)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 16146 37361 a
tx@Dict begin  { 36.98865 152.50671 } PutCoor PutBegin  end
 16146 37361 a
-172 x Fl(f)16598 37312 y Fk(2)16146 37361 y
tx@Dict begin  PutEnd  end
 16146 37361
a 24209 41518 a
currentpoint initclip moveto
 24209 41518 a 7831 41518 a
 currentpoint currentpoint translate 1 0.47655 div 1 0.47655 div scale
neg exch neg exch translate
 7831 41518
a 16300 42463 45 13658 v 0.9 TeXcolorgray 16344 42463
4478 13658 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18072 36092
a Fx(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
20822 42463 45 13658 v 7122 42507 9222 45 v 16344 42507
4523 45 v 7122 55247 45 12740 v 7831 54302 a
 currentpoint currentpoint translate 0.43938 0.43938 scale neg exch
neg exch translate
 7831 54302
a 7831 54302 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7831 54302 a 16146 50144 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14901 47280 a Fq(1)14900 44130 y(2)14900 40981 y(3)14900
37831 y(4)14900 34681 y(5)14900 31532 y(6)14169 53533
y Fp(\000)p Fq(1)19060 51490 y(1)2680 b(2)-10285 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)16146 50144 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16146 50144
a 16146 50144 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16146 50144 a 16146 50144 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16146 50144
a 15776 50430 a Ft(x)16146 50144 y
tx@Dict begin  PutEnd  end
 16146 50144 a 16146
50144 a
tx@Dict begin  PutEnd  end
 16146 50144 a 16146 50144 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16146 50144 a 16146
50144 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 16146 50144 a 16146 50144 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16146 50144 a 14687
50476 a Ft(f)15328 50675 y Fq(3)15854 50476 y Fv(\()p
Ft(x)p Fv(\))16146 50144 y
tx@Dict begin  PutEnd  end
 16146 50144 a 16146 50144
a
tx@Dict begin  PutEnd  end
 16146 50144 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (x^4-2*x^2+2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
16146 50144 a
tx@Dict begin  { -48.36957 152.50671 } PutCoor PutBegin  end
 16146 50144 a -172 x Fl(f)16598 50095 y
Fk(3)16146 50144 y
tx@Dict begin  PutEnd  end
 16146 50144 a 25595 54302 a
currentpoint initclip moveto
 25595
54302 a 7831 54302 a
 currentpoint currentpoint translate 1 0.43938 div 1 0.43938 div scale
neg exch neg exch translate
 7831 54302 a 16300 55247 45 12740
v 0.9 TeXcolorgray 16344 55247 4478 12740 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 18159 49334 a Fx(F)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 20822 55247 45 12740
v 7122 55291 9222 45 v 16344 55291 4523 45 v 7122 68030
45 12740 v 7831 67085 a
 currentpoint currentpoint translate 0.43938 0.43938 scale neg exch
neg exch translate
 7831 67085 a 7831 67085 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7831
67085 a 16146 62928 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14901 60063 a
Fq(1)14900 56914 y(2)14900 53764 y(3)14900 50615 y(4)14900
47465 y(5)14900 44315 y(6)14169 66317 y Fp(\000)p Fq(1)19060
64273 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)16146 62928 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16146 62928 a 16146 62928 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16146
62928 a 16146 62928 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16146 62928 a 15776 63214 a Ft(x)16146
62928 y
tx@Dict begin  PutEnd  end
 16146 62928 a 16146 62928 a
tx@Dict begin  PutEnd  end
 16146 62928 a 16146
62928 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16146 62928 a 16146 62928 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 16146 62928 a 16146
62928 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16146 62928 a 14687 63260 a Ft(f)15328 63459
y Fq(4)15854 63260 y Fv(\()p Ft(x)p Fv(\))16146 62928
y
tx@Dict begin  PutEnd  end
 16146 62928 a 16146 62928 a
tx@Dict begin  PutEnd  end
 16146 62928 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (-x^(3.0)+3*x^2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 16146 62928 a
tx@Dict begin  { -48.36957 152.50671 } PutCoor PutBegin  end
 16146 62928 a
-172 x Fl(f)16598 62879 y Fk(4)16146 62928 y
tx@Dict begin  PutEnd  end
 16146 62928
a 25595 67085 a
currentpoint initclip moveto
 25595 67085 a 7831 67085 a
 currentpoint currentpoint translate 1 0.43938 div 1 0.43938 div scale
neg exch neg exch translate
 7831 67085
a 16300 68030 45 12740 v 0.9 TeXcolorgray 16344 68030
4478 12740 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 18087 62118
a Fx(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
20822 68030 45 12740 v 7122 68074 9222 45 v 16344 68074
4523 45 v 0 TeXcolorgray 0 TeXcolorgray 26153 16022 4567
45 v 30720 16022 6528 45 v 26153 25077 45 9056 v 0.92
TeXcolorgray 26197 25077 4478 9056 v 0 TeXcolorgray 27925
21007 a(A)p 30675 25077 45 9056 v 31384 24133 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384
24133 a 31384 24133 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 24133 a 39699 19975 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
38454 17111 a Fq(1)38453 13961 y(2)38453 10812 y(3)38453
7662 y(4)38453 4512 y(5)38453 1363 y(6)37722 23364 y
Fp(\000)p Fq(1)42613 21321 y(1)2680 b(2)-10285 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)39699 19975 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 19975
a 39699 19975 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699 19975 a 39699 19975 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 19975
a 39329 20261 a Ft(x)39699 19975 y
tx@Dict begin  PutEnd  end
 39699 19975 a 39699
19975 a
tx@Dict begin  PutEnd  end
 39699 19975 a 39699 19975 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 19975 a 39699
19975 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 19975 a 39699 19975 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 19975 a 38249
20307 a Ft(g)38872 20506 y Fq(1)39398 20307 y Fv(\()p
Ft(x)p Fv(\))39699 19975 y
tx@Dict begin  PutEnd  end
 39699 19975 a 39699 19975
a
tx@Dict begin  PutEnd  end
 39699 19975 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (3*x^(2.0)+1)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
39699 19975 a
tx@Dict begin  { -48.36957 152.50671 } PutCoor PutBegin  end
 39699 19975 a -172 x Fl(g)40147 19926 y
Fk(1)39699 19975 y
tx@Dict begin  PutEnd  end
 39699 19975 a 49147 24133 a
currentpoint initclip moveto
 49147
24133 a 31384 24133 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 24133 a 37203 25077 45 9056
v 26153 25122 4567 45 v 30720 25122 6528 45 v 26153 34177
45 9056 v 0.92 TeXcolorgray 26197 34177 4478 9056 v 0
TeXcolorgray 27976 30106 a Fx(B)p 30675 34177 45 9056
v 31384 33232 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384 33232 a 31384 33232 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 33232
a 39699 29074 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38454 26210 a
Fq(1)38453 23061 y(2)38453 19911 y(3)38453 16761 y(4)38453
13612 y(5)38453 10462 y(6)37722 32463 y Fp(\000)p Fq(1)42613
30420 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)39699 29074 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 29074 a 39699 29074 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699
29074 a 39699 29074 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 29074 a 39329 29360 a Ft(x)39699
29074 y
tx@Dict begin  PutEnd  end
 39699 29074 a 39699 29074 a
tx@Dict begin  PutEnd  end
 39699 29074 a 39699
29074 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 29074 a 39699 29074 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 29074 a 39699
29074 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 29074 a 38249 29406 a Ft(g)38872 29605
y Fq(2)39398 29406 y Fv(\()p Ft(x)p Fv(\))39699 29074
y
tx@Dict begin  PutEnd  end
 39699 29074 a 39699 29074 a
tx@Dict begin  PutEnd  end
 39699 29074 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (-3*x^(2.0)+6*x+2)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 39699 29074 a
tx@Dict begin  { 45.52455 128.03734 } PutCoor PutBegin  end
 39699 29074 a
-172 x Fl(g)40147 29025 y Fk(2)39699 29074 y
tx@Dict begin  PutEnd  end
 39699 29074
a 49147 33232 a
currentpoint initclip moveto
 49147 33232 a 31384 33232 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 33232
a 37203 34177 45 9056 v 26153 34221 4567 45 v 30720 34221
6528 45 v 26153 43715 45 9494 v 0.92 TeXcolorgray 26197
43715 4478 9494 v 0 TeXcolorgray 27967 39425 a Fx(C)p
30675 43715 45 9494 v 31384 42770 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384 42770 a 31384
42770 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 236.72702 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 42770 a 39699 37101 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -51.21501   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.21501  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -51.21501   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -51.21501  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -51.21501
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -51.21501   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38454 34236 a
Fq(1)38453 31087 y(2)38453 27937 y(3)38453 24788 y(4)38453
21638 y(5)38453 18488 y(6)37722 40489 y Fp(\000)p Fq(1)42613
38446 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)39699 37101 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 37101 a 39699 37101 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699
37101 a 39699 37101 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 37101 a 39329 37387 a Ft(x)39699
37101 y
tx@Dict begin  PutEnd  end
 39699 37101 a 39699 37101 a
tx@Dict begin  PutEnd  end
 39699 37101 a 39699
37101 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 37101 a 39699 37101 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 37101 a 39699
37101 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 37101 a 38249 37433 a Ft(g)38872 37632
y Fq(3)39398 37433 y Fv(\()p Ft(x)p Fv(\))39699 37101
y
tx@Dict begin  PutEnd  end
 39699 37101 a 39699 37101 a
tx@Dict begin  PutEnd  end
 39699 37101 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (-4*x^3+4*x)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 39699 37101 a
tx@Dict begin  { -52.35294 152.50671 } PutCoor PutBegin  end
 39699 37101 a
-172 x Fl(g)40147 37052 y Fk(3)39699 37101 y
tx@Dict begin  PutEnd  end
 39699 37101
a 49147 42770 a
currentpoint initclip moveto
 49147 42770 a 31384 42770 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 42770
a 37203 43715 45 9494 v 26153 43759 4567 45 v 30720 43759
6528 45 v 26153 52814 45 9056 v 0.92 TeXcolorgray 26197
52814 4478 9056 v 0 TeXcolorgray 27940 48744 a Fx(D)p
30675 52814 45 9056 v 31384 51869 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384 51869 a 31384
51869 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 51869 a 39699 47712 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38454 44847 a
Fq(1)38453 41698 y(2)38453 38548 y(3)38453 35399 y(4)38453
32249 y(5)38453 29099 y(6)37722 51101 y Fp(\000)p Fq(1)42613
49057 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)39699 47712 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 47712 a 39699 47712 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699
47712 a 39699 47712 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 47712 a 39329 47998 a Ft(x)39699
47712 y
tx@Dict begin  PutEnd  end
 39699 47712 a 39699 47712 a
tx@Dict begin  PutEnd  end
 39699 47712 a 39699
47712 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 47712 a 39699 47712 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 47712 a 39699
47712 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 47712 a 38249 48044 a Ft(g)38872 48243
y Fq(4)39398 48044 y Fv(\()p Ft(x)p Fv(\))39699 47712
y
tx@Dict begin  PutEnd  end
 39699 47712 a 39699 47712 a
tx@Dict begin  PutEnd  end
 39699 47712 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (-3*x^(2.0)+6*x)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 39699 47712 a
tx@Dict begin  { 42.67911 73.9773 } PutCoor PutBegin  end
 39699 47712 a
-172 x Fl(g)40147 47663 y Fk(4)39699 47712 y
tx@Dict begin  PutEnd  end
 39699 47712
a 49147 51869 a
currentpoint initclip moveto
 49147 51869 a 31384 51869 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 51869
a 37203 52814 45 9056 v 26153 52858 4567 45 v 30720 52858
6528 45 v 26153 61913 45 9056 v 0.92 TeXcolorgray 26197
61913 4478 9056 v 0 TeXcolorgray 27994 57843 a Fx(E)p
30675 61913 45 9056 v 31384 60969 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384 60969 a 31384
60969 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 223.06982 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 60969 a 39699 56811 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -37.55782   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-37.55782  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -37.55782  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -37.55782
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -37.55782   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38454 53947 a
Fq(1)38453 50797 y(2)38453 47648 y(3)38453 44498 y(4)38453
41348 y(5)38453 38199 y(6)37722 60200 y Fp(\000)p Fq(1)42613
58157 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)39699 56811 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 56811 a 39699 56811 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699
56811 a 39699 56811 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 56811 a 39329 57097 a Ft(x)39699
56811 y
tx@Dict begin  PutEnd  end
 39699 56811 a 39699 56811 a
tx@Dict begin  PutEnd  end
 39699 56811 a 39699
56811 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 56811 a 39699 56811 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 56811 a 39699
56811 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 56811 a 38249 57143 a Ft(g)38872 57342
y Fq(5)39398 57143 y Fv(\()p Ft(x)p Fv(\))39699 56811
y
tx@Dict begin  PutEnd  end
 39699 56811 a 39699 56811 a
tx@Dict begin  PutEnd  end
 39699 56811 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (2*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 39699 56811 a
tx@Dict begin  { 42.67911 67.14848 } PutCoor PutBegin  end
 39699 56811 a
-172 x Fl(g)40147 56762 y Fk(5)39699 56811 y
tx@Dict begin  PutEnd  end
 39699 56811
a 49147 60969 a
currentpoint initclip moveto
 49147 60969 a 31384 60969 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 60969
a 37203 61913 45 9056 v 26153 61958 4567 45 v 30720 61958
6528 45 v 26153 71452 45 9494 v 0.92 TeXcolorgray 26197
71452 4478 9494 v 0 TeXcolorgray 28012 67162 a Fx(F)p
30675 71452 45 9494 v 31384 70507 a
 currentpoint currentpoint translate 0.29018 0.29018 scale neg exch
neg exch translate
 31384 70507 a 31384
70507 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 160.47345 a add def
/d 0.0 a add neg def /h 236.72702 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 31384 70507 a 39699 64837 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 85.35823 0.0 -75.11522 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.51201 0.0 -51.21501   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 85.35823  0 -75.11522  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -75.11522
 85.35823  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-51.21501  def /maxTickline 185.51201  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -51.21501   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.51201  0 -51.21501  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -51.21501
 185.51201  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-75.11522  def /maxTickline 85.35823  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.51201
0.0 -51.21501   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 85.35823
0.0 -75.11522 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 38454 61973 a
Fq(1)38453 58823 y(2)38453 55674 y(3)38453 52524 y(4)38453
49375 y(5)38453 46225 y(6)37722 68226 y Fp(\000)p Fq(1)42613
66183 y(1)2680 b(2)-10285 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)39699 64837 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 39699 64837 a 39699 64837 a
tx@Dict begin  { 85.35823 185.51201 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 39699
64837 a 39699 64837 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 39699 64837 a 39329 65123 a Ft(x)39699
64837 y
tx@Dict begin  PutEnd  end
 39699 64837 a 39699 64837 a
tx@Dict begin  PutEnd  end
 39699 64837 a 39699
64837 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 39699 64837 a 39699 64837 a
tx@Dict begin  { 0.0 0.0 pop 85.35823 185.51201 exch pop } PutCoor
PutBegin  end
 39699 64837 a 39699
64837 a
tx@Dict begin  { 5.0 26.19203 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 39699 64837 a 38249 65169 a Ft(g)38872 65368
y Fq(6)39398 65169 y Fv(\()p Ft(x)p Fv(\))39699 64837
y
tx@Dict begin  PutEnd  end
 39699 64837 a 39699 64837 a
tx@Dict begin  PutEnd  end
 39699 64837 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.640000000000001 def /x1 3 def
/dx x1 x sub 199 div def /F@pstplot (4*x^3-4*x)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 39699 64837 a
tx@Dict begin  { 42.67911 71.13185 } PutCoor PutBegin  end
 39699 64837 a
-172 x Fl(g)40147 64788 y Fk(6)39699 64837 y
tx@Dict begin  PutEnd  end
 39699 64837
a 49147 70507 a
currentpoint initclip moveto
 49147 70507 a 31384 70507 a
 currentpoint currentpoint translate 1 0.29018 div 1 0.29018 div scale
neg exch neg exch translate
 31384 70507
a 37203 71452 45 9494 v 26153 71496 4567 45 v 30720 71496
6528 45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
9815 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 77863 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(45)p 0 TeXcolorgray eop end
%%Page: 46 46
TeXDict begin 46 45 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)837 b(3.2)g(-)g(8)g(Zusammenhang)e
(zwisc)-60 b(hen)837 b(F)-179 b(unktion)834 b(und)i(Ablei-)-2331
4515 y(tungsfunktion)714 b(-)j(L)-179 b(T)717 b(-)g(Matura)h(2014/15)f
(-)g(Haupttermin)p 0 TeXcolorgray -1391 7823 a Fx(61.)p
0 TeXcolorgray 651 w(In)433 b(der)g(folgenden)h(Abbildung)f(ist)h(der)f
(Graph)f(einer)i(P)-36 b(olynomfunktion)434 b Ft(f)576
b Fx(dargestellt:)p 0 TeXcolorgray 0 TeXcolorgray 11040
37833 a
 currentpoint currentpoint translate 1.09457 1.09457 scale neg exch
neg exch translate
 11040 37833 a 11474 37833 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 196.32419 a add def
/d 0.0 a add neg def /h 228.19067 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 11474 37833 a 22120
26872 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 100.15378 0.0 -96.17041 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 129.17526 0.0 -99.01541   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 100.15378  0 -96.17041  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -96.17041
 100.15378  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.01541  def /maxTickline 129.17526  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.17526
0.0 -99.01541   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 100.15378
0.0 -96.17041 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 129.17526  0 -99.01541  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.01541
 129.17526  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.17041  def /maxTickline 100.15378  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 129.17526
0.0 -99.01541   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 100.15378
0.0 -96.17041 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20875 24008 a Fq(1)20874 20858
y(2)20874 17709 y(3)20874 14559 y(4)20142 30261 y Fp(\000)p
Fq(1)20142 33411 y Fp(\000)p Fq(2)20142 36560 y Fp(\000)p
Fq(3)25034 28218 y(1)2679 b(2)h(3)-13434 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)22120 26872
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 22120 26872 a 22120 26872 a
tx@Dict begin  { 100.15378 129.17526 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22120 26872 a 22120 26872
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22120 26872 a 21750 27158 a Ft(x)22120 26872 y
tx@Dict begin  PutEnd  end
 22120
26872 a 22120 26872 a
tx@Dict begin  PutEnd  end
 22120 26872 a 22120 26872 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22120
26872 a 22120 26872 a
tx@Dict begin  { 0.0 0.0 pop 100.15378 129.17526 exch pop } PutCoor
PutBegin  end
 22120 26872 a 22120 26872 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22120
26872 a 20853 27204 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))22120
26872 y
tx@Dict begin  PutEnd  end
 22120 26872 a 22120 26872 a
tx@Dict begin  PutEnd  end
 22120 26872 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.3799999999999994 def /x1 3.519999999999997
def /dx x1 x sub 199 div def /F@pstplot (-x^(3.0)+4.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 22120 26872 a
tx@Dict begin  { -63.7343 120.63979 } PutCoor PutBegin  end
 22120 26872 a
-172 x Fl(f)22120 26872 y
tx@Dict begin  PutEnd  end
 22120 26872 a 33206 37833 a
currentpoint initclip moveto

33206 37833 a 11040 37833 a
 currentpoint currentpoint translate 1 1.09457 div 1 1.09457 div scale
neg exch neg exch translate
 11040 37833 a 921 43809 a
Fx(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 45801 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)921
49291 y(Die)776 b(erste)f(Ableitung)h(der)f(F)-108 b(unktion)774
b Ft(f)918 b Fx(ist)p 25861 49291 3150 45 v 29483 49243
a(1)29011 49291 y Fo(\015)p 30605 49291 V 3925 w Fx(,)776
b(und)e(daraus)i(folgt:)p 921 51283 V 4542 51235 a(2)4071
51283 y Fo(\015)p 5665 51283 V 3583 w Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 1664 52656 19496 45 v 1664 55740 45 3085
v 11087 54437 a(1)10615 54485 y Fo(\015)p 21115 55740
V 1664 55784 19496 45 v 1664 59117 45 3334 v 2372 57840
a Fx(im)434 b(In)-36 b(terv)-72 b(all)434 b Fv([)8 b
Fu(\000)p Fv(1;)221 b(1])436 b Fx(negativ)p 18750 59117
V 19459 57783 a Fn(2)p 21115 59117 V 1664 59162 19496
45 v 1664 64298 45 5137 v 2372 61103 a Fx(im)e(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])436
b Fx(gleic)-36 b(h)2372 63095 y(n)g(ull)p 18750 64298
V 19459 62062 a Fn(2)p 21115 64298 V 1664 64342 19496
45 v 1664 67675 45 3334 v 2372 66398 a Fx(im)434 b(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])436
b Fx(p)36 b(ositiv)p 18750 67675 V 1 0 0 TeXcolorrgb
19459 66341 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 21115 67675 V 1664 67719 19496 45 v 0
TeXcolorgray 0 TeXcolorgray 25658 52766 19974 45 v 25658
55851 45 3085 v 35319 54548 a Fx(2)34847 54596 y Fo(\015)p
45586 55851 V 25658 55895 19974 45 v 25658 61031 45 5137
v 26366 57836 a Ft(f)435 b Fx(hat)293 b(im)g(In)-36 b(terv)-72
b(all)293 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])295 b Fx(eine)26366
59828 y(Nullstelle)p 43221 61031 V 43930 58795 a Fn(2)p
45586 61031 V 25658 61075 19974 45 v 25658 66212 45 5137
v 26366 63017 a Ft(f)635 b Fx(ist)494 b(im)f(In)-36 b(terv)-72
b(all)494 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])26366 65008
y Fx(streng)433 b(monoton)h(steigend)p 43221 66212 V
1 0 0 TeXcolorrgb 43930 63976 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45586 66212 V 25658
66256 19974 45 v 25658 71392 45 5137 v 26366 68197 a
Ft(f)h Fx(hat)293 b(im)g(In)-36 b(terv)-72 b(all)293
b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])295 b Fx(eine)26366
70189 y(W)-108 b(endestelle)p 43221 71392 V 43930 69156
a Fn(2)p 45586 71392 V 25658 71436 19974 45 v 47992 7823
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369
b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 75465 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(46)p
0 TeXcolorgray eop end
%%Page: 47 47
TeXDict begin 47 46 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)590 b(3.2)g(-)g(9)g(Stammfunktion)d
(einer)i(k)-60 b(onstan)g(ten)589 b(F)-179 b(unktion)587
b(-)j(O)-60 b(A)-2617 4515 y(-)718 b(Matura)f(2014/15)g(-)g(Neb)60
b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray -1391 7823
a Fx(62.)p 0 TeXcolorgray 651 w(In)610 b(der)f(nac)-36
b(hstehenden)608 b(Abbildung)h(ist)i(der)e(Graph)g(einer)h(k)-36
b(onstan)g(ten)609 b(F)-108 b(unktion)609 b Ft(f)921
9815 y Fx(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray
12165 34325 a
 currentpoint currentpoint translate 0.78137 0.78137 scale neg exch
neg exch translate
 12165 34325 a 12598 34325 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.07468 a add def
/d 0.0 a add neg def /h 256.07468 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12598 34325
a 26771 20152 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -128.03734 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.03734 0.0 -128.03734   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -128.03734  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.03734  0 -128.03734  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25526 17288 a
Fq(1)25526 14138 y(2)25526 10989 y(3)25526 7839 y(4)24794
23541 y Fp(\000)p Fq(1)24794 26690 y Fp(\000)p Fq(2)24794
29840 y Fp(\000)p Fq(3)24794 32990 y Fp(\000)p Fq(4)29686
21498 y(1)2679 b(2)h(3)g(4)-16584 b Fp(\000)p Fq(1)-4352
b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)f Fp(\000)p Fq(4)26771
20152 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26771 20152 a 26771 20152 a
tx@Dict begin  { 128.03734 128.03734 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26771 20152 a 26771
20152 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26771 20152 a 26401 20438 a Ft(x)26771 20152
y
tx@Dict begin  PutEnd  end
 26771 20152 a 26771 20152 a
tx@Dict begin  PutEnd  end
 26771 20152 a 26771 20152
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26771 20152 a 26771 20152 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 128.03734 exch pop } PutCoor
PutBegin  end
 26771 20152 a 26771 20152
a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26771 20152 a 25504 20484 a Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))26771 20152 y
tx@Dict begin  PutEnd  end
 26771 20152 a 26771 20152 a
tx@Dict begin  PutEnd  end
 26771
20152 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.5 def /x1 4.5 def /dx x1 x sub
49 div def /F@pstplot ((-2.-0.*x)/1.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 26771
20152 a
tx@Dict begin  { 86.87428 -42.67911 } PutCoor PutBegin  end
 26771 20152 a 922 x Ft(f)26771 20152 y
tx@Dict begin  PutEnd  end
 26771
20152 a 40945 34325 a
currentpoint initclip moveto
 40945 34325 a 12165 34325 a
 currentpoint currentpoint translate 1 0.78137 div 1 0.78137 div scale
neg exch neg exch translate
 12165
34325 a 921 40302 a Fx(Der)463 b(Graph)f(einer)h(Stammfunktion)g
Ft(F)644 b Fx(v)-36 b(on)463 b Ft(f)605 b Fx(v)-36 b(erl\344uft)464
b(durc)-36 b(h)461 b(den)i(Punkt)f Ft(P)600 b Fv(=)419
b(\(1)p Fu(j)p Fv(1\))p Fx(.)921 42293 y(Zeic)-36 b(hne)418
b(den)g(Graphen)f(der)h(Stammfunktion)h Ft(F)599 b Fx(im)419
b(nac)-36 b(hstehenden)416 b(K)-36 b(o)36 b(ordinatensys-)921
44285 y(tem.)p 0 TeXcolorgray 0 TeXcolorgray 12165 68538
a
 currentpoint currentpoint translate 0.78137 0.78137 scale neg exch
neg exch translate
 12165 68538 a 12598 68538 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 256.07468 a add def
/d 0.0 a add neg def /h 256.07468 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12598 68538 a 26771 54365
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -128.03734 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.03734 0.0 -128.03734   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -128.03734  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.03734  0 -128.03734  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -128.03734
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-128.03734  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.03734
0.0 -128.03734   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -128.03734 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25526 51500 a Fq(1)25526 48351
y(2)25526 45201 y(3)25526 42051 y(4)24794 57753 y Fp(\000)p
Fq(1)24794 60903 y Fp(\000)p Fq(2)24794 64053 y Fp(\000)p
Fq(3)24794 67202 y Fp(\000)p Fq(4)29686 55710 y(1)2679
b(2)h(3)g(4)-16584 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)h Fp(\000)p Fq(3)f Fp(\000)p Fq(4)26771 54365 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

26771 54365 a 26771 54365 a
tx@Dict begin  { 128.03734 128.03734 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26771 54365 a 26771 54365
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26771 54365 a 26401 54650 a Ft(x)26771 54365 y
tx@Dict begin  PutEnd  end
 26771
54365 a 26771 54365 a
tx@Dict begin  PutEnd  end
 26771 54365 a 26771 54365 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26771
54365 a 26771 54365 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 128.03734 exch pop } PutCoor
PutBegin  end
 26771 54365 a 26771 54365 a
tx@Dict begin  { 5.0 25.05383 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26771
54365 a 25385 54697 a Ft(F)181 b Fv(\()p Ft(x)p Fv(\))26771
54365 y
tx@Dict begin  PutEnd  end
 26771 54365 a 26771 54365 a
tx@Dict begin  PutEnd  end
 26771 54365 a 1 0 0
TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -4.5 def /x1 4.5 def
/dx x1 x sub 49 div def /F@pstplot (-2*x+3)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 1 0 0  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 26771
54365 a
tx@Dict begin  { 86.87428 -52.00517 } PutCoor PutBegin  end
 26771 54365 a 1 0 0 TeXcolorrgb 907 x Ft(F)p
1 0 0 TeXcolorrgb 26771 54365 a
tx@Dict begin  PutEnd  end
 26771 54365 a 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 40945 68538 a
currentpoint initclip moveto
 40945
68538 a 12165 68538 a
 currentpoint currentpoint translate 1 0.78137 div 1 0.78137 div scale
neg exch neg exch translate
 12165 68538 a 1 0 0 TeXcolorrgb
921 72522 a Fx(L\366sungssc)-36 b(hl\374ssel:)921 74514
y(Ein)482 b(Punkt)g(ist)g(genau)g(dann)f(zu)h(geb)36
b(en,)482 b(w)-36 b(enn)482 b(die)g(lineare)h(Stammfunktion)f(F)g(durc)
-36 b(h)921 76506 y(den)433 b(Punkt)g Ft(P)983 b Fv(=)803
b(\(1)p Fu(j)p Fv(1\))433 b Fx(v)-36 b(erl\344uft)435
b(und)d(die)i(Steigung)f Fu(\000)p Fv(2)h Fx(hat.)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369
b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
0 TeXcolorgray 24421 81281 a Fx(47)p 0 TeXcolorgray eop
end
%%Page: 48 48
TeXDict begin 48 47 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fy(AN)1038
b(3.2)g(-)g(10)f(Eigensc)-60 b(haften)1037 b(der)g(Ableitungsfunktion)
1032 b(einer)-2331 9817 y(P)-60 b(olynomfunktion)920
b(3.Grades)i(-)g(O)-60 b(A)923 b(-)g(Matura)f(2014/15)g(-)h(Ne-)-2331
12839 y(b)60 b(en)-60 b(termin)716 b(2)p 0 TeXcolorgray
-1391 16146 a Fx(63.)p 0 TeXcolorgray 651 w(Die)477 b(nac)-36
b(hstehende)475 b(Abbildung)h(zeigt)h(den)f(Graphen)g(einer)g(P)-36
b(olynomfunktion)478 b Ft(f)618 b Fx(drit-)921 18138
y(ten)644 b(Grades.)i(Die)f(K)-36 b(o)36 b(ordinaten)645
b(der)f(herv)-36 b(orgehob)36 b(enen)645 b(Punkte)f(des)g(Graphen)g
(der)921 20130 y(F)-108 b(unktion)433 b(sind)g(ganzzahlig.)p
0 TeXcolorgray 0 TeXcolorgray 9915 49907 a
 currentpoint currentpoint translate 1.20683 1.20683 scale neg exch
neg exch translate
 9915 49907
a 9915 49907 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 202.01463 a add def
/d 0.0 a add neg def /h 207.7051 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9915 49907 a 20309 44868 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 108.1205 0.0 -93.89413 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 162.18054 0.0 -45.52455   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 108.1205  0 -93.89413  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -93.89413
 108.1205  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-45.52455  def /maxTickline 162.18054  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.18054
0.0 -45.52455   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.1205
0.0 -93.89413 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 162.18054  0 -45.52455  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -45.52455
 162.18054  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-93.89413  def /maxTickline 108.1205  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.18054
0.0 -45.52455   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 108.1205
0.0 -93.89413 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
19064 42004 a Fq(1)19063 38854 y(2)19063 35704 y(3)19063
32555 y(4)19063 29405 y(5)18331 48257 y Fp(\000)p Fq(1)23223
46213 y(1)2680 b(2)f(3)-13434 b Fp(\000)p Fq(1)-4352
b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)20309 44868 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20309
44868 a 20309 44868 a
tx@Dict begin  { 108.1205 162.18054 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20309 44868 a 20309 44868 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20309
44868 a 19966 45154 a Fx(x)20309 44868 y
tx@Dict begin  PutEnd  end
 20309 44868
a 20309 44868 a
tx@Dict begin  PutEnd  end
 20309 44868 a 20309 44868 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20309 44868
a 20309 44868 a
tx@Dict begin  { 0.0 0.0 pop 108.1205 162.18054 exch pop } PutCoor
PutBegin  end
 20309 44868 a 20309 44868 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20309 44868
a 19261 45200 a Fx(f\(x\))20309 44868 y
tx@Dict begin  PutEnd  end
 20309 44868 a
20309 44868 a
tx@Dict begin  PutEnd  end
 20309 44868 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.300000000000001 def /x1 3.8000000000000016
def /dx x1 x sub 199 div def /F@pstplot (x^(3.0)-3.0*x^(2.0)+4.0) 
tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.45274 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 0.0 113.81097   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 28.45274 56.90549
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 20309 44868 a
tx@Dict begin  { -36.41946 -1.13791 } PutCoor PutBegin  end

20309 44868 a -172 x Fl(f)20309 44868 y
tx@Dict begin  PutEnd  end
 20309 44868 a
32277 49907 a
currentpoint initclip moveto
 32277 49907 a 9915 49907 a
 currentpoint currentpoint translate 1 1.20683 div 1 1.20683 div scale
neg exch neg exch translate
 9915 49907 a
855 53560 a Fx(W)-108 b(elc)-36 b(he)460 b(der)f(folgenden)i(A)-36
b(ussagen)460 b(tre\033en)f(auf)h(die)h(Ableitungsfunktion)f
Ft(f)39771 53078 y Fp(0)40541 53560 y Fx(der)g(F)-108
b(unk-)921 55552 y(tion)434 b Ft(f)575 b Fx(zu?)433 b(Kreuze)h(die)f(b)
36 b(eiden)433 b(zutre\033enden)f(A)-36 b(ussagen)433
b(an.)p 2075 56518 42234 45 v 2075 59736 45 3219 v 2783
58459 a(Die)i(F)-108 b(unktionsw)-36 b(erte)432 b(der)h(F)-108
b(unktion)433 b Ft(f)22848 57977 y Fp(0)23592 58459 y
Fx(sind)g(im)h(In)-36 b(terv)-72 b(all)434 b Fv(\(0;)221
b(2\))435 b Fx(negativ.)p 41899 59736 V 1 0 0 TeXcolorrgb
1374 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
44265 59736 V 2075 59781 42234 45 v 2075 62999 45 3219
v 2783 61722 a Fx(Die)g(F)-108 b(unktion)432 b Ft(f)11478
61240 y Fp(0)12222 61722 y Fx(ist)i(im)g(In)-36 b(terv)-72
b(all)434 b Fv(\()p Fu(\000)p Fv(1;)221 b(0\))435 b Fx(streng)e
(monoton)h(steigend.)p 41899 62999 V 44265 62999 V 2075
63043 42234 45 v 2075 66165 45 3123 v 2783 64962 a(Die)h(F)-108
b(unktion)432 b Ft(f)11478 64480 y Fp(0)12222 64962 y
Fx(hat)i(an)f(der)g(Stelle)h Ft(x)369 b Fv(=)g(2)434
b Fx(eine)f(W)-108 b(endestelle.)p 41899 66165 V 44265
66165 V 2075 66209 42234 45 v 2075 69332 45 3123 v 2783
68128 a(Die)435 b(F)-108 b(unktion)432 b Ft(f)11478 67646
y Fp(0)12222 68128 y Fx(hat)i(an)f(der)g(Stelle)h Ft(x)369
b Fv(=)g(1)434 b Fx(ein)f(lokales)j(Maxim)-36 b(um.)p
41899 69332 V 44265 69332 V 2075 69376 42234 45 v 2075
72498 45 3123 v 2783 71295 a(Die)435 b(F)-108 b(unktion)432
b Ft(f)11478 70813 y Fp(0)12222 71295 y Fx(hat)i(an)f(der)g(Stelle)h
Ft(x)369 b Fv(=)g(0)434 b Fx(eine)f(Nullstelle.)p 41899
72498 V 1 0 0 TeXcolorrgb 42608 71269 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 44265 72498
V 2075 72542 42234 45 v 47992 16146 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 18138 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 76570 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(48)p 0 TeXcolorgray
eop end
%%Page: 49 49
TeXDict begin 49 48 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1051 b(3.2)f(-)h(11)g(Graphen)f(v)-60
b(on)1050 b(Ableitungsfunktionen)1045 b(-)1051 b(MC)g(-)-2331
4515 y(Matura)717 b(2015/16)g(-)h(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fx(64.)p 0 TeXcolorgray
651 w(In)482 b(den)g(un)-36 b(ten)481 b(stehenden)g(Abbildungen)g(sind)
h(jew)-36 b(eils)483 b(die)g(Graphen)e(der)g(F)-108 b(unktionen)921
9815 y Ft(f)142 b Fx(,)434 b Ft(g)481 b Fx(und)432 b
Ft(h)h Fx(dargestellt.)921 14352 y(In)414 b(einer)h(der)f(sec)-36
b(hs)414 b(Abbildungen)f(ist)i Ft(g)462 b Fx(die)415
b(erste)f(Ableitung)g(v)-36 b(on)415 b Ft(f)557 b Fx(und)413
b Ft(h)h Fx(die)h(zw)-36 b(eite)873 16344 y(Ableitung)433
b(v)-36 b(on)434 b Ft(f)142 b Fx(.)434 b(Kreuze)f(diese)h(Abbildung)e
(an.)p 0 TeXcolorgray 0 TeXcolorgray 2800 22256 20905
45 v 2800 37582 45 15326 v 3508 36637 a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 3508 36637 a
3508 36637 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 36637 a 14909 21822 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14909 21822 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14909 21822 a 14909 21822 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14909 21822
a 14909 21822 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14909 21822 a 14539 22108 a Ft(x)14909
21822 y
tx@Dict begin  PutEnd  end
 14909 21822 a 14909 21822 a
tx@Dict begin  PutEnd  end
 14909 21822 a 14909
21822 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14909 21822 a 14909 21822 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 14909 21822 a 14909
21822 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14909 21822 a 10600 22154 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(h)p Fv(\()p Ft(x)p Fv(\))14909 21822 y
tx@Dict begin  PutEnd  end
 14909
21822 a 14909 21822 a
tx@Dict begin  PutEnd  end
 14909 21822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (-.4*x+1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)/5.0-6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (1.0/15.0*x^(3.0)-3.0/5.0*x^(2.0)+3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14909 21822 a
tx@Dict begin  { -85.35823 56.90549 } PutCoor PutBegin  end
 14909 21822 a
923 x Ft(h)14909 21822 y
tx@Dict begin  PutEnd  end
 14909 21822 a 14909 21822 a
tx@Dict begin  { 170.71646 -5.53894 } PutCoor PutBegin  end

14909 21822 a 572 x Ft(g)14909 21822 y
tx@Dict begin  PutEnd  end
 14909 21822 a
14909 21822 a
tx@Dict begin  { 46.96812 76.41203 } PutCoor PutBegin  end
 14909 21822 a 923 x Ft(f)14909 21822 y
tx@Dict begin  PutEnd  end

14909 21822 a 44967 36637 a
currentpoint initclip moveto
 44967 36637 a 3508 36637
a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 3508 36637 a 21295 37582 45 15326 v 23660 37582 V 2800
37626 20905 45 v 2800 52952 45 15326 v 3508 52007 a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 3508
52007 a 3508 52007 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 52007 a 14909 37192 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14909 37192 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14909 37192 a 14909 37192 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14909 37192
a 14909 37192 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14909 37192 a 14539 37478 a Ft(x)14909
37192 y
tx@Dict begin  PutEnd  end
 14909 37192 a 14909 37192 a
tx@Dict begin  PutEnd  end
 14909 37192 a 14909
37192 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14909 37192 a 14909 37192 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 14909 37192 a 14909
37192 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14909 37192 a 10600 37524 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(h)p Fv(\()p Ft(x)p Fv(\))14909 37192 y
tx@Dict begin  PutEnd  end
 14909
37192 a 14909 37192 a
tx@Dict begin  PutEnd  end
 14909 37192 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (.4*x-1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)/5.0-6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (1.0/15.0*x^(3.0)-3.0/5.0*x^(2.0)+3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14909 37192 a
tx@Dict begin  { 149.45418 42.67911 } PutCoor PutBegin  end
 14909 37192 a
923 x Ft(h)14909 37192 y
tx@Dict begin  PutEnd  end
 14909 37192 a 14909 37192 a
tx@Dict begin  { 170.71646 -5.53894 } PutCoor PutBegin  end

14909 37192 a 572 x Ft(g)14909 37192 y
tx@Dict begin  PutEnd  end
 14909 37192 a
14909 37192 a
tx@Dict begin  { 46.96812 76.41203 } PutCoor PutBegin  end
 14909 37192 a 923 x Ft(f)14909 37192 y
tx@Dict begin  PutEnd  end

14909 37192 a 44967 52007 a
currentpoint initclip moveto
 44967 52007 a 3508 52007
a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 3508 52007 a 21295 52952 45 15326 v 1 0 0 TeXcolorrgb
22003 45621 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 23660 52952 V 2800 52996 20905 45 v 2800
68322 45 15326 v 3508 67377 a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 3508 67377 a 3508 67377
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 3508 67377 a 14909 52562 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14909 52562 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14909 52562 a 14909 52562 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14909 52562 a 14909 52562
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14909 52562 a 14539 52848 a Ft(x)14909 52562 y
tx@Dict begin  PutEnd  end
 14909
52562 a 14909 52562 a
tx@Dict begin  PutEnd  end
 14909 52562 a 14909 52562 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14909
52562 a 14909 52562 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 14909 52562 a 14909 52562 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14909
52562 a 10600 52894 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(;)221 b(h)p
Fv(\()p Ft(x)p Fv(\))14909 52562 y
tx@Dict begin  PutEnd  end
 14909 52562 a 14909
52562 a
tx@Dict begin  PutEnd  end
 14909 52562 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (-.4*x+1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)/5.0+6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (1.0/15.0*x^(3.0)-3.0/5.0*x^(2.0)+3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14909 52562 a
tx@Dict begin  { -85.35823 56.90549 } PutCoor PutBegin  end
 14909 52562 a
922 x Ft(h)14909 52562 y
tx@Dict begin  PutEnd  end
 14909 52562 a 14909 52562 a
tx@Dict begin  { 156.49008 36.98865 } PutCoor PutBegin  end

14909 52562 a 572 x Ft(g)14909 52562 y
tx@Dict begin  PutEnd  end
 14909 52562 a
14909 52562 a
tx@Dict begin  { 46.96812 76.41203 } PutCoor PutBegin  end
 14909 52562 a 922 x Ft(f)14909 52562 y
tx@Dict begin  PutEnd  end

14909 52562 a 44967 67377 a
currentpoint initclip moveto
 44967 67377 a 3508 67377
a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 3508 67377 a 21295 68322 45 15326 v 23660 68322 V 2800
68366 20905 45 v 24758 22256 19912 45 v 24758 37582 45
15326 v 25466 36637 a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 25466 36637 a 25466 36637 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466
36637 a 36867 21822 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36867 21822 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

36867 21822 a 36867 21822 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 36867 21822 a 36867 21822
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 36867 21822 a 36497 22108 a Ft(x)36867 21822 y
tx@Dict begin  PutEnd  end
 36867
21822 a 36867 21822 a
tx@Dict begin  PutEnd  end
 36867 21822 a 36867 21822 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36867
21822 a 36867 21822 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 36867 21822 a 36867 21822 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36867
21822 a 32557 22154 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(;)221 b(h)p
Fv(\()p Ft(x)p Fv(\))36867 21822 y
tx@Dict begin  PutEnd  end
 36867 21822 a 36867
21822 a
tx@Dict begin  PutEnd  end
 36867 21822 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (-.4*x+1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)/5.0-6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (-1.0/15.0*x^(3.0)+3.0/5.0*x^(2.0)-3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 36867 21822 a
tx@Dict begin  { -93.89413 68.2864 } PutCoor PutBegin  end
 36867 21822 a
923 x Ft(h)36867 21822 y
tx@Dict begin  PutEnd  end
 36867 21822 a 36867 21822 a
tx@Dict begin  { 170.71646 -5.53894 } PutCoor PutBegin  end

36867 21822 a 572 x Ft(g)36867 21822 y
tx@Dict begin  PutEnd  end
 36867 21822 a
36867 21822 a
tx@Dict begin  { 99.5846 76.41203 } PutCoor PutBegin  end
 36867 21822 a 923 x Ft(f)36867 21822 y
tx@Dict begin  PutEnd  end

36867 21822 a 66925 36637 a
currentpoint initclip moveto
 66925 36637 a 25466 36637
a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 25466 36637 a 43253 37582 45 15326 v 44625 37582 V
24758 37626 19912 45 v 24758 52952 45 15326 v 25466 52007
a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 25466 52007 a 25466 52007 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 52007 a 36867 37192
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36867 37192 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 36867 37192 a
36867 37192 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 36867 37192 a 36867 37192 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 36867 37192
a 36497 37478 a Ft(x)36867 37192 y
tx@Dict begin  PutEnd  end
 36867 37192 a 36867
37192 a
tx@Dict begin  PutEnd  end
 36867 37192 a 36867 37192 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36867 37192 a 36867
37192 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 36867 37192 a 36867 37192 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36867 37192 a 32557
37524 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(;)221 b(g)48
b Fv(\()p Ft(x)p Fv(\))p Ft(;)221 b(h)p Fv(\()p Ft(x)p
Fv(\))36867 37192 y
tx@Dict begin  PutEnd  end
 36867 37192 a 36867 37192 a
tx@Dict begin  PutEnd  end
 36867
37192 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (.4*x-1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)/5.0+6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (-1.0/15.0*x^(3.0)+3.0/5.0*x^(2.0)-3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
36867 37192 a
tx@Dict begin  { 149.45418 42.67911 } PutCoor PutBegin  end
 36867 37192 a 923 x Ft(h)36867 37192 y
tx@Dict begin  PutEnd  end

36867 37192 a 36867 37192 a
tx@Dict begin  { 156.49008 36.98865 } PutCoor PutBegin  end
 36867 37192 a 572 x Ft(g)36867
37192 y
tx@Dict begin  PutEnd  end
 36867 37192 a 36867 37192 a
tx@Dict begin  { 99.5846 76.41203 } PutCoor PutBegin  end
 36867 37192 a 923
x Ft(f)36867 37192 y
tx@Dict begin  PutEnd  end
 36867 37192 a 66925 52007 a
currentpoint initclip moveto
 66925
52007 a 25466 52007 a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 25466 52007 a 43253 52952 45 15326
v 44625 52952 V 24758 52996 19912 45 v 24758 68322 45
15326 v 25466 67377 a
 currentpoint currentpoint translate 0.413 0.413 scale neg exch neg
exch translate
 25466 67377 a 25466 67377 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 374.52588 a add def
/d 0.0 a add neg def /h 293.89343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466
67377 a 36867 52562 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 271.53275 0.0 -102.99313 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 160.0584 0.0 -133.83504   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 271.53275  0 -102.99313  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -102.99313
 271.53275  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-133.83504  def /maxTickline 160.0584  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 160.0584  0 -133.83504  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -133.83504
 160.0584  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-102.99313  def /maxTickline 271.53275  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 160.0584
0.0 -133.83504   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 271.53275
0.0 -102.99313 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36867 52562 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

36867 52562 a 36867 52562 a
tx@Dict begin  { 271.53275 160.0584 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 36867 52562 a 36867 52562
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 36867 52562 a 36497 52848 a Ft(x)36867 52562 y
tx@Dict begin  PutEnd  end
 36867
52562 a 36867 52562 a
tx@Dict begin  PutEnd  end
 36867 52562 a 36867 52562 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 36867
52562 a 36867 52562 a
tx@Dict begin  { 0.0 0.0 pop 271.53275 160.0584 exch pop } PutCoor
PutBegin  end
 36867 52562 a 36867 52562 a
tx@Dict begin  { 5.0 77.86833 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 36867
52562 a 32557 52894 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(;)221 b(h)p
Fv(\()p Ft(x)p Fv(\))36867 52562 y
tx@Dict begin  PutEnd  end
 36867 52562 a 36867
52562 a
tx@Dict begin  PutEnd  end
 36867 52562 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 49 div def /F@pstplot (.4*x-1.2)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30
28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0)/5.0-6.0/5.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinecap [  5.0  5.0 ] 0 0 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.619791766083621 def /x1 9.543292745697165
def /dx x1 x sub 199 div def /F@pstplot (-1.0/15.0*x^(3.0)+3.0/5.0*x^(2.0)-3.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 36867 52562 a
tx@Dict begin  { 149.45418 42.67911 } PutCoor PutBegin  end
 36867 52562 a
922 x Ft(h)36867 52562 y
tx@Dict begin  PutEnd  end
 36867 52562 a 36867 52562 a
tx@Dict begin  { 170.71646 -5.53894 } PutCoor PutBegin  end

36867 52562 a 572 x Ft(g)36867 52562 y
tx@Dict begin  PutEnd  end
 36867 52562 a
36867 52562 a
tx@Dict begin  { 99.5846 76.41203 } PutCoor PutBegin  end
 36867 52562 a 922 x Ft(f)36867 52562 y
tx@Dict begin  PutEnd  end

36867 52562 a 66925 67377 a
currentpoint initclip moveto
 66925 67377 a 25466 67377
a
 currentpoint currentpoint translate 1 0.413 div 1 0.413 div scale
neg exch neg exch translate
 25466 67377 a 43253 68322 45 15326 v 44625 68322 V
24758 68366 19912 45 v 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 72394 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(49)p 0 TeXcolorgray
eop end
%%Page: 50 50
TeXDict begin 50 49 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)889 b(3.2)e(-)i(12)f(Eigensc)-60
b(haften)886 b(der)i(zw)-60 b(eiten)888 b(Ableitung)e(-)i(MC)h(-)-2331
4515 y(Matura)717 b(NT)h(2)f(15/16)p 0 TeXcolorgray -1391
7823 a Fx(65.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(sind)g(die)h(Graphen)e(v)-36 b(on)434 b(f\374nf)f(reellen)h(F)-108
b(unktionen.)921 10368 y(F)-27 b(\374r)613 b(w)-36 b(elc)g(he)614
b(der)f(angegeb)36 b(enen)613 b(F)-108 b(unktionen)613
b(gilt)h Ft(f)28409 9886 y Fp(00)28975 10368 y Fv(\()p
Ft(x)p Fv(\))675 b Ft(>)g Fv(0)614 b Fx(im)g(In)-36 b(terv)-72
b(all)615 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])p Fx(?)921
12360 y(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(Graphen)
i(an!)p 0 TeXcolorgray 0 TeXcolorgray 4702 20264 17100
45 v 4702 31512 45 11248 v 5411 30567 a
 currentpoint currentpoint translate 0.57138 0.57138 scale neg exch
neg exch translate
 5411 30567 a
5411 30567 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411 30567 a 17379 22567 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.43004 0.0 -108.1205 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.68439 0.0 -72.26978   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.43004  0 -108.1205  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.1205
 102.43004  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.26978  def /maxTickline 75.68439  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.68439  0 -72.26978  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.26978
 75.68439  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.1205  def /maxTickline 102.43004  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
16134 19703 a Fq(1)16134 16554 y(2)15402 25956 y Fp(\000)p
Fq(1)15402 29106 y Fp(\000)p Fq(2)20294 23913 y(1)2679
b(2)h(3)-13434 b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)g
Fp(\000)p Fq(3)17379 22567 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17379 22567 a 17379 22567
a
tx@Dict begin  { 102.43004 75.68439 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 17379 22567 a 17379 22567 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 17379 22567 a 17036 22853
a Fx(x)17379 22567 y
tx@Dict begin  PutEnd  end
 17379 22567 a 17379 22567 a
tx@Dict begin  PutEnd  end
 17379
22567 a 17379 22567 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17379 22567 a 17379 22567 a
tx@Dict begin  { 0.0 0.0 pop 102.43004 75.68439 exch pop } PutCoor
PutBegin  end
 17379
22567 a 17379 22567 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17379 22567 a 16331 22899 a Fx(f\(x\))17379
22567 y
tx@Dict begin  PutEnd  end
 17379 22567 a 17379 22567 a
tx@Dict begin  PutEnd  end
 17379 22567 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8000000000000016 def /x1 3.5999999999999948
def /dx x1 x sub 199 div def /F@pstplot (0.4571364969828991*x^(3.0)-1.8285459879315964*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 17379 22567 a
tx@Dict begin  { -71.13185 -24.46938 } PutCoor PutBegin  end
 17379 22567 a
-258 x Ft(f)17379 22567 y
tx@Dict begin  PutEnd  end
 17379 22567 a 28718 30567 a
currentpoint initclip moveto

28718 30567 a 5411 30567 a
 currentpoint currentpoint translate 1 0.57138 div 1 0.57138 div scale
neg exch neg exch translate
 5411 30567 a 19392 31512 45
11248 v 21757 31512 V 4702 31557 17100 45 v 4702 42804
45 11248 v 5411 41859 a
 currentpoint currentpoint translate 0.57138 0.57138 scale neg exch
neg exch translate
 5411 41859 a 5411 41859 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411
41859 a 17379 33859 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.43004 0.0 -108.1205 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.68439 0.0 -72.26978   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.43004  0 -108.1205  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.1205
 102.43004  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.26978  def /maxTickline 75.68439  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.68439  0 -72.26978  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.26978
 75.68439  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.1205  def /maxTickline 102.43004  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16134 30995 a
Fq(1)16134 27846 y(2)15402 37248 y Fp(\000)p Fq(1)15402
40398 y Fp(\000)p Fq(2)20294 35205 y(1)2679 b(2)h(3)-13434
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)g Fp(\000)p Fq(3)17379
33859 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17379 33859 a 17379 33859 a
tx@Dict begin  { 102.43004 75.68439 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 17379 33859 a 17379
33859 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 17379 33859 a 17036 34145 a Fx(x)17379 33859
y
tx@Dict begin  PutEnd  end
 17379 33859 a 17379 33859 a
tx@Dict begin  PutEnd  end
 17379 33859 a 17379 33859
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17379 33859 a 17379 33859 a
tx@Dict begin  { 0.0 0.0 pop 102.43004 75.68439 exch pop } PutCoor
PutBegin  end
 17379 33859 a 17379 33859
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17379 33859 a 16331 34192 a Fx(f\(x\))17379 33859 y
tx@Dict begin  PutEnd  end

17379 33859 a 17379 33859 a
tx@Dict begin  PutEnd  end
 17379 33859 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8000000000000016 def /x1 3.5999999999999948
def /dx x1 x sub 199 div def /F@pstplot (0.77*x^2+0.5)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 17379 33859 a
tx@Dict begin  { -48.36957 24.46938 } PutCoor PutBegin  end
 17379 33859 a
-258 x Ft(f)17379 33859 y
tx@Dict begin  PutEnd  end
 17379 33859 a 28718 41859 a
currentpoint initclip moveto

28718 41859 a 5411 41859 a
 currentpoint currentpoint translate 1 0.57138 div 1 0.57138 div scale
neg exch neg exch translate
 5411 41859 a 19392 42804 45
11248 v 1 0 0 TeXcolorrgb 20101 37513 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21757 42804
V 4702 42849 17100 45 v 4702 54096 45 11248 v 5411 53152
a
 currentpoint currentpoint translate 0.57138 0.57138 scale neg exch
neg exch translate
 5411 53152 a 5411 53152 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5411 53152 a 17379 45152
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.43004 0.0 -108.1205 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.68439 0.0 -72.26978   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.43004  0 -108.1205  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.1205
 102.43004  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.26978  def /maxTickline 75.68439  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.68439  0 -72.26978  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.26978
 75.68439  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.1205  def /maxTickline 102.43004  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16134 42287 a Fq(1)16134 39138
y(2)15402 48540 y Fp(\000)p Fq(1)15402 51690 y Fp(\000)p
Fq(2)20294 46497 y(1)2679 b(2)h(3)-13434 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)g Fp(\000)p Fq(3)17379 45152
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 17379 45152 a 17379 45152 a
tx@Dict begin  { 102.43004 75.68439 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 17379 45152 a 17379 45152
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 17379 45152 a 17036 45438 a Fx(x)17379 45152 y
tx@Dict begin  PutEnd  end
 17379
45152 a 17379 45152 a
tx@Dict begin  PutEnd  end
 17379 45152 a 17379 45152 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 17379
45152 a 17379 45152 a
tx@Dict begin  { 0.0 0.0 pop 102.43004 75.68439 exch pop } PutCoor
PutBegin  end
 17379 45152 a 17379 45152 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 17379
45152 a 16331 45484 a Fx(f\(x\))17379 45152 y
tx@Dict begin  PutEnd  end
 17379 45152
a 17379 45152 a
tx@Dict begin  PutEnd  end
 17379 45152 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8000000000000016 def /x1 3.5999999999999948
def /dx x1 x sub 199 div def /F@pstplot (-0.16*x^2-0.32*x-0.8)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 17379 45152 a
tx@Dict begin  { -71.13185 -24.46938 } PutCoor PutBegin  end
 17379 45152 a -259 x Ft(f)17379
45152 y
tx@Dict begin  PutEnd  end
 17379 45152 a 28718 53152 a
currentpoint initclip moveto
 28718 53152 a 5411
53152 a
 currentpoint currentpoint translate 1 0.57138 div 1 0.57138 div scale
neg exch neg exch translate
 5411 53152 a 19392 54096 45 11248 v 21757 54096
V 4702 54141 17100 45 v 24758 20264 V 24758 31512 45
11248 v 25466 30567 a
 currentpoint currentpoint translate 0.57138 0.57138 scale neg exch
neg exch translate
 25466 30567 a 25466 30567 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466
30567 a 37435 22567 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.43004 0.0 -108.1205 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.68439 0.0 -72.26978   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.43004  0 -108.1205  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.1205
 102.43004  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.26978  def /maxTickline 75.68439  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.68439  0 -72.26978  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.26978
 75.68439  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.1205  def /maxTickline 102.43004  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36190 19703 a
Fq(1)36189 16554 y(2)35458 25956 y Fp(\000)p Fq(1)35458
29106 y Fp(\000)p Fq(2)40349 23913 y(1)2680 b(2)f(3)-13434
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)37435
22567 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 37435 22567 a 37435 22567 a
tx@Dict begin  { 102.43004 75.68439 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 37435 22567 a 37435
22567 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 37435 22567 a 37092 22853 a Fx(x)37435 22567
y
tx@Dict begin  PutEnd  end
 37435 22567 a 37435 22567 a
tx@Dict begin  PutEnd  end
 37435 22567 a 37435 22567
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 37435 22567 a 37435 22567 a
tx@Dict begin  { 0.0 0.0 pop 102.43004 75.68439 exch pop } PutCoor
PutBegin  end
 37435 22567 a 37435 22567
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 37435 22567 a 36387 22899 a Fx(f\(x\))37435 22567 y
tx@Dict begin  PutEnd  end

37435 22567 a 37435 22567 a
tx@Dict begin  PutEnd  end
 37435 22567 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8000000000000016 def /x1 3.5999999999999948
def /dx x1 x sub 199 div def /F@pstplot (1.15)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 37435 22567 a
tx@Dict begin  { -48.36957 18.7789 } PutCoor PutBegin  end
 37435 22567 a
-258 x Ft(f)37435 22567 y
tx@Dict begin  PutEnd  end
 37435 22567 a 48773 30567 a
currentpoint initclip moveto

48773 30567 a 25466 30567 a
 currentpoint currentpoint translate 1 0.57138 div 1 0.57138 div scale
neg exch neg exch translate
 25466 30567 a 39448 31512
45 11248 v 41813 31512 V 24758 31557 17100 45 v 24758
42804 45 11248 v 25466 41859 a
 currentpoint currentpoint translate 0.57138 0.57138 scale neg exch
neg exch translate
 25466 41859 a 25466 41859
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 210.55054 a add def
/d 0.0 a add neg def /h 147.95416 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 25466 41859 a 37435 33859 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 102.43004 0.0 -108.1205 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 75.68439 0.0 -72.26978   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 102.43004  0 -108.1205  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -108.1205
 102.43004  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-72.26978  def /maxTickline 75.68439  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 75.68439  0 -72.26978  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -72.26978
 75.68439  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-108.1205  def /maxTickline 102.43004  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 75.68439
0.0 -72.26978   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 102.43004
0.0 -108.1205 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 36190 30995 a
Fq(1)36189 27846 y(2)35458 37248 y Fp(\000)p Fq(1)35458
40398 y Fp(\000)p Fq(2)40349 35205 y(1)2680 b(2)f(3)-13434
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)37435
33859 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 37435 33859 a 37435 33859 a
tx@Dict begin  { 102.43004 75.68439 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 37435 33859 a 37435
33859 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 37435 33859 a 37092 34145 a Fx(x)37435 33859
y
tx@Dict begin  PutEnd  end
 37435 33859 a 37435 33859 a
tx@Dict begin  PutEnd  end
 37435 33859 a 37435 33859
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 37435 33859 a 37435 33859 a
tx@Dict begin  { 0.0 0.0 pop 102.43004 75.68439 exch pop } PutCoor
PutBegin  end
 37435 33859 a 37435 33859
a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 37435 33859 a 36387 34192 a Fx(f\(x\))37435 33859 y
tx@Dict begin  PutEnd  end

37435 33859 a 37435 33859 a
tx@Dict begin  PutEnd  end
 37435 33859 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.8000000000000016 def /x1 3.5999999999999948
def /dx x1 x sub 199 div def /F@pstplot (1/2.718^x)  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial 37435 33859 a
tx@Dict begin  { -22.76227 24.46938 } PutCoor PutBegin  end
 37435 33859 a
-258 x Ft(f)37435 33859 y
tx@Dict begin  PutEnd  end
 37435 33859 a 48773 41859 a
currentpoint initclip moveto

48773 41859 a 25466 41859 a
 currentpoint currentpoint translate 1 0.57138 div 1 0.57138 div scale
neg exch neg exch translate
 25466 41859 a 39448 42804
45 11248 v 1 0 0 TeXcolorrgb 40156 37513 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 41813 42804
V 24758 42849 17100 45 v 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 58169 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(50)p 0 TeXcolorgray
eop end
%%Page: 51 51
TeXDict begin 51 50 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)842 b(3.2)f(-)g(13)g(Ableitung)e(-)j
(O)-60 b(A)841 b(-)h(Matura)f(2013/14)g(1.)g(Neb)60 b(en-)-2331
4622 y(termin)p 0 TeXcolorgray -1391 7929 a Fx(66.)p
0 TeXcolorgray 651 w(In)613 b(der)g(nac)-36 b(hstehenden)611
b(Abbildung)h(ist)h(der)g(Graph)f(der)h(1.)i(Ableitungsfunktion)e
Ft(f)45586 7447 y Fp(0)921 9921 y Fx(einer)433 b(P)-36
b(olynomfunktion)435 b Ft(f)575 b Fx(dargestellt.)p 0
TeXcolorgray 0 TeXcolorgray 7666 33456 a
 currentpoint currentpoint translate 0.79463 0.79463 scale neg exch
neg exch translate
 7666 33456 a
7666 33456 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 357.93555 a add def
/d 0.0 a add neg def /h 240.70995 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7666 33456 a 25808 25645 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 194.04791 0.0 -163.88763 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 13
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 170.14728 0.0 -70.56267   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 194.04791  0 -163.88763  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -163.88763
 194.04791  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.56267  def /maxTickline 170.14728  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.14728
0.0 -70.56267   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 194.04791
0.0 -163.88763 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 170.14728  0 -70.56267  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -70.56267
 170.14728  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-163.88763  def /maxTickline 194.04791  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.14728
0.0 -70.56267   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 194.04791
0.0 -163.88763 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
24563 22781 a Fq(1)24563 19631 y(2)24563 16481 y(3)24563
13332 y(4)24563 10182 y(5)23831 29034 y Fp(\000)p Fq(1)23831
32183 y Fp(\000)p Fq(2)28722 26990 y(1)2680 b(2)f(3)h(4)g(5)f(6)-22883
b Fp(\000)p Fq(1)-4351 b Fp(\000)p Fq(2)f Fp(\000)p Fq(3)g
Fp(\000)p Fq(4)h Fp(\000)p Fq(5)25808 25645 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 25808 25645
a 25808 25645 a
tx@Dict begin  { 194.04791 170.14728 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 25808 25645 a 25808 25645 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 25808 25645
a 25465 25931 a Fx(x)25808 25645 y
tx@Dict begin  PutEnd  end
 25808 25645 a 25808
25645 a
tx@Dict begin  PutEnd  end
 25808 25645 a 25808 25645 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 25808 25645 a 25808
25645 a
tx@Dict begin  { 0.0 0.0 pop 194.04791 170.14728 exch pop } PutCoor
PutBegin  end
 25808 25645 a 25808 25645 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 25808 25645 a 24562
25977 a Fx(f)36 b('\(x\))25808 25645 y
tx@Dict begin  PutEnd  end
 25808 25645 a
25808 25645 a
tx@Dict begin  PutEnd  end
 25808 25645 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.760000000000003 def /x1 6.820000000000001
def /dx x1 x sub 199 div def /F@pstplot (-0.25*x^(2.0)+4.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end


@endspecial 25808 25645 a
tx@Dict begin  { 72.83894 79.66776 } PutCoor PutBegin  end
 25808 25645 a 915 x Fx(f)g(')25808
25645 y
tx@Dict begin  PutEnd  end
 25808 25645 a 47288 33456 a
currentpoint initclip moveto
 47288 33456 a 7666
33456 a
 currentpoint currentpoint translate 1 0.79463 div 1 0.79463 div scale
neg exch neg exch translate
 7666 33456 a 921 37440 a Fx(Bestimme,)644 b(an)f(w)-36
b(elc)g(hen)643 b(Stellen)g(die)h(F)-108 b(unktion)642
b Ft(f)785 b Fx(im)644 b(In)-36 b(terv)-72 b(all)644
b Fv(\()p Fu(\000)p Fv(5;)221 b(5\))644 b Fx(jedenfalls)921
39432 y(lokale)318 b(Extrema)f(hat!)h(Die)f(f\374r)f(die)h(Bestimm)-36
b(ung)316 b(relev)-72 b(an)-36 b(ten)317 b(Punkte)f(mit)g(ganzzahligen)
921 41424 y(K)-36 b(o)36 b(ordinaten)434 b(k)-36 b(\366nnen)433
b(der)g(Abbildung)f(en)-36 b(tnommen)433 b(w)-36 b(erden.)p
1 0 0 TeXcolorrgb 873 45961 a(An)433 b(den)g(Stellen)g
Ft(x)10463 46160 y Fq(1)11358 45961 y Fv(=)369 b Fu(\000)p
Fv(4)434 b Fx(und)e Ft(x)18196 46160 y Fq(2)19091 45961
y Fv(=)369 b(4)434 b Fx(hat)f Ft(f)575 b Fx(lokale)436
b(Extrema.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921
a Fr(AN)369 b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 49695 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(51)p 0 TeXcolorgray eop end
%%Page: 52 52
TeXDict begin 52 51 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)637 b(3.2)e(-)i(14)e(Gra\034sc)-60
b(h)636 b(di\033erenzieren)f(-)h(O)-60 b(A)636 b(-)h(Matura)e(2016/17)
-2617 4622 y(-)718 b(Haupttermin)p 0 TeXcolorgray -1391
7929 a Fx(67.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b(dritten)e(Grades)g Ft(f)142 b Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 5417 41953 a
 currentpoint currentpoint translate 0.73058 0.73058 scale neg exch
neg exch translate
 5417 41953 a 5851 41953 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 441.0175 a add def
/d 0.0 a add neg def /h 391.50957 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5851 41953 a 33000 25764 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -142.26372 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 195.755 0.0 -245.2625 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -227.62195 0.0 T 16
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 245.2625 0.0 -146.24707   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 195.755  0 -245.2625  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -245.2625
 195.755  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-146.24707  def /maxTickline 245.2625  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 245.2625
0.0 -146.24707   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.755
0.0 -245.2625 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 245.2625  0 -146.24707  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -146.24707
 245.2625  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-245.2625  def /maxTickline 195.755  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 245.2625
0.0 -146.24707   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 195.755
0.0 -245.2625 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 33000 25764 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

33000 25764 a 33000 25764 a
tx@Dict begin  { 195.755 245.2625 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 33000 25764 a 33000 25764
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 33000 25764 a 32657 26050 a Fx(x)33000 25764 y
tx@Dict begin  PutEnd  end
 33000
25764 a 33000 25764 a
tx@Dict begin  PutEnd  end
 33000 25764 a 33000 25764 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 33000
25764 a 33000 25764 a
tx@Dict begin  { 0.0 0.0 pop 195.755 245.2625 exch pop } PutCoor PutBegin
 end
 33000 25764 a 33000 25764 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 33000
25764 a 31952 26096 a Fx(f\(x\))33000 25764 y
tx@Dict begin  PutEnd  end
 33000 25764
a 33000 25764 a
tx@Dict begin  PutEnd  end
 33000 25764 a 1 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 1 0 0  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def    /x -7 def /x1 2 def /dx
x1 x sub 199 div def /F@pstplot (0.31003100310031*x^(2.0)+1.24012401240124*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 1 0 0  setrgbcolor  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -8.620000000000006 def /x1 6.88
def /dx x1 x sub 199 div def /F@pstplot (0.1034*x^(3.0)+0.62*x^(2.0)+1.7)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 33000 25764 a
tx@Dict begin  { 47.23164 169.57854 } PutCoor PutBegin  end
 33000 25764 a
922 x Ft(f)33000 25764 y
tx@Dict begin  PutEnd  end
 33000 25764 a 33000 25764 a
tx@Dict begin  { 47.8004 73.9773 } PutCoor PutBegin  end

33000 25764 a 974 x Ft(f)33783 26256 y Fp(0)33000 25764
y
tx@Dict begin  PutEnd  end
 33000 25764 a 33000 25764 a
tx@Dict begin  { -205.99802 -5.12128 } PutCoor PutBegin  end
 33000 25764 a 571 x Ft(x)33739
26534 y Fq(1)33000 25764 y
tx@Dict begin  PutEnd  end
 33000 25764 a 33000 25764
a
tx@Dict begin  { 51.21501 -5.69046 } PutCoor PutBegin  end
 33000 25764 a 571 x Ft(x)33739 26534 y Fq(2)33000 25764
y
tx@Dict begin  PutEnd  end
 33000 25764 a 1 0 0 TeXcolorrgb @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ -113.81097
0.0   false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 1 0 0  setrgbcolor  [ 0.0 0.0 
 false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 54670 41953 a
currentpoint initclip moveto
 54670 41953
a 5417 41953 a
 currentpoint currentpoint translate 1 0.73058 div 1 0.73058 div scale
neg exch neg exch translate
 5417 41953 a 921 45937 a Fx(Skizziere)557
b(in)f(der)f(gegeb)36 b(enen)556 b(Gra\034k)g(den)f(Graphen)f(der)i
(Ableitungsfunktion)g Ft(f)43585 45455 y Fp(0)44451 45937
y Fx(im)921 47929 y(In)-36 b(terv)-72 b(all)434 b Fv([)8
b Ft(x)7195 48128 y Fq(1)7721 47929 y Fv(;)221 b Ft(x)9042
48128 y Fq(2)9569 47929 y Fv(])433 b Fx(und)g(markiere)h(gegeb)36
b(enenfalls)435 b(die)f(Nullstellen!)p 1 0 0 TeXcolorrgb
921 52466 a(L\366sungssc)-36 b(hl\374ssel:)921 55012
y(Ein)455 b(Punkt)f(f\374r)h(eine)g(k)-36 b(orrekte)456
b(Darstellung)g(der)e(Ableitungsfunktion)h Ft(f)38615
54530 y Fp(0)38926 55012 y Fx(.)g(Der)g(Graph)921 57004
y(der)336 b(F)-108 b(unktion)335 b Ft(f)9295 56521 y
Fp(0)9942 57004 y Fx(m)-36 b(uss)336 b(erk)-36 b(enn)g(bar)335
b(die)h(F)-108 b(orm)336 b(einer)g(nac)-36 b(h)336 b(ob)36
b(en)336 b(o\033enen)f(P)-36 b(arab)36 b(el)337 b(hab)36
b(en)921 58995 y(und)435 b(die)g Ft(x)p Fx(-A)-36 b(c)g(hse)435
b(an)h(den)f(b)36 b(eiden)436 b(Stellen)f(sc)-36 b(hneiden,)435
b(b)36 b(ei)436 b(denen)f(die)h(F)-108 b(unktion)435
b Ft(f)577 b Fx(die)921 60987 y(Extremstellen)492 b(hat.)h(Der)f(Graph)
f(einer)h(en)-36 b(tsprec)g(henden)490 b(F)-108 b(unktion)491
b Ft(f)37490 60505 y Fp(0)37801 60987 y Fx(,)h(der)g(\374b)36
b(er)491 b(das)921 62979 y(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Ft(x)7195 63178 y Fq(1)7721 62979 y Fv(;)221
b Ft(x)9042 63178 y Fq(2)9569 62979 y Fv(])433 b Fx(hinaus)h(gezeic)-36
b(hnet)433 b(ist,)h(ist)g(eb)36 b(enfalls)434 b(als)g(ric)-36
b(h)g(tig)434 b(zu)f(w)-36 b(erten.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369 b(3.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66787
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(52)p 0 TeXcolorgray
eop end
%%Page: 53 53
TeXDict begin 53 52 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)642 b(3.2)f(-)g(15)g
(Di\033erenzieren)g(einer)f(Exp)60 b(onen)-60 b(tialfunktion)636
b(-)642 b(O)-60 b(A)-2617 4515 y(-)718 b(Matura)f(NT)g(1)g(16/17)p
0 TeXcolorgray -1391 7823 a Fx(68.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(F)-108 b(unktion)433
b Ft(f)575 b Fx(mit)434 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369
b(=)f Ft(e)24761 7341 y Fl(\025)p Fp(\001)p Fl(x)26590
7823 y Fx(mit)434 b Ft(\025)368 b Fu(2)h Fj(R)p Fx(.)921
10368 y(Die)410 b(nac)-36 b(hstehende)409 b(Abbildung)f(zeigt)j(die)e
(Graphen)g(der)g(F)-108 b(unktion)409 b Ft(f)552 b Fx(und)408
b(ihrer)i(Ablei-)921 12360 y(tungsfunktion)433 b Ft(f)10021
11878 y Fp(0)10332 12360 y Fx(.)p 0 TeXcolorgray 0 TeXcolorgray
921 39665 a
 currentpoint currentpoint translate 1.23318 1.23318 scale neg exch
neg exch translate
 921 39665 a 921 39665 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 329.4703 a add def
/d 0.0 a add neg def /h 170.02682 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 39665 a 8698
32878 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 259.21455  0 -70.25575  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 2 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -70.25575
 259.21455  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-61.31737  def /maxTickline 108.70946  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 0.5 abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 56.9055  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 56.9055
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 108.70946
0.0 -61.31737   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 259.21455
0.0 -70.25575 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 108.70946  0 -61.31737  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 2 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -61.31737
 108.70946  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.25575  def /maxTickline 259.21455  def /dT 2797019 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-4.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 42.67912  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 42.67912  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 108.70946
0.0 -61.31737   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 259.21455
0.0 -70.25575 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
7231 28439 a Fq(1)7231 23714 y(2)6499 37841 y Fp(\000)p
Fq(1)8698 32878 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8698 32878 a 8698 32878 a
tx@Dict begin  { 259.21455 108.70946 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 8698 32878
a 8698 32878 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8698 32878 a 8355 33164 a Fx(x)8698 32878
y
tx@Dict begin  PutEnd  end
 8698 32878 a 8698 32878 a
tx@Dict begin  PutEnd  end
 8698 32878 a 8698 32878 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

8698 32878 a 8698 32878 a
tx@Dict begin  { 0.0 0.0 pop 259.21455 108.70946 exch pop } PutCoor
PutBegin  end
 8698 32878 a 8698 32878 a
tx@Dict begin  { 5.0 44.71521 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 8698
32878 a 6223 33210 a Fx(f\(x\),f)36 b('\(x\))8698 32878
y
tx@Dict begin  PutEnd  end
 8698 32878 a 8698 32878 a
tx@Dict begin  PutEnd  end
 8698 32878 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.2346000372737964 def /x1 4.3
def /dx x1 x sub 199 div def /F@pstplot (2.718281828459045^(-0.5*x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.9055 mul F@pstplot
42.67912 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 42.67912 mul gt { moveto } { dup -1.e30 42.67912
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 42.67912 mul gt { moveto } {
dup -1.e30 42.67912 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.2346000372737964 def /x1 4.3
def /dx x1 x sub 199 div def /F@pstplot (-1.0/2.0*2.718281828459045^(-1.0/2.0*x))
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 56.9055 mul F@pstplot
42.67912 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 42.67912 mul gt { moveto } { dup -1.e30 42.67912
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 42.67912 mul gt { moveto } {
dup -1.e30 42.67912 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.0 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8698 32878 a
tx@Dict begin  { 62.22215 39.32137 } PutCoor PutBegin  end
 8698 32878 a 922 x Ft(f)8698 32878 y
tx@Dict begin  PutEnd  end
 8698
32878 a 8698 32878 a
tx@Dict begin  { 72.07138 -17.35402 } PutCoor PutBegin  end
 8698 32878 a 974 x Ft(f)9481 33370
y Fp(0)8698 32878 y
tx@Dict begin  PutEnd  end
 8698 32878 a 37392 39665 a
currentpoint initclip moveto
 37392
39665 a 921 39665 a
 currentpoint currentpoint translate 1 1.23318 div 1 1.23318 div scale
neg exch neg exch translate
 921 39665 a 3985 x Fx(Gib)433 b(den)g(W)-108
b(ert)433 b(des)g(P)-36 b(arameters)434 b Ft(\025)f Fx(an!)921
48187 y Ft(\025)369 b Fv(=)p 1 0 0 TeXcolorrgb 433 w
Fx(-0,5)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 874 50732
a(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435 b Fv([)8
b Fu(\000)p Fv(0)p Ft(;)p Fv(55;)221 b Fu(\000)p Fv(0)p
Ft(;)p Fv(45])p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369
b(3.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 54540 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(53)p
0 TeXcolorgray eop end
%%Page: 54 54
TeXDict begin 54 53 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1060 b(3.3)f(-)h(1)f(Eigensc)-60
b(haften)1058 b(einer)g(P)-60 b(olynomfunktion)1057 b(-)i(L)-179
b(T)1059 b(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray -1391
7823 a Fx(69.)p 0 TeXcolorgray 651 w(Eine)2113 b(P)-36
b(olynomfunktion)2115 b(dritten)d(Grades)h Ft(f)2256
b Fx(hat)2113 b(die)g(Gleic)-36 b(h)g(ung)921 9815 y
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(a)295 b
Fu(\001)g Ft(x)7585 9333 y Fq(3)8406 9815 y Fv(+)g Ft(b)h
Fu(\001)f Ft(x)11965 9333 y Fq(2)12786 9815 y Fv(+)g
Ft(c)g Fu(\001)g Ft(x)g Fv(+)g Ft(d)433 b Fx(mit)h Ft(a;)221
b(b;)g(c;)g(d)370 b Fu(2)f Fj(R)434 b Fx(und)e Ft(a)369
b Fu(6)p Fv(=)g(0)p Fx(.)921 14352 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 16344 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 19834 y(Die)407
b(F)-108 b(unktion)406 b Ft(f)549 b Fx(b)36 b(esitzt)407
b(genau)f(eine)p 20771 19834 3150 45 v 24392 19786 a(1)23921
19834 y Fo(\015)p 25515 19834 V 3556 w Fx(,)h(w)-36 b(eil)408
b(es)f(genau)f(ein)h Ft(x)369 b Fu(2)g Fj(R)407 b Fx(gibt,)921
21826 y(f\374r)433 b(das)p 5517 21826 V 9138 21778 a(2)8666
21826 y Fo(\015)p 10260 21826 V 3584 w Fx(gilt)p 0 TeXcolorgray
0 TeXcolorgray 6080 23198 15080 45 v 6080 26283 45 3085
v 13295 24980 a(1)12823 25028 y Fo(\015)p 21115 26283
V 6080 26327 15080 45 v 6080 29586 45 3260 v 6789 28383
a Fx(Nullstelle)p 18750 29586 V 19459 28289 a Fn(2)p
21115 29586 V 6080 29630 15080 45 v 6080 32890 45 3260
v 6789 31686 a Fx(lokale)i(Extremstelle)p 18750 32890
V 19459 31592 a Fn(2)p 21115 32890 V 6080 32934 15080
45 v 6080 36193 45 3260 v 6789 34990 a Fx(W)-108 b(endestelle)p
18750 36193 V 1 0 0 TeXcolorrgb 19459 34896 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 21115
36193 V 6080 36237 15080 45 v 0 TeXcolorgray 0 TeXcolorgray
25658 23309 18072 45 v 25658 26393 45 3085 v 34368 25090
a Fx(2)33896 25138 y Fo(\015)p 43684 26393 V 25658 26438
18072 45 v 25658 29771 45 3334 v 26366 28494 a Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)f(0)434 b Fx(und)f Ft(f)35118
28012 y Fp(0)35428 28494 y Fv(\()p Ft(x)p Fv(\))369 b
Fu(6)p Fv(=)f(0)p 41319 29771 V 42028 28436 a Fn(2)p
43684 29771 V 25658 29815 18072 45 v 25658 33148 45 3334
v 26366 31871 a Ft(f)27149 31389 y Fp(0)27460 31871 y
Fv(\()p Ft(x)p Fv(\))g(=)h(0)434 b Fx(und)e Ft(f)35428
31389 y Fp(00)35994 31871 y Fv(\()p Ft(x)p Fv(\))369
b(=)f(0)p 41319 33148 V 42028 31813 a Fn(2)p 43684 33148
V 25658 33192 18072 45 v 25658 36525 45 3334 v 26366
35248 a Ft(f)27149 34766 y Fp(00)27715 35248 y Fv(\()p
Ft(x)p Fv(\))g(=)h(0)434 b Fx(und)e Ft(f)35683 34766
y Fp(000)36504 35248 y Fv(\()p Ft(x)p Fv(\))369 b Fu(6)p
Fv(=)g(0)p 41319 36525 V 1 0 0 TeXcolorrgb 42028 35191
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43684 36525 V 25658 36569 18072 45 v 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 40598 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(54)p 0 TeXcolorgray
eop end
%%Page: 55 55
TeXDict begin 55 54 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)680 b(3.3)f(-)h(2)f(Zw)-60
b(eite)679 b(Ableitung)e(einer)i(F)-179 b(unktion)676
b(-)k(MC)g(-)g(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(70.)p
0 TeXcolorgray 651 w(In)426 b(der)h(nac)-36 b(hstehenden)424
b(Abbildung)i(ist)h(der)f(Graph)f(der)h(F)-108 b(unktion)426
b Ft(f)36511 4318 y Fp(00)37504 4800 y Fx(einer)g(P)-36
b(olynom-)921 6792 y(funktion)434 b Ft(f)575 b Fx(dargestellt:)p
0 TeXcolorgray 0 TeXcolorgray 9135 29671 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 257.89291 a add def
/d 0.0 a add neg def /h 185.34311 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9135 29671
a 16710 20526 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.46454 0.0 -68.42838 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 102.73091 0.0 -82.6122   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.46454  0 -68.42838  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -68.42838
 189.46454  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-82.6122  def /maxTickline 102.73091  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.73091
0.0 -82.6122   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.46454
0.0 -68.42838 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 102.73091  0 -82.6122  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -82.6122
 102.73091  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-68.42838  def /maxTickline 189.46454  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 102.73091
0.0 -82.6122   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.46454
0.0 -68.42838 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 15465 17662 a
Fq(1)15464 14512 y(2)15464 11362 y(3)14732 23915 y Fp(\000)p
Fq(1)14732 27064 y Fp(\000)p Fq(2)19624 21871 y(1)2680
b(2)f(3)h(4)f(5)h(6)-22883 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)16710 20526 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 16710 20526 a 16710 20526 a
tx@Dict begin  { 189.46454 102.73091 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16710
20526 a 16710 20526 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16710 20526 a 16367 20812 a Fx(x)16710
20526 y
tx@Dict begin  PutEnd  end
 16710 20526 a 16710 20526 a
tx@Dict begin  PutEnd  end
 16710 20526 a 16710
20526 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16710 20526 a 16710 20526 a
tx@Dict begin  { 0.0 0.0 pop 189.46454 102.73091 exch pop } PutCoor
PutBegin  end
 16710 20526 a 16710
20526 a
tx@Dict begin  { 5.0 27.99968 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 16710 20526 a 15160 20858 a Ft(f)15943 20376
y Fp(00)16509 20858 y Fv(\()p Ft(x)p Fv(\))16710 20526
y
tx@Dict begin  PutEnd  end
 16710 20526 a 16710 20526 a
tx@Dict begin  PutEnd  end
 16710 20526 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4049893887185867 def /x1 6.658925835151265
def /dx x1 x sub 199 div def /F@pstplot (4.0/5.0*x-2.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 16710 20526 a
tx@Dict begin  { 95.9429 59.08754 } PutCoor PutBegin  end
 16710 20526 a
974 x Ft(f)17493 21018 y Fp(00)16710 20526 y
tx@Dict begin  PutEnd  end
 16710 20526
a 37682 29671 a
currentpoint initclip moveto
 37682 29671 a 855 33655 a Fx(W)-108 b(elc)-36
b(he)433 b(A)-36 b(ussage)434 b(l\344sst)g(sic)-36 b(h)433
b(aus)h(dieser)f(Information)i(eindeutig)e(sc)-36 b(hlie\377en?)921
38192 y(Kreuze)433 b(die)h(zutre\033ende)e(A)-36 b(ussage)434
b(an.)p 2268 39159 41848 45 v 2268 42377 45 3219 v 2976
41100 a(Die)h(F)-108 b(unktion)433 b Ft(f)575 b Fx(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p
Fv(1;)221 b(1])436 b Fx(eine)d(Nullstelle.)p 41706 42377
V 44071 42377 V 2268 42422 41848 45 v 2268 45640 45 3219
v 2976 44363 a(Die)i(F)-108 b(unktion)433 b Ft(f)575
b Fx(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8
b Fu(\000)p Fv(1;)221 b(1])436 b Fx(eine)d(lokale)j(Extremstelle.)p
41706 45640 V 44071 45640 V 2268 45684 41848 45 v 2268
48902 45 3219 v 2976 47625 a(Die)f(F)-108 b(unktion)433
b Ft(f)575 b Fx(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])436 b Fx(eine)d(W)-108
b(endestelle.)p 41706 48902 V 44071 48902 V 2268 48946
41848 45 v 2268 52164 45 3219 v 2976 50887 a(Die)435
b(F)-108 b(unktion)433 b Ft(f)575 b Fx(ist)434 b(im)g(In)-36
b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])435
b Fx(streng)e(monoton)h(steigend.)p 41706 52164 V 44071
52164 V 2268 52209 41848 45 v 2268 55427 45 3219 v 2976
54150 a(Die)h(F)-108 b(unktion)433 b Ft(f)575 b Fx(\344ndert)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p
Fv(1;)221 b(1])435 b Fx(ihr)e(Monotoniev)-36 b(erhalten.)p
41706 55427 V 44071 55427 V 2268 55471 41848 45 v 2268
60681 45 5211 v 2976 57412 a(Der)434 b(Graph)f(der)g(F)-108
b(unktion)433 b Ft(f)575 b Fx(ist)434 b(im)g(In)-36 b(terv)-72
b(all)434 b Fv([)8 b Fu(\000)p Fv(1;)221 b(1])435 b Fx(rec)-36
b(h)g(ts)433 b(gekr\374mm)-36 b(t)2976 59404 y(\(negativ)435
b(gekr\374mm)-36 b(t\))o(.)p 41706 60681 V 1 0 0 TeXcolorrgb
42415 58408 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 44071 60681 V 2268 60725 41848 45 v 47992
4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 64753 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(55)p
0 TeXcolorgray eop end
%%Page: 56 56
TeXDict begin 56 55 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(3)f(Lokale)g(Extrema)
g(-)h(MC)g(-)f(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(71.)p
0 TeXcolorgray 651 w(V)-108 b(on)536 b(einer)h(P)-36
b(olynomfunktion)537 b Ft(f)679 b Fx(dritten)536 b(Grades)g(sind)g(die)
h(b)36 b(eiden)536 b(lokalen)i(Extrem-)921 6792 y(punkte)433
b Ft(E)6256 6991 y Fq(1)7150 6792 y Fv(=)369 b(\(0)p
Ft(=)296 b Fu(\000)f Fv(4\))434 b Fx(und)e Ft(E)17115
6991 y Fq(2)18010 6792 y Fv(=)368 b(\(4)p Ft(=)p Fv(0\))434
b Fx(b)36 b(ekann)-36 b(t.)855 9338 y(W)-108 b(elc)-36
b(he)434 b(Bedingungen)f(m)-36 b(\374ssen)434 b(in)g(diesem)g
(Zusammenhang)g(erf\374llt)h(sein?)f(Kreuze)g(die)921
11330 y(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an!)p 18362 12370 9661 45 v 18362 15588 45 3219 v 19070
14311 a Ft(f)142 b Fv(\(0\))369 b(=)g(4)p 25612 15588
V 1 0 0 TeXcolorrgb 2406 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 27978 15588 V 18362 15633
9661 45 v 18362 18851 45 3219 v 19070 17574 a Ft(f)19853
17092 y Fp(0)20164 17574 y Fv(\(0\))g(=)f(0)p 25612 18851
V 1 0 0 TeXcolorrgb 2096 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 27978 18851 V 18362 18895
9661 45 v 18362 22113 45 3219 v 19070 20836 a Ft(f)142
b Fv(\()p Fu(\000)p Fv(4\))369 b(=)g(0)p 25612 22113
V 27978 22113 V 18362 22157 9661 45 v 18362 25376 45
3219 v 19070 24099 a Ft(f)19853 23616 y Fp(0)20164 24099
y Fv(\(4\))g(=)f(0)p 25612 25376 V 1 0 0 TeXcolorrgb
2096 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
27978 25376 V 18362 25420 9661 45 v 18362 28638 45 3219
v 19070 27361 a Ft(f)19853 26879 y Fp(00)20419 27361
y Fv(\(0\))h(=)g(0)p 25612 28638 V 27978 28638 V 18362
28682 9661 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 32710 54804 45 v -2331 38012 a Fy(AN)1071
b(3.3)f(-)g(4)g(Ermittlung)f(einer)h(F)-179 b(unktionsgleic)-60
b(h)g(ung)1066 b(-)k(O)-60 b(A)1071 b(-)-2331 41034 y(BIFIE)p
0 TeXcolorgray -1391 44341 a Fx(72.)p 0 TeXcolorgray
651 w(Gegeb)36 b(en)315 b(ist)g(die)g(F)-108 b(unktion)315
b Ft(f)457 b Fx(mit)315 b(der)g(Gleic)-36 b(h)g(ung)314
b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(x)31691
43859 y Fq(2)32271 44341 y Fv(+)54 b Ft(bx)g Fv(+)g Ft(c)313
b Fx(mit)i Ft(b;)221 b(c)370 b Fu(2)e Fj(R)p Fx(.)317
b(Der)921 46333 y(Graph)417 b(der)g(F)-108 b(unktion)417
b Ft(f)560 b Fx(v)-36 b(erl\344uft)419 b(durc)-36 b(h)416
b(den)h(Ursprung.)g(Die)i(Steigung)f(der)f(F)-108 b(unktion)921
48325 y(im)434 b(Ursprung)e(hat)h(den)g(W)-108 b(ert)433
b(n)-36 b(ull.)921 50871 y(Ermittle)462 b(die)g(W)-108
b(erte)462 b(der)g(P)-36 b(arameter)462 b Ft(b)g Fx(und)f
Ft(c)h Fx(und)f(gib)i(die)f(Gleic)-36 b(h)g(ung)461 b(der)h(F)-108
b(unktion)921 52862 y Ft(f)575 b Fx(an!)p 1 0 0 TeXcolorrgb
921 57400 a(Die)345 b(F)-108 b(unktion)345 b Ft(f)486
b Fx(v)-36 b(erl\344uft)346 b(durc)-36 b(h)343 b(den)h(K)-36
b(o)36 b(ordinaten)-36 b(ursprung,)344 b(daher)g(gilt:)i
Ft(f)142 b Fv(\(0\))369 b(=)g(0)g Fu(\))921 59392 y Ft(c)491
b Fv(=)h(0)p Fx(.)506 b(Die)h(Steigung)e(der)g(F)-108
b(unktion)505 b(im)h(K)-36 b(o)36 b(ordinaten)-36 b(ursprung)504
b(hat)h(den)g(W)-108 b(ert)505 b(n)-36 b(ull,)921 61384
y(daher)433 b(gilt:)i Ft(f)7991 60902 y Fp(0)8301 61384
y Fv(\(0\))369 b(=)g(0)g Fu(\))g Ft(b)g Fv(=)g(0)p Fx(.)921
63929 y(Die)434 b(gesuc)-36 b(h)g(te)433 b(F)-108 b(unktionsgleic)-36
b(h)g(ung)433 b(lautet)g(daher:)h Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))368 b(=)h Ft(x)32585 63447 y Fq(2)33111
63929 y Fx(.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 47992 44341 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 46333 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 67736 V 0 TeXcolorgray 24421 81281
a Fx(56)p 0 TeXcolorgray eop end
%%Page: 57 57
TeXDict begin 57 56 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(5)f(Steigung)e(einer)
i(F)-179 b(unktion)714 b(-)k(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(73.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Ft(f)575 b Fx(mit)434 b(der)f(Gleic)-36 b(h)g(ung)433
b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))368 b(=)32032 4277
y Fq(1)p 32032 4491 471 45 v 32032 5259 a(4)32635 4800
y Ft(x)33374 4318 y Fq(3)34195 4800 y Fv(+)35635 4277
y Fq(3)p 35635 4491 V 35635 5259 a(2)36238 4800 y Ft(x)36977
4318 y Fq(2)37798 4800 y Fv(+)295 b(4)p Ft(x)h Fv(+)f(5)p
Fx(.)921 7346 y(Berec)-36 b(hne)433 b(den)g(W)-108 b(ert)433
b(der)g(Steigung)g(der)g(F)-108 b(unktion)433 b Ft(f)575
b Fx(an)434 b(der)f(Stelle)h Ft(x)369 b Fv(=)f(2)p Fx(.)p
1 0 0 TeXcolorrgb 921 11883 a Ft(f)1704 11401 y Fp(0)2014
11883 y Fv(\()p Ft(x)p Fv(\))h(=)5648 11360 y Fq(3)p
5648 11573 V 5648 12341 a(4)6251 11883 y Ft(x)6990 11401
y Fq(2)7811 11883 y Fv(+)295 b(3)p Ft(x)h Fv(+)e(4)921
14429 y Ft(f)1704 13947 y Fp(0)2014 14429 y Fv(\(2\))369
b(=)5559 13906 y Fq(3)p 5559 14119 V 5559 14887 a(4)6457
14429 y Fu(\001)296 b Fv(2)7772 13947 y Fq(2)8593 14429
y Fv(+)f(3)g Fu(\001)g Fv(2)h(+)f(4)369 b(=)g(13)921
16974 y Fx(Der)434 b(W)-108 b(ert)433 b(der)g(Steigung)g(der)g(F)-108
b(unktion)433 b Ft(f)576 b Fx(an)433 b(der)g(Stelle)h
Ft(x)369 b Fv(=)g(2)433 b Fx(ist)h(13.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 20707
54804 45 v -2331 26009 a Fy(AN)718 b(3.3)f(-)h(6)f(K)-60
b(ostenk)g(ehre)716 b(-)h(O)-60 b(A)718 b(-)f(BIFIE)p
0 TeXcolorgray -1391 29316 a Fx(74.)p 0 TeXcolorgray
651 w(In)542 b(einem)g(Betrieb)g(k)-36 b(\366nnen)542
b(die)g(K)-36 b(osten)542 b(zur)g(Herstellung)g(eines)g(Pro)36
b(dukts)542 b(in)g(einem)921 31308 y(b)36 b(estimm)-36
b(ten)474 b(In)-36 b(terv)-72 b(all)475 b(n\344herungsw)-36
b(eise)474 b(durc)-36 b(h)473 b(die)i(F)-108 b(unktion)474
b Ft(K)569 b Fx(mit)475 b(der)f(Gleic)-36 b(h)g(ung)921
33300 y Ft(K)95 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(a)295
b Fu(\001)g Ft(x)8004 32818 y Fq(3)8826 33300 y Fv(+)f
Ft(b)i Fu(\001)f Ft(x)12384 32818 y Fq(2)13205 33300
y Fv(+)g Ft(c)g Fu(\001)g Ft(x)g Fv(+)g Ft(d)369 b Fx(mit)g
Ft(a;)221 b(b;)g(c;)g(d)371 b Fu(2)d Fj(R)i Fx(und)e
Ft(a)h(>)f Fv(0)i Fx(b)36 b(esc)-36 b(hrieb)36 b(en)368
b(w)-36 b(erden)769 35292 y(\()p Ft(K)95 b Fv(\()p Ft(x)p
Fv(\))433 b Fx(in)g Fw(e)p Fx(,)h Ft(x)g Fx(in)f(mg\).)921
39829 y(Begr\374nde,)479 b(w)-36 b(arum)480 b(es)f(b)36
b(ei)480 b(dieser)f(Mo)36 b(dellierung)480 b(durc)-36
b(h)478 b(eine)i(P)-36 b(olynomfunktion)480 b(drit-)921
41821 y(ten)492 b(Grades)f(genau)h(eine)h(Stelle)f(gibt,)h(b)36
b(ei)492 b(der)g(die)g(F)-108 b(unktion)491 b(v)-36 b(on)493
b(einem)f(degressiv)-36 b(en)921 43813 y(K)g(osten)g(v)g(erlauf)434
b(in)g(einen)f(progressiv)-36 b(en)434 b(K)-36 b(osten)g(v)g(erlauf)434
b(\374b)36 b(ergeh)-36 b(t.)p 1 0 0 TeXcolorrgb 921 46359
a(Der)528 b(\334b)36 b(ergang)527 b(v)-36 b(on)528 b(einem)f(degressiv)
-36 b(en)528 b(in)f(einen)g(progressiv)-36 b(en)528 b(K)-36
b(osten)g(v)g(erlauf)528 b(\(die)921 48351 y(K)-36 b(ostenk)g(ehre\))
404 b(der)f(F)-108 b(unktion)404 b Ft(K)499 b Fx(wird)404
b(durc)-36 b(h)403 b Ft(K)25899 47868 y Fp(00)26464 48351
y Fv(\()p Ft(x)p Fv(\))369 b(=)g(6)235 b Fu(\001)g Ft(a)g
Fu(\001)g Ft(x)g Fv(+)g(2)g Fu(\001)g Ft(b)369 b Fv(=)g(0)404
b Fx(b)36 b(erec)-36 b(hnet.)921 50342 y Fv(6)268 b Fu(\001)g
Ft(a)g Fu(\001)g Ft(x)g Fv(+)f(2)i Fu(\001)f Ft(b)369
b Fv(=)f(0)421 b Fx(ist)f(\(f\374r)g Ft(a)369 b(>)f Fv(0)p
Fx(\))421 b(eine)f(lineare)h(Gleic)-36 b(h)g(ung)419
b(mit)h(genau)h(einer)f(L\366sung)921 52778 y(b)36 b(ei)434
b Ft(x)369 b Fv(=)f Fu(\000)7577 51879 y Ft(b)p 6707
52468 2293 45 v 6707 53689 a Fv(3)296 b Fu(\001)f Ft(a)9133
52778 y Fx(,)434 b(w)-36 b(ob)36 b(ei)434 b Ft(K)14815
52296 y Fp(000)15857 50829 y Fd( )16733 52778 y Fu(\000)18769
51879 y Ft(b)p 17899 52468 V 17899 53689 a Fv(3)296 b
Fu(\001)f Ft(a)20325 50829 y Fd(!)21570 52778 y Fv(=)369
b(6)295 b Fu(\001)g Ft(a)369 b Fu(6)p Fv(=)g(0)p Fx(.)921
55132 y(Daraus)434 b(folgt,)h(dass)f(es)f(n)-36 b(ur)433
b(eine)g(K)-36 b(ostenk)g(ehre)434 b(gibt.)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 29316 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 31308 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 58865
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(57)p 0 TeXcolorgray
eop end
%%Page: 58 58
TeXDict begin 58 57 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(7)f(W)-179
b(endepunkt)714 b(-)j(O)-60 b(A)718 b(-)g(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(75.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)296
b(sind)h(die)g(F)-108 b(unktion)296 b Ft(f)439 b Fx(mit)297
b(der)f(Gleic)-36 b(h)g(ung)296 b Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))369 b(=)31878 4277 y Fq(1)p 31878 4491 471
45 v 31878 5259 a(4)32482 4800 y Ft(x)33221 4318 y Fq(3)34042
4800 y Fv(+)35481 4277 y Fq(3)p 35481 4491 V 35481 5259
a(2)36085 4800 y Ft(x)36824 4318 y Fq(2)37645 4800 y
Fv(+)295 b(4)p Ft(x)g Fv(+)g(5)i Fx(so)-36 b(wie)921
6792 y(die)433 b(Gleic)-36 b(h)g(ung)433 b(der)g(dritten)g
(Ableitungsfunktion)g Ft(f)27769 6310 y Fp(000)28590
6792 y Fv(\()p Ft(x)p Fv(\))369 b(=)32223 6269 y Fq(3)p
32223 6482 V 32223 7250 a(2)33196 6792 y Fu(6)p Fv(=)f(0)p
Fx(.)921 11330 y(Berec)-36 b(hne)433 b(die)g(K)-36 b(o)36
b(ordinaten)434 b(des)f(W)-108 b(endepunktes)432 b(der)h(F)-108
b(unktion)433 b Ft(f)142 b Fx(.)p 1 0 0 TeXcolorrgb 921
13875 a Ft(f)1704 13393 y Fp(00)2270 13875 y Fv(\()p
Ft(x)p Fv(\))368 b(=)5903 13352 y Fq(3)p 5903 13565 V
5903 14333 a(2)6506 13875 y Ft(x)295 b Fv(+)g(3)370 b(=)e(0)i
Fu(\))f Ft(x)g Fv(=)g Fu(\000)p Fv(2)921 16420 y Ft(f)142
b Fv(\()p Fu(\000)p Fv(2\))369 b(=)6281 15897 y Fq(1)p
6281 16111 V 6281 16879 a(4)7180 16420 y Fu(\001)295
b Fv(\()p Fu(\000)p Fv(8\))g(+)12274 15897 y Fq(3)p 12274
16111 V 12274 16879 a(2)13173 16420 y Fu(\001)g Fv(4)g(+)g(4)h
Fu(\001)f Fv(\()p Fu(\000)p Fv(2\))g(+)g(5)369 b(=)g(1)g
Fu(\))921 18966 y Fx(Die)434 b(K)-36 b(o)36 b(ordinaten)434
b(des)f(W)-108 b(endepunktes)432 b(lauten)i(daher)f Ft(W)549
b Fv(=)369 b(\()p Fu(\000)p Fv(2)p Fu(j)p Fv(1\))p Fx(.)921
21511 y(Die)318 b(A)-36 b(ufgab)36 b(e)317 b(gilt)h(n)-36
b(ur)316 b(dann)h(als)h(gel\366st,)g(w)-36 b(enn)317
b(b)36 b(eide)317 b(K)-36 b(o)36 b(ordinaten)317 b(des)g(W)-108
b(endepunktes)921 23503 y(k)-36 b(orrekt)434 b(angegeb)36
b(en)434 b(sind.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 27237 54804 45 v -2331
32538 a Fy(AN)1049 b(3.3)g(-)g(8)g(Ber\374hrung)d(zw)-60
b(eier)1049 b(F)-179 b(unktionsgraphen)1044 b(-)1050
b(MC)f(-)-2331 35560 y(BIFIE)p 0 TeXcolorgray -1391 38868
a Fx(76.)p 0 TeXcolorgray 651 w(Die)632 b(Graphen)d(zw)-36
b(eier)632 b(F)-108 b(unktionen)630 b Ft(f)773 b Fx(und)630
b Ft(g)679 b Fx(b)36 b(er\374hren)629 b(einander)i(im)g(Punkt)f
Ft(P)887 b Fv(=)769 40860 y(\()p Ft(x)2014 41059 y Fq(1)2540
40860 y Ft(=y)3824 41059 y Fq(1)4350 40860 y Fv(\))p
Fx(.)419 b(F)-27 b(\374r)417 b(die)i(F)-108 b(unktion)418
b Ft(f)561 b Fx(gilt:)419 b(Die)h(T)-108 b(angen)-36
b(te)418 b(P)h(sc)-36 b(hlie\377t)419 b(mit)f(der)g(x-A)-36
b(c)g(hse)419 b(einen)855 42852 y(Wink)-36 b(el)434 b(v)-36
b(on)434 b Fv(45)9055 42370 y Fp(\016)10015 42852 y Fx(ein)g(und)e(hat)
h(einen)h(p)36 b(ositiv)-36 b(en)434 b(Anstieg.)855 45397
y(W)-108 b(elc)-36 b(he)666 b(der)g(angef\374hrten)g(A)-36
b(ussagen)666 b(folgen)i(jedenfalls)f(aus)g(diesen)f(Bedingungen?)921
47389 y(Kreuze)433 b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36
b(ussagen)434 b(an!)p 15396 48356 15593 45 v 15396 51574
45 3219 v 16104 50297 a Ft(f)142 b Fv(\()p Ft(x)18132
50496 y Fq(1)18658 50297 y Fv(\))369 b(=)f Ft(g)48 b
Fv(\()p Ft(x)22829 50496 y Fq(1)23354 50297 y Fv(\))p
28579 51574 V 1 0 0 TeXcolorrgb 5427 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 30944 51574 V 15396
51618 15593 45 v 15396 54836 45 3219 v 16104 53559 a
Ft(f)16887 53077 y Fp(0)17198 53559 y Fv(\()p Ft(x)18443
53758 y Fq(1)18968 53559 y Fv(\))369 b(=)g Ft(g)48 b
Fv(\()p Ft(x)23140 53758 y Fq(1)23665 53559 y Fv(\))p
28579 54836 V 30944 54836 V 15396 54880 15593 45 v 15396
58099 45 3219 v 16104 56822 a Ft(f)142 b Fv(\()p Ft(x)18132
57021 y Fq(1)18658 56822 y Fv(\))369 b(=)f(1)p 28579
58099 V 30944 58099 V 15396 58143 15593 45 v 15396 61361
45 3219 v 16104 60084 a Ft(g)16775 59602 y Fp(0)17085
60084 y Fv(\()p Ft(x)18330 60283 y Fq(1)18856 60084 y
Fv(\))h(=)f(1)p 28579 61361 V 1 0 0 TeXcolorrgb 7526
w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
30944 61361 V 15396 61405 15593 45 v 15396 64623 45 3219
v 16104 63346 a Ft(f)16887 62864 y Fp(0)17198 63346 y
Fv(\()p Ft(x)18443 63545 y Fq(1)18968 63346 y Fv(\))h(=)g
Ft(g)21895 62864 y Fp(0)22205 63346 y Fv(\()p Ft(x)23450
63545 y Fq(1)23976 63346 y Fv(\))f(=)h Fu(\000)p Fv(1)p
28579 64623 V 30944 64623 V 15396 64668 15593 45 v 47992
38868 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 40860 a Fr(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
68696 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(58)p
0 TeXcolorgray eop end
%%Page: 59 59
TeXDict begin 59 58 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(9)f(W)-179
b(endestelle)714 b(-)k(MC)g(-)g(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(77.)p 0 TeXcolorgray 651 w(Ein)338 b(Bec)-36
b(k)g(en)338 b(wird)g(mit)g(W)-108 b(asser)338 b(gef\374llt.)h(Die)g
(in)f(das)f(Bec)-36 b(k)g(en)338 b(zu\035ie\377ende)g(W)-108
b(assermenge,)921 6792 y(angegeb)36 b(en)636 b(in)g Ft(m)10304
6310 y Fq(3)11466 6792 y Fx(pro)g(Stunde,)f(kann)h(im)g(In)-36
b(terv)-72 b(all)637 b Fv([)8 b(0;)221 b(8\))637 b Fx(durc)-36
b(h)635 b(die)h(F)-108 b(unktion)635 b Ft(f)921 8784
y Fx(b)36 b(esc)-36 b(hrieb)36 b(en)432 b(w)-36 b(erden.)434
b(Die)g(F)-108 b(unktion)433 b Ft(f)575 b Fx(hat)434
b(an)f(der)g(Stelle)h Ft(t)369 b Fv(=)f(4)434 b Fx(eine)g(W)-108
b(endestelle.)p 0 TeXcolorgray 0 TeXcolorgray 5417 36136
a
 currentpoint currentpoint translate 1.19499 1.19499 scale neg exch
neg exch translate
 5417 36136 a 5417 36136 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 272.01768 a add def
/d 0.0 a add neg def /h 191.4282 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 36136 a 7238 33768 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 255.5741  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 255.5741  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 170.03743  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.03743
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 255.5741
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 170.03743  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 170.03743  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 255.5741  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 170.03743
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 255.5741
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
5993 34053 a Fq(0)5992 30904 y(1)5992 27754 y(2)5992
24605 y(3)5992 21455 y(4)5992 18305 y(5)7003 35114 y(0)2679
b(1)g(2)h(3)g(4)f(5)h(6)g(7)f(8)7238 33768 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7238 33768
a 7238 33768 a
tx@Dict begin  { 255.5741 170.03743 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7238 33768 a 7238 33768 a
tx@Dict begin  { 5.0 28.72252 8.26648 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7238 33768 a
5648 34226 a Fx(t)433 b(in)h(h)7238 33768 y
tx@Dict begin  PutEnd  end
 7238 33768
a 7238 33768 a
tx@Dict begin  PutEnd  end
 7238 33768 a 7238 33768 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7238 33768 a
7238 33768 a
tx@Dict begin  { 0.0 0.0 pop 255.5741 170.03743 exch pop } PutCoor
PutBegin  end
 7238 33768 a 7238 33768 a
tx@Dict begin  { 5.0 65.74617 9.51021 3.0 -40.  Uput UUput } PutCoor
PutBegin  end
 7238 33768 a 3599
34128 a Ft(f)142 b Fv(\()p Ft(t)p Fv(\))432 b Fx(in)i
Ft(m)8952 33646 y Fq(3)9477 34128 y Ft(=h)7238 33768
y
tx@Dict begin  PutEnd  end
 7238 33768 a 7238 33768 a
tx@Dict begin  PutEnd  end
 7238 33768 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (0.014970220434915651*x^(3.0)-0.17913968982498327*x^(2.0)-0.02502066476408853*x+5.017520661157025)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 35529 36136 a
currentpoint initclip moveto
 35529 36136 a
5417 36136 a
 currentpoint currentpoint translate 1 1.19499 div 1 1.19499 div scale
neg exch neg exch translate
 5417 36136 a 921 41780 a Fx(Kreuze)f(die)h(f\374r)f(die)h
(F)-108 b(unktion)433 b Ft(f)575 b Fx(zutre\033ende\(n\))431
b(A)-36 b(ussage\(n\))433 b(an!)p 1062 42821 44260 45
v 1062 48031 45 5211 v 1770 44762 a(An)390 b(der)e(Stelle)i
Ft(t)369 b Fv(=)f(4)390 b Fx(geh)-36 b(t)389 b(die)g(Linkskr\374mm)-36
b(ung)389 b Fv(\()p Ft(f)28587 44280 y Fp(00)29153 44762
y Fv(\()p Ft(t)p Fv(\))368 b Ft(>)h Fv(0\))389 b Fx(in)h(eine)f(Rec)-36
b(h)g(ts-)1770 46754 y(kr\374mm)g(ung)433 b Fv(\()p Ft(f)9635
46272 y Fp(00)10201 46754 y Fv(\()p Ft(t)p Fv(\))368
b Ft(<)h Fv(0\))433 b Fx(\374b)36 b(er.)p 42912 48031
V 45277 48031 V 1062 48075 44260 45 v 1062 53285 45 5211
v 1770 50016 a(An)390 b(der)e(Stelle)i Ft(t)369 b Fv(=)f(4)390
b Fx(geh)-36 b(t)389 b(die)g(Rec)-36 b(h)g(tskr\374mm)g(ung)389
b Fv(\()p Ft(f)29274 49534 y Fp(00)29839 50016 y Fv(\()p
Ft(t)p Fv(\))368 b Ft(<)h Fv(0\))390 b Fx(in)f(eine)g(Links-)1770
52008 y(kr\374mm)-36 b(ung)433 b Fv(\()p Ft(f)9635 51526
y Fp(00)10201 52008 y Fv(\()p Ft(t)p Fv(\))368 b Ft(>)h
Fv(0\))433 b Fx(\374b)36 b(er.)p 42912 53285 V 1 0 0
TeXcolorrgb 43621 51012 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 53285 V 1062 53329 44260
45 v 1062 56400 45 3071 v 1770 55197 a Fx(Der)419 b(W)-108
b(ert)418 b(der)g(zw)-36 b(eiten)418 b(Ableitung)g(der)g(F)-108
b(unktion)417 b Ft(f)561 b Fx(an)418 b(der)g(Stelle)g(4)h(ist)f(n)-36
b(ull.)p 42912 56400 V 1 0 0 TeXcolorrgb 1373 w Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
56400 V 1062 56444 44260 45 v 1062 59662 45 3219 v 1770
58385 a Fx(Es)434 b(gilt)g Ft(f)6697 57903 y Fp(00)7263
58385 y Fv(\()p Ft(t)p Fv(\))368 b Ft(>)h Fv(0)434 b
Fx(f\374r)f Ft(t)369 b(>)g Fv(4)p Fx(.)p 42912 59662
V 1 0 0 TeXcolorrgb 26753 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 59662 V 1062 59707
44260 45 v 1062 62770 45 3064 v 1770 61567 a Fx(F)-27
b(\374r)433 b Ft(t)369 b(>)f Fv(4)434 b Fx(sinkt)g(die)g(pro)f(Stunde)f
(zu\035ie\377ende)h(W)-108 b(assermenge.)p 42912 62770
V 1 0 0 TeXcolorrgb 43621 61570 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 62770 V 1062 62814
44260 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 66842 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(59)p 0 TeXcolorgray eop end
%%Page: 60 60
TeXDict begin 60 59 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(10)f(Lokales)f(Maxim)
-60 b(um)718 b(-)f(L)-179 b(T)717 b(-)h(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(78.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(P)-36 b(olynomfunktion)435 b Ft(f)142 b
Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 5417 30089 a
 currentpoint currentpoint translate 1.1411 1.1411 scale neg exch neg
exch translate
 5417
30089 a 5417 30089 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 284.86345 a add def
/d 0.0 a add neg def /h 165.73886 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 30089 a 7879 27412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 262.6278  0 -22.23564  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -22.23564
 262.6278  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.18196  def /maxTickline 141.5569  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 141.5569
0.0 -24.18196   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 262.6278
0.0 -22.23564 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 141.5569  0 -24.18196  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -24.18196
 141.5569  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.23564  def /maxTickline 262.6278  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 141.5569
0.0 -24.18196   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 262.6278
0.0 -22.23564 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7879 27412 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7879
27412 a 7879 27412 a
tx@Dict begin  { 262.6278 141.5569 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 7879 27412 a 7879 27412 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7879 27412
a 7536 27698 a Fx(x)7879 27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412
a
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7879 27412 a 7879 27412 a
tx@Dict begin  { 0.0 0.0 pop 262.6278 141.5569 exch pop } PutCoor PutBegin
 end

7879 27412 a 7879 27412 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7879 27412 a 6831 27744 a Fx(f\(x\))7879
27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  PutEnd  end
 7879 27412 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.7814904010589985 def /x1 9.230315974383739
def /dx x1 x sub 199 div def /F@pstplot (-0.08682831909928161*x^(3.0)+0.9239298007232759*x^(2.0)-2.084425983432184*x+2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 161.805 115.44426 161.805 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial
7879 27412 a
tx@Dict begin  { 159.47272 -2.16989 } PutCoor PutBegin  end
 7879 27412 a 572 x Ft(x)8618 28183 y Fq(1)7879
27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 7879 27412 a
tx@Dict begin  { -9.28699 85.01567 } PutCoor PutBegin  end
 7879 27412 a -172 x
Fl(f)7879 27412 y
tx@Dict begin  PutEnd  end
 7879 27412 a 36951 30089 a
currentpoint initclip moveto
 36951 30089
a 5417 30089 a
 currentpoint currentpoint translate 1 1.1411 div 1 1.1411 div scale
neg exch neg exch translate
 5417 30089 a 921 36066 a Fx(Erg\344nze)358
b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f
(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360
b(ric)-36 b(h)g(tigen)921 38057 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)855 41548 y(W)-108
b(enn)p 4706 41548 3150 45 v 8327 41500 a(1)7855 41548
y Fo(\015)p 9449 41548 V 3533 w Fx(ist)383 b(und)p 17512
41548 V 21134 41500 a(2)20662 41548 y Fo(\015)p 22256
41548 V 3532 w Fx(ist,)h(b)36 b(esitzt)382 b(die)h(gegeb)36
b(ene)383 b(F)-108 b(unktion)382 b Ft(f)921 43540 y Fx(an)433
b(der)g(Stelle)h Ft(x)9247 43739 y Fq(1)10207 43540 y
Fx(ein)f(lokales)j(Maxim)-36 b(um.)p 0 TeXcolorgray 0
TeXcolorgray 11174 44912 9986 45 v 11174 47996 45 3085
v 15842 46693 a(1)15370 46741 y Fo(\015)p 21115 47996
V 11174 48041 9986 45 v 11174 51374 45 3334 v 11883 50097
a Ft(f)12666 49615 y Fp(0)12976 50097 y Fv(\()p Ft(x)14221
50296 y Fq(1)14747 50097 y Fv(\))369 b Ft(<)f Fv(0)p
18750 51374 V 19459 50039 a Fn(2)p 21115 51374 V 11174
51418 9986 45 v 11174 54751 45 3334 v 11883 53474 a Ft(f)12666
52992 y Fp(0)12976 53474 y Fv(\()p Ft(x)14221 53673 y
Fq(1)14747 53474 y Fv(\))h(=)f(0)p 18750 54751 V 1 0 0
TeXcolorrgb 19459 53416 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 21115 54751 V 11174 54795
9986 45 v 11174 58128 45 3334 v 11883 56851 a Ft(f)12666
56369 y Fp(0)12976 56851 y Fv(\()p Ft(x)14221 57050 y
Fq(1)14747 56851 y Fv(\))h Ft(>)f Fv(0)p 18750 58128
V 19459 56794 a Fn(2)p 21115 58128 V 11174 58172 9986
45 v 0 TeXcolorgray 0 TeXcolorgray 30427 44912 9808 45
v 30427 47996 45 3085 v 35005 46693 a Fx(2)34533 46741
y Fo(\015)p 40190 47996 V 30427 48041 9808 45 v 30427
51374 45 3334 v 31135 50097 a Ft(f)31918 49615 y Fp(00)32484
50097 y Fv(\()p Ft(x)33729 50296 y Fq(1)34255 50097 y
Fv(\))g Ft(<)h Fv(0)p 37824 51374 V 1 0 0 TeXcolorrgb
38533 50039 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 40190 51374 V 30427 51418 9808 45 v 30427
54751 45 3334 v 31135 53474 a Ft(f)31918 52992 y Fp(00)32484
53474 y Fv(\()p Ft(x)33729 53673 y Fq(1)34255 53474 y
Fv(\))f(=)h(0)p 37824 54751 V 38533 53416 a Fn(2)p 40190
54751 V 30427 54795 9808 45 v 30427 58128 45 3334 v 31135
56851 a Ft(f)31918 56369 y Fp(00)32484 56851 y Fv(\()p
Ft(x)33729 57050 y Fq(1)34255 56851 y Fv(\))f Ft(>)h
Fv(0)p 37824 58128 V 38533 56794 a Fn(2)p 40190 58128
V 30427 58172 9808 45 v 47992 4800 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 6792 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 62200 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(60)p 0 TeXcolorgray
eop end
%%Page: 61 61
TeXDict begin 61 60 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(11)f(P\035anzen)-60
b(w)g(ac)g(hstum)716 b(-)i(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-1391 4800 a Fx(79.)p 0 TeXcolorgray 651 w(Die)529 b(H\366he)g
Ft(h)g Fx(\(in)f(cm\))h(v)-36 b(on)529 b(drei)f(v)-36
b(ersc)g(hiedenen)528 b(P\035anzen)g(in)h(Abh\344ngigk)-36
b(eit)529 b(v)-36 b(on)530 b(der)921 6792 y(Zeit)560
b Ft(t)g Fx(\(in)h(T)-108 b(agen\))560 b(wurde)g(\374b)36
b(er)560 b(einen)g(l\344neren)g(Zeitraum)g(b)36 b(eobac)-36
b(h)g(tet)560 b(und)f(mittels)921 8784 y(geeigneter)445
b(F)-108 b(unktionen)443 b Ft(h)14680 8983 y Fq(1)15650
8784 y Fx(\(f\374r)h(die)g(P\035anze)g(1\),)h Ft(h)27624
8983 y Fq(2)28594 8784 y Fx(\(f\374r)f(die)h(P\035anze)f(2\))g(und)f
Ft(h)42819 8983 y Fq(3)43789 8784 y Fx(\(f\374r)921 10776
y(die)542 b(P\035anze)g(3\))g(mo)36 b(delliert.)544 b(Die)f(nac)-36
b(hstehende)541 b(Abbildung)g(zeigt)i(die)f(Graphen)f(der)921
12768 y(drei)433 b(F)-108 b(unktionen)433 b Ft(h)11118
12967 y Fq(1)11643 12768 y Ft(;)221 b(h)12974 12967 y
Fq(2)13934 12768 y Fx(und)432 b Ft(h)17284 12967 y Fq(3)17810
12768 y Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 5418 43364
a
 currentpoint currentpoint translate 0.53987 0.53987 scale neg exch
neg exch translate
 5418 43364 a 5418 43364 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 602.07489 a add def
/d 0.0 a add neg def /h 478.01093 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5418 43364 a 8782 39256 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 17 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 571.68323 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 22 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 440.89421 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 571.68323  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 571.68323  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 440.89421  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 440.89421
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 571.68323
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 440.89421  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 440.89421  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 571.68323  def /dT 3729358 abs 65536 div viceversa
{ neg } if def /DT 2. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 440.89421
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 571.68323
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 7537 39541 a Fq(0)7537 33242
y(2)7537 26942 y(4)7537 20643 y(6)7537 14344 y(8)7067
8045 y(10)7067 1746 y(12)7067 -4554 y(14)8547 40601 y(0)2680
b(1)f(2)h(3)g(4)f(5)h(6)f(7)h(8)g(9)2444 b(10)2210 b(11)f(12)h(13)f(14)
h(15)g(16)f(17)h(18)f(19)8782 39256 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8782 39256 a 8782
39256 a
tx@Dict begin  { 571.68323 440.89421 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 5.0 86.49237 9.0 3.0 140.  Uput UUput } PutCoor PutBegin
 end
 8782 39256 a 3995 39588
a Fx(Zeit)434 b(t)f(\(in)g(T)-108 b(agen\))8782 39256
y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end

8782 39256 a 8782 39256 a
tx@Dict begin  { 0.0 0.0 pop 571.68323 440.89421 exch pop } PutCoor
PutBegin  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 5.0 78.65541 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 8782
39256 a 4429 39588 a Fx(H\366he)434 b(h)f(\(in)g(cm\))8782
39256 y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  PutEnd  end
 8782 39256 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (-0.04210203007154861*x^(2.0)+1.4097473919609318*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (-0.004513999874025487*x^(3.0)+0.12102207500187186*x^(2.0)-0.05864538379486307*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 17 def /dx x1 x sub 199
div def /F@pstplot (0.0418190236099568*x^(2.0)-0.015434862840929712*x+0.5871243270871337)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 8782 39256 a
tx@Dict begin  { 244.19101 308.62039 } PutCoor PutBegin  end
 8782
39256 a 922 x Ft(h)9531 40377 y Fq(3)8782 39256 y
tx@Dict begin  PutEnd  end
 8782
39256 a 8782 39256 a
tx@Dict begin  { 276.11916 249.32489 } PutCoor PutBegin  end
 8782 39256 a 922 x Ft(h)9531 40377
y Fq(2)8782 39256 y
tx@Dict begin  PutEnd  end
 8782 39256 a 8782 39256 a
tx@Dict begin  { 375.55267 261.18425 } PutCoor PutBegin  end
 8782 39256
a 922 x Ft(h)9531 40377 y Fq(1)8782 39256 y
tx@Dict begin  PutEnd  end
 8782 39256
a 72065 43364 a
currentpoint initclip moveto
 72065 43364 a 5418 43364 a
 currentpoint currentpoint translate 1 0.53987 div 1 0.53987 div scale
neg exch neg exch translate
 5418 43364
a 921 49008 a Fx(Kreuze)g(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)
-36 b(ussagen)434 b(an!)p 1062 49975 44260 45 v 1062
53193 45 3219 v 1770 51916 a(Der)g(Graph)f(der)g(F)-108
b(unktion)433 b Ft(h)16872 52115 y Fq(1)17831 51916 y
Fx(ist)g(im)h(In)-36 b(terv)-72 b(all)434 b([1;5])h(links)g(gekr\374mm)
-36 b(t.)p 42912 53193 V 1 0 0 TeXcolorrgb 4893 w Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
53193 V 1062 53238 44260 45 v 1062 58116 45 4878 v 1770
55179 a Fx(Die)357 b(W)-108 b(ac)-36 b(hstumsgesc)g(h)g(windigk)g(eit)
356 b(v)-36 b(on)356 b(P\035anze)f(1)h(nimm)-36 b(t)356
b(im)f(In)-36 b(terv)-72 b(all)357 b([11;13])1770 57171
y(ab.)p 42912 58116 V 45277 58116 V 1062 58160 44260
45 v 1062 63296 45 5137 v 1770 60101 a(W)-36 b(\344hrend)433
b(des)h(Beobac)-36 b(h)g(tungszeitraums)432 b([0;17])k(nimm)-36
b(t)433 b(die)g(W)-108 b(ac)-36 b(hstumsge-)1770 62093
y(sc)g(h)g(windigk)g(eit)435 b(v)-36 b(on)433 b(P\035anze)h(2)g
(st\344ndig)f(zu.)p 42912 63296 V 45277 63296 V 1062
63340 44260 45 v 1062 66558 45 3219 v 1770 65281 a(F)-27
b(\374r)433 b(alle)i(W)-108 b(erte)433 b Ft(t)369 b Fu(2)f
Fv([)8 b(0;)221 b(17])436 b Fx(gilt)e Ft(h)19320 64799
y Fp(00)19320 65610 y Fq(3)19886 65281 y Fv(\()p Ft(t)p
Fv(\))368 b Fu(\024)h Fv(0)p 42912 66558 V 1 0 0 TeXcolorrgb
19833 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45277 66558 V 1062 66603 44260 45 v 1062
69821 45 3219 v 1770 68544 a Fx(F)-27 b(\374r)433 b(alle)i(W)-108
b(erte)433 b Ft(t)369 b Fu(2)f Fv([)8 b(3;)221 b(8])435
b Fx(gilt)g Ft(h)18670 68062 y Fp(0)18670 68872 y Fq(1)19195
68544 y Fv(\()p Ft(t)p Fv(\))369 b Ft(<)f Fv(0)p 42912
69821 V 45277 69821 V 1062 69865 44260 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)h(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
73893 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(61)p
0 TeXcolorgray eop end
%%Page: 62 62
TeXDict begin 62 61 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)978 b(3.3)f(-)h(12)g(Lokale)f
(Eigensc)-60 b(haften)976 b(einer)g(F)-179 b(unktion)975
b(-)j(ZO)g(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray -1391
7823 a Fx(80.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(der)f(Graph)f(einer)h(F)-108 b(unktion)433 b
Ft(f)142 b Fx(.)921 10368 y(Die)406 b(eingezeic)-36 b(hneten)405
b(Punkte)h Ft(A;)221 b(B)67 b(;)221 b(C)23 b(;)221 b(D)36
b(;)221 b(E)78 b(;)221 b(F)36 b(;)221 b(G;)g(H)512 b
Fx(und)404 b Ft(I)510 b Fx(liegen)406 b(auf)g(dem)g(F)-108
b(unkti-)921 12360 y(onsgraphen;)313 b(w)-36 b(eiters)314
b(sind)e(die)i(T)-108 b(angen)-36 b(ten)312 b(in)h(A)p
Ft(;)221 b(C)23 b(;)221 b(E)392 b Fx(und)312 b Ft(G)h
Fx(eingetragen;)h(in)f Ft(B)67 b(;)221 b(D)36 b(;)221
b(H)921 14352 y Fx(und)432 b Ft(I)538 b Fx(ist)434 b(die)f(T)-108
b(angen)-36 b(te)433 b(horizon)-36 b(tal)434 b(\(w)-36
b(aagrec)g(h)g(t\).)p 0 TeXcolorgray 0 TeXcolorgray 2218
42009 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 382.85384 a add def
/d 0.0 a add neg def /h 209.84897 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2218 42009 a 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 279.41222 0.0 -103.44162 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 116.81055 0.0 -93.03842   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 279.41222  0 -103.44162  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -103.44162
 279.41222  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-93.03842  def /maxTickline 116.81055  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 116.81055
0.0 -93.03842   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 279.41222
0.0 -103.44162 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 116.81055  0 -93.03842  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -93.03842
 116.81055  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-103.44162  def /maxTickline 279.41222  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 116.81055
0.0 -93.03842   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 279.41222
0.0 -103.44162 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 13669 31710 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

13669 31710 a 13669 31710 a
tx@Dict begin  { 279.41222 116.81055 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 13669 31710 a 13669 31710
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 13669 31710 a 13326 31996 a Fx(x)13669 31710 y
tx@Dict begin  PutEnd  end
 13669
31710 a 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a 13669 31710 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 13669
31710 a 13669 31710 a
tx@Dict begin  { 0.0 0.0 pop 279.41222 116.81055 exch pop } PutCoor
PutBegin  end
 13669 31710 a 13669 31710 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 13669
31710 a 13326 31867 a Fx(y)13669 31710 y
tx@Dict begin  PutEnd  end
 13669 31710
a 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 9.820220603907824 def
/dx x1 x sub 199 div def /F@pstplot (-5.555110798399976E-4*x^(6.0)+0.019850289694066662*x^(5.0)-0.2687826512955311*x^(4.0)+1.703233896493089*x^(3.0)-4.815576026222835*x^(2.0)+3.5949090632028415*x+2.147480666169065)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.6355667060082197 def /x1 2 def
/dx x1 x sub 199 div def /F@pstplot (-0.007933237741692101*x^(5.0)-0.021919040655537094*x^(4.0)-0.13556938065418442*x^(3.0)-0.22315688536656297*x^(2.0)+0.6692093264838113*x+1.2433321919548455)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.5 def /x1 -2.5 def /dx x1 x sub
49 div def /F@pstplot ((-6.453782600701254-2.4979275335670845*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.8 def /x1 0.6 def /dx x1 x sub
49 div def /F@pstplot ((--1.2707402119495215--0.803770489476355*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 1 def /x1 2.1 def /dx x1 x sub 49
div def /F@pstplot ((--3.8502573771817783-1.8049947678049099*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 2 def /x1 3.5 def /dx x1 x sub 49
div def /F@pstplot ((--2.745588972279339-1.5273264011153778*x)/1.)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 313.9644
102.25204   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 325.33316 68.75356 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fl(J)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 226.3846
-38.55681   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 224.77649 -35.36969 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fl(I)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ 113.30562
-64.6521   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 110.96552 -61.534 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fl(H)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 76.77238 -39.13684
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 79.17456 -35.90369 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fl(G)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 46.43585 25.73405
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { 48.7386 28.70628 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fl(E)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 56.90549 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 58.88393 3.07597 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fl(F)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 0  setrgbcolor  [ -85.35823
29.59065   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { -82.08296 35.11397 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fl(A)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -19.31291 20.63275
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { -24.41467 26.03624 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fl(C)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a 13669 31710 a
tx@Dict begin  { -99.5846 85.35823 } PutCoor PutBegin  end
 13669 31710 a -259 x Ft(f)13669
31710 y
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -56.90549 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
13669 31710 a
tx@Dict begin  { -59.75093 -8.5359 } PutCoor PutBegin  end
 13669 31710 a 0 0 0 TeXcolorrgb Fl(B)p
0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end
 13669 31710 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 22.50612 44.24162
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 13669 31710 a
tx@Dict begin  { 22.76227 47.3949 } PutCoor PutBegin  end
 13669 31710 a
0 0 0 TeXcolorrgb Fl(D)p 0 TeXcolorgray 13669 31710 a
tx@Dict begin  PutEnd  end

13669 31710 a 44599 42009 a
currentpoint initclip moveto
 44599 42009 a 921 45993 a
Fx(Ordne)432 b(den)h(angegeb)36 b(enen)434 b(Eigensc)-36
b(haften)433 b(jew)-36 b(eils)435 b(einen)e(der)g(markierten)h(Punkte)f
(zu.)p 0 TeXcolorgray 0 TeXcolorgray 4666 47590 18684
45 v 23350 47590 4523 45 v 4666 50923 45 3334 v 5374
49646 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b Ft(<)g
Fv(0)p Fx(,)434 b Ft(f)11886 49164 y Fp(0)12196 49646
y Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)p Fx(,)434 b Ft(f)17925
49164 y Fp(00)18491 49646 y Fv(\()p Ft(x)p Fv(\))368
b Ft(<)h Fv(0)p 23305 50923 V 0.9 TeXcolorgray 23350
50923 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 25092
49771 a Fx(D)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 27828 50923 45 3334 v 4666 50967 18684 45
v 23350 50967 4523 45 v 4666 54300 45 3334 v 5374 53023
a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b Ft(>)g Fv(0)p
Fx(,)434 b Ft(f)11886 52541 y Fp(0)12196 53023 y Fv(\()p
Ft(x)p Fv(\))369 b Ft(>)g Fv(0)p Fx(,)434 b Ft(f)17925
52541 y Fp(00)18491 53023 y Fv(\()p Ft(x)p Fv(\))368
b(=)h(0)p 23305 54300 V 0.9 TeXcolorgray 23350 54300
4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 25119 53148
a Fx(C)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
27828 54300 45 3334 v 4666 54344 18684 45 v 23350 54344
4523 45 v 4666 57677 45 3334 v 5374 56400 a Ft(f)142
b Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)p Fx(,)434 b Ft(f)11886
55918 y Fp(0)12196 56400 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)p
Fx(,)434 b Ft(f)17925 55918 y Fp(00)18491 56400 y Fv(\()p
Ft(x)p Fv(\))368 b Ft(>)h Fv(0)p 23305 57677 V 0.9 TeXcolorgray
23350 57677 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
25128 56526 a Fx(B)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27828 57677 45 3334 v 4666 57722 18684
45 v 23350 57722 4523 45 v 4666 61055 45 3334 v 5374
59778 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b Ft(>)g
Fv(0)p Fx(,)434 b Ft(f)11886 59296 y Fp(0)12196 59778
y Fv(\()p Ft(x)p Fv(\))369 b Ft(<)g Fv(0)p Fx(,)434 b
Ft(f)17925 59296 y Fp(00)18491 59778 y Fv(\()p Ft(x)p
Fv(\))368 b Ft(>)h Fv(0)p 23305 61055 V 0.9 TeXcolorgray
23350 61055 4478 3334 v 0 TeXcolorgray 1 0 0 TeXcolorrgb
25077 59903 a Fx(A)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 27828 61055 45 3334 v 4666 61099 18684
45 v 23350 61099 4523 45 v 0 TeXcolorgray 0 TeXcolorgray
33159 47590 4567 45 v 37725 47590 2436 45 v 33159 50849
45 3260 v 0.92 TeXcolorgray 33203 50849 4478 3260 v 0
TeXcolorgray 34930 49771 a(A)p 37681 50849 45 3260 v
2484 w(A)p 40116 50849 V 33159 50893 4567 45 v 37725
50893 2436 45 v 33159 54152 45 3260 v 0.92 TeXcolorgray
33203 54152 4478 3260 v 0 TeXcolorgray 34981 53074 a(B)p
37681 54152 45 3260 v 2487 w(B)p 40116 54152 V 33159
54197 4567 45 v 37725 54197 2436 45 v 33159 57456 45
3260 v 0.92 TeXcolorgray 33203 57456 4478 3260 v 0 TeXcolorgray
34972 56378 a(C)p 37681 57456 45 3260 v 2478 w(C)p 40116
57456 V 33159 57500 4567 45 v 37725 57500 2436 45 v 33159
60759 45 3260 v 0.92 TeXcolorgray 33203 60759 4478 3260
v 0 TeXcolorgray 34945 59681 a(D)p 37681 60759 45 3260
v 2451 w(D)p 40116 60759 V 33159 60804 4567 45 v 37725
60804 2436 45 v 33159 64063 45 3260 v 0.92 TeXcolorgray
33203 64063 4478 3260 v 0 TeXcolorgray 34999 62985 a(E)p
37681 64063 45 3260 v 2505 w(E)p 40116 64063 V 33159
64107 4567 45 v 37725 64107 2436 45 v 33159 67366 45
3260 v 0.92 TeXcolorgray 33203 67366 4478 3260 v 0 TeXcolorgray
35017 66288 a(F)p 37681 67366 45 3260 v 2523 w(F)p 40116
67366 V 33159 67411 4567 45 v 37725 67411 2436 45 v 47992
7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
73778 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(62)p
0 TeXcolorgray eop end
%%Page: 63 63
TeXDict begin 63 62 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(13)f(F)-179
b(unktionseigensc)-60 b(haften)712 b(-)718 b(MC)g(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(81.)p 0 TeXcolorgray 651
w(Die)355 b(Abbildung)e(zeigt)h(den)f(Graphen)g(der)g
(Ableitungsfunktion)h Ft(f)34383 4318 y Fp(0)35047 4800
y Fx(einer)g(P)-36 b(olynomfunk-)921 6792 y(tion)434
b Ft(f)142 b Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 9974
41713 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 242.72269 a add def
/d 0.0 a add neg def /h 297.13525 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9974 41713 a 21058 29797 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 142.59714 0.0 -100.12555 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 9 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 189.4819 0.0 -107.65335   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 142.59714  0 -100.12555  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -100.12555
 142.59714  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-107.65335  def /maxTickline 189.4819  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 189.4819
0.0 -107.65335   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.59714
0.0 -100.12555 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 189.4819  0 -107.65335  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -107.65335
 189.4819  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-100.12555  def /maxTickline 142.59714  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 189.4819
0.0 -107.65335   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 142.59714
0.0 -100.12555 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19813 26932 a
Fq(1)19813 23783 y(2)19813 20633 y(3)19813 17484 y(4)19813
14334 y(5)19813 11184 y(6)19081 33186 y Fp(\000)p Fq(1)19081
36335 y Fp(\000)p Fq(2)19081 39485 y Fp(\000)p Fq(3)23972
31142 y(1)2680 b(2)g(3)f(4)-16584 b Fp(\000)p Fq(1)-4351
b Fp(\000)p Fq(2)f Fp(\000)p Fq(3)21058 29797 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 21058
29797 a 21058 29797 a
tx@Dict begin  { 142.59714 189.4819 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 21058 29797 a 21058 29797 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 21058
29797 a 20715 30083 a Fx(x)21058 29797 y
tx@Dict begin  PutEnd  end
 21058 29797
a 21058 29797 a
tx@Dict begin  PutEnd  end
 21058 29797 a 21058 29797 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 21058 29797
a 21058 29797 a
tx@Dict begin  { 0.0 0.0 pop 142.59714 189.4819 exch pop } PutCoor
PutBegin  end
 21058 29797 a 21058 29797 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 21058 29797
a 20715 29954 a Fx(y)21058 29797 y
tx@Dict begin  PutEnd  end
 21058 29797 a 21058
29797 a
tx@Dict begin  PutEnd  end
 21058 29797 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.519015652326958 def /x1 5.011717602655804
def /dx x1 x sub 199 div def /F@pstplot (-0.32497368781752023*x^(3.0)+1.004188921320476*x^(2.0)-0.08780357360374604*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
21058 29797 a
tx@Dict begin  { -42.51239 148.40569 } PutCoor PutBegin  end
 21058 29797 a -172 x Fl(f)21608 29312 y
Fc(0)21058 29797 y
tx@Dict begin  PutEnd  end
 21058 29797 a 36843 41713 a
currentpoint initclip moveto
 36843
41713 a 921 45366 a Fx(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p 2757 46333
40871 45 v 2757 49403 45 3071 v 3465 48200 a(Die)g(F)-108
b(unktion)433 b Ft(f)576 b Fx(hat)433 b(an)g(der)g(Stelle)h
Ft(x)369 b Fv(=)g(3)434 b Fx(einen)f(lokalen)i(Ho)36
b(c)-36 b(hpunkt.)p 41218 49403 V 1 0 0 TeXcolorrgb 1372
w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43583 49403 V 2757 49447 40871 45 v 2757 52665 45 3219
v 3465 51389 a Fx(Die)434 b(F)-108 b(unktion)433 b Ft(f)576
b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434 b([2;5])h(streng)f
(monoton)f(fallend.)p 41218 52665 V 43583 52665 V 2757
52710 40871 45 v 2757 55780 45 3071 v 3465 54577 a(Die)h(F)-108
b(unktion)433 b Ft(f)576 b Fx(hat)433 b(an)g(der)g(Stelle)h
Ft(x)369 b Fv(=)g(0)434 b Fx(einen)f(W)-108 b(endepunkt.)p
41218 55780 V 1 0 0 TeXcolorrgb 4912 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43583 55780 V 2757 55825
40871 45 v 2757 58895 45 3071 v 3465 57692 a Fx(Die)434
b(F)-108 b(unktion)433 b Ft(f)576 b Fx(hat)433 b(an)g(der)g(Stelle)h
Ft(x)369 b Fv(=)g(0)434 b Fx(eine)f(lokale)j(Extremstelle.)p
41218 58895 V 43583 58895 V 2757 58939 40871 45 v 2757
62157 45 3219 v 3465 60880 a(Die)e(F)-108 b(unktion)433
b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b([-2;0])h(links)f(gekr\374mm)-36 b(t.)p 41218 62157
V 43583 62157 V 2757 62202 40871 45 v 47992 4800 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 66230
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(63)p 0 TeXcolorgray
eop end
%%Page: 64 64
TeXDict begin 64 63 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(14)f(F)-179
b(unktionseigensc)-60 b(haften)712 b(-)718 b(MC)g(-)f(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(82.)p 0 TeXcolorgray 651
w(Gegeb)36 b(en)433 b(ist)h(eine)f(P)-36 b(olynomfunktion)435
b Ft(f)575 b Fx(mit)434 b(der)f(F)-108 b(unktionsgleic)-36
b(h)g(ung)p 0 TeXcolorgray 0 TeXcolorgray 14555 8453
a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))368 b(=)h Ft(a)295
b Fu(\001)g Ft(x)21219 7971 y Fq(3)22040 8453 y Fv(+)g
Ft(b)g Fu(\001)g Ft(x)25598 7971 y Fq(2)26420 8453 y
Fv(+)f Ft(c)h Fu(\001)h Ft(x)f Fv(+)g Ft(d)921 12105
y Fx(mit)434 b(den)e(P)-36 b(arametern)434 b Ft(a)368
b Fu(6)p Fv(=)h(0;)221 b Ft(a;)g(b;)g(c;)g(d)371 b Fu(2)e
Fj(R)p Fx(.)921 14651 y(Die)519 b(F)-108 b(unktion)517
b Ft(f)659 b Fx(hat)518 b(einen)g(Ho)36 b(c)-36 b(hpunkt)517
b(im)h(Punkt)f Ft(H)615 b Fv(=)512 b(\(2)p Ft(=)p Fv(2\))518
b Fx(und)f(einen)h(W)-108 b(ende-)921 16642 y(punkt)354
b(an)i(der)f(Stelle)g Ft(x)12728 16841 y Fq(2)13623 16642
y Fv(=)369 b Fu(\000)p Fv(1)p Fx(.)356 b(An)f(der)g(Stelle)h
Ft(x)25821 16841 y Fq(3)26715 16642 y Fv(=)369 b(3)356
b Fx(hat)f(die)g(Steigung)g(der)g(F)-108 b(unktion)921
18634 y(den)433 b(W)-108 b(ert)433 b(-9.)921 21180 y(Kreuze)g(die)h
(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433 b(an!)p
18079 22220 10226 45 v 18079 25438 45 3219 v 18787 24161
a Ft(f)19570 23679 y Fp(0)19881 24161 y Fv(\(3\))369
b(=)f Fu(\000)p Fv(9)p 25895 25438 V 1 0 0 TeXcolorrgb
1629 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
28261 25438 V 18079 25483 10226 45 v 18079 28701 45 3219
v 18787 27424 a Ft(f)142 b Fv(\(2\))369 b(=)g(0)p 25895
28701 V 28261 28701 V 18079 28745 10226 45 v 18079 31963
45 3219 v 18787 30686 a Ft(f)19570 30204 y Fp(00)20136
30686 y Fv(\()p Fu(\000)p Fv(1\))g(=)g(0)p 25895 31963
V 1 0 0 TeXcolorrgb 1373 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28261 31963 V 18079 32007
10226 45 v 18079 35226 45 3219 v 18787 33949 a Ft(f)19570
33467 y Fp(0)19881 33949 y Fv(\(2\))g(=)f(0)p 25895 35226
V 1 0 0 TeXcolorrgb 2662 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 28261 35226 V 18079 35270
10226 45 v 18079 38488 45 3219 v 18787 37211 a Ft(f)19570
36729 y Fp(00)20136 37211 y Fv(\(2\))h(=)g(0)p 25895
38488 V 28261 38488 V 18079 38532 10226 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)g(3.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331
42560 54804 45 v -2331 47862 a Fy(AN)718 b(3.3)f(-)h(15)f(Monotonie)f
(-)i(L)-179 b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391
51169 a Fx(83.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)433
b(ist)h(die)f(reelle)h(F)-108 b(unktion)433 b Ft(f)576
b Fx(mit)433 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f
Ft(x)27715 50687 y Fq(2)28537 51169 y Fu(\000)295 b Fv(2)p
Ft(x)h Fv(+)e(3)p Fx(.)921 53715 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 55707 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 59197 y(Die)434
b(F)-108 b(unktion)433 b Ft(f)576 b Fx(ist)433 b(im)h(In)-36
b(terv)-72 b(all)434 b([2;3])p 21943 59197 3150 45 v
25565 59149 a(1)25093 59197 y Fo(\015)p 26687 59197 V
3583 w Fx(,)g(w)-36 b(eil)p 33919 59197 V 37541 59149
a(2)37069 59197 y Fo(\015)p 38663 59197 V 3583 w Fx(.)p
0 TeXcolorgray 0 TeXcolorgray 921 60680 18175 45 v 921
63764 45 3085 v 9683 62461 a(1)9211 62509 y Fo(\015)p
19051 63764 V 921 63808 18175 45 v 921 67068 45 3260
v 1629 65864 a Fx(streng)434 b(monoton)f(fallend)p 16686
67068 V 17394 65770 a Fn(2)p 19051 67068 V 921 67112
18175 45 v 921 70371 45 3260 v 1629 69168 a Fx(k)-36
b(onstan)g(t)p 16686 70371 V 17394 69074 a Fn(2)p 19051
70371 V 921 70415 18175 45 v 921 73675 45 3260 v 1629
72471 a Fx(streng)433 b(monoton)g(steigend)p 16686 73675
V 1 0 0 TeXcolorrgb 17394 72377 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19051 73675 V 921 73719
18175 45 v 0 TeXcolorgray 0 TeXcolorgray 23409 60680
21236 45 v 23409 63764 45 3085 v 33701 62461 a Fx(2)33229
62509 y Fo(\015)p 44600 63764 V 23409 63808 21236 45
v 23409 67141 45 3334 v 24117 65864 a Fx(f\374r)h(alle)g
Ft(x)369 b Fu(2)g Fv([)8 b(2;)221 b(3])g Ft(f)34540 65382
y Fp(00)35107 65864 y Fv(\()p Ft(x)p Fv(\))369 b Ft(>)g
Fv(0)434 b Fx(gilt)p 42235 67141 V 42943 65807 a Fn(2)p
44600 67141 V 23409 67186 21236 45 v 23409 70519 45 3334
v 24117 69242 a Fx(f\374r)g(alle)g Ft(x)369 b Fu(2)g
Fv([)8 b(2;)221 b(3])g Ft(f)34540 68760 y Fp(0)34852
69242 y Fv(\()p Ft(x)p Fv(\))369 b Ft(>)g Fv(0)433 b
Fx(gilt)p 42235 70519 V 1 0 0 TeXcolorrgb 42943 69184
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
44600 70519 V 23409 70563 21236 45 v 23409 75699 45 5137
v 24117 72504 a Fx(es)h(ein)f Ft(x)369 b Fu(2)g Fv([)8
b(2;)221 b(3])435 b Fx(mit)f Ft(f)36315 72022 y Fp(0)36625
72504 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)24117 74496
y Fx(gibt)p 42235 75699 V 42943 73463 a Fn(2)p 44600
75699 V 23409 75743 21236 45 v 47992 51169 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 53161 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray 24421
81281 a Fx(64)p 0 TeXcolorgray eop end
%%Page: 65 65
TeXDict begin 65 64 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fy(AN)718
b(3.3)f(-)h(16)f(Ableitungsfunktion)712 b(-)718 b(L)-179
b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391 10102 a Fx(84.)p
0 TeXcolorgray 651 w(In)442 b(der)g(nac)-36 b(hstehenden)440
b(Abbildung)i(ist)g(der)g(Graph)f(der)h(Ableitungsfunktion)g
Ft(f)42422 9620 y Fp(0)43175 10102 y Fx(einer)921 12094
y(F)-108 b(unktion)433 b Ft(f)575 b Fx(dargestellt.)p
0 TeXcolorgray 0 TeXcolorgray 9336 45000 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.24992 a add def
/d 0.0 a add neg def /h 275.93463 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9336 45000
a 23476 31415 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 126.51866 0.0 -127.73126 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 153.21178 0.0 -122.72285   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 126.51866  0 -127.73126  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -127.73126
 126.51866  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.72285  def /maxTickline 153.21178  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.21178
0.0 -122.72285   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 126.51866
0.0 -127.73126 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 153.21178  0 -122.72285  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.72285
 153.21178  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-127.73126  def /maxTickline 126.51866  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 153.21178
0.0 -122.72285   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 126.51866
0.0 -127.73126 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22231 28551 a
Fq(1)22230 25401 y(2)22230 22252 y(3)22230 19102 y(4)22230
15953 y(5)21499 34804 y Fp(\000)p Fq(1)21499 37954 y
Fp(\000)p Fq(2)21499 41103 y Fp(\000)p Fq(3)21499 44253
y Fp(\000)p Fq(4)26390 32761 y(1)2680 b(2)f(3)h(4)-16584
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)f
Fp(\000)p Fq(4)23476 31415 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23476 31415 a 23476 31415
a
tx@Dict begin  { 126.51866 153.21178 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 23476 31415 a 23476 31415 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23476 31415 a 23133 31701
a Fx(x)23476 31415 y
tx@Dict begin  PutEnd  end
 23476 31415 a 23476 31415 a
tx@Dict begin  PutEnd  end
 23476
31415 a 23476 31415 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23476 31415 a 23476 31415 a
tx@Dict begin  { 0.0 0.0 pop 126.51866 153.21178 exch pop } PutCoor
PutBegin  end
 23476
31415 a 23476 31415 a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23476 31415 a 22054 31747 a Ft(f)22837
31265 y Fp(0)23147 31747 y Fv(\()p Ft(x)p Fv(\))23476
31415 y
tx@Dict begin  PutEnd  end
 23476 31415 a 23476 31415 a
tx@Dict begin  PutEnd  end
 23476 31415 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.48924462184089 def /x1 4.446627650059073
def /dx x1 x sub 199 div def /F@pstplot (0.2904063017168803*x^(3.0)-2.613656715451923*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 23476 31415 a
tx@Dict begin  { 83.14967 88.15852 } PutCoor PutBegin  end
 23476 31415 a
974 x Ft(f)24259 31907 y Fp(0)23476 31415 y
tx@Dict begin  PutEnd  end
 23476 31415
a 37481 45000 a
currentpoint initclip moveto
 37481 45000 a 921 48985 a Fx(Kreuze)433
b(die)h(zutre\033ende\(n\))d(A)-36 b(ussage\(n\))433
b(an.)p 2743 50025 40898 45 v 2743 53243 45 3219 v 3452
51966 a(Die)h(F)-108 b(unktion)433 b Ft(f)575 b Fx(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p
Fv(4;)221 b(4])436 b Fx(drei)d(lokale)i(Extremstellen.)p
41231 53243 V 1 0 0 TeXcolorrgb 1374 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43596 53243 V 2743 53288
40898 45 v 2743 56506 45 3219 v 3452 55229 a Fx(Die)f(F)-108
b(unktion)433 b Ft(f)575 b Fx(ist)434 b(im)g(In)-36 b(terv)-72
b(all)434 b Fv(\(2;)221 b(3\))434 b Fx(streng)f(monoton)h(steigend.)p
41231 56506 V 43596 56506 V 2743 56550 40898 45 v 2743
59768 45 3219 v 3452 58491 a(Die)g(F)-108 b(unktion)433
b Ft(f)575 b Fx(hat)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Fu(\000)p Fv(3;)221 b(0])436 b Fx(eine)d(W)-108
b(endestelle.)p 41231 59768 V 1 0 0 TeXcolorrgb 6161
w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43596 59768 V 2743 59812 40898 45 v 2743 63030 45 3219
v 3452 61754 a Fx(Die)434 b(F)-108 b(unktion)433 b Ft(f)12147
61271 y Fp(00)13146 61754 y Fx(hat)g(im)h(In)-36 b(terv)-72
b(all)434 b Fv([)8 b Fu(\000)p Fv(3;)221 b(3])436 b Fx(zw)-36
b(ei)434 b(Nullstellen.)p 41231 63030 V 1 0 0 TeXcolorrgb
6101 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43596 63030 V 2743 63075 40898 45 v 2743 66145 45 3071
v 3452 64942 a Fx(Die)g(F)-108 b(unktion)433 b Ft(f)575
b Fx(hat)433 b(an)h(der)f(Stelle)h Ft(x)369 b Fv(=)f(0)434
b Fx(ein)g(lokales)h(Minim)-36 b(um.)p 41231 66145 V
43596 66145 V 2743 66190 40898 45 v 47992 10102 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 12094 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 70218
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(65)p 0 TeXcolorgray
eop end
%%Page: 66 66
TeXDict begin 66 65 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)752 b(3.3)f(-)h(17)g(Charakteristika)
d(einer)i(P)-60 b(olynomfunktion)748 b(-)k(L)-179 b(T)751
b(-)-2331 4515 y(BIFIE)p 0 TeXcolorgray -1391 7823 a
Fx(85.)p 0 TeXcolorgray 651 w(V)-108 b(on)525 b(einer)h(P)-36
b(olynomfunktion)527 b Ft(f)668 b Fx(ist)526 b(F)-108
b(olgendes)526 b(b)36 b(ekann)-36 b(t:)526 b Ft(f)142
b Fv(\(2\))526 b(=)g(0)p Ft(;)221 b(f)38515 7341 y Fp(0)38826
7823 y Fv(\(2\))526 b(=)g(0)g Fx(und)921 9815 y Ft(f)1704
9333 y Fp(00)2270 9815 y Fv(\(2\))369 b(=)f(1)p Fx(.)921
12360 y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36
b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357
b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36 b(h)g(tigen)921
14352 y(Satzteile)434 b(so,)g(dass)g(eine)f(mathematisc)-36
b(h)434 b(k)-36 b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36
b(tsteh)g(t!)921 17842 y Ft(f)575 b Fx(hat)434 b(an)f(der)g(Stelle)p
12254 17842 3150 45 v 15875 17794 a(1)15403 17842 y Fo(\015)p
16997 17842 V 3584 w Fx(sic)-36 b(her)p 24454 17842 V
28075 17794 a(2)27603 17842 y Fo(\015)p 29197 17842 V
3584 w Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 13805 19214
7355 45 v 13805 22299 45 3085 v 17157 20996 a(1)16685
21044 y Fo(\015)p 21115 22299 V 13805 22343 7355 45 v
13805 25602 45 3260 v 14513 24399 a Ft(x)370 b Fv(=)e(0)p
18750 25602 V 19459 24305 a Fn(2)p 21115 25602 V 13805
25647 7355 45 v 13805 28906 45 3260 v 14513 27703 a Ft(x)i
Fv(=)e(1)p 18750 28906 V 19459 27608 a Fn(2)p 21115 28906
V 13805 28950 7355 45 v 13805 32209 45 3260 v 14513 31006
a Ft(x)i Fv(=)e(2)p 18750 32209 V 1 0 0 TeXcolorrgb 19459
30912 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 21115 32209 V 13805 32254 7355 45 v 0 TeXcolorgray
0 TeXcolorgray 30040 19214 15857 45 v 30040 22299 45
3085 v 37643 20996 a Fx(2)37171 21044 y Fo(\015)p 45852
22299 V 30040 22343 15857 45 v 30040 25602 45 3260 v
30748 24399 a Fx(ein)434 b(lokales)h(Minim)-36 b(um)p
43487 25602 V 1 0 0 TeXcolorrgb 44195 24305 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45852
25602 V 30040 25647 15857 45 v 30040 28906 45 3260 v
30748 27703 a Fx(ein)434 b(lokales)h(Maxim)-36 b(um)p
43487 28906 V 44195 27608 a Fn(2)p 45852 28906 V 30040
28950 15857 45 v 30040 32209 45 3260 v 30748 31006 a
Fx(eine)434 b(W)-108 b(endestelle)p 43487 32209 V 44195
30912 a Fn(2)p 45852 32209 V 30040 32254 15857 45 v 47992
7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 36282 54804 45 v -2331 41539 a Fy(AN)718 b(3.3)f(-)h(18)f
(Kennzeic)-60 b(hn)g(ung)715 b(v)-60 b(on)717 b(x-W)-179
b(erten)715 b(-)j(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-1391 44846 a Fx(86.)p 0 TeXcolorgray 651 w(Gegeb)36
b(en)433 b(ist)h(der)f(Graph)f(einer)h(P)-36 b(olynomfunktion)435
b Ft(p)e Fx(vierten)h(Grades.)p 0 TeXcolorgray 0 TeXcolorgray
5417 69947 a
 currentpoint currentpoint translate 1.13388 1.13388 scale neg exch
neg exch translate
 5417 69947 a 5417 69947 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 286.67953 a add def
/d 0.0 a add neg def /h 183.81792 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 69947 a 14555
63787 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 204.12985  0 -82.54968  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -82.54968
 204.12985  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-98.32816  def /maxTickline 128.16888  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.16888
0.0 -98.32816   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 204.12985
0.0 -82.54968 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.16888  0 -98.32816  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -98.32816
 128.16888  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-82.54968  def /maxTickline 204.12985  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.16888
0.0 -98.32816   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 204.12985
0.0 -82.54968 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14555 63787 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 14555 63787 a 14555 63787 a
tx@Dict begin  { 204.12985 128.16888 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14555 63787
a 14555 63787 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14555 63787 a 14212 64073 a Fx(x)14555
63787 y
tx@Dict begin  PutEnd  end
 14555 63787 a 14555 63787 a
tx@Dict begin  PutEnd  end
 14555 63787 a 14555
63787 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14555 63787 a 14555 63787 a
tx@Dict begin  { 0.0 0.0 pop 204.12985 128.16888 exch pop } PutCoor
PutBegin  end
 14555 63787 a 14555
63787 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14555 63787 a 13507 64119 a Fx(f\(x\))14555 63787
y
tx@Dict begin  PutEnd  end
 14555 63787 a 14555 63787 a
tx@Dict begin  PutEnd  end
 14555 63787 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.9012837549228814 def /x1 7.174341949391406
def /dx x1 x sub 199 div def /F@pstplot (0.04476746827082035*x^(4.0)-0.39849247750651484*x^(3.0)+0.4810583904695643*x^(2.0)+2.195760884972902*x-0.43693110431769716)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 14555 63787 a
tx@Dict begin  { 39.44162 97.67128 } PutCoor PutBegin  end
 14555 63787 a
572 x Fx(p)14555 63787 y
tx@Dict begin  PutEnd  end
 14555 63787 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 12.72896 17.2928 12.72896 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.6 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  2.0  2.0 ] 0 0 add  DashLine
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.6 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.90561 56.75179 113.90561 0.0  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  2.0  2.0 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 12.72896 17.2928
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 113.90561 56.75179
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 12.72896 0.0 
 false NArray  /DS 3.0 0. CLW mul add 2 div def /Symbol 0. [1.8 0.0
0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale <B4>
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray  [ 113.90561 0.0
  false NArray  /DS 3.0 0. CLW mul add 2 div def /Symbol 0. [1.8 0.0
0.0 1.8 -0.495 -0.4788] FontDot /Dot { moveto gsave 1.  1.  scale <B4>
show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 37151
69947 a
currentpoint initclip moveto
 37151 69947 a 5417 69947 a
 currentpoint currentpoint translate 1 1.13388 div 1 1.13388 div scale
neg exch neg exch translate
 5417 69947 a 921 75592
a Fx(Kennzeic)-36 b(hne)433 b(alle)h(Stellen)g(auf)f(der)h(x-A)-36
b(c)g(hse)p 15120 75769 8859 45 v -1 w(,)434 b(f\374r)f(die)h
Ft(p)29581 75110 y Fp(00)30146 75592 y Fv(\()p Ft(x)p
Fv(\))369 b(=)g(0)434 b Fx(gilt!)47992 44846 y Fs(___/1)p
1 0 0 TeXcolorrgb 47998 46838 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 77960
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(66)p 0 TeXcolorgray
eop end
%%Page: 67 67
TeXDict begin 67 66 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(19)f(W)-179
b(ac)-60 b(hstumsgesc)g(h)g(windigk)g(eit)714 b(-)k(L)-179
b(T)716 b(-)i(BIFIE)p 0 TeXcolorgray -1391 4800 a Fx(87.)p
0 TeXcolorgray 651 w(Das)455 b(W)-108 b(ac)-36 b(hstum)453
b(einer)g(Bakterienkultur)i(wird)f(durc)-36 b(h)452 b(eine)i(F)-108
b(unktion)453 b Ft(N)592 b Fx(b)36 b(esc)-36 b(hrieb)36
b(en.)921 6792 y(Dab)g(ei)434 b(gibt)g Ft(N)139 b Fv(\()p
Ft(t)p Fv(\))432 b Fx(die)i(Anzahl)f(der)g(Bakterien)h(zum)f(Zeitpunkt)
g Ft(t)g Fx(\()p Ft(t)h Fx(in)f(Stunden\))e(an.)921 9338
y(Erg\344nze)358 b(die)h(T)-108 b(extl\374c)-36 b(k)g(en)358
b(im)g(folgenden)h(Satz)f(durc)-36 b(h)357 b(Ankreuzen)g(der)h(jew)-36
b(eils)360 b(ric)-36 b(h)g(tigen)921 11330 y(Satzteile)434
b(so,)g(dass)g(eine)f(mathematisc)-36 b(h)434 b(k)-36
b(orrekte)434 b(A)-36 b(ussage)434 b(en)-36 b(tsteh)g(t!)855
14820 y(W)-108 b(enn)p 4864 14820 3150 45 v 8486 14772
a(1)8014 14820 y Fo(\015)p 9608 14820 V 3691 w Fx(p)36
b(ositiv)543 b(sind,)e(erfolgt)i(das)e(Bakterien)-36
b(w)g(ac)g(hstum)542 b(im)g(In)-36 b(terv)-72 b(all)921
16812 y([a;b])p 4028 16812 V 7650 16764 a(2)7178 16812
y Fo(\015)p 8772 16812 V 3583 w Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 3206 18184 22452 45 v 3206 21268 45 3085
v 14106 19966 a(1)13635 20014 y Fo(\015)p 25613 21268
V 3206 21313 22452 45 v 3206 26523 45 5211 v 3914 23254
a Fx(die)434 b(F)-108 b(unktionsw)-36 b(erte)432 b Ft(N)139
b Fv(\()p Ft(t)p Fv(\))432 b Fx(f\374r)i Ft(t)369 b Fu(2)3914
25246 y Fv([)8 b Ft(a)p Fv(;)221 b Ft(b)p Fv(])p 23248
26523 V 23957 24250 a Fn(2)p 25613 26523 V 3206 26567
22452 45 v 3206 31777 45 5211 v 3914 28508 a Fx(die)434
b(F)-108 b(unktionsw)-36 b(erte)432 b Ft(N)16320 28026
y Fp(0)16630 28508 y Fv(\()p Ft(t)p Fv(\))h Fx(f\374r)g
Ft(t)369 b Fu(2)3914 30500 y Fv([)8 b Ft(a)p Fv(;)221
b Ft(b)p Fv(])p 23248 31777 V 23957 29504 a Fn(2)p 25613
31777 V 3206 31821 22452 45 v 3206 37031 45 5211 v 3914
33762 a Fx(die)434 b(F)-108 b(unktionsw)-36 b(erte)432
b Ft(N)16320 33280 y Fp(00)16885 33762 y Fv(\()p Ft(t)p
Fv(\))h Fx(f\374r)h Ft(t)368 b Fu(2)3914 35754 y Fv([)8
b Ft(a)p Fv(;)221 b Ft(b)p Fv(])p 23248 37031 V 1 0 0
TeXcolorrgb 23957 34758 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 25613 37031 V 3206 37076 22452
45 v 0 TeXcolorgray 0 TeXcolorgray 30155 18295 13545
45 v 30155 21379 45 3085 v 36602 20076 a Fx(2)36130 20124
y Fo(\015)p 43655 21379 V 30155 21423 13545 45 v 30155
24683 45 3260 v 30863 23479 a Fx(immer)434 b(sc)-36 b(hneller)p
41290 24683 V 1 0 0 TeXcolorrgb 41998 23385 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 43655
24683 V 30155 24727 13545 45 v 30155 27986 45 3260 v
30863 26783 a Fx(immer)434 b(langsamer)p 41290 27986
V 41998 26689 a Fn(2)p 43655 27986 V 30155 28030 13545
45 v 30155 31290 45 3260 v 30863 30086 a Fx(gleic)-36
b(h)434 b(sc)-36 b(hnell)p 41290 31290 V 41998 29992
a Fn(2)p 43655 31290 V 30155 31334 13545 45 v 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 41104 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(67)p
0 TeXcolorgray eop end
%%Page: 68 68
TeXDict begin 68 67 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(20)f
(Ableitungsfunktionen)712 b(-)717 b(MC)h(-)g(BIFIE)p
0 TeXcolorgray -1391 4800 a Fx(88.)p 0 TeXcolorgray 651
w(Die)397 b(nac)-36 b(hstehenden)395 b(Abbildungen)h(zeigen)h(die)f
(Graphen)g(v)-36 b(on)397 b(drei)f(F)-108 b(unktionen)396
b Ft(f)43265 4999 y Fq(1)43791 4800 y Fx(,)h Ft(f)45190
4999 y Fq(2)45716 4800 y Fx(,)921 6792 y Ft(f)1562 6991
y Fq(3)2521 6792 y Fx(im)434 b(In)-36 b(terv)-72 b(all)434
b Fv([)8 b(0;)221 b(160])p Fx(.)2683 22328 y
 currentpoint currentpoint translate 0.6759 0.6759 scale neg exch neg
exch translate
 2683 22328
a 2683 22328 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 2683 22328 a 4056 20175 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 4056 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 4056
20175 a 4056 20175 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 4056 20175
a 3713 20461 a Fx(x)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175
a
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end

4056 20175 a 4056 20175 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 4056 20175 a 2598 20507 a Ft(f)3239
20706 y Fq(1)3764 20507 y Fv(\()p Ft(x)p Fv(\))4056 20175
y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  PutEnd  end
 4056 20175 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (15.0*ln(x+20.0)-30.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 1.42271 mul F@pstplot 1.42271 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271
mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 4056 20175 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 4056 20175 a 570
x Fi(50)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 4056 20175
a 570 x Fi(100)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056 20175 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end

4056 20175 a 570 x Fi(160)4056 20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 4056
20175 a
tx@Dict begin  { 72.9871 71.13571 } PutCoor PutBegin  end
 4056 20175 a 922 x Ft(f)4697 21296 y Fq(1)4056
20175 y
tx@Dict begin  PutEnd  end
 4056 20175 a 30829 22328 a
currentpoint initclip moveto
 30829 22328 a 2683
22328 a
 currentpoint currentpoint translate 1 0.6759 div 1 0.6759 div scale
neg exch neg exch translate
 2683 22328 a 24758 22328 a
 currentpoint currentpoint translate 0.6759 0.6759 scale neg exch neg
exch translate
 24758 22328 a 24758
22328 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 24758 22328 a 26131 20175 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 26131 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26131 20175 a
26131 20175 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26131 20175
a 25788 20461 a Fx(x)26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131
20175 a
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26131 20175 a 26131
20175 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26131 20175 a 24672
20507 a Ft(f)25313 20706 y Fq(2)25839 20507 y Fv(\()p
Ft(x)p Fv(\))26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175
a
tx@Dict begin  PutEnd  end
 26131 20175 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (-1.989065674500714E-5*x^(3.0)+0.005568228690189832*x^(2.0)-0.053735655918526345*x+5.936048947883409)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 1.42271 mul F@pstplot
1.42271 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x dx
add def xy  dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 1.42271 mul gt { moveto } { dup
-1.e30 1.42271 mul lt { moveto } { L } ifelse } ifelse  } if  gsave
1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26131 20175 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570 x Fi(50)26131 20175 y
tx@Dict begin  PutEnd  end

26131 20175 a 26131 20175 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570 x Fi(100)26131
20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end
 26131 20175 a 570
x Fi(160)26131 20175 y
tx@Dict begin  PutEnd  end
 26131 20175 a 26131 20175 a
tx@Dict begin  { 72.9871 49.795 } PutCoor PutBegin  end
 26131
20175 a 922 x Ft(f)26772 21296 y Fq(2)26131 20175 y
tx@Dict begin  PutEnd  end
 26131
20175 a 52904 22328 a
currentpoint initclip moveto
 52904 22328 a 24758 22328 a
 currentpoint currentpoint translate 1 0.6759 div 1 0.6759 div scale
neg exch neg exch translate
 24758
22328 a 0 TeXcolorgray 0 TeXcolorgray 13289 36757 a
 currentpoint currentpoint translate 0.71906 0.71906 scale neg exch
neg exch translate
 13289
36757 a 13289 36757 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 254.26904 a add def
/d 0.0 a add neg def /h 154.8491 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 13289 36757 a 14663 34603 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 241.86142  0 -12.40762  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -12.40762
 241.86142  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-19.45526  def /maxTickline 135.39384  def /dT 4661950 abs 65536 div
viceversa { neg } if def /DT 50. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 1.42271
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 135.39384  0 -19.45526  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -19.45526
 135.39384  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-12.40762  def /maxTickline 241.86142  def /dT 932390 abs 65536 div
viceversa { neg } if def /DT 10. abs viceversa { neg } if def /subTNo
5 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 135.39384
0.0 -19.45526   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 241.86142
0.0 -12.40762 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14663 34603 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

14663 34603 a 14663 34603 a
tx@Dict begin  { 241.86142 135.39384 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 14663 34603 a 14663 34603
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 14663 34603 a 14320 34889 a Fx(x)14663 34603 y
tx@Dict begin  PutEnd  end
 14663
34603 a 14663 34603 a
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 14663
34603 a 14663 34603 a
tx@Dict begin  { 0.0 0.0 pop 241.86142 135.39384 exch pop } PutCoor
PutBegin  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 5.0 26.35733 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 14663
34603 a 13204 34935 a Ft(f)13845 35134 y Fq(3)14371 34935
y Fv(\()p Ft(x)p Fv(\))14663 34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663
34603 a
tx@Dict begin  PutEnd  end
 14663 34603 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 160 def /dx x1 x sub 199
div def /F@pstplot (x^(2.0)/450.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 1.42271 mul F@pstplot 1.42271 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271 mul
gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse }
ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup
1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
14663 34603 a
tx@Dict begin  { 68.29028 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571 x Fi(50)14663 34603 y
tx@Dict begin  PutEnd  end

14663 34603 a 14663 34603 a
tx@Dict begin  { 135.15785 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571 x Fi(100)14663
34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 220.5207 -4.26814 } PutCoor PutBegin  end
 14663 34603 a 571
x Fi(160)14663 34603 y
tx@Dict begin  PutEnd  end
 14663 34603 a 14663 34603 a
tx@Dict begin  { 85.36285 35.56786 } PutCoor PutBegin  end
 14663
34603 a 923 x Ft(f)15304 35725 y Fq(3)14663 34603 y
tx@Dict begin  PutEnd  end
 14663
34603 a 41436 36757 a
currentpoint initclip moveto
 41436 36757 a 13289 36757 a
 currentpoint currentpoint translate 1 0.71906 div 1 0.71906 div scale
neg exch neg exch translate
 13289
36757 a 921 40741 a Fx(Kreuze)433 b(die)h(zutre\033ende\(n\))d(A)-36
b(ussage\(n\))433 b(an.)p 1213 41782 43959 45 v 1213
45000 45 3219 v 1921 43723 a(Die)h(F)-108 b(unktionsw)-36
b(erte)433 b(v)-36 b(on)434 b Ft(f)16657 43241 y Fp(0)16515
44052 y Fq(1)17474 43723 y Fx(sind)g(im)f(In)-36 b(terv)-72
b(all)435 b Fv([)8 b(0;)221 b(160])435 b Fx(negativ.)p
42762 45000 V 45127 45000 V 1213 45044 43959 45 v 1213
49922 45 4878 v 1921 46986 a(Der)f(W)-108 b(ert)433 b(des)g
(Di\033erenzialquotien)-36 b(ten)434 b(v)-36 b(on)434
b Ft(f)25908 47185 y Fq(3)26868 46986 y Fx(w)-36 b(\344c)g(hst)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b(0;)221
b(160])1921 48977 y Fx(mit)434 b(w)-36 b(ac)g(hsendem)433
b Ft(x)p Fx(.)p 42762 49922 V 1 0 0 TeXcolorrgb 43470
47815 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 45127 49922 V 1213 49967 43959 45 v 1213
53185 45 3219 v 1921 51908 a Fx(Die)h(F)-108 b(unktion)433
b Ft(f)10616 51426 y Fp(00)10474 52236 y Fq(2)11615 51908
y Fx(hat)h(im)g(In)-36 b(terv)-72 b(all)434 b Fv(\(0;)221
b(160\))435 b Fx(genau)e(eine)h(Nullstelle.)p 42762 53185
V 1 0 0 TeXcolorrgb 5759 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45127 53185 V 1213 53229 43959
45 v 1213 56447 45 3219 v 1921 55170 a Fx(Die)g(F)-108
b(unktionsw)-36 b(erte)433 b(v)-36 b(on)434 b Ft(f)16657
54688 y Fp(00)16515 55499 y Fq(3)17656 55170 y Fx(sind)f(im)h(In)-36
b(terv)-72 b(all)434 b Fv([)8 b(0;)221 b(160])436 b Fx(negativ.)p
42762 56447 V 45127 56447 V 1213 56491 43959 45 v 1213
59709 45 3219 v 1921 58433 a(Die)e(F)-108 b(unktion)433
b Ft(f)10616 57950 y Fp(0)10474 58761 y Fq(1)11434 58433
y Fx(ist)g(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8
b(0;)221 b(160])436 b Fx(streng)d(monoton)h(fallend.)p
42762 59709 V 1 0 0 TeXcolorrgb 5347 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45127 59709 V 1213 59754
43959 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 63782 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(68)p 0 TeXcolorgray eop end
%%Page: 69 69
TeXDict begin 69 68 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(3.3)f(-)h(21)f(Nac)-60
b(h)g(w)g(eis)719 b(eines)d(lokalen)g(Minim)-60 b(ums)717
b(-)h(O)-60 b(A)717 b(-)h(Ma-)-2331 4515 y(tura)f(2015/16)g(-)h
(Haupttermin)p 0 TeXcolorgray -1391 7823 a Fx(89.)p 0
TeXcolorgray 651 w(Gegeb)36 b(en)337 b(ist)i(eine)f(P)-36
b(olynomfunktion)339 b Ft(p)f Fx(mit)g Ft(p)p Fv(\()p
Ft(x)p Fv(\))369 b(=)f Ft(x)28725 7341 y Fq(3)29352 7823
y Fu(\000)100 b Fv(3)g Fu(\001)g Ft(x)g Fv(+)g(2)p Fx(.)341
b(Die)e(erste)f(Ableitung)921 9815 y Ft(p)1574 9333 y
Fp(0)2318 9815 y Fx(mit)433 b Ft(p)5355 9333 y Fp(0)5666
9815 y Fv(\()p Ft(x)p Fv(\))369 b(=)f(3)296 b Fu(\001)f
Ft(x)11515 9333 y Fq(2)12336 9815 y Fu(\000)g Fv(3)434
b Fx(hat)g(an)f(der)g(Stelle)h Ft(x)369 b Fv(=)g(1)433
b Fx(den)g(W)-108 b(ert)433 b(n)-36 b(ull.)921 14352
y(Zeige)441 b(rec)-36 b(hnerisc)g(h,)440 b(dass)g Ft(p)h
Fx(an)f(dieser)h(Stelle)f(ein)h(lokales)h(Minim)-36 b(um)440
b(\(d.)h(h.)f(ihr)g(Graph)921 16344 y(dort)433 b(einen)g(Tiefpunkt\))h
(hat.)p 1 0 0 TeXcolorrgb 921 20881 a(M\366glic)-36 b(her)434
b(rec)-36 b(hnerisc)g(her)432 b(Nac)-36 b(h)g(w)g(eis:)921
23427 y Ft(p)1574 22944 y Fp(00)2140 23427 y Fv(\()p
Ft(x)p Fv(\))368 b(=)h(6)p Ft(x)921 25972 y(p)1574 25490
y Fp(00)2140 25972 y Fv(\(1\))f(=)h(6)g Ft(>)g Fv(0)g
Fu(\))434 b Fx(An)f(der)g(Stelle)h(1)g(liegt)g(ein)g(lokales)h(Minim)
-36 b(um)433 b(v)-36 b(or.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9815 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 29779 54804 45
v -2331 35081 a Fy(AN)782 b(3.3)f(-)g(22)g(F)-179 b(unktionsw)-60
b(erttab)60 b(elle)777 b(-)782 b(O)-60 b(A)781 b(-)h(BIFIE)g(-)f(K)-60
b(omp)60 b(e-)-2331 38103 y(tenzc)-60 b(hec)g(k)718 b(2016)p
0 TeXcolorgray -1391 41410 a Fx(90.)p 0 TeXcolorgray
651 w(In)657 b(der)g(nac)-36 b(hstehenden)656 b(T)-108
b(ab)36 b(elle)658 b(sind)f(F)-108 b(unktionsw)-36 b(erte)657
b(einer)g(P)-36 b(olynomfunktion)658 b Ft(f)921 43402
y Fx(dritten)433 b(Grades)f(so)-36 b(wie)435 b(ihrer)e
(Ableitungsfunktionen)g Ft(f)29626 42920 y Fp(0)30370
43402 y Fx(und)g Ft(f)33755 42920 y Fp(00)34754 43402
y Fx(angegeb)36 b(en.)p 0 TeXcolorgray 0 TeXcolorgray
14576 47542 17667 45 v 14576 49534 45 1992 v 16464 48936
a Ft(x)p 19048 49534 V 3095 w Fx(0)p 22155 49534 V 2132
w(1)p 24611 49534 V 1806 w(2)p 27068 49534 V 1807 w(3)p
29524 49534 V 1915 w(4)p 32197 49534 V 14576 49578 17667
45 v 14576 51570 45 1992 v 15567 50972 a Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p 19048 51570 V 1980 w Fx(-2)p 22155 51570
V 1915 w(2)p 24611 51570 V 1806 w(0)p 27068 51570 V 1590
w(-2)p 29524 51570 V 1698 w(2)p 32197 51570 V 14576 51614
17667 45 v 14576 53606 45 1992 v 15412 53008 a Ft(f)16195
52526 y Fp(0)16505 53008 y Fv(\()p Ft(x)p Fv(\))p 19048
53606 V 2042 w Fx(9)p 22155 53606 V 2132 w(0)p 24611
53606 V 1590 w(-3)p 27068 53606 V 1589 w(0)p 29524 53606
V 1915 w(9)p 32197 53606 V 14576 53650 17667 45 v 14576
55642 45 1992 v 15284 55045 a Ft(f)16067 54562 y Fp(00)16633
55045 y Fv(\()p Ft(x)p Fv(\))p 19048 55642 V 1372 w Fx(-12)p
22155 55642 V 1373 w(-6)p 24611 55642 V 1589 w(0)p 27068
55642 V 1807 w(6)p 29524 55642 V 1590 w(12)p 32197 55642
V 14576 55686 17667 45 v 921 58786 a(Gib)453 b(an,)h(an)g(w)-36
b(elc)g(hen)453 b(Stellen)h(des)f(In)-36 b(terv)-72 b(alls)455
b Fv(\()o(0;)221 b(4\))455 b Fx(die)f(F)-108 b(unktion)453
b Ft(f)596 b Fx(jedenfalls)454 b(lokale)921 60778 y(Extremstellen)434
b(b)36 b(esitzt.)p 1 0 0 TeXcolorrgb 921 65315 a(Die)434
b(Stellen)g Ft(x)8290 65514 y Fq(1)9184 65315 y Fv(=)369
b(1)434 b Fx(und)e Ft(x)14989 65514 y Fq(2)15884 65315
y Fv(=)369 b(3)434 b Fx(sind)f(lokale)i(Extremstellen)f(der)f(F)-108
b(unktion)433 b Ft(f)142 b Fx(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 41410 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 43402 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69049 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(69)p 0 TeXcolorgray
eop end
%%Page: 70 70
TeXDict begin 70 69 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)512 b(3.3)g(-)g(23)g(Graph)f(einer)g
(Ableitungsfunktion)506 b(-)513 b(MC)f(-)g(Matura)-2385
4515 y(2014/15)718 b(-)f(Haupttermin)p 0 TeXcolorgray
-1391 7823 a Fx(91.)p 0 TeXcolorgray 651 w(Die)468 b(nac)-36
b(hstehende)466 b(Abbildung)g(zeigt)i(den)f(Graphen)e(der)i
(Ableitungsfunktion)h Ft(f)43203 7341 y Fp(0)43980 7823
y Fx(mit)921 9815 y Ft(f)1704 9333 y Fp(0)2014 9815 y
Fv(\()p Ft(x)p Fv(\))369 b(=)5648 9292 y Fq(1)p 5648
9505 471 45 v 5648 10273 a(4)6546 9815 y Fu(\001)295
b Ft(x)7949 9333 y Fq(2)8770 9815 y Fu(\000)10232 9292
y Fq(1)p 10232 9505 V 10232 10273 a(2)11130 9815 y Fu(\001)g
Ft(x)h Fu(\000)f Fv(2)434 b Fx(einer)f(P)-36 b(olynomfunktion)435
b Ft(f)142 b Fx(.)p 0 TeXcolorgray 0 TeXcolorgray 7913
42084 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 279.97531 a add def
/d 0.0 a add neg def /h 250.3842 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7913 42084 a 21519 28478 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 9
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 157.05927 0.0 -122.91605 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 127.46815 0.0 -122.91605   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 157.05927  0 -122.91605  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -122.91605
 157.05927  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.91605  def /maxTickline 127.46815  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -122.91605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.05927
0.0 -122.91605 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 127.46815  0 -122.91605  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -122.91605
 127.46815  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-122.91605  def /maxTickline 157.05927  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 127.46815
0.0 -122.91605   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 157.05927
0.0 -122.91605 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20274 25614 a
Fq(1)20274 22464 y(2)20274 19315 y(3)20274 16165 y(4)19542
31867 y Fp(\000)p Fq(1)19542 35016 y Fp(\000)p Fq(2)19542
38166 y Fp(\000)p Fq(3)19542 41316 y Fp(\000)p Fq(4)24433
29824 y(1)2680 b(2)f(3)h(4)g(5)-19734 b Fp(\000)p Fq(1)-4351
b Fp(\000)p Fq(2)f Fp(\000)p Fq(3)g Fp(\000)p Fq(4)21519
28478 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 21519 28478 a 21519 28478 a
tx@Dict begin  { 157.05927 127.46815 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 21519 28478 a 21519
28478 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 21519 28478 a 21149 28764 a Ft(x)21519 28478
y
tx@Dict begin  PutEnd  end
 21519 28478 a 21519 28478 a
tx@Dict begin  PutEnd  end
 21519 28478 a 21519 28478
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 21519 28478 a 21519 28478 a
tx@Dict begin  { 0.0 0.0 pop 157.05927 127.46815 exch pop } PutCoor
PutBegin  end
 21519 28478 a 21519 28478
a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 21519 28478 a 20097 28810 a Ft(f)20880 28328 y Fp(0)21190
28810 y Fv(\()p Ft(x)p Fv(\))21519 28478 y
tx@Dict begin  PutEnd  end
 21519 28478
a 21519 28478 a
tx@Dict begin  PutEnd  end
 21519 28478 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.32 def /x1 5.519999999999995
def /dx x1 x sub 199 div def /F@pstplot (1.0/4.0*x^(2.0)-1.0/2.0*x-2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial 21519 28478 a
tx@Dict begin  { 99.5846 -25.60728 } PutCoor PutBegin  end
 21519 28478 a 974 x Ft(f)22302
28970 y Fp(0)21519 28478 y
tx@Dict begin  PutEnd  end
 21519 28478 a 38905 42084
a
currentpoint initclip moveto
 38905 42084 a 855 48061 a Fx(W)-108 b(elc)-36 b(he)433
b(der)g(folgenden)h(A)-36 b(ussagen)434 b(\374b)36 b(er)432
b(die)i(F)-108 b(unktion)433 b Ft(f)575 b Fx(sind)433
b(ric)-36 b(h)g(tig?)921 50053 y(Kreuze)433 b(die)h(b)36
b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434 b(an.)p
2617 51019 41151 45 v 2617 54237 45 3219 v 3325 52960
a(Die)g(F)-108 b(unktion)433 b Ft(f)576 b Fx(hat)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p
Fv(4;)221 b(5])435 b Fx(zw)-36 b(ei)435 b(lokale)g(Extremstellen.)p
41358 54237 V 1 0 0 TeXcolorrgb 1373 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43723 54237 V 2617 54282
41151 45 v 2617 57500 45 3219 v 3325 56223 a Fx(Die)f(F)-108
b(unktion)433 b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fv([)8 b(1;)221 b(2])436 b Fx(monoton)d(steigend.)p
41358 57500 V 43723 57500 V 2617 57544 41151 45 v 2617
60762 45 3219 v 3325 59485 a(Die)h(F)-108 b(unktion)433
b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Fu(\000)p Fv(4;)221 b Fu(\000)p Fv(2])436
b Fx(monoton)d(fallend.)p 41358 60762 V 43723 60762 V
2617 60807 41151 45 v 2617 66017 45 5211 v 3325 62748
a(Die)h(F)-108 b(unktion)433 b Ft(f)576 b Fx(ist)433
b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8 b Fu(\000)p
Fv(4;)221 b(0])436 b Fx(linksgekr\374mm)-36 b(t)3325
64740 y(\(d.h.)433 b Ft(f)7215 64258 y Fp(00)7781 64740
y Fv(\()p Ft(x)p Fv(\))369 b Ft(>)f Fv(0)434 b Fx(f\374r)g(alle)g
Ft(x)369 b Fu(2)g Fv([)8 b Fu(\000)p Fv(4;)221 b(0])p
Fx(\).)p 41358 66017 V 43723 66017 V 2617 66061 41151
45 v 2617 69131 45 3071 v 3325 67928 a(Die)434 b(F)-108
b(unktion)433 b Ft(f)576 b Fx(hat)433 b(an)g(der)h(Stelle)f
Ft(x)369 b Fv(=)g(1)434 b Fx(eine)f(W)-108 b(endestelle.)p
41358 69131 V 1 0 0 TeXcolorrgb 6379 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43723 69131 V 2617 69176
41151 45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9815 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 73204 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(70)p 0 TeXcolorgray eop end
%%Page: 71 71
TeXDict begin 71 70 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)512 b(3.3)g(-)g(24)g(Graph)f(einer)g
(Ableitungsfunktion)506 b(-)513 b(MC)f(-)g(Matura)-2385
4515 y(2014/15)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fx(92.)p 0 TeXcolorgray
651 w(Die)379 b(nac)-36 b(hstehende)376 b(Abbildung)h(zeigt)h(den)f
(Graphen)g(der)g(Ableitungsfunktion)h Ft(f)42487 7341
y Fp(0)43175 7823 y Fx(einer)921 9815 y(F)-108 b(unktion)433
b Ft(f)142 b Fx(.)434 b(Die)g(F)-108 b(unktion)433 b
Ft(f)16740 9333 y Fp(0)17484 9815 y Fx(ist)g(eine)h(P)-36
b(olynomfunktion)435 b(zw)-36 b(eiten)433 b(Grades.)p
0 TeXcolorgray 0 TeXcolorgray 921 39220 a
 currentpoint currentpoint translate 0.8905 0.8905 scale neg exch neg
exch translate
 921 39220 a
921 39220 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 456.27283 a add def
/d 0.0 a add neg def /h 256.75978 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 39220 a 18033 28255 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 301.69086 0.0 -154.58197 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 17
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 157.7105 0.0 -99.04929   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 301.69086  0 -154.58197  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -154.58197
 301.69086  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.04929  def /maxTickline 157.7105  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.7105
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.69086
0.0 -154.58197 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 157.7105  0 -99.04929  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.04929
 157.7105  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-154.58197  def /maxTickline 301.69086  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 157.7105
0.0 -99.04929   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 301.69086
0.0 -154.58197 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 16788 25391 a
Fq(1)16787 22242 y(2)16787 19092 y(3)16787 15942 y(4)16787
12793 y(5)16055 31644 y Fp(\000)p Fq(1)16055 34794 y
Fp(\000)p Fq(2)16055 37944 y Fp(\000)p Fq(3)20947 29601
y(1)2680 b(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444 b(10)-35716
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)f
Fp(\000)p Fq(4)g Fp(\000)p Fq(5)18033 28255 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 18033 28255
a 18033 28255 a
tx@Dict begin  { 301.69086 157.7105 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 18033 28255 a 18033 28255 a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 18033 28255
a 17663 28541 a Ft(x)18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 18033
28255 a
tx@Dict begin  PutEnd  end
 18033 28255 a 18033 28255 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 18033 28255 a 18033
28255 a
tx@Dict begin  { 0.0 0.0 pop 301.69086 157.7105 exch pop } PutCoor
PutBegin  end
 18033 28255 a 18033 28255 a
tx@Dict begin  { 5.0 25.69412 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 18033 28255 a 16610
28588 a Ft(f)17393 28106 y Fp(0)17704 28588 y Fv(\()p
Ft(x)p Fv(\))18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 18033 28255
a
tx@Dict begin  PutEnd  end
 18033 28255 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.4329346942751044 def /x1 10.60322300949462
def /dx x1 x sub 199 div def /F@pstplot (0.5*x^(2.0)-3.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
18033 28255 a
tx@Dict begin  { -118.87364 103.86449 } PutCoor PutBegin  end
 18033 28255 a 975 x Ft(f)18816 28747 y
Fp(0)18033 28255 y
tx@Dict begin  PutEnd  end
 18033 28255 a 51429 39220 a
currentpoint initclip moveto
 51429
39220 a 921 39220 a
 currentpoint currentpoint translate 1 0.8905 div 1 0.8905 div scale
neg exch neg exch translate
 921 39220 a 5976 x Fx(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(A)-36 b(ussagen)434
b(an.)p 3009 46163 40367 45 v 3009 49233 45 3071 v 3717
48030 a(Die)g(F)-108 b(unktion)433 b Ft(f)576 b Fx(ist)433
b(eine)h(P)-36 b(olynomfunktion)435 b(dritten)d(Grades.)p
40966 49233 V 1 0 0 TeXcolorrgb 5447 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 43331 49233 V 3009 49278
40367 45 v 3009 52496 45 3219 v 3717 51219 a Fx(Die)i(F)-108
b(unktion)433 b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72
b(all)434 b Fv([)8 b(0;)221 b(4])435 b Fx(streng)f(monoton)f(steigend)p
40966 52496 V 43331 52496 V 3009 52540 40367 45 v 3009
55758 45 3219 v 3717 54481 a(Die)h(F)-108 b(unktion)433
b Ft(f)576 b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434
b Fv([)8 b Fu(\000)p Fv(4;)221 b Fu(\000)p Fv(3])436
b Fx(streng)d(monoton)h(fallend.)p 40966 55758 V 43331
55758 V 3009 55803 40367 45 v 3009 58873 45 3071 v 3717
57670 a(Die)g(F)-108 b(unktion)433 b Ft(f)576 b Fx(hat)433
b(an)g(der)g(Stelle)h Ft(x)369 b Fv(=)g(0)434 b Fx(eine)f(W)-108
b(endestelle)p 40966 58873 V 1 0 0 TeXcolorrgb 5956 w
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
43331 58873 V 3009 58917 40367 45 v 3009 62135 45 3219
v 3717 60858 a Fx(Die)434 b(F)-108 b(unktion)433 b Ft(f)576
b Fx(ist)433 b(im)h(In)-36 b(terv)-72 b(all)434 b Fv([)8
b Fu(\000)p Fv(4;)221 b(4])436 b Fx(links)e(gekr\374mm)-36
b(t.)p 40966 62135 V 43331 62135 V 3009 62180 40367 45
v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815
a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 66208 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(71)p 0 TeXcolorgray eop end
%%Page: 72 72
TeXDict begin 72 71 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)747 b(3.3)g(-)g(25)f(Gewinn)g(und)f
(K)-60 b(osten)746 b(-)h(O)-60 b(A)747 b(-)g(Matura)f(2014/15)h(-)-2331
4622 y(K)-60 b(omp)60 b(ensationspr\374fung)p 0 TeXcolorgray
-1391 7929 a Fx(93.)p 0 TeXcolorgray 651 w(Gegeb)36 b(en)398
b(ist)g(die)h(Gewinnfunktion)f Ft(G)g Fx(mit)h(der)f(Gleic)-36
b(h)g(ung)397 b Ft(G)p Fv(\()p Ft(x)p Fv(\))369 b(=)f
Ft(x)36844 7447 y Fq(2)37594 7929 y Fu(\000)223 b Fv(90)h
Fu(\001)g Ft(x)f Fu(\000)h Fv(1800)p Fx(.)921 9921 y(Dab)36
b(ei)434 b(wird)g Ft(x)g Fx(in)f(St\374c)-36 b(k)433
b(und)g Ft(G)p Fv(\()p Ft(x)p Fv(\))g Fx(in)g(Euro)h(angegeb)36
b(en.)921 12466 y(Berec)-36 b(hne)433 b(den)g(maximalen)h(Gewinn.)p
1 0 0 TeXcolorrgb 921 17004 a Ft(G)1947 16522 y Fp(0)2257
17004 y Fv(\()p Ft(x)p Fv(\))369 b(=)g Fu(\000)p Fv(2)296
b Fu(\001)f Ft(x)g Fv(+)g(90)921 18995 y Ft(G)1947 18513
y Fp(0)2257 18995 y Fv(\()p Ft(x)p Fv(\))369 b(=)g(0)921
20987 y Ft(x)g Fv(=)g(45)921 22979 y Ft(G)p Fv(\(45\))g(=)g(225)921
24971 y Fx(Der)434 b(maximale)h(Gewinn)e(b)36 b(etr\344gt)433
b Fw(e)651 b Fx(225)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 28705 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(72)p 0 TeXcolorgray eop end
%%Page: 73 73
TeXDict begin 73 72 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)1149 b(3.3)f(-)h(26)g
(Di\033erenzierbare)f(F)-179 b(unktion)1146 b(-)j(MC)g(-)g(Matura)-2385
4515 y(2015/16)718 b(-)f(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -1391 7823 a Fx(94.)p 0 TeXcolorgray
651 w(Die)349 b(nac)-36 b(hstehende)347 b(Abbildung)h(zeigt)h(den)f(A)
-36 b(ussc)g(hnitt)347 b(eines)i(Graphen)e(einer)h(P)-36
b(olynom-)921 9815 y(funktion)434 b Ft(f)142 b Fx(.)434
b(Die)g(T)-108 b(angen)-36 b(tensteigung)433 b(an)g(der)g(Stelle)h
Ft(x)369 b Fv(=)g(6)434 b Fx(ist)f(maximal.)p 0 TeXcolorgray
0 TeXcolorgray 5418 49877 a
 currentpoint currentpoint translate 0.86546 0.86546 scale neg exch
neg exch translate
 5418 49877 a 5418 49877 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 375.57611 a add def
/d 0.0 a add neg def /h 372.7311 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5418 49877 a 7623 47798 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 355.65929 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 14 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.4  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 353.9522 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.4  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 355.65929  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 355.65929  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 353.9522  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 353.9522
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 355.65929
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 353.9522  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 353.9522  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 355.65929  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 353.9522
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 355.65929
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6378 48083 a Fq(0)6377
44934 y(1)6377 41784 y(2)6377 38635 y(3)6377 35485 y(4)6377
32335 y(5)6377 29186 y(6)6377 26036 y(7)6377 22887 y(8)6377
19737 y(9)5907 16587 y(10)5907 13438 y(11)5907 10288
y(12)7388 49144 y(0)2679 b(1)h(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444
b(10)2210 b(11)f(12)7623 47798 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7623 47798 a 7623 47798
a
tx@Dict begin  { 355.65929 353.9522 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7623 47798 a 7623 47798 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 7623 47798 a 7280 48084 a
Fx(x)7623 47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 7623 47798 a
tx@Dict begin  PutEnd  end
 7623 47798
a 7623 47798 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7623 47798 a 7623 47798 a
tx@Dict begin  { 0.0 0.0 pop 355.65929 353.9522 exch pop } PutCoor
PutBegin  end
 7623 47798 a
7623 47798 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7623 47798 a 6575 48130 a Fx(f\(x\))7623
47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 7623 47798 a
tx@Dict begin  PutEnd  end
 7623 47798 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 12 def /dx x1 x sub 199
div def /F@pstplot (2.9890266176687913E-5*x^(4.0)-0.012428419189220467*x^(3.0)+0.21617919832944305*x^(2.0)-0.022775063325552704*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 7623 47798 a
tx@Dict begin  { 214.5335 213.39557 } PutCoor PutBegin  end
 7623 47798 a 923
x Ft(f)7623 47798 y
tx@Dict begin  PutEnd  end
 7623 47798 a 46993 49877 a
currentpoint initclip moveto
 46993
49877 a 5418 49877 a
 currentpoint currentpoint translate 1 0.86546 div 1 0.86546 div scale
neg exch neg exch translate
 5418 49877 a 921 53861 a Fx(Kreuze)433
b(die)h(b)36 b(eiden)433 b(f\374r)g(die)h(gegeb)36 b(ene)434
b(F)-108 b(unktion)432 b Ft(f)576 b Fx(zutre\033enden)431
b(A)-36 b(ussagen)434 b(an.)p 17090 54828 12204 45 v
17090 58046 45 3219 v 17799 56769 a Ft(f)18582 56287
y Fp(00)19147 56769 y Fv(\(6\))369 b(=)g(0)p 26884 58046
V 1 0 0 TeXcolorrgb 4384 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 29249 58046 V 17090 58090
12204 45 v 17090 61309 45 3219 v 17799 60032 a Ft(f)18582
59550 y Fp(00)19147 60032 y Fv(\(11\))h Ft(<)e Fv(0)p
26884 61309 V 1 0 0 TeXcolorrgb 3734 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 29249 61309 V 17090
61353 12204 45 v 17090 64571 45 3219 v 17799 63294 a
Ft(f)18582 62812 y Fp(00)19147 63294 y Fv(\(2\))h Ft(<)g(f)23342
62812 y Fp(00)23908 63294 y Fv(\(10\))p 26884 64571 V
29249 64571 V 17090 64615 12204 45 v 17090 67833 45 3219
v 17799 66556 a Ft(f)18582 66074 y Fp(0)18892 66556 y
Fv(\(6\))g(=)g(0)p 26884 67833 V 29249 67833 V 17090
67878 12204 45 v 17090 71096 45 3219 v 17799 69819 a
Ft(f)18582 69337 y Fp(0)18892 69819 y Fv(\(7\))g Ft(<)g(f)23087
69337 y Fp(0)23397 69819 y Fv(\(10\))p 26884 71096 V
29249 71096 V 17090 71140 12204 45 v 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(3.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 75168 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(73)p 0 TeXcolorgray
eop end
%%Page: 74 74
TeXDict begin 74 73 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)784 b(3.3)g(-)g(27)f(Eigensc)-60
b(haften)783 b(einer)f(F)-179 b(unktion)781 b(-)j(MC)h(-)f(Matura)-2385
4515 y(2013/14)718 b(Haupttermin)p 0 TeXcolorgray -1391
7823 a Fx(95.)p 0 TeXcolorgray 651 w(V)-108 b(on)384
b(einer)h(rellen)g(P)-36 b(olynomfunktion)386 b Ft(f)527
b Fx(sind)384 b(der)h(Graph)e(und)h(die)h(F)-108 b(unktionsgleic)-36
b(h)g(ung)921 9815 y(der)433 b(Ableitungsfunktion)h Ft(f)15260
9333 y Fp(0)16004 9815 y Fx(gegeb)36 b(en:)434 b Ft(f)22098
9333 y Fp(0)22408 9815 y Fv(\()p Ft(x)p Fv(\))369 b(=)f
Fu(\000)p Ft(x)296 b Fv(+)f(2)p Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 12164 33688 a
 currentpoint currentpoint translate 0.98079 0.98079 scale neg exch
neg exch translate
 12164 33688 a 12164 33688
a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.13593 a add def
/d 0.0 a add neg def /h 197.4621 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12164 33688 a 20920 26066 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 128.03734 0.0 -79.09859 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 128.60652 0.0 -68.85558   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 128.03734  0 -79.09859  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -79.09859
 128.03734  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-68.85558  def /maxTickline 128.60652  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.60652
0.0 -68.85558   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -79.09859 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 128.60652  0 -68.85558  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -68.85558
 128.60652  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-79.09859  def /maxTickline 128.03734  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 128.60652
0.0 -68.85558   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 128.03734
0.0 -79.09859 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 19675 23202 a
Fq(1)19675 20052 y(2)19675 16903 y(3)19675 13753 y(4)18943
29455 y Fp(\000)p Fq(1)18943 32605 y Fp(\000)p Fq(2)23835
27412 y(1)2679 b(2)h(3)f(4)-16584 b Fp(\000)p Fq(1)-4351
b Fp(\000)p Fq(2)20920 26066 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 20920 26066 a 20920 26066
a
tx@Dict begin  { 128.03734 128.60652 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 20920 26066 a 20920 26066 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 20920 26066 a 20577 26352
a Fx(x)20920 26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a 20920 26066 a
tx@Dict begin  PutEnd  end
 20920
26066 a 20920 26066 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 20920 26066 a 20920 26066 a
tx@Dict begin  { 0.0 0.0 pop 128.03734 128.60652 exch pop } PutCoor
PutBegin  end
 20920
26066 a 20920 26066 a
tx@Dict begin  { 5.0 22.5208 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 20920 26066 a 19674 26398 a Fx(f)36
b('\(x\))20920 26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a 20920 26066 a
tx@Dict begin  PutEnd  end
 20920
26066 a 20920 26066 a
tx@Dict begin  { 22.1931 48.36957 } PutCoor PutBegin  end
 20920 26066 a 610 x Fi(f)26 b(')20920
26066 y
tx@Dict begin  PutEnd  end
 20920 26066 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.78 def /x1 4.5 def /dx x1 x sub
49 div def /F@pstplot ((--4.-2.*x)/2.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
35093 33688 a
currentpoint initclip moveto
 35093 33688 a 12164 33688 a
 currentpoint currentpoint translate 1 0.98079 div 1 0.98079 div scale
neg exch neg exch translate
 12164 33688
a 921 39665 a Fx(Kreuze)433 b(die)h(b)36 b(eiden)433
b(zutre\033enden)e(A)-36 b(ussagen)434 b(an!)p 1062 42623
44260 45 v 1062 45694 45 3071 v 1770 44491 a(Die)h(Stelle)e
Ft(x)8416 44690 y Fq(1)9311 44491 y Fv(=)369 b(0)434
b Fx(ist)g(eine)f(W)-108 b(endestelle)434 b(v)-36 b(on)434
b Ft(f)142 b Fx(.)p 42912 45694 V 45277 45694 V 1062
45738 44260 45 v 1062 48956 45 3219 v 1770 47679 a(Im)434
b(In)-36 b(terv)-72 b(all)434 b Fv([)8 b(0;)221 b(1])436
b Fx(ist)d Ft(f)576 b Fx(streng)433 b(monoton)h(fallend.)p
42912 48956 V 45277 48956 V 1062 49000 44260 45 v 1062
54137 45 5137 v 1770 50942 a(Die)363 b(T)-108 b(angen)-36
b(te)361 b(an)g(den)g(Graphen)f(der)h(F)-108 b(unktion)361
b Ft(f)503 b Fx(im)362 b(Punkt)f Fv(\(0)p Fu(j)p Ft(f)142
b Fv(\(0\)\))361 b Fx(hat)g(die)1770 52933 y(Steigung)434
b(2.)p 42912 54137 V 1 0 0 TeXcolorrgb 43621 51901 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 54137 V 1062 54181 44260 45 v 1062 57251 45 3071
v 1770 56048 a Fx(Die)h(Stelle)e Ft(x)8416 56247 y Fq(2)9311
56048 y Fv(=)369 b(2)434 b Fx(ist)g(eine)f(lokale)j(Maxim)-36
b(umstelle)434 b(v)-36 b(on)434 b Ft(f)142 b Fx(.)p 42912
57251 V 1 0 0 TeXcolorrgb 10960 w Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45277 57251 V 1062 57296
44260 45 v 1062 62506 45 5211 v 1770 59237 a Fx(Der)395
b(Graph)f(der)g(F)-108 b(unktion)394 b Ft(f)536 b Fx(w)-36
b(eist)395 b(im)g(In)-36 b(terv)-72 b(all)395 b Fv([)8
b(2;)221 b(3])396 b Fx(eine)f(Linkskr\374mm)-36 b(ung)1770
61229 y(\(p)36 b(ositiv)-36 b(e)435 b(Kr\374mm)-36 b(ung\))432
b(auf.)p 42912 62506 V 45277 62506 V 1062 62550 44260
45 v 47992 7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
9815 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 66578 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(74)p 0 TeXcolorgray eop end
%%Page: 75 75
TeXDict begin 75 74 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)881 b(3.3)g(-)g(28)g(Extremstelle)f
(-)h(MC)g(-)g(Matura)g(2013/14)g(1.)g(Ne-)-2331 4622
y(b)60 b(en)-60 b(termin)p 0 TeXcolorgray -1391 7929
a Fx(96.)p 0 TeXcolorgray 651 w(Die)583 b(Ermittlung)f(lokaler)i
(Extremstellen)f(einer)f(P)-36 b(olynomfunktion)584 b
Ft(f)724 b Fx(erfolgt)584 b(h\344u\034g)921 9921 y(mithilfe)434
b(der)f(Di\033erenzialrec)-36 b(hn)g(ung.)921 12466 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(A)-36 b(ussagen)433 b(an,)h(die)g(stets)f
(zutre\033end)f(sind!)p 1062 15425 44260 45 v 1062 20487
45 5063 v 1770 17292 a(W)-108 b(enn)404 b Ft(x)6165 17491
y Fq(0)7095 17292 y Fx(eine)g(lokale)i(Extremstelle)f(v)-36
b(on)405 b Ft(f)546 b Fx(ist,)405 b(dann)e(w)-36 b(ec)g(hselt)405
b(die)f(F)-108 b(unktion)1770 19284 y(an)434 b(der)f(Stelle)h
Ft(x)10097 19483 y Fq(0)11056 19284 y Fx(das)g(Kr\374mm)-36
b(ungsv)g(erhalten.)p 42912 20487 V 45277 20487 V 1062
20532 44260 45 v 1062 23750 45 3219 v 1770 22473 a(W)-108
b(enn)433 b Ft(x)6194 22672 y Fq(0)7154 22473 y Fx(eine)g(lokale)j
(Extremstelle)e(v)-36 b(on)434 b Ft(f)575 b Fx(ist,)434
b(dann)f(ist)h Ft(f)32822 21991 y Fp(00)33387 22473 y
Fv(\()p Ft(x)34632 22672 y Fq(0)35158 22473 y Fv(\))369
b(=)g(0)p Fx(.)p 42912 23750 V 45277 23750 V 1062 23794
44260 45 v 1062 28856 45 5063 v 1770 25661 a(W)-108 b(enn)419
b(die)g(F)-108 b(unktion)418 b Ft(f)561 b Fx(b)36 b(ei)419
b Ft(x)17111 25860 y Fq(0)18056 25661 y Fx(das)g(Monotoniev)-36
b(erhalten)419 b(\344ndert,)g(dann)f(liegt)1770 27653
y(b)36 b(ei)434 b Ft(x)4641 27852 y Fq(0)5601 27653 y
Fx(eine)f(lokale)j(Extremstelle)e(v)-36 b(on)434 b Ft(f)142
b Fx(.)p 42912 28856 V 1 0 0 TeXcolorrgb 43621 26657
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 28856 V 1062 28901 44260 45 v 1062 32119 45 3219
v 1770 30842 a Fx(W)-108 b(enn)433 b Ft(x)6194 31041
y Fq(0)7154 30842 y Fx(eine)g(lokale)j(Extremstelle)e(v)-36
b(on)434 b Ft(f)575 b Fx(ist,)434 b(dann)f(ist)h Ft(f)32822
30360 y Fp(0)33132 30842 y Fv(\()p Ft(x)34377 31041 y
Fq(0)34903 30842 y Fv(\))369 b(=)f(0)p Fx(.)p 42912 32119
V 1 0 0 TeXcolorrgb 5452 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 32119 V 1062 32163 44260
45 v 1062 37299 45 5137 v 1770 34104 a Fx(W)-108 b(enn)433
b Ft(x)6194 34303 y Fq(0)7154 34104 y Fx(eine)g(lokale)j(Extremstelle)e
(v)-36 b(on)434 b Ft(f)575 b Fx(ist,)434 b(dann)f(ist)h
Ft(f)32822 33622 y Fp(0)33132 34104 y Fv(\()p Ft(x)p
Fv(\))g Fx(f\374r)f Ft(x)369 b(<)g(x)40604 34303 y Fq(0)1770
36096 y Fx(immer)434 b(negativ)h(und)d(f\374r)h Ft(x)370
b(>)e(x)18294 36295 y Fq(0)19254 36096 y Fx(immer)433
b(p)36 b(ositiv.)p 42912 37299 V 45277 37299 V 1062 37344
44260 45 v 47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Fr(AN)369 b(3.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 41372 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(75)p 0 TeXcolorgray eop end
%%Page: 76 76
TeXDict begin 76 75 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)522 b(3.3)f(-)g(29)g(W)-179
b(assermenge)520 b(in)h(einem)f(Beh\344lter)g(-)i(MC)f(-)h(Matura)-2385
4515 y(2016/17)718 b(-)f(Haupttermin)p 0 TeXcolorgray
-1391 7823 a Fx(97.)p 0 TeXcolorgray 651 w(In)438 b(der)g(nac)-36
b(hstehenden)437 b(Abbildung)h(ist)g(die)h(momen)-36
b(tane)438 b(\304nderungsrate)f Ft(R)450 b Fx(der)438
b(W)-108 b(as-)921 9815 y(sermenge)353 b(in)h(einem)f(Beh\344lter)g
(\(in)h(m)19803 9333 y Fq(3)20328 9815 y Fx(/h\))f(in)h(Abh\344ngigk)
-36 b(eit)354 b(v)-36 b(on)354 b(der)e(Zeit)i Ft(t)f
Fx(dargestellt.)p 0 TeXcolorgray 0 TeXcolorgray 7850
32006 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 281.1128 a add def
/d 0.0 a add neg def /h 160.47343 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7850 32006 a 11377 26651 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45274 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 249.24586 0.0 3.41418 0.0   /Lineto /lineto load def 0 
setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if ()
length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add
/arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2
y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1
Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 10 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.3  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 112.10387 0.0 -48.36957   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.3  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 249.24586  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 249.24586  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-48.36957  def /maxTickline 112.10387  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 112.10387
0.0 -48.36957   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 249.24586
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 112.10387  0 -48.36957  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -48.36957
 112.10387  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 249.24586  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 0 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 112.10387
0.0 -48.36957   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 249.24586
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 10132 26937 a
Fq(0)10132 23787 y(1)10132 20637 y(2)10132 17488 y(3)9400
30040 y Fp(\000)p Fq(1)14292 27997 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h
(8)11377 26651 y
tx@Dict begin  gsave STV CP T /ps@refangle 128.  def grestore  end
 11377 26651 a 11377 26651 a
tx@Dict begin  { 249.24586 112.10387 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11377 26651
a 11377 26651 a
tx@Dict begin  { 5.0 28.3962 8.26648 0.0 128.  Uput UUput } PutCoor
PutBegin  end
 11377 26651 a 9805 27109 a Ft(t)434 b
Fx(in)f(h)11377 26651 y
tx@Dict begin  PutEnd  end
 11377 26651 a 11377 26651 a
tx@Dict begin  PutEnd  end
 11377
26651 a 11377 26651 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11377 26651 a 11377 26651 a
tx@Dict begin  { 0.0 0.0 pop 249.24586 112.10387 exch pop } PutCoor
PutBegin  end
 11377
26651 a 11377 26651 a
tx@Dict begin  { 5.0 66.99416 9.51021 3.0 -40.  Uput UUput } PutCoor
PutBegin  end
 11377 26651 a 7669 27012 a Ft(R)11
b Fv(\()p Ft(t)p Fv(\))433 b Fx(in)g(m)13186 26530 y
Fq(3)13712 27012 y Fx(/h)11377 26651 y
tx@Dict begin  PutEnd  end
 11377 26651 a
11377 26651 a
tx@Dict begin  PutEnd  end
 11377 26651 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 8 def /dx x1 x sub 199
div def /F@pstplot (0.25*x^(2.0)-2.0*x+3.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial 38968 32006 a
currentpoint initclip moveto
 38968 32006 a 921 37982 a
Fx(Kreuze)378 b(die)f(b)36 b(eiden)377 b(zutre\033enden)f(A)-36
b(ussagen)378 b(\374b)36 b(er)377 b(die)h(W)-108 b(assermenge)378
b(im)g(Beh\344lter)f(an.)p 1062 42674 44260 45 v 1062
47729 45 5056 v 1770 44534 a(Zum)421 b(Zeitpunkt)g Ft(t)368
b Fv(=)h(6)422 b Fx(b)36 b(e\034ndet)420 b(sic)-36 b(h)421
b(w)-36 b(eniger)422 b(W)-108 b(asser)421 b(im)h(Beh\344lter)f(als)h
(zum)1770 46526 y(Zeitpunkt)433 b Ft(t)369 b Fv(=)g(2)p
Fx(.)p 42912 47729 V 1 0 0 TeXcolorrgb 43621 45534 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
45277 47729 V 1062 47774 44260 45 v 1062 50992 45 3219
v 1770 49715 a Fx(Im)434 b(Zeitin)-36 b(terv)-72 b(all)434
b Fv(\(6;)221 b(8\))435 b Fx(nimm)-36 b(t)433 b(die)h(W)-108
b(assermenge)433 b(im)h(Beh\344lter)g(zu.)p 42912 50992
V 1 0 0 TeXcolorrgb 6154 w Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 45277 50992 V 1062 51036 44260
45 v 1062 54099 45 3064 v 1770 52896 a Fx(Zum)f(Zeitpunkt)g
Ft(t)369 b Fv(=)f(2)434 b Fx(b)36 b(e\034ndet)432 b(sic)-36
b(h)434 b(k)-36 b(ein)434 b(W)-108 b(asser)434 b(im)f(Beh\344lter.)p
42912 54099 V 45277 54099 V 1062 54143 44260 45 v 1062
57361 45 3219 v 1770 56084 a(Im)h(Zeitin)-36 b(terv)-72
b(all)434 b Fv(\(0;)221 b(2\))435 b Fx(nimm)-36 b(t)433
b(die)h(W)-108 b(assermenge)433 b(im)h(Beh\344lter)g(ab.)p
42912 57361 V 45277 57361 V 1062 57406 44260 45 v 1062
60469 45 3064 v 1770 59266 a(Zum)f(Zeitpunkt)g Ft(t)369
b Fv(=)f(4)434 b Fx(b)36 b(e\034ndet)432 b(sic)-36 b(h)434
b(am)g(w)-36 b(enigsten)433 b(W)-108 b(asser)434 b(im)g(Beh\344lter.)p
42912 60469 V 45277 60469 V 1062 60513 44260 45 v 47992
7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369
b(3.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 64541 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(76)p
0 TeXcolorgray eop end
%%Page: 77 77
TeXDict begin 77 76 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)601 b(3.3)f(-)g(30)g(Zeit-W)-179
b(eg-F)g(unktion)597 b(-)j(MC)h(-)f(Matura)g(NT)g(1)g(16/17)p
0 TeXcolorgray -1391 4907 a Fx(98.)p 0 TeXcolorgray 651
w(Die)567 b(geradlinige)g(Bew)-36 b(egung)566 b(eines)h(A)-36
b(utos)565 b(wird)h(mithilfe)h(der)f(Zeit-W)-108 b(eg-F)g(unktion)565
b Ft(s)921 6899 y Fx(b)36 b(esc)-36 b(hrieb)36 b(en.)640
b(Innerhalb)f(des)h(Beobac)-36 b(h)g(tungszeitraums)639
b(ist)h(die)f(F)-108 b(unktion)639 b Ft(s)h Fx(streng)921
8891 y(monoton)434 b(w)-36 b(ac)g(hsend)433 b(und)f(rec)-36
b(h)g(tsgekr\374mm)g(t.)921 11436 y(Kreuze)433 b(die)h(b)36
b(eiden)433 b(f\374r)g(diesen)g(Beobac)-36 b(h)g(tungszeitraum)433
b(zutre\033enden)f(A)-36 b(ussagen)433 b(an!)p 1062 12403
44260 45 v 1062 15466 45 3064 v 1770 14263 a(Die)i(Gesc)-36
b(h)g(windigk)g(eit)433 b(des)h(A)-36 b(utos)433 b(wird)h(immer)f
(gr\366\377er.)p 42912 15466 V 45277 15466 V 1062 15510
44260 45 v 1062 18632 45 3123 v 1770 17429 a(Die)i(F)-108
b(unktionsw)-36 b(erte)433 b(v)-36 b(on)433 b Ft(s)16336
16947 y Fp(0)17080 17429 y Fx(sind)g(negativ.)p 42912
18632 V 45277 18632 V 1062 18676 44260 45 v 1062 21799
45 3123 v 1770 20595 a(Die)i(F)-108 b(unktionsw)-36 b(erte)433
b(v)-36 b(on)433 b Ft(s)16336 20113 y Fp(00)17335 20595
y Fx(sind)h(negativ.)p 42912 21799 V 1 0 0 TeXcolorrgb
43621 20570 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 45277 21799 V 1062 21843 44260 45 v 1062
26898 45 5056 v 1770 23703 a Fx(Der)386 b(W)-108 b(ert)385
b(des)g(Di\033erenzenquotien)-36 b(ten)384 b(v)-36 b(on)386
b Ft(s)f Fx(im)g(Beobac)-36 b(h)g(tungszeitraum)385 b(ist)1770
25695 y(negativ.)p 42912 26898 V 45277 26898 V 1062 26942
44260 45 v 1062 30005 45 3064 v 1770 28802 a(Der)434
b(W)-108 b(ert)433 b(des)h(Di\033erenzialquotien)-36
b(ten)434 b(v)-36 b(on)434 b Ft(s)f Fx(wird)h(immer)f(kleiner.)p
42912 30005 V 1 0 0 TeXcolorrgb 43621 28806 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 45277
30005 V 1062 30049 44260 45 v 47992 4907 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6899 a Fr(AN)369 b(3.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 34078
54804 45 v -2331 39379 a Fy(AN)482 b(4.1)g(-)h(1)e(Erkl\344rung)g(des)h
(b)60 b(estimm)-60 b(ten)480 b(In)-60 b(tegrals)482 b(-)g(L)-179
b(T)481 b(-)i(BIFIE)p 0 TeXcolorgray -1391 42686 a Fx(99.)p
0 TeXcolorgray 651 w(Der)434 b(Begri\033)g(des)f(b)36
b(estimm)-36 b(ten)433 b(In)-36 b(tegrals)434 b(soll)g(erkl\344rt)g(w)
-36 b(erden.)921 45232 y(Erg\344nze)358 b(die)h(T)-108
b(extl\374c)-36 b(k)g(en)358 b(im)g(folgenden)h(Satz)f(durc)-36
b(h)357 b(Ankreuzen)g(der)h(jew)-36 b(eils)360 b(ric)-36
b(h)g(tigen)921 47224 y(Satzteile)434 b(so,)g(dass)g(eine)f
(mathematisc)-36 b(h)434 b(k)-36 b(orrekte)434 b(A)-36
b(ussage)434 b(en)-36 b(tsteh)g(t!)921 50714 y(Ein)504
b(b)36 b(estimm)-36 b(tes)504 b(In)-36 b(tegral)504 b(kann)g(als)p
20787 50714 3150 45 v 24408 50666 a(1)23936 50714 y Fo(\015)p
25530 50714 V 3654 w Fx(einer/eines)p 36054 50714 V 39676
50666 a(2)39204 50714 y Fo(\015)p 40798 50714 V 3654
w Fx(ge-)921 52706 y(deutet)432 b(w)-36 b(erden.)p 0
TeXcolorgray 0 TeXcolorgray 11046 54078 10114 45 v 11046
57163 45 3085 v 15778 55860 a(1)15306 55908 y Fo(\015)p
21115 57163 V 11046 57207 10114 45 v 11046 60466 45 3260
v 11755 59263 a Fx(Summe)p 18750 60466 V 19459 59169
a Fn(2)p 21115 60466 V 11046 60510 10114 45 v 11046 63770
45 3260 v 11755 62566 a Fx(Pro)36 b(dukt)p 18750 63770
V 19459 62472 a Fn(2)p 21115 63770 V 11046 63814 10114
45 v 11046 67073 45 3260 v 11755 65870 a Fx(Grenzw)-36
b(ert)p 18750 67073 V 1 0 0 TeXcolorrgb 19459 65775 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
21115 67073 V 11046 67117 10114 45 v 0 TeXcolorgray 0
TeXcolorgray 25658 54189 19678 45 v 25658 57273 45 3085
v 35171 55970 a Fx(2)34699 56018 y Fo(\015)p 45290 57273
V 25658 57318 19678 45 v 25658 60577 45 3260 v 26366
59374 a Fx(Grenzw)g(ertes)433 b(v)-36 b(on)433 b(Summen)p
42925 60577 V 43634 59279 a Fn(2)p 45290 60577 V 25658
60621 19678 45 v 25658 63880 45 3260 v 26366 62677 a
Fx(Summe)g(v)-36 b(on)434 b(Pro)36 b(dukten)p 42925 63880
V 1 0 0 TeXcolorrgb 43634 62583 a Fn(4)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 45290 63880 V 25658
63924 19678 45 v 25658 67184 45 3260 v 26366 65981 a
Fx(Pro)g(duktes)433 b(v)-36 b(on)434 b(Grenzw)-36 b(erten)p
42925 67184 V 43634 65886 a Fn(2)p 45290 67184 V 25658
67228 19678 45 v 47992 42686 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 44678 a Fr(AN)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 71256 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(77)p 0 TeXcolorgray eop end
%%Page: 78 78
TeXDict begin 78 77 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.1)f(-)h(2)f(Un)-60
b(tersumme)716 b(-)i(O)-60 b(A)718 b(-)f(BIFIE)p 0 TeXcolorgray
-2042 4800 a Fx(100.)p 0 TeXcolorgray 652 w(Der)301 b(Graph)f(der)g(in)
h(der)g(nac)-36 b(hstehenden)299 b(Abbildung)h(dargestellten)h(F)-108
b(unktion)300 b Ft(f)443 b Fx(sc)-36 b(hlie\377t)921
6792 y(mit)434 b(der)f(x-A)-36 b(c)g(hse)433 b(im)h(1.)g(Quadran)-36
b(ten)432 b(ein)h(Fl\344c)-36 b(henst\374c)g(k.)p 0 TeXcolorgray
0 TeXcolorgray 5417 42967 a
 currentpoint currentpoint translate 1.491 1.491 scale neg exch neg
exch translate
 5417 42967 a 5851 42967 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 214.09673 a add def
/d 0.0 a add neg def /h 192.79927 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5851 42967 a 8549 40872 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.7259  0 -24.37082  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -24.37082
 189.7259  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.92738  def /maxTickline 173.87189  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 173.87189
0.0 -18.92738   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.7259
0.0 -24.37082 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 173.87189  0 -18.92738  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -18.92738
 173.87189  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-24.37082  def /maxTickline 189.7259  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 173.87189
0.0 -18.92738   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.7259
0.0 -24.37082 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 8549 40872 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 189.7259 173.87189 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 8549 40872 a 8206 41158
a Fx(x)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  PutEnd  end
 8549 40872
a 8549 40872 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 0.0 0.0 pop 189.7259 173.87189 exch pop } PutCoor
PutBegin  end
 8549 40872 a
8549 40872 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 8549 40872 a 7501 41204 a Fx(f\(x\))8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  PutEnd  end
 8549 40872 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 0.0
0.0 28.45274 137.45935 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 28.45274
0.0 56.90549 120.83081 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 56.90549
0.0 85.35823 92.37807 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0.6 0.2 0  setrgbcolor   0. true 85.35823
0.0 113.81097 52.10112 0 Frame  gsave 0.6 0.2 0  setrgbcolor  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.6 0.2 0  setrgbcolor  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8565431527821796 def /x1 6.668102607961151
def /dx x1 x sub 199 div def /F@pstplot (-0.207785768444865*x^(2.0)+0.03892884222432488*x+5.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
8549 40872 a
tx@Dict begin  { 25.51004 -3.23444 } PutCoor PutBegin  end
 8549 40872 a 572 x Ft(x)9288 41643 y Fq(1)8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 54.0939 -3.79494 } PutCoor PutBegin  end
 8549 40872 a 572 x
Ft(x)9288 41643 y Fq(2)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 81.55634 -3.79494 } PutCoor PutBegin  end
 8549 40872 a 572 x Ft(x)9288 41643 y Fq(3)8549
40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549 40872 a
tx@Dict begin  { 110.1402 -2.11345 } PutCoor PutBegin  end
 8549 40872 a 572 x
Ft(x)9288 41643 y Fq(4)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872 a 8549
40872 a
tx@Dict begin  { 136.48164 -4.91592 } PutCoor PutBegin  end
 8549 40872 a 572 x Fx(a)8549 40872 y
tx@Dict begin  PutEnd  end
 8549 40872
a 8549 40872 a
tx@Dict begin  { -10.35934 148.65099 } PutCoor PutBegin  end
 8549 40872 a -172 x Fl(f)8549 40872 y
tx@Dict begin  PutEnd  end

8549 40872 a 29551 42967 a
currentpoint initclip moveto
 29551 42967 a 5417 42967 a
 currentpoint currentpoint translate 1 1.491 div 1 1.491 div scale
neg exch neg exch translate

5417 42967 a 921 46951 a Fx(Der)1901 b(Inhalt)f(a)h(dieses)f(Fl\344c)
-36 b(henst\374c)g(ks)1900 b(kann)h(mit)f(dem)g(A)-36
b(usdruc)g(k)921 48943 y Ft(f)142 b Fv(\()p Ft(x)2949
49142 y Fq(1)3475 48943 y Fv(\))295 b Fu(\001)g Fv(\001)p
Ft(x)g Fv(+)g Ft(f)142 b Fv(\()p Ft(x)10393 49142 y Fq(2)10919
48943 y Fv(\))295 b Fu(\001)g Fv(\001)p Ft(x)g Fv(+)g
Ft(f)142 b Fv(\()p Ft(x)17837 49142 y Fq(3)18362 48943
y Fv(\))295 b Fu(\001)h Fv(\001)p Ft(x)f Fv(+)g Ft(f)142
b Fv(\()p Ft(x)25281 49142 y Fq(4)25806 48943 y Fv(\))295
b Fu(\001)h Fv(\001)p Ft(x)921 51489 y Fx(n\344herungsw)-36
b(eise)433 b(b)36 b(erec)-36 b(hnet)432 b(w)-36 b(erden.)921
54034 y(Gib)465 b(die)h(geometrisc)-36 b(he)465 b(Bedeutung)g(der)g(V)
-108 b(ariablen)466 b Fv(\001)p Ft(x)f Fx(an)h(und)e(b)36
b(esc)-36 b(hreib)36 b(e)465 b(den)g(Ein-)921 56026 y(\035uss)552
b(der)h(Anzahl)g(der)g(T)-108 b(eilin)-36 b(terv)-72
b(alle)554 b Fv([)8 b Ft(x)22223 56225 y Fl(i)22599 56026
y Fv(;)221 b Ft(x)23920 56225 y Fl(i)p Fq(+1)25499 56026
y Fv(])554 b Fx(v)-36 b(on)553 b Fv([)8 b(0;)221 b Ft(a)p
Fv(])554 b Fx(auf)g(die)f(Genauigk)-36 b(eit)554 b(des)921
58018 y(N\344herungsw)-36 b(ertes)433 b(f\374r)g(den)g(Fl\344c)-36
b(heninhalt)433 b(A!)p 1 0 0 TeXcolorrgb 813 62555 a
Fv(\001)p Ft(x)378 b Fx(ist)g(die)g(Breite)f(\(bzw.)i(L\344nge\))e(der)
h(dargestellten)g(Rec)-36 b(h)g(tec)g(k)g(e.)378 b(je)g(gr\366\377er)h
(die)e(Anzahl)921 64547 y(der)433 b(T)-108 b(eilin)-36
b(terv)-72 b(alle)435 b(v)-36 b(on)434 b Fv([)8 b(0;)221
b Ft(a)p Fv(])434 b Fx(ist,)g(desto)g(genauer)f(ist)h(der)f
(N\344herungsw)-36 b(ert.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(4.1)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 68354 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(78)p 0 TeXcolorgray eop end
%%Page: 79 79
TeXDict begin 79 78 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.2)f(-)h(1)f(Un)-60
b(b)60 b(estimm)-60 b(tes)716 b(In)-60 b(tegral)717 b(-)g(MC)h(-)g
(BIFIE)p 0 TeXcolorgray -2042 4800 a Fx(101.)p 0 TeXcolorgray
652 w(Gegeb)36 b(en)363 b(sind)h(A)-36 b(ussagen)363
b(\374b)36 b(er)364 b(die)f(L\366sung)h(eines)g(un)-36
b(b)36 b(estimm)-36 b(ten)362 b(In)-36 b(tegrals.)365
b(Nur)e(eine)921 6792 y(Rec)-36 b(hn)g(ung)496 b(ist)h(ric)-36
b(h)g(tig.)497 b(Die)h(In)-36 b(tegrationsk)g(onstan)g(te)497
b(wird)f(in)h(allen)h(F)-27 b(\344llen)497 b(mit)g Ft(c)476
b Fv(=)h(0)921 8784 y Fx(angenommen.)921 11330 y(Kreuze)433
b(die)h(k)-36 b(orrekte)434 b(Rec)-36 b(hn)g(ung)432
b(an!)p 12484 12296 21416 45 v 12484 17076 45 4780 v
13192 13671 a Fd(Z)14521 15233 y Fv(3)295 b Fu(\001)g
Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(\(6)p
Ft(x)296 b Fv(+)f(5\))28602 14685 y Fq(2)p 31490 17076
V 33856 17076 V 12484 17120 21416 45 v 12484 21900 45
4780 v 13192 18495 a Fd(Z)14521 20057 y Fv(3)g Fu(\001)g
Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(3)p Ft(x)25337
19509 y Fq(2)26159 20057 y Fv(+)295 b(5)p Ft(x)p 31490
21900 V 33856 21900 V 12484 21944 21416 45 v 12484 26724
45 4780 v 13192 23319 a Fd(Z)14521 24881 y Fv(3)g Fu(\001)g
Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(\(6)p
Ft(x)296 b Fv(+)f(15\))29252 24332 y Fq(2)p 31490 26724
V 33856 26724 V 12484 26768 21416 45 v 12484 31547 45
4780 v 13192 28143 a Fd(Z)14521 29705 y Fv(3)g Fu(\001)g
Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(3)296
b Fu(\001)f Fv(\()p Ft(x)26803 29156 y Fq(2)27624 29705
y Fv(+)g(5)p Ft(x)p Fv(\))p 31490 31547 V 1 0 0 TeXcolorrgb
32199 29490 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 33856 31547 V 12484 31592 21416 45 v 12484
36371 45 4780 v 13192 32966 a Fd(Z)14521 34529 y Fv(3)g
Fu(\001)g Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(3)p
Ft(x)25337 33980 y Fq(2)26159 34529 y Fv(+)295 b(15)p
31490 36371 V 33856 36371 V 12484 36416 21416 45 v 12484
41195 45 4780 v 13192 37790 a Fd(Z)14521 39352 y Fv(3)g
Fu(\001)g Fv(\(2)p Ft(x)h Fv(+)f(5\))p Ft(dx)369 b Fv(=)f(6)p
Ft(x)25337 38804 y Fq(2)26159 39352 y Fv(+)295 b(15)p
Ft(x)p 31490 41195 V 33856 41195 V 12484 41239 21416
45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
6792 a Fr(AN)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 45268 54804 45 v -2331 50569 a Fy(AN)718
b(4.2)f(-)h(2)f(In)-60 b(tegral)717 b(Berec)-60 b(hnen)716
b(-)i(O)-60 b(A)717 b(-)h(BIFIE)p 0 TeXcolorgray -2042
53876 a Fx(102.)p 0 TeXcolorgray 652 w(Berec)-36 b(hne:)19142
54306 y Fd(Z)20471 55868 y Fv(\()p Ft(ah)22409 55320
y Fq(3)23229 55868 y Fv(+)295 b Ft(a)25219 55320 y Fq(2)25744
55868 y Fv(\))p Ft(dh)p 1 0 0 TeXcolorrgb 1054 62392
a(ah)2486 61910 y Fq(4)p 1054 62980 1958 45 v 1707 64202
a Fv(4)3439 63290 y(+)g Ft(a)5429 62808 y Fq(2)5955 63290
y Ft(h)f Fv(+)h Ft(C)529 b Fx(\(mit)433 b Ft(C)464 b
Fu(2)369 b Fj(R)p Fv(\))p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 53876 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 55868 a Fr(AN)g(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 67677 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(79)p 0 TeXcolorgray eop end
%%Page: 80 80
TeXDict begin 80 79 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.2)f(-)h(3)f(In)-60
b(tegrationsregeln)715 b(-)j(MC)g(-)f(BIFIE)p 0 TeXcolorgray
-2042 4800 a Fx(103.)p 0 TeXcolorgray 652 w(Es)434 b(sei)f
Ft(f)576 b Fx(eine)434 b(reelle)g(F)-108 b(unktion)432
b(und)h Ft(a)g Fx(eine)h(reelle)g(Zahl.)921 9338 y(Kreuze)f(die)h(b)36
b(eiden)433 b(zutre\033enden)e(Gleic)-36 b(h)g(ungen)433
b(an.)p 10507 10305 25370 45 v 10507 15084 45 4780 v
11216 11679 a Fd(Z)12544 13241 y Ft(a)295 b Fu(\001)g
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)369 b Fv(=)f
Ft(a)295 b Fu(\001)21526 11679 y Fd(Z)22855 13241 y Ft(f)142
b Fv(\()p Ft(x)p Fv(\))p Ft(dx)p 33467 15084 V 1 0 0
TeXcolorrgb 34176 13026 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35832 15084 V 10507 15128
25370 45 v 10507 19908 45 4780 v 11216 16503 a Fd(Z)12544
18065 y Ft(f)g Fv(\()p Ft(a)295 b Fu(\001)g Ft(x)p Fv(\))p
Ft(dx)369 b Fv(=)19884 16503 y Fd(Z)21213 18065 y Ft(f)142
b Fv(\()p Ft(a)p Fv(\))p Ft(dx)294 b Fu(\001)26064 16503
y Fd(Z)27393 18065 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(dx)p 33467 19908 V 35832 19908 V 10507 19952 25370
45 v 10507 24732 45 4780 v 11216 21327 a Fd(Z)12544 22889
y Fv(\()p Ft(a)295 b Fv(+)f Ft(f)142 b Fv(\()p Ft(x)p
Fv(\)\))p Ft(dx)369 b Fv(=)21539 21327 y Fd(Z)22867 22889
y Ft(a)295 b Fu(\001)g Ft(dx)g Fv(+)27526 21327 y Fd(Z)28854
22889 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)p 33467
24732 V 1 0 0 TeXcolorrgb 34176 22674 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 35832 24732
V 10507 24776 25370 45 v 10507 29556 45 4780 v 11216
26151 a Fd(Z)12544 27713 y Ft(f)g Fv(\()p Ft(a)295 b
Fv(+)f Ft(x)p Fv(\))p Ft(dx)369 b Fv(=)20527 26151 y
Fd(Z)21855 27713 y Ft(f)142 b Fv(\()p Ft(a)p Fv(\))p
Ft(dx)295 b Fv(+)27350 26151 y Fd(Z)28678 27713 y Ft(f)142
b Fv(\()p Ft(x)p Fv(\))p Ft(dx)p 33467 29556 V 35832
29556 V 10507 29600 25370 45 v 10507 34393 45 4793 v
11216 30975 a Fd(Z)12544 32537 y Ft(f)g Fv(\()p Ft(x)p
Fv(\))15078 31988 y Fq(2)15603 32537 y Ft(dx)369 b Fv(=)18901
31638 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))21435 31156 y
Fq(3)p 18901 32227 3060 45 v 20105 33448 a Fv(3)22388
32537 y(+)295 b Ft(c)p 33467 34393 45 4793 v 35832 34393
V 10507 34437 25370 45 v 47992 4800 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 6792 a Fr(AN)369 b(4.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 38465 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(80)p 0 TeXcolorgray
eop end
%%Page: 81 81
TeXDict begin 81 80 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)734 b(4.2)f(-)h(4)f(Stammfunktion)e
(der)h(Exp)60 b(onen)-60 b(tialfunktion)729 b(-)734 b(MC)-2617
4515 y(-)718 b(BIFIE)g(-)g(K)-60 b(omp)60 b(etenzc)-60
b(hec)g(k)716 b(2016)p 0 TeXcolorgray -2042 7823 a Fx(104.)p
0 TeXcolorgray 652 w(Gegeb)36 b(en)433 b(ist)h(eine)f(F)-108
b(unktion)433 b Ft(f)575 b Fx(mit)434 b(der)f(F)-108
b(unktionsgleic)-36 b(h)g(ung)433 b Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))369 b(=)f Ft(e)38335 7341 y Fq(2)p Fp(\001)p
Fl(x)39652 7823 y Fx(.)855 12360 y(W)-108 b(elc)-36 b(he)548
b(v)-36 b(on)549 b(den)f(un)-36 b(ten)547 b(durc)-36
b(h)548 b(ihre)g(F)-108 b(unktionsgleic)-36 b(h)g(ungen)548
b(angegeb)36 b(enen)548 b(F)-108 b(unktio-)921 14352
y(nen)525 b Ft(F)707 b Fx(ist)526 b(Stammfunktionen)g(v)-36
b(on)526 b Ft(f)669 b Fx(und)524 b(v)-36 b(erl\344uft)527
b(durc)-36 b(h)525 b(den)g(Punkt)h Ft(P)708 b Fv(=)526
b(\(0)p Ft(=)p Fv(1\))p Fx(?)921 16344 y(Kreuze)433 b(die)h
(zutre\033ende)e(An)-36 b(t)g(w)g(ort)433 b(an.)p 16138
19044 14109 45 v 16138 22486 45 3442 v 16846 21083 a
Ft(F)181 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(e)21972
20601 y Fq(2)p Fp(\001)p Fl(x)23584 21083 y Fv(+)25024
20560 y Fq(1)p 25024 20773 471 45 v 25024 21541 a(2)p
27837 22486 45 3442 v 30202 22486 V 16138 22530 14109
45 v 16138 25805 45 3275 v 16846 24528 a Ft(F)181 b Fv(\()p
Ft(x)p Fv(\))369 b(=)f(2)296 b Fu(\001)f Ft(e)23582 24046
y Fq(2)p Fp(\001)p Fl(x)25194 24528 y Fu(\000)g Fv(1)p
27837 25805 V 30202 25805 V 16138 25849 14109 45 v 16138
29123 45 3275 v 16846 27846 a Ft(F)181 b Fv(\()p Ft(x)p
Fv(\))369 b(=)f(2)296 b Fu(\001)f Ft(e)23582 27364 y
Fq(2)p Fp(\001)p Fl(x)p 27837 29123 V 30202 29123 V 16138
29168 14109 45 v 16138 33920 45 4753 v 16846 32064 a
Ft(F)181 b Fv(\()p Ft(x)p Fv(\))369 b(=)21502 31165 y
Ft(e)22105 30683 y Fq(2)p Fp(\001)p Fl(x)p 21502 31754
1920 45 v 22137 32975 a Fv(2)23850 32064 y(+)25289 31165
y(1)p 25289 31754 651 45 v 25289 32975 a(2)p 27837 33920
45 4753 v 1 0 0 TeXcolorrgb 28545 31876 a Fn(4)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 30202 33920
V 16138 33964 14109 45 v 16138 37239 45 3275 v 16846
35962 a Ft(F)181 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Ft(e)21972
35480 y Fq(2)p Fp(\001)p Fl(x)p 27837 37239 V 30202 37239
V 16138 37283 14109 45 v 16138 42036 45 4753 v 16846
40179 a Ft(F)181 b Fv(\()p Ft(x)p Fv(\))369 b(=)21502
39281 y Ft(e)22105 38799 y Fq(2)p Fp(\001)p Fl(x)p 21502
39870 1920 45 v 22137 41091 a Fv(2)p 27837 42036 45 4753
v 30202 42036 V 16138 42080 14109 45 v 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(4.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 46108 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(81)p 0 TeXcolorgray
eop end
%%Page: 82 82
TeXDict begin 82 81 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)525 b(4.2)f(-)g(5)g(In)-60
b(tegral)524 b(einer)f(F)-179 b(unktion)522 b Fa(f)728
b Fy(-)525 b(O)-60 b(A)524 b(-)h(Matura)e(2014/15)-2617
4622 y(-)718 b(Haupttermin)p 0 TeXcolorgray -2042 7929
a Fx(105.)p 0 TeXcolorgray 652 w(Die)546 b(nac)-36 b(hstehende)543
b(Abbildung)h(zeigt)h(den)f(Graphen)g(der)g(P)-36 b(olynomfunktion)546
b Ft(f)142 b Fx(.)546 b(Alle)921 9921 y(Nullstellen)500
b(sind)f(ganzzahlig.)i(Die)f(Fl\344c)-36 b(he,)500 b(die)f(v)-36
b(om)500 b(Graphen)e(der)h(F)-108 b(unktion)498 b Ft(f)641
b Fx(und)921 11913 y(der)489 b Ft(x)p Fx(-A)-36 b(c)g(hse)489
b(b)36 b(egrenzt)490 b(wird,)g(ist)g(sc)-36 b(hra\036ert)489
b(dargestellt.)i Ft(A)f Fx(b)36 b(ezeic)-36 b(hnet)489
b(die)h(Summe)921 13905 y(der)433 b(b)36 b(eiden)433
b(sc)-36 b(hra\036erten)433 b(Fl\344c)-36 b(heninhalte.)p
0 TeXcolorgray 0 TeXcolorgray 12701 40190 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 193.4605 a add def
/d 0.0 a add neg def /h 200.4595 a add def a neg d moveto a neg h L
w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 12701 40190
a 23407 29002 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 96.74696 0.0 -96.71353 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -85.35823 0.0 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 99.39053 0.0 -101.06897   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 96.74696  0 -96.71353  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -96.71353
 96.74696  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-101.06897  def /maxTickline 99.39053  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.39053
0.0 -101.06897   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 96.74696
0.0 -96.71353 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 99.39053  0 -101.06897  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -101.06897
 99.39053  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.71353  def /maxTickline 96.74696  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 99.39053
0.0 -101.06897   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 96.74696
0.0 -96.71353 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 22162 26138 a
Fq(1)22161 22988 y(2)22161 19838 y(3)21430 32391 y Fp(\000)p
Fq(1)21430 35540 y Fp(\000)p Fq(2)21430 38690 y Fp(\000)p
Fq(3)26321 30348 y(1)2680 b(2)f(3)-13434 b Fp(\000)p
Fq(1)-4352 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)23407 29002
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 23407 29002 a 23407 29002 a
tx@Dict begin  { 96.74696 99.39053 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 23407 29002 a 23407 29002
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 23407 29002 a 23037 29288 a Ft(x)23407 29002 y
tx@Dict begin  PutEnd  end
 23407
29002 a 23407 29002 a
tx@Dict begin  PutEnd  end
 23407 29002 a 23407 29002 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 23407
29002 a 23407 29002 a
tx@Dict begin  { 0.0 0.0 pop 96.74696 99.39053 exch pop } PutCoor PutBegin
 end
 23407 29002 a 23407 29002 a
tx@Dict begin  { 5.0 22.88857 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 23407
29002 a 22140 29334 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))23407
29002 y
tx@Dict begin  PutEnd  end
 23407 29002 a 23407 29002 a
tx@Dict begin  PutEnd  end
 23407 29002 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x -2. def /x1 1. def /dx x1 x sub 49 div def
/F@pstplot (-0.5*x^(3.0)+0.5*x^(2.0)+2.0*x-2.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
28.45274 0.0 lineto -56.90549 0.0 lineto closepath gsave 90 rotate
 /clipType { clip } def 45.0 rotate 0.8 SLW 0  setgray 4.99884 0.0
0.0 LineFill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-0.5*x^(3.0)+0.5*x^(2.0)+2.0*x-2.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx
add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
56.90549 0.0 lineto 28.45274 0.0 lineto closepath gsave 90 rotate 
/clipType { clip } def 45.0 rotate 0.8 SLW 0  setgray 4.99884 0.0 0.0
LineFill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -3.399092081089317 def /x1 3.4002745941473695
def /dx x1 x sub 199 div def /F@pstplot (-0.5*x^(3.0)+0.5*x^(2.0)+2.0*x-2.0)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 23407 29002 a
tx@Dict begin  { -76.21753 76.39511 } PutCoor PutBegin  end

23407 29002 a 922 x Ft(f)23407 29002 y
tx@Dict begin  PutEnd  end
 23407 29002 a
34116 40190 a
currentpoint initclip moveto
 34116 40190 a 921 46166 a Fx(Gib)433 b(einen)g(k)-36
b(orrekten)434 b(A)-36 b(usdruc)g(k)433 b(f\374r)g Ft(A)h
Fx(mithilfe)g(der)f(In)-36 b(tegralsc)g(hreib)g(w)g(eise)434
b(an.)921 50704 y Ft(A)369 b Fv(=)p 3646 50704 18898
34 v 1 0 0 TeXcolorrgb 15044 55241 a Ft(A)g Fv(=)17768
53679 y Fd(Z)18875 54029 y Fq(2)18383 56194 y(1)19622
55241 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))221 b(d)p Ft(x)295
b Fu(\000)25463 53679 y Fd(Z)26570 54029 y Fq(1)26078
56194 y Fp(\000)p Fq(2)27557 55241 y Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))221 b(d)p Ft(x)921 62663 y Fx(o)36 b(der:)18411
69192 y Ft(A)369 b Fv(=)21136 67630 y Fd(Z)22243 67981
y Fq(2)21751 70145 y Fp(\000)p Fq(2)23230 69192 y Fu(j)p
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Fu(j)442 b Fv(d)p Ft(x)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369
b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 75552 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(82)p
0 TeXcolorgray eop end
%%Page: 83 83
TeXDict begin 83 82 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)997 b(4.2)f(-)h(6)f(In)-60
b(tegrationsregeln)995 b(-)i(MC)f(-)h(Matura)f(2014/15)h(-)-2331
4622 y(Neb)60 b(en)-60 b(termin)716 b(1)p 0 TeXcolorgray
-2042 7929 a Fx(106.)p 0 TeXcolorgray 652 w(Zw)-36 b(ei)338
b(nac)-36 b(hstehend)335 b(angef\374hrt)i(Gleic)-36 b(h)g(ungen)336
b(sind)h(f\374r)g(alle)h(P)-36 b(olynomfunktionen)338
b Ft(f)479 b Fx(und)921 9921 y(b)36 b(ei)434 b(b)36 b(eliebiger)434
b(W)-108 b(ahl)434 b(der)f(In)-36 b(tegrationsgrenzen)433
b Ft(a)g Fx(und)g Ft(b)g Fx(\(mit)h Ft(a)368 b(<)h(b)p
Fx(\))433 b(ric)-36 b(h)g(tig.)921 14458 y(Kreuze)433
b(die)h(b)36 b(eiden)433 b(zutre\033enden)e(Gleic)-36
b(h)g(ungen)433 b(an.)p 9912 15425 26561 45 v 9912 20260
45 4835 v 10620 16800 a Fd(Z)11727 17150 y Fl(b)11235
19315 y(a)12406 18362 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))295 b(+)g Ft(x)p Fv(\))221 b Ft(dx)369 b Fv(=)21679
16800 y Fd(Z)22786 17150 y Fl(b)22294 19315 y(a)23465
18362 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))221 b Ft(dx)295
b Fv(+)29237 16800 y Fd(Z)30344 17150 y Fl(b)29852 19315
y(a)31023 18362 y Ft(x)221 b(dx)p 34063 20260 V 1 0 0
TeXcolorrgb 34771 18174 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 36428 20260 V 9912 20304 26561
45 v 9912 25139 45 4835 v 10620 21679 a Fd(Z)11727 22029
y Fl(b)11235 24194 y(a)12406 23241 y Ft(f)142 b Fv(\(2)295
b Fu(\001)h Ft(x)p Fv(\))221 b Ft(dx)369 b Fv(=)20068
22342 y(1)p 20068 22931 651 45 v 20068 24152 a(2)21147
23241 y Fu(\001)21811 21679 y Fd(Z)22918 22029 y Fl(b)22426
24194 y(a)23597 23241 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))221
b Ft(dx)p 34063 25139 45 4835 v 36428 25139 V 9912 25183
26561 45 v 9912 30018 45 4835 v 10620 26558 a Fd(Z)11727
26909 y Fl(b)11235 29073 y(a)12406 28120 y Fv(\(1)296
b Fu(\000)f Ft(f)142 b Fv(\()p Ft(x)p Fv(\)\))221 b Ft(dx)369
b Fv(=)f Ft(x)296 b Fu(\000)23974 26558 y Fd(Z)25081
26909 y Fl(b)24589 29073 y(a)25760 28120 y Ft(f)142 b
Fv(\()p Ft(x)p Fv(\))221 b Ft(dx)p 34063 30018 V 36428
30018 V 9912 30062 26561 45 v 9912 34897 45 4835 v 10620
31437 a Fd(Z)11727 31788 y Fl(b)11235 33952 y(a)12406
32999 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b(+)g(2\))221
b Ft(dx)369 b Fv(=)21590 31437 y Fd(Z)22697 31788 y Fl(b)22205
33952 y(a)23376 32999 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))221
b Ft(dx)295 b Fv(+)g(2)p 34063 34897 V 36428 34897 V
9912 34942 26561 45 v 9912 39777 45 4835 v 10620 36316
a Fd(Z)11727 36667 y Fl(b)11235 38832 y(a)12406 37878
y Fv(\(3)h Fu(\001)f Ft(f)142 b Fv(\()p Ft(x)p Fv(\)\))221
b Ft(dx)369 b Fv(=)f(3)296 b Fu(\001)22557 36316 y Fd(Z)23664
36667 y Fl(b)23172 38832 y(a)24343 37878 y Ft(f)142 b
Fv(\()p Ft(x)p Fv(\))221 b Ft(dx)p 34063 39777 V 1 0 0
TeXcolorrgb 34771 37691 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 36428 39777 V 9912 39821 26561
45 v 47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
9921 a Fr(AN)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 43849 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(83)p 0 TeXcolorgray eop end
%%Page: 84 84
TeXDict begin 84 83 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)633 b(4.2)e(-)i(7)f(In)-60
b(tegral)632 b(-)g(MC)g(-)h(Matura)f(2015/16)f(-)i(Neb)60
b(en)-60 b(termin)-2438 4622 y(1)p 0 TeXcolorgray -2042
7929 a Fx(107.)p 0 TeXcolorgray 652 w(Gegeb)36 b(en)433
b(ist)h(das)f(b)36 b(estimm)-36 b(te)433 b(In)-36 b(tegral)13535
12466 y Ft(I)473 b Fv(=)15963 10904 y Fd(Z)17070 11255
y Fl(a)16578 13419 y Fq(0)17625 12466 y Fv(\(25)295 b
Fu(\001)h Ft(x)21130 11918 y Fq(2)21951 12466 y Fv(+)f(3\))221
b Ft(dx)434 b Fx(mit)f Ft(a)369 b Fu(2)g Fj(R)32134 11918
y Fq(+)32921 12466 y Ft(:)921 15905 y Fx(Kreuze)401 b(die)g(b)36
b(eiden)401 b(A)-36 b(usdr\374c)g(k)g(e)400 b(an,)h(die)h(f\374r)f
(alle)h Ft(a)369 b(>)f Fv(0)402 b Fx(denselb)36 b(en)400
b(W)-108 b(ert)401 b(wie)h Ft(I)505 b Fx(hab)36 b(en.)p
13464 16871 19455 45 v 13464 21706 45 4835 v 14173 19808
a Fv(25)296 b Fu(\001)16433 18246 y Fd(Z)17540 18597
y Fl(a)17048 20761 y Fq(0)18095 19808 y Ft(x)18834 19260
y Fq(2)19581 19808 y Ft(dx)g Fv(+)22598 18246 y Fd(Z)23705
18597 y Fl(a)23213 20761 y Fq(0)24260 19808 y Fv(3)221
b Ft(dx)p 30510 21706 V 1 0 0 TeXcolorrgb 31218 19621
a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32875 21706 V 13464 21750 19455 45 v 13464 26585 45 4835
v 14173 23125 a Fd(Z)15280 23476 y Fl(a)14788 25641 y
Fq(0)15835 24687 y Fv(25)g Ft(dx)296 b Fu(\001)19731
23125 y Fd(Z)20838 23476 y Fl(a)20346 25641 y Fq(0)21393
24687 y Ft(x)22132 24139 y Fq(2)22880 24687 y Ft(dx)f
Fv(+)25897 23125 y Fd(Z)27004 23476 y Fl(a)26512 25641
y Fq(0)27559 24687 y Fv(3)221 b Ft(dx)p 30510 26585 V
32875 26585 V 13464 26630 19455 45 v 13464 31465 45 4835
v 14173 28004 a Fd(Z)15280 28355 y Fl(a)14788 30520 y
Fq(0)15835 29566 y Fv(25)296 b Fu(\001)f Ft(x)18834 29018
y Fq(2)19581 29566 y Ft(dx)h Fv(+)e(3)p 30510 31465 V
32875 31465 V 13464 31509 19455 45 v 13464 36261 45 4753
v 14306 33506 a(25)i Fu(\001)f Ft(a)17249 33024 y Fq(3)p
14306 34095 3469 45 v 15715 35316 a Fv(3)18202 34405
y(+)g(3)h Fu(\001)f Ft(a)p 30510 36261 45 4753 v 1 0 0
TeXcolorrgb 31218 34217 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 32875 36261 V 13464 36305
19455 45 v 13464 39032 45 2727 v 14173 38087 a Fv(50)h
Fu(\001)f Ft(a)p 30510 39032 V 32875 39032 V 13464 39076
19455 45 v 47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Fr(AN)369 b(4.2)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 43104 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(84)p 0 TeXcolorgray eop end
%%Page: 85 85
TeXDict begin 85 84 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)718 b(4.2)f(-)h(8)f(Fl\344c)-60
b(heninhalt)715 b(-)i(O)-60 b(A)718 b(-)g(Matura)f(NT)g(2)h(15/16)p
0 TeXcolorgray -2042 4907 a Fx(108.)p 0 TeXcolorgray
652 w(Abgebildet)966 b(ist)g(ein)g(A)-36 b(ussc)g(hnitt)964
b(des)i(Graphen)e(der)i(P)-36 b(olynomfunktion)967 b
Ft(f)1107 b Fx(mit)921 6899 y Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))369 b(=)f Fu(\000)6370 6376 y Fl(x)6900 6063 y
Fk(3)p 6370 6589 991 45 v 6630 7357 a Fq(8)7789 6899
y Fv(+)295 b(2)h Fu(\001)f Ft(x)p Fx(.)921 9444 y(Die)401
b(Fl\344c)-36 b(he)401 b(zwisc)-36 b(hen)401 b(dem)f(Graphen)f(der)h(F)
-108 b(unktion)400 b Ft(f)542 b Fx(und)400 b(der)g(x-A)-36
b(c)g(hse)400 b(im)h(In)-36 b(terv)-72 b(all)921 11436
y Fv([)8 b Fu(\000)p Fv(2;)221 b(2])435 b Fx(ist)f(grau)g(markiert.)p
0 TeXcolorgray 0 TeXcolorgray 7666 44669 a
 currentpoint currentpoint translate 0.84589 0.84589 scale neg exch
neg exch translate
 7666 44669
a 8100 44669 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 332.32826 a add def
/d 0.0 a add neg def /h 328.91364 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 8100 44669 a 26116 26213 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -142.26372 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 169.57854 0.0 -162.74973 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -142.26372 0.0 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 162.18054 0.0 -166.7331   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 169.57854  0 -162.74973  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -162.74973
 169.57854  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-166.7331  def /maxTickline 162.18054  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.18054
0.0 -166.7331   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 169.57854
0.0 -162.74973 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 162.18054  0 -166.7331  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -166.7331
 162.18054  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-162.74973  def /maxTickline 169.57854  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 162.18054
0.0 -166.7331   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 169.57854
0.0 -162.74973 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
24871 23349 a Fq(1)24870 20199 y(2)24870 17049 y(3)24870
13900 y(4)24870 10750 y(5)24138 29602 y Fp(\000)p Fq(1)24138
32751 y Fp(\000)p Fq(2)24138 35901 y Fp(\000)p Fq(3)24138
39050 y Fp(\000)p Fq(4)24138 42200 y Fp(\000)p Fq(5)29030
27558 y(1)2680 b(2)f(3)h(4)f(5)-19733 b Fp(\000)p Fq(1)-4352
b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)f Fp(\000)p Fq(4)g
Fp(\000)p Fq(5)26116 26213 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26116 26213 a 26116 26213
a
tx@Dict begin  { 169.57854 162.18054 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26116 26213 a 26116 26213 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26116 26213 a 25773 26499
a Fx(x)26116 26213 y
tx@Dict begin  PutEnd  end
 26116 26213 a 26116 26213 a
tx@Dict begin  PutEnd  end
 26116
26213 a 26116 26213 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26116 26213 a 26116 26213 a
tx@Dict begin  { 0.0 0.0 pop 169.57854 162.18054 exch pop } PutCoor
PutBegin  end
 26116
26213 a 26116 26213 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26116 26213 a 25068 26545 a Fx(f\(x\))26116
26213 y
tx@Dict begin  PutEnd  end
 26116 26213 a 26116 26213 a
tx@Dict begin  PutEnd  end
 26116 26213 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.12549 0.12549 0.12549  setrgbcolor
  0.8 SLW 0.12549 0.12549 0.12549  setrgbcolor  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def /ArrowInside { } def  
 /x -2. def /x1 2. def /dx x1 x sub 49 div def /F@pstplot ((-x^(3.0))/8.0+2.0*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  56.90549 0.0 lineto -56.90549 0.0 lineto closepath
gsave 0.12549 0.12549 0.12549  setrgbcolor  0.25 .setopacityalpha 
fill  grestore gsave 0.8 SLW 0.12549 0.12549 0.12549  setrgbcolor 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.0 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -5.720000000000001 def /x1 5.959999999999994
def /dx x1 x sub 199 div def /F@pstplot ((-x^(3.0))/8.0+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 2.0 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
26116 26213 a
tx@Dict begin  { -129.74443 114.38014 } PutCoor PutBegin  end
 26116 26213 a -258 x Ft(f)26116 26213 y
tx@Dict begin  PutEnd  end

26116 26213 a 26116 26213 a
tx@Dict begin  { -3.41418 6.82881 } PutCoor PutBegin  end
 26116 26213 a 0.12549 0.12549 0.12549
TeXcolorrgb Fv(0)p 0 TeXcolorgray 26116 26213 a
tx@Dict begin  PutEnd  end
 26116
26213 a 44887 44669 a
currentpoint initclip moveto
 44887 44669 a 7666 44669 a
 currentpoint currentpoint translate 1 0.84589 div 1 0.84589 div scale
neg exch neg exch translate
 7666
44669 a 921 48654 a Fx(Brec)-36 b(hne)433 b(den)g(Inhalt)g(der)g(grau)h
(markierten)f(Fl\344c)-36 b(he!)p 1 0 0 TeXcolorrgb 18502
55183 a Fv(2)296 b Fu(\001)20112 53621 y Fd(Z)21219 53972
y Fq(2)20727 56136 y(0)21966 55183 y Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p Ft(dx)369 b Fv(=)g(7)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4907 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 6899 a Fr(AN)g(4.2)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 61543 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(85)p 0 TeXcolorgray
eop end
%%Page: 86 86
TeXDict begin 86 85 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)479 b(4.2)f(-)g(9)g(Sc)-60
b(hnitt)477 b(zw)-60 b(eier)479 b(F)-179 b(unktionen)475
b(-)j(O)-60 b(A)478 b(-)h(Matura)f(2013/14)-2331 4622
y(Haupttermin)p 0 TeXcolorgray -2042 7929 a Fx(109.)p
0 TeXcolorgray 652 w(Gegeb)36 b(en)756 b(sind)g(die)h(b)36
b(eiden)756 b(rellen)h(F)-108 b(unktionen)756 b Ft(f)899
b Fx(und)755 b Ft(g)805 b Fx(mit)756 b(den)g(Gleic)-36
b(h)g(ungen)921 9921 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369
b(=)f Ft(x)5943 9439 y Fq(2)6903 9921 y Fx(und)432 b
Ft(g)48 b Fv(\()p Ft(x)p Fv(\))368 b(=)h Fu(\000)p Ft(x)15447
9439 y Fq(2)16268 9921 y Fv(+)295 b(8)p Fx(.)921 12466
y(Im)417 b(nac)-36 b(hstehenden)415 b(K)-36 b(o)36 b(ordinatensystem)
417 b(sind)g(die)f(Graphen)g(der)g(b)36 b(eiden)416 b(F)-108
b(unktionen)921 14458 y Ft(f)597 b Fx(und)454 b Ft(g)503
b Fx(dargestellt.)457 b(Sc)-36 b(hra\036ere)454 b(jene)i(Fl\344c)-36
b(he,)455 b(deren)g(Gr\366\377e)g Ft(A)h Fx(mit)f Ft(A)406
b Fv(=)40312 13511 y Fd(R)41050 13862 y Fq(1)40835 14796
y(0)41797 14458 y Ft(g)48 b Fv(\()p Ft(x)p Fv(\))o Fx(d)p
Ft(x)p Fx(-)921 15503 y Fd(R)1659 15854 y Fq(1)1444 16788
y(0)2406 16450 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Fx(d)p
Ft(x)433 b Fx(b)36 b(erec)-36 b(hnet)432 b(w)-36 b(erden)433
b(kann!)p 0 TeXcolorgray 0 TeXcolorgray 7667 47604 a
 currentpoint currentpoint translate 0.9807 0.9807 scale neg exch neg
exch translate

7667 47604 a 7667 47604 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 290.0021 a add def
/d 0.0 a add neg def /h 264.48497 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 7667 47604 a 22073 33223 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81091 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 159.86389 0.0 -130.13821 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45273 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -113.81097 0.0 T 11
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 134.57628 0.0 -129.90869   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 159.86389  0 -130.13821  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -130.13821
 159.86389  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-129.90869  def /maxTickline 134.57628  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.57628
0.0 -129.90869   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 159.86389
0.0 -130.13821 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 134.57628  0 -129.90869  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -129.90869
 134.57628  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-130.13821  def /maxTickline 159.86389  def /dT 1864678 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 134.57628
0.0 -129.90869   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 159.86389
0.0 -130.13821 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 20828 30359 a Fq(2)20828 27210
y(4)20828 24060 y(6)20828 20910 y(8)20096 36612 y Fp(\000)p
Fq(2)20096 39762 y Fp(\000)p Fq(4)20096 42912 y Fp(\000)p
Fq(6)20096 46061 y Fp(\000)p Fq(8)24988 34569 y(1)2679
b(2)h(3)f(4)h(5)-19734 b Fp(\000)p Fq(1)-4351 b Fp(\000)p
Fq(2)f Fp(\000)p Fq(3)h Fp(\000)p Fq(4)22073 33223 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

22073 33223 a 22073 33223 a
tx@Dict begin  { 159.86389 134.57628 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 22073 33223 a 22073 33223
a
tx@Dict begin  { 5.0 6.67703 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 22073 33223 a 21703 33509 a Ft(x)22073 33223 y
tx@Dict begin  PutEnd  end
 22073
33223 a 22073 33223 a
tx@Dict begin  PutEnd  end
 22073 33223 a 22073 33223 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 22073
33223 a 22073 33223 a
tx@Dict begin  { 0.0 0.0 pop 159.86389 134.57628 exch pop } PutCoor
PutBegin  end
 22073 33223 a 22073 33223 a
tx@Dict begin  { 5.0 50.02498 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 22073
33223 a 19304 33556 a Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(;)221 b(g)48 b Fv(\()p Ft(x)p Fv(\))22073 33223 y
tx@Dict begin  PutEnd  end

22073 33223 a 22073 33223 a
tx@Dict begin  PutEnd  end
 22073 33223 a 1 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0. def /x1 1. def /dx x1 x sub 49 div def
/F@pstplot (x^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy { x
28.45274 mul F@pstplot 14.22636 mul } def  /ps@Exit false def xy /lineto
load stopped { moveto } if  49 1 sub { /x x dx add def xy  dup 1.e30
14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt { moveto }
{ L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x
x1 def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } if  28.45274 99.58455 lineto
 0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto } if }
def /ArrowB { } def /ArrowInside { } def    /x 1. def /x1 0. def /dx
x1 x sub 49 div def /F@pstplot (-x^(2.0)+8.0)  tx@AlgToPs begin AlgToPs
end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul } def  /ps@Exit
false def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx
add def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } {
dup -1.e30 14.22636 mul lt { moveto } { L } ifelse } ifelse  } if 
0.0 0.0 lineto closepath gsave 90 rotate  /clipType { clip } def 45.0
rotate 0.8 SLW 0  setgray 10.53735 0.0 0.0 LineFill  grestore gsave
0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 0 0 0 TeXcolorrgb
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.573832520992393 def /x1 5.618573368066927
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul } def
 /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy  dup
1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636
mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.573832520992393 def /x1 5.618573368066927
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+8.0)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 14.22636 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30 14.22636 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 14.22636 mul gt { moveto } { dup -1.e30
14.22636 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 22073 33223 a
tx@Dict begin  { -79.32347 85.05122 } PutCoor PutBegin  end
 22073 33223 a
-172 x Fl(f)22073 33223 y
tx@Dict begin  PutEnd  end
 22073 33223 a 22073 33223 a
tx@Dict begin  { -102.42093 -86.70601 } PutCoor PutBegin  end

22073 33223 a -172 x Fl(g)22073 33223 y
tx@Dict begin  PutEnd  end
 22073 33223 a
1 0 0 TeXcolorrgb 0 TeXcolorgray 39770 47604 a
currentpoint initclip moveto
 39770
47604 a 7667 47604 a
 currentpoint currentpoint translate 1 0.9807 div 1 0.9807 div scale
neg exch neg exch translate
 7667 47604 a 47992 7929 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369 b(4.2)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 49640
54804 45 v 0 TeXcolorgray 24421 81281 a Fx(86)p 0 TeXcolorgray
eop end
%%Page: 87 87
TeXDict begin 87 86 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.3)f(-)h(1)f(Bestimm)-60
b(te)717 b(In)-60 b(tegrale)717 b(-)g(ZO)h(-)g(BIFIE)p
0 TeXcolorgray -2042 4800 a Fx(110.)p 0 TeXcolorgray
652 w(Gegeb)36 b(en)433 b(ist)h(die)f(F)-108 b(unktion)433
b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))369 b(=)f Fu(\000)p
Ft(x)21751 4318 y Fq(2)22572 4800 y Fv(+)295 b(2)p Ft(x)p
Fx(.)921 7346 y(Die)326 b(nac)-36 b(hstehende)323 b(T)-108
b(ab)36 b(elle)326 b(zeigt)g(Graphen)e(der)h(F)-108 b(unktion)324
b(mit)h(un)-36 b(tersc)g(hiedlic)g(h)324 b(sc)-36 b(hraf-)921
9338 y(\034erten)385 b(Fl\344c)-36 b(henst\374c)g(k)g(en.)385
b(Beurteile,)i(ob)f(die)f(nac)-36 b(hstehend)385 b(angef\374hrten)g(In)
-36 b(tegrale)386 b(den)921 11330 y(Fl\344c)-36 b(heninhalt)372
b(einer)f(der)h(markierten)g(Fl\344c)-36 b(hen)371 b(ergeb)36
b(en)372 b(und)f(ordne)g(en)-36 b(tsprec)g(hend)370 b(zu!)p
0 TeXcolorgray 0 TeXcolorgray 6101 16652 8542 45 v 14642
16652 4523 45 v 6101 25614 45 8962 v 6810 24669 a
 currentpoint currentpoint translate 0.30807 0.30807 scale neg exch
neg exch translate
 6810
24669 a 6810 24669 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.8999 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 24669 a 15441 10955 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.92838 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.92838  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.92838  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.92838  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 8091 a Fq(1)14195 4941 y(2)13464 14344 y Fp(\000)p
Fq(1)13464 17493 y Fp(\000)p Fq(2)13464 20643 y Fp(\000)p
Fq(3)13464 23793 y Fp(\000)p Fq(4)18355 12300 y(1)2680
b(2)f(3)h(4)-16584 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)15441 10955 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 10955 a 15441 10955 a
tx@Dict begin  { 130.92838 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
10955 a 15441 10955 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 10955 a 15098 11241 a Fx(x)15441
10955 y
tx@Dict begin  PutEnd  end
 15441 10955 a 15441 10955 a
tx@Dict begin  PutEnd  end
 15441 10955 a 15441
10955 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 10955 a 15441 10955 a
tx@Dict begin  { 0.0 0.0 pop 130.92838 83.4844 exch pop } PutCoor PutBegin
 end
 15441 10955 a 15441
10955 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 10955 a 15098 11112 a Fx(y)15441 10955
y
tx@Dict begin  PutEnd  end
 15441 10955 a 15441 10955 a
tx@Dict begin  PutEnd  end
 15441 10955 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 28.45274 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.601600654629923
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
29934 24669 a
currentpoint initclip moveto
 29934 24669 a 6810 24669 a
 currentpoint currentpoint translate 1 0.30807 div 1 0.30807 div scale
neg exch neg exch translate
 6810 24669 a
14598 25614 45 8962 v 0.9 TeXcolorgray 14642 25614 4478
8962 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16457 21590 a
Fx(F)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 25614 45 8962 v 6101 25658 8542 45 v 14642 25658
4523 45 v 6101 34619 45 8962 v 6810 33675 a
 currentpoint currentpoint translate 0.30807 0.30807 scale neg exch
neg exch translate
 6810 33675
a 6810 33675 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.8999 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 33675 a 15441 19961 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.92838 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.92838  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.92838  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.92838  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.92838
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 17097 a Fq(1)14195 13947 y(2)13464 23350 y Fp(\000)p
Fq(1)13464 26499 y Fp(\000)p Fq(2)13464 29649 y Fp(\000)p
Fq(3)13464 32798 y Fp(\000)p Fq(4)18355 21306 y(1)2680
b(2)f(3)h(4)-16584 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)15441 19961 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 19961 a 15441 19961 a
tx@Dict begin  { 130.92838 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
19961 a 15441 19961 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 19961 a 15098 20247 a Fx(x)15441
19961 y
tx@Dict begin  PutEnd  end
 15441 19961 a 15441 19961 a
tx@Dict begin  PutEnd  end
 15441 19961 a 15441
19961 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 19961 a 15441 19961 a
tx@Dict begin  { 0.0 0.0 pop 130.92838 83.4844 exch pop } PutCoor PutBegin
 end
 15441 19961 a 15441
19961 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 19961 a 15098 20118 a Fx(y)15441 19961
y
tx@Dict begin  PutEnd  end
 15441 19961 a 15441 19961 a
tx@Dict begin  PutEnd  end
 15441 19961 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 2. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 0.0
lineto 56.90549 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.601600654629923
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial
29934 33675 a
currentpoint initclip moveto
 29934 33675 a 6810 33675 a
 currentpoint currentpoint translate 1 0.30807 div 1 0.30807 div scale
neg exch neg exch translate
 6810 33675 a
14598 34619 45 8962 v 0.9 TeXcolorgray 14642 34619 4478
8962 v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16439 30596 a
Fx(E)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
19120 34619 45 8962 v 6101 34664 8542 45 v 14642 34664
4523 45 v 6101 43643 45 8980 v 6810 42698 a
 currentpoint currentpoint translate 0.30884 0.30884 scale neg exch
neg exch translate
 6810 42698
a 6810 42698 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 208.3902 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810 42698 a 15441 28984 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 130.41867 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 130.41867  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 130.41867  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.41867
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 130.41867  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 130.41867
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
14196 26120 a Fq(1)14195 22970 y(2)13464 32373 y Fp(\000)p
Fq(1)13464 35523 y Fp(\000)p Fq(2)13464 38672 y Fp(\000)p
Fq(3)13464 41822 y Fp(\000)p Fq(4)18355 30330 y(1)2680
b(2)f(3)h(4)-16584 b Fp(\000)p Fq(1)-4352 b Fp(\000)p
Fq(2)15441 28984 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 15441 28984 a 15441 28984 a
tx@Dict begin  { 130.41867 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441
28984 a 15441 28984 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 28984 a 15098 29270 a Fx(x)15441
28984 y
tx@Dict begin  PutEnd  end
 15441 28984 a 15441 28984 a
tx@Dict begin  PutEnd  end
 15441 28984 a 15441
28984 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441 28984 a 15441 28984 a
tx@Dict begin  { 0.0 0.0 pop 130.41867 83.4844 exch pop } PutCoor PutBegin
 end
 15441 28984 a 15441
28984 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441 28984 a 15098 29141 a Fx(y)15441 28984
y
tx@Dict begin  PutEnd  end
 15441 28984 a 15441 28984 a
tx@Dict begin  PutEnd  end
 15441 28984 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 2. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  85.35823 0.0
lineto 56.90549 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 28.45274 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.583693358673846
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 29878 42698 a
currentpoint initclip moveto

29878 42698 a 6810 42698 a
 currentpoint currentpoint translate 1 0.30884 div 1 0.30884 div scale
neg exch neg exch translate
 6810 42698 a 14598 43643 45
8980 v 0.9 TeXcolorgray 14642 43643 4478 8980 v 0 TeXcolorgray
1 0 0 TeXcolorrgb 16412 39611 a Fx(C)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 19120 43643 45 8980
v 6101 43687 8542 45 v 14642 43687 4523 45 v 6101 52701
45 9014 v 6810 51756 a
 currentpoint currentpoint translate 0.31035 0.31035 scale neg exch
neg exch translate
 6810 51756 a 6810 51756 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 207.37125 a add def
/d 0.0 a add neg def /h 207.37123 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 6810
51756 a 15441 38042 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -113.81097 T 8
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 129.39972 0.0 -77.97153 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 83.4844 0.0 -123.88683   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 129.39972  0 -77.97153  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -77.97153
 129.39972  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-123.88683  def /maxTickline 83.4844  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.39972
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 83.4844  0 -123.88683  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -123.88683
 83.4844  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-77.97153  def /maxTickline 129.39972  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 83.4844
0.0 -123.88683   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 129.39972
0.0 -77.97153 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 14196 35178 a
Fq(1)14195 32029 y(2)13464 41431 y Fp(\000)p Fq(1)13464
44581 y Fp(\000)p Fq(2)13464 47730 y Fp(\000)p Fq(3)13464
50880 y Fp(\000)p Fq(4)18355 39388 y(1)2680 b(2)f(3)h(4)-16584
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)15441 38042 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

15441 38042 a 15441 38042 a
tx@Dict begin  { 129.39972 83.4844 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 15441 38042 a 15441 38042
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 15441 38042 a 15098 38328 a Fx(x)15441 38042 y
tx@Dict begin  PutEnd  end
 15441
38042 a 15441 38042 a
tx@Dict begin  PutEnd  end
 15441 38042 a 15441 38042 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 15441
38042 a 15441 38042 a
tx@Dict begin  { 0.0 0.0 pop 129.39972 83.4844 exch pop } PutCoor PutBegin
 end
 15441 38042 a 15441 38042 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 15441
38042 a 15098 38199 a Fx(y)15441 38042 y
tx@Dict begin  PutEnd  end
 15441 38042
a 15441 38042 a
tx@Dict begin  PutEnd  end
 15441 38042 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0. def /x1 2. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  56.90549 0.0
lineto 0.0 0.0 lineto closepath gsave 0  setgray  0.1 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.740390687361422 def /x1 4.547878766761693
def /dx x1 x sub 199 div def /F@pstplot (-x^(2.0)+2.0*x)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial 29765
51756 a
currentpoint initclip moveto
 29765 51756 a 6810 51756 a
 currentpoint currentpoint translate 1 0.31035 div 1 0.31035 div scale
neg exch neg exch translate
 6810 51756 a 14598
52701 45 9014 v 0.9 TeXcolorgray 14642 52701 4478 9014
v 0 TeXcolorgray 1 0 0 TeXcolorrgb 16370 48652 a Fx(A)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 19120
52701 45 9014 v 6101 52745 8542 45 v 14642 52745 4523
45 v 0 TeXcolorgray 0 TeXcolorgray 24451 16763 4567 45
v 29018 16763 12553 45 v 24451 23246 45 6484 v 0.92 TeXcolorgray
24495 23246 4478 6484 v 0 TeXcolorgray 26223 20461 a(A)p
28973 23246 45 6484 v 29682 21348 a Fv(2)295 b Fu(\001)31292
19786 y Fd(Z)32399 20136 y Fq(2)31907 22301 y(1)33146
21348 y Fv(\()p Fu(\000)p Ft(x)35424 20799 y Fq(2)36245
21348 y Fv(+)g(2)p Ft(x)p Fv(\))p Ft(dx)p 41526 23246
V 24451 23290 4567 45 v 29018 23290 12553 45 v 24451
29774 45 6484 v 0.92 TeXcolorgray 24495 29774 4478 6484
v 0 TeXcolorgray 26274 26989 a Fx(B)p 28973 29774 45
6484 v 29682 26313 a Fd(Z)30789 26664 y Fq(3)30297 28829
y(1)31536 27876 y Fv(\()p Fu(\000)p Ft(x)33814 27327
y Fq(2)34635 27876 y Fv(+)g(2)p Ft(x)p Fv(\))p Ft(dx)p
41526 29774 V 24451 29818 4567 45 v 29018 29818 12553
45 v 24451 35531 45 5714 v 0.92 TeXcolorgray 24495 35531
4478 5714 v 0 TeXcolorgray 26265 33132 a Fx(C)p 28973
35531 45 5714 v 29682 30983 a Fd(R)30420 31333 y Fq(2)30205
32268 y(1)31167 31930 y Fv(\()p Fu(\000)p Ft(x)33445
31448 y Fq(2)34266 31930 y Fv(+)g(2)p Ft(x)p Fv(\))p
Ft(dx)g Fv(+)29682 32594 y Fd(\014)29682 33258 y(\014)29682
33922 y(\014)30051 32975 y(R)30789 33325 y Fq(3)30574
34260 y(2)31536 33922 y Fv(\()p Fu(\000)p Ft(x)33814
33440 y Fq(2)34635 33922 y Fv(+)g(2)p Ft(x)p Fv(\))p
Ft(dx)39252 32594 y Fd(\014)39252 33258 y(\014)39252
33922 y(\014)p 41526 35531 V 24451 35575 4567 45 v 29018
35575 12553 45 v 24451 40962 45 5388 v 0.92 TeXcolorgray
24495 40962 4478 5388 v 0 TeXcolorgray 26238 38726 a
Fx(D)p 28973 40962 45 5388 v 29682 36740 a Fd(R)30420
37091 y Fq(1)30205 38026 y(0)31167 37687 y Fv(\()p Fu(\000)p
Ft(x)33445 37205 y Fq(2)34266 37687 y Fv(+)g(2)p Ft(x)p
Fv(\))p Ft(dx)g Fu(\000)29682 38732 y Fd(R)30420 39083
y Fq(2)30205 40018 y(1)31167 39679 y Fv(\()p Fu(\000)p
Ft(x)33445 39197 y Fq(2)34266 39679 y Fv(+)g(2)p Ft(x)p
Fv(\))p Ft(dx)p 41526 40962 V 24451 41007 4567 45 v 29018
41007 12553 45 v 24451 47533 45 6527 v 0.92 TeXcolorgray
24495 47533 4478 6527 v 0 TeXcolorgray 26292 44727 a
Fx(E)p 28973 47533 45 6527 v 29682 43932 a Fd(\014)29682
44596 y(\014)29682 45260 y(\014)29682 45924 y(\014)30051
44030 y(Z)31158 44380 y Fq(3)30666 46545 y(2)31905 45592
y Fv(\()p Fu(\000)p Ft(x)34183 45043 y Fq(2)35004 45592
y Fv(+)g(2)p Ft(x)p Fv(\))p Ft(dx)39621 43932 y Fd(\014)39621
44596 y(\014)39621 45260 y(\014)39621 45924 y(\014)p
41526 47533 V 24451 47577 4567 45 v 29018 47577 12553
45 v 24451 54061 45 6484 v 0.92 TeXcolorgray 24495 54061
4478 6484 v 0 TeXcolorgray 26310 51276 a Fx(F)p 28973
54061 45 6484 v 29682 50601 a Fd(Z)30789 50951 y Fq(2)30297
53116 y(1)31536 52163 y Fv(\()p Fu(\000)p Ft(x)33814
51614 y Fq(2)34635 52163 y Fv(+)g(2)p Ft(x)p Fv(\))p
Ft(dx)p 41526 54061 V 24451 54105 4567 45 v 29018 54105
12553 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 60472 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(87)p 0 TeXcolorgray eop end
%%Page: 88 88
TeXDict begin 88 87 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.3)f(-)h(2)f(Begrenzung)f
(einer)g(Fl\344c)-60 b(he)717 b(-)h(O)-60 b(A)717 b(-)h(BIFIE)p
0 TeXcolorgray -2042 4800 a Fx(111.)p 0 TeXcolorgray
652 w(Der)359 b(Inhalt)h(derjenigen)f(Fl\344c)-36 b(he,)359
b(die)g(v)-36 b(om)360 b(Graphen)e(der)h(F)-108 b(unkiton)358
b Ft(f)511 b Fv(:)369 b Ft(x)g Fu(!)h Ft(x)40859 4318
y Fq(2)41385 4800 y Fx(,)359 b(der)g(p)36 b(o-)921 6792
y(sitiv)-36 b(en)338 b(x-A)-36 b(c)g(hse)337 b(und)f(der)h(Geraden)f
(mit)i(der)f(Gleic)-36 b(h)g(ung)336 b Ft(x)369 b Fv(=)g
Ft(a)221 b Fv(\()p Ft(a)369 b Fu(2)f Fj(R)p Fv(\))338
b Fx(eingesc)-36 b(hlossen)874 8784 y(wird,)434 b(b)36
b(etr\344gt)434 b(72)g(Fl\344c)-36 b(heneinheiten.)921
11330 y(Berec)g(hne)433 b(den)g(W)-108 b(ert)433 b(a!)p
1 0 0 TeXcolorrgb 9927 18019 a Fv(72)370 b(=)12977 16457
y Fd(Z)14084 16808 y Fl(a)13592 18973 y Fq(0)14861 18019
y Ft(x)15600 17471 y Fq(2)16126 18019 y Ft(dx)f Fv(=)19423
17121 y Ft(x)20162 16639 y Fq(3)p 19423 17709 1265 45
v 19714 18931 a Ft(a)21042 16470 y Fl(a)21108 16691 y
Fd(\014)21108 17355 y(\014)21108 18019 y(\014)21057 19439
y Fq(0)21911 18019 y Fv(=)23424 17121 y Ft(a)24107 16639
y Fq(3)p 23424 17709 1209 45 v 23704 18931 a Fv(3)25135
18019 y Fu(!)g Ft(a)27515 17471 y Fq(3)28410 18019 y
Fv(=)f(216)i Fu(!)g Ft(a)e Fv(=)h(6)921 22022 y Fx(Ein)362
b(Rec)-36 b(hen)g(w)g(eg)362 b(m)-36 b(uss)362 b(erk)-36
b(enn)g(bar)362 b(sein.)h(Die)g(A)-36 b(ufgab)36 b(e)363
b(ist)f(als)h(ric)-36 b(h)g(tig)363 b(zu)f(w)-36 b(erten,)362
b(w)-36 b(enn)921 24014 y(der)433 b(Ansatz)19602 26005
y Fv(72)369 b(=)22652 24443 y Fd(Z)23759 24794 y Fl(a)23267
26959 y Fq(0)24536 26005 y Ft(x)25275 25457 y Fq(2)25801
26005 y Ft(dx)921 28890 y Fx(k)-36 b(orrekt)434 b(ist)g(und)e(ric)-36
b(h)g(tig)434 b(in)-36 b(tegriert)433 b(wurde.)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 4800
a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 6792 a Fr(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 32624 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(88)p
0 TeXcolorgray eop end
%%Page: 89 89
TeXDict begin 89 88 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)724 b(4.3)g(-)g(3)g(A)-60
b(ussagen)722 b(\374b)60 b(er)723 b(b)60 b(estimm)-60
b(te)723 b(In)-60 b(tegrale)723 b(-)h(MC)g(-)g(BI-)-2331
4515 y(FIE)p 0 TeXcolorgray -2042 7823 a Fx(112.)p 0
TeXcolorgray 652 w(Die)406 b(stetige)h(reelle)f(F)-108
b(unktion)405 b Ft(f)548 b Fx(mit)405 b(dem)h(abgebildeten)f(Graphen)g
(hat)g(Nullstellen)h(b)36 b(ei)921 9815 y Ft(x)1660 10014
y Fq(1)2555 9815 y Fv(=)368 b(1)p Ft(;)221 b(x)5906 10014
y Fq(2)6802 9815 y Fv(=)369 b(3)434 b Fx(und)e Ft(x)12607
10014 y Fq(3)13502 9815 y Fv(=)369 b(6)p Fx(.)p 0 TeXcolorgray
0 TeXcolorgray 5417 38959 a
 currentpoint currentpoint translate 1.5118 1.5118 scale neg exch neg
exch translate
 5417 38959 a 5417 38959 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 215.01366 a add def
/d 0.0 a add neg def /h 162.02467 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

5417 38959 a 7957 30039 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 192.06947 0.0 -22.94418 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 81.44649 0.0 -80.57819   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 192.06947  0 -22.94418  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -22.94418
 192.06947  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-80.57819  def /maxTickline 81.44649  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.44649
0.0 -80.57819   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.06947
0.0 -22.94418 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 81.44649  0 -80.57819  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -80.57819
 81.44649  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-22.94418  def /maxTickline 192.06947  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 81.44649
0.0 -80.57819   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 192.06947
0.0 -22.94418 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 6712 27175 a Fq(1)6712
24025 y(2)5980 33428 y Fp(\000)p Fq(1)5980 36578 y Fp(\000)p
Fq(2)10872 31385 y(1)2679 b(2)h(3)f(4)h(5)g(6)7957 30039
y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 192.06947 81.44649 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end

7957 30039 a 7614 30325 a Fx(x)7957 30039 y
tx@Dict begin  PutEnd  end
 7957 30039
a 7957 30039 a
tx@Dict begin  PutEnd  end
 7957 30039 a 7957 30039 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 7957 30039 a
7957 30039 a
tx@Dict begin  { 0.0 0.0 pop 192.06947 81.44649 exch pop } PutCoor
PutBegin  end
 7957 30039 a 7957 30039 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 7957 30039 a 6909
30371 a Fx(f\(x\))7957 30039 y
tx@Dict begin  PutEnd  end
 7957 30039 a 7957 30039
a
tx@Dict begin  PutEnd  end
 7957 30039 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.8064027241051648 def /x1 6.750476169359091
def /dx x1 x sub 199 div def /F@pstplot (0.2992347613554581*x^(3.0)-2.992347613554581*x^(2.0)+8.079338556597369*x-5.386225704398246)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
29219 38959 a
currentpoint initclip moveto
 29219 38959 a 5417 38959 a
 currentpoint currentpoint translate 1 1.5118 div 1 1.5118 div scale
neg exch neg exch translate
 5417 38959 a
855 42611 a Fx(W)-108 b(elc)-36 b(he)555 b(der)h(folgenden)g(A)-36
b(ussagen)556 b(ist/sind)g(zutre\033end?)f(Kreuze)h(die)g
(zutre\033ende\(n\))873 44603 y(A)-36 b(ussage\(n\))433
b(an!)p 13497 45644 19390 45 v 13497 50478 45 4835 v
14205 47018 a Fd(Z)15312 47369 y Fq(3)14820 49534 y(1)16060
48580 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))o Ft(dx)369 b(<)g
Fv(2)p 30477 50478 V 1 0 0 TeXcolorrgb 31186 48393 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32842 50478 V 13497 50523 19390 45 v 13497 55358 45 4835
v 14205 51898 a Fd(Z)15312 52248 y Fq(6)14820 54413 y(1)16060
53460 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))o Ft(dx)369 b(<)g
Fv(0)p 30477 55358 V 1 0 0 TeXcolorrgb 31186 53272 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
32842 55358 V 13497 55402 19390 45 v 13497 60280 45 4878
v 14205 56678 a Fd(\014)14205 57342 y(\014)14205 58007
y(\014)14205 58671 y(\014)14574 56777 y(Z)15681 57127
y Fq(6)15189 59292 y(3)16429 58339 y Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))o Ft(dx)20377 56678 y Fd(\014)20377 57342
y(\014)20377 58007 y(\014)20377 58671 y(\014)21115 58339
y Ft(<)369 b Fv(6)p 30477 60280 V 1 0 0 TeXcolorrgb 31186
58173 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0
TeXcolorgray 32842 60280 V 13497 60324 19390 45 v 13497
65159 45 4835 v 14205 61699 a Fd(Z)15312 62049 y Fq(3)14820
64214 y(1)16060 63261 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))o
Ft(dx)295 b Fv(+)21610 61699 y Fd(Z)22717 62049 y Fq(6)22225
64214 y(3)23464 63261 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p
Ft(dx)369 b(>)g Fv(0)p 30477 65159 V 32842 65159 V 13497
65203 19390 45 v 13497 74915 45 9712 v 14205 66578 a
Fd(Z)15312 66929 y Fq(3)14820 69093 y(1)16060 68140 y
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))o Ft(dx)369 b(>)g Fv(0)14205
71025 y Fx(und)14205 71455 y Fd(Z)15312 71805 y Fq(6)14820
73970 y(3)16060 73017 y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))o
Ft(dx)369 b(<)g Fv(0)p 30477 74915 V 1 0 0 TeXcolorrgb
31186 70391 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 32842 74915 V 13497 74959 19390 45 v 47992
7823 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)g(4.3)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0
TeXcolorgray 24421 81281 a Fx(89)p 0 TeXcolorgray eop
end
%%Page: 90 90
TeXDict begin 90 89 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6795 a Fy(AN)718
b(4.3)f(-)h(4)f(Stahlfeder)e(-)i(O)-60 b(A)718 b(-)g(BIFIE)p
0 TeXcolorgray -2042 10102 a Fx(113.)p 0 TeXcolorgray
652 w(Um)421 b(eine)f(Stahlfeder)h(aus)g(der)f(R)-36
b(uhelage)421 b Ft(x)23105 10301 y Fq(0)24000 10102 y
Fv(=)368 b(0)422 b Fx(um)e Ft(x)h Fx(cm)f(zu)h(drehnen,)e(ist)i(die)g
(Kraft)921 12094 y Ft(F)181 b Fv(\()p Ft(x)p Fv(\))433
b Fx(erforderlic)-36 b(h.)921 14639 y(Gib)433 b(an,)h(w)-36
b(as)434 b(in)f(diesem)h(K)-36 b(on)g(text)434 b(mit)f(dem)g(A)-36
b(usdruc)g(k)20387 16877 y Fd(Z)21494 17227 y Fq(8)21002
19392 y(0)22242 18439 y Ft(F)181 b Fv(\()p Ft(x)p Fv(\))o
Ft(dx)921 22079 y Fx(b)36 b(erec)-36 b(hnet)432 b(wird.)p
1 0 0 TeXcolorrgb 921 26617 a(die)298 b(Arb)36 b(eit,)299
b(die)f(v)-36 b(erric)g(h)g(tet)298 b(wird,)h(w)-36 b(enn)298
b(die)g(F)-108 b(eder)297 b(aus)i(der)f(R)-36 b(uhelage)298
b(um)g(8)h(cm)f(gedehn)-36 b(t)874 28609 y(wird)921 31154
y(Ein)452 b(Punkt)g(f\374r)g(eine)g(sinngem\344\377e)h(ric)-36
b(h)g(tige)452 b(Deutung,)g(w)-36 b(ob)36 b(ei)453 b(der)e(Begri\033)i
(Arb)36 b(eit)451 b(und)921 33146 y(die)433 b(A)-36 b(usdehn)g(ung)432
b(um)h(8)h(cm)f(angef\374hrt)h(sein)f(m)-36 b(\374ssen.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
10102 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 12094 a Fr(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 36879 V 0 TeXcolorgray 24421 81281 a Fx(90)p 0
TeXcolorgray eop end
%%Page: 91 91
TeXDict begin 91 90 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.3)f(-)h(5)f(Fl\344c)-60
b(he)717 b(zwisc)-60 b(hen)717 b(zw)-60 b(ei)718 b(Kurv)-60
b(en)716 b(-)h(MC)h(-)g(BIFIE)p 0 TeXcolorgray -2042
4800 a Fx(114.)p 0 TeXcolorgray 652 w(Die)406 b(F)-108
b(unktionsgraphen)403 b(v)-36 b(on)406 b Ft(f)547 b Fx(und)403
b Ft(g)453 b Fx(sc)-36 b(hlie\377en)405 b(ein)g(gemeinsames)h(Fl\344c)
-36 b(henst\374c)g(k)404 b(ein.)p 0 TeXcolorgray 0 TeXcolorgray
9018 26057 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 259.99509 a add def
/d 0.0 a add neg def /h 170.69257 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9018 26057 a 16817 15398 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -85.35823 T 6 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 189.54703 0.0 -70.44806 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -56.90549 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 74.40494 0.0 -96.28763   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 189.54703  0 -70.44806  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -70.44806
 189.54703  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-96.28763  def /maxTickline 74.40494  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.40494
0.0 -96.28763   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.54703
0.0 -70.44806 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 74.40494  0 -96.28763  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -96.28763
 74.40494  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-70.44806  def /maxTickline 189.54703  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 74.40494
0.0 -96.28763   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 189.54703
0.0 -70.44806 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
15572 12534 a Fq(1)15571 9384 y(2)14840 18787 y Fp(\000)p
Fq(1)14840 21937 y Fp(\000)p Fq(2)14840 25086 y Fp(\000)p
Fq(3)19731 16744 y(1)2680 b(2)f(3)h(4)g(5)f(6)-22883
b Fp(\000)p Fq(1)-4352 b Fp(\000)p Fq(2)16817 15398 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

16817 15398 a 16817 15398 a
tx@Dict begin  { 189.54703 74.40494 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 16817 15398 a 16817 15398
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 16817 15398 a 16474 15684 a Fx(x)16817 15398 y
tx@Dict begin  PutEnd  end
 16817
15398 a 16817 15398 a
tx@Dict begin  PutEnd  end
 16817 15398 a 16817 15398 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 16817
15398 a 16817 15398 a
tx@Dict begin  { 0.0 0.0 pop 189.54703 74.40494 exch pop } PutCoor
PutBegin  end
 16817 15398 a 16817 15398 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 16817
15398 a 16474 15555 a Fx(y)16817 15398 y
tx@Dict begin  PutEnd  end
 16817 15398
a 16817 15398 a
tx@Dict begin  PutEnd  end
 16817 15398 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25098 0.25098 0.25098  setrgbcolor
  0.8 SLW 0.25098 0.25098 0.25098  setrgbcolor  /ArrowA { /lineto load
stopped { moveto } if } def /ArrowB { } def /ArrowInside { } def  
 /x -1. def /x1 6. def /dx x1 x sub 49 div def /F@pstplot (0.25*x^(2.0)-x-1.25)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  170.71646 50.08534 lineto  0.8 SLW 0.25098 0.25098
0.25098  setrgbcolor  /ArrowA { /lineto load stopped { moveto } if
} def /ArrowB { } def /ArrowInside { } def    /x 6. def /x1 -1. def
/dx x1 x sub 49 div def /F@pstplot (0.015721239059366534*x^(3.0)-0.1853729697133834*x^(2.0)+0.6909772660112011*x+0.892071474783951)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  -28.45274 0.0 lineto closepath gsave 0.25098 0.25098
0.25098  setrgbcolor  0.25 .setopacityalpha  fill  grestore gsave 0.8
SLW 0.25098 0.25098 0.25098  setrgbcolor  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4759718077494743 def /x1 6.6618232318926704
def /dx x1 x sub 199 div def /F@pstplot (0.25*x^(2.0)-x-1.25)  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -2.4759718077494743 def /x1 6.6618232318926704
def /dx x1 x sub 199 div def /F@pstplot (0.015721239059366534*x^(3.0)-0.1853729697133834*x^(2.0)+0.6909772660112011*x+0.892071474783951)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ -28.45274 0.0   false
NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
16817 15398 a
tx@Dict begin  { -67.05688 42.67911 } PutCoor PutBegin  end
 16817 15398 a -172 x Fl(g)16817 15398 y
tx@Dict begin  PutEnd  end

16817 15398 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 170.8758 50.1114
  false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
16817 15398 a
tx@Dict begin  { -65.36151 -39.83366 } PutCoor PutBegin  end
 16817 15398 a -172 x Fl(f)16817 15398 y
tx@Dict begin  PutEnd  end

16817 15398 a 37799 26057 a
currentpoint initclip moveto
 37799 26057 a 921 30041 a
Fx(Mit)340 b(w)-36 b(elc)g(hen)340 b(der)f(nac)-36 b(hstehenden)338
b(Berec)-36 b(hn)g(ungsv)g(orsc)g(hriften)338 b(kann)i(man)g(den)f
(Fl\344c)-36 b(hen-)921 32033 y(inhalt)434 b(des)f(gek)-36
b(ennzeic)g(hneten)432 b(Fl\344c)-36 b(henst\374c)g(ks)434
b(ermitteln?)921 36571 y(Kreuze)f(die)h(b)36 b(eiden)433
b(zutre\033enden)e(Berec)-36 b(hn)g(ungsv)g(orsc)g(hriften)433
b(an.)p 10487 37537 25409 45 v 10487 42465 45 4928 v
11196 38912 a Fd(Z)12303 39263 y Fq(6)11811 41427 y Fp(\000)p
Fq(1)13290 40474 y Fv([)8 b Ft(g)48 b Fv(\()p Ft(x)p
Fv(\))294 b Fu(\000)i Ft(f)142 b Fv(\()p Ft(x)p Fv(\)])p
Ft(dx)p 33487 42465 V 35852 42465 V 10487 42509 25409
45 v 10487 47436 45 4928 v 11196 43884 a Fd(Z)12303 44234
y Fq(6)11811 46399 y Fp(\000)p Fq(1)13290 45446 y Fv([)8
b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)g Ft(g)48
b Fv(\()p Ft(x)p Fv(\)])p Ft(dx)p 33487 47436 V 1 0 0
TeXcolorrgb 34195 45304 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35852 47436 V 10487 47480
25409 45 v 10487 52407 45 4928 v 11196 48855 a Fd(Z)12303
49206 y Fq(6)11811 51370 y Fp(\000)p Fq(1)13290 50417
y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)295 b Fv(+)18841
48855 y Fd(Z)19948 49206 y Fq(6)19456 51370 y(5)20695
50417 y Ft(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)294 b
Fu(\000)26154 48855 y Fd(Z)27261 49206 y Fq(5)26769 51370
y Fp(\000)p Fq(1)28248 50417 y Ft(g)48 b Fv(\()p Ft(x)p
Fv(\))p Ft(dx)p 33487 52407 V 35852 52407 V 10487 52452
25409 45 v 10487 57379 45 4928 v 11196 53826 a Fd(Z)12303
54177 y Fq(6)11811 56342 y Fp(\000)p Fq(1)13290 55388
y Ft(f)142 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)295 b Fv(+)18841
53826 y Fd(Z)19948 54177 y Fq(6)19456 56342 y Fp(\000)p
Fq(1)20935 55388 y Ft(g)48 b Fv(\()p Ft(x)p Fv(\))p Ft(dx)p
33487 57379 V 35852 57379 V 10487 57423 25409 45 v 10487
62350 45 4928 v 11196 58798 a Fd(Z)12303 59148 y Fq(6)11811
61313 y Fp(\000)p Fq(1)13290 60360 y Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))p Ft(dx)295 b Fu(\000)18862 58798 y Fd(Z)19969
59148 y Fq(6)19477 61313 y(5)20716 60360 y Ft(g)48 b
Fv(\()p Ft(x)p Fv(\))p Ft(dx)295 b Fv(+)26154 58699 y
Fd(\014)26154 59364 y(\014)26154 60028 y(\014)26154 60692
y(\014)26523 58798 y(Z)27630 59148 y Fq(5)27138 61313
y Fp(\000)p Fq(1)28617 60360 y Ft(g)48 b Fv(\()p Ft(x)p
Fv(\))p Ft(dx)32454 58699 y Fd(\014)32454 59364 y(\014)32454
60028 y(\014)32454 60692 y(\014)p 33487 62350 V 1 0 0
TeXcolorrgb 34195 60219 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 35852 62350 V 10487 62395
25409 45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6792 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 66423 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(91)p 0 TeXcolorgray eop end
%%Page: 92 92
TeXDict begin 92 91 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)718 b(4.3)f(-)h(6)f(Fl\344c)-60
b(hen)g(b)60 b(erec)-60 b(hn)g(ung)715 b(-)i(MC)h(-)g(BIFIE)p
0 TeXcolorgray -2042 4800 a Fx(115.)p 0 TeXcolorgray
652 w(Die)409 b(Summe)f(A)h(der)f(Inhalte)h(der)f(b)36
b(eiden)408 b(v)-36 b(on)409 b(den)f(Graphen)g(der)g(F)-108
b(unktionen)408 b Ft(f)550 b Fx(und)408 b Ft(g)921 6792
y Fx(eingesc)-36 b(hlossenen)434 b(Fl\344c)-36 b(hen)433
b(soll)h(b)36 b(erec)-36 b(hnet)433 b(w)-36 b(erden.)p
0 TeXcolorgray 0 TeXcolorgray 5417 40250 a
 currentpoint currentpoint translate 0.84097 0.84097 scale neg exch
neg exch translate
 5417 40250
a 5417 40250 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 386.52376 a add def
/d 0.0 a add neg def /h 337.60454 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 5417 40250 a 11012 30996 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -56.90549 T 12
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 335.98732 0.0 -50.53644 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45274 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.45274 0.0 T 14
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 254.00073 0.0 -83.6038   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.45274 0.0 T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 335.98732  0 -50.53644  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -50.53644
 335.98732  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-83.6038  def /maxTickline 254.00073  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 254.00073
0.0 -83.6038   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 335.98732
0.0 -50.53644 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 254.00073  0 -83.6038  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -83.6038
 254.00073  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-50.53644  def /maxTickline 335.98732  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 254.00073
0.0 -83.6038   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 335.98732
0.0 -50.53644 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
9767 28131 a Fq(1)9766 24982 y(2)9766 21832 y(3)9766
18683 y(4)9766 15533 y(5)9766 12383 y(6)9766 9234 y(7)9766
6084 y(8)9034 34384 y Fp(\000)p Fq(1)9034 37534 y Fp(\000)p
Fq(2)13926 32341 y(1)2680 b(2)f(3)h(4)f(5)h(6)g(7)f(8)h(9)2444
b(10)2210 b(11)-38866 b Fp(\000)p Fq(1)11012 30996 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end

11012 30996 a 11012 30996 a
tx@Dict begin  { 335.98732 254.00073 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11012 30996 a 11012 30996
a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11012 30996 a 10669 31282 a Fx(x)11012 30996 y
tx@Dict begin  PutEnd  end
 11012
30996 a 11012 30996 a
tx@Dict begin  PutEnd  end
 11012 30996 a 11012 30996 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11012
30996 a 11012 30996 a
tx@Dict begin  { 0.0 0.0 pop 335.98732 254.00073 exch pop } PutCoor
PutBegin  end
 11012 30996 a 11012 30996 a
tx@Dict begin  { 5.0 6.2015 5.16667 2.33331 -40.  Uput UUput } PutCoor
PutBegin  end
 11012
30996 a 10669 31153 a Fx(y)11012 30996 y
tx@Dict begin  PutEnd  end
 11012 30996
a 11012 30996 a
tx@Dict begin  PutEnd  end
 11012 30996 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 1. def /x1 8. def /dx x1 x sub 49 div def
/F@pstplot (-0.09690716815660791*x^(3.0)+0.9628860178792948*x^(2.0)-0.5917508854812766*x-2.2742279642414105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274 mul gt { moveto
} { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } if  227.62195 142.26372 lineto  0.8 SLW 0  setgray  /ArrowA
{ /lineto load stopped { moveto } if } def /ArrowB { } def /ArrowInside
{ } def    /x 8. def /x1 1. def /dx x1 x sub 49 div def /F@pstplot
(0.2*x^(3.0)-2.6*x^(2.0)+9.8*x-9.4)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30
28.45274 mul lt { moveto } { L } ifelse } ifelse  } if  28.45274 -56.90549
lineto closepath gsave 0  setgray  0.1 .setopacityalpha  fill  grestore
gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.7761488644641417 def /x1 11.80860741102746
def /dx x1 x sub 199 div def /F@pstplot (-0.09690716815660791*x^(3.0)+0.9628860178792948*x^(2.0)-0.5917508854812766*x-2.2742279642414105)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -1.7761488644641417 def /x1 11.80860741102746
def /dx x1 x sub 199 div def /F@pstplot (0.2*x^(3.0)-2.6*x^(2.0)+9.8*x-9.4)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 28.45274 mul F@pstplot
28.45274 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 28.45274 mul gt { moveto } {
dup -1.e30 28.45274 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 1.2 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 11012 30996 a
tx@Dict begin  { 127.02315 188.17076 } PutCoor PutBegin  end
 11012 30996 a
572 x Fx(g)11012 30996 y
tx@Dict begin  PutEnd  end
 11012 30996 a 11012 30996 a
tx@Dict begin  { 123.39926 35.97707 } PutCoor PutBegin  end

11012 30996 a 915 x Fx(f)11012 30996 y
tx@Dict begin  PutEnd  end
 11012 30996 a
48204 40250 a
currentpoint initclip moveto
 48204 40250 a 5417 40250 a
 currentpoint currentpoint translate 1 0.84097 div 1 0.84097 div scale
neg exch neg exch translate
 5417 40250 a
921 45894 a Fx(Kreuze)433 b(die)h(zutre\033ende\(n\))d(F)-108
b(ormel\(n\))433 b(an!)p 7540 46935 31304 45 v 7540 51770
45 4835 v 8249 49872 a Ft(A)369 b Fv(=)10973 48310 y
Fd(Z)12080 48660 y Fq(8)11588 50825 y(1)12828 49872 y
Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p Fv(\))294 b Fu(\000)i
Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))o Ft(dx)p 36434 51770
V 38799 51770 V 7540 51814 31304 45 v 7540 56649 45 4835
v 8249 54751 a(A)369 b Fv(=)10973 53189 y Fd(Z)12080
53539 y Fq(3)11588 55704 y(1)12828 54751 y Fv(\()p Ft(f)142
b Fv(\()p Ft(x)p Fv(\))294 b Fu(\000)i Ft(g)48 b Fv(\()p
Ft(x)p Fv(\)\))o Ft(dx)295 b Fv(+)23435 53189 y Fd(Z)24542
53539 y Fq(8)24050 55704 y(3)25289 54751 y Fv(\()p Ft(g)48
b Fv(\()p Ft(x)p Fv(\))294 b Fu(\000)h Ft(f)142 b Fv(\()p
Ft(x)p Fv(\)\))p Ft(dx)p 36434 56649 V 1 0 0 TeXcolorrgb
37142 54564 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 38799 56649 V 7540 56693 31304 45 v 7540
61571 45 4878 v 8249 59630 a Ft(A)369 b Fv(=)10973 57970
y Fd(\014)10973 58634 y(\014)10973 59298 y(\014)10973
59962 y(\014)11342 58068 y(Z)12449 58419 y Fq(8)11957
60583 y(1)13197 59630 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))294 b Fu(\000)i Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))o
Ft(dx)22202 57970 y Fd(\014)22202 58634 y(\014)22202
59298 y(\014)22202 59962 y(\014)p 36434 61571 V 38799
61571 V 7540 61616 31304 45 v 7540 66450 45 4835 v 8249
64552 a Ft(A)369 b Fv(=)10973 62990 y Fd(Z)12080 63341
y Fq(3)11588 65506 y(1)12828 64552 y Fv(\()p Ft(f)142
b Fv(\()p Ft(x)p Fv(\))294 b Fu(\000)i Ft(g)48 b Fv(\()p
Ft(x)p Fv(\)\))o Ft(dx)295 b Fu(\000)23456 62990 y Fd(Z)24563
63341 y Fq(8)24071 65506 y(3)25310 64552 y Fv(\()p Ft(f)142
b Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)g Ft(g)48 b Fv(\()p
Ft(x)p Fv(\)\))o Ft(dx)p 36434 66450 V 1 0 0 TeXcolorrgb
37142 64365 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 38799 66450 V 7540 66495 31304 45 v 7540
71373 45 4878 v 8249 69432 a Ft(A)369 b Fv(=)10973 67771
y Fd(\014)10973 68435 y(\014)10973 69099 y(\014)10973
69764 y(\014)11342 67870 y(Z)12449 68220 y Fq(3)11957
70385 y(1)13197 69432 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))294 b Fu(\000)i Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))o
Ft(dx)22202 67771 y Fd(\014)22202 68435 y(\014)22202
69099 y(\014)22202 69764 y(\014)22866 69432 y Fv(+)24173
67771 y Fd(\014)24173 68435 y(\014)24173 69099 y(\014)24173
69764 y(\014)24542 67870 y(Z)25649 68220 y Fq(8)25157
70385 y(3)26396 69432 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))294 b Fu(\000)i Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))o
Ft(dx)35401 67771 y Fd(\014)35401 68435 y(\014)35401
69099 y(\014)35401 69764 y(\014)p 36434 71373 V 1 0 0
TeXcolorrgb 37142 69266 a Fn(4)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 38799 71373 V 7540 71417 31304
45 v 47992 4800 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998
6792 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 75445 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(92)p 0 TeXcolorgray eop end
%%Page: 93 93
TeXDict begin 93 92 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)933 b(4.3)g(-)g(7)g(Arb)60
b(eit)932 b(b)60 b(eim)932 b(V)-179 b(ersc)-60 b(hieb)60
b(en)930 b(eines)i(Massest\374c)-60 b(ks)933 b(-)-2331
4515 y(O)-60 b(A)718 b(-)g(Matura)f(2015/16)g(-)g(Haupttermin)p
0 TeXcolorgray -2042 7823 a Fx(116.)p 0 TeXcolorgray
652 w(Ein)501 b(Massest\374c)-36 b(k)502 b(wird)f(durc)-36
b(h)500 b(die)h(Ein)-36 b(wirkung)502 b(einer)f(Kraft)h(geradlinig)g(b)
36 b(ew)-36 b(egt.)503 b(Die)921 9815 y(dazu)368 b(erforderlic)-36
b(he)368 b(Kraftk)-36 b(omp)36 b(onen)-36 b(te)369 b(in)g(W)-108
b(egric)-36 b(h)g(tung)367 b(ist)i(als)g(F)-108 b(unktion)367
b(des)h(zur\374c)-36 b(k-)921 11806 y(gelegten)420 b(W)-108
b(eges)421 b(in)e(der)h(nac)-36 b(hstehenden)417 b(Abbildung)i
(dargestellt.)i(Der)f(W)-108 b(eg)420 b Ft(s)f Fx(wird)h(in)921
13798 y(Metern)433 b(\(m\),)g(die)h(Kraft)g Ft(F)181
b Fv(\()p Ft(s)p Fv(\))432 b Fx(in)i(Newton)f(\(N\))h(gemessen.)921
18336 y(Im)440 b(ersten)f(W)-108 b(egabsc)-36 b(hnitt)439
b(wird)h Ft(F)181 b Fv(\()p Ft(s)p Fv(\))439 b Fx(durc)-36
b(h)438 b Ft(f)25251 18535 y Fq(1)26217 18336 y Fx(mit)i
Ft(f)29249 18535 y Fq(1)29775 18336 y Fv(\()p Ft(s)p
Fv(\))379 b(=)33538 17813 y Fq(5)p 33303 18026 941 45
v 33303 18794 a(16)34676 18336 y Fu(\001)300 b Ft(s)35958
17854 y Fq(2)36923 18336 y Fx(b)36 b(esc)-36 b(hrieb)36
b(en.)439 b(Im)921 20328 y(zw)-36 b(eiten)434 b(Absc)-36
b(hnitt)432 b(\()p Ft(f)12733 20527 y Fq(2)13259 20328
y Fx(\))h(nimm)-36 b(t)433 b(sie)h(linear)g(auf)g(den)f(W)-108
b(ert)433 b(n)-36 b(ull)433 b(ab.)921 24865 y(K)-36 b(o)36
b(ordinaten)402 b(der)g(herv)-36 b(orgehob)36 b(enen)402
b(Punkte)g(des)g(Graphen)e(der)i(F)-108 b(unktion)402
b(sind)g(ganz-)921 26857 y(zahlig.)p 0 TeXcolorgray 0
TeXcolorgray 921 48656 a
 currentpoint currentpoint translate 0.78653 0.78653 scale neg exch
neg exch translate
 921 48656 a 1355 48656 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 512.65994 a add def
/d 0.0 a add neg def /h 203.34271 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 1355
48656 a 3198 46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 8 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 496.00882 0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 0.0 28.45274
T } repeat end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 0.0 T 19 { gsave
 /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L
stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1. 
1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.5  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 185.7065 0.0 0.0   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.4 SLW 0.5  setgray  1. .setopacityalpha   1  setlinecap
[  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore grestore 28.45274
0.0 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 496.00882  0 0.0  0 ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa 0.0
 496.00882  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 185.7065  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { xStart } def /MaxValue { xEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline  moveto x maxTickline
 lineto } { x tickstart STsize mul  moveto x tickend STsize mul  lineto
} ifelse } if } for } for subTwidth SLW subTColor subLSstroke grestore
stroke /dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick
dsubT add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false
{ cntsubTick minTickline STsize mul  moveto cntsubTick maxTickline
STsize mul  lineto } { cntsubTick tickstart STsize mul  moveto cntsubTick
tickend STsize mul  lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline  moveto cntTick
maxTickline  lineto } { cntTick tickstart  moveto cntTick tickend 
lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 28.45274  mul cntTick add def x abs MinValue
abs le { false { x minTickline  moveto x maxTickline  lineto } { x
tickstart STsize mul  moveto x tickend STsize mul  lineto } ifelse
} if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore
} dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1
sub { cntsubTick abs MinValue abs le { cntsubTick tickstart STsize
mul  moveto cntsubTick tickend STsize mul  lineto }{ exit } ifelse
/cntsubTick cntsubTick dsubT add def } repeat subTwidth SLW subTColor
subLSstroke grestore } if showOrigin { gsave cntTick tickstart  moveto
cntTick tickend  lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.7065
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 496.00882
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 185.7065  0 0.0  ArrowA CP 4 2 roll
ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa 0.0
 185.7065  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
0.0  def /maxTickline 496.00882  def /dT 1864679 abs 65536 div viceversa
{ neg } if def /DT 1. abs viceversa { neg } if def /subTNo 2 def subTNo
0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse -2.0 0.0 /tickend
exch def /tickstart exch def /Twidth 0.4  def /subTwidth 0.2  def /STsize
0.75 def /TColor { 0  setgray  } def /subTColor { 0.5  setgray  } def
/MinValue { yStart } def /MaxValue { yEnd 3.0 2.  CLW mul add 1.4 
mul viceversa { add epsilon sub }{ sub epsilon add } ifelse } def /logLines
{ false } def /LSstroke {  0  setlinejoin 0  setlinecap stroke  stroke}
def /subLSstroke {  0  setlinejoin 0  setlinecap stroke  stroke} def
0 dT MaxValue 1 add { /cntTick exch def logLines { gsave 1 1 DT { 1
sub /OffSet exch def -10 subTNo 1 add div dup 10 add exch dup -0.1
mul 1 add { /dx exch def /x dx log OffSet add 28.45274  mul cntTick
add def x abs MaxValue abs le { false { x minTickline exch moveto x
maxTickline exch lineto } { x tickstart STsize mul exch moveto x tickend
STsize mul exch lineto } ifelse } if } for } for subTwidth SLW subTColor
subLSstroke grestore stroke /dsubT 0 def } if dsubT abs 0 gt { gsave
/cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick abs MaxValue
abs le { false { cntsubTick minTickline STsize mul exch moveto cntsubTick
maxTickline STsize mul exch lineto } { cntsubTick tickstart STsize
mul exch moveto cntsubTick tickend STsize mul exch lineto } ifelse
}{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline exch moveto cntTick maxTickline exch lineto } {
cntTick tickstart exch moveto cntTick tickend exch lineto } ifelse
Twidth SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse
} for /showOrigin true def /dT dT neg def /dsubT dsubT neg def 0 dT
MinValue epsilon viceversa { add }{ sub } ifelse { /cntTick exch def
logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MinValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for /dsubT 0 def subTwidth SLW subTColor subLSstroke grestore } dsubT
abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MinValue abs le { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave cntTick tickstart exch moveto cntTick tickend
exch lineto Twidth SLW TColor LSstroke grestore }{ /showOrigin true
def } ifelse } for } if  end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 185.7065
0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul
add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 496.00882
0.0 0.0 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1953 46989 a Fq(0)1952
43840 y(1)1952 40690 y(2)1952 37540 y(3)1952 34391 y(4)1952
31241 y(5)1952 28092 y(6)2963 48049 y(0)2679 b(1)h(2)f(3)h(4)g(5)f(6)h
(7)f(8)h(9)2444 b(10)2210 b(11)g(12)f(13)h(14)f(15)h(16)g(17)3198
46704 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 496.00882 185.7065 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 3198 46704 a 3198 46704
a
tx@Dict begin  { 5.0 32.95189 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 3198 46704 a 1374 47122 a Ft(s)433 b Fx(in)h(m)3198
46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704 a
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 0.0 0.0 pop 496.00882 185.7065 exch pop } PutCoor
PutBegin  end
 3198 46704 a 3198 46704 a
tx@Dict begin  { 5.0 50.34468 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end

3198 46704 a 411 47036 a Ft(F)181 b Fv(\()p Ft(s)p Fv(\))433
b Fx(in)g(N)3198 46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198 46704 a
tx@Dict begin  PutEnd  end
 3198
46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 4 def /dx x1 x sub 199
div def /F@pstplot (5.0/16.0*x^(2.0))  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 4 def /x1 15 def /dx x1 x sub 49
div def /F@pstplot ((--75.-5.*x)/11.)  tx@AlgToPs begin AlgToPs end
cvx def /xy { x 28.45274 mul F@pstplot 28.45274 mul } def  /ps@Exit
false def xy moveto  49 1 sub { /x x dx add def xy  dup 1.e30 28.45274
mul gt { moveto } { dup -1.e30 28.45274 mul lt { moveto } { L } ifelse
} ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy 
dup 1.e30 28.45274 mul gt { moveto } { dup -1.e30 28.45274 mul lt {
moveto } { L } ifelse } ifelse  } if  gsave 0.8 SLW 0  setgray  1.
.setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 3198 46704 a
tx@Dict begin  { 60.27452 81.88326 } PutCoor PutBegin  end
 3198 46704 a 922
x Ft(f)3839 47825 y Fq(1)3198 46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a 3198
46704 a
tx@Dict begin  { 238.33383 105.015 } PutCoor PutBegin  end
 3198 46704 a 922 x Ft(f)3839 47825 y Fq(2)3198
46704 y
tx@Dict begin  PutEnd  end
 3198 46704 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 113.81097 142.26372
  false NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0.
[1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  [ 426.79115 0.0   false
NArray  /DS 5.0 0. CLW mul add 2 div def /PSTricksDotFont 0. [1.0 0.0
0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale (b) show
grestore } bind def   1. .setopacityalpha  newpath n { transform floor
.5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 58104 48656 a
currentpoint initclip moveto

58104 48656 a 921 48656 a
 currentpoint currentpoint translate 1 0.78653 div 1 0.78653 div scale
neg exch neg exch translate
 921 48656 a 3985 x Fx(Ermittle)313
b(die)g(Arb)36 b(eit)312 b Ft(W)494 b Fx(in)313 b(Joule)g(\(J\),)g(die)
g(diese)g(Kraft)h(an)f(dem)f(Massest\374c)-36 b(k)313
b(v)-36 b(erric)g(h)g(tet,)874 54633 y(w)g(enn)433 b(es)h(v)-36
b(on)434 b Ft(s)368 b Fv(=)h(0)217 b Fx(m)434 b(bis)f(zu)g
Ft(s)369 b Fv(=)g(15)217 b Fx(m)434 b(b)36 b(ew)-36 b(egt)433
b(wird.)921 59170 y Ft(W)550 b Fv(=)p 4079 59170 9449
34 v 10034 w Fx(J)p 1 0 0 TeXcolorrgb 921 61715 a Ft(W)g
Fv(=)4079 60768 y Fd(R)4817 61119 y Fq(4)4602 62053 y(0)5801
60817 y Fv(5)p 5476 61405 1301 45 v 5476 62626 a(16)7204
61715 y Fu(\001)296 b Ft(s)8482 61233 y Fq(2)9229 61715
y Fv(d)p Ft(s)e Fv(+)12299 60817 y(5)h Fu(\001)g Fv(11)p
12299 61405 2911 45 v 13429 62626 a(2)921 66253 y Ft(W)550
b Fu(\031)369 b Fv(34)p Ft(;)p Fv(17)221 b Fx(J)921 68798
y(L\366sungssc)-36 b(hl\374ssel:)921 71343 y(Ein)504
b(Punkt)f(f\374r)h(die)f(ric)-36 b(h)g(tige)504 b(L\366sung.)h(Andere)e
(Sc)-36 b(hreib)g(w)g(eisen)502 b(des)i(Ergebnisses)g(sind)921
73335 y(eb)36 b(enfalls)434 b(als)h(ric)-36 b(h)g(tig)433
b(zu)g(w)-36 b(erten.)874 75881 y(T)-108 b(oleranzin)-36
b(terv)-72 b(all:)435 b Fv([)8 b(34)221 b Ft(J)123 b
Fv(;)656 b(35)221 b Ft(J)123 b Fv(])p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369 b(4.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 0 TeXcolorgray
24421 81281 a Fx(93)p 0 TeXcolorgray eop end
%%Page: 94 94
TeXDict begin 94 93 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 54804 45 v -2331 6921 a Fy(AN)678
b(4.3)e(-)i(8)f(In)-60 b(tegral)677 b(-)g(O)-60 b(A)677
b(-)h(Matura)f(2015/16)f(-)i(Haupttermin)p 0 TeXcolorgray
-2042 10229 a Fx(117.)p 0 TeXcolorgray 652 w(Gegeb)36
b(en)433 b(ist)h(die)f(P)-36 b(otenzfunktion)434 b Ft(f)575
b Fx(mit)434 b Ft(f)142 b Fv(\()p Ft(x)p Fv(\))368 b(=)h
Ft(x)27860 9747 y Fq(3)28386 10229 y Fx(.)921 14766 y(Gin)433
b(eine)h(Bedingung)f(f\374r)g(die)h(In)-36 b(tegrationsgrenzen)433
b Ft(b)h Fx(und)e Ft(c)h Fv(\()p Ft(b)369 b Fu(6)p Fv(=)g
Ft(c)p Fv(\))433 b Fx(so)h(an,)g(dass)17545 17741 y Fd(Z)18652
18092 y Fl(c)18160 20257 y(b)19115 19303 y Ft(f)142 b
Fv(\()p Ft(x)p Fv(\))221 b(d)p Ft(x)369 b Fv(=)f(0)1301
b Fx(gilt.)p 1 0 0 TeXcolorrgb 921 22742 a Ft(b)369 b
Fv(=)g Fu(\000)p Ft(c)921 27279 y Fx(L\366sungssc)-36
b(hl\374ssel:)921 29824 y(Ein)305 b(Punkt)g(f\374r)g(die)g(Angab)36
b(e)305 b(einer)g(k)-36 b(orrekten)305 b(Relation)i(zwisc)-36
b(hen)305 b Ft(b)g Fx(und)f Ft(c)p Fx(.)i(\304)-36 b(quiv)-72
b(alen)-36 b(te)921 31816 y(Relationen)390 b(sind)g(als)h(ric)-36
b(h)g(tig)389 b(zu)h(w)-36 b(erten,)390 b(eb)36 b(enso)390
b(k)-36 b(onkrete)390 b(Beispiele)h(wie)f Ft(b)369 b
Fv(=)g Fu(\000)p Fv(5)390 b Fx(und)921 33808 y Ft(c)369
b Fv(=)f(5)p Fx(.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 10229 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 12221 a Fr(AN)h(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray -2331 37283 V -2331 42712 a Fy(AN)632
b(4.3)e(-)h(9)g(Durc)-60 b(h\035ussrate)629 b(-)j(O)-60
b(A)631 b(-)g(Matura)g(2014/15)f(-)h(Neb)60 b(en-)-2331
45734 y(termin)717 b(1)p 0 TeXcolorgray -2042 49041 a
Fx(118.)p 0 TeXcolorgray 652 w(In)413 b(einem)h(W)-108
b(asserrohr)413 b(wird)h(durc)-36 b(h)412 b(einen)h(Sensor)g(die)h
(Durc)-36 b(h\035ussrate)412 b(\(=)h(Durc)-36 b(h\035uss-)921
51033 y(menge)399 b(pro)g(Zeiteinheit\))g(gemessen.)h(Die)g(F)-108
b(unktion)398 b Ft(D)435 b Fx(ordnet)399 b(jedem)g(Zeitpunkt)f
Ft(t)h Fx(die)921 53025 y(Durc)-36 b(h\035ussrate)388
b Ft(D)36 b Fv(\()p Ft(t)p Fv(\))389 b Fx(zu.)h(Dab)36
b(ei)390 b(wird)g Ft(t)f Fx(in)h(Min)-36 b(uten)388 b(und)h
Ft(D)36 b Fv(\()p Ft(t)p Fv(\))388 b Fx(in)i(Litern)f(pro)g(Min)-36
b(ute)921 55017 y(angegeb)36 b(en.)921 59554 y(Gib)433
b(die)g(Bedeutung)g(der)g(Zahl)17315 58607 y Fd(R)18053
58958 y Fq(120)17837 59893 y(60)19741 59554 y Ft(D)36
b Fv(\()p Ft(t)p Fv(\))221 b Ft(dt)432 b Fx(im)i(v)-36
b(orliegenden)434 b(K)-36 b(on)g(text)434 b(an.)p 1 0 0
TeXcolorrgb 921 62100 a(Der)362 b(A)-36 b(usdruc)g(k)361
b(b)36 b(esc)-36 b(hreibt)361 b(die)h(durc)-36 b(h)361
b(das)h(Rohr)f(ge\035ossene)i(W)-108 b(assermenge)362
b(\(in)f(Litern\))887 64092 y(v)-36 b(om)434 b(Zeitpunkt)f
Ft(t)369 b Fv(=)f(60)435 b Fx(bis)e(zum)g(Zeitpunkt)g
Ft(t)369 b Fv(=)f(120)p Fx(.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 49041 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 51033 a Fr(AN)h(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 67825 V 0 TeXcolorgray
24421 81281 a Fx(94)p 0 TeXcolorgray eop end
%%Page: 95 95
TeXDict begin 95 94 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)737 b(4.3)f(-)g(10)g(Bremsw)-60
b(eg)736 b(-)h(O)-60 b(A)736 b(-)g(Matura)g(2014/15)g(-)h(K)-60
b(omp)60 b(en-)-2331 4622 y(sationspr\374fung)p 0 TeXcolorgray
-2042 7929 a Fx(119.)p 0 TeXcolorgray 652 w(Ein)433 b(PKW)h(b)36
b(eginn)-36 b(t)433 b(zum)h(Zeitpunkt)e Ft(t)369 b Fv(=)g(0)433
b Fx(gleic)-36 b(hm\344\377ig)436 b(zu)d(bremsen.)921
9921 y(Die)451 b(F)-108 b(unktion)449 b Ft(v)498 b Fx(b)36
b(esc)-36 b(hreibt)449 b(die)h(Gesc)-36 b(h)g(windigk)g(eit)451
b Ft(v)48 b Fv(\()p Ft(t)p Fv(\))449 b Fx(des)h(PKW)g(zum)g(Zeitpunkt)g
Ft(t)769 11913 y Fx(\()p Ft(v)48 b Fv(\()p Ft(t)p Fv(\))432
b Fx(in)h(Metern)g(pro)g(Sekunde,)g Ft(t)h Fx(in)f(Sekunden\).)f(Es)i
(gilt:)h Ft(v)48 b Fv(\()p Ft(t)p Fv(\))367 b(=)i(20)296
b Fu(\000)f Fv(8)p Ft(t)p Fx(.)921 16450 y(Berec)-36
b(hne)342 b(die)g(L\344nge)h(desjenigen)f(W)-108 b(eges,)343
b(den)f(der)g(PKW)h(w)-36 b(\344hrend)342 b(des)g(gleic)-36
b(hm\344\377igen)921 18442 y(Bremsv)g(organgs)435 b(bis)e(zum)g
(Stillstand)h(zur\374c)-36 b(klegt.)p 1 0 0 TeXcolorrgb
921 22979 a(M\366glic)g(he)434 b(Berec)-36 b(hn)g(ung:)921
24971 y Ft(v)48 b Fv(\()p Ft(t)p Fv(\))368 b(=)g(0)i
Fu(\))f Ft(t)g Fv(=)f(2)p Ft(;)p Fv(5)12599 27393 y Fd(Z)13706
27744 y Fq(2)p Fl(;)p Fq(5)13214 29908 y(0)15185 28955
y Fv(\(20)296 b Fu(\000)f Fv(8)p Ft(t)p Fv(\))221 b Ft(dt)369
b Fv(=)501 b(\(20)p Ft(t)295 b Fu(\000)h Fv(4)p Ft(t)28510
28407 y Fq(2)29036 28955 y Fv(\))29542 27627 y Fd(\014)29542
28291 y(\014)29542 28955 y(\014)29910 27977 y Fq(2)p
Fl(;)p Fq(5)29910 29675 y(0)31537 28955 y Fv(=)369 b(25)921
33832 y Fx(Die)434 b(L\344nge)g(des)f(Bremsw)-36 b(eges)434
b(b)36 b(etr\344gt)434 b(25m.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9921 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 37565 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(95)p 0 TeXcolorgray
eop end
%%Page: 96 96
TeXDict begin 96 95 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)508 b(4.3)g(-)g(11)f(Halbierung)f
(einer)h(Fl\344c)-60 b(he)507 b(-)h(O)-60 b(A)508 b(-)g(Matura)f
(2015/16)-2617 4622 y(-)718 b(Neb)60 b(en)-60 b(termin)716
b(1)p 0 TeXcolorgray -2042 7929 a Fx(120.)p 0 TeXcolorgray
652 w(Gegeb)36 b(en)433 b(ist)h(die)f(reelle)h(F)-108
b(unktion)433 b Ft(f)576 b Fx(mit)433 b Ft(f)142 b Fv(\()p
Ft(x)p Fv(\))369 b(=)f Ft(x)27715 7447 y Fq(2)28241 7929
y Fx(.)921 12466 y(Berec)-36 b(hne)346 b(die)h(Stelle)g
Ft(b)g Fx(so,)h(dass)f(die)g(Fl\344c)-36 b(he)347 b(zwisc)-36
b(hen)347 b(der)f Ft(x)p Fx(-A)-36 b(c)g(hse)346 b(und)g(dem)h(Graphen)
921 14458 y(der)375 b(F)-108 b(unktion)374 b Ft(f)517
b Fx(im)375 b(In)-36 b(terv)-72 b(all)376 b Fv([)8 b(2;)597
b(4])376 b Fx(in)f(zw)-36 b(ei)376 b(gleic)-36 b(h)375
b(gro\377e)h(Fl\344c)-36 b(hen)375 b Ft(A)37071 14657
y Fq(1)37972 14458 y Fx(und)f Ft(A)41490 14657 y Fq(2)42391
14458 y Fx(geteilt)874 16450 y(wird)434 b(\(siehe)f(Abbildung\).)p
0 TeXcolorgray 0 TeXcolorgray 9915 40857 a
 currentpoint currentpoint translate 1.24446 1.24446 scale neg exch
neg exch translate
 9915 40857
a 10783 40857 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 188.06491 a add def
/d 0.0 a add neg def /h 145.03801 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 10783 40857 a 11807 39611 a @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray   0.8 SLW 0.25  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0.4 def /x1 0.66 def /dx x1 x sub 49 div
def /F@pstplot (x^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 142.26378 mul F@pstplot 142.26378 mul } def  /ps@Exit false def
xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy
 dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  93.8946 0.0
lineto 56.90463 0.0 lineto closepath gsave 0.25  setgray  0.2 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0.25  setgray   0.8 SLW 0.25  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0.66 def /x1 0.8 def /dx x1 x sub 49 div
def /F@pstplot (x^(2.0))  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 142.26378 mul F@pstplot 142.26378 mul } def  /ps@Exit false def
xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy
 dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  113.81145
0.0 lineto 93.8946 0.0 lineto closepath gsave 0.25  setgray  0.2 .setopacityalpha
 fill  grestore gsave 0.8 SLW 0.25  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 178.80656  0 -9.25835  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -9.25835
 178.80656  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-11.25761  def /maxTickline 133.7804  def /dT 1864651 abs 65536 div
viceversa { neg } if def /DT 0.2 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 142.26378  mul cntTick add def x abs MaxValue abs le { false {
x minTickline  moveto x maxTickline  lineto } { x tickstart STsize
mul  moveto x tickend STsize mul  lineto } ifelse } if } for } for
subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0 def }
if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul  moveto cntsubTick maxTickline STsize mul  lineto } { cntsubTick
tickstart STsize mul  moveto cntsubTick tickend STsize mul  lineto
} ifelse }{ exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat
subTwidth SLW subTColor subLSstroke grestore } if showOrigin { gsave
false { cntTick minTickline  moveto cntTick maxTickline  lineto } {
cntTick tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 142.26378
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7804
0.0 -11.25761   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.80656
0.0 -9.25835 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 133.7804  0 -11.25761  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -11.25761
 133.7804  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-9.25835  def /maxTickline 178.80656  def /dT 1864651 abs 65536 div
viceversa { neg } if def /DT 0.2 abs viceversa { neg } if def /subTNo
0 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 142.26378  mul cntTick add def x abs MaxValue abs le { false {
x minTickline exch moveto x maxTickline exch lineto } { x tickstart
STsize mul exch moveto x tickend STsize mul exch lineto } ifelse }
if } for } for subTwidth SLW subTColor subLSstroke grestore stroke
/dsubT 0 def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT
add def subTNo 1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick
minTickline STsize mul exch moveto cntsubTick maxTickline STsize mul
exch lineto } { cntsubTick tickstart STsize mul exch moveto cntsubTick
tickend STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick
cntsubTick dsubT add def } repeat subTwidth SLW subTColor subLSstroke
grestore } if showOrigin { gsave false { cntTick minTickline exch moveto
cntTick maxTickline exch lineto } { cntTick tickstart exch moveto cntTick
tickend exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{
/showOrigin true def } ifelse } for /showOrigin true def /dT dT neg
def /dsubT dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub
} ifelse { /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet
exch def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add {
/dx exch def /x dx log OffSet add 142.26378  mul cntTick add def x
abs MinValue abs le { false { x minTickline exch moveto x maxTickline
exch lineto } { x tickstart STsize mul exch moveto x tickend STsize
mul exch lineto } ifelse } if } for } for /dsubT 0 def subTwidth SLW
subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul exch moveto cntsubTick tickend STsize
mul exch lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def
} repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart exch moveto cntTick tickend exch lineto Twidth
SLW TColor LSstroke grestore }{ /showOrigin true def } ifelse } for
} if  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 133.7804
0.0 -11.25761   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 178.80656
0.0 -9.25835 0.0   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11807 39611 a
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 178.80656 133.7804 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 11807 39611
a 11807 39611 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 11807 39611 a 11464 39897 a Fx(x)11807
39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  PutEnd  end
 11807 39611 a 11807
39611 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 0.0 0.0 pop 178.80656 133.7804 exch pop } PutCoor
PutBegin  end
 11807 39611 a 11807
39611 a
tx@Dict begin  { 5.0 18.93042 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 11807 39611 a 10759 39943 a Fx(f\(x\))11807 39611
y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  PutEnd  end
 11807 39611 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -0.06508503852943727 def /x1 1.256863485653584
def /dx x1 x sub 199 div def /F@pstplot (x^(2.0))  tx@AlgToPs begin
AlgToPs end cvx def /xy { x 142.26378 mul F@pstplot 142.26378 mul }
def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy 
dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30 142.26378 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 142.26378 mul gt { moveto } { dup -1.e30
142.26378 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2
SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial 11807 39611 a
tx@Dict begin  { 54.77077 -3.55573 } PutCoor PutBegin  end
 11807 39611 a
571 x Fq(2)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 111.67758 -3.55573 } PutCoor PutBegin  end

11807 39611 a 571 x Fq(4)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a
11807 39611 a
tx@Dict begin  { 71.13188 25.60643 } PutCoor PutBegin  end
 11807 39611 a 828 x Fh(A)12716 40621 y
Fq(1)11807 39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 11807 39611 a
tx@Dict begin  { 98.16235 25.60643 } PutCoor PutBegin  end
 11807
39611 a 828 x Fh(A)12716 40621 y Fq(2)11807 39611 y
tx@Dict begin  PutEnd  end
 11807
39611 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 56.90463 0.0 56.90463 22.76271   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 93.8946 -0.15411 93.8946 61.96906 
 /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 113.81145 0.0 113.81145 91.04872  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
11807 39611 a
tx@Dict begin  { 91.76074 -3.55573 } PutCoor PutBegin  end
 11807 39611 a 615 x Fl(b)11807 39611 y
tx@Dict begin  PutEnd  end

11807 39611 a 11807 39611 a
tx@Dict begin  { 109.40912 109.83893 } PutCoor PutBegin  end
 11807 39611 a 923 x Ft(f)11807
39611 y
tx@Dict begin  PutEnd  end
 11807 39611 a 31601 40857 a
currentpoint initclip moveto
 31601 40857 a 9915
40857 a
 currentpoint currentpoint translate 1 1.24446 div 1 1.24446 div scale
neg exch neg exch translate
 9915 40857 a 1 0 0 TeXcolorrgb 921 44842 a Fx(M\366glic)-36
b(he)434 b(Berec)-36 b(hn)g(ung:)921 48432 y Fd(R)1659
48782 y Fl(b)1444 49717 y Fq(2)2338 49379 y Ft(x)3077
48897 y Fq(2)3824 49379 y Ft(dx)369 b Fv(=)6989 48432
y Fd(R)7727 48782 y Fq(4)7512 49717 y Fl(b)8474 49379
y Ft(x)9213 48897 y Fq(2)9961 49379 y Ft(dx)g Fu(\))13575
48856 y Fl(b)13978 48543 y Fk(3)p 13575 49069 864 45
v 13771 49837 a Fq(3)14866 49379 y Fu(\000)16328 48856
y Fq(2)16798 48543 y Fk(3)p 16328 49069 932 45 v 16558
49837 a Fq(3)17761 49379 y Fv(=)19275 48856 y Fq(4)19745
48543 y Fk(3)p 19275 49069 V 19505 49837 a Fq(3)20634
49379 y Fu(\000)22096 48856 y Fl(b)22499 48543 y Fk(3)p
22096 49069 864 45 v 22292 49837 a Fq(3)921 51371 y Ft(b)g
Fv(=)3593 50772 y Fk(3)3260 50287 y Fu(p)p 4367 50287
1301 54 v 1084 x Fv(36)921 55908 y Fx(L\366sungssc)-36
b(hl\374ssel:)921 58454 y(Ein)504 b(Punkt)f(f\374r)h(die)f(ric)-36
b(h)g(tige)504 b(L\366sung.)h(Andere)e(Sc)-36 b(hreib)g(w)g(eisen)502
b(des)i(Ergebnisses)g(sind)921 60446 y(eb)36 b(enfalls)434
b(als)h(ric)-36 b(h)g(tig)433 b(zu)g(w)-36 b(erten.)874
62991 y(T)-108 b(oleranzin)-36 b(terv)-72 b(all:)435
b Fv([)8 b(3)p Ft(;)p Fv(29;)657 b(3)p Ft(;)p Fv(31])921
65536 y Fx(Die)608 b(A)-36 b(ufgab)36 b(e)608 b(ist)f(auc)-36
b(h)607 b(dann)g(als)h(ric)-36 b(h)g(tig)607 b(gel\366st)i(zu)e(w)-36
b(erten,)607 b(w)-36 b(enn)607 b(b)36 b(ei)608 b(k)-36
b(orrektem)873 67528 y(Ansatz)433 b(das)h(Ergebnis)f(aufgrund)g(eines)h
(Rec)-36 b(henfehlers)433 b(nic)-36 b(h)g(t)433 b(ric)-36
b(h)g(tig)433 b(ist.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 7929 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 9921 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 71262 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(96)p 0 TeXcolorgray eop end
%%Page: 97 97
TeXDict begin 97 96 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)718 b(4.3)f(-)h(12)f(T)-179
b(ac)-60 b(hograph)716 b(-)h(O)-60 b(A)718 b(-)g(Matura)f(NT)g(2)g
(15/16)p 0 TeXcolorgray -2042 4907 a Fx(121.)p 0 TeXcolorgray
652 w(Mithilfe)528 b(eines)f(T)-108 b(ac)-36 b(hographen)527
b(kann)g(die)g(Gesc)-36 b(h)g(windigk)g(eit)528 b(eines)f(F)-108
b(ahrzeugs)526 b(in)h(Ab-)921 6899 y(h\344ngigk)-36 b(eit)528
b(v)-36 b(on)526 b(der)g(Zeit)h(aufgezeic)-36 b(hnet)527
b(w)-36 b(erden.)526 b(Es)h(sei)g Ft(v)48 b Fv(\()p Ft(t)p
Fv(\))525 b Fx(die)h(Gesc)-36 b(h)g(windigk)g(eit)921
8891 y(zum)442 b(Zeitpunkt)h Ft(t)p Fx(.)g(Die)g(Zeit)g(wird)g(in)g
(Stunden)e(\(h\))h(angegeb)36 b(en,)443 b(die)g(Gesc)-36
b(h)g(windigk)g(eit)921 10882 y(in)433 b(Kilometern)h(pro)g(Stunde)e
(\(km/h\).)921 13428 y(Ein)h(F)-108 b(ahrzeug)433 b(startet)g(zum)h
(Zeitpunkt)e Ft(t)369 b Fv(=)g(0)p Fx(.)921 15973 y(Gib)433
b(die)g(Bedeutung)g(der)g(Gleic)-36 b(h)g(ung)18939 18211
y Fd(Z)20046 18561 y Fq(0)p Fl(;)p Fq(5)19554 20726 y(0)21525
19773 y Ft(v)48 b Fv(\()p Ft(t)p Fv(\))o Ft(dt)368 b
Fv(=)h(40)921 23413 y Fx(un)-36 b(ter)432 b(V)-108 b(erw)-36
b(endung)432 b(der)h(k)-36 b(orrekten)434 b(Einheiten)f(im)h(gegeb)36
b(enen)433 b(K)-36 b(on)g(text)434 b(an!)p 1 0 0 TeXcolorrgb
921 27951 a(Diese)450 b(Gleic)-36 b(h)g(ung)448 b(sagt)i(aus,)f(dass)h
(das)f(F)-108 b(ahrzeug)448 b(in)h(der)g(ersten)f(halb)36
b(en)449 b(Stunde)f(\(bzw.)921 29943 y(im)434 b(Zeitin)-36
b(terv)-72 b(all)434 b Fv([)8 b(0)221 b Ft(h)p Fv(;)g(0)p
Ft(;)p Fv(5)g Ft(h)p Fv(])p Fx(\))436 b(40)e(km)g(zur\374c)-36
b(kgelegt)434 b(hat.)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb
0 TeXcolorgray 47992 4907 a Fs(___/1)p 1 0 0 TeXcolorrgb
47998 6899 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray -2331 33750 54804 45 v 0 TeXcolorgray
24421 81281 a Fx(97)p 0 TeXcolorgray eop end
%%Page: 98 98
TeXDict begin 98 97 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)1053 b(4.3)f(-)h(13)f(P\035anzen)-60
b(w)g(ac)g(hstum)1052 b(-)h(O)-60 b(A)1052 b(-)h(Matura)f(2013/14)-2331
4622 y(Haupttermin)p 0 TeXcolorgray -2042 7929 a Fx(122.)p
0 TeXcolorgray 652 w(Die)483 b(un)-36 b(ten)481 b(stehende)h(Abbildung)
f(b)36 b(esc)-36 b(hreibt)482 b(n\344herungsw)-36 b(eise)482
b(das)g(W)-108 b(ac)-36 b(hstum)482 b(einer)921 9921
y(Sc)-36 b(hnellw\374c)g(hsigen)455 b(P\035anze.)g(Sie)h(zeigt)g(die)f
(W)-108 b(ac)-36 b(hstumsgesc)g(h)g(windigk)g(eit)456
b Ft(v)502 b Fx(in)456 b(Abh\344n-)921 11913 y(gigk)-36
b(eit)435 b(v)-36 b(on)434 b(der)f(Zeit)g Ft(t)h Fx(w)-36
b(\344hrend)433 b(eines)g(Zeitraums)h(v)-36 b(on)433
b(60)i(T)-108 b(agen.)p 0 TeXcolorgray 0 TeXcolorgray
921 38126 a
 currentpoint currentpoint translate 0.96008 0.96008 scale neg exch
neg exch translate
 921 38126 a 921 38126 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 423.20209 a add def
/d 0.0 a add neg def /h 208.11896 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 921 38126 a 3014
35498 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  0.0 -28.45273 T 8 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 404.29427 0.0 -18.90782 0.0   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 28.45273 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  -28.4523 0.0 T 15 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 184.37376 0.0 -23.7452   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 28.4523 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 404.29427  0 -18.90782  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -18.90782
 404.29427  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-23.7452  def /maxTickline 184.37376  def /dT 1864650 abs 65536 div
viceversa { neg } if def /DT 5. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 5.69046  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 5.69046
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 184.37376
0.0 -23.7452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 404.29427
0.0 -18.90782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 184.37376  0 -23.7452  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -23.7452
 184.37376  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.90782  def /maxTickline 404.29427  def /dT 1864678 abs 65536 div
viceversa { neg } if def /DT 2. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 14.22636  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 14.22636  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 184.37376
0.0 -23.7452   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 404.29427
0.0 -18.90782 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 1833 32562 a Fk(2)1833 29413
y(4)1833 26263 y(6)1833 23113 y(8)1427 19964 y(10)1427
16814 y(12)5961 36701 y(5)2540 b(10)2338 b(15)f(20)h(25)f(30)h(35)g(40)
f(45)h(50)f(55)h(60)f(65)h(70)3014 35498 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 3014 35498
a 3014 35498 a
tx@Dict begin  { 404.29427 184.37376 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 5.0 44.86206 6.0 2.0 140.  Uput UUput } PutCoor PutBegin
 end
 3014 35498 a
531 35719 a Fl(t)313 b Fi(\(in)h(T)-78 b(agen\))3014
35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a 3014 35498 a
tx@Dict begin  PutEnd  end
 3014 35498 a 3014 35498
a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 0.0 0.0 pop 404.29427 184.37376 exch pop } PutCoor
PutBegin  end
 3014 35498 a 3014 35498 a
tx@Dict begin  { 5.0 62.51053 6.0 2.0 -40.  Uput UUput } PutCoor PutBegin
 end

3014 35498 a -446 35719 a Fl(v)32 b Fq(\()p Fl(t)p Fq(\))313
b Fi(\(in)h(cm/T)-78 b(ag\))3014 35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a
3014 35498 a
tx@Dict begin  PutEnd  end
 3014 35498 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 227.61841 56.90546 0.0 0.0   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul
exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 0.8 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 284.52301 56.90546 227.61841 56.90546
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def  [ 341.42761 0.0 284.52301 56.90546  
/Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not {
n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW mul add dup
1.4  mul exch 0.25 mul neg add /arrowlength exch def 4 copy /y1 ED
/x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1
Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n n
1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt {
/Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos 0.5
 abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha cos
ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop pop
} repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add div
}{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x2
x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 3014 35498 a
tx@Dict begin  { 117.896 35.61757 } PutCoor PutBegin  end
 3014 35498 a Fl(v)3014
35498 y
tx@Dict begin  PutEnd  end
 3014 35498 a 47768 38126 a
currentpoint initclip moveto
 47768 38126 a 921
38126 a
 currentpoint currentpoint translate 1 0.96008 div 1 0.96008 div scale
neg exch neg exch translate
 921 38126 a 5977 x Fx(Gib)366 b(an,)i(um)f(wie)g(viel)i(cm)e
(die)g(P\035anze)g(in)g(diesem)g(Zeitraum)g(insgesam)-36
b(t)367 b(gew)-36 b(ac)g(hsen)367 b(ist!)p 1 0 0 TeXcolorrgb
1054 46125 a Fq(40)p Fp(\001)p Fq(4)p 1054 46338 1673
45 v 1655 47106 a(2)3155 46648 y Fv(+)294 b(10)i Fu(\001)f
Fv(4)h(+)9107 46125 y Fq(10)p Fp(\001)p Fq(4)p 9107 46338
V 9708 47106 a(2)11281 46648 y Fv(=)369 b(140)921 49193
y Fx(Die)434 b(P\035anze)f(w)-36 b(\344c)g(hst)434 b(in)f(diesen)h(60)g
(T)-108 b(agen)434 b(140)g(cm.)921 51739 y(Ein)551 b(w)-36
b(eiterer)551 b(\(sehr)f(aufw)-36 b(endiger\))552 b(L\366sungsw)-36
b(eg)551 b(w)-36 b(\344re)551 b(die)h(Berec)-36 b(hn)g(ung)549
b(der)i(F)-108 b(unkti-)921 53731 y(onsgleic)-36 b(h)g(ung)425
b(in)f(den)g(einzelnen)g(W)-108 b(ac)-36 b(hstumsabsc)g(hnitten)423
b(so)-36 b(wie)426 b(die)e(Berec)-36 b(hn)g(ung)424 b(der)921
55723 y(en)-36 b(tsprec)g(henden)431 b(b)36 b(estimm)-36
b(ten)433 b(In)-36 b(tegrale.)p 0 0 0 TeXcolorrgb 1 0 0
TeXcolorrgb 0 TeXcolorgray 47992 7929 a Fs(___/1)p 1 0 0
TeXcolorrgb 47998 9921 a Fr(AN)369 b(4.3)p 0 0 0 TeXcolorrgb
1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 59456 54804 45
v 0 TeXcolorgray 24421 81281 a Fx(98)p 0 TeXcolorgray
eop end
%%Page: 99 99
TeXDict begin 99 98 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1599 a Fy(AN)479 b(4.3)f(-)g(14)g(Gesc)-60
b(h)g(windigk)g(eitsfunktion)474 b(-)479 b(O)-60 b(A)478
b(-)h(Matura)f(2013/14)-2438 4622 y(1.)717 b(Neb)60 b(en)-60
b(termin)p 0 TeXcolorgray -2042 7929 a Fx(123.)p 0 TeXcolorgray
652 w(Die)534 b(nac)-36 b(hstehende)532 b(Abbildung)h(zeigt)h(den)f
(Graphen)f(einer)h(F)-108 b(unktion)533 b Ft(v)48 b Fx(,)533
b(die)h(die)f(Ge-)921 9921 y(sc)-36 b(h)g(windigk)g(eit)434
b Ft(v)48 b Fv(\()p Ft(t)p Fv(\))432 b Fx(in)i(Abh\344ngigk)-36
b(eit)434 b(v)-36 b(on)434 b(der)f(Zeit)h Ft(t)f Fx(\()p
Ft(t)g Fx(in)g(Sekunden\))f(mo)36 b(delliert.)p 0 TeXcolorgray
0 TeXcolorgray 7667 28497 a
 currentpoint currentpoint translate 0.78598 0.78598 scale neg exch
neg exch translate
 7667 28497 a 8101 28497 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 357.93555 a add def
/d 0.0 a add neg def /h 185.52191 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end

8101 28497 a 12384 26419 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 319.2398  0 -38.69574  0 ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -38.69574
 319.2398  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-18.77982  def /maxTickline 166.7421  def /dT 1864679 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 28.45274  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 28.45274
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 166.7421
0.0 -18.77982   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 319.2398
0.0 -38.69574 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 166.7421  0 -18.77982  ArrowA CP 4
2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -18.77982
 166.7421  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-38.69574  def /maxTickline 319.2398  def /dT 1864780 abs 65536 div
viceversa { neg } if def /DT 20. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 1.42271  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 1.42271  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 166.7421
0.0 -18.77982   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  0.8
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 319.2398
0.0 -38.69574 0.0   /Lineto /lineto load def 0  setlinejoin false 
NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 0.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 10668 23554 a Fq(20)10668 20404
y(40)10668 17255 y(60)10668 14105 y(80)10198 10955 y(100)15299
27764 y(1)2679 b(2)h(3)f(4)h(5)g(6)f(7)h(8)f(9)2445 b(10)2209
b(11)-38866 b Fp(\000)p Fq(1)12384 26419 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 12384 26419
a 12384 26419 a
tx@Dict begin  { 319.2398 166.7421 pop 0.0 0.0 exch pop } PutCoor PutBegin
 end
 12384 26419 a 12384 26419 a
tx@Dict begin  { 5.0 4.56934 7.55675 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 12384 26419
a 12131 26837 a Fx(t)12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a 12384
26419 a
tx@Dict begin  PutEnd  end
 12384 26419 a 12384 26419 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 12384 26419 a 12384
26419 a
tx@Dict begin  { 0.0 0.0 pop 319.2398 166.7421 exch pop } PutCoor PutBegin
 end
 12384 26419 a 12384 26419 a
tx@Dict begin  { 5.0 19.90952 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 12384 26419 a 11282
26751 a Fx(v\(t\))12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a 12384 26419
a
tx@Dict begin  PutEnd  end
 12384 26419 a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.0 SLW 0  setgray   0.0 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x 0. def /x1 10. def /dx x1 x sub 49 div def
/F@pstplot (-x^(2.0)+100.0)  tx@AlgToPs begin AlgToPs end cvx def /xy
{ x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit false def xy
/lineto load stopped { moveto } if  49 1 sub { /x x dx add def xy 
dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit not {
/x x1 def xy  dup 1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271
mul lt { moveto } { L } ifelse } ifelse  } if  284.52744 0.0 lineto
0.0 0.0 lineto closepath gsave 0.6 0.2 0  setrgbcolor  0.10 .setopacityalpha
 fill  grestore gsave 0.0 SLW 0  setgray  1. .setopacityalpha   0 
setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x 0 def /x1 10 def /dx x1 x sub 199
div def /F@pstplot (-x^(2.0)+100.0)  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 28.45274 mul F@pstplot 1.42271 mul } def  /ps@Exit false
def xy moveto  199 1 sub { /x x dx add def xy  dup 1.e30 1.42271 mul
gt { moveto } { dup -1.e30 1.42271 mul lt { moveto } { L } ifelse }
ifelse  } ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup
1.e30 1.42271 mul gt { moveto } { dup -1.e30 1.42271 mul lt { moveto
} { L } ifelse } ifelse  } if  gsave 1.2 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 12384 26419 a
tx@Dict begin  { 176.40692 105.28085 } PutCoor PutBegin  end

12384 26419 a 572 x Fx(v)12384 26419 y
tx@Dict begin  PutEnd  end
 12384 26419 a
@beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0 0 1  setrgbcolor  [ -284.52744
0.0   false NArray  /DS 3.0 0. CLW mul add 2 div def /PSTricksDotFont
0. [1.0 0.0 0.0 1.0 0.0 0.0] FontDot /Dot { moveto gsave 1.  1.  scale
(b) show grestore } bind def   1. .setopacityalpha  newpath n { transform
floor .5 add exch floor .5 add exch itransform Dot } repeat  end
 
@endspecial 47723 28497 a
currentpoint initclip moveto

47723 28497 a 7667 28497 a
 currentpoint currentpoint translate 1 0.78598 div 1 0.78598 div scale
neg exch neg exch translate
 7667 28497 a 921 34474 a Fx(Gib)433
b(an,)h(w)-36 b(as)434 b(die)f(A)-36 b(ussage)17094 36711
y Fd(Z)18201 37062 y Fq(5)17709 39227 y(0)18949 38274
y Ft(v)48 b Fv(\()p Ft(t)p Fv(\))n Fx(d)p Ft(t)369 b(>)24048
36711 y Fd(Z)25155 37062 y Fq(10)24663 39227 y(5)26373
38274 y Ft(v)48 b Fv(\()p Ft(t)p Fv(\))o Fx(d)o Ft(t)921
41914 y Fx(im)434 b(v)-36 b(orliegenden)434 b(K)-36 b(on)g(text)433
b(b)36 b(edeutet!)p 1 0 0 TeXcolorrgb 921 46451 a(Die)574
b(zur\374c)-36 b(kgelegte)575 b(W)-108 b(egstrec)-36
b(k)g(e)574 b(ist)f(in)h(den)f(ersten)g(5)h(Sekunden)f(gr\366\377er)h
(als)g(in)g(den)921 48443 y(zw)-36 b(eiten)434 b(5)g(Sekunden.)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 47992
7929 a Fs(___/1)p 1 0 0 TeXcolorrgb 47998 9921 a Fr(AN)369
b(4.3)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
-2331 51918 54804 45 v 0 TeXcolorgray 24421 81281 a Fx(99)p
0 TeXcolorgray eop end
%%Page: 100 100
TeXDict begin 100 99 bop 0 TeXcolorgray 0 TeXcolorgray
0 TeXcolorgray -2331 1493 a Fy(AN)703 b(4.3)f(-)h(15)f(Fl\344c)-60
b(heninhaltsb)60 b(erec)-60 b(hn)g(ung)698 b(-)k(MC)h(-)g(Matura)f(NT)
-2438 4515 y(1)717 b(16/17)p 0 TeXcolorgray -2042 7823
a Fx(124.)p 0 TeXcolorgray 652 w(In)300 b(der)f(nac)-36
b(hstehenden)298 b(Abbildung)h(sind)h(die)g(Graphen)e(der)i(P)-36
b(olynomfunktionen)301 b Ft(f)441 b Fx(und)921 9815 y
Ft(g)389 b Fx(dargestellt.)344 b(Diese)e(sc)-36 b(hneiden)341
b(einander)g(an)h(den)f(Stellen)h Fu(\000)p Fv(3)p Ft(;)p
Fv(0)h Fx(und)e Fv(3)h Fx(und)f(b)36 b(egrenzen)921 11806
y(die)433 b(b)36 b(eiden)433 b(grau)h(markierten)g(Fl\344c)-36
b(henst\374c)g(k)g(e.)p 0 TeXcolorgray 0 TeXcolorgray
9916 33518 a
 currentpoint currentpoint translate 0.75958 0.75958 scale neg exch
neg exch translate
 9916 33518 a 9916 33518 a
tx@Dict begin  CM STV CP T newpath /a 0.0 def /w 320.94604 a add def
/d 0.0 a add neg def /h 230.12495 a add def a neg d moveto a neg h
L w h L w d L closepath clip newpath 0 0 moveto setmatrix end
 9916 33518 a 26923
22557 a @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  0.0 -68.28644 T 7 {
gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0
0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 167.30156 0.0 -153.64449 0.0   /Lineto /lineto load def
0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 0.0 34.14322 T } repeat end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  -136.57288 0.0 T 10
{ gsave  /ArrowA { BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto
0 0.1 L stroke 0 0 moveto  EndArrow  moveto } def /ArrowB { BeginArrow
1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow
 } def /ArrowInside { } def  gsave 0.4 SLW 0.75  setgray  /ArrowA {
BeginArrow 1.  1.  scale 1 setlinecap 0 0 moveto 0 0.1 L stroke 0 0
moveto  EndArrow  moveto } def /ArrowB { BeginArrow 1.  1.  scale 1
setlinecap 0 0 moveto 0 0.1 L stroke 0 0 moveto  EndArrow  } def /ArrowInside
{ } def  [ 0.0 131.10983 0.0 -99.01512   /Lineto /lineto load def 0
 setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if
() length 0 gt { 3.0 2.  CLW mul add dup 1.4  mul exch 0.25 mul neg
add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 0.4 SLW 0.75  setgray  1. .setopacityalpha
  1  setlinecap [  1.5  1.5 ] -2 -1 add  DashLine  grestore grestore
grestore 34.14322 0.0 T } repeat end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 167.30156  0 -153.64449  0 ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq false and exch 2 lt true and or { /viceversa -153.64449
 167.30156  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-99.01512  def /maxTickline 131.10983  def /dT 2237610 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { xStart } def /MaxValue { xEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke stroke} def /subLSstroke {  0  setlinejoin 0 
setlinecap stroke stroke} def 0 dT MaxValue 1 add { /cntTick exch def
logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add div
dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 34.14322  mul cntTick add def x abs MaxValue abs le { false { x
minTickline  moveto x maxTickline  lineto } { x tickstart STsize mul
 moveto x tickend STsize mul  lineto } ifelse } if } for } for subTwidth
SLW subTColor subLSstroke grestore stroke /dsubT 0 def } if dsubT abs
0 gt { gsave /cntsubTick cntTick dsubT add def subTNo 1 sub { cntsubTick
abs MaxValue abs le { false { cntsubTick minTickline STsize mul  moveto
cntsubTick maxTickline STsize mul  lineto } { cntsubTick tickstart
STsize mul  moveto cntsubTick tickend STsize mul  lineto } ifelse }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave false {
cntTick minTickline  moveto cntTick maxTickline  lineto } { cntTick
tickstart  moveto cntTick tickend  lineto } ifelse Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for /showOrigin
true def /dT dT neg def /dsubT dsubT neg def 0 dT MinValue epsilon
viceversa { add }{ sub } ifelse { /cntTick exch def logLines { gsave
1 1 DT cvi { 1 sub /OffSet exch def -10 subTNo 1 add div dup 10 add
exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet add 34.14322
 mul cntTick add def x abs MinValue abs le { false { x minTickline
 moveto x maxTickline  lineto } { x tickstart STsize mul  moveto x
tickend STsize mul  lineto } ifelse } if } for } for /dsubT 0 def subTwidth
SLW subTColor subLSstroke grestore } dsubT abs 0 gt { gsave /cntsubTick
cntTick dsubT add def subTNo 1 sub { cntsubTick abs MinValue abs le
{ cntsubTick tickstart STsize mul  moveto cntsubTick tickend STsize
mul  lineto }{ exit } ifelse /cntsubTick cntsubTick dsubT add def }
repeat subTwidth SLW subTColor subLSstroke grestore } if showOrigin
{ gsave cntTick tickstart  moveto cntTick tickend  lineto Twidth SLW
TColor LSstroke grestore }{ /showOrigin true def } ifelse } for } if
 end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.10983
0.0 -99.01512   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.30156
0.0 -153.64449 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath 1.6 SLW 0  setgray  /ArrowA { moveto }
def /ArrowB { BeginArrow 1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul
add dup 2 div /w ED mul dup /h ED mul /a ED { 0 h T 1 -1 scale } if
gsave w neg h moveto 0 0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha
 fill grestore grestore 0 h a sub moveto   EndArrow  } def /ArrowInside
{ } def   /showOrigin true def 0 131.10983  0 -99.01512  ArrowA CP
4 2 roll ArrowB 2 copy /yEnd exch def /xEnd exch def gsave L  0  setlinejoin
0  setlinecap stroke  stroke grestore /yStart exch def /xStart exch
def 0 dup 2 mod 0 eq true and exch 2 lt false and or { /viceversa -99.01512
 131.10983  gt { true }{ false } ifelse def /epsilon 0.01 def /minTickline
-153.64449  def /maxTickline 167.30156  def /dT 2237610 abs 65536 div
viceversa { neg } if def /DT 1. abs viceversa { neg } if def /subTNo
2 def subTNo 0 gt { /dsubT dT subTNo div def}{ /dsubT 0 def } ifelse
-2.0 0.0 /tickend exch def /tickstart exch def /Twidth 0.4  def /subTwidth
0.2  def /STsize 0.75 def /TColor { 0  setgray  } def /subTColor {
0.5  setgray  } def /MinValue { yStart } def /MaxValue { yEnd 3.0 2.
 CLW mul add 1.4  mul viceversa { add epsilon sub }{ sub epsilon add
} ifelse } def /logLines { false } def /LSstroke {  0  setlinejoin
0  setlinecap stroke  stroke} def /subLSstroke {  0  setlinejoin 0
 setlinecap stroke  stroke} def 0 dT MaxValue 1 add { /cntTick exch
def logLines { gsave 1 1 DT { 1 sub /OffSet exch def -10 subTNo 1 add
div dup 10 add exch dup -0.1 mul 1 add { /dx exch def /x dx log OffSet
add 34.14322  mul cntTick add def x abs MaxValue abs le { false { x
minTickline exch moveto x maxTickline exch lineto } { x tickstart STsize
mul exch moveto x tickend STsize mul exch lineto } ifelse } if } for
} for subTwidth SLW subTColor subLSstroke grestore stroke /dsubT 0
def } if dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def subTNo
1 sub { cntsubTick abs MaxValue abs le { false { cntsubTick minTickline
STsize mul exch moveto cntsubTick maxTickline STsize mul exch lineto
} { cntsubTick tickstart STsize mul exch moveto cntsubTick tickend
STsize mul exch lineto } ifelse }{ exit } ifelse /cntsubTick cntsubTick
dsubT add def } repeat subTwidth SLW subTColor subLSstroke grestore
} if showOrigin { gsave false { cntTick minTickline exch moveto cntTick
maxTickline exch lineto } { cntTick tickstart exch moveto cntTick tickend
exch lineto } ifelse Twidth SLW TColor LSstroke grestore }{ /showOrigin
true def } ifelse } for /showOrigin true def /dT dT neg def /dsubT
dsubT neg def 0 dT MinValue epsilon viceversa { add }{ sub } ifelse
{ /cntTick exch def logLines { gsave 1 1 DT cvi { 1 sub /OffSet exch
def -10 subTNo 1 add div dup 10 add exch dup -0.1 mul 1 add { /dx exch
def /x dx log OffSet add 34.14322  mul cntTick add def x abs MinValue
abs le { false { x minTickline exch moveto x maxTickline exch lineto
} { x tickstart STsize mul exch moveto x tickend STsize mul exch lineto
} ifelse } if } for } for /dsubT 0 def subTwidth SLW subTColor subLSstroke
grestore } dsubT abs 0 gt { gsave /cntsubTick cntTick dsubT add def
subTNo 1 sub { cntsubTick abs MinValue abs le { cntsubTick tickstart
STsize mul exch moveto cntsubTick tickend STsize mul exch lineto }{
exit } ifelse /cntsubTick cntsubTick dsubT add def } repeat subTwidth
SLW subTColor subLSstroke grestore } if showOrigin { gsave cntTick
tickstart exch moveto cntTick tickend exch lineto Twidth SLW TColor
LSstroke grestore }{ /showOrigin true def } ifelse } for } if  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 0.0 131.10983
0.0 -99.01512   /Lineto /lineto load def 0  setlinejoin false  NArray
n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0 2.  CLW
mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch def 4
copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def
ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul
add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5
 1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul
dup /h ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0
0 L w h L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore
grestore 0 h a sub moveto   EndArrow  } def /ArrowInside { } def  1.6
SLW 0  setgray  /ArrowA { moveto } def /ArrowB { BeginArrow 1.  1.
 scale  false 0.25 1.4 3.0 2. CLW mul add dup 2 div /w ED mul dup /h
ED mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h
L w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  } def /ArrowInside { } def  [ 167.30156
0.0 -153.64449 0.0   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 3.0
2.  CLW mul add dup 1.4  mul exch 0.25 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.6 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial 25678 19063 a Fq(1)25678 15283
y(2)25678 11504 y(3)24946 26576 y Fp(\000)p Fq(1)24946
30355 y Fp(\000)p Fq(2)30468 23903 y(1)3309 b(2)h(3)f(4)-19733
b Fp(\000)p Fq(1)-4982 b Fp(\000)p Fq(2)h Fp(\000)p Fq(3)f
Fp(\000)p Fq(4)26923 22557 y
tx@Dict begin  gsave STV CP T /ps@refangle 140.  def grestore  end
 26923 22557 a 26923 22557
a
tx@Dict begin  { 167.30156 131.10983 pop 0.0 0.0 exch pop } PutCoor
PutBegin  end
 26923 22557 a 26923 22557 a
tx@Dict begin  { 5.0 6.2015 5.16667 0.0 140.  Uput UUput } PutCoor
PutBegin  end
 26923 22557 a 26580 22843
a Fx(x)26923 22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 26923 22557 a
tx@Dict begin  PutEnd  end
 26923
22557 a 26923 22557 a
tx@Dict begin  gsave STV CP T /ps@refangle -40.  def grestore  end
 26923 22557 a 26923 22557 a
tx@Dict begin  { 0.0 0.0 pop 167.30156 131.10983 exch pop } PutCoor
PutBegin  end
 26923
22557 a 26923 22557 a
tx@Dict begin  { 5.0 43.40958 9.0 3.0 -40.  Uput UUput } PutCoor PutBegin
 end
 26923 22557 a 24521 22889 a Fx(f\(x\),g\(x\))
26923 22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 26923 22557 a
tx@Dict begin  PutEnd  end
 26923 22557
a @beginspecial @setspecial
  tx@Dict begin STP newpath 0.8 SLW 0  setgray   0.8 SLW 0  setgray
 /ArrowA { /lineto load stopped { moveto } if } def /ArrowB { } def
/ArrowInside { } def    /x -3. def /x1 3. def /dx x1 x sub 49 div def
/F@pstplot (0.2*(x+3.0)*x*(x-3.0))  tx@AlgToPs begin AlgToPs end cvx
def /xy { x 34.14322 mul F@pstplot 34.14322 mul } def  /ps@Exit false
def xy /lineto load stopped { moveto } if  49 1 sub { /x x dx add def
xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322 mul
lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30
34.14322 mul lt { moveto } { L } ifelse } ifelse  } if  102.42966 0.0
lineto  0.8 SLW 0  setgray  /ArrowA { /lineto load stopped { moveto
} if } def /ArrowB { } def /ArrowInside { } def    /x 3. def /x1 -3.
def /dx x1 x sub 49 div def /F@pstplot (-0.06*(x+3.0)*(x-3.0)*x*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot
34.14322 mul } def  /ps@Exit false def xy /lineto load stopped { moveto
} if  49 1 sub { /x x dx add def xy  dup 1.e30 34.14322 mul gt { moveto
} { dup -1.e30 34.14322 mul lt { moveto } { L } ifelse } ifelse  }
ps@Exit { exit } if repeat ps@Exit not { /x x1 def xy  dup 1.e30 34.14322
mul gt { moveto } { dup -1.e30 34.14322 mul lt { moveto } { L } ifelse
} ifelse  } if  -102.42966 0.0 lineto closepath gsave 0  setgray  0.1
.setopacityalpha  fill  grestore gsave 0.8 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.2 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.500000000000003 def /x1 4.900000000000003
def /dx x1 x sub 199 div def /F@pstplot (0.2*(x+3.0)*x*(x-3.0))  tx@AlgToPs
begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot 34.14322 mul
} def  /ps@Exit false def xy moveto  199 1 sub { /x x dx add def xy
 dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322 mul lt
{ moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat ps@Exit
not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30
34.14322 mul lt { moveto } { L } ifelse } ifelse  } if  gsave 1.2 SLW
0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke
 grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  2.8 SLW 0  setgray  /ArrowA { moveto } def /ArrowB
{ } def /ArrowInside { } def    /x -4.500000000000003 def /x1 4.900000000000003
def /dx x1 x sub 199 div def /F@pstplot (-0.06*(x+3.0)*(x-3.0)*x*x)
 tx@AlgToPs begin AlgToPs end cvx def /xy { x 34.14322 mul F@pstplot
34.14322 mul } def  /ps@Exit false def xy moveto  199 1 sub { /x x
dx add def xy  dup 1.e30 34.14322 mul gt { moveto } { dup -1.e30 34.14322
mul lt { moveto } { L } ifelse } ifelse  } ps@Exit { exit } if repeat
ps@Exit not { /x x1 def xy  dup 1.e30 34.14322 mul gt { moveto } {
dup -1.e30 34.14322 mul lt { moveto } { L } ifelse } ifelse  } if 
gsave 2.8 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore end
 
@endspecial
26923 22557 a
tx@Dict begin  { 74.43196 57.36035 } PutCoor PutBegin  end
 26923 22557 a 572 x Ft(g)26923 22557 y
tx@Dict begin  PutEnd  end

26923 22557 a 26923 22557 a
tx@Dict begin  { -52.58032 83.99254 } PutCoor PutBegin  end
 26923 22557 a 922 x Ft(f)26923
22557 y
tx@Dict begin  PutEnd  end
 26923 22557 a 45443 33518 a
currentpoint initclip moveto
 45443 33518 a 9916
33518 a
 currentpoint currentpoint translate 1 0.75958 div 1 0.75958 div scale
neg exch neg exch translate
 9916 33518 a 855 37502 a Fx(W)-108 b(elc)-36
b(he)368 b(der)g(nac)-36 b(hstehenden)367 b(Gleic)-36
b(h)g(ungen)368 b(geb)36 b(en)368 b(den)g(Inhalt)h Ft(A)g
Fx(der)f(\(gesam)-36 b(ten\))368 b(grau)921 39494 y(markierten)434
b(Fl\344c)-36 b(he)433 b(an?)h(Kreuze)f(die)h(b)36 b(eiden)433
b(zutre\033enden)e(Gleic)-36 b(h)g(ungen)433 b(an!)p
7632 40461 31120 45 v 7632 45388 45 4928 v 8340 43397
a Ft(A)369 b Fv(=)11065 41737 y Fd(\014)11065 42401 y(\014)11065
43065 y(\014)11065 43730 y(\014)11434 41835 y(Z)12541
42186 y Fq(3)12049 44351 y Fp(\000)p Fq(3)13528 43397
y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)g
Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))220 b Fx(d)p Ft(x)22801
41737 y Fd(\014)22801 42401 y(\014)22801 43065 y(\014)22801
43730 y(\014)p 36342 45388 V 38708 45388 V 7632 45432
31120 45 v 7632 50267 45 4835 v 8340 48369 a Ft(A)369
b Fv(=)g(2)296 b Fu(\001)12675 46807 y Fd(Z)13782 47157
y Fq(3)13290 49322 y(0)14529 48369 y Fv(\()p Ft(g)48
b Fv(\()p Ft(x)p Fv(\))294 b Fu(\000)h Ft(f)142 b Fv(\()p
Ft(x)p Fv(\)\))221 b Fx(d)p Ft(x)p 36342 50267 V 38708
50267 V 7632 50311 31120 45 v 7632 55238 45 4928 v 8340
53248 a(A)369 b Fv(=)11065 51686 y Fd(Z)12172 52037 y
Fq(0)11680 54201 y Fp(\000)p Fq(3)13159 53248 y Fv(\()p
Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)g Ft(g)48
b Fv(\()p Ft(x)p Fv(\)\))220 b Fx(d)p Ft(x)295 b Fv(+)24034
51686 y Fd(Z)25141 52037 y Fq(3)24649 54201 y(0)25888
53248 y Fv(\()p Ft(g)48 b Fv(\()p Ft(x)p Fv(\))295 b
Fu(\000)g Ft(f)142 b Fv(\()p Ft(x)p Fv(\)\))p Fx(d)o
Ft(x)p 36342 55238 V 1 0 0 TeXcolorrgb 37051 53107 a
Fn(4)p 0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray
38708 55238 V 7632 55283 31120 45 v 7632 60210 45 4928
v 8340 58219 a Ft(A)369 b Fv(=)11065 56559 y Fd(\014)11065
57223 y(\014)11065 57887 y(\014)11065 58552 y(\014)11434
56657 y(Z)12541 57008 y Fq(0)12049 59173 y Fp(\000)p
Fq(3)13528 58219 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p
Fv(\))295 b Fu(\000)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))220
b Fx(d)p Ft(x)22801 56559 y Fd(\014)22801 57223 y(\014)22801
57887 y(\014)22801 58552 y(\014)23465 58219 y Fv(+)24772
56657 y Fd(Z)25879 57008 y Fq(3)25387 59173 y(0)26626
58219 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b
Fu(\000)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))p Fx(d)o Ft(x)p
36342 60210 V 38708 60210 V 7632 60254 31120 45 v 7632
65181 45 4928 v 8340 63191 a(A)369 b Fv(=)11065 61629
y Fd(Z)12172 61979 y Fq(0)11680 64144 y Fp(\000)p Fq(3)13159
63191 y Fv(\()p Ft(f)142 b Fv(\()p Ft(x)p Fv(\))295 b
Fu(\000)g Ft(g)48 b Fv(\()p Ft(x)p Fv(\)\))220 b Fx(d)p
Ft(x)295 b Fv(+)24034 61530 y Fd(\014)24034 62195 y(\014)24034
62859 y(\014)24034 63523 y(\014)24403 61629 y(Z)25510
61979 y Fq(3)25018 64144 y(0)26257 63191 y Fv(\()p Ft(f)142
b Fv(\()p Ft(x)p Fv(\))295 b Fu(\000)g Ft(g)48 b Fv(\()p
Ft(x)p Fv(\)\))p Fx(d)o Ft(x)35309 61530 y Fd(\014)35309
62195 y(\014)35309 62859 y(\014)35309 63523 y(\014)p
36342 65181 V 1 0 0 TeXcolorrgb 37051 63050 a Fn(4)p
0 0 0 TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray 38708
65181 V 7632 65226 31120 45 v 47992 7823 a Fs(___/1)p
1 0 0 TeXcolorrgb 47998 9815 a Fr(AN)369 b(4.3)p 0 0 0
TeXcolorrgb 1 0 0 TeXcolorrgb 0 TeXcolorgray -2331 69254
54804 45 v 0 TeXcolorgray 24095 81281 a Fx(100)p 0 TeXcolorgray
eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
